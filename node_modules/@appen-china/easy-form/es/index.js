function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useEffect, useRef } from 'react';
import { Button, Form, ConfigProvider } from 'antd';
import ResizeObserver from 'resize-observer-polyfill';
import cx from 'classnames';
import { isEqual } from 'lodash';
import BaseField from './components/BaseField';
import ImageTextField from './components/ImageTextField';
import { LayoutMode } from './types';
import utils, { getFieldsFromCondition, ruleTrigger, parseFormFields } from './utils';
var DarkTheme = /*#__PURE__*/React.lazy(function () {
  return import('./themes/DarkTheme');
});
var LightTheme = /*#__PURE__*/React.lazy(function () {
  return import('./themes/LightTheme');
});
var defaultContainerSize = {
  width: 416
};

var EasyForm = function EasyForm(_ref) {
  var focusFieldKey = _ref.focusFieldKey,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? 'light' : _ref$theme,
      _ref$hideLabel = _ref.hideLabel,
      hideLabel = _ref$hideLabel === void 0 ? false : _ref$hideLabel,
      layoutMode = _ref.layoutMode,
      _ref$fields = _ref.fields,
      initialFields = _ref$fields === void 0 ? [] : _ref$fields,
      _ref$conditions = _ref.conditions,
      conditions = _ref$conditions === void 0 ? [] : _ref$conditions,
      _ref$effects = _ref.effects,
      effects = _ref$effects === void 0 ? [] : _ref$effects,
      _ref$rules = _ref.rules,
      rules = _ref$rules === void 0 ? [] : _ref$rules,
      _ref$autoFocus = _ref.autoFocus,
      autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus,
      _ref$footerVisible = _ref.footerVisible,
      footerVisible = _ref$footerVisible === void 0 ? true : _ref$footerVisible,
      submitText = _ref.submitText,
      cancelText = _ref.cancelText,
      onFieldsChange = _ref.onFieldsChange,
      onSubmit = _ref.onSubmit,
      onCancel = _ref.onCancel,
      onChange = _ref.onChange,
      renderLabel = _ref.renderLabel,
      uploader = _ref.uploader;
  var containerRef = useRef(null);

  var _useState = useState(defaultContainerSize),
      containerSize = _useState[0],
      setContainerSize = _useState[1];

  var _Form$useForm = Form.useForm(),
      form = _Form$useForm[0];

  var _useState2 = useState([]),
      fields = _useState2[0],
      setFields = _useState2[1];

  var _useState3 = useState({}),
      initialValues = _useState3[0],
      setInitialValues = _useState3[1];

  var _useState4 = useState({}),
      fieldRulesMap = _useState4[0],
      setFieldRulesMap = _useState4[1];

  var handleResize = function handleResize() {
    if (containerRef.current) {
      var _containerRef$current = containerRef.current.getBoundingClientRect(),
          width = _containerRef$current.width;

      setContainerSize({
        width: width
      });
    }
  };

  useEffect(function () {
    new ResizeObserver(handleResize).observe(containerRef.current);
    handleResize();
  }, []);
  useEffect(function () {
    // init fields
    if (initialFields.length > 0) {
      var parsedValue = parseFormFields(initialFields); // trigger initial rule effects

      var _rules$reduce = rules.reduce(function (acc, curr) {
        return ruleTrigger(curr, acc.updatedFields, acc.updatedValues, initialFields, conditions, effects);
      }, {
        updatedFields: parsedValue.fields,
        updatedValues: parsedValue.initialValues
      }),
          updatedFields = _rules$reduce.updatedFields,
          updatedValues = _rules$reduce.updatedValues;

      setFields(updatedFields);
      setInitialValues(updatedValues);
    }
  }, [initialFields]);
  useEffect(function () {
    // when initialValues changed, means initialFields changed
    // form changed so reset fields
    var currentValues = form.getFieldsValue(true);

    if (!isEqual(initialValues, currentValues)) {
      form.resetFields();
    }
  }, [initialValues]);
  useEffect(function () {
    // init field rules map, like [fieldName]: [ruleId1, ruleId2, ...]
    if (rules.length > 0 && conditions.length > 0 && effects.length > 0) {
      var map = {};
      rules.forEach(function (rule) {
        // check if the rule reaches the requirement
        if (rule.condition !== undefined && rule.effects !== undefined && Array.isArray(rule.effects) && rule.effects.length > 0) {
          var ruleCondition = conditions.find(function (c) {
            return c.id === rule.condition;
          });
          var ruleEffects = effects.filter(function (e) {
            return rule.effects.includes(e.id);
          }); // rule condition is defined and all effects are defined

          if (ruleCondition && ruleEffects.length === rule.effects.length) {
            var fieldNames = getFieldsFromCondition(ruleCondition, conditions);
            fieldNames.forEach(function (fieldName) {
              if (!map[fieldName]) {
                map[fieldName] = [];
              }

              if (!map[fieldName].includes(rule.id)) {
                map[fieldName].push(rule.id);
              }
            });
          }
        }
      });
      setFieldRulesMap(map);
    }
  }, [conditions, effects, rules]);

  var handleValuesChange = function handleValuesChange(changedValues, allValues) {
    Object.keys(changedValues).forEach(function (fieldName) {
      if (fieldRulesMap[fieldName]) {
        var fieldRules = rules.filter(function (r) {
          return fieldRulesMap[fieldName].includes(r.id);
        });

        var _fieldRules$reduce = fieldRules.reduce(function (acc, curr) {
          return ruleTrigger(curr, acc.updatedFields, acc.updatedValues, initialFields, conditions, effects);
        }, {
          updatedFields: fields,
          updatedValues: _extends({}, initialValues, allValues)
        }),
            updatedFields = _fieldRules$reduce.updatedFields,
            updatedValues = _fieldRules$reduce.updatedValues;

        setFields(updatedFields);
        form.setFieldsValue(updatedValues);
      }
    });

    if (onChange) {
      setTimeout(function () {
        var formValues = form.getFieldsValue();
        onChange(changedValues, formValues);
      }, 0);
    }
  };

  var handleFinish = function handleFinish(values) {
    onSubmit(values);
  };

  var handleFinishFailed = function handleFinishFailed() {
    setTimeout(function () {
      var _containerRef$current2;

      var err = (_containerRef$current2 = containerRef.current) == null ? void 0 : _containerRef$current2.querySelector('.easyform-form-item-has-error');

      if (err != null && err.scrollIntoViewIfNeeded) {
        err.scrollIntoViewIfNeeded();
      }
    }, 0);
  };

  var handleFieldsChange = function handleFieldsChange(changedFields, allFields) {
    if (onFieldsChange) {
      onFieldsChange(changedFields, allFields);
    }
  };

  var autoFocusField = function autoFocusField(field, index) {
    if (focusFieldKey) {
      return focusFieldKey === field.name;
    }

    return autoFocus && index === fields.findIndex(function (f) {
      return f.visible && !f.readonly;
    });
  };

  return /*#__PURE__*/React.createElement("div", {
    ref: containerRef,
    style: {
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(React.Suspense, {
    fallback: /*#__PURE__*/React.createElement(React.Fragment, null)
  }, theme === 'dark' ? /*#__PURE__*/React.createElement(DarkTheme, null) : /*#__PURE__*/React.createElement(LightTheme, null)), /*#__PURE__*/React.createElement(ConfigProvider, {
    prefixCls: "easyform"
  }, /*#__PURE__*/React.createElement(Form, {
    size: layoutMode === LayoutMode.COMPACT ? 'small' : undefined,
    form: form,
    layout: "vertical",
    className: cx('easy-form', {
      'easy-form--compact': layoutMode === LayoutMode.COMPACT
    }),
    colon: false,
    initialValues: initialValues,
    onFinish: handleFinish,
    onFinishFailed: handleFinishFailed,
    onValuesChange: handleValuesChange,
    onFieldsChange: handleFieldsChange
  }, fields.map(function (field, index) {
    return /*#__PURE__*/React.createElement(BaseField, {
      hideLabel: hideLabel,
      key: field.name,
      field: field,
      autoFocus: autoFocusField(field, index),
      renderLabel: renderLabel,
      uploader: uploader,
      layoutMode: layoutMode,
      containerSize: containerSize
    });
  }), footerVisible && /*#__PURE__*/React.createElement("div", {
    style: {
      paddingTop: 24
    }
  }, /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    htmlType: "submit",
    className: "form-btn-submit"
  }, submitText || 'Submit'), onCancel && /*#__PURE__*/React.createElement(Button, {
    onClick: onCancel,
    className: "form-btn-cancel"
  }, cancelText || 'Cancel')))));
};

export default EasyForm;
export { utils, ImageTextField };
//# sourceMappingURL=index.js.map