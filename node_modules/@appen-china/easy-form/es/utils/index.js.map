{"version":3,"sources":["../../src/utils/index.ts"],"names":["pinyin","cloneDeep","FieldControlType","FieldValueType","ConditionType","FieldOperatorType","AggregationOperatorType","OptionType","isContained","value","options","Array","isArray","index","length","valueItem","find","i","isContainedForNested","values","result","reduce","preVal","currVal","option","o","children","checkValueIsContained","defaultValue","field","type","CASCADER","CHECKBOX","RADIO","SELECT","getSupportedValueTypesByControlType","SWITCH","BOOLEAN","TEXTAREA","STRING","NUMBER","praseValueByValueType","val","startsWith","endsWith","JSON","parse","e","console","log","map","v","num","parseFloat","Number","isNaN","undefined","toString","parseOptions","label","group","disabled","desc","referenceUrl","parseFormFields","initialFields","fields","initialValues","forEach","name","Object","includes","supportedValueTypes","valueType","item","optionValueType","newField","visible","required","mode","clickStopPropagation","readonly","isRTL","optionType","DEFAULT","validator","optionSearchable","optionFoldable","isContain","push","getFieldsFromCondition","condition","allConditions","AGGREGATION","conditions","acc","cid","currCondition","c","id","concat","FIELD","isValuePassCondition","checkValue","conditionValue","operator","cValue","START","END","split","sort","EQUAL","NOT_EQUAL","GREATER","conditionNum","GREATER_EQUAL","LESS","LESS_EQUAL","CONTAINS","some","checkCondition","allValues","passRes","AND","every","OR","getColSpanForOptions","containerWidth","optionLengths","replace","a","b","avgLength","Math","floor","colSpans","cols","span","textFilter","target","filter","match","splits","toUpperCase","join","indexOf","ruleTrigger","rule","allFields","effects","ruleCondition","ruleEffects","updatedFields","updatedValues","passed","effect","findIndex","f","attribute","fieldValue","fieldParsedValue","bool","validate","config","checkExtra","check","configFields","rules","parsedValue","curr","displayFields","pass","ignoreFieldsSet","Set","ignoreFields","keys","has","parseDisplayValues","formConfig","reservedFields","fieldsWithValue","displayValues","key"],"mappings":"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","sourcesContent":["import pinyin from 'pinyin-match';\nimport { cloneDeep } from 'lodash';\nimport {\n  Field,\n  FieldValue,\n  FieldControlType,\n  FieldValueType,\n  FieldOption,\n  InFieldOption,\n  Condition,\n  ConditionType,\n  FieldOperatorType,\n  AggregationOperatorType,\n  OptionType,\n  FormConfig,\n  Rule,\n  Effect,\n} from '../types';\n\nexport const isContained = (value: any | any[], options: FieldOption[]) => {\n  if (Array.isArray(value)) {\n    for (let index = 0; index < value.length; index += 1) {\n      const valueItem = value[index];\n      if (!isContained(valueItem, options)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !!options.find((i) => i.value === value);\n};\n\n/**\n * options contained value for nested structures\n * @param values\n * @param options\n */\nexport function isContainedForNested(values: FieldValue[] = [], options: FieldOption[]): boolean {\n  const result = values.reduce((preVal: { options: FieldOption[]; isContained: boolean}, currVal: FieldValue) => {\n    if (!preVal.isContained || !preVal.options || preVal.options.length < 1) {\n      return preVal;\n    }\n    const option = preVal.options?.find((o) => o.value === currVal);\n    if (option) {\n      // eslint-disable-next-line no-param-reassign\n      preVal.isContained = true;\n      if (option.children && option.children.length > 0) {\n        // eslint-disable-next-line no-param-reassign\n        preVal.options = option.children;\n      }\n    } else {\n      // eslint-disable-next-line no-param-reassign\n      preVal.isContained = false;\n    }\n    return preVal;\n  }, { options, isContained: true });\n  return result.isContained;\n}\n\nexport function checkValueIsContained(defaultValue: FieldValue | FieldValue[], field: Field) {\n  switch (field.type) {\n    case FieldControlType.CASCADER:\n      return Array.isArray(defaultValue) && isContainedForNested(defaultValue, field.options || []);\n    case FieldControlType.CHECKBOX:\n    case FieldControlType.RADIO:\n    case FieldControlType.SELECT:\n      return isContained(defaultValue, field.options || []);\n    default:\n      return true;\n  }\n}\n\n/**\n * get supported valueType array by field control type\n * @param type field control type\n */\nexport function getSupportedValueTypesByControlType(type: FieldControlType): FieldValueType[] {\n  if (type === FieldControlType.SWITCH) {\n    return [FieldValueType.BOOLEAN];\n  }\n\n  if (type === FieldControlType.TEXTAREA) {\n    return [FieldValueType.STRING];\n  }\n\n  return [FieldValueType.STRING, FieldValueType.NUMBER];\n}\n\n/**\n * parse field value by field value type\n * @param value field value\n * @param type field value type\n */\nexport function praseValueByValueType(\n  value: undefined | FieldValue | FieldValue[],\n  type: FieldValueType,\n): undefined | FieldValue | FieldValue[] {\n  let val = value;\n  if (typeof val === 'string' && val.startsWith('[') && val.endsWith(']')) {\n    // try to parse as an array string, such as [1,2] or [\"A\", \"B\"]\n    try {\n      val = JSON.parse(val);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(`Parse as array string failed. Value is: ${value}`);\n    }\n  }\n\n  // continue\n  if (typeof val === 'object' && Array.isArray(val)) {\n    // if default value is an array\n    return val.map((v) => praseValueByValueType(v, type) as FieldValue);\n  }\n\n  if (type === FieldValueType.BOOLEAN) {\n    if (typeof val === 'boolean') return val;\n    if (typeof val === 'string') return val === 'true';\n    if (typeof val === 'number') return !!val;\n    return false;\n  }\n\n  if (type === FieldValueType.NUMBER) {\n    const num = parseFloat(val as string);\n    return Number.isNaN(num) ? undefined : num;\n  }\n\n  return val?.toString();\n}\n\n/**\n * parse field option item's value and label\n * parse the option value to right value type if necessary\n * @param options initial field options\n * @param type field value type\n */\nexport function parseOptions(\n  options: (FieldValue | InFieldOption)[] = [],\n  type: FieldValueType,\n): FieldOption[] {\n  return options.map((option) => {\n    let value;\n    let label;\n    let group;\n    let disabled;\n    let desc;\n    let referenceUrl;\n    let children;\n\n    if (typeof option === 'string' || typeof option === 'number' || typeof option === 'boolean') {\n      value = praseValueByValueType(option, type);\n      label = option?.toString();\n    } else {\n      value = praseValueByValueType(option.value, type);\n      label = (option.label || option.value)?.toString();\n      if (option.group) {\n        group = option.group.toString();\n      }\n      ({ disabled, desc, referenceUrl, children } = option);\n      if (children && children.length > 0) {\n        children = parseOptions(children, type);\n      }\n    }\n    disabled = disabled === true || disabled === 'true';\n\n    return { value, label, group, disabled, desc, referenceUrl, children } as FieldOption;\n  });\n}\n\n/**\n * parse fields including field validation, value parse, option value parse...\n * @param initialFields\n */\nexport function parseFormFields(\n  initialFields: Field[],\n): { fields: Field[]; initialValues: { [key: string]: FieldValue | FieldValue[] } } {\n  const fields: Field[] = [];\n  const initialValues: { [key: string]: FieldValue | FieldValue[] } = {};\n\n  initialFields.forEach((field) => {\n    if (\n      field.name !== undefined &&\n      field.type !== undefined &&\n      Object.values(FieldControlType).includes(field.type)\n    ) {\n      const supportedValueTypes = getSupportedValueTypesByControlType(field.type);\n      let valueType = supportedValueTypes[0];\n      if (field.valueType !== undefined && supportedValueTypes.includes(field.valueType)) {\n        // if valueType provided and is right\n        ({ valueType } = field);\n      } else if (field.valueType === undefined) {\n        // if valueType not provided, try to get valueType form defaultValue or options\n        let item;\n        if (field.options !== undefined && field.options.length > 0) {\n          item = typeof field.options[0] === 'object' ? field.options[0].value : field.options[0];\n        } else if (field.defaultValue !== undefined) {\n          item = field.defaultValue;\n        }\n\n        if (item !== undefined) {\n          const optionValueType = typeof item as FieldValueType;\n          if (supportedValueTypes.includes(optionValueType)) {\n            valueType = optionValueType;\n          }\n        }\n      }\n      const newField: Field = {\n        name: field.name,\n        label: field.label || field.name,\n        type: field.type,\n        valueType,\n        visible: field.visible !== undefined ? !!field.visible : true,\n        required: field.required !== undefined ? !!field.required : false,\n        mode: field.mode,\n        clickStopPropagation: field?.clickStopPropagation,\n        // FIXME: if field is readonly with required and empty defaultValue\n        readonly: field.readonly !== undefined ? !!field.readonly : false,\n        isRTL: field.isRTL,\n        optionType: field.optionType || OptionType.DEFAULT,\n        validator: field.validator,\n      };\n\n      if (field.options !== undefined && Array.isArray(field.options) && field.options.length > 0) {\n        newField.options = parseOptions(field.options, valueType);\n        newField.optionSearchable = field.optionSearchable !== undefined ? !!field.optionSearchable : false;\n        newField.optionFoldable = field.optionFoldable !== undefined ? !!field.optionFoldable : false;\n      }\n\n      const defaultValue = praseValueByValueType(field.defaultValue, valueType);\n      if (defaultValue !== undefined) {\n        const isContain = checkValueIsContained(defaultValue, newField);\n        if (isContain) {\n          newField.defaultValue = defaultValue;\n          initialValues[field.name] = defaultValue;\n        }\n      }\n\n      fields.push(newField);\n    }\n  });\n\n  return { fields, initialValues };\n}\n\n/**\n * get all related fields from condition\n * @param condition the condition should be parsed\n * @param conditions all conditions\n */\nexport function getFieldsFromCondition(condition: Condition, allConditions: Condition[]): string[] {\n  let fields: string[] = [];\n  if (\n    condition.type === ConditionType.AGGREGATION &&\n    condition.conditions !== undefined &&\n    Array.isArray(condition.conditions) &&\n    condition.conditions.length > 0\n  ) {\n    fields = condition.conditions.reduce((acc, cid) => {\n      const currCondition = allConditions.find((c) => c.id === cid);\n      return acc.concat(currCondition ? getFieldsFromCondition(currCondition, allConditions) : []);\n    }, [] as string[]);\n  } else if (\n    condition.type === ConditionType.FIELD &&\n    condition.field !== undefined\n  ) {\n    fields.push(condition.field);\n  }\n  return fields;\n}\n\n/**\n * compare value and condition value and check is pass the condition\n * @param value origin value, user input\n * @param conditionValue condition defined value\n * @param operator field condtion operator\n */\nexport function isValuePassCondition(\n  checkValue: FieldValue | FieldValue[],\n  conditionValue: string,\n  operator: FieldOperatorType,\n): boolean {\n  let cValue = conditionValue;\n  if (typeof conditionValue !== 'string') {\n    cValue = (conditionValue as (number | boolean | object)).toString();\n  } else if (operator !== FieldOperatorType.START && operator !== FieldOperatorType.END) {\n    cValue = conditionValue.split(',').sort().toString();\n  }\n  let value = checkValue;\n  if (\n    Array.isArray(checkValue) &&\n    operator !== FieldOperatorType.START &&\n    operator !== FieldOperatorType.END\n  ) {\n    value = cloneDeep(checkValue).sort();\n  }\n  switch (operator) {\n    case FieldOperatorType.EQUAL:\n      return value.toString() === cValue;\n\n    case FieldOperatorType.NOT_EQUAL:\n      return value.toString() !== cValue;\n\n    case FieldOperatorType.GREATER: {\n      const conditionNum = parseFloat(cValue);\n      return Number.isNaN(conditionNum) ? false : value > conditionNum;\n    }\n\n    case FieldOperatorType.GREATER_EQUAL: {\n      const conditionNum = parseFloat(cValue);\n      return Number.isNaN(conditionNum) ? false : value >= conditionNum;\n    }\n\n    case FieldOperatorType.LESS: {\n      const conditionNum = parseFloat(cValue);\n      return Number.isNaN(conditionNum) ? false : value < conditionNum;\n    }\n\n    case FieldOperatorType.LESS_EQUAL: {\n      const conditionNum = parseFloat(cValue);\n      return Number.isNaN(conditionNum) ? false : value <= conditionNum;\n    }\n\n    case FieldOperatorType.CONTAINS:\n      if (typeof value === 'object' && Array.isArray(value)) {\n        return value.some((v) => v.toString() === cValue);\n      }\n      return value.toString().includes(cValue);\n\n    case FieldOperatorType.START:\n      if (typeof value === 'object' && Array.isArray(value)) {\n        return value[0]?.toString() === cValue;\n      }\n      return value.toString().startsWith(cValue);\n\n    case FieldOperatorType.END:\n      if (typeof value === 'object' && Array.isArray(value)) {\n        return value[value.length - 1]?.toString() === cValue;\n      }\n      return value.toString().endsWith(cValue);\n\n    default:\n      return false;\n  }\n}\n\n/**\n * check whether values pass the condition\n * @param condition check condition\n * @param allConditions all conditions, used to find any nest condition\n * @param allValues all values, used to check the field value in any condition\n */\nexport function checkCondition(\n  condition: Condition,\n  allConditions: Condition[],\n  allValues: { [key: string]: FieldValue | FieldValue[] },\n): boolean {\n  if (\n    condition.type === ConditionType.AGGREGATION &&\n    condition.conditions !== undefined &&\n    Array.isArray(condition.conditions) &&\n    condition.conditions.length > 0\n  ) {\n    const passRes: boolean[] = condition.conditions.map((cid) => {\n      const currCondition = allConditions.find((c) => c.id === cid);\n      return currCondition ? checkCondition(currCondition, allConditions, allValues) : false;\n    });\n    const operator = condition.operator as AggregationOperatorType;\n    if (operator === AggregationOperatorType.AND) {\n      return passRes.every((i) => i);\n    }\n    if (operator === AggregationOperatorType.OR) {\n      return passRes.some((i) => i);\n    }\n  } else if (\n    condition.type === ConditionType.FIELD &&\n    condition.field !== undefined &&\n    allValues[condition.field] !== undefined\n  ) {\n    return isValuePassCondition(\n      allValues[condition.field],\n      condition.value as string,\n      condition.operator as FieldOperatorType,\n    );\n  }\n  return false;\n}\n\n/**\n * calc col span value for options based on the container\n * @param containerWidth\n * @param avgOptionLength\n */\nexport function getColSpanForOptions(containerWidth: number, options: FieldOption[]) {\n  // eslint-disable-next-line no-control-regex\n  const optionLengths = options.map((o) => (o.label || o.value).toString().replace(/[^\\x00-\\xff]/g, '01').length);\n  optionLengths.sort((a, b) => a - b);\n  const avgLength = optionLengths[Math.floor(optionLengths.length * 0.75)]; // use 75% length\n\n  const colSpans = [1, 2, 3, 4, 6, 8, 12, 24];\n  let cols = containerWidth / (((avgLength + 12) / 2) * 14);\n  if (options.length < cols) {\n    cols = options.length;\n  }\n\n  let span = colSpans[0];\n  for (let i = 1; i < colSpans.length; i += 1) {\n    if (colSpans[i] > cols) {\n      span = colSpans[colSpans.length - i];\n      break;\n    }\n  }\n  return span;\n}\n\n/**\n * check if the target pass the filter rule\n * @param target target string\n * @param filter filter key\n */\nexport function textFilter(target = '', filter = '') {\n  if (!filter) {\n    // no filter key\n    return true;\n  }\n  if (pinyin.match(target, filter) !== false) {\n    // match chinese character\n    return true;\n  }\n  const splits = target.split(' ').map((i) => i[0].toUpperCase()).join('');\n  if (splits.indexOf(filter.toUpperCase()) >= 0) {\n    // match english initials\n    return true;\n  }\n  return target.toUpperCase().indexOf(filter.toUpperCase()) >= 0;\n}\n\n/**\n * trigger a rule\n * @param rule\n * @param allFields all fields\n * @param allValues all values\n * @param initialFields initial fields for default value\n * @param conditions all conditions\n * @param effects all effects\n * @returns { updatedFields, updatedValues } all updated fields and values\n */\nexport function ruleTrigger(\n  rule: Rule,\n  allFields: Field[],\n  allValues: { [key: string]: FieldValue | FieldValue[] },\n  initialFields: Field[],\n  conditions?: Condition[],\n  effects?: Effect[],\n) {\n  const ruleCondition = conditions.find((c) => c.id === rule.condition);\n  const ruleEffects = effects.filter((e) => rule.effects.includes(e.id));\n\n  const updatedFields = [...allFields];\n  const updatedValues = { ...allValues };\n\n  if (ruleCondition) {\n    // check if the values pass the condition\n    const passed = checkCondition(ruleCondition, conditions, allValues);\n\n    ruleEffects.forEach((effect) => {\n      const index = updatedFields.findIndex((f) => f.name === effect.field);\n      if (index >= 0 && effect.attribute !== undefined) {\n        if (effect.attribute === 'value') {\n          // if passed, use effect's value\n          if (passed) {\n            const fieldValue = effect.value;\n            const fieldParsedValue = praseValueByValueType(\n              fieldValue,\n              updatedFields[index].valueType,\n            );\n            if (fieldParsedValue) {\n              updatedValues[updatedFields[index].name] = fieldParsedValue;\n            }\n          }\n        } else {\n          // visible, required, readonly\n          // if passed, use effect's value, otherwise, use initial setting\n          let bool = effect.value.toString() === 'true';\n          if (!passed) {\n            bool = initialFields[index][effect.attribute] !== undefined ? !!initialFields[index][effect.attribute] : effect.attribute === 'visible';\n          }\n          updatedFields[index][effect.attribute] = bool;\n          if (bool && effect.attribute === 'visible') {\n            updatedValues[updatedFields[index].name] = bool\n              ? praseValueByValueType(\n                initialFields[index].defaultValue, updatedFields[index].valueType,\n              )\n              : undefined;\n          }\n        }\n      }\n    });\n  }\n\n  return { updatedFields, updatedValues };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function validate(config: FormConfig, values: any, checkExtra: {\n  check: boolean;\n  ignoreFields?: string[];\n} = {\n  check: false,\n}): boolean {\n  const { fields: configFields, conditions = [], effects = [], rules = [] } = config;\n  const fields = (configFields || []).map((field) => ({\n    ...field,\n    ...values[field.name] !== undefined && {\n      defaultValue: values[field.name],\n    },\n  }));\n\n  const parsedValue = parseFormFields(fields);\n  // trigger rule effects\n  const { updatedFields } = rules.reduce(\n    (acc, curr) => ruleTrigger(\n      curr, acc.updatedFields, acc.updatedValues, fields, conditions, effects,\n    ),\n    { updatedFields: parsedValue.fields, updatedValues: parsedValue.initialValues },\n  );\n\n  const displayFields = updatedFields.filter((i) => i.visible);\n\n  for (let i = 0; i < displayFields.length; i += 1) {\n    const field = displayFields[i];\n    const value = values[field.name];\n    if (field.required && (value === undefined || value === null || value === '')) {\n      return false;\n    }\n    if (field.validator) {\n      const result = field.validator(value);\n      if (result === false || ((result as { pass: boolean })?.pass === false)) {\n        return false;\n      }\n    }\n  }\n  if (checkExtra.check) {\n    const ignoreFieldsSet = new Set(checkExtra.ignoreFields || []);\n    if (\n      Object.keys(values)\n        .filter((field) => !ignoreFieldsSet.has(field))\n        .some((field) => !displayFields.find((i) => i.name === field))\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function parseDisplayValues(\n  formConfig: FormConfig,\n  values: any,\n  reservedFields?: string[],\n) {\n  const { fields: configFields, conditions = [], effects = [], rules = [] } = formConfig;\n  const fieldsWithValue = (configFields || []).map((field) => ({\n    ...field,\n    ...values[field.name] !== undefined && {\n      defaultValue: values[field.name],\n    },\n  }));\n\n  const parsedValue = parseFormFields(fieldsWithValue);\n  // trigger rule effects\n  const { updatedFields: fields } = rules.reduce(\n    (acc, curr) => ruleTrigger(\n      curr, acc.updatedFields, acc.updatedValues, fieldsWithValue, conditions, effects,\n    ),\n    { updatedFields: parsedValue.fields, updatedValues: parsedValue.initialValues },\n  );\n\n  const displayValues: { [key: string]: any } = {};\n  reservedFields?.forEach((key) => {\n    displayValues[key] = values[key];\n  });\n\n  fields.filter((i) => i.visible).forEach(({ name }) => {\n    displayValues[name] = values[name];\n  });\n\n  return displayValues;\n}\n\nexport default {\n  getSupportedValueTypesByControlType,\n  praseValueByValueType,\n  parseOptions,\n  parseFormFields,\n  getFieldsFromCondition,\n  isValuePassCondition,\n  checkCondition,\n  getColSpanForOptions,\n  textFilter,\n  ruleTrigger,\n  validate,\n  parseDisplayValues,\n};\n"],"file":"index.js"}