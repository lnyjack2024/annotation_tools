function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import React, { useEffect, useRef, useState } from 'react';

function focusEnd(element) {
  var range = window.document.createRange();
  range.selectNodeContents(element);
  range.collapse(false);
  var selection = window.getSelection();
  selection.removeAllRanges();
  selection.addRange(range);
}

function insertAtCaret(insertElement) {
  var selection = window.getSelection();

  if (selection.getRangeAt && selection.rangeCount) {
    var range = selection.getRangeAt(0);
    range.deleteContents();
    range.insertNode(insertElement);
    range.collapse(false);
  }
}

var ImageTextField = function ImageTextField(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      _ref$autoFocus = _ref.autoFocus,
      autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      uploader = _ref.uploader,
      className = _ref.className,
      style = _ref.style;
  var inputRef = useRef(null);

  var _useState = useState(value),
      initialValue = _useState[0];

  useEffect(function () {
    if (autoFocus) {
      focusEnd(inputRef.current);
    }
  }, []);

  var handleChange = function handleChange() {
    onChange(inputRef.current.innerHTML);
  };

  var handlePaste = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(event) {
      var items, imageFile, i, url, imageNode;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              items = event.clipboardData.items;

              for (i = 0; i < items.length; i += 1) {
                if (items[i].type.indexOf('image') === 0) {
                  imageFile = items[i].getAsFile();
                }
              }

              if (!imageFile) {
                _context.next = 18;
                break;
              }

              event.preventDefault();
              _context.prev = 4;
              _context.next = 7;
              return uploader(imageFile);

            case 7:
              url = _context.sent;
              _context.next = 15;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](4);
              _context.next = 14;
              return new Promise(function (resolve) {
                var reader = new FileReader();
                reader.readAsDataURL(imageFile);

                reader.onload = function () {
                  return resolve(reader.result);
                };
              });

            case 14:
              url = _context.sent;

            case 15:
              imageNode = document.createElement('img');
              imageNode.src = url;
              insertAtCaret(imageNode);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 10]]);
    }));

    return function handlePaste(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/React.createElement("div", {
    ref: inputRef,
    style: _extends({
      height: 150,
      overflow: 'auto'
    }, style),
    className: className || "easyform-input" + (disabled ? ' easyform-input-disabled' : ''),
    contentEditable: !disabled // eslint-disable-next-line react/no-danger
    ,
    dangerouslySetInnerHTML: {
      __html: initialValue
    },
    onInput: handleChange,
    onBlur: handleChange,
    onPaste: handlePaste
  });
};

export default ImageTextField;
//# sourceMappingURL=ImageTextField.js.map