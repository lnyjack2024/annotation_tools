import React, { useMemo, useEffect } from 'react';
import { Checkbox, Row, Col, Popover } from 'antd';
import { InfoCircleOutlined } from '@ant-design/icons';
import { getColSpanForOptions, textFilter } from '../utils';
import { DEFAULT_GROUP_NAME } from '../utils/constants';

var CheckboxField = function CheckboxField(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      autoFocus = _ref.autoFocus,
      disabled = _ref.disabled,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options,
      containerSize = _ref.containerSize,
      _ref$filterKey = _ref.filterKey,
      filterKey = _ref$filterKey === void 0 ? '' : _ref$filterKey,
      setFilterCount = _ref.setFilterCount;
  var colSpan = getColSpanForOptions(containerSize.width, options);
  var groups = useMemo(function () {
    var groupOptionsMap = {};
    options.forEach(function (o) {
      var group = o.group || DEFAULT_GROUP_NAME;

      if (!groupOptionsMap[group]) {
        groupOptionsMap[group] = [];
      }

      groupOptionsMap[group].push(o);
    });
    return groupOptionsMap;
  }, [options]);
  useEffect(function () {
    if (setFilterCount) {
      if (filterKey) {
        setFilterCount(options.filter(function (o) {
          return textFilter(o.label, filterKey);
        }).length);
      } else {
        setFilterCount(options.length);
      }
    }
  }, [filterKey]);
  var fieldValue = (Array.isArray(value) ? [].concat(value) : [value]).filter(function (v) {
    return options.findIndex(function (o) {
      return o.value === v;
    }) >= 0;
  });

  var handleChange = function handleChange(e, optionValue) {
    if (onChange) {
      var newValue = [].concat(fieldValue);

      if (e.target.checked) {
        newValue.push(optionValue);
      } else {
        var index = newValue.indexOf(optionValue);

        if (index >= 0) {
          newValue.splice(index, 1);
        }
      }

      onChange(newValue);
    }
  };

  var renderOption = function renderOption(option, focus) {
    if (focus === void 0) {
      focus = false;
    }

    return /*#__PURE__*/React.createElement(Col, {
      key: option.value.toString(),
      span: colSpan
    }, /*#__PURE__*/React.createElement(Checkbox, {
      autoFocus: focus,
      value: option.value,
      checked: fieldValue.indexOf(option.value) >= 0,
      disabled: disabled,
      onChange: function onChange(e) {
        return handleChange(e, option.value);
      }
    }, /*#__PURE__*/React.createElement("span", {
      title: option.label
    }, option.label, option.desc && /*#__PURE__*/React.createElement(Popover, {
      content: option.desc,
      zIndex: 10001,
      overlayInnerStyle: {
        maxWidth: 320
      }
    }, /*#__PURE__*/React.createElement(InfoCircleOutlined, {
      className: "easyform-option-info-icon"
    })))));
  };

  if (filterKey) {
    return /*#__PURE__*/React.createElement(Row, null, options.filter(function (o) {
      return textFilter(o.label, filterKey);
    }).map(function (option) {
      return renderOption(option);
    }));
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(groups).map(function (groupName, groupIndex) {
    return /*#__PURE__*/React.createElement("div", {
      key: groupName
    }, groupName !== DEFAULT_GROUP_NAME && /*#__PURE__*/React.createElement("div", {
      style: {
        margin: '8px 0 4px 0'
      }
    }, groupName), /*#__PURE__*/React.createElement(Row, null, groups[groupName].map(function (option, index) {
      return renderOption(option, groupIndex === 0 && index === 0 && autoFocus);
    })));
  }));
};

export default CheckboxField;
//# sourceMappingURL=CheckboxField.js.map