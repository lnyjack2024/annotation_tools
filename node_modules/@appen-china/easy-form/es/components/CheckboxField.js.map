{"version":3,"sources":["../../src/components/CheckboxField.tsx"],"names":["React","useMemo","useEffect","Checkbox","Row","Col","Popover","InfoCircleOutlined","getColSpanForOptions","textFilter","DEFAULT_GROUP_NAME","CheckboxField","value","onChange","autoFocus","disabled","options","containerSize","filterKey","setFilterCount","colSpan","width","groups","groupOptionsMap","forEach","o","group","push","filter","label","length","fieldValue","Array","isArray","v","findIndex","handleChange","e","optionValue","newValue","target","checked","index","indexOf","splice","renderOption","option","focus","toString","desc","maxWidth","map","Object","keys","groupName","groupIndex","margin"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect } from 'react';\nimport { Checkbox, Row, Col, Popover } from 'antd';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { FieldOption } from '../types';\nimport { getColSpanForOptions, textFilter } from '../utils';\nimport { DEFAULT_GROUP_NAME } from '../utils/constants';\n\ntype CheckboxValue = string | number;\n\ninterface CheckboxProps {\n  value?: CheckboxValue[];\n  onChange?: (value: CheckboxValue[]) => void;\n  autoFocus?: boolean;\n  disabled?: boolean;\n  options?: FieldOption[];\n  containerSize: { width: number };\n  filterKey?: string;\n  setFilterCount?: (count: number) => void;\n}\n\nconst CheckboxField: React.FC<CheckboxProps> = ({\n  value,\n  onChange,\n  autoFocus,\n  disabled,\n  options = [],\n  containerSize,\n  filterKey = '',\n  setFilterCount,\n}) => {\n  const colSpan = getColSpanForOptions(containerSize.width, options);\n  const groups = useMemo(() => {\n    const groupOptionsMap: { [groupName: string]: FieldOption[] } = {};\n    options.forEach((o) => {\n      const group = o.group || DEFAULT_GROUP_NAME;\n      if (!groupOptionsMap[group]) {\n        groupOptionsMap[group] = [];\n      }\n      groupOptionsMap[group].push(o);\n    });\n    return groupOptionsMap;\n  }, [options]);\n\n  useEffect(() => {\n    if (setFilterCount) {\n      if (filterKey) {\n        setFilterCount(options.filter((o) => textFilter(o.label, filterKey)).length);\n      } else {\n        setFilterCount(options.length);\n      }\n    }\n  }, [filterKey]);\n\n  const fieldValue = (Array.isArray(value) ? [...value] : [value])\n    .filter((v) => options.findIndex((o) => o.value === v) >= 0);\n\n  const handleChange = (e: CheckboxChangeEvent, optionValue: CheckboxValue) => {\n    if (onChange) {\n      const newValue = [...fieldValue];\n      if (e.target.checked) {\n        newValue.push(optionValue);\n      } else {\n        const index = newValue.indexOf(optionValue);\n        if (index >= 0) {\n          newValue.splice(index, 1);\n        }\n      }\n      onChange(newValue);\n    }\n  };\n\n  const renderOption = (option: FieldOption, focus = false) => (\n    <Col key={option.value.toString()} span={colSpan}>\n      <Checkbox\n        autoFocus={focus}\n        value={option.value}\n        checked={fieldValue.indexOf(option.value as CheckboxValue) >= 0}\n        disabled={disabled}\n        onChange={(e) => handleChange(e, option.value as CheckboxValue)}\n      >\n        <span title={option.label}>\n          {option.label}\n          {option.desc && (\n            <Popover\n              content={option.desc}\n              zIndex={10001}\n              overlayInnerStyle={{\n                maxWidth: 320,\n              }}\n            >\n              <InfoCircleOutlined className=\"easyform-option-info-icon\" />\n            </Popover>\n          )}\n        </span>\n      </Checkbox>\n    </Col>\n  );\n\n  if (filterKey) {\n    return (\n      <Row>\n        {options\n          .filter((o) => textFilter(o.label, filterKey))\n          .map((option) => renderOption(option))}\n      </Row>\n    );\n  }\n\n  return (\n    <>\n      {Object.keys(groups).map((groupName, groupIndex) => (\n        <div key={groupName}>\n          {groupName !== DEFAULT_GROUP_NAME && (\n            <div style={{ margin: '8px 0 4px 0' }}>\n              {groupName}\n            </div>\n          )}\n          <Row>\n            {groups[groupName].map((option, index) => (\n              renderOption(option, groupIndex === 0 && index === 0 && autoFocus)\n            ))}\n          </Row>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default CheckboxField;\n"],"file":"CheckboxField.js"}