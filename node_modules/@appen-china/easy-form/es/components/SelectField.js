import React, { useCallback, useMemo, useState } from 'react';
import { Input, Select } from 'antd';
import { CaretDownOutlined, CaretUpOutlined, CloseOutlined, SearchOutlined } from '@ant-design/icons';
import { LayoutMode } from '../types';
import { DEFAULT_GROUP_NAME } from '../utils/constants';

var SelectField = function SelectField(_ref) {
  var value = _ref.value,
      autoFocus = _ref.autoFocus,
      disabled = _ref.disabled,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options,
      _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? null : _ref$mode,
      onChange = _ref.onChange,
      layoutMode = _ref.layoutMode,
      _ref$optionSearchable = _ref.optionSearchable,
      optionSearchable = _ref$optionSearchable === void 0 ? false : _ref$optionSearchable,
      _ref$clickStopPropaga = _ref.clickStopPropagation,
      clickStopPropagation = _ref$clickStopPropaga === void 0 ? false : _ref$clickStopPropaga;

  var _useState = useState(''),
      inputValue = _useState[0],
      setInputValue = _useState[1]; // options format for mode select


  var groupsForSelect = useMemo(function () {
    var groupsForSelectOptionsMap = {};
    var filteredOptions = options.filter(function (element) {
      return (element == null ? void 0 : element.label).toLowerCase().includes(inputValue.toLowerCase());
    });

    if (filteredOptions) {
      filteredOptions.forEach(function (optionItem) {
        var groupName = optionItem.group || DEFAULT_GROUP_NAME;
        if (!groupsForSelectOptionsMap[groupName]) groupsForSelectOptionsMap[groupName] = [];
        groupsForSelectOptionsMap[groupName].push(optionItem);
      });
    }

    return groupsForSelectOptionsMap;
  }, [options, inputValue]);

  var filterOption = function filterOption(e) {
    var targetInputValue = e.target.value;
    setInputValue(targetInputValue);
  };

  var preventDefaultClick = useCallback(function (event) {
    if (clickStopPropagation) {
      event.stopPropagation();
      event.preventDefault();
    }
  }, [clickStopPropagation]);

  var tagRender = function tagRender(props) {
    var label = props.label,
        closable = props.closable,
        onClose = props.onClose;

    var onPreventMouseDown = function onPreventMouseDown(event) {
      event.preventDefault();
      event.stopPropagation();
    };

    return /*#__PURE__*/React.createElement("div", {
      role: "button",
      tabIndex: 0,
      className: "easyform-select-custom-tag",
      onMouseDown: onPreventMouseDown,
      style: {
        marginRight: 3
      }
    }, /*#__PURE__*/React.createElement("span", null, label), closable && /*#__PURE__*/React.createElement(CloseOutlined, {
      onClick: onClose
    }));
  };

  return /*#__PURE__*/React.createElement(Select, {
    showSearch: false,
    suffixIcon: layoutMode === LayoutMode.COMPACT ? function () {
      return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(CaretUpOutlined, null), /*#__PURE__*/React.createElement(CaretDownOutlined, null));
    } : null,
    autoFocus: false,
    disabled: disabled,
    dropdownMatchSelectWidth: true,
    popupClassName: layoutMode === LayoutMode.COMPACT ? 'easyform-select-dropdown-compact' : null,
    mode: mode,
    onChange: onChange,
    defaultValue: value,
    dropdownRender: function dropdownRender(menu) {
      return /*#__PURE__*/React.createElement("div", {
        onClick: preventDefaultClick
      }, optionSearchable && /*#__PURE__*/React.createElement(Input, {
        autoFocus: autoFocus,
        placeholder: "search..",
        onChange: filterOption,
        onKeyDown: function onKeyDown(e) {
          e.stopPropagation();
        },
        suffix: /*#__PURE__*/React.createElement(SearchOutlined, null)
      }), menu);
    },
    tagRender: tagRender
  }, groupsForSelect && Object.keys(groupsForSelect).length > 1 && Object.keys(groupsForSelect).map(function (groupName, groupIndex) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(Select.OptGroup, {
        label: groupName === DEFAULT_GROUP_NAME ? '' : groupName,
        key: groupName + "-" + groupIndex
      }, groupsForSelect[groupName].map(function (option) {
        var _option$value;

        return /*#__PURE__*/React.createElement(Select.Option, {
          value: option.value,
          key: (_option$value = option.value) == null ? void 0 : _option$value.toString()
        }, option.label);
      }))
    );
  }), groupsForSelect && Object.values(groupsForSelect).length === 1 && Object.values(groupsForSelect)[0].map(function (option) {
    var _option$value2;

    return /*#__PURE__*/React.createElement(Select.Option, {
      value: option.value,
      key: (_option$value2 = option.value) == null ? void 0 : _option$value2.toString()
    }, option.label);
  }));
};

export default SelectField;
//# sourceMappingURL=SelectField.js.map