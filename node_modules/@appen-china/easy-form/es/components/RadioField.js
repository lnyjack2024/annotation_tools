function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */
import React, { useEffect, useMemo, useState } from 'react';
import { Radio, Row, Col, Modal, Popover } from 'antd';
import { InfoCircleOutlined, ZoomInOutlined } from '@ant-design/icons';
import { OptionType } from '../types';
import { getColSpanForOptions, textFilter } from '../utils';
import DownArrow from '../icons/DownArrow';
import { DEFAULT_GROUP_NAME } from '../utils/constants';

var RadioField = function RadioField(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      autoFocus = _ref.autoFocus,
      disabled = _ref.disabled,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options,
      containerSize = _ref.containerSize,
      _ref$filterKey = _ref.filterKey,
      filterKey = _ref$filterKey === void 0 ? '' : _ref$filterKey,
      _ref$optionType = _ref.optionType,
      optionType = _ref$optionType === void 0 ? OptionType.DEFAULT : _ref$optionType,
      foldable = _ref.foldable,
      fold = _ref.fold,
      setFilterCount = _ref.setFilterCount,
      handleFold = _ref.handleFold;

  var _useState = useState(false),
      previewVisible = _useState[0],
      setPreviewVisible = _useState[1];

  var _useState2 = useState(null),
      selectedOption = _useState2[0],
      setSelectedOption = _useState2[1];

  var colSpan = getColSpanForOptions(containerSize.width, options);
  var groups = useMemo(function () {
    var groupOptionsMap = {};
    options.forEach(function (o, i) {
      var group = fold ? DEFAULT_GROUP_NAME : o.group || DEFAULT_GROUP_NAME;

      if (!groupOptionsMap[group]) {
        groupOptionsMap[group] = [];
      }

      if (o.value === value && fold && i >= 7) {
        groupOptionsMap[group].unshift(o);
      } else {
        groupOptionsMap[group].push(o);
      }

      if (fold) {
        groupOptionsMap[group].splice(7);
      }
    });
    return groupOptionsMap;
  }, [options, fold]);
  useEffect(function () {
    if (setFilterCount) {
      if (filterKey) {
        setFilterCount(options.filter(function (o) {
          return textFilter(o.label, filterKey);
        }).length);
      } else {
        setFilterCount(options.length);
      }
    }
  }, [filterKey]);

  var handleChange = function handleChange(e, optionValue) {
    if (e.target.checked && onChange) {
      onChange(optionValue);
    }
  };

  var renderOption = function renderOption(option, focus) {
    if (focus === void 0) {
      focus = false;
    }

    var radioFieldProps = {
      autoFocus: focus,
      value: option.value,
      checked: value === option.value,
      disabled: disabled || option.disabled,
      onChange: function onChange(e) {
        return handleChange(e, option.value);
      }
    };
    return /*#__PURE__*/React.createElement(Col, {
      key: option.value.toString(),
      span: colSpan
    }, /*#__PURE__*/React.createElement(Radio, radioFieldProps, /*#__PURE__*/React.createElement("span", {
      title: option.label
    }, option.label, option.desc && /*#__PURE__*/React.createElement(Popover, {
      content: option.desc,
      zIndex: 10001,
      overlayInnerStyle: {
        maxWidth: 320
      }
    }, /*#__PURE__*/React.createElement(InfoCircleOutlined, {
      className: "easyform-option-info-icon"
    }))), option.referenceUrl && /*#__PURE__*/React.createElement("div", {
      className: "easyform-radio-reference",
      style: {
        backgroundImage: "url(" + option.referenceUrl + ")"
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "check-preview",
      onClick: function onClick(e) {
        e.preventDefault();
        setSelectedOption(option);
        setPreviewVisible(true);
      }
    }, /*#__PURE__*/React.createElement(ZoomInOutlined, null)))));
  };

  var renderButtonOption = function renderButtonOption(option, focus) {
    if (focus === void 0) {
      focus = false;
    }

    var radioFieldProps = {
      autoFocus: focus,
      value: option.value,
      checked: value === option.value,
      disabled: disabled || option.disabled,
      onChange: function onChange(e) {
        return handleChange(e, option.value);
      }
    };
    return /*#__PURE__*/React.createElement(Radio.Button, _extends({}, radioFieldProps, {
      key: option.value.toString()
    }), /*#__PURE__*/React.createElement("span", {
      title: option.label
    }, option.label, option.desc && /*#__PURE__*/React.createElement(Popover, {
      content: option.desc,
      zIndex: 10001,
      overlayInnerStyle: {
        maxWidth: 320
      }
    }, /*#__PURE__*/React.createElement(InfoCircleOutlined, {
      className: "easyform-option-info-icon"
    }))));
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, filterKey ? /*#__PURE__*/React.createElement(Row, null, options.filter(function (o) {
    return textFilter(o.label, filterKey);
  }).map(function (option) {
    return optionType === OptionType.BUTTON ? renderButtonOption(option) : renderOption(option);
  })) : /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(groups).map(function (groupName, groupIndex) {
    return /*#__PURE__*/React.createElement("div", {
      key: groupName
    }, groupName !== DEFAULT_GROUP_NAME && /*#__PURE__*/React.createElement("div", {
      style: {
        margin: '8px 0 4px 0'
      }
    }, groupName), optionType === OptionType.BUTTON ? /*#__PURE__*/React.createElement("div", {
      className: "easyform-radio-container"
    }, groups[groupName].map(function (option, index) {
      return renderButtonOption(option, groupIndex === 0 && index === 0 && autoFocus);
    }), foldable && /*#__PURE__*/React.createElement("div", {
      className: "easyform-radio-fold " + (!fold ? 'active' : ''),
      onClick: handleFold
    }, /*#__PURE__*/React.createElement("span", {
      className: "icon"
    }, /*#__PURE__*/React.createElement(DownArrow, null)))) : /*#__PURE__*/React.createElement(Row, null, groups[groupName].map(function (option, index) {
      return renderOption(option, groupIndex === 0 && index === 0 && autoFocus);
    })));
  })), /*#__PURE__*/React.createElement(Modal, {
    open: previewVisible,
    wrapClassName: "radio-preview-modal",
    width: 640,
    zIndex: 10001,
    title: /*#__PURE__*/React.createElement(React.Fragment, null),
    bodyStyle: {
      maxHeight: 640,
      overflowY: 'auto'
    },
    footer: null,
    onCancel: function onCancel() {
      setSelectedOption(null);
      setPreviewVisible(false);
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      width: '100%',
      maxHeight: '100%',
      textAlign: 'center'
    }
  }, /*#__PURE__*/React.createElement("img", {
    src: selectedOption == null ? void 0 : selectedOption.referenceUrl,
    alt: "reference img",
    style: {
      maxWidth: '100%',
      maxHeight: '100%'
    }
  }))));
};

export default RadioField;
//# sourceMappingURL=RadioField.js.map