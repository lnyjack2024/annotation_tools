{"version":3,"sources":["../../src/components/ImageTextField.tsx"],"names":["React","useEffect","useRef","useState","focusEnd","element","range","window","document","createRange","selectNodeContents","collapse","selection","getSelection","removeAllRanges","addRange","insertAtCaret","insertElement","getRangeAt","rangeCount","deleteContents","insertNode","ImageTextField","value","onChange","autoFocus","disabled","uploader","className","style","inputRef","initialValue","current","handleChange","innerHTML","handlePaste","event","items","clipboardData","i","length","type","indexOf","imageFile","getAsFile","preventDefault","url","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","imageNode","createElement","src","height","overflow","__html"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface ImageTextProps {\n  value?: string;\n  onChange?: (value: string) => void;\n  autoFocus?: boolean;\n  disabled?: boolean;\n  uploader?: (file: File) => Promise<string>;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nfunction focusEnd(element: HTMLElement) {\n  const range = window.document.createRange();\n  range.selectNodeContents(element);\n  range.collapse(false);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n}\n\nfunction insertAtCaret(insertElement: HTMLElement) {\n  const selection = window.getSelection();\n  if (selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n    range.insertNode(insertElement);\n    range.collapse(false);\n  }\n}\n\nconst ImageTextField: React.FC<ImageTextProps> = ({\n  value,\n  onChange,\n  autoFocus = false,\n  disabled = false,\n  uploader,\n  className,\n  style,\n}) => {\n  const inputRef = useRef(null);\n  const [initialValue] = useState(value);\n\n  useEffect(() => {\n    if (autoFocus) {\n      focusEnd(inputRef.current);\n    }\n  }, []);\n\n  const handleChange = () => {\n    onChange(inputRef.current.innerHTML);\n  };\n\n  const handlePaste = async (event: React.ClipboardEvent) => {\n    const { items } = event.clipboardData;\n\n    let imageFile;\n    for (let i = 0; i < items.length; i += 1) {\n      if (items[i].type.indexOf('image') === 0) {\n        imageFile = items[i].getAsFile();\n      }\n    }\n\n    if (imageFile) {\n      event.preventDefault();\n\n      let url: string;\n      try {\n        url = await uploader(imageFile);\n      } catch (e) {\n        url = await new Promise((resolve) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(imageFile);\n          reader.onload = () => resolve(reader.result as string);\n        });\n      }\n      const imageNode = document.createElement('img');\n      imageNode.src = url;\n      insertAtCaret(imageNode);\n    }\n  };\n\n  return (\n    <div\n      ref={inputRef}\n      style={{ height: 150, overflow: 'auto', ...style }}\n      className={className || `easyform-input${disabled ? ' easyform-input-disabled' : ''}`}\n      contentEditable={!disabled}\n      // eslint-disable-next-line react/no-danger\n      dangerouslySetInnerHTML={{ __html: initialValue }}\n      onInput={handleChange}\n      onBlur={handleChange}\n      onPaste={handlePaste}\n    />\n  );\n};\n\nexport default ImageTextField;\n"],"file":"ImageTextField.js"}