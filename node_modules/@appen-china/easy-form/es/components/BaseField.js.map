{"version":3,"sources":["../../src/components/BaseField.tsx"],"names":["React","useMemo","useState","useEffect","ConfigProvider","Form","Input","InputNumber","Switch","CloseCircleFilled","SearchOutlined","RadioField","CheckboxField","ImageTextField","SelectField","FieldControlType","FieldValueType","LayoutMode","CascaderField","BaseField","field","autoFocus","renderLabel","uploader","containerSize","hideLabel","layoutMode","filterKey","setFilterKey","options","length","filterCount","setFilterCount","foldable","setFoldable","fold","setFold","canFold","optionFoldable","extraProps","type","SWITCH","valuePropName","rules","required","message","label","name","validator","toString","call","_","value","Promise","resolve","result","pass","reject","handleFold","renderControl","TEXT","valueType","NUMBER","readonly","width","COMPACT","TEXTAREA","isRTL","dir","CHECKBOX","optionSearchable","RADIO","optionType","SELECT","mode","clickStopPropagation","IMAGETEXT","CASCADER","renderTitle","fontSize","e","target","marginTop","background","visible","formItemClassName"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\nimport { ConfigProvider, Form, Input, InputNumber, Switch } from 'antd';\nimport { CloseCircleFilled, SearchOutlined } from '@ant-design/icons';\nimport { Rule } from 'antd/es/form';\nimport RadioField from './RadioField';\nimport CheckboxField from './CheckboxField';\nimport ImageTextField from './ImageTextField';\nimport SelectField from './SelectField';\nimport { Field, FieldControlType, FieldValue, FieldValueType, LayoutMode } from '../types';\nimport CascaderField from './CascaderField';\n\ninterface BaseFieldProps {\n  field: Field;\n  hideLabel?: boolean;\n  autoFocus?: boolean;\n  layoutMode?: LayoutMode;\n  renderLabel?: (label: string | undefined, field: Field) => string | React.ReactNode;\n  uploader?: (file: File) => Promise<string>;\n  containerSize: { width: number };\n}\n\nconst BaseField: React.FC<BaseFieldProps> = (\n  { field, autoFocus = false, renderLabel, uploader, containerSize, hideLabel, layoutMode },\n) => {\n  const [filterKey, setFilterKey] = useState('');\n  const [filterCount, setFilterCount] = useState(field.options?.length || 0);\n  const [foldable, setFoldable] = useState(false);\n  const [fold, setFold] = useState(false);\n\n  useEffect(() => {\n    const canFold = field.optionFoldable && field.options?.length > 7;\n    setFoldable(canFold);\n    setFold(canFold);\n  }, [field]);\n\n  const extraProps = useMemo(() => ({\n    // swicth control\n    ...field.type === FieldControlType.SWITCH && {\n      valuePropName: 'checked',\n    },\n  }), [field.type]);\n\n  const rules = useMemo(() => ([\n    // field required\n    ...field.required ? [{\n      required: true,\n      message: `${field.label || field.name} is required.`,\n    }] : [],\n    // custom validator\n    ...field.validator && {}.toString.call(field.validator) === '[object Function]' ? [{\n      validator: (_: Rule, value: FieldValue) => {\n        if (!value) {\n          return Promise.resolve();\n        }\n        const result = field.validator(value);\n        if (typeof result === 'boolean' ? result : result.pass) {\n          return Promise.resolve();\n        }\n        return Promise.reject(typeof result === 'boolean' ? 'Value is invalid.' : result.message);\n      },\n    }] : [],\n  ]), [field.required, field.validator]);\n\n  const handleFold = () => {\n    if (!fold) setFilterKey('');\n    setFold(!fold);\n  };\n\n  const renderControl = () => {\n    switch (field.type) {\n      case FieldControlType.TEXT:\n        if (field.valueType === FieldValueType.NUMBER) {\n          return (\n            <InputNumber\n              autoFocus={autoFocus}\n              disabled={field.readonly}\n              style={{ width: layoutMode === LayoutMode.COMPACT ? '112px' : '100%' }}\n              autoComplete=\"off\"\n            />\n          );\n        }\n        return (\n          <Input\n            autoFocus={autoFocus}\n            disabled={field.readonly}\n            autoComplete=\"off\"\n          />\n        );\n\n      case FieldControlType.TEXTAREA:\n        return (\n          <Input.TextArea\n            autoFocus={autoFocus}\n            disabled={field.readonly}\n            rows={3}\n            {...field.isRTL && { dir: 'rtl' }}\n            autoComplete=\"off\"\n          />\n        );\n\n      case FieldControlType.SWITCH:\n        return <Switch autoFocus={autoFocus} disabled={field.readonly} />;\n\n      case FieldControlType.CHECKBOX:\n        return (\n          <CheckboxField\n            autoFocus={!field.optionSearchable && autoFocus}\n            disabled={field.readonly}\n            options={field.options}\n            containerSize={containerSize}\n            filterKey={filterKey}\n            setFilterCount={setFilterCount}\n          />\n        );\n\n      case FieldControlType.RADIO:\n        return (\n          <RadioField\n            autoFocus={!field.optionSearchable && autoFocus}\n            disabled={field.readonly}\n            options={field.options}\n            containerSize={containerSize}\n            filterKey={filterKey}\n            optionType={field.optionType}\n            foldable={foldable}\n            fold={fold}\n            setFilterCount={setFilterCount}\n            handleFold={handleFold}\n          />\n        );\n\n      case FieldControlType.SELECT:\n        return (\n          <SelectField\n            autoFocus={autoFocus}\n            mode={field?.mode}\n            optionSearchable={field?.optionSearchable}\n            disabled={field.readonly}\n            options={field?.options}\n            layoutMode={layoutMode}\n            clickStopPropagation={field?.clickStopPropagation}\n          />\n        );\n\n      case FieldControlType.IMAGETEXT:\n        return (\n          <ImageTextField\n            autoFocus={autoFocus}\n            disabled={field.readonly}\n            uploader={uploader}\n          />\n        );\n      case FieldControlType.CASCADER:\n        return (\n          <CascaderField\n            options={field?.options}\n            disabled={field.readonly}\n            optionSearchable={field?.optionSearchable}\n            layoutMode={layoutMode}\n            clickStopPropagation={field?.clickStopPropagation}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const renderTitle = () => {\n    if (hideLabel) return null;\n    const label = renderLabel ? renderLabel(field.label, field) : field.label;\n    if (\n      layoutMode !== LayoutMode.COMPACT &&\n      (field.type === FieldControlType.RADIO || field.type === FieldControlType.CHECKBOX) &&\n      field.optionSearchable &&\n      !fold\n    ) {\n      return (\n        <div className=\"easyform-form-item-label-content\">\n          <div>{label}</div>\n          <Input\n            autoFocus={autoFocus}\n            prefix={<SearchOutlined />}\n            suffix={filterKey ? <CloseCircleFilled style={{ fontSize: 12 }} onClick={() => setFilterKey('')} /> : null}\n            value={filterKey}\n            onChange={(e) => {\n              setFilterKey(e.target.value);\n            }}\n            placeholder=\"search...\"\n            style={{ marginTop: 6, width: '100%', background: 'rgba(255, 255, 255, 0.04)' }}\n          />\n        </div>\n      );\n    }\n    return (\n      <div className=\"easyform-form-item-label-content\">\n        <div>{label}</div>\n      </div>\n    );\n  };\n\n  if (!field.visible) {\n    return null;\n  }\n\n  const formItemClassName = () => {\n    if (\n      layoutMode === LayoutMode.COMPACT &&\n      !hideLabel &&\n      (field.type === FieldControlType.SWITCH ||\n        (field.type === FieldControlType.TEXT && field.valueType === FieldValueType.NUMBER)\n      )\n    ) {\n      return 'easyform-form-item--inline';\n    }\n\n    return '';\n  };\n\n  return (\n    <ConfigProvider direction={field.isRTL ? 'rtl' : 'ltr'}>\n      <Form.Item\n        className={formItemClassName()}\n        validateFirst\n        name={field.name}\n        label={renderTitle()}\n        rules={rules}\n        {...extraProps}\n      >\n        {renderControl()}\n      </Form.Item>\n    </ConfigProvider>\n  );\n};\n\nexport default BaseField;\n"],"file":"BaseField.js"}