import { Field, FieldValue, FieldControlType, FieldValueType, FieldOption, InFieldOption, Condition, FieldOperatorType, FormConfig, Rule, Effect } from '../types';
export declare const isContained: (value: any | any[], options: FieldOption[]) => boolean;
/**
 * options contained value for nested structures
 * @param values
 * @param options
 */
export declare function isContainedForNested(values: FieldValue[], options: FieldOption[]): boolean;
export declare function checkValueIsContained(defaultValue: FieldValue | FieldValue[], field: Field): boolean;
/**
 * get supported valueType array by field control type
 * @param type field control type
 */
export declare function getSupportedValueTypesByControlType(type: FieldControlType): FieldValueType[];
/**
 * parse field value by field value type
 * @param value field value
 * @param type field value type
 */
export declare function praseValueByValueType(value: undefined | FieldValue | FieldValue[], type: FieldValueType): undefined | FieldValue | FieldValue[];
/**
 * parse field option item's value and label
 * parse the option value to right value type if necessary
 * @param options initial field options
 * @param type field value type
 */
export declare function parseOptions(options: (FieldValue | InFieldOption)[], type: FieldValueType): FieldOption[];
/**
 * parse fields including field validation, value parse, option value parse...
 * @param initialFields
 */
export declare function parseFormFields(initialFields: Field[]): {
    fields: Field[];
    initialValues: {
        [key: string]: FieldValue | FieldValue[];
    };
};
/**
 * get all related fields from condition
 * @param condition the condition should be parsed
 * @param conditions all conditions
 */
export declare function getFieldsFromCondition(condition: Condition, allConditions: Condition[]): string[];
/**
 * compare value and condition value and check is pass the condition
 * @param value origin value, user input
 * @param conditionValue condition defined value
 * @param operator field condtion operator
 */
export declare function isValuePassCondition(checkValue: FieldValue | FieldValue[], conditionValue: string, operator: FieldOperatorType): boolean;
/**
 * check whether values pass the condition
 * @param condition check condition
 * @param allConditions all conditions, used to find any nest condition
 * @param allValues all values, used to check the field value in any condition
 */
export declare function checkCondition(condition: Condition, allConditions: Condition[], allValues: {
    [key: string]: FieldValue | FieldValue[];
}): boolean;
/**
 * calc col span value for options based on the container
 * @param containerWidth
 * @param avgOptionLength
 */
export declare function getColSpanForOptions(containerWidth: number, options: FieldOption[]): number;
/**
 * check if the target pass the filter rule
 * @param target target string
 * @param filter filter key
 */
export declare function textFilter(target?: string, filter?: string): boolean;
/**
 * trigger a rule
 * @param rule
 * @param allFields all fields
 * @param allValues all values
 * @param initialFields initial fields for default value
 * @param conditions all conditions
 * @param effects all effects
 * @returns { updatedFields, updatedValues } all updated fields and values
 */
export declare function ruleTrigger(rule: Rule, allFields: Field[], allValues: {
    [key: string]: FieldValue | FieldValue[];
}, initialFields: Field[], conditions?: Condition[], effects?: Effect[]): {
    updatedFields: Field[];
    updatedValues: {
        [x: string]: FieldValue | FieldValue[];
    };
};
export declare function validate(config: FormConfig, values: any, checkExtra?: {
    check: boolean;
    ignoreFields?: string[];
}): boolean;
export declare function parseDisplayValues(formConfig: FormConfig, values: any, reservedFields?: string[]): {
    [key: string]: any;
};
declare const _default: {
    getSupportedValueTypesByControlType: typeof getSupportedValueTypesByControlType;
    praseValueByValueType: typeof praseValueByValueType;
    parseOptions: typeof parseOptions;
    parseFormFields: typeof parseFormFields;
    getFieldsFromCondition: typeof getFieldsFromCondition;
    isValuePassCondition: typeof isValuePassCondition;
    checkCondition: typeof checkCondition;
    getColSpanForOptions: typeof getColSpanForOptions;
    textFilter: typeof textFilter;
    ruleTrigger: typeof ruleTrigger;
    validate: typeof validate;
    parseDisplayValues: typeof parseDisplayValues;
};
export default _default;
