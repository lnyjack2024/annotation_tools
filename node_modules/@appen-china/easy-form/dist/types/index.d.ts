export declare enum FieldControlType {
    TEXT = "TEXT",
    TEXTAREA = "TEXTAREA",
    IMAGETEXT = "IMAGETEXT",
    SWITCH = "SWITCH",
    CHECKBOX = "CHECKBOX",
    RADIO = "RADIO",
    SELECT = "SELECT",
    CASCADER = "CASCADER"
}
export declare enum FieldValueType {
    STRING = "string",
    NUMBER = "number",
    BOOLEAN = "boolean"
}
export type FieldValue = string | number | boolean;
export interface BasicFieldOption {
    value: FieldValue;
    label?: string;
    group?: string;
    desc?: string;
    referenceUrl?: string;
    children?: BasicFieldOption[];
}
export interface FieldOption extends BasicFieldOption {
    disabled?: boolean;
}
export interface InFieldOption extends BasicFieldOption {
    disabled?: boolean | string;
}
export interface Field {
    name: string;
    label?: string;
    type: FieldControlType;
    valueType: FieldValueType;
    visible: boolean;
    required: boolean;
    readonly: boolean;
    isRTL?: boolean;
    defaultValue?: FieldValue | FieldValue[];
    options?: FieldOption[];
    optionSearchable?: boolean;
    clickStopPropagation?: boolean;
    mode?: Mode;
    optionFoldable?: boolean;
    optionType?: OptionType;
    validator?: (value: FieldValue) => boolean | {
        pass: boolean;
        message?: string;
    };
}
export declare enum ConditionType {
    FIELD = "FIELD",
    AGGREGATION = "AGGREGATION"
}
export declare enum FieldOperatorType {
    EQUAL = "equal_to",
    NOT_EQUAL = "not_equal_to",
    GREATER = "greater_than",
    GREATER_EQUAL = "greater_than_or_equal_to",
    LESS = "less_than",
    LESS_EQUAL = "less_than_or_equal_to",
    CONTAINS = "contains",
    START = "start_with",
    END = "end_with"
}
export declare enum AggregationOperatorType {
    AND = "and",
    OR = "or"
}
export type Operator = FieldOperatorType | AggregationOperatorType;
export interface Condition {
    id: string;
    type: ConditionType;
    operator: Operator;
    field?: string;
    value?: string;
    conditions?: string[];
}
export interface Effect {
    id: string;
    field: string;
    attribute: 'value' | 'visible' | 'required' | 'readonly';
    value: string;
}
export interface Rule {
    id: string;
    condition: string;
    effects: string[];
}
export declare enum OptionType {
    BUTTON = "button",
    DEFAULT = "default"
}
export declare enum Mode {
    MULTIPLE = "multiple"
}
export declare enum LayoutMode {
    COMPACT = "compact"
}
export interface FormConfig {
    fields: Field[];
    conditions?: Condition[];
    effects?: Effect[];
    rules?: Rule[];
}
