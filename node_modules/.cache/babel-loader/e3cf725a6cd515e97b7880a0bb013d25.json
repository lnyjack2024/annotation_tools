{"ast":null,"code":"export const timeInterval = pxPerSec => {\n  let retVal = 1;\n  if (pxPerSec >= 1000) {\n    retVal = 0.01;\n  } else if (pxPerSec >= 500) {\n    retVal = 0.02;\n  } else if (pxPerSec >= 100) {\n    retVal = 0.1;\n  } else if (pxPerSec >= 50) {\n    retVal = 0.2;\n  } else if (pxPerSec >= 10) {\n    retVal = 1;\n  } else if (pxPerSec >= 5) {\n    retVal = 12;\n  } else if (pxPerSec >= 1) {\n    retVal = 24;\n  } else if (pxPerSec >= 0.5) {\n    retVal = 120;\n  } else if (pxPerSec >= 0.01) {\n    retVal = 600;\n  } else {\n    retVal = Math.ceil(1 / pxPerSec) * 60;\n  }\n  return retVal;\n};\nexport const primaryLabelInterval = pxPerSec => {\n  return 5;\n  // let retVal = 1;\n  // if (pxPerSec >= 1000) {\n  //     retVal = 50; // 0.01;\n  // } else if (pxPerSec >= 500) {\n  //     retVal = 10; // 0.02;\n  // } else if (pxPerSec >= 100) {\n  //     retVal = 5; // 0.1;\n  // } else if (pxPerSec >= 50) {\n  //     retVal = 5; // 0.2;\n  // } else if (pxPerSec >= 10) {\n  //     retVal = 5; // 1;\n  // } else if (pxPerSec >= 5) {\n  //     retVal = 5 // 20;\n  // } else if (pxPerSec >= 1) {\n  //     retVal = 10; // 30;\n  // } else if (pxPerSec >= 0.5) {\n  //     retVal = 10; // 120;\n  // } else if (pxPerSec >= 0.01) {\n  //     retVal = 15; // 6000;\n  // } else {\n  //     retVal = Math.ceil(1 / pxPerSec);\n  // }\n  // return retVal;\n};\nexport const secondaryLabelInterval = pxPerSec => {\n  return undefined;\n};\nexport const formatTimeCallback = (secs, pxPerSec) => {\n  let seconds = Number(secs);\n  const minutes = Math.floor(seconds / 60);\n  seconds = seconds % 60;\n\n  // fill up seconds with zeroes\n  let secondsStr = Math.round(seconds).toString();\n  if (pxPerSec >= 25 * 10) {\n    secondsStr = seconds.toFixed(2);\n  } else if (pxPerSec >= 25 * 1) {\n    secondsStr = seconds.toFixed(1);\n  }\n  if (minutes > 0) {\n    if (seconds < 10) {\n      secondsStr = '0' + secondsStr;\n    }\n    return `${minutes}:${secondsStr}`;\n  }\n  return secondsStr;\n};","map":{"version":3,"names":["timeInterval","pxPerSec","retVal","Math","ceil","primaryLabelInterval","secondaryLabelInterval","undefined","formatTimeCallback","secs","seconds","Number","minutes","floor","secondsStr","round","toString","toFixed"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/long-audio/components/utils/TimelineUtil.js"],"sourcesContent":["export const timeInterval = (pxPerSec) => {\n  let retVal = 1;\n  if (pxPerSec >= 1000) {\n    retVal = 0.01;\n  } else if (pxPerSec >= 500) {\n    retVal = 0.02;\n  } else if (pxPerSec >= 100) {\n    retVal = 0.1;\n  } else if (pxPerSec >= 50) {\n    retVal = 0.2;\n  } else if (pxPerSec >= 10) {\n    retVal = 1;\n  } else if (pxPerSec >= 5) {\n    retVal = 12;\n  } else if (pxPerSec >= 1) {\n    retVal = 24;\n  } else if (pxPerSec >= 0.5) {\n    retVal = 120;\n  } else if (pxPerSec >= 0.01) {\n    retVal = 600;\n  } else {\n    retVal = Math.ceil(1 / pxPerSec) * 60;\n  }\n  return retVal;\n};\n\nexport const primaryLabelInterval = (pxPerSec) => {\n  return 5;\n  // let retVal = 1;\n  // if (pxPerSec >= 1000) {\n  //     retVal = 50; // 0.01;\n  // } else if (pxPerSec >= 500) {\n  //     retVal = 10; // 0.02;\n  // } else if (pxPerSec >= 100) {\n  //     retVal = 5; // 0.1;\n  // } else if (pxPerSec >= 50) {\n  //     retVal = 5; // 0.2;\n  // } else if (pxPerSec >= 10) {\n  //     retVal = 5; // 1;\n  // } else if (pxPerSec >= 5) {\n  //     retVal = 5 // 20;\n  // } else if (pxPerSec >= 1) {\n  //     retVal = 10; // 30;\n  // } else if (pxPerSec >= 0.5) {\n  //     retVal = 10; // 120;\n  // } else if (pxPerSec >= 0.01) {\n  //     retVal = 15; // 6000;\n  // } else {\n  //     retVal = Math.ceil(1 / pxPerSec);\n  // }\n  // return retVal;\n};\n\nexport const secondaryLabelInterval = (pxPerSec) => {\n  return undefined;\n};\n\nexport const formatTimeCallback = (secs, pxPerSec) => {\n  let seconds = Number(secs);\n  const minutes = Math.floor(seconds / 60);\n  seconds = seconds % 60;\n\n  // fill up seconds with zeroes\n  let secondsStr = Math.round(seconds).toString();\n  if (pxPerSec >= 25 * 10) {\n    secondsStr = seconds.toFixed(2);\n  } else if (pxPerSec >= 25 * 1) {\n    secondsStr = seconds.toFixed(1);\n  }\n\n  if (minutes > 0) {\n    if (seconds < 10) {\n      secondsStr = '0' + secondsStr;\n    }\n    return `${minutes}:${secondsStr}`;\n  }\n  return secondsStr;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,QAAQ,IAAK;EACxC,IAAIC,MAAM,GAAG,CAAC;EACd,IAAID,QAAQ,IAAI,IAAI,EAAE;IACpBC,MAAM,GAAG,IAAI;EACf,CAAC,MAAM,IAAID,QAAQ,IAAI,GAAG,EAAE;IAC1BC,MAAM,GAAG,IAAI;EACf,CAAC,MAAM,IAAID,QAAQ,IAAI,GAAG,EAAE;IAC1BC,MAAM,GAAG,GAAG;EACd,CAAC,MAAM,IAAID,QAAQ,IAAI,EAAE,EAAE;IACzBC,MAAM,GAAG,GAAG;EACd,CAAC,MAAM,IAAID,QAAQ,IAAI,EAAE,EAAE;IACzBC,MAAM,GAAG,CAAC;EACZ,CAAC,MAAM,IAAID,QAAQ,IAAI,CAAC,EAAE;IACxBC,MAAM,GAAG,EAAE;EACb,CAAC,MAAM,IAAID,QAAQ,IAAI,CAAC,EAAE;IACxBC,MAAM,GAAG,EAAE;EACb,CAAC,MAAM,IAAID,QAAQ,IAAI,GAAG,EAAE;IAC1BC,MAAM,GAAG,GAAG;EACd,CAAC,MAAM,IAAID,QAAQ,IAAI,IAAI,EAAE;IAC3BC,MAAM,GAAG,GAAG;EACd,CAAC,MAAM;IACLA,MAAM,GAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,GAAGH,QAAQ,CAAC,GAAG,EAAE;EACvC;EACA,OAAOC,MAAM;AACf,CAAC;AAED,OAAO,MAAMG,oBAAoB,GAAIJ,QAAQ,IAAK;EAChD,OAAO,CAAC;EACR;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAED,OAAO,MAAMK,sBAAsB,GAAIL,QAAQ,IAAK;EAClD,OAAOM,SAAS;AAClB,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,IAAI,EAAER,QAAQ,KAAK;EACpD,IAAIS,OAAO,GAAGC,MAAM,CAACF,IAAI,CAAC;EAC1B,MAAMG,OAAO,GAAGT,IAAI,CAACU,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACxCA,OAAO,GAAGA,OAAO,GAAG,EAAE;;EAEtB;EACA,IAAII,UAAU,GAAGX,IAAI,CAACY,KAAK,CAACL,OAAO,CAAC,CAACM,QAAQ,CAAC,CAAC;EAC/C,IAAIf,QAAQ,IAAI,EAAE,GAAG,EAAE,EAAE;IACvBa,UAAU,GAAGJ,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC;EACjC,CAAC,MAAM,IAAIhB,QAAQ,IAAI,EAAE,GAAG,CAAC,EAAE;IAC7Ba,UAAU,GAAGJ,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC;EACjC;EAEA,IAAIL,OAAO,GAAG,CAAC,EAAE;IACf,IAAIF,OAAO,GAAG,EAAE,EAAE;MAChBI,UAAU,GAAG,GAAG,GAAGA,UAAU;IAC/B;IACA,OAAQ,GAAEF,OAAQ,IAAGE,UAAW,EAAC;EACnC;EACA,OAAOA,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}