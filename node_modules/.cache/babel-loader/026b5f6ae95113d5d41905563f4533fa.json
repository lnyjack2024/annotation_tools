{"ast":null,"code":"import { BACKWARD_CURRENT_VIDEO, DEBUG, FORWARD_CURRENT_VIDEO, GET_AUDIO_CONTAINRE, GET_VIDEO_CONTAINER, GET_WAVESURFERS, INIT_PAYLOAD, MERGE_SEGMENT_BACKWARD, PAUSE_CURRENT_VIDEO, PLAY_CURRENT_VIDEO, PUSH_LINE, SET_CURRENT_SEGMENT, SET_CURRENT_VIDEO, SET_LINE_CATEGORY, SET_LINE_ATTRIBUTES, SET_LINE_ROLE, SET_LINE_TEXT, SET_PLAY_MODE, SET_PLAYING_STATE, SET_SEGMENT_CATEGORY, SET_SEGMENT_ATTRIBUTES, SET_SEGMENT_TIMESTAMP, SET_SEGMENT_TYPE, SET_VIDEO_SPEED, SET_VIDEO_ZOOM, SPLIT_SEGMENT_FORWARD, DELETE_LINE, TOPPING_LINE, SET_VIDEO_LOADED, SET_VIDEO_VALID, SET_VIDEO_ATTR, SHOW_HIDE_GUIDE, SET_SEGMENT_QASTATE, SET_SEGMENT_QACOMMENT, SET_SEGMENT_QAREASON, REMOVE_SEGMENT, PARSE_SEGMENTS, SET_ERROR_MESSAGE, SET_AUDIO_ERROR_MESSAGE, MOVE_SEGMENT_IN_BATCH, SET_WORD_TIMESTAMPS, APPEND_SEGMENT, UPDATE_SEGMENT, DELETE_SEGMENT, SET_SEGMENTS, UPDATE_LINE_ROLE, SET_SEGMENT_START_END, SET_MEASUREMENT, UPDATE_VIDEO_INFO, SET_LOADING, SET_ATTRIBUTE_FOCUS_INFO, SET_LOAD_REVIEW_ENABLED, SET_RESULT } from './action';\nimport { initPayloadState, parseSegments, saveData, setVideoLoaded, setVideoValid, setVideoAttributes, setWordTimestamps, setLoading, setAttributeFocusInfo, setLoadReviewEnabled, setResults } from './reducer/connectController';\nimport { getVideoContainer, getAudioContainer, setLineText, setSegmentType, setSegmentCategory, setLineRole, setLineCategory, setLineAttributes, setSegmentAttributes, mergeSegmentBackward, setSegmentTimestamp, splitSegmentForward, pushLine, toppingLine, deleteLine, setSegmentQAState, setSegmentQAComment, removeSegment, setSegmentQAReason, moveSegmentInBatch, appendSegment, updateSegment, deleteSegment, setSegments, updateLineRole, setSegmentStartEnd } from './reducer/segmentController';\nimport { setPlayMode, setCurrentVideo, playCurrentVideo, pauseCurrentVideo, forwardCurrentVideo, backwardCurrentVideo, setCurrentSegment, debug, getWavesurfers, setPlayingState, setVideoZoom, setVideoSpeed, showHideGuider, setErrorMsg, setAudioErrorMsg, setMeasurement, updateVideoInfo } from './reducer/settingController';\nimport { SegmentMode } from '../constants';\nconst initState = {\n  videos: [],\n  results: [],\n  ontology: [],\n  globalConfig: null,\n  invalidAnnotatable: true,\n  annotateDisabled: false,\n  segmentConfig: [],\n  lineConfig: [],\n  reviews: null,\n  /* job setting */\n  unitId: null,\n  toolMode: null,\n  issueTypes: [],\n  /* user setting */\n  currentPlayMode: 'regionPlay',\n  currentVideo: 0,\n  currentSegment: 0,\n  isPlaying: false,\n  isGuiding: false,\n  /* constant setting */\n  minSegmentLength: 0.05,\n  navigationSize: 1,\n  /* wavesurfer component */\n  wavesurfers: null,\n  errorMsg: '',\n  audioErrorMsg: undefined,\n  tagGroup: [],\n  segmentMode: SegmentMode.continuous,\n  spaceLine: 0,\n  measurements: [],\n  selectedMeasurement: -1,\n  segmentOverlap: true,\n  adjustmentStep: 0.1,\n  isLoadedAlaw: false,\n  loading: true,\n  focusAttribute: {},\n  loadReviewEnabled: false\n};\nexport default ((state = initState, action) => {\n  let newState = initState;\n  switch (action.type) {\n    case DEBUG:\n      newState = debug(state, action.data);\n      break;\n    case GET_WAVESURFERS:\n      newState = getWavesurfers(state, action.data);\n      break;\n    case SET_VIDEO_VALID:\n      newState = setVideoValid(state, action.data);\n      break;\n    case SET_VIDEO_ATTR:\n      newState = setVideoAttributes(state, action.data);\n      break;\n    case INIT_PAYLOAD:\n      newState = initPayloadState(initState, action.data);\n      break;\n    case SET_WORD_TIMESTAMPS:\n      newState = setWordTimestamps(state, action.data);\n      break;\n    case GET_VIDEO_CONTAINER:\n      newState = getVideoContainer(state, action.data);\n      break;\n    case GET_AUDIO_CONTAINRE:\n      newState = getAudioContainer(state, action.data);\n      break;\n    case SET_LINE_TEXT:\n      newState = setLineText(state, action.data);\n      break;\n    case SET_PLAY_MODE:\n      newState = setPlayMode(state, action.data);\n      break;\n    case SET_CURRENT_VIDEO:\n      newState = setCurrentVideo(state, action.data);\n      break;\n    case PLAY_CURRENT_VIDEO:\n      newState = playCurrentVideo(state);\n      break;\n    case PAUSE_CURRENT_VIDEO:\n      newState = pauseCurrentVideo(state);\n      break;\n    case FORWARD_CURRENT_VIDEO:\n      newState = forwardCurrentVideo(state);\n      break;\n    case BACKWARD_CURRENT_VIDEO:\n      newState = backwardCurrentVideo(state);\n      break;\n    case SET_CURRENT_SEGMENT:\n      newState = setCurrentSegment(state, action.data);\n      break;\n    case SET_SEGMENT_TYPE:\n      newState = setSegmentType(state, action.data);\n      break;\n    case SET_SEGMENT_CATEGORY:\n      newState = setSegmentCategory(state, action.data);\n      break;\n    case SET_LINE_ROLE:\n      newState = setLineRole(state, action.data);\n      break;\n    case SET_LINE_CATEGORY:\n      newState = setLineCategory(state, action.data);\n      break;\n    case SET_LINE_ATTRIBUTES:\n      newState = setLineAttributes(state, action.data);\n      break;\n    case SET_PLAYING_STATE:\n      newState = setPlayingState(state, action.data);\n      break;\n    case MERGE_SEGMENT_BACKWARD:\n      newState = mergeSegmentBackward(state, action.data);\n      break;\n    case SET_SEGMENT_TIMESTAMP:\n      newState = setSegmentTimestamp(state, action.data);\n      break;\n    case SPLIT_SEGMENT_FORWARD:\n      newState = splitSegmentForward(state, action.data);\n      break;\n    case PUSH_LINE:\n      newState = pushLine(state, action.data);\n      break;\n    case SET_VIDEO_ZOOM:\n      newState = setVideoZoom(state, action.data);\n      break;\n    case SET_VIDEO_SPEED:\n      newState = setVideoSpeed(state, action.data);\n      break;\n    case DELETE_LINE:\n      newState = deleteLine(state, action.data);\n      break;\n    case TOPPING_LINE:\n      newState = toppingLine(state, action.data);\n      break;\n    case SHOW_HIDE_GUIDE:\n      newState = showHideGuider(state, action.data);\n      break;\n    case SET_SEGMENT_QASTATE:\n      newState = setSegmentQAState(state, action.data);\n      break;\n    case SET_SEGMENT_QACOMMENT:\n      newState = setSegmentQAComment(state, action.data);\n      break;\n    case SET_SEGMENT_QAREASON:\n      newState = setSegmentQAReason(state, action.data);\n      break;\n    case MOVE_SEGMENT_IN_BATCH:\n      newState = moveSegmentInBatch(state, action.data);\n      break;\n    case REMOVE_SEGMENT:\n      newState = removeSegment(state, action.data);\n      break;\n    case PARSE_SEGMENTS:\n      newState = parseSegments(state, action.data);\n      break;\n    case SET_ERROR_MESSAGE:\n      newState = setErrorMsg(state, action.data);\n      break;\n    case SET_AUDIO_ERROR_MESSAGE:\n      newState = setAudioErrorMsg(state, action.data);\n      break;\n    case APPEND_SEGMENT:\n      newState = appendSegment(state, action.data);\n      break;\n    case UPDATE_SEGMENT:\n      newState = updateSegment(state, action.data);\n      break;\n    case DELETE_SEGMENT:\n      newState = deleteSegment(state, action.data);\n      break;\n    case SET_SEGMENTS:\n      newState = setSegments(state, action.data);\n      break;\n    case UPDATE_LINE_ROLE:\n      newState = updateLineRole(state, action.data);\n      break;\n    case SET_SEGMENT_START_END:\n      newState = setSegmentStartEnd(state, action.data);\n      break;\n    case SET_MEASUREMENT:\n      newState = setMeasurement(state, action.data);\n      break;\n    case UPDATE_VIDEO_INFO:\n      newState = updateVideoInfo(state, action.data);\n      break;\n    case SET_VIDEO_LOADED:\n      newState = setVideoLoaded(state, action.data);\n      break;\n    case SET_LOADING:\n      newState = setLoading(state, action.data);\n      break;\n    case SET_ATTRIBUTE_FOCUS_INFO:\n      newState = setAttributeFocusInfo(state, action.data);\n      break;\n    case SET_SEGMENT_ATTRIBUTES:\n      newState = setSegmentAttributes(state, action.data);\n      break;\n    case SET_LOAD_REVIEW_ENABLED:\n      newState = setLoadReviewEnabled(state, action.data);\n      break;\n    case SET_RESULT:\n      newState = setResults(state, action.data);\n      break;\n    default:\n      return newState;\n  }\n  // saveData(newState, action.type);\n  return newState;\n});","map":{"version":3,"names":["BACKWARD_CURRENT_VIDEO","DEBUG","FORWARD_CURRENT_VIDEO","GET_AUDIO_CONTAINRE","GET_VIDEO_CONTAINER","GET_WAVESURFERS","INIT_PAYLOAD","MERGE_SEGMENT_BACKWARD","PAUSE_CURRENT_VIDEO","PLAY_CURRENT_VIDEO","PUSH_LINE","SET_CURRENT_SEGMENT","SET_CURRENT_VIDEO","SET_LINE_CATEGORY","SET_LINE_ATTRIBUTES","SET_LINE_ROLE","SET_LINE_TEXT","SET_PLAY_MODE","SET_PLAYING_STATE","SET_SEGMENT_CATEGORY","SET_SEGMENT_ATTRIBUTES","SET_SEGMENT_TIMESTAMP","SET_SEGMENT_TYPE","SET_VIDEO_SPEED","SET_VIDEO_ZOOM","SPLIT_SEGMENT_FORWARD","DELETE_LINE","TOPPING_LINE","SET_VIDEO_LOADED","SET_VIDEO_VALID","SET_VIDEO_ATTR","SHOW_HIDE_GUIDE","SET_SEGMENT_QASTATE","SET_SEGMENT_QACOMMENT","SET_SEGMENT_QAREASON","REMOVE_SEGMENT","PARSE_SEGMENTS","SET_ERROR_MESSAGE","SET_AUDIO_ERROR_MESSAGE","MOVE_SEGMENT_IN_BATCH","SET_WORD_TIMESTAMPS","APPEND_SEGMENT","UPDATE_SEGMENT","DELETE_SEGMENT","SET_SEGMENTS","UPDATE_LINE_ROLE","SET_SEGMENT_START_END","SET_MEASUREMENT","UPDATE_VIDEO_INFO","SET_LOADING","SET_ATTRIBUTE_FOCUS_INFO","SET_LOAD_REVIEW_ENABLED","SET_RESULT","initPayloadState","parseSegments","saveData","setVideoLoaded","setVideoValid","setVideoAttributes","setWordTimestamps","setLoading","setAttributeFocusInfo","setLoadReviewEnabled","setResults","getVideoContainer","getAudioContainer","setLineText","setSegmentType","setSegmentCategory","setLineRole","setLineCategory","setLineAttributes","setSegmentAttributes","mergeSegmentBackward","setSegmentTimestamp","splitSegmentForward","pushLine","toppingLine","deleteLine","setSegmentQAState","setSegmentQAComment","removeSegment","setSegmentQAReason","moveSegmentInBatch","appendSegment","updateSegment","deleteSegment","setSegments","updateLineRole","setSegmentStartEnd","setPlayMode","setCurrentVideo","playCurrentVideo","pauseCurrentVideo","forwardCurrentVideo","backwardCurrentVideo","setCurrentSegment","debug","getWavesurfers","setPlayingState","setVideoZoom","setVideoSpeed","showHideGuider","setErrorMsg","setAudioErrorMsg","setMeasurement","updateVideoInfo","SegmentMode","initState","videos","results","ontology","globalConfig","invalidAnnotatable","annotateDisabled","segmentConfig","lineConfig","reviews","unitId","toolMode","issueTypes","currentPlayMode","currentVideo","currentSegment","isPlaying","isGuiding","minSegmentLength","navigationSize","wavesurfers","errorMsg","audioErrorMsg","undefined","tagGroup","segmentMode","continuous","spaceLine","measurements","selectedMeasurement","segmentOverlap","adjustmentStep","isLoadedAlaw","loading","focusAttribute","loadReviewEnabled","state","action","newState","type","data"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/long-audio/redux/reducer.js"],"sourcesContent":["import {\n  BACKWARD_CURRENT_VIDEO,\n  DEBUG,\n  FORWARD_CURRENT_VIDEO,\n  GET_AUDIO_CONTAINRE,\n  GET_VIDEO_CONTAINER,\n  GET_WAVESURFERS,\n  INIT_PAYLOAD,\n  MERGE_SEGMENT_BACKWARD,\n  PAUSE_CURRENT_VIDEO,\n  PLAY_CURRENT_VIDEO,\n  PUSH_LINE,\n  SET_CURRENT_SEGMENT,\n  SET_CURRENT_VIDEO,\n  SET_LINE_CATEGORY,\n  SET_LINE_ATTRIBUTES,\n  SET_LINE_ROLE,\n  SET_LINE_TEXT,\n  SET_PLAY_MODE,\n  SET_PLAYING_STATE,\n  SET_SEGMENT_CATEGORY,\n  SET_SEGMENT_ATTRIBUTES,\n  SET_SEGMENT_TIMESTAMP,\n  SET_SEGMENT_TYPE,\n  SET_VIDEO_SPEED,\n  SET_VIDEO_ZOOM,\n  SPLIT_SEGMENT_FORWARD,\n  DELETE_LINE,\n  TOPPING_LINE,\n  SET_VIDEO_LOADED,\n  SET_VIDEO_VALID,\n  SET_VIDEO_ATTR,\n  SHOW_HIDE_GUIDE,\n  SET_SEGMENT_QASTATE,\n  SET_SEGMENT_QACOMMENT,\n  SET_SEGMENT_QAREASON,\n  REMOVE_SEGMENT,\n  PARSE_SEGMENTS,\n  SET_ERROR_MESSAGE,\n  SET_AUDIO_ERROR_MESSAGE,\n  MOVE_SEGMENT_IN_BATCH,\n  SET_WORD_TIMESTAMPS,\n  APPEND_SEGMENT,\n  UPDATE_SEGMENT,\n  DELETE_SEGMENT,\n  SET_SEGMENTS,\n  UPDATE_LINE_ROLE,\n  SET_SEGMENT_START_END,\n  SET_MEASUREMENT,\n  UPDATE_VIDEO_INFO,\n  SET_LOADING,\n  SET_ATTRIBUTE_FOCUS_INFO,\n  SET_LOAD_REVIEW_ENABLED,\n  SET_RESULT,\n} from './action';\nimport {\n  initPayloadState,\n  parseSegments,\n  saveData,\n  setVideoLoaded,\n  setVideoValid,\n  setVideoAttributes,\n  setWordTimestamps,\n  setLoading,\n  setAttributeFocusInfo,\n  setLoadReviewEnabled,\n  setResults,\n} from './reducer/connectController';\nimport {\n  getVideoContainer,\n  getAudioContainer,\n  setLineText,\n  setSegmentType,\n  setSegmentCategory,\n  setLineRole,\n  setLineCategory,\n  setLineAttributes,\n  setSegmentAttributes,\n  mergeSegmentBackward,\n  setSegmentTimestamp, splitSegmentForward, pushLine,\n  toppingLine, deleteLine,\n  setSegmentQAState,\n  setSegmentQAComment,\n  removeSegment,\n  setSegmentQAReason,\n  moveSegmentInBatch,\n  appendSegment,\n  updateSegment,\n  deleteSegment,\n  setSegments,\n  updateLineRole,\n  setSegmentStartEnd,\n} from './reducer/segmentController';\nimport {\n  setPlayMode,\n  setCurrentVideo,\n  playCurrentVideo,\n  pauseCurrentVideo,\n  forwardCurrentVideo,\n  backwardCurrentVideo,\n  setCurrentSegment,\n  debug,\n  getWavesurfers,\n  setPlayingState,\n  setVideoZoom,\n  setVideoSpeed,\n  showHideGuider,\n  setErrorMsg,\n  setAudioErrorMsg,\n  setMeasurement,\n  updateVideoInfo,\n} from './reducer/settingController';\nimport { SegmentMode } from '../constants';\n\nconst initState = {\n  videos: [],\n  results: [],\n  ontology: [],\n  globalConfig: null,\n  invalidAnnotatable: true,\n  annotateDisabled: false,\n  segmentConfig: [],\n  lineConfig: [],\n  reviews: null,\n  /* job setting */\n  unitId: null,\n  toolMode: null,\n  issueTypes: [],\n  /* user setting */\n  currentPlayMode: 'regionPlay',\n  currentVideo: 0,\n  currentSegment: 0,\n  isPlaying: false,\n  isGuiding: false,\n  /* constant setting */\n  minSegmentLength: 0.05,\n  navigationSize: 1,\n  /* wavesurfer component */\n  wavesurfers: null,\n  errorMsg: '',\n  audioErrorMsg: undefined,\n  tagGroup: [],\n  segmentMode: SegmentMode.continuous,\n  spaceLine: 0,\n  measurements: [],\n  selectedMeasurement: -1,\n  segmentOverlap: true,\n  adjustmentStep: 0.1,\n  isLoadedAlaw: false,\n  loading: true,\n  focusAttribute: {},\n  loadReviewEnabled: false,\n};\n\nexport default (state = initState, action) => {\n  let newState = initState;\n  switch (action.type) {\n    case DEBUG:\n      newState = debug(state, action.data);\n      break;\n    case GET_WAVESURFERS:\n      newState = getWavesurfers(state, action.data);\n      break;\n    case SET_VIDEO_VALID:\n      newState = setVideoValid(state, action.data);\n      break;\n    case SET_VIDEO_ATTR:\n      newState = setVideoAttributes(state, action.data);\n      break;\n    case INIT_PAYLOAD:\n      newState = initPayloadState(initState, action.data);\n      break;\n    case SET_WORD_TIMESTAMPS:\n      newState = setWordTimestamps(state, action.data);\n      break;\n    case GET_VIDEO_CONTAINER:\n      newState = getVideoContainer(state, action.data);\n      break;\n    case GET_AUDIO_CONTAINRE:\n      newState = getAudioContainer(state, action.data);\n      break;\n    case SET_LINE_TEXT:\n      newState = setLineText(state, action.data);\n      break;\n    case SET_PLAY_MODE:\n      newState = setPlayMode(state, action.data);\n      break;\n    case SET_CURRENT_VIDEO:\n      newState = setCurrentVideo(state, action.data);\n      break;\n    case PLAY_CURRENT_VIDEO:\n      newState = playCurrentVideo(state);\n      break;\n    case PAUSE_CURRENT_VIDEO:\n      newState = pauseCurrentVideo(state);\n      break;\n    case FORWARD_CURRENT_VIDEO:\n      newState = forwardCurrentVideo(state);\n      break;\n    case BACKWARD_CURRENT_VIDEO:\n      newState = backwardCurrentVideo(state);\n      break;\n    case SET_CURRENT_SEGMENT:\n      newState = setCurrentSegment(state, action.data);\n      break;\n    case SET_SEGMENT_TYPE:\n      newState = setSegmentType(state, action.data);\n      break;\n    case SET_SEGMENT_CATEGORY:\n      newState = setSegmentCategory(state, action.data);\n      break;\n    case SET_LINE_ROLE:\n      newState = setLineRole(state, action.data);\n      break;\n    case SET_LINE_CATEGORY:\n      newState = setLineCategory(state, action.data);\n      break;\n    case SET_LINE_ATTRIBUTES:\n      newState = setLineAttributes(state, action.data);\n      break;\n    case SET_PLAYING_STATE:\n      newState = setPlayingState(state, action.data);\n      break;\n    case MERGE_SEGMENT_BACKWARD:\n      newState = mergeSegmentBackward(state, action.data);\n      break;\n    case SET_SEGMENT_TIMESTAMP:\n      newState = setSegmentTimestamp(state, action.data);\n      break;\n    case SPLIT_SEGMENT_FORWARD:\n      newState = splitSegmentForward(state, action.data);\n      break;\n    case PUSH_LINE:\n      newState = pushLine(state, action.data);\n      break;\n    case SET_VIDEO_ZOOM:\n      newState = setVideoZoom(state, action.data);\n      break;\n    case SET_VIDEO_SPEED:\n      newState = setVideoSpeed(state, action.data);\n      break;\n    case DELETE_LINE:\n      newState = deleteLine(state, action.data);\n      break;\n    case TOPPING_LINE:\n      newState = toppingLine(state, action.data);\n      break;\n    case SHOW_HIDE_GUIDE:\n      newState = showHideGuider(state, action.data);\n      break;\n    case SET_SEGMENT_QASTATE:\n      newState = setSegmentQAState(state, action.data);\n      break;\n    case SET_SEGMENT_QACOMMENT:\n      newState = setSegmentQAComment(state, action.data);\n      break;\n    case SET_SEGMENT_QAREASON:\n      newState = setSegmentQAReason(state, action.data);\n      break;\n    case MOVE_SEGMENT_IN_BATCH:\n      newState = moveSegmentInBatch(state, action.data);\n      break;\n    case REMOVE_SEGMENT:\n      newState = removeSegment(state, action.data);\n      break;\n    case PARSE_SEGMENTS:\n      newState = parseSegments(state, action.data);\n      break;\n    case SET_ERROR_MESSAGE:\n      newState = setErrorMsg(state, action.data);\n      break;\n    case SET_AUDIO_ERROR_MESSAGE:\n      newState = setAudioErrorMsg(state, action.data);\n      break;\n    case APPEND_SEGMENT:\n      newState = appendSegment(state, action.data);\n      break;\n    case UPDATE_SEGMENT:\n      newState = updateSegment(state, action.data);\n      break;\n    case DELETE_SEGMENT:\n      newState = deleteSegment(state, action.data);\n      break;\n    case SET_SEGMENTS:\n      newState = setSegments(state, action.data);\n      break;\n    case UPDATE_LINE_ROLE:\n      newState = updateLineRole(state, action.data);\n      break;\n    case SET_SEGMENT_START_END:\n      newState = setSegmentStartEnd(state, action.data);\n      break;\n    case SET_MEASUREMENT:\n      newState = setMeasurement(state, action.data);\n      break;\n    case UPDATE_VIDEO_INFO:\n      newState = updateVideoInfo(state, action.data);\n      break;\n    case SET_VIDEO_LOADED:\n      newState = setVideoLoaded(state, action.data);\n      break;\n    case SET_LOADING:\n      newState = setLoading(state, action.data);\n      break;\n    case SET_ATTRIBUTE_FOCUS_INFO:\n      newState = setAttributeFocusInfo(state, action.data);\n      break;\n    case SET_SEGMENT_ATTRIBUTES:\n      newState = setSegmentAttributes(state, action.data);\n      break;\n    case SET_LOAD_REVIEW_ENABLED:\n      newState = setLoadReviewEnabled(state, action.data);\n      break;\n    case SET_RESULT:\n      newState = setResults(state, action.data);\n      break;\n    default:\n      return newState;\n  }\n  // saveData(newState, action.type);\n  return newState;\n};\n"],"mappings":"AAAA,SACEA,sBAAsB,EACtBC,KAAK,EACLC,qBAAqB,EACrBC,mBAAmB,EACnBC,mBAAmB,EACnBC,eAAe,EACfC,YAAY,EACZC,sBAAsB,EACtBC,mBAAmB,EACnBC,kBAAkB,EAClBC,SAAS,EACTC,mBAAmB,EACnBC,iBAAiB,EACjBC,iBAAiB,EACjBC,mBAAmB,EACnBC,aAAa,EACbC,aAAa,EACbC,aAAa,EACbC,iBAAiB,EACjBC,oBAAoB,EACpBC,sBAAsB,EACtBC,qBAAqB,EACrBC,gBAAgB,EAChBC,eAAe,EACfC,cAAc,EACdC,qBAAqB,EACrBC,WAAW,EACXC,YAAY,EACZC,gBAAgB,EAChBC,eAAe,EACfC,cAAc,EACdC,eAAe,EACfC,mBAAmB,EACnBC,qBAAqB,EACrBC,oBAAoB,EACpBC,cAAc,EACdC,cAAc,EACdC,iBAAiB,EACjBC,uBAAuB,EACvBC,qBAAqB,EACrBC,mBAAmB,EACnBC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,YAAY,EACZC,gBAAgB,EAChBC,qBAAqB,EACrBC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACXC,wBAAwB,EACxBC,uBAAuB,EACvBC,UAAU,QACL,UAAU;AACjB,SACEC,gBAAgB,EAChBC,aAAa,EACbC,QAAQ,EACRC,cAAc,EACdC,aAAa,EACbC,kBAAkB,EAClBC,iBAAiB,EACjBC,UAAU,EACVC,qBAAqB,EACrBC,oBAAoB,EACpBC,UAAU,QACL,6BAA6B;AACpC,SACEC,iBAAiB,EACjBC,iBAAiB,EACjBC,WAAW,EACXC,cAAc,EACdC,kBAAkB,EAClBC,WAAW,EACXC,eAAe,EACfC,iBAAiB,EACjBC,oBAAoB,EACpBC,oBAAoB,EACpBC,mBAAmB,EAAEC,mBAAmB,EAAEC,QAAQ,EAClDC,WAAW,EAAEC,UAAU,EACvBC,iBAAiB,EACjBC,mBAAmB,EACnBC,aAAa,EACbC,kBAAkB,EAClBC,kBAAkB,EAClBC,aAAa,EACbC,aAAa,EACbC,aAAa,EACbC,WAAW,EACXC,cAAc,EACdC,kBAAkB,QACb,6BAA6B;AACpC,SACEC,WAAW,EACXC,eAAe,EACfC,gBAAgB,EAChBC,iBAAiB,EACjBC,mBAAmB,EACnBC,oBAAoB,EACpBC,iBAAiB,EACjBC,KAAK,EACLC,cAAc,EACdC,eAAe,EACfC,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,gBAAgB,EAChBC,cAAc,EACdC,eAAe,QACV,6BAA6B;AACpC,SAASC,WAAW,QAAQ,cAAc;AAE1C,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAE,EAAE;EACVC,OAAO,EAAE,EAAE;EACXC,QAAQ,EAAE,EAAE;EACZC,YAAY,EAAE,IAAI;EAClBC,kBAAkB,EAAE,IAAI;EACxBC,gBAAgB,EAAE,KAAK;EACvBC,aAAa,EAAE,EAAE;EACjBC,UAAU,EAAE,EAAE;EACdC,OAAO,EAAE,IAAI;EACb;EACAC,MAAM,EAAE,IAAI;EACZC,QAAQ,EAAE,IAAI;EACdC,UAAU,EAAE,EAAE;EACd;EACAC,eAAe,EAAE,YAAY;EAC7BC,YAAY,EAAE,CAAC;EACfC,cAAc,EAAE,CAAC;EACjBC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,KAAK;EAChB;EACAC,gBAAgB,EAAE,IAAI;EACtBC,cAAc,EAAE,CAAC;EACjB;EACAC,WAAW,EAAE,IAAI;EACjBC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAEC,SAAS;EACxBC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE1B,WAAW,CAAC2B,UAAU;EACnCC,SAAS,EAAE,CAAC;EACZC,YAAY,EAAE,EAAE;EAChBC,mBAAmB,EAAE,CAAC,CAAC;EACvBC,cAAc,EAAE,IAAI;EACpBC,cAAc,EAAE,GAAG;EACnBC,YAAY,EAAE,KAAK;EACnBC,OAAO,EAAE,IAAI;EACbC,cAAc,EAAE,CAAC,CAAC;EAClBC,iBAAiB,EAAE;AACrB,CAAC;AAED,gBAAe,CAACC,KAAK,GAAGpC,SAAS,EAAEqC,MAAM,KAAK;EAC5C,IAAIC,QAAQ,GAAGtC,SAAS;EACxB,QAAQqC,MAAM,CAACE,IAAI;IACjB,KAAKlJ,KAAK;MACRiJ,QAAQ,GAAGjD,KAAK,CAAC+C,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACpC;IACF,KAAK/I,eAAe;MAClB6I,QAAQ,GAAGhD,cAAc,CAAC8C,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC7C;IACF,KAAKvH,eAAe;MAClBqH,QAAQ,GAAGzF,aAAa,CAACuF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC5C;IACF,KAAKtH,cAAc;MACjBoH,QAAQ,GAAGxF,kBAAkB,CAACsF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACjD;IACF,KAAK9I,YAAY;MACf4I,QAAQ,GAAG7F,gBAAgB,CAACuD,SAAS,EAAEqC,MAAM,CAACG,IAAI,CAAC;MACnD;IACF,KAAK5G,mBAAmB;MACtB0G,QAAQ,GAAGvF,iBAAiB,CAACqF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAChD;IACF,KAAKhJ,mBAAmB;MACtB8I,QAAQ,GAAGlF,iBAAiB,CAACgF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAChD;IACF,KAAKjJ,mBAAmB;MACtB+I,QAAQ,GAAGjF,iBAAiB,CAAC+E,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAChD;IACF,KAAKpI,aAAa;MAChBkI,QAAQ,GAAGhF,WAAW,CAAC8E,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC1C;IACF,KAAKnI,aAAa;MAChBiI,QAAQ,GAAGxD,WAAW,CAACsD,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC1C;IACF,KAAKxI,iBAAiB;MACpBsI,QAAQ,GAAGvD,eAAe,CAACqD,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC9C;IACF,KAAK3I,kBAAkB;MACrByI,QAAQ,GAAGtD,gBAAgB,CAACoD,KAAK,CAAC;MAClC;IACF,KAAKxI,mBAAmB;MACtB0I,QAAQ,GAAGrD,iBAAiB,CAACmD,KAAK,CAAC;MACnC;IACF,KAAK9I,qBAAqB;MACxBgJ,QAAQ,GAAGpD,mBAAmB,CAACkD,KAAK,CAAC;MACrC;IACF,KAAKhJ,sBAAsB;MACzBkJ,QAAQ,GAAGnD,oBAAoB,CAACiD,KAAK,CAAC;MACtC;IACF,KAAKrI,mBAAmB;MACtBuI,QAAQ,GAAGlD,iBAAiB,CAACgD,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAChD;IACF,KAAK9H,gBAAgB;MACnB4H,QAAQ,GAAG/E,cAAc,CAAC6E,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC7C;IACF,KAAKjI,oBAAoB;MACvB+H,QAAQ,GAAG9E,kBAAkB,CAAC4E,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACjD;IACF,KAAKrI,aAAa;MAChBmI,QAAQ,GAAG7E,WAAW,CAAC2E,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC1C;IACF,KAAKvI,iBAAiB;MACpBqI,QAAQ,GAAG5E,eAAe,CAAC0E,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC9C;IACF,KAAKtI,mBAAmB;MACtBoI,QAAQ,GAAG3E,iBAAiB,CAACyE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAChD;IACF,KAAKlI,iBAAiB;MACpBgI,QAAQ,GAAG/C,eAAe,CAAC6C,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC9C;IACF,KAAK7I,sBAAsB;MACzB2I,QAAQ,GAAGzE,oBAAoB,CAACuE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACnD;IACF,KAAK/H,qBAAqB;MACxB6H,QAAQ,GAAGxE,mBAAmB,CAACsE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAClD;IACF,KAAK3H,qBAAqB;MACxByH,QAAQ,GAAGvE,mBAAmB,CAACqE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAClD;IACF,KAAK1I,SAAS;MACZwI,QAAQ,GAAGtE,QAAQ,CAACoE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACvC;IACF,KAAK5H,cAAc;MACjB0H,QAAQ,GAAG9C,YAAY,CAAC4C,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC3C;IACF,KAAK7H,eAAe;MAClB2H,QAAQ,GAAG7C,aAAa,CAAC2C,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC5C;IACF,KAAK1H,WAAW;MACdwH,QAAQ,GAAGpE,UAAU,CAACkE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACzC;IACF,KAAKzH,YAAY;MACfuH,QAAQ,GAAGrE,WAAW,CAACmE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC1C;IACF,KAAKrH,eAAe;MAClBmH,QAAQ,GAAG5C,cAAc,CAAC0C,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC7C;IACF,KAAKpH,mBAAmB;MACtBkH,QAAQ,GAAGnE,iBAAiB,CAACiE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAChD;IACF,KAAKnH,qBAAqB;MACxBiH,QAAQ,GAAGlE,mBAAmB,CAACgE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAClD;IACF,KAAKlH,oBAAoB;MACvBgH,QAAQ,GAAGhE,kBAAkB,CAAC8D,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACjD;IACF,KAAK7G,qBAAqB;MACxB2G,QAAQ,GAAG/D,kBAAkB,CAAC6D,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACjD;IACF,KAAKjH,cAAc;MACjB+G,QAAQ,GAAGjE,aAAa,CAAC+D,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC5C;IACF,KAAKhH,cAAc;MACjB8G,QAAQ,GAAG5F,aAAa,CAAC0F,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC5C;IACF,KAAK/G,iBAAiB;MACpB6G,QAAQ,GAAG3C,WAAW,CAACyC,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC1C;IACF,KAAK9G,uBAAuB;MAC1B4G,QAAQ,GAAG1C,gBAAgB,CAACwC,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC/C;IACF,KAAK3G,cAAc;MACjByG,QAAQ,GAAG9D,aAAa,CAAC4D,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC5C;IACF,KAAK1G,cAAc;MACjBwG,QAAQ,GAAG7D,aAAa,CAAC2D,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC5C;IACF,KAAKzG,cAAc;MACjBuG,QAAQ,GAAG5D,aAAa,CAAC0D,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC5C;IACF,KAAKxG,YAAY;MACfsG,QAAQ,GAAG3D,WAAW,CAACyD,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC1C;IACF,KAAKvG,gBAAgB;MACnBqG,QAAQ,GAAG1D,cAAc,CAACwD,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC7C;IACF,KAAKtG,qBAAqB;MACxBoG,QAAQ,GAAGzD,kBAAkB,CAACuD,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACjD;IACF,KAAKrG,eAAe;MAClBmG,QAAQ,GAAGzC,cAAc,CAACuC,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC7C;IACF,KAAKpG,iBAAiB;MACpBkG,QAAQ,GAAGxC,eAAe,CAACsC,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC9C;IACF,KAAKxH,gBAAgB;MACnBsH,QAAQ,GAAG1F,cAAc,CAACwF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MAC7C;IACF,KAAKnG,WAAW;MACdiG,QAAQ,GAAGtF,UAAU,CAACoF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACzC;IACF,KAAKlG,wBAAwB;MAC3BgG,QAAQ,GAAGrF,qBAAqB,CAACmF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACpD;IACF,KAAKhI,sBAAsB;MACzB8H,QAAQ,GAAG1E,oBAAoB,CAACwE,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACnD;IACF,KAAKjG,uBAAuB;MAC1B+F,QAAQ,GAAGpF,oBAAoB,CAACkF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACnD;IACF,KAAKhG,UAAU;MACb8F,QAAQ,GAAGnF,UAAU,CAACiF,KAAK,EAAEC,MAAM,CAACG,IAAI,CAAC;MACzC;IACF;MACE,OAAOF,QAAQ;EACnB;EACA;EACA,OAAOA,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}