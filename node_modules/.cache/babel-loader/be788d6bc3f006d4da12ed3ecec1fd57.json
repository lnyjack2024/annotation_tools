{"ast":null,"code":"/*\r\n * alawmulaw: A-Law and mu-Law codecs in JavaScript.\r\n * https://github.com/rochars/alawmulaw\r\n *\r\n * Copyright (c) 2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview A-Law codec.\r\n */\n\n/** @module alawmulaw/alaw */\n\n/** @type {!Array<number>} */\nconst LOG_TABLE = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];\n\n/**\r\n * Encode a 16-bit linear PCM sample as 8-bit A-Law.\r\n * @param {number} sample A 16-bit PCM sample\r\n * @return {number}\r\n */\nexport function encodeSample(sample) {\n  /** @type {number} */\n  let compandedValue;\n  sample = sample == -32768 ? -32767 : sample;\n  /** @type {number} */\n  let sign = ~sample >> 8 & 0x80;\n  if (!sign) {\n    sample = sample * -1;\n  }\n  if (sample > 32635) {\n    sample = 32635;\n  }\n  if (sample >= 256) {\n    /** @type {number} */\n    let exponent = LOG_TABLE[sample >> 8 & 0x7F];\n    /** @type {number} */\n    let mantissa = sample >> exponent + 3 & 0x0F;\n    compandedValue = exponent << 4 | mantissa;\n  } else {\n    compandedValue = sample >> 4;\n  }\n  return compandedValue ^ (sign ^ 0x55);\n}\n\n/**\r\n * Decode a 8-bit A-Law sample as 16-bit PCM.\r\n * @param {number} aLawSample The 8-bit A-Law sample\r\n * @return {number}\r\n */\nexport function decodeSample(aLawSample) {\n  /** @type {number} */\n  let sign = 0;\n  aLawSample ^= 0x55;\n  if (aLawSample & 0x80) {\n    aLawSample &= ~(1 << 7);\n    sign = -1;\n  }\n  /** @type {number} */\n  let position = ((aLawSample & 0xF0) >> 4) + 4;\n  /** @type {number} */\n  let decoded = 0;\n  if (position != 4) {\n    decoded = 1 << position | (aLawSample & 0x0F) << position - 4 | 1 << position - 5;\n  } else {\n    decoded = aLawSample << 1 | 1;\n  }\n  decoded = sign === 0 ? decoded : -decoded;\n  return decoded * 8 * -1;\n}\n\n/**\r\n * Encode 16-bit linear PCM samples as 8-bit A-Law samples.\r\n * @param {!Int16Array} samples A array of 16-bit PCM samples.\r\n * @return {!Uint8Array}\r\n */\nexport function encode(samples) {\n  /** @type {!Uint8Array} */\n  let aLawSamples = new Uint8Array(samples.length);\n  for (let i = 0; i < samples.length; i++) {\n    aLawSamples[i] = encodeSample(samples[i]);\n  }\n  return aLawSamples;\n}\n\n/**\r\n * Decode 8-bit A-Law samples into 16-bit linear PCM samples.\r\n * @param {!Uint8Array} samples A array of 8-bit A-Law samples.\r\n * @return {!Int16Array}\r\n */\nexport function decode(samples) {\n  /** @type {!Int16Array} */\n  let pcmSamples = new Int16Array(samples.length);\n  for (let i = 0; i < samples.length; i++) {\n    pcmSamples[i] = decodeSample(samples[i]);\n  }\n  return pcmSamples;\n}","map":{"version":3,"names":["LOG_TABLE","encodeSample","sample","compandedValue","sign","exponent","mantissa","decodeSample","aLawSample","position","decoded","encode","samples","aLawSamples","Uint8Array","length","i","decode","pcmSamples","Int16Array"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/node_modules/alawmulaw/lib/alaw.js"],"sourcesContent":["/*\r\n * alawmulaw: A-Law and mu-Law codecs in JavaScript.\r\n * https://github.com/rochars/alawmulaw\r\n *\r\n * Copyright (c) 2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview A-Law codec.\r\n */\r\n\r\n/** @module alawmulaw/alaw */\r\n\r\n/** @type {!Array<number>} */\r\nconst LOG_TABLE = [\r\n  1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5, \r\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6, \r\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, \r\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 \r\n];\r\n\r\n/**\r\n * Encode a 16-bit linear PCM sample as 8-bit A-Law.\r\n * @param {number} sample A 16-bit PCM sample\r\n * @return {number}\r\n */\r\nexport function encodeSample(sample) {\r\n  /** @type {number} */\r\n  let compandedValue; \r\n  sample = (sample ==-32768) ? -32767 : sample;\r\n  /** @type {number} */\r\n  let sign = ((~sample) >> 8) & 0x80; \r\n  if (!sign) {\r\n    sample = sample * -1; \r\n  }\r\n  if (sample > 32635) {\r\n    sample = 32635; \r\n  }\r\n  if (sample >= 256)  {\r\n    /** @type {number} */\r\n    let exponent = LOG_TABLE[(sample >> 8) & 0x7F];\r\n    /** @type {number} */\r\n    let mantissa = (sample >> (exponent + 3) ) & 0x0F; \r\n    compandedValue = ((exponent << 4) | mantissa); \r\n  } else {\r\n    compandedValue = sample >> 4; \r\n  } \r\n  return compandedValue ^ (sign ^ 0x55);\r\n}\r\n\r\n/**\r\n * Decode a 8-bit A-Law sample as 16-bit PCM.\r\n * @param {number} aLawSample The 8-bit A-Law sample\r\n * @return {number}\r\n */\r\nexport function decodeSample(aLawSample) {\r\n  /** @type {number} */\r\n  let sign = 0;\r\n  aLawSample ^= 0x55;\r\n  if (aLawSample & 0x80) {\r\n    aLawSample &= ~(1 << 7);\r\n    sign = -1;\r\n  }\r\n  /** @type {number} */\r\n  let position = ((aLawSample & 0xF0) >> 4) + 4;\r\n  /** @type {number} */\r\n  let decoded = 0;\r\n  if (position != 4) {\r\n    decoded = ((1 << position) |\r\n      ((aLawSample & 0x0F) << (position - 4)) |\r\n      (1 << (position - 5)));\r\n  } else {\r\n    decoded = (aLawSample << 1)|1;\r\n  }\r\n  decoded = (sign === 0) ? (decoded) : (-decoded);\r\n  return (decoded * 8) * -1;\r\n}\r\n\r\n/**\r\n * Encode 16-bit linear PCM samples as 8-bit A-Law samples.\r\n * @param {!Int16Array} samples A array of 16-bit PCM samples.\r\n * @return {!Uint8Array}\r\n */\r\nexport function encode(samples) {\r\n  /** @type {!Uint8Array} */\r\n  let aLawSamples = new Uint8Array(samples.length);\r\n  for (let i=0; i<samples.length; i++) {\r\n    aLawSamples[i] = encodeSample(samples[i]);\r\n  }\r\n  return aLawSamples;\r\n}\r\n\r\n/**\r\n * Decode 8-bit A-Law samples into 16-bit linear PCM samples.\r\n * @param {!Uint8Array} samples A array of 8-bit A-Law samples.\r\n * @return {!Int16Array}\r\n */\r\nexport function decode(samples) {\r\n  /** @type {!Int16Array} */\r\n  let pcmSamples = new Int16Array(samples.length);\r\n  for (let i=0; i<samples.length; i++) {\r\n    pcmSamples[i] = decodeSample(samples[i]);\r\n  }\r\n  return pcmSamples;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}