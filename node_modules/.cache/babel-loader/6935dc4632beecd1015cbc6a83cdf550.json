{"ast":null,"code":"import { EditorState, Modifier, RichUtils } from 'draft-js';\nimport { CODE_BLOCK_TYPE, UNSTYLED_TYPE } from '../constants';\nexport default function splitBlockCallback(updatedEditorState) {\n  const currentContent = updatedEditorState.getCurrentContent();\n  const selection = updatedEditorState.getSelection();\n  const selectionKey = selection.getAnchorKey();\n  const currBlock = currentContent.getBlockForKey(selectionKey);\n  if ((currBlock === null || currBlock === void 0 ? void 0 : currBlock.getType()) === CODE_BLOCK_TYPE) {\n    const lastBlock = currentContent.getBlockBefore(selectionKey);\n    if ((lastBlock === null || lastBlock === void 0 ? void 0 : lastBlock.getType()) === CODE_BLOCK_TYPE) {\n      // last block is code block\n      if (!currBlock.getText() && !lastBlock.getText()) {\n        // curr & last is empty line\n        const nextBlock = currentContent.getBlockAfter(selectionKey);\n        const preLastBlock = currentContent.getBlockBefore(lastBlock.getKey());\n        if ((nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.getType()) !== CODE_BLOCK_TYPE && (preLastBlock === null || preLastBlock === void 0 ? void 0 : preLastBlock.getType()) === CODE_BLOCK_TYPE && !preLastBlock.getText()) {\n          // two empty lines break code block\n          return RichUtils.toggleBlockType(updatedEditorState, UNSTYLED_TYPE);\n        }\n      }\n      const language = lastBlock.getData().get('language');\n      if (language) {\n        const currBlockData = currBlock.getData().merge({\n          language\n        });\n        const newContent = Modifier.setBlockData(currentContent, selection, currBlockData);\n        return EditorState.set(updatedEditorState, {\n          currentContent: newContent\n        });\n      }\n    }\n  }\n  return updatedEditorState;\n}","map":{"version":3,"names":["EditorState","Modifier","RichUtils","CODE_BLOCK_TYPE","UNSTYLED_TYPE","splitBlockCallback","updatedEditorState","currentContent","getCurrentContent","selection","getSelection","selectionKey","getAnchorKey","currBlock","getBlockForKey","getType","lastBlock","getBlockBefore","getText","nextBlock","getBlockAfter","preLastBlock","getKey","toggleBlockType","language","getData","get","currBlockData","merge","newContent","setBlockData","set"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/llm/input/callbacks/split-block-callback.ts"],"sourcesContent":["import { EditorState, Modifier, RichUtils } from 'draft-js';\nimport { CODE_BLOCK_TYPE, UNSTYLED_TYPE } from '../constants';\n\nexport default function splitBlockCallback(updatedEditorState: EditorState) {\n  const currentContent = updatedEditorState.getCurrentContent();\n  const selection = updatedEditorState.getSelection();\n  const selectionKey = selection.getAnchorKey();\n  const currBlock = currentContent.getBlockForKey(selectionKey);\n  if (currBlock?.getType() === CODE_BLOCK_TYPE) {\n    const lastBlock = currentContent.getBlockBefore(selectionKey);\n    if (lastBlock?.getType() === CODE_BLOCK_TYPE) {\n      // last block is code block\n      if (!currBlock.getText() && !lastBlock.getText()) {\n        // curr & last is empty line\n        const nextBlock = currentContent.getBlockAfter(selectionKey);\n        const preLastBlock = currentContent.getBlockBefore(lastBlock.getKey());\n        if (nextBlock?.getType() !== CODE_BLOCK_TYPE\n          && preLastBlock?.getType() === CODE_BLOCK_TYPE\n          && !preLastBlock.getText()) {\n          // two empty lines break code block\n          return RichUtils.toggleBlockType(updatedEditorState, UNSTYLED_TYPE);\n        }\n      }\n      const language = lastBlock.getData().get('language');\n      if (language) {\n        const currBlockData = currBlock.getData().merge({ language });\n        const newContent = Modifier.setBlockData(currentContent, selection, currBlockData);\n        return EditorState.set(updatedEditorState, {\n          currentContent: newContent,\n        });\n      }\n    }\n  }\n  return updatedEditorState;\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,UAAU;AAC3D,SAASC,eAAe,EAAEC,aAAa,QAAQ,cAAc;AAE7D,eAAe,SAASC,kBAAkBA,CAACC,kBAA+B,EAAE;EAC1E,MAAMC,cAAc,GAAGD,kBAAkB,CAACE,iBAAiB,CAAC,CAAC;EAC7D,MAAMC,SAAS,GAAGH,kBAAkB,CAACI,YAAY,CAAC,CAAC;EACnD,MAAMC,YAAY,GAAGF,SAAS,CAACG,YAAY,CAAC,CAAC;EAC7C,MAAMC,SAAS,GAAGN,cAAc,CAACO,cAAc,CAACH,YAAY,CAAC;EAC7D,IAAI,CAAAE,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,OAAO,CAAC,CAAC,MAAKZ,eAAe,EAAE;IAC5C,MAAMa,SAAS,GAAGT,cAAc,CAACU,cAAc,CAACN,YAAY,CAAC;IAC7D,IAAI,CAAAK,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAED,OAAO,CAAC,CAAC,MAAKZ,eAAe,EAAE;MAC5C;MACA,IAAI,CAACU,SAAS,CAACK,OAAO,CAAC,CAAC,IAAI,CAACF,SAAS,CAACE,OAAO,CAAC,CAAC,EAAE;QAChD;QACA,MAAMC,SAAS,GAAGZ,cAAc,CAACa,aAAa,CAACT,YAAY,CAAC;QAC5D,MAAMU,YAAY,GAAGd,cAAc,CAACU,cAAc,CAACD,SAAS,CAACM,MAAM,CAAC,CAAC,CAAC;QACtE,IAAI,CAAAH,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEJ,OAAO,CAAC,CAAC,MAAKZ,eAAe,IACvC,CAAAkB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEN,OAAO,CAAC,CAAC,MAAKZ,eAAe,IAC3C,CAACkB,YAAY,CAACH,OAAO,CAAC,CAAC,EAAE;UAC5B;UACA,OAAOhB,SAAS,CAACqB,eAAe,CAACjB,kBAAkB,EAAEF,aAAa,CAAC;QACrE;MACF;MACA,MAAMoB,QAAQ,GAAGR,SAAS,CAACS,OAAO,CAAC,CAAC,CAACC,GAAG,CAAC,UAAU,CAAC;MACpD,IAAIF,QAAQ,EAAE;QACZ,MAAMG,aAAa,GAAGd,SAAS,CAACY,OAAO,CAAC,CAAC,CAACG,KAAK,CAAC;UAAEJ;QAAS,CAAC,CAAC;QAC7D,MAAMK,UAAU,GAAG5B,QAAQ,CAAC6B,YAAY,CAACvB,cAAc,EAAEE,SAAS,EAAEkB,aAAa,CAAC;QAClF,OAAO3B,WAAW,CAAC+B,GAAG,CAACzB,kBAAkB,EAAE;UACzCC,cAAc,EAAEsB;QAClB,CAAC,CAAC;MACJ;IACF;EACF;EACA,OAAOvB,kBAAkB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module"}