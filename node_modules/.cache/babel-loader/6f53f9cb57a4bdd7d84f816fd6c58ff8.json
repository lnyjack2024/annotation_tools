{"ast":null,"code":"import Paper from 'paper';\nimport screenfull from 'screenfull';\nimport { v4 as uuid } from 'uuid';\nimport { message } from 'antd';\nimport { SHAPE_TYPE } from '../components/Canvas';\nimport { CategoryPathShape, LandmarkEditType, ReviewResult } from '../types';\nimport { isInput } from '../../../utils';\nimport formatMessage from '../locales';\nimport rootStore from '../store/RootStore';\nexport default class Tool extends Paper.Tool {\n  constructor(editor) {\n    super();\n    this.editor = void 0;\n    this.downPoint = null;\n    this.downCenter = null;\n    this.mouseDown = false;\n    this.dragging = false;\n    this.movingPaths = [];\n    this.movingShapes = [];\n    this.dragType = '';\n    this.movingSegments = [];\n    this.movingHandles = {};\n    this.affectedCategories = [];\n    this.selectPath = null;\n    this.minArea = 3;\n    this.isRightButton = event => event.event.which === 3 || event.modifiers.space;\n    this.isCtrlKey = event => event.event.ctrlKey;\n    this.onMouseDown = event => {\n      if (this.isRightButton(event)) {\n        this.downPoint = Paper.view.projectToView(event.point);\n        this.downCenter = Paper.view.center;\n        return;\n      }\n      if (this.editor) {\n        this.mouseDown = true;\n        if (this.editor.warningBtn && this.editor.warningBtn.item) {\n          const {\n            instanceId,\n            groupName,\n            shapeIds\n          } = this.editor.warningBtn.item.data;\n          if (instanceId && groupName && shapeIds !== undefined) {\n            rootStore.review.setSelectedReview({\n              frameIndex: this.editor.props.currentFrame,\n              instanceId,\n              groupName,\n              shapeIds,\n              result: ReviewResult.REJECT\n            });\n          }\n          return;\n        }\n        if (!this.isCtrlKey(event) && this.editor.hits && this.editor.hits.item.data.type !== SHAPE_TYPE.KEYPOINT_BOX) {\n          const {\n            instanceId: selectedInstanceId,\n            groupName: selectedGroupName,\n            index,\n            id\n          } = this.editor.hits.item.data;\n          // move start\n          if (this.editor.selectedPoints.length > 0 && this.editor.isShapeInSelectedShapes(selectedInstanceId, selectedGroupName, index)) {\n            // multi points\n            this.movingShapes = this.editor.selectedPoints;\n          } else if (this.editor.selectedRectangles.length > 0 && this.editor.isShapeInSelectedShapes(selectedInstanceId, selectedGroupName, id)) {\n            // multi rectangles\n            this.movingShapes = this.editor.selectedRectangles;\n          } else if (['handle-in', 'handle-out'].includes(this.editor.hits.type)) {\n            const {\n              handleIn,\n              handleOut\n            } = this.editor.hits.segment;\n            this.movingHandles.actual = this.editor.hits.type === 'handle-in' ? handleIn : handleOut;\n            this.movingHandles.opposite = this.editor.hits.type === 'handle-in' ? handleOut : handleIn;\n          } else if (this.editor.hits.item) {\n            const {\n              type: hitItemType\n            } = this.editor.hits.item.data;\n            if ((hitItemType === SHAPE_TYPE.RECTANGLE_PATH || hitItemType === SHAPE_TYPE.RECTANGLE || hitItemType === SHAPE_TYPE.RECTANGLE_POINT) && this.editor.hits.item.parent) {\n              // rectangle-control\n              this.movingShapes = [this.editor.hits.item.parent];\n              if (hitItemType === SHAPE_TYPE.RECTANGLE_PATH) {\n                switch (this.editor.hits.item.data.controlIndex) {\n                  case 0:\n                    this.dragType = 'top';\n                    break;\n                  case 1:\n                    this.dragType = 'right';\n                    break;\n                  case 2:\n                    this.dragType = 'bottom';\n                    break;\n                  case 3:\n                    this.dragType = 'left';\n                    break;\n                  default:\n                    break;\n                }\n              } else if (hitItemType === SHAPE_TYPE.RECTANGLE_POINT) {\n                switch (this.editor.hits.item.data.controlIndex) {\n                  case 0:\n                    this.dragType = 'tl';\n                    break;\n                  case 1:\n                    this.dragType = 'tr';\n                    break;\n                  case 2:\n                    this.dragType = 'br';\n                    break;\n                  case 3:\n                    this.dragType = 'bl';\n                    break;\n                  default:\n                    break;\n                }\n              } else {\n                this.dragType = 'center';\n              }\n            } else if (hitItemType === SHAPE_TYPE.KEYPOINT) {\n              // single point\n              this.movingShapes = [this.editor.hits.item];\n            }\n          }\n          this.affectedCategories = [];\n          this.movingSegments = [];\n          if (this.movingShapes.length === 1) {\n            const {\n              instanceId,\n              category,\n              groupName,\n              index: pointIndex,\n              type,\n              id: shapeId\n            } = this.movingShapes[0].data;\n            if (type === SHAPE_TYPE.KEYPOINT) {\n              var _this$editor;\n              (_this$editor = this.editor) === null || _this$editor === void 0 ? void 0 : _this$editor.props.setSelectedShape(pointIndex, {\n                instanceId,\n                category,\n                groupName,\n                shapeType: LandmarkEditType.KEYPOINT\n              });\n            } else if (type === SHAPE_TYPE.RECTANGLE_GROUP) {\n              var _this$editor2;\n              const {\n                bounds: {\n                  topLeft,\n                  topRight,\n                  bottomRight,\n                  bottomLeft\n                }\n              } = this.movingShapes[0].children[0];\n              this.selectPath = new Paper.Path();\n              this.selectPath.data.id = shapeId;\n              this.selectPath.add(topLeft);\n              this.selectPath.add(topRight);\n              this.selectPath.add(bottomRight);\n              this.selectPath.add(bottomLeft);\n              this.selectPath.closed = true;\n              (_this$editor2 = this.editor) === null || _this$editor2 === void 0 ? void 0 : _this$editor2.props.setSelectedShape(shapeId, {\n                instanceId,\n                category,\n                groupName,\n                shapeType: LandmarkEditType.RECTANGLE\n              });\n            }\n          }\n          if (!rootStore.review.drawMode) {\n            this.movingShapes = [];\n            this.selectPath = null;\n          }\n        } else {\n          // select start\n          this.editor.setMultiShapesUnselected();\n          const localPoint = this.editor.getPointInImage(Paper.view.projectToView(event.point));\n          if (this.editor.activeTool === CategoryPathShape.CIRCLE || this.editor.activeTool === CategoryPathShape.RECTANGLE && !this.editor.canAddShape()) {\n            this.selectPath = new Paper.Path({\n              segments: [localPoint],\n              strokeColor: 'red',\n              strokeWidth: 2,\n              strokeScaling: false\n            });\n          } else if (this.editor.activeTool === CategoryPathShape.RECTANGLE && this.editor.canAddShape() && this.editor.canvasContainer.current) {\n            var _this$editor3;\n            const {\n              instanceId,\n              category,\n              groupName\n            } = this.editor.props.selectedShapeInfo;\n            const id = uuid();\n            this.selectPath = new Paper.Path();\n            this.selectPath.data.id = id;\n            this.selectPath.add(localPoint);\n            this.selectPath.add(localPoint);\n            this.selectPath.add(localPoint);\n            this.selectPath.add(localPoint);\n            this.selectPath.closed = true;\n            this.editor.addRectangle(this.selectPath, (_this$editor3 = this.editor) === null || _this$editor3 === void 0 ? void 0 : _this$editor3.props.selectedShapeInfo);\n            const rectangleBox = this.editor.getShapeByKey(instanceId, groupName, id);\n            this.editor.props.setSelectedShape(id, {\n              instanceId,\n              category,\n              groupName,\n              shapeType: LandmarkEditType.RECTANGLE\n            });\n            this.movingShapes.push(rectangleBox);\n            this.dragType = 'br';\n            this.dragging = true;\n          }\n        }\n      }\n    };\n    this.onMouseDrag = event => {\n      var _this$editor4, _this$editor5, _this$editor6, _this$editor7;\n      if (this.isRightButton(event)) {\n        if (!this.downPoint || !this.downCenter) {\n          this.downPoint = Paper.view.projectToView(event.point);\n          this.downCenter = Paper.view.center;\n        }\n        const rotation = Math.round(Paper.view.rotation);\n        const targetPoint = Paper.view.projectToView(event.point).rotate(-rotation, this.downPoint);\n        const deltaPixel = targetPoint.subtract(this.downPoint);\n        const candidateCenter = this.downCenter.subtract(deltaPixel.divide(Paper.view.zoom));\n        Paper.view.center = candidateCenter;\n        return;\n      }\n      if (((_this$editor4 = this.editor) === null || _this$editor4 === void 0 ? void 0 : _this$editor4.props.isReview) || ((_this$editor5 = this.editor) === null || _this$editor5 === void 0 ? void 0 : _this$editor5.props.readonly) || ((_this$editor6 = this.editor) === null || _this$editor6 === void 0 ? void 0 : _this$editor6.warningBtn) && ((_this$editor7 = this.editor) === null || _this$editor7 === void 0 ? void 0 : _this$editor7.warningBtn.item)) return;\n      let resize = false;\n      if (this.editor) {\n        const localPoint = this.editor.getPointInImage(Paper.view.projectToView(event.point));\n        const localLastPoint = this.editor.getPointInImage(Paper.view.projectToView(event.lastPoint));\n        const offsetX = localPoint.x - localLastPoint.x;\n        const offsetY = localPoint.y - localLastPoint.y;\n        if (Math.abs(offsetX) > 0 || Math.abs(offsetY) > 0) {\n          this.dragging = true;\n        }\n        if (this.movingShapes.length > 0) {\n          // moving\n          /* eslint-disable no-param-reassign */\n          this.movingShapes.forEach(movingShape => {\n            const {\n              frameIndex,\n              instanceId,\n              category,\n              groupName,\n              pointCategory: categoryName,\n              index,\n              type,\n              displayColor\n            } = movingShape.data;\n            if (type === SHAPE_TYPE.RECTANGLE_GROUP && this.selectPath) {\n              var _this$editor8;\n              resize = true;\n              switch (this.dragType) {\n                case 'tl':\n                  this.selectPath.segments[0].point.x += offsetX;\n                  this.selectPath.segments[0].point.y += offsetY;\n                  this.selectPath.segments[1].point.y += offsetY;\n                  this.selectPath.segments[3].point.x += offsetX;\n                  break;\n                case 'tr':\n                  this.selectPath.segments[1].point.x += offsetX;\n                  this.selectPath.segments[1].point.y += offsetY;\n                  this.selectPath.segments[0].point.y += offsetY;\n                  this.selectPath.segments[2].point.x += offsetX;\n                  break;\n                case 'br':\n                  this.selectPath.segments[2].point.x += offsetX;\n                  this.selectPath.segments[2].point.y += offsetY;\n                  this.selectPath.segments[3].point.y += offsetY;\n                  this.selectPath.segments[1].point.x += offsetX;\n                  break;\n                case 'bl':\n                  this.selectPath.segments[3].point.x += offsetX;\n                  this.selectPath.segments[3].point.y += offsetY;\n                  this.selectPath.segments[2].point.y += offsetY;\n                  this.selectPath.segments[0].point.x += offsetX;\n                  break;\n                case 'top':\n                  this.selectPath.segments[0].point.y += offsetY;\n                  this.selectPath.segments[1].point.y += offsetY;\n                  break;\n                case 'right':\n                  this.selectPath.segments[1].point.x += offsetX;\n                  this.selectPath.segments[2].point.x += offsetX;\n                  break;\n                case 'bottom':\n                  this.selectPath.segments[2].point.y += offsetY;\n                  this.selectPath.segments[3].point.y += offsetY;\n                  break;\n                case 'left':\n                  this.selectPath.segments[3].point.x += offsetX;\n                  this.selectPath.segments[0].point.x += offsetX;\n                  break;\n                case 'center':\n                  this.selectPath.segments[0].point.x += offsetX;\n                  this.selectPath.segments[0].point.y += offsetY;\n                  this.selectPath.segments[1].point.x += offsetX;\n                  this.selectPath.segments[1].point.y += offsetY;\n                  this.selectPath.segments[2].point.x += offsetX;\n                  this.selectPath.segments[2].point.y += offsetY;\n                  this.selectPath.segments[3].point.x += offsetX;\n                  this.selectPath.segments[3].point.y += offsetY;\n                  break;\n                default:\n                  break;\n              }\n              const shapeInfo = {\n                instanceId,\n                category,\n                groupName,\n                shapeType: LandmarkEditType.RECTANGLE,\n                displayColor\n              };\n              (_this$editor8 = this.editor) === null || _this$editor8 === void 0 ? void 0 : _this$editor8.addRectangle(this.selectPath, shapeInfo, false);\n            } else if (type === SHAPE_TYPE.KEYPOINT) {\n              var _this$editor9, _this$editor0;\n              const categoryKey = `${frameIndex}_${instanceId}_${groupName}_${categoryName}`;\n              if (((_this$editor9 = this.editor) === null || _this$editor9 === void 0 ? void 0 : _this$editor9.props.categoryPathShapes[categoryKey]) === CategoryPathShape.CIRCLE) {\n                const path = this.editor.getPathByCategory(instanceId, groupName, categoryName);\n                if (path && path.data.isCircle) {\n                  const pointCategory = this.editor.props.categories.find(c => c.name === categoryName);\n                  if (pointCategory) {\n                    if (this.affectedCategories.findIndex(affected => affected.instanceId === instanceId && affected.groupName === groupName && affected.pointCategory === categoryName) < 0) {\n                      this.affectedCategories.push({\n                        instanceId,\n                        category,\n                        groupName,\n                        pointCategory: categoryName\n                      });\n                    }\n                    const sortedKeys = [...pointCategory.keys].sort((a, b) => a - b);\n                    const pIndex1 = sortedKeys[0];\n                    const pIndex2 = sortedKeys[Math.ceil(sortedKeys.length / 2)];\n                    if (index !== pIndex1 && index !== pIndex2) {\n                      return;\n                    }\n                  }\n                }\n              }\n              (_this$editor0 = this.editor) === null || _this$editor0 === void 0 ? void 0 : _this$editor0.updatePath(movingShape, {\n                x: movingShape.position.x + offsetX,\n                y: movingShape.position.y + offsetY\n              });\n              movingShape.position.x += offsetX;\n              movingShape.position.y += offsetY;\n            }\n          });\n          this.movingSegments.forEach(movingSegment => {\n            movingSegment.point.x += offsetX;\n            movingSegment.point.y += offsetY;\n          });\n          this.affectedCategories.forEach(({\n            instanceId,\n            category,\n            groupName,\n            pointCategory\n          }) => {\n            var _this$editor1;\n            const container = {\n              instanceId,\n              category,\n              groupName\n            };\n            (_this$editor1 = this.editor) === null || _this$editor1 === void 0 ? void 0 : _this$editor1.updateCirclePath(pointCategory, true, container);\n          });\n          /* eslint-enable no-param-reassign */\n        } else if (this.movingHandles.actual && this.movingHandles.opposite) {\n          // moving handle point\n          this.movingHandles.actual.x += offsetX;\n          this.movingHandles.actual.y += offsetY;\n          this.movingHandles.opposite.x = -this.movingHandles.actual.x;\n          this.movingHandles.opposite.y = -this.movingHandles.actual.y;\n        } else if (this.selectPath) {\n          // draw select path\n          if (this.editor.activeTool === CategoryPathShape.CIRCLE || this.editor.activeTool === CategoryPathShape.RECTANGLE && !this.editor.canAddShape()) {\n            this.selectPath.add(localPoint);\n          } else if (this.editor.activeTool === CategoryPathShape.RECTANGLE && !resize) {\n            var _this$editor10;\n            this.selectPath.segments[1].point.x += offsetX;\n            this.selectPath.segments[2].point.x += offsetX;\n            this.selectPath.segments[2].point.y += offsetY;\n            this.selectPath.segments[3].point.y += offsetY;\n            this.editor.addRectangle(this.selectPath, (_this$editor10 = this.editor) === null || _this$editor10 === void 0 ? void 0 : _this$editor10.props.selectedShapeInfo, false);\n          }\n        }\n      }\n    };\n    this.onMouseUp = event => {\n      var _this$editor12, _this$editor13, _this$editor24;\n      if (this.isRightButton(event)) {\n        var _this$editor11;\n        (_this$editor11 = this.editor) === null || _this$editor11 === void 0 ? void 0 : _this$editor11.drag(Paper.view.center);\n        this.downPoint = null;\n        this.downCenter = null;\n        return;\n      }\n      this.mouseDown = false;\n      if (((_this$editor12 = this.editor) === null || _this$editor12 === void 0 ? void 0 : _this$editor12.warningBtn) && ((_this$editor13 = this.editor) === null || _this$editor13 === void 0 ? void 0 : _this$editor13.warningBtn.item)) return;\n      if (!this.isCtrlKey(event) && this.movingShapes.length > 0) {\n        // move ends\n        if (this.dragging && this.editor) {\n          if (this.editor.activeTool === CategoryPathShape.CIRCLE) {\n            var _this$editor16;\n            const otherPoints = [];\n            this.affectedCategories.forEach(({\n              instanceId,\n              category,\n              groupName,\n              pointCategory\n            }) => {\n              var _this$editor14;\n              const container = {\n                instanceId,\n                category,\n                groupName\n              };\n              const updatedShapes = (_this$editor14 = this.editor) === null || _this$editor14 === void 0 ? void 0 : _this$editor14.updateCirclePath(pointCategory, true, container);\n              if (updatedShapes) {\n                updatedShapes.forEach(({\n                  shape,\n                  index\n                }) => {\n                  if (index !== undefined && shape) {\n                    var _this$editor15;\n                    otherPoints.push({\n                      frameIndex: ((_this$editor15 = this.editor) === null || _this$editor15 === void 0 ? void 0 : _this$editor15.props.selectedShapeStatus.frameIndex) || 0,\n                      instanceId,\n                      category,\n                      groupName,\n                      index,\n                      shapeType: LandmarkEditType.KEYPOINT,\n                      shape\n                    });\n                  }\n                });\n              }\n            });\n            (_this$editor16 = this.editor) === null || _this$editor16 === void 0 ? void 0 : _this$editor16.updatePointsPosition([...this.movingShapes.map(movingPoint => {\n              const {\n                frameIndex,\n                instanceId,\n                category,\n                groupName,\n                index\n              } = movingPoint.data;\n              return {\n                frameIndex,\n                instanceId,\n                category,\n                groupName,\n                index,\n                shapeType: LandmarkEditType.KEYPOINT,\n                shape: {\n                  position: {\n                    x: movingPoint.position.x,\n                    y: movingPoint.position.y\n                  }\n                }\n              };\n            }), ...otherPoints]);\n          } else if (this.editor.activeTool === CategoryPathShape.RECTANGLE) {\n            var _this$editor17;\n            (_this$editor17 = this.editor) === null || _this$editor17 === void 0 ? void 0 : _this$editor17.updateRectanglePosition([...this.movingShapes.filter(movingRectangle => {\n              const {\n                bounds: {\n                  width,\n                  height\n                }\n              } = movingRectangle.children[0];\n              if (width < this.minArea || height < this.minArea) {\n                var _this$editor18;\n                (_this$editor18 = this.editor) === null || _this$editor18 === void 0 ? void 0 : _this$editor18.deleteSelectedRectangle();\n                message.warning(formatMessage('MIN_SIZE_ALERT'));\n                return false;\n              }\n              return true;\n            }).map(movingRectangle => {\n              var _this$editor19, _this$editor20;\n              const {\n                instanceId,\n                category,\n                groupName,\n                id,\n                displayColor\n              } = movingRectangle.data;\n              const {\n                bounds: {\n                  x,\n                  y,\n                  width,\n                  height\n                }\n              } = movingRectangle.children[0];\n              const groupInfo = {\n                frameIndex: ((_this$editor19 = this.editor) === null || _this$editor19 === void 0 ? void 0 : _this$editor19.props.selectedShapeStatus.frameIndex) || 0,\n                instanceId,\n                category,\n                groupName\n              };\n              const rectInfo = {\n                x,\n                y,\n                width,\n                height,\n                displayColor: displayColor || '#5cdef0'\n              };\n              (_this$editor20 = this.editor) === null || _this$editor20 === void 0 ? void 0 : _this$editor20.drawRectangle(rectInfo, groupInfo, id);\n              return {\n                ...groupInfo,\n                id,\n                shapeType: LandmarkEditType.RECTANGLE,\n                shape: {\n                  ...rectInfo,\n                  id,\n                  visible: true // default is visible when point added\n                }\n              };\n            })]);\n          }\n        }\n        if (this.selectPath) {\n          this.selectPath.remove();\n          this.selectPath = null;\n        }\n        this.movingShapes = [];\n        this.movingSegments = [];\n        this.affectedCategories = [];\n      } else if (this.movingHandles.actual && this.movingHandles.opposite) {\n        // handle move ends\n        this.movingHandles = {};\n      } else if (this.dragging && this.selectPath) {\n        var _this$editor21;\n        // select ends\n        if ((_this$editor21 = this.editor) === null || _this$editor21 === void 0 ? void 0 : _this$editor21.mainLayer) {\n          var _this$editor22, _this$editor23;\n          const center = this.editor.mainLayer.localToGlobal(this.selectPath.bounds.center);\n          const hits = this.editor.mainLayer.hitTestAll(center, {\n            fill: true,\n            segments: true,\n            tolerance: this.selectPath.bounds.topLeft.getDistance(this.selectPath.bounds.bottomRight) / 2\n          });\n          const selectedPoints = new Set();\n          const selectedRectangles = new Set();\n          let selectedGroup;\n          const isOneGroup = (instanceId, groupName) => {\n            if (!selectedGroup) {\n              selectedGroup = `${instanceId}_${groupName}`;\n              return true;\n            }\n            return `${instanceId}_${groupName}` === selectedGroup;\n          };\n          hits.forEach(seg => {\n            if (this.selectPath.contains(seg.item.bounds.center)) {\n              if (seg.item.data.type === SHAPE_TYPE.KEYPOINT) {\n                if (isOneGroup(seg.item.data.instanceId, seg.item.data.groupName)) {\n                  selectedPoints.add(seg.item);\n                }\n              } else if (seg.item.data.type === SHAPE_TYPE.RECTANGLE || seg.item.data.type === SHAPE_TYPE.RECTANGLE_POINT || seg.item.data.type === SHAPE_TYPE.RECTANGLE_PATH) {\n                if (isOneGroup(seg.item.parent.data.instanceId, seg.item.parent.data.groupName)) {\n                  selectedRectangles.add(seg.item.parent);\n                }\n              }\n            }\n          });\n\n          // selected\n          if (selectedPoints.size) (_this$editor22 = this.editor) === null || _this$editor22 === void 0 ? void 0 : _this$editor22.setMultiShapesSelected(Array.from(selectedPoints), CategoryPathShape.CIRCLE);\n          if (selectedRectangles.size) (_this$editor23 = this.editor) === null || _this$editor23 === void 0 ? void 0 : _this$editor23.setMultiShapesSelected(Array.from(selectedRectangles), CategoryPathShape.RECTANGLE);\n        }\n        this.selectPath.remove();\n        this.selectPath = null;\n      } else if (((_this$editor24 = this.editor) === null || _this$editor24 === void 0 ? void 0 : _this$editor24.canAddShape()) && this.editor.activeTool === CategoryPathShape.CIRCLE) {\n        // add point\n        const point = Paper.view.projectToView(event.point);\n        // if (this.editor?.isPointInImage(point)) {\n        this.editor.addKeypoint(point);\n        // }\n      } else if (this.editor && rootStore.review.drawMode) {\n        // clear selection and move next\n        this.editor.props.setNextEmptyShape();\n      }\n      this.dragging = false;\n    };\n    this.handleQa = result => {\n      var _this$editor25;\n      if ((_this$editor25 = this.editor) === null || _this$editor25 === void 0 ? void 0 : _this$editor25.props.selectedShapeStatus) {\n        var _this$editor26, _this$editor28;\n        const {\n          instanceId,\n          groupName,\n          frameIndex,\n          id\n        } = this.editor.props.selectedShapeStatus;\n        let shapeIds = [];\n        if (id !== undefined) {\n          shapeIds = [id];\n        } else if (((_this$editor26 = this.editor) === null || _this$editor26 === void 0 ? void 0 : _this$editor26.selectedPoints.length) > 0) {\n          var _this$editor27;\n          shapeIds = (_this$editor27 = this.editor) === null || _this$editor27 === void 0 ? void 0 : _this$editor27.selectedPoints.map(point => point.data.index);\n        } else if (((_this$editor28 = this.editor) === null || _this$editor28 === void 0 ? void 0 : _this$editor28.selectedRectangles.length) > 0) {\n          var _this$editor29;\n          shapeIds = (_this$editor29 = this.editor) === null || _this$editor29 === void 0 ? void 0 : _this$editor29.selectedRectangles.map(shape => shape.data.id);\n        }\n        if (shapeIds.length) {\n          shapeIds.sort((a, b) => a - b);\n          if (result !== ReviewResult.REJECT && !rootStore.review.selectedReview) {\n            rootStore.review.setReview({\n              result\n            }, {\n              frameIndex,\n              instanceId,\n              groupName,\n              shapeIds,\n              result\n            });\n          } else {\n            rootStore.review.setSelectedReview({\n              frameIndex,\n              instanceId,\n              groupName,\n              shapeIds,\n              result\n            });\n          }\n          if ((result === ReviewResult.SUSPEND || result === ReviewResult.APPROVE) && !rootStore.review.selectedReview) {\n            message.success(formatMessage(`QC_SET_${result.toLocaleUpperCase()}`));\n          }\n        }\n      }\n    };\n    this.onKeyDown = ({\n      event\n    }) => {\n      var _this$editor30, _this$editor32, _this$editor33, _this$editor34;\n      if (isInput()) return;\n      const key = event.key.toLowerCase();\n      if (((_this$editor30 = this.editor) === null || _this$editor30 === void 0 ? void 0 : _this$editor30.props.isReview) && key !== 'v') return;\n      // Judgment modifier keyboard\n      if (event.altKey || event.shiftKey) {\n        return;\n      }\n      if (rootStore.review.drawMode) {\n        this.drawOnKeyDown(event, key);\n      } else if (rootStore.review.isEnabled) {\n        this.QaOnKeyDown(event, key);\n      }\n      switch (key) {\n        case ' ':\n          event.preventDefault();\n          if (rootStore.review.isEnabled) {\n            var _this$editor31;\n            (_this$editor31 = this.editor) === null || _this$editor31 === void 0 ? void 0 : _this$editor31.props.handleChangeDrawMode(!rootStore.review.drawMode);\n          }\n          break;\n        case 'f':\n          event.preventDefault();\n          if (screenfull.isEnabled) {\n            screenfull.toggle();\n          }\n          break;\n        case 'g':\n          event.preventDefault();\n          if (this.editor && this.editor.gridLayer) {\n            this.editor.gridLayer.visible = !rootStore.setting.isGridVisible;\n          }\n          rootStore.setting.setGridVisible(!rootStore.setting.isGridVisible);\n          break;\n        case 's':\n          event.preventDefault();\n          (_this$editor32 = this.editor) === null || _this$editor32 === void 0 ? void 0 : _this$editor32.props.onSave();\n          break;\n        case 'z':\n          event.preventDefault();\n          if (event.ctrlKey) (_this$editor33 = this.editor) === null || _this$editor33 === void 0 ? void 0 : _this$editor33.props.handleUndo();\n          break;\n        case 'y':\n          event.preventDefault();\n          if (event.ctrlKey) (_this$editor34 = this.editor) === null || _this$editor34 === void 0 ? void 0 : _this$editor34.props.handleRedo();\n          break;\n        case 'v':\n          if (!rootStore.review.selectedReview) {\n            event.preventDefault();\n            if (event.ctrlKey) {\n              var _this$editor35;\n              (_this$editor35 = this.editor) === null || _this$editor35 === void 0 ? void 0 : _this$editor35.props.setReview();\n            }\n          }\n          break;\n        default:\n      }\n    };\n    this.QaOnKeyDown = (event, key) => {\n      var _this$editor36;\n      if ((_this$editor36 = this.editor) === null || _this$editor36 === void 0 ? void 0 : _this$editor36.props.readonly) return;\n      switch (key) {\n        case '2':\n          event.preventDefault();\n          this.handleQa(ReviewResult.REJECT);\n          break;\n        case '1':\n          event.preventDefault();\n          this.handleQa(ReviewResult.APPROVE);\n          break;\n        case '3':\n          event.preventDefault();\n          this.handleQa(ReviewResult.SUSPEND);\n          break;\n        default:\n      }\n    };\n    this.drawOnKeyDown = (event, key) => {\n      var _this$editor37, _this$editor38, _this$editor39, _this$editor40, _this$editor41, _this$editor42, _this$editor43, _this$editor44, _this$editor45;\n      if ((_this$editor37 = this.editor) === null || _this$editor37 === void 0 ? void 0 : _this$editor37.props.readonly) return;\n      switch (key) {\n        case 'delete':\n        case 'backspace':\n          event.preventDefault();\n          (_this$editor38 = this.editor) === null || _this$editor38 === void 0 ? void 0 : _this$editor38.deleteSelectedPoints();\n          (_this$editor39 = this.editor) === null || _this$editor39 === void 0 ? void 0 : _this$editor39.deleteSelectedRectangle();\n          break;\n        case 'a':\n          event.preventDefault();\n          (_this$editor40 = this.editor) === null || _this$editor40 === void 0 ? void 0 : _this$editor40.autoAdjust();\n          break;\n        case 'c':\n          event.preventDefault();\n          (_this$editor41 = this.editor) === null || _this$editor41 === void 0 ? void 0 : _this$editor41.switchSmoothMode();\n          break;\n        case 'o':\n          event.preventDefault();\n          (_this$editor42 = this.editor) === null || _this$editor42 === void 0 ? void 0 : _this$editor42.props.editShapeForm();\n          break;\n        case 'p':\n          event.preventDefault();\n          (_this$editor43 = this.editor) === null || _this$editor43 === void 0 ? void 0 : _this$editor43.props.editGroupForm();\n          break;\n        case 'r':\n          event.preventDefault();\n          (_this$editor44 = this.editor) === null || _this$editor44 === void 0 ? void 0 : _this$editor44.setCategoryAsCircle();\n          break;\n        case 'v':\n          event.preventDefault();\n          (_this$editor45 = this.editor) === null || _this$editor45 === void 0 ? void 0 : _this$editor45.toggleSelectedPointVisibility();\n          break;\n        default:\n      }\n    };\n    this.editor = editor;\n  }\n}\n;","map":{"version":3,"names":["Paper","screenfull","v4","uuid","message","SHAPE_TYPE","CategoryPathShape","LandmarkEditType","ReviewResult","isInput","formatMessage","rootStore","Tool","constructor","editor","downPoint","downCenter","mouseDown","dragging","movingPaths","movingShapes","dragType","movingSegments","movingHandles","affectedCategories","selectPath","minArea","isRightButton","event","which","modifiers","space","isCtrlKey","ctrlKey","onMouseDown","view","projectToView","point","center","warningBtn","item","instanceId","groupName","shapeIds","data","undefined","review","setSelectedReview","frameIndex","props","currentFrame","result","REJECT","hits","type","KEYPOINT_BOX","selectedInstanceId","selectedGroupName","index","id","selectedPoints","length","isShapeInSelectedShapes","selectedRectangles","includes","handleIn","handleOut","segment","actual","opposite","hitItemType","RECTANGLE_PATH","RECTANGLE","RECTANGLE_POINT","parent","controlIndex","KEYPOINT","category","pointIndex","shapeId","_this$editor","setSelectedShape","shapeType","RECTANGLE_GROUP","_this$editor2","bounds","topLeft","topRight","bottomRight","bottomLeft","children","Path","add","closed","drawMode","setMultiShapesUnselected","localPoint","getPointInImage","activeTool","CIRCLE","canAddShape","segments","strokeColor","strokeWidth","strokeScaling","canvasContainer","current","_this$editor3","selectedShapeInfo","addRectangle","rectangleBox","getShapeByKey","push","onMouseDrag","_this$editor4","_this$editor5","_this$editor6","_this$editor7","rotation","Math","round","targetPoint","rotate","deltaPixel","subtract","candidateCenter","divide","zoom","isReview","readonly","resize","localLastPoint","lastPoint","offsetX","x","offsetY","y","abs","forEach","movingShape","pointCategory","categoryName","displayColor","_this$editor8","shapeInfo","_this$editor9","_this$editor0","categoryKey","categoryPathShapes","path","getPathByCategory","isCircle","categories","find","c","name","findIndex","affected","sortedKeys","keys","sort","a","b","pIndex1","pIndex2","ceil","updatePath","position","movingSegment","_this$editor1","container","updateCirclePath","_this$editor10","onMouseUp","_this$editor12","_this$editor13","_this$editor24","_this$editor11","drag","_this$editor16","otherPoints","_this$editor14","updatedShapes","shape","_this$editor15","selectedShapeStatus","updatePointsPosition","map","movingPoint","_this$editor17","updateRectanglePosition","filter","movingRectangle","width","height","_this$editor18","deleteSelectedRectangle","warning","_this$editor19","_this$editor20","groupInfo","rectInfo","drawRectangle","visible","remove","_this$editor21","mainLayer","_this$editor22","_this$editor23","localToGlobal","hitTestAll","fill","tolerance","getDistance","Set","selectedGroup","isOneGroup","seg","contains","size","setMultiShapesSelected","Array","from","addKeypoint","setNextEmptyShape","handleQa","_this$editor25","_this$editor26","_this$editor28","_this$editor27","_this$editor29","selectedReview","setReview","SUSPEND","APPROVE","success","toLocaleUpperCase","onKeyDown","_this$editor30","_this$editor32","_this$editor33","_this$editor34","key","toLowerCase","altKey","shiftKey","drawOnKeyDown","isEnabled","QaOnKeyDown","preventDefault","_this$editor31","handleChangeDrawMode","toggle","gridLayer","setting","isGridVisible","setGridVisible","onSave","handleUndo","handleRedo","_this$editor35","_this$editor36","_this$editor37","_this$editor38","_this$editor39","_this$editor40","_this$editor41","_this$editor42","_this$editor43","_this$editor44","_this$editor45","deleteSelectedPoints","autoAdjust","switchSmoothMode","editShapeForm","editGroupForm","setCategoryAsCircle","toggleSelectedPointVisibility"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/tools/Tool.ts"],"sourcesContent":["import Paper from 'paper';\nimport screenfull from 'screenfull';\nimport { v4 as uuid } from 'uuid';\nimport { message } from 'antd';\nimport Canvas, { SHAPE_TYPE } from '../components/Canvas';\nimport { CategoryPathShape, GroupInfo, LandmarkEditType, UpdatedShape, ReviewResult } from '../types';\nimport { isInput } from '../../../utils';\nimport formatMessage from '../locales';\nimport rootStore from '../store/RootStore';\n\nexport interface ToolEventExtend extends paper.ToolEvent {\n  event: MouseEvent;\n  mouseDown: boolean;\n}\n\nexport interface ToolProps extends paper.Tool {\n  mouseDown: boolean;\n}\n\nexport default class Tool extends Paper.Tool {\n  editor: Canvas | undefined;\n\n  downPoint: paper.Point | null = null;\n\n  downCenter: paper.Point | null = null;\n\n  mouseDown = false;\n\n  dragging = false;\n\n  movingPaths: paper.Path[] = [];\n\n  movingShapes: paper.Item[] = [];\n\n  dragType = '';\n\n  movingSegments: paper.Segment[] = [];\n\n  movingHandles: { actual?: paper.Point; opposite?: paper.Point } = {};\n\n  affectedCategories: { instanceId: string, category: string, groupName: string, pointCategory: string }[] = [];\n\n  selectPath: paper.Path | null = null;\n\n  minArea = 3;\n\n  constructor(editor: Canvas) {\n    super();\n    this.editor = editor;\n  }\n\n  isRightButton = (event: ToolEventExtend) => event.event.which === 3 || event.modifiers.space;\n\n  isCtrlKey = (event: ToolEventExtend) => event.event.ctrlKey;\n\n  onMouseDown = (event: ToolEventExtend) => {\n    if (this.isRightButton(event)) {\n      this.downPoint = Paper.view.projectToView(event.point);\n      this.downCenter = Paper.view.center;\n      return;\n    }\n    if (this.editor) {\n      this.mouseDown = true;\n      if (this.editor.warningBtn && this.editor.warningBtn.item) {\n        const { instanceId, groupName, shapeIds } = this.editor.warningBtn.item.data;\n        if (instanceId && groupName && shapeIds !== undefined) {\n          rootStore.review.setSelectedReview({ frameIndex: this.editor.props.currentFrame, instanceId, groupName, shapeIds, result: ReviewResult.REJECT });\n        }\n        return;\n      }\n      if (!this.isCtrlKey(event) && this.editor.hits && this.editor.hits.item.data.type !== SHAPE_TYPE.KEYPOINT_BOX) {\n        const { instanceId: selectedInstanceId, groupName: selectedGroupName, index, id } = this.editor.hits.item.data;\n        // move start\n        if (this.editor.selectedPoints.length > 0 && this.editor.isShapeInSelectedShapes(selectedInstanceId, selectedGroupName, index)) {\n          // multi points\n          this.movingShapes = this.editor.selectedPoints;\n        } else if (this.editor.selectedRectangles.length > 0 && this.editor.isShapeInSelectedShapes(selectedInstanceId, selectedGroupName, id)) {\n          // multi rectangles\n          this.movingShapes = this.editor.selectedRectangles;\n        } else if (['handle-in', 'handle-out'].includes(this.editor.hits.type)) {\n          const { handleIn, handleOut } = this.editor.hits.segment;\n          this.movingHandles.actual = this.editor.hits.type === 'handle-in' ? handleIn : handleOut;\n          this.movingHandles.opposite = this.editor.hits.type === 'handle-in' ? handleOut : handleIn;\n        } else if (this.editor.hits.item) {\n          const { type: hitItemType } = this.editor.hits.item.data;\n          if (\n            (\n              hitItemType === SHAPE_TYPE.RECTANGLE_PATH ||\n              hitItemType === SHAPE_TYPE.RECTANGLE ||\n              hitItemType === SHAPE_TYPE.RECTANGLE_POINT\n            ) &&\n            this.editor.hits.item.parent\n          ) {\n            // rectangle-control\n            this.movingShapes = [this.editor.hits.item.parent];\n            if (hitItemType === SHAPE_TYPE.RECTANGLE_PATH) {\n              switch (this.editor.hits.item.data.controlIndex) {\n                case 0:\n                  this.dragType = 'top';\n                  break;\n                case 1:\n                  this.dragType = 'right';\n                  break;\n                case 2:\n                  this.dragType = 'bottom';\n                  break;\n                case 3:\n                  this.dragType = 'left';\n                  break;\n                default:\n                  break;\n              }\n            } else if (hitItemType === SHAPE_TYPE.RECTANGLE_POINT) {\n              switch (this.editor.hits.item.data.controlIndex) {\n                case 0:\n                  this.dragType = 'tl';\n                  break;\n                case 1:\n                  this.dragType = 'tr';\n                  break;\n                case 2:\n                  this.dragType = 'br';\n                  break;\n                case 3:\n                  this.dragType = 'bl';\n                  break;\n                default:\n                  break;\n              }\n            } else {\n              this.dragType = 'center';\n            }\n          } else if (hitItemType === SHAPE_TYPE.KEYPOINT) {\n            // single point\n            this.movingShapes = [this.editor.hits.item];\n          }\n        }\n        this.affectedCategories = [];\n        this.movingSegments = [];\n        if (this.movingShapes.length === 1) {\n          const { instanceId, category, groupName, index: pointIndex, type, id: shapeId } = this.movingShapes[0].data;\n          if (type === SHAPE_TYPE.KEYPOINT) {\n            this.editor?.props.setSelectedShape(pointIndex, { instanceId, category, groupName, shapeType: LandmarkEditType.KEYPOINT });\n          } else if (type === SHAPE_TYPE.RECTANGLE_GROUP) {\n            const { bounds: { topLeft, topRight, bottomRight, bottomLeft } } = this.movingShapes[0].children[0];\n            this.selectPath = new Paper.Path();\n            this.selectPath.data.id = shapeId;\n            this.selectPath.add(topLeft);\n            this.selectPath.add(topRight);\n            this.selectPath.add(bottomRight);\n            this.selectPath.add(bottomLeft);\n            this.selectPath.closed = true;\n            this.editor?.props.setSelectedShape(shapeId, { instanceId, category, groupName, shapeType: LandmarkEditType.RECTANGLE });\n          }\n        }\n\n        if (!rootStore.review.drawMode) {\n          this.movingShapes = [];\n          this.selectPath = null;\n        }\n      } else {\n        // select start\n        this.editor.setMultiShapesUnselected();\n        const localPoint = this.editor.getPointInImage(Paper.view.projectToView(event.point));\n        if (this.editor.activeTool === CategoryPathShape.CIRCLE || (this.editor.activeTool === CategoryPathShape.RECTANGLE && !this.editor.canAddShape())) {\n          this.selectPath = new Paper.Path({\n            segments: [localPoint],\n            strokeColor: 'red',\n            strokeWidth: 2,\n            strokeScaling: false,\n          });\n        } else if (\n          this.editor.activeTool === CategoryPathShape.RECTANGLE &&\n          this.editor.canAddShape() &&\n          this.editor.canvasContainer.current\n        ) {\n          const { instanceId, category, groupName } = this.editor.props.selectedShapeInfo as GroupInfo;\n          const id = uuid();\n          this.selectPath = new Paper.Path();\n          this.selectPath.data.id = id;\n          this.selectPath.add(localPoint);\n          this.selectPath.add(localPoint);\n          this.selectPath.add(localPoint);\n          this.selectPath.add(localPoint);\n          this.selectPath.closed = true;\n          this.editor.addRectangle(this.selectPath, this.editor?.props.selectedShapeInfo as GroupInfo);\n          const rectangleBox = this.editor.getShapeByKey(instanceId, groupName, id);\n          this.editor.props.setSelectedShape(id, { instanceId, category, groupName, shapeType: LandmarkEditType.RECTANGLE });\n          this.movingShapes.push(rectangleBox);\n          this.dragType = 'br';\n          this.dragging = true;\n        }\n      }\n    }\n  };\n\n  onMouseDrag = (event: ToolEventExtend) => {\n    if (this.isRightButton(event)) {\n      if (!this.downPoint || !this.downCenter) {\n        this.downPoint = Paper.view.projectToView(event.point);\n        this.downCenter = Paper.view.center;\n      }\n\n      const rotation = Math.round(Paper.view.rotation);\n      const targetPoint = Paper.view.projectToView(event.point).rotate(-rotation, this.downPoint);\n      const deltaPixel = targetPoint.subtract(this.downPoint);\n      const candidateCenter = this.downCenter.subtract(deltaPixel.divide(Paper.view.zoom));\n      Paper.view.center = candidateCenter;\n      return;\n    }\n    if (this.editor?.props.isReview || this.editor?.props.readonly || (this.editor?.warningBtn && this.editor?.warningBtn.item)) return;\n    let resize = false;\n    if (this.editor) {\n      const localPoint = this.editor.getPointInImage(Paper.view.projectToView(event.point));\n      const localLastPoint = this.editor.getPointInImage(Paper.view.projectToView(event.lastPoint));\n      const offsetX = localPoint.x - localLastPoint.x;\n      const offsetY = localPoint.y - localLastPoint.y;\n      if (Math.abs(offsetX) > 0 || Math.abs(offsetY) > 0) {\n        this.dragging = true;\n      }\n\n      if (this.movingShapes.length > 0) {\n        // moving\n        /* eslint-disable no-param-reassign */\n        this.movingShapes.forEach((movingShape) => {\n          const { frameIndex, instanceId, category, groupName, pointCategory: categoryName, index, type, displayColor } = movingShape.data;\n          if (type === SHAPE_TYPE.RECTANGLE_GROUP && this.selectPath) {\n            resize = true;\n            switch (this.dragType) {\n              case 'tl':\n                this.selectPath.segments[0].point.x += offsetX;\n                this.selectPath.segments[0].point.y += offsetY;\n                this.selectPath.segments[1].point.y += offsetY;\n                this.selectPath.segments[3].point.x += offsetX;\n                break;\n              case 'tr':\n                this.selectPath.segments[1].point.x += offsetX;\n                this.selectPath.segments[1].point.y += offsetY;\n                this.selectPath.segments[0].point.y += offsetY;\n                this.selectPath.segments[2].point.x += offsetX;\n                break;\n              case 'br':\n                this.selectPath.segments[2].point.x += offsetX;\n                this.selectPath.segments[2].point.y += offsetY;\n                this.selectPath.segments[3].point.y += offsetY;\n                this.selectPath.segments[1].point.x += offsetX;\n                break;\n              case 'bl':\n                this.selectPath.segments[3].point.x += offsetX;\n                this.selectPath.segments[3].point.y += offsetY;\n                this.selectPath.segments[2].point.y += offsetY;\n                this.selectPath.segments[0].point.x += offsetX;\n                break;\n              case 'top':\n                this.selectPath.segments[0].point.y += offsetY;\n                this.selectPath.segments[1].point.y += offsetY;\n                break;\n              case 'right':\n                this.selectPath.segments[1].point.x += offsetX;\n                this.selectPath.segments[2].point.x += offsetX;\n                break;\n              case 'bottom':\n                this.selectPath.segments[2].point.y += offsetY;\n                this.selectPath.segments[3].point.y += offsetY;\n                break;\n              case 'left':\n                this.selectPath.segments[3].point.x += offsetX;\n                this.selectPath.segments[0].point.x += offsetX;\n                break;\n              case 'center':\n                this.selectPath.segments[0].point.x += offsetX;\n                this.selectPath.segments[0].point.y += offsetY;\n                this.selectPath.segments[1].point.x += offsetX;\n                this.selectPath.segments[1].point.y += offsetY;\n                this.selectPath.segments[2].point.x += offsetX;\n                this.selectPath.segments[2].point.y += offsetY;\n                this.selectPath.segments[3].point.x += offsetX;\n                this.selectPath.segments[3].point.y += offsetY;\n                break;\n              default:\n                break;\n            }\n            const shapeInfo: GroupInfo = {\n              instanceId,\n              category,\n              groupName,\n              shapeType: LandmarkEditType.RECTANGLE,\n              displayColor,\n            };\n            this.editor?.addRectangle(this.selectPath, shapeInfo, false);\n          } else if (type === SHAPE_TYPE.KEYPOINT) {\n            const categoryKey = `${frameIndex}_${instanceId}_${groupName}_${categoryName}`;\n            if (this.editor?.props.categoryPathShapes[categoryKey] === CategoryPathShape.CIRCLE) {\n              const path = this.editor.getPathByCategory(instanceId, groupName, categoryName);\n              if (path && path.data.isCircle) {\n                const pointCategory = this.editor.props.categories.find((c) => c.name === categoryName);\n                if (pointCategory) {\n                  if (\n                    this.affectedCategories.findIndex((affected) => affected.instanceId === instanceId && affected.groupName === groupName && affected.pointCategory === categoryName) < 0) {\n                    this.affectedCategories.push({\n                      instanceId,\n                      category,\n                      groupName,\n                      pointCategory: categoryName\n                    });\n                  }\n                  const sortedKeys = [...pointCategory.keys].sort((a, b) => a - b);\n                  const pIndex1 = sortedKeys[0];\n                  const pIndex2 = sortedKeys[Math.ceil(sortedKeys.length / 2)];\n                  if (index !== pIndex1 && index !== pIndex2) {\n                    return;\n                  }\n                }\n              }\n            }\n            this.editor?.updatePath(movingShape as paper.Shape, { x: movingShape.position.x + offsetX, y: movingShape.position.y + offsetY });\n            movingShape.position.x += offsetX;\n            movingShape.position.y += offsetY;\n          }\n        });\n        this.movingSegments.forEach((movingSegment) => {\n          movingSegment.point.x += offsetX;\n          movingSegment.point.y += offsetY;\n        });\n        this.affectedCategories.forEach(({ instanceId, category, groupName, pointCategory }) => {\n          const container = { instanceId, category, groupName };\n          this.editor?.updateCirclePath(pointCategory, true, container);\n        });\n        /* eslint-enable no-param-reassign */\n      } else if (this.movingHandles.actual && this.movingHandles.opposite) {\n        // moving handle point\n        this.movingHandles.actual.x += offsetX;\n        this.movingHandles.actual.y += offsetY;\n        this.movingHandles.opposite.x = -this.movingHandles.actual.x;\n        this.movingHandles.opposite.y = -this.movingHandles.actual.y;\n      } else if (this.selectPath) {\n        // draw select path\n        if (this.editor.activeTool === CategoryPathShape.CIRCLE || (this.editor.activeTool === CategoryPathShape.RECTANGLE && !this.editor.canAddShape())) {\n          this.selectPath.add(localPoint);\n        } else if (this.editor.activeTool === CategoryPathShape.RECTANGLE && !resize) {\n          this.selectPath.segments[1].point.x += offsetX;\n          this.selectPath.segments[2].point.x += offsetX;\n          this.selectPath.segments[2].point.y += offsetY;\n          this.selectPath.segments[3].point.y += offsetY;\n          this.editor.addRectangle(this.selectPath, this.editor?.props.selectedShapeInfo as GroupInfo, false);\n        }\n      }\n    }\n  };\n\n  onMouseUp = (event: ToolEventExtend) => {\n    if (this.isRightButton(event)) {\n      this.editor?.drag(Paper.view.center);\n      this.downPoint = null;\n      this.downCenter = null;\n      return;\n    }\n    this.mouseDown = false;\n    if (this.editor?.warningBtn && this.editor?.warningBtn.item) return;\n    if (!this.isCtrlKey(event) && this.movingShapes.length > 0) {\n      // move ends\n      if (this.dragging && this.editor) {\n        if (this.editor.activeTool === CategoryPathShape.CIRCLE) {\n          const otherPoints: UpdatedShape[] = [];\n          this.affectedCategories.forEach(({ instanceId, category, groupName, pointCategory }) => {\n            const container = { instanceId, category, groupName };\n            const updatedShapes = this.editor?.updateCirclePath(pointCategory, true, container);\n            if (updatedShapes) {\n              updatedShapes.forEach(({ shape, index }) => {\n                if (index !== undefined && shape) {\n                  otherPoints.push({\n                    frameIndex: this.editor?.props.selectedShapeStatus.frameIndex || 0,\n                    instanceId,\n                    category,\n                    groupName,\n                    index,\n                    shapeType: LandmarkEditType.KEYPOINT,\n                    shape\n                  });\n                }\n              });\n            }\n          });\n          this.editor?.updatePointsPosition([...this.movingShapes.map((movingPoint) => {\n            const { frameIndex, instanceId, category, groupName, index } = movingPoint.data;\n            return {\n              frameIndex,\n              instanceId,\n              category,\n              groupName,\n              index,\n              shapeType: LandmarkEditType.KEYPOINT,\n              shape: { position: { x: movingPoint.position.x, y: movingPoint.position.y } }\n            };\n          }), ...otherPoints]);\n        } else if (this.editor.activeTool === CategoryPathShape.RECTANGLE) {\n          this.editor?.updateRectanglePosition([...this.movingShapes.filter((movingRectangle) => {\n            const { bounds: { width, height } } = movingRectangle.children[0];\n            if (width < this.minArea || height < this.minArea) {\n              this.editor?.deleteSelectedRectangle();\n              message.warning(formatMessage('MIN_SIZE_ALERT'));\n              return false;\n            }\n            return true;\n          }).map((movingRectangle) => {\n            const { instanceId, category, groupName, id, displayColor } = movingRectangle.data;\n            const { bounds: { x, y, width, height } } = movingRectangle.children[0];\n            const groupInfo = { frameIndex: this.editor?.props.selectedShapeStatus.frameIndex || 0, instanceId, category, groupName };\n            const rectInfo = {\n              x,\n              y,\n              width,\n              height,\n              displayColor: displayColor || '#5cdef0',\n            };\n            this.editor?.drawRectangle(rectInfo, groupInfo, id);\n            return {\n              ...groupInfo,\n              id,\n              shapeType: LandmarkEditType.RECTANGLE,\n              shape: {\n                ...rectInfo,\n                id,\n                visible: true, // default is visible when point added\n              },\n            };\n          })]);\n        }\n      }\n      if (this.selectPath) {\n        this.selectPath.remove();\n        this.selectPath = null;\n      }\n      this.movingShapes = [];\n      this.movingSegments = [];\n      this.affectedCategories = [];\n    } else if (this.movingHandles.actual && this.movingHandles.opposite) {\n      // handle move ends\n      this.movingHandles = {};\n    } else if (this.dragging && this.selectPath) {\n      // select ends\n      if (this.editor?.mainLayer) {\n        const center = this.editor.mainLayer.localToGlobal(this.selectPath.bounds.center);\n        const hits = this.editor.mainLayer.hitTestAll(center, {\n          fill: true,\n          segments: true,\n          tolerance: this.selectPath.bounds.topLeft.getDistance(this.selectPath.bounds.bottomRight) / 2,\n        });\n\n        const selectedPoints: Set<paper.Shape> = new Set();\n        const selectedRectangles: Set<paper.Group> = new Set();\n        let selectedGroup: string | undefined;\n        const isOneGroup = (instanceId: string, groupName: string) => {\n          if (!selectedGroup) {\n            selectedGroup = `${instanceId}_${groupName}`;\n            return true;\n          }\n          return `${instanceId}_${groupName}` === selectedGroup;\n        };\n        hits.forEach((seg) => {\n          if (this.selectPath!.contains(seg.item.bounds.center)) {\n            if (seg.item.data.type === SHAPE_TYPE.KEYPOINT) {\n              if (isOneGroup(seg.item.data.instanceId, seg.item.data.groupName)) {\n                selectedPoints.add(seg.item as paper.Shape);\n              }\n            } else if (\n              seg.item.data.type === SHAPE_TYPE.RECTANGLE ||\n              seg.item.data.type === SHAPE_TYPE.RECTANGLE_POINT ||\n              seg.item.data.type === SHAPE_TYPE.RECTANGLE_PATH\n            ) {\n              if (isOneGroup(seg.item.parent.data.instanceId, seg.item.parent.data.groupName)) {\n                selectedRectangles.add(seg.item.parent as paper.Group);\n              }\n            }\n          }\n        });\n\n        // selected\n        if (selectedPoints.size) this.editor?.setMultiShapesSelected(Array.from(selectedPoints), CategoryPathShape.CIRCLE);\n        if (selectedRectangles.size) this.editor?.setMultiShapesSelected(Array.from(selectedRectangles), CategoryPathShape.RECTANGLE);\n      }\n      this.selectPath.remove();\n      this.selectPath = null;\n    } else if (this.editor?.canAddShape() && this.editor.activeTool === CategoryPathShape.CIRCLE) {\n      // add point\n      const point = Paper.view.projectToView(event.point);\n      // if (this.editor?.isPointInImage(point)) {\n      this.editor.addKeypoint(point);\n      // }\n    } else if (this.editor && rootStore.review.drawMode) {\n      // clear selection and move next\n      this.editor.props.setNextEmptyShape();\n    }\n    this.dragging = false;\n  };\n\n  handleQa = (result: ReviewResult) => {\n    if (this.editor?.props.selectedShapeStatus) {\n      const { instanceId, groupName, frameIndex, id } = this.editor.props.selectedShapeStatus;\n      let shapeIds = [];\n      if (id !== undefined) {\n        shapeIds = [id];\n      } else if (this.editor?.selectedPoints.length > 0) {\n        shapeIds = this.editor?.selectedPoints.map((point) => point.data.index);\n      } else if (this.editor?.selectedRectangles.length > 0) {\n        shapeIds = this.editor?.selectedRectangles.map((shape) => shape.data.id);\n      }\n      if (shapeIds.length) {\n        shapeIds.sort((a, b) => a - b);\n        if (result !== ReviewResult.REJECT && !rootStore.review.selectedReview) {\n          rootStore.review.setReview(\n            { result },\n            {\n              frameIndex,\n              instanceId,\n              groupName,\n              shapeIds,\n              result\n            }\n          );\n        } else {\n          rootStore.review.setSelectedReview({\n            frameIndex,\n            instanceId,\n            groupName,\n            shapeIds,\n            result\n          });\n        }\n        if ((result === ReviewResult.SUSPEND || result === ReviewResult.APPROVE) && !rootStore.review.selectedReview) {\n          message.success(formatMessage(`QC_SET_${result.toLocaleUpperCase()}`));\n        }\n      }\n    }\n  };\n\n  onKeyDown = ({ event }: { event: KeyboardEvent }) => {\n    if (isInput()) return;\n    const key = event.key.toLowerCase();\n    if (this.editor?.props.isReview && key !== 'v') return;\n    // Judgment modifier keyboard\n    if (event.altKey || event.shiftKey) {\n      return;\n    }\n\n    if (rootStore.review.drawMode) {\n      this.drawOnKeyDown(event, key);\n    } else if (rootStore.review.isEnabled) {\n      this.QaOnKeyDown(event, key);\n    }\n\n    switch (key) {\n      case ' ':\n        event.preventDefault();\n        if (rootStore.review.isEnabled) {\n          this.editor?.props.handleChangeDrawMode(!rootStore.review.drawMode);\n        }\n        break;\n      case 'f':\n        event.preventDefault();\n        if (screenfull.isEnabled) {\n          screenfull.toggle();\n        }\n        break;\n      case 'g':\n        event.preventDefault();\n        if (this.editor && this.editor.gridLayer) {\n          this.editor.gridLayer.visible = !rootStore.setting.isGridVisible;\n        }\n        rootStore.setting.setGridVisible(!rootStore.setting.isGridVisible);\n        break;\n      case 's':\n        event.preventDefault();\n        this.editor?.props.onSave();\n        break;\n      case 'z':\n        event.preventDefault();\n        if (event.ctrlKey) this.editor?.props.handleUndo();\n        break;\n      case 'y':\n        event.preventDefault();\n        if (event.ctrlKey) this.editor?.props.handleRedo();\n        break;\n      case 'v':\n        if (!rootStore.review.selectedReview) {\n          event.preventDefault();\n          if (event.ctrlKey) {\n            this.editor?.props.setReview();\n          }\n        }\n        break;\n      default:\n    }\n  };\n\n  QaOnKeyDown = (event: KeyboardEvent, key: string) => {\n    if (this.editor?.props.readonly) return;\n    switch (key) {\n      case '2':\n        event.preventDefault();\n        this.handleQa(ReviewResult.REJECT);\n        break;\n      case '1':\n        event.preventDefault();\n        this.handleQa(ReviewResult.APPROVE);\n        break;\n      case '3':\n        event.preventDefault();\n        this.handleQa(ReviewResult.SUSPEND);\n        break;\n      default:\n    }\n  };\n\n  drawOnKeyDown = (event: KeyboardEvent, key: string) => {\n    if (this.editor?.props.readonly) return;\n    switch (key) {\n      case 'delete':\n      case 'backspace':\n        event.preventDefault();\n        this.editor?.deleteSelectedPoints();\n        this.editor?.deleteSelectedRectangle();\n        break;\n      case 'a':\n        event.preventDefault();\n        this.editor?.autoAdjust();\n        break;\n      case 'c':\n        event.preventDefault();\n        this.editor?.switchSmoothMode();\n        break;\n      case 'o':\n        event.preventDefault();\n        this.editor?.props.editShapeForm();\n        break;\n      case 'p':\n        event.preventDefault();\n        this.editor?.props.editGroupForm();\n        break;\n      case 'r':\n        event.preventDefault();\n        this.editor?.setCategoryAsCircle();\n        break;\n      case 'v':\n        event.preventDefault();\n        this.editor?.toggleSelectedPointVisibility();\n        break;\n      default:\n    }\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}