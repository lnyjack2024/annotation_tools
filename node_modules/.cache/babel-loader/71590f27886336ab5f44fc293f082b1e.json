{"ast":null,"code":"export var FieldControlType;\n(function (FieldControlType) {\n  FieldControlType[\"TEXT\"] = \"TEXT\";\n  FieldControlType[\"TEXTAREA\"] = \"TEXTAREA\";\n  FieldControlType[\"IMAGETEXT\"] = \"IMAGETEXT\";\n  FieldControlType[\"SWITCH\"] = \"SWITCH\";\n  FieldControlType[\"CHECKBOX\"] = \"CHECKBOX\";\n  FieldControlType[\"RADIO\"] = \"RADIO\";\n  FieldControlType[\"SELECT\"] = \"SELECT\";\n  FieldControlType[\"CASCADER\"] = \"CASCADER\";\n})(FieldControlType || (FieldControlType = {}));\nexport var FieldValueType;\n(function (FieldValueType) {\n  FieldValueType[\"STRING\"] = \"string\";\n  FieldValueType[\"NUMBER\"] = \"number\";\n  FieldValueType[\"BOOLEAN\"] = \"boolean\";\n})(FieldValueType || (FieldValueType = {}));\nexport var ConditionType;\n(function (ConditionType) {\n  ConditionType[\"FIELD\"] = \"FIELD\";\n  ConditionType[\"AGGREGATION\"] = \"AGGREGATION\";\n})(ConditionType || (ConditionType = {}));\nexport var FieldOperatorType;\n(function (FieldOperatorType) {\n  FieldOperatorType[\"EQUAL\"] = \"equal_to\";\n  FieldOperatorType[\"NOT_EQUAL\"] = \"not_equal_to\";\n  FieldOperatorType[\"GREATER\"] = \"greater_than\";\n  FieldOperatorType[\"GREATER_EQUAL\"] = \"greater_than_or_equal_to\";\n  FieldOperatorType[\"LESS\"] = \"less_than\";\n  FieldOperatorType[\"LESS_EQUAL\"] = \"less_than_or_equal_to\";\n  FieldOperatorType[\"CONTAINS\"] = \"contains\";\n  FieldOperatorType[\"START\"] = \"start_with\";\n  FieldOperatorType[\"END\"] = \"end_with\";\n})(FieldOperatorType || (FieldOperatorType = {}));\nexport var AggregationOperatorType;\n(function (AggregationOperatorType) {\n  AggregationOperatorType[\"AND\"] = \"and\";\n  AggregationOperatorType[\"OR\"] = \"or\";\n})(AggregationOperatorType || (AggregationOperatorType = {}));\nexport var OptionType;\n(function (OptionType) {\n  OptionType[\"BUTTON\"] = \"button\";\n  OptionType[\"DEFAULT\"] = \"default\";\n})(OptionType || (OptionType = {}));\nexport var Mode;\n(function (Mode) {\n  Mode[\"MULTIPLE\"] = \"multiple\";\n})(Mode || (Mode = {}));\nexport var LayoutMode;\n(function (LayoutMode) {\n  LayoutMode[\"COMPACT\"] = \"compact\";\n})(LayoutMode || (LayoutMode = {}));","map":{"version":3,"sources":["../../src/types/index.ts"],"names":["FieldControlType","FieldValueType","ConditionType","FieldOperatorType","AggregationOperatorType","OptionType","Mode","LayoutMode"],"mappings":"AAAA,OAAA,IAAYA,gBAAZ;WAAYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,KAAAA,gB;AAWZ,OAAA,IAAYC,cAAZ;WAAYA,c;EAAAA,c;EAAAA,c;EAAAA,c;GAAAA,c,KAAAA,c;AA4CZ,OAAA,IAAYC,aAAZ;WAAYA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a;AAKZ,OAAA,IAAYC,iBAAZ;WAAYA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;AAYZ,OAAA,IAAYC,uBAAZ;WAAYA,uB;EAAAA,uB;EAAAA,uB;GAAAA,uB,KAAAA,uB;AA6BZ,OAAA,IAAYC,UAAZ;WAAYA,U;EAAAA,U;EAAAA,U;GAAAA,U,KAAAA,U;AAKZ,OAAA,IAAYC,IAAZ;WAAYA,I;EAAAA,I;GAAAA,I,KAAAA,I;AAIZ,OAAA,IAAYC,UAAZ;WAAYA,U;EAAAA,U;GAAAA,U,KAAAA,U","sourcesContent":["export enum FieldControlType {\n  TEXT = 'TEXT',\n  TEXTAREA = 'TEXTAREA',\n  IMAGETEXT = 'IMAGETEXT',\n  SWITCH = 'SWITCH',\n  CHECKBOX = 'CHECKBOX',\n  RADIO = 'RADIO',\n  SELECT = 'SELECT',\n  CASCADER = 'CASCADER',\n}\n\nexport enum FieldValueType {\n  STRING = 'string',\n  NUMBER = 'number',\n  BOOLEAN = 'boolean',\n}\n\nexport type FieldValue = string | number | boolean;\n\nexport interface BasicFieldOption {\n  value: FieldValue;\n  label?: string;\n  group?: string;\n  desc?: string;\n  referenceUrl?: string;\n  children?: BasicFieldOption[];\n}\n\nexport interface FieldOption extends BasicFieldOption {\n  disabled?: boolean;\n}\n\nexport interface InFieldOption extends BasicFieldOption {\n  disabled?: boolean | string;\n}\n\nexport interface Field {\n  name: string;\n  label?: string;\n  type: FieldControlType;\n  valueType: FieldValueType;\n  visible: boolean;\n  required: boolean;\n  readonly: boolean;\n  isRTL?: boolean;\n  defaultValue?: FieldValue | FieldValue[];\n  options?: FieldOption[];\n  optionSearchable?: boolean;\n  clickStopPropagation?: boolean;\n  mode?: Mode;\n  optionFoldable?: boolean;\n  optionType?: OptionType;\n  validator?: (value: FieldValue) => boolean | { pass: boolean; message?: string };\n}\n\nexport enum ConditionType {\n  FIELD = 'FIELD',\n  AGGREGATION = 'AGGREGATION',\n}\n\nexport enum FieldOperatorType {\n  EQUAL = 'equal_to',\n  NOT_EQUAL = 'not_equal_to',\n  GREATER = 'greater_than',\n  GREATER_EQUAL = 'greater_than_or_equal_to',\n  LESS = 'less_than',\n  LESS_EQUAL = 'less_than_or_equal_to',\n  CONTAINS = 'contains',\n  START = 'start_with',\n  END = 'end_with',\n}\n\nexport enum AggregationOperatorType {\n  AND = 'and',\n  OR = 'or',\n}\n\nexport type Operator = FieldOperatorType | AggregationOperatorType;\n\nexport interface Condition {\n  id: string;\n  type: ConditionType;\n  operator: Operator;\n  field?: string;\n  value?: string;\n  conditions?: string[];\n}\n\nexport interface Effect {\n  id: string;\n  field: string;\n  attribute: 'value' | 'visible' | 'required' | 'readonly';\n  value: string;\n}\n\nexport interface Rule {\n  id: string;\n  condition: string;\n  effects: string[];\n}\n\nexport enum OptionType {\n  BUTTON = 'button',\n  DEFAULT = 'default'\n}\n\nexport enum Mode {\n  MULTIPLE = 'multiple',\n}\n\nexport enum LayoutMode {\n  COMPACT= 'compact'\n}\n\nexport interface FormConfig {\n  fields: Field[];\n  conditions?: Condition[];\n  effects?: Effect[];\n  rules?: Rule[];\n}\n"]},"metadata":{},"sourceType":"module"}