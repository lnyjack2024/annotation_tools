{"ast":null,"code":"import { Container, Sprite, Texture, Graphics, Rectangle } from 'pixi.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport ShapeGraphics from '../../common/shapes/ShapeGraphics';\nimport Layer from '../../common/shapes/Layer';\nimport { hitTesting } from '../../common/shapes/utils';\nconst ZOOM_MIN = 0.25;\nconst ZOOM_MAX = 100;\nexport let EventAction = /*#__PURE__*/function (EventAction) {\n  EventAction[\"SELECTED\"] = \"selected\";\n  EventAction[\"POINTERDOWN\"] = \"pointer-down\";\n  EventAction[\"SCALE_CHANGED\"] = \"scale-changed\";\n  EventAction[\"POSITION_CHANGED\"] = \"position-changed\";\n  return EventAction;\n}({});\nclass View extends Container {\n  /**\n   * get scale of view\n   * @getter\n   */\n  get viewScale() {\n    return this.stage.scale.x;\n  }\n\n  /**\n   * set scale of view\n   * @setter\n   */\n  set viewScale(scale) {\n    this.stage.scale.set(scale);\n    // update shapes scale\n    const setChildrenScale = children => {\n      children.forEach(child => {\n        if (child instanceof ShapeGraphics) {\n          // eslint-disable-next-line no-param-reassign\n          child.shape.scale = scale;\n        } else if (child instanceof Container) {\n          setChildrenScale(child.children);\n        }\n      });\n    };\n    setChildrenScale(this.shapesLayer.children);\n    this.emit(EventAction.SCALE_CHANGED, scale, this);\n  }\n\n  /**\n   * is right button clicked\n   * @private\n   */\n\n  constructor({\n    id,\n    enableReview,\n    enableSnap = true\n  }) {\n    super();\n    /**\n     * view id\n     */\n    this.id = void 0;\n    /**\n     * view stage (similar with PIXI stage)\n     */\n    this.stage = new Container();\n    /**\n     * shapes layer\n     */\n    this.shapesLayer = new Layer();\n    /**\n     * review layer (for review anchors)\n     */\n    this.reviewLayer = void 0;\n    /**\n     * image sprite instance\n     */\n    this.image = new Sprite(Texture.EMPTY);\n    /**\n     * image load error\n     */\n    this.imageLoadError = false;\n    /**\n     * first imge loaded\n     */\n    this.firstLoaded = false;\n    /**\n     * view width (default 400)\n     */\n    this.viewWidth = 400;\n    /**\n     * view height (default 300)\n     */\n    this.viewHeight = 300;\n    /**\n     * zoom level, default is 1 when image fits the view\n     */\n    this.viewZoom = 1;\n    this._rightClicked = false;\n    /**\n     * click position when right button clicked\n     * @private\n     */\n    this._rightClickPoint = null;\n    /**\n     * stage position when right button clicked\n     * @private\n     */\n    this._rightClickPosition = null;\n    /**\n     * is view selected\n     */\n    this.selected = false;\n    /**\n     * view selected changed\n     */\n    this._selectedChanged = false;\n    /**\n     * is view hovered\n     */\n    this.hovered = false;\n    /**\n     * hovered shape\n     */\n    this.hoveredShape = void 0;\n    /**\n     * auto snape enabled\n     * @private\n     */\n    this._autoSnapEnabled = true;\n    /**\n     * process pointer down\n     * @param e\n     */\n    this.processPointerDown = e => {\n      const selected = this.selected;\n      this.emit(EventAction.SELECTED, e.data.originalEvent, this);\n      this._selectedChanged = this.selected !== selected;\n      if (this.imageLoadError) {\n        return;\n      }\n      if (e.data.button === 2) {\n        const point = e.data.getLocalPosition(this);\n        this._rightClicked = true;\n        this._rightClickPoint = point;\n        this._rightClickPosition = this.stage.position.clone();\n        return;\n      }\n      const localPoint = e.data.getLocalPosition(this.stage);\n      if (this._selectedChanged && this.hovered) {\n        // if selected changed, should get cursor hovered shape\n        this.hitTest(e.data.global, localPoint, e.data.originalEvent.ctrlKey);\n        if (this.hoveredShape) {\n          // if hovered, mock pointer down event for the shape\n          this.hoveredShape.processPointerDown(e);\n        }\n      }\n      this.emit(EventAction.POINTERDOWN, localPoint, e.data.originalEvent, this);\n    };\n    /**\n     * process pointer move\n     * @param e\n     */\n    this.processPointerMove = e => {\n      if (this.imageLoadError || !this.selected) {\n        return;\n      }\n      if (this._rightClicked && this._rightClickPoint && this._rightClickPosition) {\n        const point = e.data.getLocalPosition(this);\n        const offsetX = point.x - this._rightClickPoint.x;\n        const offsetY = point.y - this._rightClickPoint.y;\n        const x = this._rightClickPosition.x + offsetX;\n        const y = this._rightClickPosition.y + offsetY;\n        this.setStagePosition(x, y);\n        return;\n      }\n      if (this._selectedChanged && this.hoveredShape) {\n        // not continue, current is moving shape\n        return;\n      }\n      const localPoint = e.data.getLocalPosition(this.stage);\n      if (this.hovered) {\n        this.hitTest(e.data.global, localPoint, e.data.originalEvent.ctrlKey);\n      }\n    };\n    /**\n     * process pointer up\n     */\n    this.processPointerUp = () => {\n      this._rightClicked = false;\n      this._rightClickPoint = null;\n      this._rightClickPosition = null;\n      this._selectedChanged = false;\n    };\n    /**\n     * process pointer out\n     */\n    this.processPointerOut = () => {\n      this.processPointerUp();\n      this.setHoveredShape();\n    };\n    /**\n     * rotate\n     */\n    this.rotate = () => {\n      if (this.image && !this.imageLoadError) {\n        // set pivot\n        const {\n          width,\n          height\n        } = this.image;\n        this.image.pivot.set(width / 2, height / 2);\n\n        // set position\n        const px = width / 2;\n        const py = height / 2;\n        const {\n          x: ox,\n          y: oy\n        } = this.image.position;\n        this.image.position.set(px, py);\n        const offsetX = px - ox;\n        const offsetY = py - oy;\n\n        // update stage position\n        const {\n          x,\n          y\n        } = this.getStagePosition();\n        this.setStagePosition(x - offsetX * this.viewScale, y - offsetY * this.viewScale);\n      }\n    };\n    /**\n     * zoom\n     * @param event\n     * @param zoomPoint\n     */\n    this.zoom = (event, zoomPoint, step = 0.1) => {\n      if (this.imageLoadError || !this.selected || !this.hovered) {\n        return false;\n      }\n      event.stopPropagation();\n      const zoomPointX = zoomPoint.x - this.position.x;\n      const zoomPointY = zoomPoint.y - this.position.y;\n      let newZoom = event.deltaY > 0 ? this.viewZoom / (1 + step) : this.viewZoom * (1 + step);\n      newZoom = Math.max(Math.min(newZoom, ZOOM_MAX), ZOOM_MIN);\n      const zoomScale = newZoom / this.viewZoom;\n      const {\n        x,\n        y\n      } = this.getStagePosition();\n      this.setStagePosition(zoomPointX - (zoomPointX - x) * zoomScale, zoomPointY - (zoomPointY - y) * zoomScale);\n      this.viewZoom = newZoom;\n      this.viewScale *= zoomScale;\n      return true;\n    };\n    /**\n     * zoom to provided scale\n     * @param scale\n     */\n    this.zoomTo = scale => {\n      if (this.imageLoadError) {\n        return;\n      }\n      const centerX = this.viewWidth / 2;\n      const centerY = this.viewHeight / 2;\n      let newZoom = this.viewZoom * (scale / this.viewScale);\n      newZoom = Math.max(Math.min(newZoom, ZOOM_MAX), ZOOM_MIN);\n      const zoomScale = newZoom / this.viewZoom;\n      const {\n        x,\n        y\n      } = this.getStagePosition();\n      this.setStagePosition(centerX - (centerX - x) * zoomScale, centerY - (centerY - y) * zoomScale);\n      this.viewZoom = newZoom;\n      this.viewScale *= zoomScale;\n    };\n    /**\n     * fit image to canvas\n     */\n    this.fitImageToView = () => {\n      if (this.imageLoadError) {\n        return;\n      }\n      const {\n        width,\n        height\n      } = this.image;\n      const imageWidth = width;\n      const imageHeight = height;\n      const viewRatio = this.viewWidth / this.viewHeight;\n      const imgRatio = imageWidth / imageHeight;\n      const scale = (viewRatio < imgRatio ? this.viewWidth / imageWidth : this.viewHeight / imageHeight) * 0.98;\n      this.setStagePosition((this.viewWidth - scale * imageWidth) / 2, (this.viewHeight - scale * imageHeight) / 2);\n      this.viewScale = scale;\n      this.viewZoom = 1;\n    };\n    /**\n     * fit shape to canvas\n     * @param bbox\n     * @param percentage\n     */\n    this.fitShapeToView = (bbox, percentage = 0.98) => {\n      if (this.imageLoadError) {\n        return;\n      }\n      const {\n        left,\n        top,\n        right,\n        bottom\n      } = bbox;\n      const width = right - left;\n      const height = bottom - top;\n      if (width !== 0 && height !== 0) {\n        const oldViewScale = this.viewScale;\n        const viewRatio = this.viewWidth / this.viewHeight;\n        const ratio = width / height;\n        let scale = (viewRatio < ratio ? this.viewWidth / width : this.viewHeight / height) * percentage;\n        let zoomScale = scale / oldViewScale;\n        let zoomLevel = Math.max(Math.min(this.viewZoom * zoomScale, ZOOM_MAX), ZOOM_MIN);\n        if (zoomLevel < 1) {\n          zoomLevel = 1;\n          zoomScale = zoomLevel / this.viewZoom;\n          scale = zoomScale * oldViewScale;\n        }\n        this.setStagePosition(this.viewWidth / 2 - scale * (left + width / 2), this.viewHeight / 2 - scale * (top + height / 2));\n        this.viewScale = scale;\n        this.viewZoom *= zoomScale;\n      }\n    };\n    this.id = id || uuidv4();\n    this.interactive = true;\n    this.on('pointerover', () => {\n      this.hovered = true;\n    });\n    this.on('pointerout', () => {\n      this.hovered = false;\n    });\n    this.on('pointerdown', this.processPointerDown);\n    this.on('pointermove', this.processPointerMove);\n    this.on('pointerup', this.processPointerUp);\n    this.on('pointerupoutside', this.processPointerUp);\n    this.on('pointerout', this.processPointerOut);\n    this.shapesLayer.sortableChildren = true;\n    this.stage.addChild(this.shapesLayer);\n    if (enableReview) {\n      this.reviewLayer = new Container();\n      this.stage.addChild(this.reviewLayer);\n    }\n    this.stage.addChildAt(this.image, 0);\n    this.addChild(this.stage);\n    this._autoSnapEnabled = enableSnap;\n  }\n  /**\n   * update position and size\n   * @param x\n   * @param y\n   * @param width\n   * @param height\n   */\n  updatePositionAndSize(x, y, width, height) {\n    const positionUpdated = this.x !== x || this.y !== y;\n    const sizeUpdated = this.viewWidth !== width || this.viewHeight !== height;\n    this.x = x;\n    this.y = y;\n    this.viewWidth = width;\n    this.viewHeight = height;\n    this.hitArea = new Rectangle(0, 0, width, height);\n    if (positionUpdated || sizeUpdated) {\n      this.mask = new Graphics().beginFill(0x000000).drawRect(x, y, width, height).endFill();\n    }\n  }\n\n  /**\n   * get stage position\n   */\n  getStagePosition() {\n    return {\n      x: this.stage.x,\n      y: this.stage.y\n    };\n  }\n\n  /**\n   * set stage posistion\n   * @param x\n   * @param y\n   */\n  setStagePosition(x, y) {\n    this.stage.x = x;\n    this.stage.y = y;\n    this.emit(EventAction.POSITION_CHANGED, {\n      x,\n      y\n    }, this);\n  }\n\n  /**\n   * set image\n   * @param texture\n   */\n  setImage(texture) {\n    // this.image.cacheAsBitmap = false;\n    if (this.image.texture) {\n      this.image.texture.destroy(true);\n    }\n    this.image.texture = texture;\n    // this.image.cacheAsBitmap = true;\n    this.rotate();\n    if (!this.firstLoaded) {\n      this.firstLoaded = true;\n      this.fitImageToView();\n    }\n  }\n\n  /**\n   * set hovered shape\n   * @param shape\n   */\n  setHoveredShape(shape) {\n    if (shape === this.hoveredShape) {\n      return;\n    }\n    if (this.hoveredShape && !this.hoveredShape.destroyed) {\n      this.hoveredShape.hovered = false;\n    }\n    this.hoveredShape = shape;\n    if (this.hoveredShape) {\n      this.hoveredShape.hovered = true;\n    }\n  }\n\n  /**\n   * hit test\n   * @param point\n   * @param localPoint\n   * @param ctrlKey\n   */\n  hitTest(point, localPoint, ctrlKey = false) {\n    if (ctrlKey) {\n      this.setHoveredShape();\n      this.shapesLayer.setSnappingPoint(null);\n      return;\n    }\n    const {\n      intersection,\n      snappingPoint\n    } = hitTesting(point, localPoint, this.shapesLayer.children);\n    this.setHoveredShape(intersection);\n    this.shapesLayer.setSnappingPoint(this._autoSnapEnabled ? snappingPoint : null);\n  }\n}\nexport default View;","map":{"version":3,"names":["Container","Sprite","Texture","Graphics","Rectangle","v4","uuidv4","ShapeGraphics","Layer","hitTesting","ZOOM_MIN","ZOOM_MAX","EventAction","View","viewScale","stage","scale","x","set","setChildrenScale","children","forEach","child","shape","shapesLayer","emit","SCALE_CHANGED","constructor","id","enableReview","enableSnap","reviewLayer","image","EMPTY","imageLoadError","firstLoaded","viewWidth","viewHeight","viewZoom","_rightClicked","_rightClickPoint","_rightClickPosition","selected","_selectedChanged","hovered","hoveredShape","_autoSnapEnabled","processPointerDown","e","SELECTED","data","originalEvent","button","point","getLocalPosition","position","clone","localPoint","hitTest","global","ctrlKey","POINTERDOWN","processPointerMove","offsetX","offsetY","y","setStagePosition","processPointerUp","processPointerOut","setHoveredShape","rotate","width","height","pivot","px","py","ox","oy","getStagePosition","zoom","event","zoomPoint","step","stopPropagation","zoomPointX","zoomPointY","newZoom","deltaY","Math","max","min","zoomScale","zoomTo","centerX","centerY","fitImageToView","imageWidth","imageHeight","viewRatio","imgRatio","fitShapeToView","bbox","percentage","left","top","right","bottom","oldViewScale","ratio","zoomLevel","interactive","on","sortableChildren","addChild","addChildAt","updatePositionAndSize","positionUpdated","sizeUpdated","hitArea","mask","beginFill","drawRect","endFill","POSITION_CHANGED","setImage","texture","destroy","destroyed","setSnappingPoint","intersection","snappingPoint"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/shapes/View.ts"],"sourcesContent":["import { Container, Sprite, Texture, Graphics, Point, Rectangle, DisplayObject, InteractionEvent } from 'pixi.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport ShapeGraphics from '../../common/shapes/ShapeGraphics';\nimport Shape from '../../common/shapes/Shape';\nimport Layer from '../../common/shapes/Layer';\nimport { hitTesting } from '../../common/shapes/utils';\n\nconst ZOOM_MIN = 0.25;\nconst ZOOM_MAX = 100;\n\nexport enum EventAction {\n  SELECTED = 'selected',\n  POINTERDOWN = 'pointer-down',\n  SCALE_CHANGED = 'scale-changed',\n  POSITION_CHANGED = 'position-changed',\n}\n\ninterface ViewOptions {\n  id?: string;\n  enableReview?: boolean;\n  enableSnap?: boolean;\n}\n\nclass View extends Container {\n  /**\n   * view id\n   */\n  id: string;\n\n  /**\n   * view stage (similar with PIXI stage)\n   */\n  stage = new Container();\n\n  /**\n   * shapes layer\n   */\n  shapesLayer = new Layer();\n\n  /**\n   * review layer (for review anchors)\n   */\n  reviewLayer?: Container;\n\n  /**\n   * image sprite instance\n   */\n  image = new Sprite(Texture.EMPTY);\n\n  /**\n   * image load error\n   */\n  imageLoadError = false;\n\n  /**\n   * first imge loaded\n   */\n  firstLoaded = false;\n\n  /**\n   * view width (default 400)\n   */\n  viewWidth = 400;\n\n  /**\n   * view height (default 300)\n   */\n  viewHeight = 300;\n\n  /**\n   * zoom level, default is 1 when image fits the view\n   */\n  viewZoom = 1;\n\n  /**\n   * get scale of view\n   * @getter\n   */\n  get viewScale() {\n    return this.stage.scale.x;\n  }\n\n  /**\n   * set scale of view\n   * @setter\n   */\n  set viewScale(scale: number) {\n    this.stage.scale.set(scale);\n    // update shapes scale\n    const setChildrenScale = (children: DisplayObject[]) => {\n      children.forEach((child) => {\n        if (child instanceof ShapeGraphics) {\n          // eslint-disable-next-line no-param-reassign\n          child.shape.scale = scale;\n        } else if (child instanceof Container) {\n          setChildrenScale(child.children);\n        }\n      });\n    };\n    setChildrenScale(this.shapesLayer.children);\n\n    this.emit(EventAction.SCALE_CHANGED, scale, this);\n  }\n\n  /**\n   * is right button clicked\n   * @private\n   */\n  private _rightClicked = false;\n\n  /**\n   * click position when right button clicked\n   * @private\n   */\n  private _rightClickPoint: Point | null = null;\n\n  /**\n   * stage position when right button clicked\n   * @private\n   */\n  private _rightClickPosition: Point | null = null;\n\n  /**\n   * is view selected\n   */\n  selected = false;\n\n  /**\n   * view selected changed\n   */\n  private _selectedChanged = false;\n\n  /**\n   * is view hovered\n   */\n  hovered = false;\n\n  /**\n   * hovered shape\n   */\n  hoveredShape?: Shape<unknown>;\n\n  /**\n   * auto snape enabled\n   * @private\n   */\n  private _autoSnapEnabled = true;\n\n  constructor({ id, enableReview, enableSnap = true }: ViewOptions) {\n    super();\n    this.id = id || uuidv4();\n\n    this.interactive = true;\n    this.on('pointerover', () => {\n      this.hovered = true;\n    });\n    this.on('pointerout', () => {\n      this.hovered = false;\n    });\n    this.on('pointerdown', this.processPointerDown);\n    this.on('pointermove', this.processPointerMove);\n    this.on('pointerup', this.processPointerUp);\n    this.on('pointerupoutside', this.processPointerUp);\n    this.on('pointerout', this.processPointerOut);\n\n    this.shapesLayer.sortableChildren = true;\n    this.stage.addChild(this.shapesLayer);\n    if (enableReview) {\n      this.reviewLayer = new Container();\n      this.stage.addChild(this.reviewLayer);\n    }\n\n    this.stage.addChildAt(this.image, 0);\n    this.addChild(this.stage);\n\n    this._autoSnapEnabled = enableSnap;\n  }\n\n  /**\n   * process pointer down\n   * @param e\n   */\n  processPointerDown = (e: InteractionEvent) => {\n    const selected = this.selected;\n    this.emit(EventAction.SELECTED, e.data.originalEvent, this);\n    this._selectedChanged = this.selected !== selected;\n\n    if (this.imageLoadError) {\n      return;\n    }\n\n    if (e.data.button === 2) {\n      const point = e.data.getLocalPosition(this);\n      this._rightClicked = true;\n      this._rightClickPoint = point;\n      this._rightClickPosition = this.stage.position.clone();\n      return;\n    }\n\n    const localPoint = e.data.getLocalPosition(this.stage);\n    if (this._selectedChanged && this.hovered) {\n      // if selected changed, should get cursor hovered shape\n      this.hitTest(e.data.global, localPoint, e.data.originalEvent.ctrlKey);\n      if (this.hoveredShape) {\n        // if hovered, mock pointer down event for the shape\n        this.hoveredShape.processPointerDown(e);\n      }\n    }\n    this.emit(EventAction.POINTERDOWN, localPoint, e.data.originalEvent, this);\n  };\n\n  /**\n   * process pointer move\n   * @param e\n   */\n  processPointerMove = (e: InteractionEvent) => {\n    if (this.imageLoadError || !this.selected) {\n      return;\n    }\n\n    if (this._rightClicked && this._rightClickPoint && this._rightClickPosition) {\n      const point = e.data.getLocalPosition(this);\n      const offsetX = point.x - this._rightClickPoint.x;\n      const offsetY = point.y - this._rightClickPoint.y;\n      const x = this._rightClickPosition.x + offsetX;\n      const y = this._rightClickPosition.y + offsetY;\n      this.setStagePosition(x, y);\n      return;\n    }\n\n    if (this._selectedChanged && this.hoveredShape) {\n      // not continue, current is moving shape\n      return;\n    }\n\n    const localPoint = e.data.getLocalPosition(this.stage);\n\n    if (this.hovered) {\n      this.hitTest(e.data.global, localPoint, e.data.originalEvent.ctrlKey);\n    }\n  };\n\n  /**\n   * process pointer up\n   */\n  processPointerUp = () => {\n    this._rightClicked = false;\n    this._rightClickPoint = null;\n    this._rightClickPosition = null;\n    this._selectedChanged = false;\n  };\n\n  /**\n   * process pointer out\n   */\n  processPointerOut = () => {\n    this.processPointerUp();\n    this.setHoveredShape();\n  };\n\n  /**\n   * update position and size\n   * @param x\n   * @param y\n   * @param width\n   * @param height\n   */\n  updatePositionAndSize(x: number, y: number, width: number, height: number) {\n    const positionUpdated = this.x !== x || this.y !== y;\n    const sizeUpdated = this.viewWidth !== width || this.viewHeight !== height;\n    this.x = x;\n    this.y = y;\n    this.viewWidth = width;\n    this.viewHeight = height;\n    this.hitArea = new Rectangle(0, 0, width, height);\n    if (positionUpdated || sizeUpdated) {\n      this.mask = new Graphics()\n        .beginFill(0x000000)\n        .drawRect(x, y, width, height)\n        .endFill();\n    }\n  }\n\n  /**\n   * get stage position\n   */\n  getStagePosition() {\n    return {\n      x: this.stage.x,\n      y: this.stage.y,\n    };\n  }\n\n  /**\n   * set stage posistion\n   * @param x\n   * @param y\n   */\n  setStagePosition(x: number, y: number) {\n    this.stage.x = x;\n    this.stage.y = y;\n    this.emit(EventAction.POSITION_CHANGED, { x, y }, this);\n  }\n\n  /**\n   * set image\n   * @param texture\n   */\n  setImage(texture: Texture) {\n    // this.image.cacheAsBitmap = false;\n    if (this.image.texture) {\n      this.image.texture.destroy(true);\n    }\n    this.image.texture = texture;\n    // this.image.cacheAsBitmap = true;\n    this.rotate();\n    if (!this.firstLoaded) {\n      this.firstLoaded = true;\n      this.fitImageToView();\n    }\n  }\n\n  /**\n   * set hovered shape\n   * @param shape\n   */\n  setHoveredShape(shape?: Shape<unknown>) {\n    if (shape === this.hoveredShape) {\n      return;\n    }\n    if (this.hoveredShape && !this.hoveredShape.destroyed) {\n      this.hoveredShape.hovered = false;\n    }\n    this.hoveredShape = shape;\n    if (this.hoveredShape) {\n      this.hoveredShape.hovered = true;\n    }\n  }\n\n  /**\n   * hit test\n   * @param point\n   * @param localPoint\n   * @param ctrlKey\n   */\n  hitTest(point: Point, localPoint: Point, ctrlKey = false) {\n    if (ctrlKey) {\n      this.setHoveredShape();\n      this.shapesLayer.setSnappingPoint(null);\n      return;\n    }\n    const { intersection, snappingPoint } = hitTesting(point, localPoint, this.shapesLayer.children);\n    this.setHoveredShape(intersection);\n    this.shapesLayer.setSnappingPoint(this._autoSnapEnabled ? snappingPoint : null);\n  }\n\n  /**\n   * rotate\n   */\n  rotate = () => {\n    if (this.image && !this.imageLoadError) {\n      // set pivot\n      const { width, height } = this.image;\n      this.image.pivot.set(width / 2, height / 2);\n\n      // set position\n      const px = width / 2;\n      const py = height / 2;\n      const { x: ox, y: oy } = this.image.position;\n      this.image.position.set(px, py);\n      const offsetX = px - ox;\n      const offsetY = py - oy;\n\n      // update stage position\n      const { x, y } = this.getStagePosition();\n      this.setStagePosition(x - offsetX * this.viewScale, y - offsetY * this.viewScale);\n    }\n  };\n\n  /**\n   * zoom\n   * @param event\n   * @param zoomPoint\n   */\n  zoom = (event: WheelEvent, zoomPoint: Point, step = 0.1) => {\n    if (this.imageLoadError || !this.selected || !this.hovered) {\n      return false;\n    }\n    event.stopPropagation();\n    const zoomPointX = zoomPoint.x - this.position.x;\n    const zoomPointY = zoomPoint.y - this.position.y;\n    let newZoom = event.deltaY > 0 ? this.viewZoom / (1 + step) : this.viewZoom * (1 + step);\n    newZoom = Math.max(Math.min(newZoom, ZOOM_MAX), ZOOM_MIN);\n    const zoomScale = newZoom / this.viewZoom;\n    const { x, y } = this.getStagePosition();\n    this.setStagePosition(zoomPointX - (zoomPointX - x) * zoomScale, zoomPointY - (zoomPointY - y) * zoomScale);\n    this.viewZoom = newZoom;\n    this.viewScale *= zoomScale;\n    return true;\n  };\n\n  /**\n   * zoom to provided scale\n   * @param scale\n   */\n  zoomTo = (scale: number) => {\n    if (this.imageLoadError) {\n      return;\n    }\n    const centerX = this.viewWidth / 2;\n    const centerY = this.viewHeight / 2;\n    let newZoom = this.viewZoom * (scale / this.viewScale);\n    newZoom = Math.max(Math.min(newZoom, ZOOM_MAX), ZOOM_MIN);\n    const zoomScale = newZoom / this.viewZoom;\n    const { x, y } = this.getStagePosition();\n    this.setStagePosition(centerX - (centerX - x) * zoomScale, centerY - (centerY - y) * zoomScale);\n    this.viewZoom = newZoom;\n    this.viewScale *= zoomScale;\n  };\n\n  /**\n   * fit image to canvas\n   */\n  fitImageToView = () => {\n    if (this.imageLoadError) {\n      return;\n    }\n    const { width, height } = this.image;\n    const imageWidth = width;\n    const imageHeight = height;\n    const viewRatio = this.viewWidth / this.viewHeight;\n    const imgRatio = imageWidth / imageHeight;\n    const scale = (viewRatio < imgRatio ? this.viewWidth / imageWidth : this.viewHeight / imageHeight) * 0.98;\n    this.setStagePosition((this.viewWidth - scale * imageWidth) / 2, (this.viewHeight - scale * imageHeight) / 2);\n    this.viewScale = scale;\n    this.viewZoom = 1;\n  };\n\n  /**\n   * fit shape to canvas\n   * @param bbox\n   * @param percentage\n   */\n  fitShapeToView = (bbox: { left: number; top: number; right: number; bottom: number }, percentage = 0.98) => {\n    if (this.imageLoadError) {\n      return;\n    }\n    const { left, top, right, bottom } = bbox;\n    const width = right - left;\n    const height = bottom - top;\n    if (width !== 0 && height !== 0) {\n      const oldViewScale = this.viewScale;\n      const viewRatio = this.viewWidth / this.viewHeight;\n      const ratio = width / height;\n      let scale = (viewRatio < ratio ? this.viewWidth / width : this.viewHeight / height) * percentage;\n      let zoomScale = scale / oldViewScale;\n      let zoomLevel = Math.max(Math.min(this.viewZoom * zoomScale, ZOOM_MAX), ZOOM_MIN);\n      if (zoomLevel < 1) {\n        zoomLevel = 1;\n        zoomScale = zoomLevel / this.viewZoom;\n        scale = zoomScale * oldViewScale;\n      }\n      this.setStagePosition(this.viewWidth / 2 - scale * (left + width / 2), this.viewHeight / 2 - scale * (top + height / 2));\n      this.viewScale = scale;\n      this.viewZoom *= zoomScale;\n    }\n  };\n}\n\nexport default View;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}