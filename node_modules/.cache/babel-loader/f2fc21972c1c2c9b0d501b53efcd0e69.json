{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/attributes/OCRForm.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Input, Form, Tooltip, ConfigProvider } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport { WrapTag, InsertTag } from '../../../common/icons';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { containsRTLLanguage } from '../../utils';\nimport { getOCRText } from '../../request';\nconst storagePrefixKey = 'video-tracking-ocr';\nconst checkOCRRequestCount = imageUrl => {\n  const {\n    image,\n    count = 0\n  } = JSON.parse(localStorage.getItem(storagePrefixKey) || '{}');\n  return image !== imageUrl || count < 100;\n};\nconst updateOCRRequestCount = imageUrl => {\n  const {\n    image,\n    count = 0\n  } = JSON.parse(localStorage.getItem(storagePrefixKey) || '{}');\n  if (image !== imageUrl) {\n    // reset\n    localStorage.setItem(storagePrefixKey, JSON.stringify({\n      image: imageUrl,\n      count: 1\n    }));\n  } else {\n    localStorage.setItem(storagePrefixKey, JSON.stringify({\n      image,\n      count: count + 1\n    }));\n  }\n};\nconst OCRForm = ({\n  snapshot,\n  text,\n  onTextChange\n}) => {\n  const ocrTextArea = useRef(null);\n  const [syncing, setSyncing] = useState(false);\n  useEffect(() => {\n    if (snapshot && store.config.shouldSyncOCR) {\n      handleOCRSync();\n    }\n  }, [snapshot]);\n  const handleOCRSync = async () => {\n    if (!store.config.autoOCR) {\n      return;\n    }\n    setSyncing(true);\n    const base64Str = snapshot.split(',').pop();\n    const currentImage = store.frame.frames[store.frame.currentFrame];\n    if (base64Str && store.config.OCRSyncOn && checkOCRRequestCount(currentImage)) {\n      let ocrText;\n      try {\n        ocrText = await getOCRText(base64Str);\n        ocrText = ocrText.replace(/\\n/g, ' ').trim();\n      } catch (e) {\n        ocrText = '';\n      }\n      onTextChange(ocrText);\n      updateOCRRequestCount(currentImage);\n    }\n    store.config.shouldSyncOCR = false;\n    setSyncing(false);\n  };\n  const handleTagClick = (group, tag) => {\n    if (ocrTextArea.current && ocrTextArea.current.resizableTextArea) {\n      const domTextArea = ocrTextArea.current.resizableTextArea.textArea;\n      const txt = domTextArea.value;\n      const before = txt.substring(0, domTextArea.selectionStart);\n      const selected = txt.substring(domTextArea.selectionStart, domTextArea.selectionEnd);\n      const after = txt.substring(domTextArea.selectionEnd);\n      let newTxt = domTextArea.value;\n      let newSelection = before === null || before === void 0 ? void 0 : before.length;\n      if (group.type === 'standalone') {\n        newSelection += tag.text.length;\n        newTxt = `${before}${tag.text}${after}`;\n      } else if (group.type === 'tag') {\n        newSelection += tag.prefix.length + (selected === null || selected === void 0 ? void 0 : selected.length) + (selected.length === 0 ? 0 : tag.suffix.length);\n        newTxt = `${before}${tag.prefix}${selected}${tag.suffix}${after}`;\n      }\n      domTextArea.value = newTxt;\n      onTextChange(newTxt);\n      domTextArea.focus();\n      domTextArea.setSelectionRange(newSelection, newSelection);\n    }\n  };\n  const renderTag = (group, tag, key) => /*#__PURE__*/React.createElement(Tooltip, {\n    key: key,\n    destroyTooltipOnHide: {\n      keepParent: false\n    },\n    title: `${tag.prefix ? tag.prefix : ''}${tag.suffix ? tag.suffix : ''}${tag.text ? tag.text : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `ocr-tag-group-tag ocr-tag-group-tag-${group.type}`,\n    onClick: () => handleTagClick(group, tag),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, tag.name));\n  const renderTagGroup = (group, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: group.name,\n    destroyTooltipOnHide: {\n      keepParent: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ocr-tag-group-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, group.type === 'tag' && /*#__PURE__*/React.createElement(WrapTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 36\n    }\n  }), group.type === 'standalone' && /*#__PURE__*/React.createElement(InsertTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 43\n    }\n  }))), group.tags.map((tag, idx) => renderTag(group, tag, `${key}-${idx}`)));\n  const {\n    ocrTagGroup\n  } = store.config;\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: \"easyform\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    colon: false,\n    className: \"ocr-text-field\",\n    labelCol: {\n      span: 24\n    },\n    label: /*#__PURE__*/React.createElement(React.Fragment, null, i18n.translate('TEXT_LABEL'), syncing && /*#__PURE__*/React.createElement(SyncOutlined, {\n      spin: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input.TextArea, {\n    ref: ocrTextArea,\n    disabled: syncing,\n    value: text,\n    onChange: e => onTextChange(e.target.value),\n    dir: containsRTLLanguage(text) ? 'rtl' : 'ltr',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  })), ocrTagGroup && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ocr-tag-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, ocrTagGroup.map((group, idx) => renderTagGroup(group, `ocr-tag-group-${idx}`))));\n};\nexport default OCRForm;","map":{"version":3,"names":["React","useState","useEffect","useRef","Input","Form","Tooltip","ConfigProvider","SyncOutlined","WrapTag","InsertTag","store","i18n","containsRTLLanguage","getOCRText","storagePrefixKey","checkOCRRequestCount","imageUrl","image","count","JSON","parse","localStorage","getItem","updateOCRRequestCount","setItem","stringify","OCRForm","snapshot","text","onTextChange","ocrTextArea","syncing","setSyncing","config","shouldSyncOCR","handleOCRSync","autoOCR","base64Str","split","pop","currentImage","frame","frames","currentFrame","OCRSyncOn","ocrText","replace","trim","e","handleTagClick","group","tag","current","resizableTextArea","domTextArea","textArea","txt","value","before","substring","selectionStart","selected","selectionEnd","after","newTxt","newSelection","length","type","prefix","suffix","focus","setSelectionRange","renderTag","key","createElement","destroyTooltipOnHide","keepParent","title","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","name","renderTagGroup","tags","map","idx","ocrTagGroup","prefixCls","Item","colon","labelCol","span","label","Fragment","translate","spin","TextArea","ref","disabled","onChange","target","dir"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/attributes/OCRForm.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Input, Form, Tooltip, ConfigProvider } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport { WrapTag, InsertTag } from '../../../common/icons';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { containsRTLLanguage } from '../../utils';\nimport { getOCRText } from '../../request';\nimport { TagProps, TagGroupProps } from '../../types';\n\nconst storagePrefixKey = 'video-tracking-ocr';\nconst checkOCRRequestCount = (imageUrl: string) => {\n  const { image, count = 0 } = JSON.parse(localStorage.getItem(storagePrefixKey) || '{}');\n  return image !== imageUrl || count < 100;\n};\nconst updateOCRRequestCount = (imageUrl: string) => {\n  const { image, count = 0 } = JSON.parse(localStorage.getItem(storagePrefixKey) || '{}');\n  if (image !== imageUrl) {\n    // reset\n    localStorage.setItem(storagePrefixKey, JSON.stringify({ image: imageUrl, count: 1 }));\n  } else {\n    localStorage.setItem(storagePrefixKey, JSON.stringify({ image, count: count + 1 }));\n  }\n};\n\nconst OCRForm = ({ snapshot, text, onTextChange }: {\n  snapshot: string;\n  text: string;\n  onTextChange: (text: string) => void;\n}) => {\n  const ocrTextArea = useRef<any>(null);\n  const [syncing, setSyncing] = useState(false);\n\n  useEffect(() => {\n    if (snapshot && store.config.shouldSyncOCR) {\n      handleOCRSync();\n    }\n  }, [snapshot]);\n\n  const handleOCRSync = async () => {\n    if (!store.config.autoOCR) {\n      return;\n    }\n    setSyncing(true);\n    const base64Str = snapshot.split(',').pop();\n    const currentImage = store.frame.frames[store.frame.currentFrame];\n    if (base64Str && store.config.OCRSyncOn && checkOCRRequestCount(currentImage)) {\n      let ocrText;\n      try {\n        ocrText = await getOCRText(base64Str);\n        ocrText = ocrText.replace(/\\n/g, ' ').trim();\n      } catch (e) {\n        ocrText = '';\n      }\n      onTextChange(ocrText);\n      updateOCRRequestCount(currentImage);\n    }\n    store.config.shouldSyncOCR = false;\n    setSyncing(false);\n  };\n\n  const handleTagClick = (group: TagGroupProps, tag: TagProps) => {\n    if (ocrTextArea.current && ocrTextArea.current.resizableTextArea) {\n      const domTextArea = ocrTextArea.current.resizableTextArea.textArea;\n      const txt = domTextArea.value;\n      const before = txt.substring(0, domTextArea.selectionStart);\n      const selected = txt.substring(domTextArea.selectionStart, domTextArea.selectionEnd);\n      const after = txt.substring(domTextArea.selectionEnd);\n      let newTxt = domTextArea.value;\n      let newSelection = before?.length;\n      if (group.type === 'standalone') {\n        newSelection += tag.text!.length;\n        newTxt = `${before}${tag.text}${after}`;\n      } else if (group.type === 'tag') {\n        newSelection += tag.prefix!.length + selected?.length + (selected.length === 0 ? 0 : tag.suffix!.length);\n        newTxt = `${before}${tag.prefix}${selected}${tag.suffix}${after}`;\n      }\n      domTextArea.value = newTxt;\n      onTextChange(newTxt);\n      domTextArea.focus();\n      domTextArea.setSelectionRange(newSelection, newSelection);\n    }\n  };\n\n  const renderTag = (group: TagGroupProps, tag: TagProps, key: string) => (\n    <Tooltip\n      key={key}\n      destroyTooltipOnHide={{ keepParent: false }}\n      title={`${tag.prefix ? tag.prefix : ''}${tag.suffix ? tag.suffix : ''}${tag.text ? tag.text : ''}`}\n    >\n      <span\n        className={`ocr-tag-group-tag ocr-tag-group-tag-${group.type}`}\n        onClick={() => handleTagClick(group, tag)}\n      >\n        {tag.name}\n      </span>\n    </Tooltip>\n  );\n\n  const renderTagGroup = (group: TagGroupProps, key: string) => (\n    <div key={key}>\n      <Tooltip title={group.name} destroyTooltipOnHide={{ keepParent: false }}>\n        <span className=\"ocr-tag-group-icon\">\n          {group.type === 'tag' && <WrapTag />}\n          {group.type === 'standalone' && <InsertTag />}\n        </span>\n      </Tooltip>\n      {group.tags.map((tag, idx) => renderTag(group, tag, `${key}-${idx}`))}\n    </div>\n  );\n\n  const { ocrTagGroup } = store.config;\n  return (\n    <ConfigProvider prefixCls=\"easyform\">\n      <Form.Item\n        colon={false}\n        className=\"ocr-text-field\"\n        labelCol={{ span: 24 }}\n        label={(\n          <>\n            {i18n.translate('TEXT_LABEL')}\n            {syncing && <SyncOutlined spin />}\n          </>\n        )}\n      >\n        <Input.TextArea\n          ref={ocrTextArea}\n          disabled={syncing}\n          value={text}\n          onChange={(e) => onTextChange(e.target.value)}\n          dir={containsRTLLanguage(text) ? 'rtl' : 'ltr'}\n        />\n      </Form.Item>\n      {ocrTagGroup && (\n        <div className=\"ocr-tag-group\">\n          {ocrTagGroup.map((group, idx) => renderTagGroup(group, `ocr-tag-group-${idx}`))}\n        </div>\n      )}\n    </ConfigProvider>\n  );\n};\n\nexport default OCRForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}