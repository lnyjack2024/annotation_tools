{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\n/**\n * Relationship\n * @class\n */\nexport default class Relationship {\n  /**\n   * is relationship empty in all frames\n   * @getter\n   */\n  get isEmpty() {\n    return Object.keys(this.frames).length <= 0;\n  }\n  constructor({\n    id,\n    fromInstanceItem,\n    toInstanceItem,\n    fromCamera,\n    toCamera,\n    relationship,\n    frames = []\n  }) {\n    /**\n     * relationship uuid\n     * @member\n     */\n    this.id = void 0;\n    /**\n     * relationship from instance item\n     * @member\n     */\n    this.fromInstanceItem = void 0;\n    /**\n     * relationship to instance item\n     * @member\n     */\n    this.toInstanceItem = void 0;\n    /**\n     * camera which relationship from instance item belongs to\n     * @member\n     */\n    this.fromCamera = void 0;\n    /**\n     * camera which relationship to instance item belongs to\n     * @member\n     */\n    this.toCamera = void 0;\n    /**\n     * relationship name\n     * @member\n     */\n    this.relationship = void 0;\n    /**\n     * relationship frames\n     * @member\n     */\n    this.frames = {};\n    makeAutoObservable(this, {\n      id: false\n    }, {\n      autoBind: true\n    });\n    this.id = id || uuidv4();\n    this.fromInstanceItem = fromInstanceItem;\n    this.toInstanceItem = toInstanceItem;\n    this.fromCamera = fromCamera;\n    this.toCamera = toCamera;\n    this.relationship = relationship;\n    frames.forEach(f => {\n      this.frames[f.frameIndex] = {\n        frameIndex: f.frameIndex,\n        attributes: f.attributes\n      };\n    });\n  }\n\n  /**\n   * add to frame\n   * @param frameIndex\n   * @param attributes\n   */\n  addToFrame(frameIndex, attributes) {\n    this.frames[frameIndex] = {\n      frameIndex,\n      attributes\n    };\n  }\n\n  /**\n   * delete from frame\n   * @param frameIndex\n   */\n  deleteFromFrame(frameIndex) {\n    delete this.frames[frameIndex];\n  }\n\n  /**\n   * delete from frames\n   * @param frames\n   */\n  deleteFromFrames(frames) {\n    const deletedFrames = [];\n    frames.forEach(frameIndex => {\n      if (this.frames[frameIndex]) {\n        delete this.frames[frameIndex];\n        deletedFrames.push(frameIndex);\n      }\n    });\n    return deletedFrames;\n  }\n\n  /**\n   * switch from & to\n   */\n  switch() {\n    const item = this.fromInstanceItem;\n    const camera = this.fromCamera;\n    this.fromInstanceItem = this.toInstanceItem;\n    this.fromCamera = this.toCamera;\n    this.toInstanceItem = item;\n    this.toCamera = camera;\n  }\n\n  /**\n   * return structured data\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      from: {\n        instance: this.fromInstanceItem.instance.id,\n        child: this.fromInstanceItem.id,\n        camera: this.fromCamera\n      },\n      to: {\n        instance: this.toInstanceItem.instance.id,\n        child: this.toInstanceItem.id,\n        camera: this.toCamera\n      },\n      relationship: this.relationship,\n      frames: Object.values(this.frames).map(f => ({\n        frameIndex: f.frameIndex,\n        attributes: f.attributes\n      }))\n    };\n  }\n}","map":{"version":3,"names":["makeAutoObservable","v4","uuidv4","Relationship","isEmpty","Object","keys","frames","length","constructor","id","fromInstanceItem","toInstanceItem","fromCamera","toCamera","relationship","autoBind","forEach","f","frameIndex","attributes","addToFrame","deleteFromFrame","deleteFromFrames","deletedFrames","push","switch","item","camera","toJSON","from","instance","child","to","values","map"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/model/Relationship.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport InstanceItem from './InstanceItem';\nimport { Relationship as IRelationship, RelationshipFrame } from '../types';\n\ninterface RelationshipOptions {\n  id?: string;\n  fromInstanceItem: InstanceItem;\n  toInstanceItem: InstanceItem;\n  fromCamera: string;\n  toCamera: string;\n  relationship: string;\n  frames?: RelationshipFrame[];\n}\n\n/**\n * Relationship\n * @class\n */\nexport default class Relationship {\n  /**\n   * relationship uuid\n   * @member\n   */\n  id: string;\n\n  /**\n   * relationship from instance item\n   * @member\n   */\n  fromInstanceItem: InstanceItem;\n\n  /**\n   * relationship to instance item\n   * @member\n   */\n  toInstanceItem: InstanceItem;\n\n  /**\n   * camera which relationship from instance item belongs to\n   * @member\n   */\n  fromCamera: string;\n\n  /**\n   * camera which relationship to instance item belongs to\n   * @member\n   */\n  toCamera: string;\n\n  /**\n   * relationship name\n   * @member\n   */\n  relationship: string;\n\n  /**\n   * relationship frames\n   * @member\n   */\n  frames: {\n    [frameIndex: number]: {\n      frameIndex: number;\n      attributes?: any;\n    }\n  } = {};\n\n  /**\n   * is relationship empty in all frames\n   * @getter\n   */\n  get isEmpty() {\n    return Object.keys(this.frames).length <= 0;\n  }\n\n  constructor({ id, fromInstanceItem, toInstanceItem, fromCamera, toCamera, relationship, frames = [] }: RelationshipOptions) {\n    makeAutoObservable(this, {\n      id: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.id = id || uuidv4();\n    this.fromInstanceItem = fromInstanceItem;\n    this.toInstanceItem = toInstanceItem;\n    this.fromCamera = fromCamera;\n    this.toCamera = toCamera;\n    this.relationship = relationship;\n    frames.forEach((f) => {\n      this.frames[f.frameIndex] = {\n        frameIndex: f.frameIndex,\n        attributes: f.attributes,\n      };\n    });\n  }\n\n  /**\n   * add to frame\n   * @param frameIndex\n   * @param attributes\n   */\n  addToFrame(frameIndex: number, attributes?: any) {\n    this.frames[frameIndex] = { frameIndex, attributes };\n  }\n\n  /**\n   * delete from frame\n   * @param frameIndex\n   */\n  deleteFromFrame(frameIndex: number) {\n    delete this.frames[frameIndex];\n  }\n\n  /**\n   * delete from frames\n   * @param frames\n   */\n  deleteFromFrames(frames: number[]) {\n    const deletedFrames: number[] = [];\n    frames.forEach((frameIndex) => {\n      if (this.frames[frameIndex]) {\n        delete this.frames[frameIndex];\n        deletedFrames.push(frameIndex);\n      }\n    });\n    return deletedFrames;\n  }\n\n  /**\n   * switch from & to\n   */\n  switch() {\n    const item = this.fromInstanceItem;\n    const camera = this.fromCamera;\n    this.fromInstanceItem = this.toInstanceItem;\n    this.fromCamera = this.toCamera;\n    this.toInstanceItem = item;\n    this.toCamera = camera;\n  }\n\n  /**\n   * return structured data\n   */\n  toJSON(): IRelationship {\n    return {\n      id: this.id,\n      from: {\n        instance: this.fromInstanceItem.instance.id,\n        child: this.fromInstanceItem.id,\n        camera: this.fromCamera,\n      },\n      to: {\n        instance: this.toInstanceItem.instance.id,\n        child: this.toInstanceItem.id,\n        camera: this.toCamera,\n      },\n      relationship: this.relationship,\n      frames: Object.values(this.frames).map((f) => ({\n        frameIndex: f.frameIndex,\n        attributes: f.attributes,\n      })),\n    };\n  }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAcnC;AACA;AACA;AACA;AACA,eAAe,MAAMC,YAAY,CAAC;EAgDhC;AACF;AACA;AACA;EACE,IAAIC,OAAOA,CAAA,EAAG;IACZ,OAAOC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,MAAM,CAAC,CAACC,MAAM,IAAI,CAAC;EAC7C;EAEAC,WAAWA,CAAC;IAAEC,EAAE;IAAEC,gBAAgB;IAAEC,cAAc;IAAEC,UAAU;IAAEC,QAAQ;IAAEC,YAAY;IAAER,MAAM,GAAG;EAAwB,CAAC,EAAE;IAvD5H;AACF;AACA;AACA;IAHE,KAIAG,EAAE;IAEF;AACF;AACA;AACA;IAHE,KAIAC,gBAAgB;IAEhB;AACF;AACA;AACA;IAHE,KAIAC,cAAc;IAEd;AACF;AACA;AACA;IAHE,KAIAC,UAAU;IAEV;AACF;AACA;AACA;IAHE,KAIAC,QAAQ;IAER;AACF;AACA;AACA;IAHE,KAIAC,YAAY;IAEZ;AACF;AACA;AACA;IAHE,KAIAR,MAAM,GAKF,CAAC,CAAC;IAWJP,kBAAkB,CAAC,IAAI,EAAE;MACvBU,EAAE,EAAE;IACN,CAAC,EAAE;MACDM,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,IAAI,CAACN,EAAE,GAAGA,EAAE,IAAIR,MAAM,CAAC,CAAC;IACxB,IAAI,CAACS,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChCR,MAAM,CAACU,OAAO,CAAEC,CAAC,IAAK;MACpB,IAAI,CAACX,MAAM,CAACW,CAAC,CAACC,UAAU,CAAC,GAAG;QAC1BA,UAAU,EAAED,CAAC,CAACC,UAAU;QACxBC,UAAU,EAAEF,CAAC,CAACE;MAChB,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEC,UAAUA,CAACF,UAAkB,EAAEC,UAAgB,EAAE;IAC/C,IAAI,CAACb,MAAM,CAACY,UAAU,CAAC,GAAG;MAAEA,UAAU;MAAEC;IAAW,CAAC;EACtD;;EAEA;AACF;AACA;AACA;EACEE,eAAeA,CAACH,UAAkB,EAAE;IAClC,OAAO,IAAI,CAACZ,MAAM,CAACY,UAAU,CAAC;EAChC;;EAEA;AACF;AACA;AACA;EACEI,gBAAgBA,CAAChB,MAAgB,EAAE;IACjC,MAAMiB,aAAuB,GAAG,EAAE;IAClCjB,MAAM,CAACU,OAAO,CAAEE,UAAU,IAAK;MAC7B,IAAI,IAAI,CAACZ,MAAM,CAACY,UAAU,CAAC,EAAE;QAC3B,OAAO,IAAI,CAACZ,MAAM,CAACY,UAAU,CAAC;QAC9BK,aAAa,CAACC,IAAI,CAACN,UAAU,CAAC;MAChC;IACF,CAAC,CAAC;IACF,OAAOK,aAAa;EACtB;;EAEA;AACF;AACA;EACEE,MAAMA,CAAA,EAAG;IACP,MAAMC,IAAI,GAAG,IAAI,CAAChB,gBAAgB;IAClC,MAAMiB,MAAM,GAAG,IAAI,CAACf,UAAU;IAC9B,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACC,cAAc;IAC3C,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,QAAQ;IAC/B,IAAI,CAACF,cAAc,GAAGe,IAAI;IAC1B,IAAI,CAACb,QAAQ,GAAGc,MAAM;EACxB;;EAEA;AACF;AACA;EACEC,MAAMA,CAAA,EAAkB;IACtB,OAAO;MACLnB,EAAE,EAAE,IAAI,CAACA,EAAE;MACXoB,IAAI,EAAE;QACJC,QAAQ,EAAE,IAAI,CAACpB,gBAAgB,CAACoB,QAAQ,CAACrB,EAAE;QAC3CsB,KAAK,EAAE,IAAI,CAACrB,gBAAgB,CAACD,EAAE;QAC/BkB,MAAM,EAAE,IAAI,CAACf;MACf,CAAC;MACDoB,EAAE,EAAE;QACFF,QAAQ,EAAE,IAAI,CAACnB,cAAc,CAACmB,QAAQ,CAACrB,EAAE;QACzCsB,KAAK,EAAE,IAAI,CAACpB,cAAc,CAACF,EAAE;QAC7BkB,MAAM,EAAE,IAAI,CAACd;MACf,CAAC;MACDC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BR,MAAM,EAAEF,MAAM,CAAC6B,MAAM,CAAC,IAAI,CAAC3B,MAAM,CAAC,CAAC4B,GAAG,CAAEjB,CAAC,KAAM;QAC7CC,UAAU,EAAED,CAAC,CAACC,UAAU;QACxBC,UAAU,EAAEF,CAAC,CAACE;MAChB,CAAC,CAAC;IACJ,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}