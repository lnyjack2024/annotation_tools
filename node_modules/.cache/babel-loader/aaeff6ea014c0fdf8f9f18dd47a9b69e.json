{"ast":null,"code":"/*!\n * @pixi/runner - v6.2.2\n * Compiled Wed, 26 Jan 2022 16:23:27 UTC\n *\n * @pixi/runner is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n/**\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\n * where events are dispatched to many objects at high frequency (say every frame!)\n *\n *\n * like a signal..\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myObject = {\n *     loaded: new Runner('loaded')\n * }\n *\n * const listener = {\n *     loaded: function(){\n *         // thin\n *     }\n * }\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myGame = {\n *     update: new Runner('update')\n * }\n *\n * const gameObject = {\n *     update: function(time){\n *         // update my gamey state\n *     }\n * }\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n *\n * @memberof PIXI\n */\nvar Runner = /** @class */function () {\n  /**\n   * @param name - The function name that will be executed on the listeners added to this Runner.\n   */\n  function Runner(name) {\n    this.items = [];\n    this._name = name;\n    this._aliasCount = 0;\n  }\n  /**\n   * Dispatch/Broadcast Runner to all listeners added to the queue.\n   *\n   * @param {...any} params - (optional) parameters to pass to each listener\n   */\n  Runner.prototype.emit = function (a0, a1, a2, a3, a4, a5, a6, a7) {\n    if (arguments.length > 8) {\n      throw new Error('max arguments reached');\n    }\n    var _a = this,\n      name = _a.name,\n      items = _a.items;\n    this._aliasCount++;\n    for (var i = 0, len = items.length; i < len; i++) {\n      items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n    }\n    if (items === this.items) {\n      this._aliasCount--;\n    }\n    return this;\n  };\n  Runner.prototype.ensureNonAliasedItems = function () {\n    if (this._aliasCount > 0 && this.items.length > 1) {\n      this._aliasCount = 0;\n      this.items = this.items.slice(0);\n    }\n  };\n  /**\n   * Add a listener to the Runner\n   *\n   * Runners do not need to have scope or functions passed to them.\n   * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n   * as the name provided to the Runner when it was created.\n   *\n   * Eg A listener passed to this Runner will require a 'complete' function.\n   *\n   * ```\n   * import { Runner } from '@pixi/runner';\n   *\n   * const complete = new Runner('complete');\n   * ```\n   *\n   * The scope used will be the object itself.\n   *\n   * @param {any} item - The object that will be listening.\n   */\n  Runner.prototype.add = function (item) {\n    if (item[this._name]) {\n      this.ensureNonAliasedItems();\n      this.remove(item);\n      this.items.push(item);\n    }\n    return this;\n  };\n  /**\n   * Remove a single listener from the dispatch queue.\n   *\n   * @param {any} item - The listener that you would like to remove.\n   */\n  Runner.prototype.remove = function (item) {\n    var index = this.items.indexOf(item);\n    if (index !== -1) {\n      this.ensureNonAliasedItems();\n      this.items.splice(index, 1);\n    }\n    return this;\n  };\n  /**\n   * Check to see if the listener is already in the Runner\n   *\n   * @param {any} item - The listener that you would like to check.\n   */\n  Runner.prototype.contains = function (item) {\n    return this.items.indexOf(item) !== -1;\n  };\n  /** Remove all listeners from the Runner */\n  Runner.prototype.removeAll = function () {\n    this.ensureNonAliasedItems();\n    this.items.length = 0;\n    return this;\n  };\n  /** Remove all references, don't use after this. */\n  Runner.prototype.destroy = function () {\n    this.removeAll();\n    this.items = null;\n    this._name = null;\n  };\n  Object.defineProperty(Runner.prototype, \"empty\", {\n    /**\n     * `true` if there are no this Runner contains no listeners\n     *\n     * @readonly\n     */\n    get: function () {\n      return this.items.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Runner.prototype, \"name\", {\n    /**\n     * The name of the runner.\n     *\n     * @readonly\n     */\n    get: function () {\n      return this._name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Runner;\n}();\nObject.defineProperties(Runner.prototype, {\n  /**\n   * Alias for `emit`\n   * @memberof PIXI.Runner#\n   * @method dispatch\n   * @see PIXI.Runner#emit\n   */\n  dispatch: {\n    value: Runner.prototype.emit\n  },\n  /**\n   * Alias for `emit`\n   * @memberof PIXI.Runner#\n   * @method run\n   * @see PIXI.Runner#emit\n   */\n  run: {\n    value: Runner.prototype.emit\n  }\n});\nexport { Runner };","map":{"version":3,"sources":["../../src/Runner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\n * where events are dispatched to many objects at high frequency (say every frame!)\n *\n *\n * like a signal..\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myObject = {\n *     loaded: new Runner('loaded')\n * }\n *\n * const listener = {\n *     loaded: function(){\n *         // thin\n *     }\n * }\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myGame = {\n *     update: new Runner('update')\n * }\n *\n * const gameObject = {\n *     update: function(time){\n *         // update my gamey state\n *     }\n * }\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n *\n * @memberof PIXI\n */\nexport class Runner\n{\n    public items: any[];\n    private _name: string;\n    private _aliasCount: number;\n\n    /**\n     * @param name - The function name that will be executed on the listeners added to this Runner.\n     */\n    constructor(name: string)\n    {\n        this.items = [];\n        this._name = name;\n        this._aliasCount = 0;\n    }\n\n    /**\n     * Dispatch/Broadcast Runner to all listeners added to the queue.\n     *\n     * @param {...any} params - (optional) parameters to pass to each listener\n     */\n    public emit(a0?: unknown, a1?: unknown, a2?: unknown, a3?: unknown,\n        a4?: unknown, a5?: unknown, a6?: unknown, a7?: unknown): this\n    {\n        if (arguments.length > 8)\n        {\n            throw new Error('max arguments reached');\n        }\n\n        const { name, items } = this;\n\n        this._aliasCount++;\n\n        for (let i = 0, len = items.length; i < len; i++)\n        {\n            items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n        }\n\n        if (items === this.items)\n        {\n            this._aliasCount--;\n        }\n\n        return this;\n    }\n\n    private ensureNonAliasedItems(): void\n    {\n        if (this._aliasCount > 0 && this.items.length > 1)\n        {\n            this._aliasCount = 0;\n            this.items = this.items.slice(0);\n        }\n    }\n\n    /**\n     * Add a listener to the Runner\n     *\n     * Runners do not need to have scope or functions passed to them.\n     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n     * as the name provided to the Runner when it was created.\n     *\n     * Eg A listener passed to this Runner will require a 'complete' function.\n     *\n     * ```\n     * import { Runner } from '@pixi/runner';\n     *\n     * const complete = new Runner('complete');\n     * ```\n     *\n     * The scope used will be the object itself.\n     *\n     * @param {any} item - The object that will be listening.\n     */\n    public add(item: unknown): this\n    {\n        if ((item as any)[this._name])\n        {\n            this.ensureNonAliasedItems();\n            this.remove(item);\n            this.items.push(item);\n        }\n\n        return this;\n    }\n\n    /**\n     * Remove a single listener from the dispatch queue.\n     *\n     * @param {any} item - The listener that you would like to remove.\n     */\n    public remove(item: unknown): this\n    {\n        const index = this.items.indexOf(item);\n\n        if (index !== -1)\n        {\n            this.ensureNonAliasedItems();\n            this.items.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Check to see if the listener is already in the Runner\n     *\n     * @param {any} item - The listener that you would like to check.\n     */\n    public contains(item: unknown): boolean\n    {\n        return this.items.indexOf(item) !== -1;\n    }\n\n    /** Remove all listeners from the Runner */\n    public removeAll(): this\n    {\n        this.ensureNonAliasedItems();\n        this.items.length = 0;\n\n        return this;\n    }\n\n    /** Remove all references, don't use after this. */\n    public destroy(): void\n    {\n        this.removeAll();\n        this.items = null;\n        this._name = null;\n    }\n\n    /**\n     * `true` if there are no this Runner contains no listeners\n     *\n     * @readonly\n     */\n    public get empty(): boolean\n    {\n        return this.items.length === 0;\n    }\n\n    /**\n     * The name of the runner.\n     *\n     * @readonly\n     */\n    public get name(): string\n    {\n        return this._name;\n    }\n}\n\nObject.defineProperties(Runner.prototype, {\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method dispatch\n     * @see PIXI.Runner#emit\n     */\n    dispatch: { value: Runner.prototype.emit },\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method run\n     * @see PIXI.Runner#emit\n     */\n    run: { value: Runner.prototype.emit },\n});\n"]},"metadata":{},"sourceType":"module"}