{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/components/Attributes/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { Input } from 'antd';\nimport { isEqual } from 'lodash';\nimport EasyForm from '@appen/easy-form';\nimport { FieldControlType, OptionType } from '@appen/easy-form/es/types';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { triggerForm } from '../../utils';\nimport './index.scss';\nconst {\n  TextArea\n} = Input;\nconst Attributes = ({\n  instance\n}) => {\n  const [fields, setFields] = useState([]);\n  const [attributes, setAttributes] = useState({});\n  const [text, setText] = useState('');\n  const {\n    segmentConfig\n  } = store.ontology;\n  useEffect(() => {\n    if (!isEqual(instance === null || instance === void 0 ? void 0 : instance.attributes, attributes) || fields.length === 0 && segmentConfig) {\n      setAttributes((instance === null || instance === void 0 ? void 0 : instance.attributes) || {});\n      const {\n        updatedFields\n      } = triggerForm(segmentConfig || {\n        fields: []\n      }, instance === null || instance === void 0 ? void 0 : instance.attributes);\n      const newFields = updatedFields.map(field => field.type === FieldControlType.CHECKBOX || field.type === FieldControlType.RADIO ? {\n        ...field,\n        optionType: OptionType.BUTTON\n      } : field);\n      setFields(newFields);\n    }\n    if ((instance === null || instance === void 0 ? void 0 : instance.text) !== text) {\n      setText((instance === null || instance === void 0 ? void 0 : instance.text) || '');\n    }\n  }, [instance]);\n  const changeSegment = values => {\n    const {\n      setUpdatedInstances\n    } = store.instance;\n    const newAttributes = {\n      ...instance.attributes,\n      ...values\n    };\n    setAttributes(newAttributes);\n    const newInstance = {\n      [instance.id]: {\n        ...instance,\n        attributes: newAttributes\n      }\n    };\n    setUpdatedInstances(newInstance);\n  };\n\n  // input text\n  const handleChangeValue = e => {\n    e.persist();\n    if (instance) {\n      const {\n        value\n      } = e.target;\n      const {\n        setUpdatedInstances\n      } = store.instance;\n      const newInstance = {\n        [instance.id]: {\n          ...instance,\n          text: value\n        }\n      };\n      setText(value);\n      setUpdatedInstances(newInstance);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"attributes-pannel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, fields && fields.length ? /*#__PURE__*/React.createElement(EasyForm, {\n    theme: \"dark\",\n    autoFocus: false,\n    footerVisible: false,\n    fields: fields,\n    conditions: segmentConfig === null || segmentConfig === void 0 ? void 0 : segmentConfig.conditions,\n    effects: segmentConfig === null || segmentConfig === void 0 ? void 0 : segmentConfig.effects,\n    rules: segmentConfig === null || segmentConfig === void 0 ? void 0 : segmentConfig.rules,\n    onChange: changeSegment,\n    onSubmit: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"attributes-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, i18n.translate('TRANSCRIPTION', {\n    values: {\n      count: text.length\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"attributes-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    value: text,\n    onChange: handleChangeValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })));\n};\nexport default observer(Attributes);","map":{"version":3,"names":["React","useState","useEffect","observer","Input","isEqual","EasyForm","FieldControlType","OptionType","store","i18n","triggerForm","TextArea","Attributes","instance","fields","setFields","attributes","setAttributes","text","setText","segmentConfig","ontology","length","updatedFields","newFields","map","field","type","CHECKBOX","RADIO","optionType","BUTTON","changeSegment","values","setUpdatedInstances","newAttributes","newInstance","id","handleChangeValue","e","persist","value","target","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","theme","autoFocus","footerVisible","conditions","effects","rules","onChange","onSubmit","translate","count"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/components/Attributes/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { Input } from 'antd';\nimport { isEqual } from 'lodash';\nimport EasyForm from '@appen/easy-form';\nimport { Field, FieldControlType, OptionType } from '@appen/easy-form/es/types';\nimport store from '../../store/RootStore';\nimport { Instance } from '../../types';\nimport i18n from '../../locales';\nimport { triggerForm } from '../../utils';\nimport './index.scss';\n\nconst { TextArea } = Input;\n\ninterface AttributesProps {\n  instance: Instance;\n}\n\nconst Attributes = ({ instance }: AttributesProps) => {\n  const [fields, setFields] = useState<Field[]>([]);\n  const [attributes, setAttributes] = useState<{[key: string]: any}>({});\n  const [text, setText] = useState('');\n  const { segmentConfig } = store.ontology;\n  useEffect(() => {\n    if (!isEqual(instance?.attributes, attributes) || (fields.length === 0 && segmentConfig)) {\n      setAttributes(instance?.attributes || {});\n      const { updatedFields } = triggerForm(segmentConfig || { fields: [] }, instance?.attributes);\n      const newFields = updatedFields.map((field) => (field.type === FieldControlType.CHECKBOX || field.type === FieldControlType.RADIO ? {\n        ...field,\n        optionType: OptionType.BUTTON,\n      } : field));\n      setFields(newFields);\n    }\n    if (instance?.text !== text) {\n      setText(instance?.text || '');\n    }\n  }, [instance]);\n\n  const changeSegment = (values: any) => {\n    const { setUpdatedInstances } = store.instance;\n    const newAttributes = {\n      ...instance.attributes,\n      ...values,\n    };\n    setAttributes(newAttributes);\n    const newInstance: {[id:string]: Instance} = {\n      [instance.id]: {\n        ...instance,\n        attributes: newAttributes,\n      }\n    };\n    setUpdatedInstances(newInstance);\n  };\n\n  // input text\n  const handleChangeValue = (e: any) => {\n    e.persist();\n    if (instance) {\n      const { value } = e.target;\n      const { setUpdatedInstances } = store.instance;\n      const newInstance: {[id:string]: Instance} = {\n        [instance.id]: {\n          ...instance,\n          text: value,\n        }\n      };\n      setText(value);\n      setUpdatedInstances(newInstance);\n    }\n  };\n\n  return (\n    <div className=\"attributes-pannel\">\n      {(fields && fields.length) ? (\n        <EasyForm\n          theme=\"dark\"\n          autoFocus={false}\n          footerVisible={false}\n          fields={fields}\n          conditions={segmentConfig?.conditions}\n          effects={segmentConfig?.effects}\n          rules={segmentConfig?.rules}\n          onChange={changeSegment}\n          onSubmit={() => {}}\n        />\n      ) : null}\n      <div className=\"attributes-label\">\n        {i18n.translate('TRANSCRIPTION', { values: { count: text.length } })}\n      </div>\n      <div className=\"attributes-value\">\n        <TextArea value={text} onChange={handleChangeValue} />\n      </div>\n    </div>\n  );\n};\n\nexport default observer(Attributes);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}