{"ast":null,"code":"import { Graphics } from 'pixi.js';\nimport { BorderStyle } from './Shape';\nimport { drawVertex } from './utils';\nimport { curveLength } from '../../../utils/math';\n\n/**\n * Extended Graphics\n * @class\n */\nexport default class ShapeGraphics extends Graphics {\n  dashLineTo(toX, toY, scale = 1, dash = 6, gap = 4) {\n    const {\n      points\n    } = this.currentPath;\n    const currentPosition = {\n      x: points[points.length - 2],\n      y: points[points.length - 1]\n    };\n    const toRight = currentPosition.x < toX;\n    const toBottom = currentPosition.y < toY;\n    const scaledDash = Math.max(dash / scale, dash / 2);\n    const scaledGap = Math.max(gap / scale, gap / 2);\n    const radian = Math.atan2(toY - currentPosition.y, toX - currentPosition.x);\n    const dashX = Math.cos(radian) * scaledDash;\n    const dashY = Math.sin(radian) * scaledDash;\n    const gapX = Math.cos(radian) * scaledGap;\n    const gapY = Math.sin(radian) * scaledGap;\n\n    // for vertical or horizontal line, when sin(cos) = 1, cos(sin) != 0\n    // add precision for these kind of cases to avoid oom\n    while (Math.abs(currentPosition.x - toX) > 0.00001 && (toRight ? currentPosition.x < toX : currentPosition.x > toX) || Math.abs(currentPosition.y - toY) > 0.00001 && (toBottom ? currentPosition.y < toY : currentPosition.y > toY)) {\n      currentPosition.x += dashX;\n      currentPosition.y += dashY;\n      if (toRight ? currentPosition.x > toX : currentPosition.x < toX) {\n        currentPosition.x = toX;\n      }\n      if (toBottom ? currentPosition.y > toY : currentPosition.y < toY) {\n        currentPosition.y = toY;\n      }\n      this.lineTo(currentPosition.x, currentPosition.y);\n      currentPosition.x += gapX;\n      currentPosition.y += gapY;\n      if (toRight ? currentPosition.x > toX : currentPosition.x < toX) {\n        currentPosition.x = toX;\n      }\n      if (toBottom ? currentPosition.y > toY : currentPosition.y < toY) {\n        currentPosition.y = toY;\n      }\n      this.moveTo(currentPosition.x, currentPosition.y);\n    }\n  }\n  dashBezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY, scale = 1, dash = 6, gap = 4) {\n    const {\n      points\n    } = this.currentPath;\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    const scaledDash = Math.max(dash / scale, dash / 2);\n    const scaledGap = Math.max(gap / scale, gap / 2);\n    const len = curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY);\n    const groupCount = len / (scaledDash + scaledGap);\n    const groupLen = len / groupCount;\n    let groupIndex = 0;\n    let dt = 0;\n    let dt2 = 0;\n    let dt3 = 0;\n    let t2 = 0;\n    let t3 = 0;\n    for (let i = 1, j = 0; i <= len; i += 1) {\n      j = i / len;\n      dt = 1 - j;\n      dt2 = dt * dt;\n      dt3 = dt2 * dt;\n      t2 = j * j;\n      t3 = t2 * j;\n      const px = dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX;\n      const py = dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY;\n      if (i <= groupIndex * groupLen + scaledDash) {\n        this.lineTo(px, py);\n      } else if (i < (groupIndex + 1) * groupLen) {\n        this.moveTo(px, py);\n      } else {\n        this.moveTo(px, py);\n        groupIndex += 1;\n      }\n    }\n  }\n  drawLine(toX, toY, borderStyle, scale = 1) {\n    if (borderStyle === BorderStyle.DASHED) {\n      this.dashLineTo(toX, toY, scale);\n    } else {\n      this.lineTo(toX, toY);\n    }\n  }\n  drawVertex(x, y, size) {\n    drawVertex(this, x, y, size);\n  }\n}","map":{"version":3,"names":["Graphics","BorderStyle","drawVertex","curveLength","ShapeGraphics","dashLineTo","toX","toY","scale","dash","gap","points","currentPath","currentPosition","x","length","y","toRight","toBottom","scaledDash","Math","max","scaledGap","radian","atan2","dashX","cos","dashY","sin","gapX","gapY","abs","lineTo","moveTo","dashBezierCurveTo","cpX","cpY","cpX2","cpY2","fromX","fromY","len","groupCount","groupLen","groupIndex","dt","dt2","dt3","t2","t3","i","j","px","py","drawLine","borderStyle","DASHED","size"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/ExtendedGraphics.ts"],"sourcesContent":["import { Graphics } from 'pixi.js';\nimport { BorderStyle } from './Shape';\nimport { drawVertex } from './utils';\nimport { curveLength } from '../../../utils/math';\n\n/**\n * Extended Graphics\n * @class\n */\nexport default class ShapeGraphics extends Graphics {\n  dashLineTo(toX: number, toY: number, scale = 1, dash = 6, gap = 4) {\n    const { points } = this.currentPath;\n    const currentPosition = {\n      x: points[points.length - 2],\n      y: points[points.length - 1],\n    };\n\n    const toRight = currentPosition.x < toX;\n    const toBottom = currentPosition.y < toY;\n\n    const scaledDash = Math.max(dash / scale, dash / 2);\n    const scaledGap = Math.max(gap / scale, gap / 2);\n    const radian = Math.atan2(toY - currentPosition.y, toX - currentPosition.x);\n    const dashX = Math.cos(radian) * scaledDash;\n    const dashY = Math.sin(radian) * scaledDash;\n    const gapX = Math.cos(radian) * scaledGap;\n    const gapY = Math.sin(radian) * scaledGap;\n\n    // for vertical or horizontal line, when sin(cos) = 1, cos(sin) != 0\n    // add precision for these kind of cases to avoid oom\n    while (\n      (Math.abs(currentPosition.x - toX) > 0.00001 && (toRight ? currentPosition.x < toX : currentPosition.x > toX)) ||\n      (Math.abs(currentPosition.y - toY) > 0.00001 && (toBottom ? currentPosition.y < toY : currentPosition.y > toY))\n    ) {\n      currentPosition.x += dashX;\n      currentPosition.y += dashY;\n      if (toRight ? currentPosition.x > toX : currentPosition.x < toX) {\n        currentPosition.x = toX;\n      }\n      if (toBottom ? currentPosition.y > toY : currentPosition.y < toY) {\n        currentPosition.y = toY;\n      }\n      this.lineTo(currentPosition.x, currentPosition.y);\n\n      currentPosition.x += gapX;\n      currentPosition.y += gapY;\n      if (toRight ? currentPosition.x > toX : currentPosition.x < toX) {\n        currentPosition.x = toX;\n      }\n      if (toBottom ? currentPosition.y > toY : currentPosition.y < toY) {\n        currentPosition.y = toY;\n      }\n      this.moveTo(currentPosition.x, currentPosition.y);\n    }\n  }\n\n  dashBezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number, scale = 1, dash = 6, gap = 4) {\n    const { points } = this.currentPath;\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n\n    const scaledDash = Math.max(dash / scale, dash / 2);\n    const scaledGap = Math.max(gap / scale, gap / 2);\n\n    const len = curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY);\n    const groupCount = len / (scaledDash + scaledGap);\n    const groupLen = len / groupCount;\n    let groupIndex = 0;\n\n    let dt = 0;\n    let dt2 = 0;\n    let dt3 = 0;\n    let t2 = 0;\n    let t3 = 0;\n\n    for (let i = 1, j = 0; i <= len; i += 1) {\n      j = i / len;\n\n      dt = (1 - j);\n      dt2 = dt * dt;\n      dt3 = dt2 * dt;\n\n      t2 = j * j;\n      t3 = t2 * j;\n\n      const px = (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX);\n      const py = (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY);\n\n      if (i <= groupIndex * groupLen + scaledDash) {\n        this.lineTo(px, py);\n      } else if (i < (groupIndex + 1) * groupLen) {\n        this.moveTo(px, py);\n      } else {\n        this.moveTo(px, py);\n        groupIndex += 1;\n      }\n    }\n  }\n\n  drawLine(toX: number, toY: number, borderStyle: BorderStyle, scale = 1) {\n    if (borderStyle === BorderStyle.DASHED) {\n      this.dashLineTo(toX, toY, scale);\n    } else {\n      this.lineTo(toX, toY);\n    }\n  }\n\n  drawVertex(x: number, y: number, size: number) {\n    drawVertex(this, x, y, size);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}