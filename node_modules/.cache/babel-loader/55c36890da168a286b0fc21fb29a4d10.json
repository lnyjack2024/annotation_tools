{"ast":null,"code":"import { ProjectModel } from './types';\n\n/**\n * parse calibration\n * @param calib\n */\nexport function parseCalibration(calib) {\n  if (calib && Object.values(ProjectModel).includes(calib.model)) {\n    const {\n      model,\n      fov,\n      distortions,\n      intrinsics,\n      sensor_to_device,\n      homography\n    } = calib;\n    if (model === ProjectModel.DEFAULT && homography) {\n      if (isNumberArray(homography) && homography.length >= 9) {\n        return {\n          model,\n          homography: [...homography]\n        };\n      }\n      if (Array.isArray(homography)) {\n        const homographyByCamera = {};\n        homography.forEach(h => {\n          if (h.to && isNumberArray(h.homography)) {\n            homographyByCamera[h.to] = [...h.homography];\n          }\n        });\n        if (Object.values(homographyByCamera).length > 0) {\n          return {\n            model,\n            homography: homographyByCamera\n          };\n        }\n      }\n    }\n    if ([distortions, intrinsics, sensor_to_device].every(params => isNumberArray(params)) && distortions.length >= 4 && intrinsics.length >= 4 && sensor_to_device.length >= 16) {\n      return {\n        model,\n        fov,\n        distortions: [...distortions],\n        intrinsics: [...intrinsics],\n        sensorToDevice: [...sensor_to_device]\n      };\n    }\n  }\n  return null;\n}\n\n/**\n * prase calibrations\n * @param calibs\n */\nexport function parseCalibrations(calibs) {\n  if (Array.isArray(calibs)) {\n    const calibrations = [];\n    for (let i = 0; i < calibs.length; i += 1) {\n      calibrations[i] = parseCalibration(calibs[i]);\n    }\n    return calibrations;\n  }\n  return parseCalibration(calibs);\n}\n\n/**\n * is number array\n * @param arr\n */\nfunction isNumberArray(arr) {\n  return Array.isArray(arr) && arr.every(n => typeof n === 'number');\n}\n\n/**\n * is vehicle project model calibration\n * @param calib\n */\nexport function isVehicleProjectModel(calib) {\n  return calib !== null && [ProjectModel.OMNI_DIRECTIONAL, ProjectModel.KANNALA_BRANDT].includes(calib.model);\n}","map":{"version":3,"names":["ProjectModel","parseCalibration","calib","Object","values","includes","model","fov","distortions","intrinsics","sensor_to_device","homography","DEFAULT","isNumberArray","length","Array","isArray","homographyByCamera","forEach","h","to","every","params","sensorToDevice","parseCalibrations","calibs","calibrations","i","arr","n","isVehicleProjectModel","OMNI_DIRECTIONAL","KANNALA_BRANDT"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/cameras-mapping/utils.ts"],"sourcesContent":["import { CameraCalibration, CameraCalibrations, ProjectModel } from './types';\n\n/**\n * parse calibration\n * @param calib\n */\nexport function parseCalibration(calib: unknown): CameraCalibration {\n  if (calib && Object.values(ProjectModel).includes((calib as any).model)) {\n    const {\n      model,\n      fov,\n      distortions,\n      intrinsics,\n      sensor_to_device,\n      homography,\n    } = calib as any;\n\n    if (model === ProjectModel.DEFAULT && homography) {\n      if (isNumberArray(homography) && homography.length >= 9) {\n        return {\n          model,\n          homography: [...homography],\n        };\n      }\n      if (Array.isArray(homography)) {\n        const homographyByCamera: Record<string, number[]> = {};\n        homography.forEach((h) => {\n          if (h.to && isNumberArray(h.homography)) {\n            homographyByCamera[h.to] = [...h.homography];\n          }\n        });\n        if (Object.values(homographyByCamera).length > 0) {\n          return {\n            model,\n            homography: homographyByCamera,\n          };\n        }\n      }\n    }\n\n    if (\n      [distortions, intrinsics, sensor_to_device].every((params) => isNumberArray(params))\n      && distortions.length >= 4\n      && intrinsics.length >= 4\n      && sensor_to_device.length >= 16\n    ) {\n      return {\n        model,\n        fov,\n        distortions: [...distortions],\n        intrinsics: [...intrinsics],\n        sensorToDevice: [...sensor_to_device],\n      };\n    }\n  }\n  return null;\n}\n\n/**\n * prase calibrations\n * @param calibs\n */\nexport function parseCalibrations(calibs: unknown): CameraCalibrations {\n  if (Array.isArray(calibs)) {\n    const calibrations: CameraCalibrations = [];\n    for (let i = 0; i < calibs.length; i += 1) {\n      calibrations[i] = parseCalibration(calibs[i]);\n    }\n    return calibrations;\n  }\n  return parseCalibration(calibs);\n}\n\n/**\n * is number array\n * @param arr\n */\nfunction isNumberArray(arr: unknown) {\n  return Array.isArray(arr) && arr.every((n) => typeof n === 'number');\n}\n\n/**\n * is vehicle project model calibration\n * @param calib\n */\nexport function isVehicleProjectModel(calib: CameraCalibration) {\n  return calib !== null && [ProjectModel.OMNI_DIRECTIONAL, ProjectModel.KANNALA_BRANDT].includes(calib.model);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}