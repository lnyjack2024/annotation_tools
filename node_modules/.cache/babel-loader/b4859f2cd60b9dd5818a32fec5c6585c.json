{"ast":null,"code":"import { inv, transpose, multiply } from 'mathjs';\nimport { ProjectModel, CalculateType } from './types';\nfunction projectVehicleToCamera(vehiclePoints, calibration) {\n  const {\n    model,\n    distortions,\n    intrinsics,\n    sensorToDevice\n  } = calibration;\n  if (model === ProjectModel.OMNI_DIRECTIONAL) {\n    const K = intrinsics.slice(0, 5);\n    const D = distortions.slice(0, 4);\n    const T = inv([[sensorToDevice[0], sensorToDevice[1], sensorToDevice[2], sensorToDevice[3]], [sensorToDevice[4], sensorToDevice[5], sensorToDevice[6], sensorToDevice[7]], [sensorToDevice[8], sensorToDevice[9], sensorToDevice[10], sensorToDevice[11]], [sensorToDevice[12], sensorToDevice[13], sensorToDevice[14], sensorToDevice[15]]]);\n    const [k1, k2, p1, p2] = D;\n    const transposedPoints = transpose(vehiclePoints);\n    const loc = multiply(T, transposedPoints.concat([Array(vehiclePoints.length).fill(1)]));\n    for (let i = 0; i < vehiclePoints.length; i += 1) {\n      const d = Math.sqrt(loc[0][i] ** 2 + loc[1][i] ** 2 + loc[2][i] ** 2);\n      loc[2][i] = 1 / (loc[2][i] + K[0] * d);\n      loc[0][i] *= loc[2][i];\n      loc[1][i] *= loc[2][i];\n      loc[2][i] = 1;\n      const mx2u = loc[0][i] ** 2;\n      const my2u = loc[1][i] ** 2;\n      const mxyu = loc[0][i] * loc[1][i];\n      const rho2u = mx2u + my2u;\n      const radDist = k1 * rho2u + k2 * rho2u ** 2;\n      loc[0][i] += loc[0][i] * radDist + 2 * p1 * mxyu + p2 * (rho2u + 2 * mx2u);\n      loc[1][i] += loc[1][i] * radDist + 2 * p2 * mxyu + p1 * (rho2u + 2 * my2u);\n    }\n    const uv = multiply([[K[1], 0, K[3]], [0, K[2], K[4]], [0, 0, 1]], loc.slice(0, 3));\n    return transpose(uv.slice(0, 2));\n  }\n  return null;\n}\n\n// eslint-disable-next-line no-restricted-globals\nconst ctx = self;\nctx.addEventListener('message', e => {\n  const {\n    type,\n    data\n  } = e.data;\n  switch (type) {\n    case CalculateType.VEHICLE_TO_CAMERA:\n      {\n        const {\n          frameIndex,\n          cameraCalibrations,\n          vehiclePoints\n        } = data;\n        const cameraPoints = {};\n        Object.keys(cameraCalibrations).forEach(camera => {\n          const calibration = cameraCalibrations[camera];\n          const uv = projectVehicleToCamera(vehiclePoints, calibration);\n          if (uv) {\n            cameraPoints[camera] = uv;\n          }\n        });\n        ctx.postMessage({\n          type: CalculateType.VEHICLE_TO_CAMERA_FINISH,\n          data: {\n            frameIndex,\n            cameraPoints\n          }\n        });\n        break;\n      }\n    default:\n  }\n});\nexport default null;","map":{"version":3,"names":["inv","transpose","multiply","ProjectModel","CalculateType","projectVehicleToCamera","vehiclePoints","calibration","model","distortions","intrinsics","sensorToDevice","OMNI_DIRECTIONAL","K","slice","D","T","k1","k2","p1","p2","transposedPoints","loc","concat","Array","length","fill","i","d","Math","sqrt","mx2u","my2u","mxyu","rho2u","radDist","uv","ctx","self","addEventListener","e","type","data","VEHICLE_TO_CAMERA","frameIndex","cameraCalibrations","cameraPoints","Object","keys","forEach","camera","postMessage","VEHICLE_TO_CAMERA_FINISH"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/cameras-mapping/calculate.worker.ts"],"sourcesContent":["import { inv, transpose, multiply } from 'mathjs';\nimport { Point2D, Point3D, ProjectModel, Calibration, CalculateType } from './types';\n\nfunction projectVehicleToCamera(vehiclePoints: Point3D[], calibration: Calibration): Point2D[] | null {\n  const { model, distortions, intrinsics, sensorToDevice } = calibration;\n\n  if (model === ProjectModel.OMNI_DIRECTIONAL) {\n    const K = intrinsics.slice(0, 5);\n    const D = distortions.slice(0, 4);\n    const T = inv([\n      [sensorToDevice[0], sensorToDevice[1], sensorToDevice[2], sensorToDevice[3]],\n      [sensorToDevice[4], sensorToDevice[5], sensorToDevice[6], sensorToDevice[7]],\n      [sensorToDevice[8], sensorToDevice[9], sensorToDevice[10], sensorToDevice[11]],\n      [sensorToDevice[12], sensorToDevice[13], sensorToDevice[14], sensorToDevice[15]],\n    ]);\n    const [k1, k2, p1, p2] = D;\n\n    const transposedPoints: number[][] = transpose(vehiclePoints);\n    const loc = multiply(\n      T,\n      transposedPoints.concat([Array(vehiclePoints.length).fill(1)]),\n    );\n\n    for (let i = 0; i < vehiclePoints.length; i += 1) {\n      const d = Math.sqrt(loc[0][i] ** 2 + loc[1][i] ** 2 + loc[2][i] ** 2);\n      loc[2][i] = 1 / (loc[2][i] + K[0] * d);\n      loc[0][i] *= loc[2][i];\n      loc[1][i] *= loc[2][i];\n      loc[2][i] = 1;\n\n      const mx2u = loc[0][i] ** 2;\n      const my2u = loc[1][i] ** 2;\n      const mxyu = loc[0][i] * loc[1][i];\n      const rho2u = mx2u + my2u;\n      const radDist = k1 * rho2u + k2 * (rho2u ** 2);\n      loc[0][i] += loc[0][i] * radDist + 2 * p1 * mxyu + p2 * (rho2u + 2 * mx2u);\n      loc[1][i] += loc[1][i] * radDist + 2 * p2 * mxyu + p1 * (rho2u + 2 * my2u);\n    }\n\n    const uv = multiply(\n      [\n        [K[1], 0, K[3]],\n        [0, K[2], K[4]],\n        [0, 0, 1],\n      ],\n      loc.slice(0, 3),\n    );\n    return transpose(uv.slice(0, 2)) as Point2D[];\n  }\n\n  return null;\n}\n\n// eslint-disable-next-line no-restricted-globals\nconst ctx: Worker = self as any;\n\nctx.addEventListener('message', (e) => {\n  const { type, data } = e.data;\n\n  switch (type) {\n    case CalculateType.VEHICLE_TO_CAMERA: {\n      const { frameIndex, cameraCalibrations, vehiclePoints } = data;\n      const cameraPoints: Record<string, Point2D[]> = {};\n      Object.keys(cameraCalibrations).forEach((camera) => {\n        const calibration = cameraCalibrations[camera];\n        const uv = projectVehicleToCamera(vehiclePoints, calibration);\n        if (uv) {\n          cameraPoints[camera] = uv;\n        }\n      });\n      ctx.postMessage({\n        type: CalculateType.VEHICLE_TO_CAMERA_FINISH,\n        data: {\n          frameIndex,\n          cameraPoints,\n        },\n      });\n      break;\n    }\n    default:\n  }\n});\n\nexport default null as any;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}