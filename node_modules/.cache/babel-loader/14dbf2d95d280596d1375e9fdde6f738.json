{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n/*:: import type {Index, SizeAndPositionInfo} from './types';*/\n/**\n * A section of the Window.\n * Window Sections are used to group nearby cells.\n * This enables us to more quickly determine which cells to display in a given region of the Window.\n * Sections have a fixed size and contain 0 to many cells (tracked by their indices).\n */\nvar Section = /*#__PURE__*/function () {\n  function Section(_ref /*:: */) {\n    var height = _ref /*:: */.height,\n      width = _ref /*:: */.width,\n      x = _ref /*:: */.x,\n      y = _ref /*:: */.y;\n    _classCallCheck(this, Section);\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n    this._indexMap = {};\n    this._indices = [];\n  }\n\n  /** Add a cell to this section. */\n  return _createClass(Section, [{\n    key: \"addCellIndex\",\n    value: function addCellIndex(_ref2 /*:: */) {\n      var index = _ref2 /*:: */.index;\n      if (!this._indexMap[index]) {\n        this._indexMap[index] = true;\n        this._indices.push(index);\n      }\n    }\n\n    /** Get all cell indices that have been added to this section. */\n  }, {\n    key: \"getCellIndices\",\n    value: function getCellIndices() /*: Array<number>*/{\n      return this._indices;\n    }\n\n    /** Intended for debugger/test purposes only */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.x, \",\").concat(this.y, \" \").concat(this.width, \"x\").concat(this.height);\n    }\n  }]);\n}();\nexport { Section as default };","map":{"version":3,"names":["_classCallCheck","_createClass","Section","_ref","height","width","x","y","_indexMap","_indices","key","value","addCellIndex","_ref2","index","push","getCellIndices","toString","concat","default"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/node_modules/react-virtualized/dist/es/Collection/Section.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n/*:: import type {Index, SizeAndPositionInfo} from './types';*/\n/**\n * A section of the Window.\n * Window Sections are used to group nearby cells.\n * This enables us to more quickly determine which cells to display in a given region of the Window.\n * Sections have a fixed size and contain 0 to many cells (tracked by their indices).\n */\nvar Section = /*#__PURE__*/function () {\n  function Section(_ref /*:: */) {\n    var height = _ref /*:: */.height,\n      width = _ref /*:: */.width,\n      x = _ref /*:: */.x,\n      y = _ref /*:: */.y;\n    _classCallCheck(this, Section);\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n    this._indexMap = {};\n    this._indices = [];\n  }\n\n  /** Add a cell to this section. */\n  return _createClass(Section, [{\n    key: \"addCellIndex\",\n    value: function addCellIndex(_ref2 /*:: */) {\n      var index = _ref2 /*:: */.index;\n      if (!this._indexMap[index]) {\n        this._indexMap[index] = true;\n        this._indices.push(index);\n      }\n    }\n\n    /** Get all cell indices that have been added to this section. */\n  }, {\n    key: \"getCellIndices\",\n    value: function getCellIndices() /*: Array<number>*/{\n      return this._indices;\n    }\n\n    /** Intended for debugger/test purposes only */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.x, \",\").concat(this.y, \" \").concat(this.width, \"x\").concat(this.height);\n    }\n  }]);\n}();\nexport { Section as default };"],"mappings":"AAAA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,OAAOC,YAAY,MAAM,oCAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAa,YAAY;EACrC,SAASA,OAAOA,CAACC,IAAI,CAAC,SAAS;IAC7B,IAAIC,MAAM,GAAGD,IAAI,CAAC,QAAQC,MAAM;MAC9BC,KAAK,GAAGF,IAAI,CAAC,QAAQE,KAAK;MAC1BC,CAAC,GAAGH,IAAI,CAAC,QAAQG,CAAC;MAClBC,CAAC,GAAGJ,IAAI,CAAC,QAAQI,CAAC;IACpBP,eAAe,CAAC,IAAI,EAAEE,OAAO,CAAC;IAC9B,IAAI,CAACE,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,QAAQ,GAAG,EAAE;EACpB;;EAEA;EACA,OAAOR,YAAY,CAACC,OAAO,EAAE,CAAC;IAC5BQ,GAAG,EAAE,cAAc;IACnBC,KAAK,EAAE,SAASC,YAAYA,CAACC,KAAK,CAAC,SAAS;MAC1C,IAAIC,KAAK,GAAGD,KAAK,CAAC,QAAQC,KAAK;MAC/B,IAAI,CAAC,IAAI,CAACN,SAAS,CAACM,KAAK,CAAC,EAAE;QAC1B,IAAI,CAACN,SAAS,CAACM,KAAK,CAAC,GAAG,IAAI;QAC5B,IAAI,CAACL,QAAQ,CAACM,IAAI,CAACD,KAAK,CAAC;MAC3B;IACF;;IAEA;EACF,CAAC,EAAE;IACDJ,GAAG,EAAE,gBAAgB;IACrBC,KAAK,EAAE,SAASK,cAAcA,CAAA,EAAG,mBAAmB;MAClD,OAAO,IAAI,CAACP,QAAQ;IACtB;;IAEA;EACF,CAAC,EAAE;IACDC,GAAG,EAAE,UAAU;IACfC,KAAK,EAAE,SAASM,QAAQA,CAAA,EAAG;MACzB,OAAO,EAAE,CAACC,MAAM,CAAC,IAAI,CAACZ,CAAC,EAAE,GAAG,CAAC,CAACY,MAAM,CAAC,IAAI,CAACX,CAAC,EAAE,GAAG,CAAC,CAACW,MAAM,CAAC,IAAI,CAACb,KAAK,EAAE,GAAG,CAAC,CAACa,MAAM,CAAC,IAAI,CAACd,MAAM,CAAC;IAC/F;EACF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,SAASF,OAAO,IAAIiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}