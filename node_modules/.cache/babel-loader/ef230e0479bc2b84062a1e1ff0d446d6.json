{"ast":null,"code":"import _initializerDefineProperty from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\nvar _dec,\n  _dec2,\n  _dec3,\n  _dec4,\n  _dec5,\n  _dec6,\n  _dec7,\n  _dec8,\n  _dec9,\n  _dec0,\n  _dec1,\n  _dec10,\n  _dec11,\n  _dec12,\n  _dec13,\n  _class,\n  _class2,\n  _descriptor,\n  _descriptor2,\n  _descriptor3,\n  _descriptor4,\n  _descriptor5,\n  _descriptor6,\n  _descriptor7,\n  _descriptor8,\n  _descriptor9,\n  _descriptor0,\n  _descriptor1,\n  _descriptor10,\n  _descriptor11,\n  _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/landmark-annotation/index.tsx\";\nimport React from 'react';\nimport { observable, action, computed, set, get, toJS, makeObservable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { notification } from 'antd';\nimport Toolbar from './components/Toolbar';\nimport Sidebar from './components/Sidebar';\nimport Canvas from './components/Canvas';\nimport Information from './components/Information';\nimport formatMessage from './locales';\nimport { fetchResultByUrl } from './request';\nimport { isPreview } from '../../utils/tool-mode';\nimport './index.scss';\nnotification.config({\n  top: 60\n});\nlet LandmarkAnnotation = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, _dec5 = action.bound, _dec6 = action.bound, _dec7 = action.bound, _dec8 = action.bound, _dec9 = action.bound, _dec0 = action.bound, _dec1 = action.bound, _dec10 = action.bound, _dec11 = action.bound, _dec12 = action.bound, _dec13 = action.bound, observer(_class = (_class2 = class LandmarkAnnotation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.savedStatus = [];\n    _initializerDefineProperty(this, \"pointer\", _descriptor, this);\n    _initializerDefineProperty(this, \"isFullScreen\", _descriptor2, this);\n    _initializerDefineProperty(this, \"isGridVisible\", _descriptor3, this);\n    _initializerDefineProperty(this, \"isLabelVisible\", _descriptor4, this);\n    _initializerDefineProperty(this, \"categoryPathShapes\", _descriptor5, this);\n    _initializerDefineProperty(this, \"defaultPoints\", _descriptor6, this);\n    _initializerDefineProperty(this, \"updatedPoints\", _descriptor7, this);\n    _initializerDefineProperty(this, \"points\", _descriptor8, this);\n    _initializerDefineProperty(this, \"selectedPoint\", _descriptor9, this);\n    _initializerDefineProperty(this, \"pointSize\", _descriptor0, this);\n    _initializerDefineProperty(this, \"lineWidth\", _descriptor1, this);\n    _initializerDefineProperty(this, \"filters\", _descriptor10, this);\n    _initializerDefineProperty(this, \"loading\", _descriptor11, this);\n    this.imageWidth = undefined;\n    this.imageHeight = undefined;\n    this.canvas = React.createRef();\n    this.onSave = (submit = true) => {\n      var _this$canvas$current, _this$canvas$current$, _this$canvas$current2, _this$canvas$current3;\n      if (this.loading) {\n        const loadError = formatMessage('ERROR_DATA_LOAD');\n        notification.error({\n          message: loadError\n        });\n        throw new Error(loadError);\n      }\n      const checkMissingPoints = this.props.check_missing_points === true && submit === true;\n      if (checkMissingPoints && this.annotatedPointCount < this.totalPointCount) {\n        const errMsg = formatMessage('ERROR_INCOMPLETE', {\n          values: {\n            annotated: `${this.annotatedPointCount}`,\n            total: `${this.totalPointCount}`\n          }\n        });\n        notification.error({\n          message: errMsg\n        });\n        throw new Error(errMsg);\n      }\n      const points = [];\n      Object.keys(this.points).forEach(pointIndex => {\n        const index = parseInt(pointIndex, 10);\n        const point = toJS(this.points[index]);\n        if (point) {\n          point.index = index;\n          points.push(point);\n        }\n      });\n      return this.props.jobProxy.saveResult({\n        auditId: this.props.jobProxy.auditId,\n        width: ((_this$canvas$current = this.canvas.current) === null || _this$canvas$current === void 0 ? void 0 : (_this$canvas$current$ = _this$canvas$current.imageCanvas) === null || _this$canvas$current$ === void 0 ? void 0 : _this$canvas$current$.width) || this.imageWidth,\n        height: ((_this$canvas$current2 = this.canvas.current) === null || _this$canvas$current2 === void 0 ? void 0 : (_this$canvas$current3 = _this$canvas$current2.imageCanvas) === null || _this$canvas$current3 === void 0 ? void 0 : _this$canvas$current3.height) || this.imageHeight,\n        points,\n        categoryPathShapes: Object.keys(this.categoryPathShapes).map(category => ({\n          category,\n          shape: this.categoryPathShapes[category]\n        }))\n      }, submit);\n    };\n    this.handleSave = async () => {\n      const {\n        toolMode\n      } = this.props.jobProxy;\n      if (isPreview(toolMode)) {\n        return;\n      }\n      try {\n        await this.onSave(false);\n        notification.success({\n          message: formatMessage('SAVE_SUCCESS')\n        });\n      } catch (e) {\n        notification.error({\n          message: formatMessage('SAVE_FAIL')\n        });\n      }\n    };\n    makeObservable(this);\n  }\n  get categories() {\n    if (Array.isArray(this.props.categories) && this.props.categories.length) {\n      if (this.props.categories.find(v => v.range)) {\n        return this.props.categories;\n      }\n      if ((this.props.categories[0].children || [])[0]) {\n        return this.props.categories[0].children[0].categories || [];\n      }\n    }\n    return [];\n  }\n  get selectedCategoryIndex() {\n    return this.categories.findIndex(c => c.range && c.range.length === 2 && this.selectedPoint >= c.range[0] && this.selectedPoint <= c.range[1]);\n  }\n  get selectedPointInfo() {\n    if (this.selectedCategoryIndex < 0) return null;\n    return {\n      category: this.categories[this.selectedCategoryIndex].name,\n      isKeyPoint: this.categories[this.selectedCategoryIndex].keys.includes(this.selectedPoint)\n    };\n  }\n  get selectedCategoryEmptyCount() {\n    if (this.selectedCategoryIndex < 0) return null;\n    const {\n      range = []\n    } = this.categories[this.selectedCategoryIndex];\n    return Array.from({\n      length: range[1] - range[0] + 1\n    }).reduce((acc, _, index) => this.getPoint(range[0] + index) === undefined ? acc + 1 : acc, 0);\n  }\n  get annotatedPointCount() {\n    return Object.entries(this.points).filter(([_, v]) => v !== undefined).length;\n  }\n  get totalPointCount() {\n    return this.categories.map(c => c.range[1] - c.range[0] + 1).reduce((a, b) => a + b, 0);\n  }\n  get undoDisabled() {\n    return this.pointer <= 0;\n  }\n  get redoDisabled() {\n    return this.pointer >= this.savedStatus.length;\n  }\n  get nameForSave() {\n    const {\n      job_id: jobId,\n      task_id: taskId,\n      record_id: recordId,\n      worker_id: workerId\n    } = this.props;\n    return `${jobId}.${taskId}.${recordId}.${workerId}.json`;\n  }\n  get jobId() {\n    return this.props.job_id || 'landmark';\n  }\n  componentDidMount() {\n    this.onLoad();\n  }\n  getPoint(pointIndex) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return get(this.points, pointIndex);\n  }\n  setPoint(pointIndex, point) {\n    set(this.points, pointIndex, point);\n  }\n  saveStatus(before, after) {\n    this.savedStatus = this.savedStatus.slice(0, this.pointer);\n    this.savedStatus.push({\n      before,\n      after\n    });\n    if (this.savedStatus.length > 20) {\n      this.savedStatus.shift();\n    } else {\n      this.pointer += 1;\n    }\n  }\n  updateStatus(curr, prev) {\n    const updatedPoints = [];\n    prev.forEach(item => {\n      if (item.type === 'point') {\n        if (item.status.point) {\n          this.setPoint(item.status.index);\n          updatedPoints.push({\n            index: item.status.index\n          });\n        }\n      } else if (item.type === 'category-path-shape') {\n        if (item.status.shape) {\n          delete this.categoryPathShapes[item.status.category];\n        }\n      }\n    });\n    curr.forEach(item => {\n      if (item.type === 'point') {\n        if (item.status.point) {\n          this.setPoint(item.status.index, item.status.point);\n          const index = updatedPoints.findIndex(p => p.index === item.status.index);\n          const newPoint = {\n            category: item.status.point.category,\n            isKeyPoint: item.status.point.isKeyPoint,\n            visible: item.status.point.visible,\n            ...(item.status.point.position && {\n              position: {\n                ...item.status.point.position\n              }\n            })\n          };\n          if (index >= 0) {\n            updatedPoints[index].point = newPoint;\n          } else {\n            updatedPoints.push({\n              index: item.status.index,\n              point: newPoint\n            });\n          }\n        }\n      } else if (item.type === 'category-path-shape') {\n        if (item.status.shape) {\n          this.categoryPathShapes[item.status.category] = item.status.shape;\n        }\n      }\n    });\n    this.updatedPoints = updatedPoints;\n  }\n  async loadLegacyData() {\n    let data;\n    try {\n      const res = await this.props.loadContent(this.nameForSave, this.jobId);\n      if (res) {\n        data = JSON.parse(res);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log('Load content error:', e);\n    }\n    const {\n      review_from: reviewFrom\n    } = this.props;\n    if (!data && reviewFrom) {\n      try {\n        data = await fetchResultByUrl(reviewFrom);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(`Fetch data from ${reviewFrom} error:`, e);\n      }\n    }\n    return data;\n  }\n  async onLoad() {\n    if (!this.categories.length) {\n      const loadError = formatMessage('TEMPLATE_ERROR');\n      notification.error({\n        message: loadError\n      });\n    }\n    this.loading = true;\n    this.defaultPoints = [];\n    let points;\n    let result;\n    try {\n      result = await this.props.jobProxy.loadResult();\n    } catch (e) {\n      notification.error({\n        message: formatMessage('ANNOTATION_DATA_LOAD_ERROR'),\n        duration: null\n      });\n      return;\n    }\n    if (!result) {\n      // load legacy data if possible\n      points = await this.loadLegacyData();\n    } else {\n      if (Array.isArray(result)) {\n        // legacy data\n        points = result;\n      }\n      if (result.auditId) {\n        this.props.jobProxy.setAuditId(result.auditId);\n      }\n      if (result.points) {\n        points = result.points;\n      }\n      if (result.categoryPathShapes) {\n        this.categoryPathShapes = {};\n        result.categoryPathShapes.forEach(({\n          category,\n          shape\n        }) => {\n          this.categoryPathShapes[category] = shape;\n        });\n      }\n      this.imageWidth = result.width;\n      this.imageHeight = result.height;\n    }\n    if (points) {\n      this.defaultPoints = points;\n      this.defaultPoints.forEach(point => {\n        const {\n          index,\n          ...rest\n        } = point;\n        if (index !== undefined) {\n          const realCategory = this.categories.find(c => c.range && c.range.length === 2 && index >= c.range[0] && index <= c.range[1]);\n          if (realCategory) {\n            // fix category and key point info for saved data\n            rest.category = realCategory.name;\n            rest.isKeyPoint = realCategory.keys.includes(index);\n            rest.visible = rest.visible !== false;\n            this.setPoint(index, rest);\n          }\n        }\n      });\n      // set selected to the empty\n      this.setNextEmptyPoint();\n    }\n    this.props.renderComplete();\n    this.loading = false;\n  }\n  setPointSize(size) {\n    this.pointSize = size;\n  }\n  setLineWidth(width) {\n    this.lineWidth = width;\n  }\n  setFullScreen(full) {\n    this.isFullScreen = full;\n  }\n  setGridVisible(visible) {\n    this.isGridVisible = visible;\n  }\n  setLabelVisible(visible) {\n    this.isLabelVisible = visible;\n  }\n  setSelectedPoint(pointIndex) {\n    this.selectedPoint = pointIndex;\n  }\n  setNextEmptyPoint() {\n    let categoryScannedCount = 0;\n    let categoryIndex = this.selectedCategoryIndex >= 0 ? this.selectedCategoryIndex : 0;\n    let pointIndex = this.selectedPoint;\n    while (categoryScannedCount <= this.categories.length && this.categories.length) {\n      const {\n        range = []\n      } = this.categories[categoryIndex];\n      if (this.selectedPoint !== range[1]) {\n        pointIndex += 1;\n      } else {\n        categoryIndex = categoryIndex < this.categories.length - 1 ? categoryIndex + 1 : 0;\n        categoryScannedCount += 1;\n        pointIndex = this.categories[categoryIndex].range[0] || 0;\n      }\n      if (this.getPoint(pointIndex) === undefined) {\n        break;\n      }\n    }\n    this.selectedPoint = pointIndex;\n  }\n  onPointsUpdated() {\n    this.updatedPoints = [];\n  }\n  handlePointsChange(points) {\n    const before = [];\n    const after = [];\n    points.forEach(({\n      pointIndex,\n      point\n    }) => {\n      const oldPoint = toJS(this.getPoint(pointIndex));\n      const newPoint = {\n        ...oldPoint,\n        ...point\n      };\n      this.setPoint(pointIndex, newPoint);\n      before.push({\n        type: 'point',\n        status: {\n          index: pointIndex,\n          point: oldPoint\n        }\n      });\n      after.push({\n        type: 'point',\n        status: {\n          index: pointIndex,\n          point: newPoint\n        }\n      });\n    });\n    this.saveStatus(before, after);\n  }\n  handlePointsRemove(points) {\n    const before = [];\n    const after = [];\n    points.forEach(pointIndex => {\n      const oldPoint = toJS(this.getPoint(pointIndex));\n      this.setPoint(pointIndex);\n      before.push({\n        type: 'point',\n        status: {\n          index: pointIndex,\n          point: oldPoint\n        }\n      });\n      after.push({\n        type: 'point',\n        status: {\n          index: pointIndex\n        }\n      });\n    });\n    this.saveStatus(before, after);\n  }\n  togglePointsVisibility(points) {\n    const list = [];\n    points.forEach(pointIndex => {\n      const point = this.getPoint(pointIndex);\n      if (point !== undefined) {\n        list.push({\n          pointIndex,\n          point: {\n            visible: !point.visible\n          }\n        });\n      }\n    });\n    this.handlePointsChange(list);\n  }\n  undo() {\n    if (this.pointer > 0) {\n      this.pointer -= 1;\n      const {\n        before,\n        after\n      } = this.savedStatus[this.pointer];\n      this.updateStatus(before, after);\n    }\n  }\n  redo() {\n    if (this.pointer < this.savedStatus.length) {\n      const {\n        before,\n        after\n      } = this.savedStatus[this.pointer];\n      this.pointer += 1;\n      this.updateStatus(after, before);\n    }\n  }\n  handleFiltersChange(filters) {\n    this.filters = filters;\n  }\n  setCategoryPathShape(categoryName, shape, updatedPoints) {\n    const before = [{\n      type: 'category-path-shape',\n      status: {\n        category: categoryName,\n        shape: this.categoryPathShapes[categoryName]\n      }\n    }];\n    const after = [{\n      type: 'category-path-shape',\n      status: {\n        category: categoryName,\n        shape\n      }\n    }];\n    if (shape) {\n      this.categoryPathShapes[categoryName] = shape;\n      if (updatedPoints) {\n        updatedPoints.forEach(({\n          pointIndex,\n          point\n        }) => {\n          const oldPoint = toJS(this.getPoint(pointIndex));\n          const newPoint = {\n            ...oldPoint,\n            ...point\n          };\n          this.setPoint(pointIndex, newPoint);\n          before.push({\n            type: 'point',\n            status: {\n              index: pointIndex,\n              point: oldPoint\n            }\n          });\n          after.push({\n            type: 'point',\n            status: {\n              index: pointIndex,\n              point: newPoint\n            }\n          });\n        });\n      }\n    } else {\n      delete this.categoryPathShapes[categoryName];\n    }\n    this.saveStatus(before, after);\n  }\n  render() {\n    var _this$props$jobProxy;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"landmark-annotation-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      undoDisabled: this.undoDisabled,\n      redoDisabled: this.redoDisabled,\n      undo: this.undo,\n      redo: this.redo,\n      pointSize: this.pointSize,\n      setPointSize: this.setPointSize,\n      lineWidth: this.lineWidth,\n      setLineWidth: this.setLineWidth,\n      isFullScreen: this.isFullScreen,\n      setFullScreen: this.setFullScreen,\n      isGridVisible: this.isGridVisible,\n      setGridVisible: this.setGridVisible,\n      isLabelVisible: this.isLabelVisible,\n      setLabelVisible: this.setLabelVisible,\n      onFiltersChange: this.handleFiltersChange,\n      onSave: this.handleSave,\n      isPreview: isPreview((_this$props$jobProxy = this.props.jobProxy) === null || _this$props$jobProxy === void 0 ? void 0 : _this$props$jobProxy.toolMode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      categories: this.categories,\n      categoryPathShapes: this.categoryPathShapes,\n      points: toJS(this.points),\n      selectedPoint: this.selectedPoint,\n      setSelectedPoint: this.setSelectedPoint,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Canvas, {\n      ref: this.canvas,\n      image: this.props.image,\n      categories: this.categories,\n      defaultPoints: toJS(this.defaultPoints),\n      updatedPoints: toJS(this.updatedPoints),\n      isGridVisible: this.isGridVisible,\n      setGridVisible: this.setGridVisible,\n      isLabelVisible: this.isLabelVisible,\n      setLabelVisible: this.setLabelVisible,\n      pointSize: this.pointSize,\n      lineWidth: this.lineWidth,\n      selectedPoint: this.selectedPoint,\n      selectedPointInfo: this.selectedPointInfo,\n      setSelectedPoint: this.setSelectedPoint,\n      handlePointsChange: this.handlePointsChange,\n      handlePointsRemove: this.handlePointsRemove,\n      togglePointsVisibility: this.togglePointsVisibility,\n      setNextEmptyPoint: this.setNextEmptyPoint,\n      onPointsUpdated: this.onPointsUpdated,\n      undo: this.undo,\n      redo: this.redo,\n      onSave: this.handleSave,\n      isFullScreen: this.isFullScreen,\n      setFullScreen: this.setFullScreen,\n      filters: toJS(this.filters),\n      dataLoading: this.loading,\n      categoryPathShapes: toJS(this.categoryPathShapes),\n      setCategoryPathShape: this.setCategoryPathShape,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }\n    }), this.selectedCategoryIndex >= 0 && /*#__PURE__*/React.createElement(Information, {\n      category: (this.categories[this.selectedCategoryIndex] || {}).name,\n      point: this.selectedPoint,\n      count: this.selectedCategoryEmptyCount,\n      annotated: this.annotatedPointCount,\n      total: this.totalPointCount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 13\n      }\n    })));\n  }\n}, _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"pointer\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"isFullScreen\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"isGridVisible\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"isLabelVisible\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"categoryPathShapes\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"defaultPoints\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"updatedPoints\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"points\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"selectedPoint\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return ((Object.values(this.props.categories)[0] || {}).range || [])[0] || 0;\n  }\n}), _descriptor0 = _applyDecoratedDescriptor(_class2.prototype, \"pointSize\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 4;\n  }\n}), _descriptor1 = _applyDecoratedDescriptor(_class2.prototype, \"lineWidth\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 1;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, \"filters\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class2.prototype, \"categories\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"categories\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"selectedCategoryIndex\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"selectedCategoryIndex\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"selectedPointInfo\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"selectedPointInfo\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"selectedCategoryEmptyCount\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"selectedCategoryEmptyCount\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"annotatedPointCount\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"annotatedPointCount\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"totalPointCount\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"totalPointCount\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"undoDisabled\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"undoDisabled\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"redoDisabled\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"redoDisabled\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"saveStatus\", [action], Object.getOwnPropertyDescriptor(_class2.prototype, \"saveStatus\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"updateStatus\", [action], Object.getOwnPropertyDescriptor(_class2.prototype, \"updateStatus\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onLoad\", [action], Object.getOwnPropertyDescriptor(_class2.prototype, \"onLoad\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"setPointSize\", [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, \"setPointSize\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"setLineWidth\", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, \"setLineWidth\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"setFullScreen\", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, \"setFullScreen\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"setGridVisible\", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, \"setGridVisible\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"setLabelVisible\", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, \"setLabelVisible\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"setSelectedPoint\", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, \"setSelectedPoint\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"setNextEmptyPoint\", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, \"setNextEmptyPoint\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"onPointsUpdated\", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, \"onPointsUpdated\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"handlePointsChange\", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, \"handlePointsChange\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"handlePointsRemove\", [_dec0], Object.getOwnPropertyDescriptor(_class2.prototype, \"handlePointsRemove\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"togglePointsVisibility\", [_dec1], Object.getOwnPropertyDescriptor(_class2.prototype, \"togglePointsVisibility\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"undo\", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, \"undo\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"redo\", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, \"redo\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"handleFiltersChange\", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, \"handleFiltersChange\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"setCategoryPathShape\", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, \"setCategoryPathShape\"), _class2.prototype), _class2)) || _class);\nexport default LandmarkAnnotation;","map":{"version":3,"names":["React","observable","action","computed","set","get","toJS","makeObservable","observer","notification","Toolbar","Sidebar","Canvas","Information","formatMessage","fetchResultByUrl","isPreview","config","top","LandmarkAnnotation","_dec","bound","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec0","_dec1","_dec10","_dec11","_dec12","_dec13","_class","_class2","Component","constructor","props","savedStatus","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor0","_descriptor1","_descriptor10","_descriptor11","imageWidth","undefined","imageHeight","canvas","createRef","onSave","submit","_this$canvas$current","_this$canvas$current$","_this$canvas$current2","_this$canvas$current3","loading","loadError","error","message","Error","checkMissingPoints","check_missing_points","annotatedPointCount","totalPointCount","errMsg","values","annotated","total","points","Object","keys","forEach","pointIndex","index","parseInt","point","push","jobProxy","saveResult","auditId","width","current","imageCanvas","height","categoryPathShapes","map","category","shape","handleSave","toolMode","success","e","categories","Array","isArray","length","find","v","range","children","selectedCategoryIndex","findIndex","c","selectedPoint","selectedPointInfo","name","isKeyPoint","includes","selectedCategoryEmptyCount","from","reduce","acc","_","getPoint","entries","filter","a","b","undoDisabled","pointer","redoDisabled","nameForSave","job_id","jobId","task_id","taskId","record_id","recordId","worker_id","workerId","componentDidMount","onLoad","setPoint","saveStatus","before","after","slice","shift","updateStatus","curr","prev","updatedPoints","item","type","status","p","newPoint","visible","position","loadLegacyData","data","res","loadContent","JSON","parse","console","log","review_from","reviewFrom","defaultPoints","result","loadResult","duration","setAuditId","rest","realCategory","setNextEmptyPoint","renderComplete","setPointSize","size","pointSize","setLineWidth","lineWidth","setFullScreen","full","isFullScreen","setGridVisible","isGridVisible","setLabelVisible","isLabelVisible","setSelectedPoint","categoryScannedCount","categoryIndex","onPointsUpdated","handlePointsChange","oldPoint","handlePointsRemove","togglePointsVisibility","list","undo","redo","handleFiltersChange","filters","setCategoryPathShape","categoryName","render","_this$props$jobProxy","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onFiltersChange","ref","image","dataLoading","count","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/landmark-annotation/index.tsx"],"sourcesContent":["import React from 'react';\nimport { observable, action, computed, set, get, toJS, makeObservable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { notification } from 'antd';\nimport Toolbar from './components/Toolbar';\nimport Sidebar from './components/Sidebar';\nimport Canvas from './components/Canvas';\nimport Information from './components/Information';\nimport formatMessage from './locales';\nimport { CategoryItem, CategoryPathShape, Point, PointListItem, StatusItem, Status, PointStatus } from './types';\nimport { OntologyItem } from '../keypoint/store/OntologyStore';\nimport { fetchResultByUrl } from './request';\nimport JobProxy from '../../libs/JobProxy';\nimport { isPreview } from '../../utils/tool-mode';\nimport './index.scss';\n\nnotification.config({ top: 60 });\n\ninterface Props {\n  job_id: string;\n  task_id: string;\n  record_id: string;\n  worker_id: string;\n  image: string;\n  categories: CategoryItem[] | OntologyItem[];\n  jobProxy: JobProxy;\n  review_from?: string;\n  check_missing_points?: boolean;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  loadContent: (filename: string, jobId: string) => Promise<any>;\n  renderComplete: () => Promise<void>;\n}\n\n@observer\nclass LandmarkAnnotation extends React.Component<Props> {\n  savedStatus: StatusItem[] = [];\n\n  @observable pointer = 0;\n\n  @observable isFullScreen = false;\n\n  @observable isGridVisible = true;\n\n  @observable isLabelVisible = false;\n\n  @observable categoryPathShapes: { [categoryName: string]: CategoryPathShape } = {};\n\n  @observable defaultPoints: PointListItem[] = [];\n\n  @observable updatedPoints: PointStatus[] = [];\n\n  @observable points: { [pointIndex: number]: Point } = {};\n\n  @observable selectedPoint = ((Object.values(this.props.categories)[0] || {}).range || [])[0] || 0;\n\n  @observable pointSize = 4;\n\n  @observable lineWidth = 1;\n\n  @observable filters = {};\n\n  @observable loading = false;\n\n  imageWidth: number | undefined = undefined;\n\n  imageHeight: number | undefined = undefined;\n\n  canvas: React.RefObject<Canvas> = React.createRef();\n\n  constructor(props: Props) {\n    super(props);\n    makeObservable(this);\n  }\n\n  @computed get categories() {\n    if (Array.isArray(this.props.categories) && this.props.categories.length) {\n      if ((this.props.categories as CategoryItem[]).find((v) => v.range)) {\n        return this.props.categories as CategoryItem[];\n      }\n      if (((this.props.categories as OntologyItem[])[0].children || [])[0]) {\n        return (this.props.categories[0] as OntologyItem).children[0].categories || [];\n      }\n    }\n    return [];\n  }\n\n  @computed get selectedCategoryIndex() {\n    return this.categories.findIndex((c) => c.range && c.range.length === 2 && this.selectedPoint >= c.range[0] && this.selectedPoint <= c.range[1]);\n  }\n\n  @computed get selectedPointInfo() {\n    if (this.selectedCategoryIndex < 0) return null;\n    return {\n      category: this.categories[this.selectedCategoryIndex].name,\n      isKeyPoint: this.categories[this.selectedCategoryIndex].keys.includes(this.selectedPoint),\n    };\n  }\n\n  @computed get selectedCategoryEmptyCount() {\n    if (this.selectedCategoryIndex < 0) return null;\n    const { range = [] } = this.categories[this.selectedCategoryIndex];\n    return Array.from({ length: range[1] - range[0] + 1 })\n      .reduce((acc: number, _, index) => (this.getPoint(range[0] + index) === undefined ? acc + 1 : acc), 0);\n  }\n\n  @computed get annotatedPointCount() {\n    return Object.entries(this.points).filter(([_, v]) => v !== undefined).length;\n  }\n\n  @computed get totalPointCount() {\n    return this.categories.map((c) => c.range[1] - c.range[0] + 1).reduce((a, b) => a + b, 0);\n  }\n\n  @computed get undoDisabled() {\n    return this.pointer <= 0;\n  }\n\n  @computed get redoDisabled() {\n    return this.pointer >= this.savedStatus.length;\n  }\n\n  get nameForSave() {\n    const { job_id: jobId, task_id: taskId, record_id: recordId, worker_id: workerId } = this.props;\n    return `${jobId}.${taskId}.${recordId}.${workerId}.json`;\n  }\n\n  get jobId() {\n    return this.props.job_id || 'landmark';\n  }\n\n  componentDidMount() {\n    this.onLoad();\n  }\n\n  getPoint(pointIndex: number) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return get(this.points as any, pointIndex) as Point;\n  }\n\n  setPoint(pointIndex: number, point?: Point) {\n    set(this.points, pointIndex, point);\n  }\n\n  @action\n  saveStatus(before: Status[], after: Status[]) {\n    this.savedStatus = this.savedStatus.slice(0, this.pointer);\n    this.savedStatus.push({ before, after });\n    if (this.savedStatus.length > 20) {\n      this.savedStatus.shift();\n    } else {\n      this.pointer += 1;\n    }\n  }\n\n  @action\n  updateStatus(curr: Status[], prev: Status[]) {\n    const updatedPoints: PointStatus[] = [];\n\n    prev.forEach((item) => {\n      if (item.type === 'point') {\n        if (item.status.point) {\n          this.setPoint(item.status.index);\n          updatedPoints.push({ index: item.status.index });\n        }\n      } else if (item.type === 'category-path-shape') {\n        if (item.status.shape) {\n          delete this.categoryPathShapes[item.status.category];\n        }\n      }\n    });\n    curr.forEach((item) => {\n      if (item.type === 'point') {\n        if (item.status.point) {\n          this.setPoint(item.status.index, item.status.point);\n          const index = updatedPoints.findIndex((p) => p.index === item.status.index);\n          const newPoint: Point = {\n            category: item.status.point.category,\n            isKeyPoint: item.status.point.isKeyPoint,\n            visible: item.status.point.visible,\n            ...(item.status.point.position && {\n              position: { ...item.status.point.position },\n            }),\n          };\n          if (index >= 0) {\n            updatedPoints[index].point = newPoint;\n          } else {\n            updatedPoints.push({ index: item.status.index, point: newPoint });\n          }\n        }\n      } else if (item.type === 'category-path-shape') {\n        if (item.status.shape) {\n          this.categoryPathShapes[item.status.category] = item.status.shape;\n        }\n      }\n    });\n\n    this.updatedPoints = updatedPoints;\n  }\n\n  async loadLegacyData() {\n    let data;\n    try {\n      const res = await this.props.loadContent(this.nameForSave, this.jobId);\n      if (res) {\n        data = JSON.parse(res);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log('Load content error:', e);\n    }\n\n    const { review_from: reviewFrom } = this.props;\n    if (!data && reviewFrom) {\n      try {\n        data = await fetchResultByUrl(reviewFrom);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(`Fetch data from ${reviewFrom} error:`, e);\n      }\n    }\n\n    return data;\n  }\n\n  @action\n  async onLoad() {\n    if (!this.categories.length) {\n      const loadError = formatMessage('TEMPLATE_ERROR');\n      notification.error({ message: loadError });\n    }\n\n    this.loading = true;\n    this.defaultPoints = [];\n\n    let points;\n    let result;\n    try {\n      result = await this.props.jobProxy.loadResult();\n    } catch (e) {\n      notification.error({ message: formatMessage('ANNOTATION_DATA_LOAD_ERROR'), duration: null });\n      return;\n    }\n    if (!result) {\n      // load legacy data if possible\n      points = await this.loadLegacyData();\n    } else {\n      if (Array.isArray(result)) {\n        // legacy data\n        points = result;\n      }\n      if (result.auditId) {\n        this.props.jobProxy.setAuditId(result.auditId);\n      }\n      if (result.points) {\n        points = result.points;\n      }\n      if (result.categoryPathShapes) {\n        this.categoryPathShapes = {};\n        result.categoryPathShapes.forEach(({ category, shape }: { category: string; shape: CategoryPathShape }) => {\n          this.categoryPathShapes[category] = shape;\n        });\n      }\n      this.imageWidth = result.width;\n      this.imageHeight = result.height;\n    }\n\n    if (points) {\n      this.defaultPoints = points as PointListItem[];\n      this.defaultPoints.forEach((point) => {\n        const { index, ...rest } = point;\n        if (index !== undefined) {\n          const realCategory = this.categories.find((c) => c.range && c.range.length === 2 && index >= c.range[0] && index <= c.range[1]);\n          if (realCategory) {\n            // fix category and key point info for saved data\n            rest.category = realCategory.name;\n            rest.isKeyPoint = realCategory.keys.includes(index);\n            rest.visible = rest.visible !== false;\n            this.setPoint(index, rest);\n          }\n        }\n      });\n      // set selected to the empty\n      this.setNextEmptyPoint();\n    }\n    this.props.renderComplete();\n    this.loading = false;\n  }\n\n  onSave = (submit = true) => {\n    if (this.loading) {\n      const loadError = formatMessage('ERROR_DATA_LOAD');\n      notification.error({ message: loadError });\n      throw new Error(loadError);\n    }\n    const checkMissingPoints = this.props.check_missing_points === true && submit === true;\n    if (checkMissingPoints && this.annotatedPointCount < this.totalPointCount) {\n      const errMsg = formatMessage('ERROR_INCOMPLETE',\n        { values: { annotated: `${this.annotatedPointCount}`, total: `${this.totalPointCount}` } });\n      notification.error({ message: errMsg });\n      throw new Error(errMsg);\n    }\n\n    const points: PointListItem[] = [];\n    Object.keys(this.points).forEach((pointIndex) => {\n      const index = parseInt(pointIndex, 10);\n      const point: PointListItem = toJS(this.points[index]);\n      if (point) {\n        point.index = index;\n        points.push(point);\n      }\n    });\n\n    return this.props.jobProxy.saveResult({\n      auditId: this.props.jobProxy.auditId,\n      width: this.canvas.current?.imageCanvas?.width || this.imageWidth,\n      height: this.canvas.current?.imageCanvas?.height || this.imageHeight,\n      points,\n      categoryPathShapes: Object.keys(this.categoryPathShapes).map((category) => ({\n        category,\n        shape: this.categoryPathShapes[category],\n      }))\n    }, submit);\n  };\n\n  handleSave = async () => {\n    const { toolMode } = this.props.jobProxy;\n    if (isPreview(toolMode)) {\n      return;\n    }\n\n    try {\n      await this.onSave(false);\n      notification.success({ message: formatMessage('SAVE_SUCCESS') });\n    } catch (e) {\n      notification.error({ message: formatMessage('SAVE_FAIL') });\n    }\n  };\n\n  @action.bound\n  setPointSize(size: number) {\n    this.pointSize = size;\n  }\n\n  @action.bound\n  setLineWidth(width: number) {\n    this.lineWidth = width;\n  }\n\n  @action.bound\n  setFullScreen(full: boolean) {\n    this.isFullScreen = full;\n  }\n\n  @action.bound\n  setGridVisible(visible: boolean) {\n    this.isGridVisible = visible;\n  }\n\n  @action.bound\n  setLabelVisible(visible: boolean) {\n    this.isLabelVisible = visible;\n  }\n\n  @action.bound\n  setSelectedPoint(pointIndex: number) {\n    this.selectedPoint = pointIndex;\n  }\n\n  @action.bound\n  setNextEmptyPoint() {\n    let categoryScannedCount = 0;\n    let categoryIndex = this.selectedCategoryIndex >= 0 ? this.selectedCategoryIndex : 0;\n    let pointIndex = this.selectedPoint;\n    while (categoryScannedCount <= this.categories.length && this.categories.length) {\n      const { range = [] } = this.categories[categoryIndex];\n      if (this.selectedPoint !== range[1]) {\n        pointIndex += 1;\n      } else {\n        categoryIndex = categoryIndex < this.categories.length - 1 ? categoryIndex + 1 : 0;\n        categoryScannedCount += 1;\n        pointIndex = this.categories[categoryIndex].range[0] || 0;\n      }\n\n      if (this.getPoint(pointIndex) === undefined) {\n        break;\n      }\n    }\n\n    this.selectedPoint = pointIndex;\n  }\n\n  @action.bound\n  onPointsUpdated() {\n    this.updatedPoints = [];\n  }\n\n  @action.bound\n  handlePointsChange(points: { pointIndex: number; point: Point }[]) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    points.forEach(({ pointIndex, point }) => {\n      const oldPoint = toJS(this.getPoint(pointIndex));\n      const newPoint = { ...oldPoint, ...point };\n      this.setPoint(pointIndex, newPoint);\n      before.push({ type: 'point', status: { index: pointIndex, point: oldPoint } });\n      after.push({ type: 'point', status: { index: pointIndex, point: newPoint } });\n    });\n    this.saveStatus(before, after);\n  }\n\n  @action.bound\n  handlePointsRemove(points: number[]) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    points.forEach((pointIndex) => {\n      const oldPoint = toJS(this.getPoint(pointIndex));\n      this.setPoint(pointIndex);\n      before.push({ type: 'point', status: { index: pointIndex, point: oldPoint } });\n      after.push({ type: 'point', status: { index: pointIndex } });\n    });\n    this.saveStatus(before, after);\n  }\n\n  @action.bound\n  togglePointsVisibility(points: number[]) {\n    const list: { pointIndex: number; point: Point }[] = [];\n    points.forEach((pointIndex) => {\n      const point = this.getPoint(pointIndex);\n      if (point !== undefined) {\n        list.push({ pointIndex, point: { visible: !point.visible } });\n      }\n    });\n    this.handlePointsChange(list);\n  }\n\n  @action.bound\n  undo() {\n    if (this.pointer > 0) {\n      this.pointer -= 1;\n      const { before, after } = this.savedStatus[this.pointer];\n      this.updateStatus(before, after);\n    }\n  }\n\n  @action.bound\n  redo() {\n    if (this.pointer < this.savedStatus.length) {\n      const { before, after } = this.savedStatus[this.pointer];\n      this.pointer += 1;\n      this.updateStatus(after, before);\n    }\n  }\n\n  @action.bound\n  handleFiltersChange(filters: {[key: string]: number}) {\n    this.filters = filters;\n  }\n\n  @action.bound\n  setCategoryPathShape(categoryName: string, shape?: CategoryPathShape, updatedPoints?: { pointIndex: number; point: Point }[]) {\n    const before: Status[] = [{\n      type: 'category-path-shape',\n      status: { category: categoryName, shape: this.categoryPathShapes[categoryName] },\n    }];\n    const after: Status[] = [{\n      type: 'category-path-shape',\n      status: { category: categoryName, shape },\n    }];\n    if (shape) {\n      this.categoryPathShapes[categoryName] = shape;\n      if (updatedPoints) {\n        updatedPoints.forEach(({ pointIndex, point }) => {\n          const oldPoint = toJS(this.getPoint(pointIndex));\n          const newPoint = { ...oldPoint, ...point };\n          this.setPoint(pointIndex, newPoint);\n          before.push({ type: 'point', status: { index: pointIndex, point: oldPoint } });\n          after.push({ type: 'point', status: { index: pointIndex, point: newPoint } });\n        });\n      }\n    } else {\n      delete this.categoryPathShapes[categoryName];\n    }\n    this.saveStatus(before, after);\n  }\n\n  render() {\n    return (\n      <div className=\"landmark-annotation-app\">\n        <Toolbar\n          undoDisabled={this.undoDisabled}\n          redoDisabled={this.redoDisabled}\n          undo={this.undo}\n          redo={this.redo}\n          pointSize={this.pointSize}\n          setPointSize={this.setPointSize}\n          lineWidth={this.lineWidth}\n          setLineWidth={this.setLineWidth}\n          isFullScreen={this.isFullScreen}\n          setFullScreen={this.setFullScreen}\n          isGridVisible={this.isGridVisible}\n          setGridVisible={this.setGridVisible}\n          isLabelVisible={this.isLabelVisible}\n          setLabelVisible={this.setLabelVisible}\n          onFiltersChange={this.handleFiltersChange}\n          onSave={this.handleSave}\n          isPreview={isPreview(this.props.jobProxy?.toolMode)}\n        />\n        <div className=\"container\">\n          <Sidebar\n            categories={this.categories}\n            categoryPathShapes={this.categoryPathShapes}\n            points={toJS(this.points)}\n            selectedPoint={this.selectedPoint}\n            setSelectedPoint={this.setSelectedPoint}\n          />\n          <Canvas\n            ref={this.canvas}\n            image={this.props.image}\n            categories={this.categories}\n            defaultPoints={toJS(this.defaultPoints)}\n            updatedPoints={toJS(this.updatedPoints)}\n            isGridVisible={this.isGridVisible}\n            setGridVisible={this.setGridVisible}\n            isLabelVisible={this.isLabelVisible}\n            setLabelVisible={this.setLabelVisible}\n            pointSize={this.pointSize}\n            lineWidth={this.lineWidth}\n            selectedPoint={this.selectedPoint}\n            selectedPointInfo={this.selectedPointInfo}\n            setSelectedPoint={this.setSelectedPoint}\n            handlePointsChange={this.handlePointsChange}\n            handlePointsRemove={this.handlePointsRemove}\n            togglePointsVisibility={this.togglePointsVisibility}\n            setNextEmptyPoint={this.setNextEmptyPoint}\n            onPointsUpdated={this.onPointsUpdated}\n            undo={this.undo}\n            redo={this.redo}\n            onSave={this.handleSave}\n            isFullScreen={this.isFullScreen}\n            setFullScreen={this.setFullScreen}\n            filters={toJS(this.filters)}\n            dataLoading={this.loading}\n            categoryPathShapes={toJS(this.categoryPathShapes)}\n            setCategoryPathShape={this.setCategoryPathShape}\n          />\n          {this.selectedCategoryIndex >= 0 && (\n            <Information\n              category={(this.categories[this.selectedCategoryIndex] || {}).name}\n              point={this.selectedPoint}\n              count={this.selectedCategoryEmptyCount}\n              annotated={this.annotatedPointCount}\n              total={this.totalPointCount}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LandmarkAnnotation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}