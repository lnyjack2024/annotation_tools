{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\nimport { Base64 } from 'js-base64';\nimport { parseHotkeysConfig } from '../utils';\nimport { DEFAULT_MIN_AREA } from '../constants';\nimport { ViewMode, ReviewMode, LabelItem, LabelStyle, LabelFormat, ShapeInfoItem, AttributesMode, ValidationType, ProjectMode } from '../types';\nimport Cursor from '../../common/Cursor';\nimport { isReviewEditable } from '../../../utils/tool-mode';\nfunction parseLabelItemsFromStr(str) {\n  const items = [];\n  str.split(',').forEach(i => {\n    const item = i.trim();\n    if (Object.values(LabelItem).includes(item)) {\n      items.push(item);\n    }\n  });\n  return items;\n}\nfunction parseAuxiliaryLines(auxiliaryLinesString = '') {\n  const auxiliaryLines = {\n    top: [],\n    left: [],\n    bottom: [],\n    right: []\n  };\n  const sideReg = /^(top|left|bottom|right):/;\n  const valueReg = /(px|%)$/;\n  const percentageReg = /%$/;\n  const colorReg = /^#(([0-9]|[a-f]|[A-F]){3}|([0-9]|[a-f]|[A-F]){6})$/;\n  const auxiliaryLinesSides = auxiliaryLinesString.split(';');\n  for (let i = 0; i < auxiliaryLinesSides.length; i += 1) {\n    const sideMatch = auxiliaryLinesSides[i].match(sideReg);\n    if (sideMatch) {\n      const side = sideMatch[1];\n      const linesString = auxiliaryLinesSides[i].replace(`${side}:`, '');\n      const lines = linesString.split(',');\n      lines.forEach(line => {\n        const [positionString, colorString] = line.split(':');\n        const positionValue = Number(positionString.replace(valueReg, ''));\n        if (Number.isFinite(positionValue)) {\n          const positionType = percentageReg.test(positionString) ? 'percentage' : 'px';\n          const colorStr = colorReg.test(colorString) ? colorString : '#ffffff';\n          const color = parseInt(colorStr.substr(1), 16);\n          auxiliaryLines[side].push({\n            positionType,\n            positionValue,\n            color\n          });\n        }\n      });\n    }\n  }\n  return auxiliaryLines;\n}\n\n/**\n * store for config\n * @class\n */\nexport default class ConfigStore {\n  /**\n   * view scale in current camera\n   * @getter\n   */\n  get viewScale() {\n    const scale = this.viewScales[this.rootStore.frame.currentCamera];\n    return scale !== undefined ? scale : 1;\n  }\n\n  /**\n   * hotkey map for points\n   * @getter\n   */\n  get pointHotkeyMap() {\n    const map = {};\n    Object.keys(this.hotkeyMap).forEach(key => {\n      const items = this.hotkeyMap[key].filter(i => i.affected === 'point');\n      if (items.length > 0) {\n        map[key] = items;\n      }\n    });\n    return map;\n  }\n\n  /**\n   * point attributes defined in hotkeys cofig\n   * @getter\n   */\n  get pointAttributes() {\n    const keyValuesMap = {};\n    Object.values(this.hotkeyMap).forEach(items => {\n      items.forEach(({\n        affected,\n        attributes\n      }) => {\n        if (affected === 'point') {\n          Object.keys(attributes).forEach(attrKey => {\n            if (!keyValuesMap[attrKey]) {\n              keyValuesMap[attrKey] = new Set();\n            }\n            keyValuesMap[attrKey].add(attributes[attrKey]);\n          });\n        }\n      });\n    });\n    return keyValuesMap;\n  }\n\n  /**\n   * active measurement box\n   * @getter\n   */\n  get activeMeasurementBox() {\n    return (toJS(this.measurementBoxList) || [])[this.activeMeasurementBoxIndex];\n  }\n\n  /**\n   * is there any modal opened\n   * @getter\n   */\n  get isAnyModalOpened() {\n    return this.attributesModalVisible || this.movingModalVisible || this.reviewModalVisible || this.relationshipModalVisible || this.relationshipMenuVisible || this.pointAttributesModalVisible || this.frameAttributesModalVisible;\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * add mode, true means adding active\n     */\n    this.addMode = false;\n    /**\n     * continuous mode, true means and add shapes continuously\n     */\n    this.continuousMode = false;\n    /**\n     * show shape labels or not\n     */\n    this.labelMode = true;\n    /**\n     * view mode\n     */\n    this.viewMode = ViewMode.DEFAULT;\n    /**\n     * review mode\n     */\n    this.reviewMode = ReviewMode.LABELING;\n    /**\n     * current cursor\n     */\n    this.cursor = Cursor.INHERIT;\n    /**\n     * camera view scale factor\n     */\n    this.viewScales = {};\n    /**\n     * canvas view position\n     */\n    this.viewPosition = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * whether cross line visible\n     */\n    this.crossLineVisible = true;\n    /**\n     * hide other shapes\n     */\n    this.hideOthers = false;\n    /**\n     * hide all shapes\n     */\n    this.hideAll = false;\n    /**\n     * frame attributes panel visible\n     */\n    this.frameAttributesPanelVisible = true;\n    /**\n     * instance attributes panel visible\n     */\n    this.instanceAttributesPanelVisible = true;\n    /**\n     * shape attributes panel visible\n     */\n    this.shapeAttributesPanelVisible = true;\n    /**\n     * is attributes modal visible\n     */\n    this.attributesModalVisible = false;\n    /**\n     * point attributes modal visible\n     */\n    this.pointAttributesModalVisible = false;\n    /**\n     * frame attributes modal visible\n     */\n    this.frameAttributesModalVisible = false;\n    /**\n     * is moving modal visible\n     */\n    this.movingModalVisible = false;\n    /**\n     * is review modal visible\n     */\n    this.reviewModalVisible = false;\n    /**\n     * is relationship modal visible\n     */\n    this.relationshipModalVisible = false;\n    /**\n     * is relationship menu visible\n     */\n    this.relationshipMenuVisible = false;\n    /**\n     * label items\n     */\n    this.labelItems = Object.values(LabelItem);\n    /**\n     * label style\n     */\n    this.labelStyle = LabelStyle.DEFAULT;\n    /**\n     * label format\n     */\n    this.labelFormat = LabelFormat.DEFAULT;\n    /**\n     * label items for point\n     */\n    this.pointLabelItems = [LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES];\n    /**\n     * shape info items\n     */\n    this.shapeInfoItems = [];\n    /**\n     * project mode\n     */\n    this.projectMode = ProjectMode.NONE;\n    /**\n     * active attributes mode\n     */\n    this.activeAttributesMode = AttributesMode.HIDE;\n    /**\n     * active attributes mode for point\n     */\n    this.activePointAttributesMode = AttributesMode.ALWAYS;\n    /**\n     * active attributes mode for relationship\n     */\n    this.activeRelationshipsMode = AttributesMode.ALWAYS;\n    /**\n     * measurement box list\n     */\n    this.measurementBoxList = null;\n    /**\n     * auxiliary lines\n     */\n    this.auxiliaryLines = null;\n    /**\n     * active measurement box index\n     */\n    this.activeMeasurementBoxIndex = -1;\n    /**\n     * tag configuration for OCR\n     */\n    this.ocrTagGroup = null;\n    /**\n     * auto ocr\n     */\n    this.autoOCR = true;\n    /**\n     * is ocr sync turned on\n     */\n    this.OCRSyncOn = true;\n    /**\n     * should sync ocr (only auto sync when shape created)\n     */\n    this.shouldSyncOCR = false;\n    /**\n     * auto interpolation\n     */\n    this.autoInterpolation = true;\n    /**\n     * auto tracking\n     */\n    this.autoTracking = true;\n    /**\n     * image boundary check\n     */\n    this.boundaryCheck = false;\n    /**\n     * minimal shape area\n     */\n    this.minArea = DEFAULT_MIN_AREA;\n    /**\n     * view rotatable\n     */\n    this.viewRotatable = false;\n    /**\n     * shape draggable\n     */\n    this.draggable = true;\n    /**\n     * Whether the shape can be rotated\n     */\n    this.rotatable = false;\n    /**\n     * auto snap to rectangles\n     */\n    this.autoSnap = false;\n    /**\n     * validation config\n     */\n    this.validationConfig = {\n      [ValidationType.ATTR_EMPTY]: true,\n      [ValidationType.INSTANCE_ITEM_COUNT]: true,\n      [ValidationType.INVALID_SHAPE]: true\n    };\n    /**\n     * submit check\n     */\n    this.submitCheck = false;\n    /**\n     * hotkey map\n     */\n    this.hotkeyMap = {};\n    makeAutoObservable(this, {\n      rootStore: false,\n      OCRSyncOn: false,\n      shouldSyncOCR: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload) {\n    // set default review mode\n    this.reviewMode = isReviewEditable(payload.jobProxy.toolMode) ? ReviewMode.REVIEW : ReviewMode.LABELING;\n\n    // parse label mode\n    if (Object.values(ProjectMode).includes(payload.project_mode)) {\n      this.projectMode = payload.project_mode;\n    }\n\n    // parse label mode\n    if (Object.values(AttributesMode).includes(payload.label_mode)) {\n      this.activeAttributesMode = payload.label_mode;\n    }\n    // parse point label mode\n    if (Object.values(AttributesMode).includes(payload.point_label_mode)) {\n      this.activePointAttributesMode = payload.point_label_mode;\n    }\n    // parse relationship label mode\n    if (Object.values(AttributesMode).includes(payload.relationship_mode)) {\n      this.activeRelationshipsMode = payload.relationship_mode;\n    }\n    // parse label style\n    if (Object.values(LabelStyle).includes(payload.label_style)) {\n      this.labelStyle = payload.label_style;\n    }\n    // parse label format\n    if (Object.values(LabelFormat).includes(payload.label_format)) {\n      this.labelFormat = payload.label_format;\n    }\n    // parse label items\n    if (typeof payload.label_item === 'string' && payload.label_item) {\n      this.labelItems = parseLabelItemsFromStr(payload.label_item);\n    }\n    // parse point label items\n    if (typeof payload.point_label_item === 'string' && payload.point_label_item) {\n      this.pointLabelItems = parseLabelItemsFromStr(payload.point_label_item);\n    }\n    // parse shape info items\n    if (typeof payload.shape_info_item === 'string' && payload.shape_info_item) {\n      const items = [];\n      payload.shape_info_item.split(',').forEach(i => {\n        const item = i.trim();\n        if (Object.values(ShapeInfoItem).includes(item)) {\n          items.push(item);\n        }\n      });\n      this.shapeInfoItems = items;\n    }\n\n    // parse measurement box list\n    if (typeof payload.measurement_box === 'string' && payload.measurement_box) {\n      try {\n        const list = JSON.parse(payload.measurement_box);\n        if (Array.isArray(list) && list.every(i => i.length === 2 && typeof i[0] === 'number' && typeof i[1] === 'number')) {\n          this.measurementBoxList = list;\n        }\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse auxiliary lines\n    const auxiliaryLines = parseAuxiliaryLines(payload.auxiliary_lines);\n    if (Object.values(auxiliaryLines).flat().length > 0) {\n      // has config\n      this.auxiliaryLines = auxiliaryLines;\n    }\n\n    // parse ocr tag group\n    if (typeof payload.ocr_tag_group === 'string' && payload.ocr_tag_group) {\n      try {\n        this.ocrTagGroup = JSON.parse(Base64.decode(payload.ocr_tag_group));\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse auto ocr\n    this.autoOCR = payload.auto_ocr !== 'false' && payload.auto_ocr !== false;\n\n    // parse auto interpolation\n    this.autoInterpolation = payload.auto_interpolation !== 'false' && payload.auto_interpolation !== false;\n\n    // parse auto tracking\n    this.autoTracking = payload.auto_tracking !== 'false' && payload.auto_tracking !== false;\n    if (!this.autoTracking) {\n      // always not interpolate when not tracking\n      this.autoInterpolation = false;\n    }\n\n    // parse boundary check\n    this.boundaryCheck = payload.boundary_check === 'true' || payload.boundary_check === true;\n    if (this.boundaryCheck) {\n      this.validationConfig[ValidationType.OUT_OF_BOUNDARY] = true;\n    }\n\n    // parse min area\n    if (payload.min_area !== undefined) {\n      const minArea = Number(payload.min_area);\n      if (!Number.isNaN(minArea) && minArea >= 0) {\n        this.minArea = minArea;\n      }\n    }\n\n    // parse view rotatable\n    this.viewRotatable = payload.view_rotatable === 'true' || payload.view_rotatable === true;\n\n    // parse draggable\n    this.draggable = payload.draggable !== 'false' && payload.draggable !== false;\n\n    // parse rotatable\n    this.rotatable = payload.rotatable === 'true' || payload.rotatable === true;\n\n    // parse auto snap\n    this.autoSnap = payload.auto_snap === 'true' || payload.auto_snap === true;\n\n    // parse custom check\n    if (typeof payload.custom_check === 'string' && payload.custom_check) {\n      const scriptIds = payload.custom_check.split(',').map(i => i.trim()).filter(i => !!i);\n      if (scriptIds.length > 0) {\n        this.validationConfig[ValidationType.CUSTOM] = scriptIds;\n      }\n    }\n    // parse submit check config\n    this.submitCheck = payload.submit_check === 'true' || payload.submit_check === true;\n\n    // parse empty area check\n    if (payload.empty_area_check === 'true' || payload.empty_area_check === true) {\n      this.validationConfig[ValidationType.EMPTY_AREA] = true;\n    }\n\n    // parse fully covered check\n    if (payload.fully_covered_check === 'true' || payload.fully_covered_check === true) {\n      this.validationConfig[ValidationType.FULLY_COVERED] = true;\n    }\n\n    // parse frame valid annotate check\n    if (payload.frame_valid_annotate_check === 'true' || payload.frame_valid_annotate_check === true) {\n      this.validationConfig[ValidationType.FRAME_VALID_ANNOTATE] = true;\n    }\n\n    // parse hotkeys\n    if (payload.hotkeys && !this.rootStore.ontology.pointLabelConfigEnabled) {\n      try {\n        const config = JSON.parse(Base64.decode(payload.hotkeys));\n        this.hotkeyMap = parseHotkeysConfig(config);\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // shape label visibility\n    this.labelMode = payload.shape_label_visibility !== 'false' && payload.shape_label_visibility !== false;\n  }\n\n  /**\n   * set add mode\n   * @param addMode\n   */\n  setAddMode(addMode) {\n    if (this.rootStore.readonly || this.isAnyModalOpened || !this.rootStore.ontology.selectedCategory) {\n      return;\n    }\n    this.addMode = addMode;\n    // change cursor\n    this.cursor = addMode ? Cursor.CROSSHAIR : Cursor.DEFAULT;\n    // cancel shape working status\n    this.rootStore.cancelShapeWorking();\n    // change other shapes interactive\n    if (this.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateShapesInteractive(!addMode);\n    } else {\n      this.rootStore.grid.updateShapesInteractive(!addMode);\n    }\n    // change connections interactive\n    this.rootStore.relationship.updateConnectionsInteractive(!addMode);\n    // remove drawing shape if needed\n    if (!addMode && this.rootStore.shape.drawingShape) {\n      this.rootStore.shape.drawingShape.destroy();\n      this.rootStore.shape.drawingShape = null;\n    }\n    // reset recognition\n    this.rootStore.shape.resetRecognition();\n    // hide or show predict shape\n    if (addMode) {\n      this.rootStore.shape.clearPredictedShapes();\n      this.setHideAll(false);\n    } else {\n      this.rootStore.shape.predict();\n    }\n  }\n  /**\n   * set label mode\n   * @param labelMode\n   */\n  setLabelMode(labelMode) {\n    if (this.labelMode !== labelMode) {\n      this.labelMode = labelMode;\n      setTimeout(() => {\n        if (labelMode) {\n          this.rootStore.relationship.setupConnections();\n        } else {\n          this.rootStore.relationship.clearConnections();\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * set view mode\n   * @param viewMode\n   */\n  setViewMode(viewMode) {\n    if (!this.rootStore.initialized) {\n      return;\n    }\n    if (this.viewMode !== viewMode) {\n      this.viewMode = viewMode;\n      if (viewMode === ViewMode.DEFAULT) {\n        // reset camera\n        const {\n          currentCameraView,\n          updateCameraLayers\n        } = this.rootStore.frame;\n        if (currentCameraView) {\n          updateCameraLayers(currentCameraView);\n        }\n      } else if (viewMode === ViewMode.GRID) {\n        // clear shapes in canvas\n        // this.rootStore.shape.clearShapes();\n      }\n    }\n  }\n\n  /**\n   * set review mode\n   * @param reviewMode\n   */\n  setReviewMode(reviewMode) {\n    if (this.reviewMode !== reviewMode) {\n      this.setAddMode(false);\n      this.reviewMode = reviewMode;\n      this.rootStore.review.unselectReview();\n      this.rootStore.shape.updateShapesEditable(reviewMode === ReviewMode.LABELING);\n      this.rootStore.relationship.updateConnectionsInteractive(reviewMode === ReviewMode.LABELING);\n    }\n  }\n\n  /**\n    * set view scale\n    * @param viewScale\n    * @param camera\n    */\n  setViewScale(viewScale, camera = this.rootStore.frame.currentCamera) {\n    this.viewScales[camera] = viewScale;\n    this.rootStore.review.updateAnchorsScale(viewScale, camera);\n  }\n\n  /**\n   * set view position\n   * @param position\n   */\n  setViewPosition(position) {\n    this.viewPosition = {\n      ...position\n    };\n    this.rootStore.shape.redrawShapesLabel();\n  }\n\n  /**\n   * set cross line visible\n   * @param visible\n   */\n  setCrossLineVisible(visible) {\n    this.crossLineVisible = visible;\n  }\n\n  /**\n   * set continuous mode\n   * @param continuousMode\n   */\n  setContinuousMode(continuousMode) {\n    this.continuousMode = continuousMode;\n  }\n\n  /**\n   * set hide others\n   * @param hideOthers\n   */\n  setHideOthers(hideOthers) {\n    this.hideOthers = hideOthers;\n    this.rootStore.shape.hideOrShowOthers();\n  }\n\n  /**\n   * set hide all\n   * @param hideAll\n   */\n  setHideAll(hideAll) {\n    this.hideAll = hideAll;\n    this.rootStore.shape.hideOrShowOthers();\n  }\n\n  /**\n   * set frame attributes panel visibility\n   * @param visible\n   */\n  setFrameAttributesPanelVisible(visible) {\n    this.frameAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set instance attributes panel visibility\n   * @param visible\n   */\n  setInstanceAttributesPanelVisible(visible) {\n    this.instanceAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set shape attributes panel visibility\n   * @param visible\n   */\n  setShapeAttributesPanelVisible(visible) {\n    this.shapeAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set attributes modal visibility\n   * @param visible\n   */\n  setAttributesModalVisible(visible) {\n    this.attributesModalVisible = visible;\n  }\n\n  /**\n   * set moving modal visibility\n   * @param visible\n   */\n  setMovingModalVisible(visible) {\n    this.movingModalVisible = visible;\n  }\n\n  /**\n   * set review modal visibility\n   * @param visible\n   */\n  setReviewModalVisible(visible) {\n    this.reviewModalVisible = visible;\n  }\n\n  /**\n   * set relationship modal visibility\n   * @param visible\n   */\n  setRelationshipModalVisible(visible) {\n    this.relationshipModalVisible = visible;\n  }\n\n  /**\n   * set relationship menu visibility\n   * @param visible\n   */\n  setRelationshipMenuVisible(visible) {\n    this.relationshipMenuVisible = visible;\n  }\n\n  /**\n   * set point attributes modal visibility\n   * @param visible\n   */\n  setPointAttributesModalVisible(visible) {\n    this.pointAttributesModalVisible = visible;\n  }\n\n  /**\n   * set frame attributes modal visibility\n   * @param visible\n   */\n  setFrameAttributesModalVisible(visible) {\n    this.frameAttributesModalVisible = visible;\n  }\n\n  /**\n   * set active attributes mode\n   * @param activeMode\n   * @param type point or shape\n   */\n  setAttributesMode(activeMode, type = 'shape') {\n    if (type === 'point') {\n      this.activePointAttributesMode = activeMode;\n      this.rootStore.shape.updateShapesUserDataMode(activeMode);\n    } else if (type === 'shape') {\n      this.activeAttributesMode = activeMode;\n    } else if (type === 'relationship') {\n      this.activeRelationshipsMode = activeMode;\n      this.rootStore.relationship.updateConnectionsVisible(activeMode === AttributesMode.ALWAYS);\n    }\n  }\n\n  /**\n   * set measurement box indexs\n   * @param index\n   */\n  setMeasurementBoxIndex(index) {\n    this.activeMeasurementBoxIndex = index;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","toJS","Base64","parseHotkeysConfig","DEFAULT_MIN_AREA","ViewMode","ReviewMode","LabelItem","LabelStyle","LabelFormat","ShapeInfoItem","AttributesMode","ValidationType","ProjectMode","Cursor","isReviewEditable","parseLabelItemsFromStr","str","items","split","forEach","i","item","trim","Object","values","includes","push","parseAuxiliaryLines","auxiliaryLinesString","auxiliaryLines","top","left","bottom","right","sideReg","valueReg","percentageReg","colorReg","auxiliaryLinesSides","length","sideMatch","match","side","linesString","replace","lines","line","positionString","colorString","positionValue","Number","isFinite","positionType","test","colorStr","color","parseInt","substr","ConfigStore","viewScale","scale","viewScales","rootStore","frame","currentCamera","undefined","pointHotkeyMap","map","keys","hotkeyMap","key","filter","affected","pointAttributes","keyValuesMap","attributes","attrKey","Set","add","activeMeasurementBox","measurementBoxList","activeMeasurementBoxIndex","isAnyModalOpened","attributesModalVisible","movingModalVisible","reviewModalVisible","relationshipModalVisible","relationshipMenuVisible","pointAttributesModalVisible","frameAttributesModalVisible","constructor","addMode","continuousMode","labelMode","viewMode","DEFAULT","reviewMode","LABELING","cursor","INHERIT","viewPosition","x","y","crossLineVisible","hideOthers","hideAll","frameAttributesPanelVisible","instanceAttributesPanelVisible","shapeAttributesPanelVisible","labelItems","labelStyle","labelFormat","pointLabelItems","ATTRIBUTE_KEYS","ATTRIBUTE_VALUES","shapeInfoItems","projectMode","NONE","activeAttributesMode","HIDE","activePointAttributesMode","ALWAYS","activeRelationshipsMode","ocrTagGroup","autoOCR","OCRSyncOn","shouldSyncOCR","autoInterpolation","autoTracking","boundaryCheck","minArea","viewRotatable","draggable","rotatable","autoSnap","validationConfig","ATTR_EMPTY","INSTANCE_ITEM_COUNT","INVALID_SHAPE","submitCheck","autoBind","init","payload","jobProxy","toolMode","REVIEW","project_mode","label_mode","point_label_mode","relationship_mode","label_style","label_format","label_item","point_label_item","shape_info_item","measurement_box","list","JSON","parse","Array","isArray","every","e","auxiliary_lines","flat","ocr_tag_group","decode","auto_ocr","auto_interpolation","auto_tracking","boundary_check","OUT_OF_BOUNDARY","min_area","isNaN","view_rotatable","auto_snap","custom_check","scriptIds","CUSTOM","submit_check","empty_area_check","EMPTY_AREA","fully_covered_check","FULLY_COVERED","frame_valid_annotate_check","FRAME_VALID_ANNOTATE","hotkeys","ontology","pointLabelConfigEnabled","config","shape_label_visibility","setAddMode","readonly","selectedCategory","CROSSHAIR","cancelShapeWorking","shape","updateShapesInteractive","grid","relationship","updateConnectionsInteractive","drawingShape","destroy","resetRecognition","clearPredictedShapes","setHideAll","predict","setLabelMode","setTimeout","setupConnections","clearConnections","setViewMode","initialized","currentCameraView","updateCameraLayers","GRID","setReviewMode","review","unselectReview","updateShapesEditable","setViewScale","camera","updateAnchorsScale","setViewPosition","position","redrawShapesLabel","setCrossLineVisible","visible","setContinuousMode","setHideOthers","hideOrShowOthers","setFrameAttributesPanelVisible","setInstanceAttributesPanelVisible","setShapeAttributesPanelVisible","setAttributesModalVisible","setMovingModalVisible","setReviewModalVisible","setRelationshipModalVisible","setRelationshipMenuVisible","setPointAttributesModalVisible","setFrameAttributesModalVisible","setAttributesMode","activeMode","type","updateShapesUserDataMode","updateConnectionsVisible","setMeasurementBoxIndex","index"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/ConfigStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport { Base64 } from 'js-base64';\nimport RootStore from './RootStore';\nimport { parseHotkeysConfig } from '../utils';\nimport { DEFAULT_MIN_AREA } from '../constants';\nimport { Payload, ViewMode, ReviewMode, LabelItem, LabelStyle, LabelFormat, ShapeInfoItem, AttributesMode, TagGroupProps, ValidationType, HotkeyItem, AuxiliaryLines, ProjectMode } from '../types';\nimport Cursor from '../../common/Cursor';\nimport { UserDataMode } from '../../common/shapes/Shape';\nimport { isReviewEditable } from '../../../utils/tool-mode';\n\nfunction parseLabelItemsFromStr(str: string) {\n  const items: LabelItem[] = [];\n  str.split(',').forEach((i) => {\n    const item = i.trim() as LabelItem;\n    if (Object.values(LabelItem).includes(item)) {\n      items.push(item);\n    }\n  });\n  return items;\n}\n\nfunction parseAuxiliaryLines(auxiliaryLinesString = '') {\n  const auxiliaryLines: AuxiliaryLines = { top: [], left: [], bottom: [], right: [] };\n\n  const sideReg = /^(top|left|bottom|right):/;\n  const valueReg = /(px|%)$/;\n  const percentageReg = /%$/;\n  const colorReg = /^#(([0-9]|[a-f]|[A-F]){3}|([0-9]|[a-f]|[A-F]){6})$/;\n\n  const auxiliaryLinesSides = auxiliaryLinesString.split(';');\n  for (let i = 0; i < auxiliaryLinesSides.length; i += 1) {\n    const sideMatch = auxiliaryLinesSides[i].match(sideReg);\n    if (sideMatch) {\n      const side = sideMatch[1] as ('top' | 'left' | 'bottom' | 'right');\n      const linesString = auxiliaryLinesSides[i].replace(`${side}:`, '');\n      const lines = linesString.split(',');\n      lines.forEach((line) => {\n        const [positionString, colorString] = line.split(':');\n        const positionValue = Number(positionString.replace(valueReg, ''));\n        if (Number.isFinite(positionValue)) {\n          const positionType = percentageReg.test(positionString) ? 'percentage' : 'px';\n          const colorStr = colorReg.test(colorString) ? colorString : '#ffffff';\n          const color = parseInt(colorStr.substr(1), 16);\n          auxiliaryLines[side].push({\n            positionType, positionValue, color,\n          });\n        }\n      });\n    }\n  }\n\n  return auxiliaryLines;\n}\n\n/**\n * store for config\n * @class\n */\nexport default class ConfigStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * add mode, true means adding active\n   */\n  addMode = false;\n\n  /**\n   * continuous mode, true means and add shapes continuously\n   */\n  continuousMode = false;\n\n  /**\n   * show shape labels or not\n   */\n  labelMode = true;\n\n  /**\n   * view mode\n   */\n  viewMode = ViewMode.DEFAULT;\n\n  /**\n   * review mode\n   */\n  reviewMode = ReviewMode.LABELING;\n\n  /**\n   * current cursor\n   */\n  cursor = Cursor.INHERIT;\n\n  /**\n   * camera view scale factor\n   */\n  viewScales: Record<string, number> = {};\n\n  /**\n   * canvas view position\n   */\n  viewPosition = { x: 0, y: 0 };\n\n  /**\n   * whether cross line visible\n   */\n  crossLineVisible = true;\n\n  /**\n   * hide other shapes\n   */\n  hideOthers = false;\n\n  /**\n   * hide all shapes\n   */\n  hideAll = false;\n\n  /**\n   * frame attributes panel visible\n   */\n  frameAttributesPanelVisible = true;\n\n  /**\n   * instance attributes panel visible\n   */\n  instanceAttributesPanelVisible = true;\n\n  /**\n   * shape attributes panel visible\n   */\n  shapeAttributesPanelVisible = true;\n\n  /**\n   * is attributes modal visible\n   */\n  attributesModalVisible = false;\n\n  /**\n   * point attributes modal visible\n   */\n  pointAttributesModalVisible = false;\n\n  /**\n   * frame attributes modal visible\n   */\n  frameAttributesModalVisible = false;\n\n  /**\n   * is moving modal visible\n   */\n  movingModalVisible = false;\n\n  /**\n   * is review modal visible\n   */\n  reviewModalVisible = false;\n\n  /**\n   * is relationship modal visible\n   */\n  relationshipModalVisible = false;\n\n  /**\n   * is relationship menu visible\n   */\n  relationshipMenuVisible = false;\n\n  /**\n   * label items\n   */\n  labelItems = Object.values(LabelItem);\n\n  /**\n   * label style\n   */\n  labelStyle = LabelStyle.DEFAULT;\n\n  /**\n   * label format\n   */\n  labelFormat = LabelFormat.DEFAULT;\n\n  /**\n   * label items for point\n   */\n  pointLabelItems = [LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES];\n\n  /**\n   * shape info items\n   */\n  shapeInfoItems: ShapeInfoItem[] = [];\n\n  /**\n   * project mode\n   */\n  projectMode = ProjectMode.NONE;\n\n  /**\n   * active attributes mode\n   */\n  activeAttributesMode = AttributesMode.HIDE;\n\n  /**\n   * active attributes mode for point\n   */\n  activePointAttributesMode = AttributesMode.ALWAYS;\n\n  /**\n   * active attributes mode for relationship\n   */\n  activeRelationshipsMode = AttributesMode.ALWAYS;\n\n  /**\n   * measurement box list\n   */\n  measurementBoxList: number[][] | null = null;\n\n  /**\n   * auxiliary lines\n   */\n  auxiliaryLines: AuxiliaryLines | null = null;\n\n  /**\n   * active measurement box index\n   */\n  activeMeasurementBoxIndex = -1;\n\n  /**\n   * tag configuration for OCR\n   */\n  ocrTagGroup: TagGroupProps[] | null = null;\n\n  /**\n   * auto ocr\n   */\n  autoOCR = true;\n\n  /**\n   * is ocr sync turned on\n   */\n  OCRSyncOn = true;\n\n  /**\n   * should sync ocr (only auto sync when shape created)\n   */\n  shouldSyncOCR = false;\n\n  /**\n   * auto interpolation\n   */\n  autoInterpolation = true;\n\n  /**\n   * auto tracking\n   */\n  autoTracking = true;\n\n  /**\n   * image boundary check\n   */\n  boundaryCheck = false;\n\n  /**\n   * minimal shape area\n   */\n  minArea = DEFAULT_MIN_AREA;\n\n  /**\n   * view rotatable\n   */\n  viewRotatable = false;\n\n  /**\n   * shape draggable\n   */\n  draggable = true;\n\n  /**\n   * Whether the shape can be rotated\n   */\n  rotatable = false;\n\n  /**\n   * auto snap to rectangles\n   */\n  autoSnap = false;\n\n  /**\n   * validation config\n   */\n  validationConfig: {\n    [type in ValidationType]?: boolean | string[];\n  } = {\n    [ValidationType.ATTR_EMPTY]: true,\n    [ValidationType.INSTANCE_ITEM_COUNT]: true,\n    [ValidationType.INVALID_SHAPE]: true,\n  };\n\n  /**\n   * submit check\n   */\n  submitCheck = false;\n\n  /**\n   * hotkey map\n   */\n  hotkeyMap: {[key: string]: HotkeyItem[]} = {};\n\n  /**\n   * view scale in current camera\n   * @getter\n   */\n  get viewScale() {\n    const scale = this.viewScales[this.rootStore.frame.currentCamera];\n    return scale !== undefined ? scale : 1;\n  }\n\n  /**\n   * hotkey map for points\n   * @getter\n   */\n  get pointHotkeyMap() {\n    const map: {[key: string]: HotkeyItem[]} = {};\n    Object.keys(this.hotkeyMap).forEach((key) => {\n      const items = this.hotkeyMap[key].filter((i) => i.affected === 'point');\n      if (items.length > 0) {\n        map[key] = items;\n      }\n    });\n    return map;\n  }\n\n  /**\n   * point attributes defined in hotkeys cofig\n   * @getter\n   */\n  get pointAttributes() {\n    const keyValuesMap: { [key: string]: Set<any> } = {};\n    Object.values(this.hotkeyMap).forEach((items) => {\n      items.forEach(({ affected, attributes }) => {\n        if (affected === 'point') {\n          Object.keys(attributes).forEach((attrKey) => {\n            if (!keyValuesMap[attrKey]) {\n              keyValuesMap[attrKey] = new Set();\n            }\n            keyValuesMap[attrKey].add(attributes[attrKey]);\n          });\n        }\n      });\n    });\n    return keyValuesMap;\n  }\n\n  /**\n   * active measurement box\n   * @getter\n   */\n  get activeMeasurementBox() {\n    return (toJS(this.measurementBoxList) || [])[this.activeMeasurementBoxIndex];\n  }\n\n  /**\n   * is there any modal opened\n   * @getter\n   */\n  get isAnyModalOpened() {\n    return this.attributesModalVisible\n      || this.movingModalVisible\n      || this.reviewModalVisible\n      || this.relationshipModalVisible\n      || this.relationshipMenuVisible\n      || this.pointAttributesModalVisible\n      || this.frameAttributesModalVisible;\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      OCRSyncOn: false,\n      shouldSyncOCR: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload: Payload) {\n    // set default review mode\n    this.reviewMode = isReviewEditable(payload.jobProxy.toolMode) ? ReviewMode.REVIEW : ReviewMode.LABELING;\n\n    // parse label mode\n    if (Object.values(ProjectMode).includes(payload.project_mode as ProjectMode)) {\n      this.projectMode = payload.project_mode as ProjectMode;\n    }\n\n    // parse label mode\n    if (Object.values(AttributesMode).includes(payload.label_mode as AttributesMode)) {\n      this.activeAttributesMode = payload.label_mode as AttributesMode;\n    }\n    // parse point label mode\n    if (Object.values(AttributesMode).includes(payload.point_label_mode as AttributesMode)) {\n      this.activePointAttributesMode = payload.point_label_mode as AttributesMode;\n    }\n    // parse relationship label mode\n    if (Object.values(AttributesMode).includes(payload.relationship_mode as AttributesMode)) {\n      this.activeRelationshipsMode = payload.relationship_mode as AttributesMode;\n    }\n    // parse label style\n    if (Object.values(LabelStyle).includes(payload.label_style as LabelStyle)) {\n      this.labelStyle = payload.label_style as LabelStyle;\n    }\n    // parse label format\n    if (Object.values(LabelFormat).includes(payload.label_format as LabelFormat)) {\n      this.labelFormat = payload.label_format as LabelFormat;\n    }\n    // parse label items\n    if (typeof payload.label_item === 'string' && payload.label_item) {\n      this.labelItems = parseLabelItemsFromStr(payload.label_item);\n    }\n    // parse point label items\n    if (typeof payload.point_label_item === 'string' && payload.point_label_item) {\n      this.pointLabelItems = parseLabelItemsFromStr(payload.point_label_item);\n    }\n    // parse shape info items\n    if (typeof payload.shape_info_item === 'string' && payload.shape_info_item) {\n      const items: ShapeInfoItem[] = [];\n      payload.shape_info_item.split(',').forEach((i) => {\n        const item = i.trim() as ShapeInfoItem;\n        if (Object.values(ShapeInfoItem).includes(item)) {\n          items.push(item);\n        }\n      });\n      this.shapeInfoItems = items;\n    }\n\n    // parse measurement box list\n    if (typeof payload.measurement_box === 'string' && payload.measurement_box) {\n      try {\n        const list = JSON.parse(payload.measurement_box);\n        if (Array.isArray(list) && list.every((i) => i.length === 2 && typeof i[0] === 'number' && typeof i[1] === 'number')) {\n          this.measurementBoxList = list;\n        }\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse auxiliary lines\n    const auxiliaryLines = parseAuxiliaryLines(payload.auxiliary_lines);\n    if (Object.values(auxiliaryLines).flat().length > 0) {\n      // has config\n      this.auxiliaryLines = auxiliaryLines;\n    }\n\n    // parse ocr tag group\n    if (typeof payload.ocr_tag_group === 'string' && payload.ocr_tag_group) {\n      try {\n        this.ocrTagGroup = JSON.parse(Base64.decode(payload.ocr_tag_group));\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse auto ocr\n    this.autoOCR = payload.auto_ocr !== 'false' && payload.auto_ocr !== false;\n\n    // parse auto interpolation\n    this.autoInterpolation = payload.auto_interpolation !== 'false' && payload.auto_interpolation !== false;\n\n    // parse auto tracking\n    this.autoTracking = payload.auto_tracking !== 'false' && payload.auto_tracking !== false;\n    if (!this.autoTracking) {\n      // always not interpolate when not tracking\n      this.autoInterpolation = false;\n    }\n\n    // parse boundary check\n    this.boundaryCheck = payload.boundary_check === 'true' || payload.boundary_check === true;\n    if (this.boundaryCheck) {\n      this.validationConfig[ValidationType.OUT_OF_BOUNDARY] = true;\n    }\n\n    // parse min area\n    if (payload.min_area !== undefined) {\n      const minArea = Number(payload.min_area);\n      if (!Number.isNaN(minArea) && minArea >= 0) {\n        this.minArea = minArea;\n      }\n    }\n\n    // parse view rotatable\n    this.viewRotatable = payload.view_rotatable === 'true' || payload.view_rotatable === true;\n\n    // parse draggable\n    this.draggable = payload.draggable !== 'false' && payload.draggable !== false;\n\n    // parse rotatable\n    this.rotatable = payload.rotatable === 'true' || payload.rotatable === true;\n\n    // parse auto snap\n    this.autoSnap = payload.auto_snap === 'true' || payload.auto_snap === true;\n\n    // parse custom check\n    if (typeof payload.custom_check === 'string' && payload.custom_check) {\n      const scriptIds = payload.custom_check.split(',').map((i) => i.trim()).filter((i) => !!i);\n      if (scriptIds.length > 0) {\n        this.validationConfig[ValidationType.CUSTOM] = scriptIds;\n      }\n    }\n    // parse submit check config\n    this.submitCheck = payload.submit_check === 'true' || payload.submit_check === true;\n\n    // parse empty area check\n    if (payload.empty_area_check === 'true' || payload.empty_area_check === true) {\n      this.validationConfig[ValidationType.EMPTY_AREA] = true;\n    }\n\n    // parse fully covered check\n    if (payload.fully_covered_check === 'true' || payload.fully_covered_check === true) {\n      this.validationConfig[ValidationType.FULLY_COVERED] = true;\n    }\n\n    // parse frame valid annotate check\n    if (payload.frame_valid_annotate_check === 'true' || payload.frame_valid_annotate_check === true) {\n      this.validationConfig[ValidationType.FRAME_VALID_ANNOTATE] = true;\n    }\n\n    // parse hotkeys\n    if (payload.hotkeys && !this.rootStore.ontology.pointLabelConfigEnabled) {\n      try {\n        const config = JSON.parse(Base64.decode(payload.hotkeys));\n        this.hotkeyMap = parseHotkeysConfig(config);\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // shape label visibility\n    this.labelMode = payload.shape_label_visibility !== 'false' && payload.shape_label_visibility !== false;\n  }\n\n  /**\n   * set add mode\n   * @param addMode\n   */\n  setAddMode(addMode: boolean) {\n    if (this.rootStore.readonly || this.isAnyModalOpened || !this.rootStore.ontology.selectedCategory) {\n      return;\n    }\n\n    this.addMode = addMode;\n    // change cursor\n    this.cursor = addMode ? Cursor.CROSSHAIR : Cursor.DEFAULT;\n    // cancel shape working status\n    this.rootStore.cancelShapeWorking();\n    // change other shapes interactive\n    if (this.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateShapesInteractive(!addMode);\n    } else {\n      this.rootStore.grid.updateShapesInteractive(!addMode);\n    }\n    // change connections interactive\n    this.rootStore.relationship.updateConnectionsInteractive(!addMode);\n    // remove drawing shape if needed\n    if (!addMode && this.rootStore.shape.drawingShape) {\n      this.rootStore.shape.drawingShape.destroy();\n      this.rootStore.shape.drawingShape = null;\n    }\n    // reset recognition\n    this.rootStore.shape.resetRecognition();\n    // hide or show predict shape\n    if (addMode) {\n      this.rootStore.shape.clearPredictedShapes();\n      this.setHideAll(false);\n    } else {\n      this.rootStore.shape.predict();\n    }\n  };\n\n  /**\n   * set label mode\n   * @param labelMode\n   */\n  setLabelMode(labelMode: boolean) {\n    if (this.labelMode !== labelMode) {\n      this.labelMode = labelMode;\n      setTimeout(() => {\n        if (labelMode) {\n          this.rootStore.relationship.setupConnections();\n        } else {\n          this.rootStore.relationship.clearConnections();\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * set view mode\n   * @param viewMode\n   */\n  setViewMode(viewMode: ViewMode) {\n    if (!this.rootStore.initialized) {\n      return;\n    }\n    if (this.viewMode !== viewMode) {\n      this.viewMode = viewMode;\n      if (viewMode === ViewMode.DEFAULT) {\n        // reset camera\n        const { currentCameraView, updateCameraLayers } = this.rootStore.frame;\n        if (currentCameraView) {\n          updateCameraLayers(currentCameraView);\n        }\n      } else if (viewMode === ViewMode.GRID) {\n        // clear shapes in canvas\n        // this.rootStore.shape.clearShapes();\n      }\n    }\n  }\n\n  /**\n   * set review mode\n   * @param reviewMode\n   */\n  setReviewMode(reviewMode: ReviewMode) {\n    if (this.reviewMode !== reviewMode) {\n      this.setAddMode(false);\n      this.reviewMode = reviewMode;\n      this.rootStore.review.unselectReview();\n      this.rootStore.shape.updateShapesEditable(reviewMode === ReviewMode.LABELING);\n      this.rootStore.relationship.updateConnectionsInteractive(reviewMode === ReviewMode.LABELING);\n    }\n  }\n\n  /**\n    * set view scale\n    * @param viewScale\n    * @param camera\n    */\n  setViewScale(viewScale: number, camera = this.rootStore.frame.currentCamera) {\n    this.viewScales[camera] = viewScale;\n    this.rootStore.review.updateAnchorsScale(viewScale, camera);\n  }\n\n  /**\n   * set view position\n   * @param position\n   */\n  setViewPosition(position: { x: number; y: number }) {\n    this.viewPosition = { ...position };\n    this.rootStore.shape.redrawShapesLabel();\n  }\n\n  /**\n   * set cross line visible\n   * @param visible\n   */\n  setCrossLineVisible(visible: boolean) {\n    this.crossLineVisible = visible;\n  }\n\n  /**\n   * set continuous mode\n   * @param continuousMode\n   */\n  setContinuousMode(continuousMode: boolean) {\n    this.continuousMode = continuousMode;\n  }\n\n  /**\n   * set hide others\n   * @param hideOthers\n   */\n  setHideOthers(hideOthers: boolean) {\n    this.hideOthers = hideOthers;\n    this.rootStore.shape.hideOrShowOthers();\n  }\n\n  /**\n   * set hide all\n   * @param hideAll\n   */\n  setHideAll(hideAll: boolean) {\n    this.hideAll = hideAll;\n    this.rootStore.shape.hideOrShowOthers();\n  }\n\n  /**\n   * set frame attributes panel visibility\n   * @param visible\n   */\n  setFrameAttributesPanelVisible(visible: boolean) {\n    this.frameAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set instance attributes panel visibility\n   * @param visible\n   */\n  setInstanceAttributesPanelVisible(visible: boolean) {\n    this.instanceAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set shape attributes panel visibility\n   * @param visible\n   */\n  setShapeAttributesPanelVisible(visible: boolean) {\n    this.shapeAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set attributes modal visibility\n   * @param visible\n   */\n  setAttributesModalVisible(visible: boolean) {\n    this.attributesModalVisible = visible;\n  }\n\n  /**\n   * set moving modal visibility\n   * @param visible\n   */\n  setMovingModalVisible(visible: boolean) {\n    this.movingModalVisible = visible;\n  }\n\n  /**\n   * set review modal visibility\n   * @param visible\n   */\n  setReviewModalVisible(visible: boolean) {\n    this.reviewModalVisible = visible;\n  }\n\n  /**\n   * set relationship modal visibility\n   * @param visible\n   */\n  setRelationshipModalVisible(visible: boolean) {\n    this.relationshipModalVisible = visible;\n  }\n\n  /**\n   * set relationship menu visibility\n   * @param visible\n   */\n  setRelationshipMenuVisible(visible: boolean) {\n    this.relationshipMenuVisible = visible;\n  }\n\n  /**\n   * set point attributes modal visibility\n   * @param visible\n   */\n  setPointAttributesModalVisible(visible: boolean) {\n    this.pointAttributesModalVisible = visible;\n  }\n\n  /**\n   * set frame attributes modal visibility\n   * @param visible\n   */\n  setFrameAttributesModalVisible(visible: boolean) {\n    this.frameAttributesModalVisible = visible;\n  }\n\n  /**\n   * set active attributes mode\n   * @param activeMode\n   * @param type point or shape\n   */\n  setAttributesMode(activeMode: AttributesMode, type = 'shape') {\n    if (type === 'point') {\n      this.activePointAttributesMode = activeMode;\n      this.rootStore.shape.updateShapesUserDataMode(activeMode as unknown as UserDataMode);\n    } else if (type === 'shape') {\n      this.activeAttributesMode = activeMode;\n    } else if (type === 'relationship') {\n      this.activeRelationshipsMode = activeMode;\n      this.rootStore.relationship.updateConnectionsVisible(activeMode === AttributesMode.ALWAYS);\n    }\n  }\n\n  /**\n   * set measurement box indexs\n   * @param index\n   */\n  setMeasurementBoxIndex(index: number) {\n    this.activeMeasurementBoxIndex = index;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}