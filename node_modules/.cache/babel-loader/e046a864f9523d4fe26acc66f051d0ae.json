{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/components/Channels/Waveform.tsx\";\nimport React from 'react';\nimport { makeObservable, reaction, toJS } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { debounce } from 'lodash';\nimport { notification } from 'antd';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport Wave, { DrawType } from '../Wave/index';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { UpdateType, MediaModes } from '../../types';\nimport { formatTimeCallback, timeInterval, triggerForm } from '../../utils';\nexport class Waveform extends React.Component {\n  constructor(props) {\n    super(props);\n    /**\n     * application dom container\n     */\n    this.waveformContainer = React.createRef();\n    /**\n     * timeline container\n     */\n    this.timelineContainer = React.createRef();\n    /**\n     * mouse position\n     */\n    this.mousePosition = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * wave instance\n     */\n    this.wave = void 0;\n    /**\n     * resize observer\n     */\n    this.resizeObserve = null;\n    /**\n     * resize debounced\n     */\n    this.resizeDebounced = null;\n    /**\n     * cursor time\n     */\n    this.cursorTime = 0;\n    this.width = 0;\n    /**\n     * waveform visiblility range\n     */\n    this.displayTimeRange = {\n      startTime: 0,\n      endTime: 0\n    };\n    // REGION_LOOP\n    this.loop = void 0;\n    /**\n     * Operation Action\n     */\n    this.isOperation = false;\n    this.selectedChannelIndex = void 0;\n    this.init = () => {\n      if (store.instance.instances) {\n        this.updateRegions(store.instance.instances);\n      }\n      if (store.review.warnings.length) {\n        var _this$wave, _this$wave$plugins$re;\n        (_this$wave = this.wave) === null || _this$wave === void 0 ? void 0 : (_this$wave$plugins$re = _this$wave.plugins.region) === null || _this$wave$plugins$re === void 0 ? void 0 : _this$wave$plugins$re.setWarnings(store.review.warnings);\n      }\n    };\n    this.listen = () => {\n      if (this.wave) {\n        this.wave.on('ready', (duration, channelCount) => {\n          store.setting.setLoading(false);\n          store.waveform.setDuration(duration);\n          store.waveform.initChannelOptions(channelCount);\n          store.instance.initInstances(duration, channelCount);\n          this.init();\n        });\n        this.wave.on('draw', this.draw);\n        this.wave.on('zoom', range => {\n          this.props.onZoom(range);\n        });\n        this.wave.on('audioprocess', time => {\n          store.waveform.setCurrentTime(time);\n        });\n        this.wave.on('click_region', (e, region, channelIndex) => {\n          const start = e.ctrlKey || e.metaKey || store.waveform.playMode === MediaModes.OVERALL && !region ? this.cursorTime : region === null || region === void 0 ? void 0 : region.start;\n          /**\n           * Click trigger play when region is isSelected\n           * change selected trigger play\n           */\n          if (region) {\n            if (region.id === store.instance.selectedInstanceId) {\n              this.updatePlay(region.channelIndex, start, region.end);\n            }\n            this.props.onChangSelectedInstance(region.start, region.end);\n          } else {\n            this.updatePlay(channelIndex, start || 0);\n          }\n          store.instance.setSelectedInstance(region === null || region === void 0 ? void 0 : region.id);\n          this.selectedChannelIndex = channelIndex;\n        });\n        this.wave.on('remove_region', (e, region) => {\n          if (region.audition) {\n            store.review.deleteReviewById(region.id);\n          } else {\n            store.instance.deleteInstance(region.id);\n          }\n        });\n        this.wave.on('remove_audition', () => {\n          store.review.setAuditionRegion();\n        });\n        this.wave.on('mousemove', ({\n          cursorTime,\n          mouse\n        }) => {\n          this.cursorTime = cursorTime;\n          store.waveform.setCursorTime(cursorTime);\n          this.mousePosition = mouse;\n        });\n        this.wave.on('mouseleave', () => {\n          this.cursorTime = 0;\n          store.waveform.setCursorTime(0);\n        });\n        this.wave.on('update_regions', regions => {\n          this.updateInstances(regions);\n        });\n        this.wave.on('overlap_warning', () => {\n          notification.warning({\n            message: i18n.translate('REGION_OVERLAP_WARNING')\n          });\n        });\n        this.wave.on('load_error', () => {\n          store.setting.setLoading(false);\n          notification.error({\n            message: i18n.translate('AUDIO_LOAD_ERROR')\n          });\n        });\n      }\n    };\n    this.updateInstances = regions => {\n      const updatedInstances = {};\n      const update = (id, region) => {\n        if (region) {\n          var _this$loop;\n          if (!region.audition) {\n            const instance = store.instance.getInstanceById(id);\n            if ((instance === null || instance === void 0 ? void 0 : instance.start) === region.start && (instance === null || instance === void 0 ? void 0 : instance.end) === region.end) return;\n            const category = store.ontology.categories[region.channelIndex];\n            updatedInstances[id] = {\n              ...region,\n              category: (category === null || category === void 0 ? void 0 : category.className) || `${region.channelIndex + 1}`,\n              label: (category === null || category === void 0 ? void 0 : category.displayName) || (category === null || category === void 0 ? void 0 : category.className) || `${region.channelIndex + 1}`,\n              attributes: (instance === null || instance === void 0 ? void 0 : instance.attributes) || triggerForm(store.ontology.segmentConfig).updatedValues\n            };\n          } else {\n            store.review.setAuditionRegion(region);\n          }\n          if (id === ((_this$loop = this.loop) === null || _this$loop === void 0 ? void 0 : _this$loop.id)) {\n            this.loop.start = region.start;\n            this.loop.end = region.end;\n            if (store.waveform.isPlaying) {\n              var _this$wave2, _this$wave2$backend;\n              (_this$wave2 = this.wave) === null || _this$wave2 === void 0 ? void 0 : (_this$wave2$backend = _this$wave2.backend) === null || _this$wave2$backend === void 0 ? void 0 : _this$wave2$backend.setPlayEnd(region.end);\n            }\n          }\n        } else {\n          updatedInstances[id] = null;\n        }\n      };\n      Object.keys(regions).forEach(id => {\n        update(id, regions[id]);\n      });\n      if (Object.keys(updatedInstances).length > 0) {\n        store.instance.setUpdatedInstances(updatedInstances, UpdateType.MODIFY);\n      }\n    };\n    this.triggerChannelVisible = () => {\n      var _this$wave3;\n      (_this$wave3 = this.wave) === null || _this$wave3 === void 0 ? void 0 : _this$wave3.setHideChannels(toJS(store.waveform.hideChannels));\n    };\n    this.triggerPlay = () => {\n      this.isOperation = true;\n      if (!store.waveform.isPlaying) {\n        var _this$loop2, _this$loop3, _this$loop4;\n        const start = ((_this$loop2 = this.loop) === null || _this$loop2 === void 0 ? void 0 : _this$loop2.end) && Math.abs(store.waveform.currentTime - this.loop.end) < 0.05 ? (_this$loop3 = this.loop) === null || _this$loop3 === void 0 ? void 0 : _this$loop3.start : store.waveform.currentTime;\n        this.handlePlay(this.selectedChannelIndex, start, (_this$loop4 = this.loop) === null || _this$loop4 === void 0 ? void 0 : _this$loop4.end);\n      } else {\n        var _this$wave4;\n        (_this$wave4 = this.wave) === null || _this$wave4 === void 0 ? void 0 : _this$wave4.pause();\n      }\n    };\n    this.handlePlay = (channelIndex, start, end) => {\n      if (start && end && end - start <= 0.01) return;\n      if (store.setting.isSolo && channelIndex !== undefined) {\n        var _this$wave5;\n        (_this$wave5 = this.wave) === null || _this$wave5 === void 0 ? void 0 : _this$wave5.soloPlay(channelIndex, start, end);\n      } else {\n        var _this$wave6;\n        (_this$wave6 = this.wave) === null || _this$wave6 === void 0 ? void 0 : _this$wave6.play(start, end);\n      }\n    };\n    this.setLoop = () => {\n      let loop;\n      const {\n        instance: {\n          selectedInstanceId,\n          selectedInstance\n        },\n        waveform: {\n          playMode,\n          isPlaying,\n          currentTime,\n          duration\n        },\n        review: {\n          auditionRegion,\n          selectedReview\n        }\n      } = store;\n      if (playMode === MediaModes.REGION_LOOP || playMode === MediaModes.REGION_PLAY) {\n        const start = (selectedInstance === null || selectedInstance === void 0 ? void 0 : selectedInstance.start) || (selectedReview === null || selectedReview === void 0 ? void 0 : selectedReview.start);\n        const end = (selectedInstance === null || selectedInstance === void 0 ? void 0 : selectedInstance.end) || (selectedReview === null || selectedReview === void 0 ? void 0 : selectedReview.end);\n        if (selectedInstanceId && start !== undefined && end !== undefined) {\n          loop = {\n            id: selectedInstanceId,\n            start,\n            end\n          };\n        } else if (auditionRegion) {\n          loop = {\n            id: auditionRegion.id,\n            start: auditionRegion.start,\n            end: auditionRegion.end\n          };\n        } else {\n          loop = {\n            start: 0,\n            end: duration\n          };\n        }\n      }\n      this.loop = loop;\n      if (isPlaying) {\n        if (loop && (currentTime >= loop.end || currentTime < loop.start)) {\n          this.handlePlay((selectedInstance === null || selectedInstance === void 0 ? void 0 : selectedInstance.channelIndex) || this.selectedChannelIndex, loop.start, loop.end);\n        } else if (playMode === MediaModes.OVERALL) {\n          var _this$wave7;\n          (_this$wave7 = this.wave) === null || _this$wave7 === void 0 ? void 0 : _this$wave7.setPlayEnd(duration);\n        }\n      }\n    };\n    this.handleSelectedInstance = () => {\n      var _this$wave8, _this$wave8$plugins$r;\n      this.props.onChangSelectedInstance();\n      const {\n        instance: {\n          selectedInstance,\n          selectedInstanceId\n        },\n        review: {\n          reviewsMap,\n          auditionRegion,\n          setAuditionRegion\n        }\n      } = store;\n      (_this$wave8 = this.wave) === null || _this$wave8 === void 0 ? void 0 : (_this$wave8$plugins$r = _this$wave8.plugins.region) === null || _this$wave8$plugins$r === void 0 ? void 0 : _this$wave8$plugins$r.setSelected(selectedInstanceId);\n      const selectedReview = reviewsMap[selectedInstanceId || ''];\n      const selectedRegion = selectedInstance || (selectedReview === null || selectedReview === void 0 ? void 0 : selectedReview.isMissing) && selectedReview || selectedInstanceId === (auditionRegion === null || auditionRegion === void 0 ? void 0 : auditionRegion.id) && auditionRegion;\n      if (selectedRegion) {\n        const {\n          channelIndex,\n          start,\n          end\n        } = selectedRegion;\n        this.selectedChannelIndex = channelIndex;\n        this.scrollWaveform(start, end);\n        this.updatePlay(channelIndex, start, end);\n      }\n      if (selectedInstanceId !== (auditionRegion === null || auditionRegion === void 0 ? void 0 : auditionRegion.id)) {\n        setAuditionRegion();\n      }\n    };\n    this.scrollWaveform = (instanceStart, instanceEnd) => {\n      const {\n        displayRange: {\n          start,\n          end\n        },\n        duration\n      } = store.waveform;\n      const startTime = start * duration;\n      const endTime = end * duration;\n      if (instanceStart >= startTime && instanceEnd <= endTime) return;\n      const center = (instanceStart + instanceEnd) / (2 * duration);\n      const halfPrecent = (end - start) / 2;\n      let newStart = center - halfPrecent;\n      let newEnd = center + halfPrecent;\n      if (newStart < 0) {\n        newStart = 0;\n        newEnd = 2 * halfPrecent;\n      } else if (newEnd > 1) {\n        newEnd = 1;\n        newStart = 1 - 2 * halfPrecent;\n      }\n      this.handleScroll({\n        start: newStart,\n        end: newEnd\n      });\n      this.props.onZoom({\n        start: newStart,\n        end: newEnd\n      });\n    };\n    this.updatePlay = (channelIndex, _start = store.waveform.currentTime, _end) => {\n      this.setLoop();\n      this.handlePlay(channelIndex, _start, _end);\n    };\n    this.handleChannelOptionsChange = () => {\n      var _this$wave9;\n      (_this$wave9 = this.wave) === null || _this$wave9 === void 0 ? void 0 : _this$wave9.setChannelOptions(toJS(store.waveform.channelsOptions), store.setting.isSolo, this.selectedChannelIndex);\n    };\n    this.changeWavePlayRate = speed => {\n      var _this$wave0;\n      (_this$wave0 = this.wave) === null || _this$wave0 === void 0 ? void 0 : _this$wave0.setPlaybackRate(speed);\n    };\n    this.changeCurrentTime = step => {\n      var _this$wave1;\n      const duration = 5;\n      (_this$wave1 = this.wave) === null || _this$wave1 === void 0 ? void 0 : _this$wave1.moveCurrentTime(duration * (step > 0 ? 1 : -1));\n      notification.success({\n        message: i18n.translate(step >= 0 ? 'CURRENT_FORWARD_TIP' : 'CURRENT_BACK_TIP', {\n          values: {\n            seconds: Math.abs(duration)\n          }\n        })\n      });\n    };\n    this.changeSolo = () => {\n      if (store.waveform.isPlaying) {\n        var _this$wave10;\n        this.handlePlay(this.selectedChannelIndex, store.waveform.currentTime, (_this$wave10 = this.wave) === null || _this$wave10 === void 0 ? void 0 : _this$wave10.getPlayEnd());\n      }\n    };\n    this.updateRegions = instances => {\n      var _this$wave11, _this$wave11$plugins$;\n      const regions = {};\n      Object.keys(instances).forEach(id => {\n        const instance = instances[id];\n        if (instance) {\n          var _store$ontology$categ;\n          regions[id] = {\n            ...instance,\n            color: (_store$ontology$categ = store.ontology.categories[instance.channelIndex]) === null || _store$ontology$categ === void 0 ? void 0 : _store$ontology$categ.displayColor\n          };\n        } else {\n          regions[id] = null;\n        }\n      });\n      (_this$wave11 = this.wave) === null || _this$wave11 === void 0 ? void 0 : (_this$wave11$plugins$ = _this$wave11.plugins.region) === null || _this$wave11$plugins$ === void 0 ? void 0 : _this$wave11$plugins$.setRegions(regions);\n    };\n    this.draw = ({\n      start,\n      end\n    }) => {\n      const {\n        duration\n      } = store.waveform;\n      store.waveform.setDisplayRange({\n        start,\n        end\n      });\n      this.displayTimeRange = {\n        startTime: start * duration,\n        endTime: end * duration\n      };\n    };\n    this.resize = () => {\n      if (this.resizeDebounced) {\n        this.resizeDebounced();\n      } else {\n        this.resizeDebounced = debounce(() => {\n          if (this.waveformContainer.current) {\n            var _this$wave12;\n            const {\n              clientWidth\n            } = this.waveformContainer.current;\n            this.width = clientWidth;\n            (_this$wave12 = this.wave) === null || _this$wave12 === void 0 ? void 0 : _this$wave12.redraw(DrawType.RESIZE);\n          }\n        }, 50);\n      }\n    };\n    this.handleScroll = ({\n      start,\n      end\n    }) => {\n      var _this$wave13;\n      (_this$wave13 = this.wave) === null || _this$wave13 === void 0 ? void 0 : _this$wave13.scroll({\n        start,\n        end\n      });\n    };\n    this.waveformZoom = () => {\n      var _this$wave14;\n      const {\n        start,\n        end\n      } = store.waveform.displayRange;\n      const cursorPrecent = this.mousePosition.x / this.width * (end - start) + start;\n      (_this$wave14 = this.wave) === null || _this$wave14 === void 0 ? void 0 : _this$wave14.zoom(store.setting.zoom, cursorPrecent);\n    };\n    this.handleMouseWheel = e => {\n      e.preventDefault();\n      if (e.ctrlKey) {\n        var _this$waveformContain;\n        const container = (_this$waveformContain = this.waveformContainer.current) === null || _this$waveformContain === void 0 ? void 0 : _this$waveformContain.parentNode;\n        if (container) {\n          const top = container.scrollTop + e.deltaY;\n          container.scrollTo({\n            top\n          });\n        }\n      } else {\n        if (this.cursorTime === undefined) return;\n        let {\n          zoom\n        } = store.setting;\n        const {\n          start,\n          end\n        } = store.waveform.displayRange;\n        if (end - start >= 1 && e.deltaY > 0) {\n          return;\n        }\n        let delta = 1;\n        zoom = Math.ceil(zoom);\n        if (zoom > 200) {\n          delta = 30;\n        } else if (zoom > 150) {\n          delta = 20;\n        } else if (zoom > 80) {\n          delta = 8;\n        } else if (zoom > 50) {\n          delta = 5;\n        } else if (zoom > 20) {\n          delta = 2;\n        }\n        if (e.deltaY < 0) {\n          zoom += delta;\n        } else if (e.deltaY > 0) {\n          zoom -= delta;\n        }\n        store.setting.setZoom(zoom);\n      }\n    };\n    reaction(() => store.setting.zoom, () => {\n      this.waveformZoom();\n    });\n    reaction(() => store.waveform.hideChannels, () => {\n      this.triggerChannelVisible();\n    });\n    reaction(() => store.waveform.playAction, () => {\n      this.triggerPlay();\n    });\n    reaction(() => store.waveform.channelsOptions, () => {\n      this.handleChannelOptionsChange();\n    });\n    reaction(() => store.waveform.speed, () => {\n      this.changeWavePlayRate(store.waveform.speed);\n    });\n    reaction(() => store.waveform.seekStep, () => {\n      this.changeCurrentTime(store.waveform.seekStep);\n    });\n    reaction(() => store.setting.isSolo, () => {\n      this.changeSolo();\n    });\n    reaction(() => store.instance.updatedInstances, () => {\n      this.updateRegions(store.instance.updatedInstances);\n    });\n    reaction(() => store.waveform.playMode, () => {\n      this.setLoop();\n    });\n    reaction(() => store.instance.selectedInstanceId, () => {\n      this.handleSelectedInstance();\n    });\n    reaction(() => store.review.drawMode, () => {\n      var _this$wave15, _this$wave15$plugins$;\n      (_this$wave15 = this.wave) === null || _this$wave15 === void 0 ? void 0 : (_this$wave15$plugins$ = _this$wave15.plugins.region) === null || _this$wave15$plugins$ === void 0 ? void 0 : _this$wave15$plugins$.setDisabled(!store.review.drawMode || store.global.annotateDisabled);\n    });\n    reaction(() => store.review.warnings, () => {\n      var _this$wave16, _this$wave16$plugins$;\n      (_this$wave16 = this.wave) === null || _this$wave16 === void 0 ? void 0 : (_this$wave16$plugins$ = _this$wave16.plugins.region) === null || _this$wave16$plugins$ === void 0 ? void 0 : _this$wave16$plugins$.setWarnings(store.review.warnings);\n    });\n    reaction(() => store.waveform.channelOffset, () => {\n      var _this$wave17;\n      (_this$wave17 = this.wave) === null || _this$wave17 === void 0 ? void 0 : _this$wave17.handleOffsetOverall(toJS(store.waveform.channelOffset));\n    });\n    reaction(() => store.global.annotateDisabled, () => {\n      var _this$wave18, _this$wave18$plugins$;\n      (_this$wave18 = this.wave) === null || _this$wave18 === void 0 ? void 0 : (_this$wave18$plugins$ = _this$wave18.plugins.region) === null || _this$wave18$plugins$ === void 0 ? void 0 : _this$wave18$plugins$.setDisabled(store.global.annotateDisabled);\n    });\n    makeObservable(this, {});\n  }\n  componentDidMount() {\n    if (this.waveformContainer.current) {\n      const {\n        ontology: {\n          categories\n        },\n        waveform: {\n          channelOffset,\n          segmentMode,\n          segmentOverlap\n        }\n      } = store;\n      const pixelRatio = window.devicePixelRatio;\n      this.wave = new Wave({\n        source: store.urls[0],\n        container: this.waveformContainer.current,\n        pixelRatio,\n        channels: categories.map(({\n          className,\n          displayColor\n        }) => ({\n          label: className,\n          color: displayColor\n        })),\n        splitChannels: true,\n        offsetChannels: toJS(channelOffset),\n        plugins: {\n          timeline: {\n            container: this.timelineContainer.current,\n            fontSize: 10,\n            notchPercentHeight: 30,\n            primaryColor: '#A9ABB1',\n            secondaryColor: '#A9ABB1',\n            unlabeledNotchColor: '#A9ABB1',\n            primaryFontColor: '#A9ABB1',\n            secondaryFontColor: '#A9ABB1',\n            timeInterval,\n            formatTimeCallback\n          },\n          region: {\n            container: this.waveformContainer.current,\n            disabled: !store.review.drawMode || store.global.annotateDisabled,\n            deviation: store.waveform.deviation,\n            segmentMode,\n            segmentOverlap\n          }\n        }\n      });\n      this.waveformContainer.current.addEventListener('wheel', this.handleMouseWheel, false);\n      this.resizeObserve = new ResizeObserver(this.resize);\n      this.resizeObserve.observe(this.waveformContainer.current.parentNode);\n      this.resize();\n      this.listen();\n      if (store.urls.length > 1) {\n        this.wave.loadAudioBuffer(store.waveform.audioBuffer);\n      } else if (store.urls.length === 1) {\n        this.wave.loadBuffer(store.urls[0]);\n      }\n    }\n  }\n  componentWillUnmount() {\n    var _this$wave19;\n    if (this.waveformContainer.current) {\n      this.waveformContainer.current.removeEventListener('wheel', this.handleMouseWheel, false);\n    }\n    if (this.resizeObserve) {\n      this.resizeObserve.disconnect();\n      this.resizeObserve = null;\n    }\n    (_this$wave19 = this.wave) === null || _this$wave19 === void 0 ? void 0 : _this$wave19.destroy();\n  }\n  handlePausePlay(isPlay) {\n    const {\n      waveform: {\n        playMode,\n        currentTime,\n        duration\n      },\n      instance: {\n        selectedInstance\n      }\n    } = store;\n    const isPlayOver = Math.abs(currentTime - duration) < 0.02;\n    if (playMode === MediaModes.REGION_LOOP && !isPlay && this.loop && !this.isOperation) {\n      this.handlePlay((selectedInstance === null || selectedInstance === void 0 ? void 0 : selectedInstance.channelIndex) || this.selectedChannelIndex, this.loop.start, this.loop.end);\n      return;\n    }\n    if (playMode === MediaModes.OVERALL && !isPlay && !isPlayOver && !this.isOperation) {\n      this.handlePlay((selectedInstance === null || selectedInstance === void 0 ? void 0 : selectedInstance.channelIndex) || this.selectedChannelIndex, currentTime);\n      return;\n    }\n    if (isPlayOver && !isPlay) {\n      var _this$wave20;\n      (_this$wave20 = this.wave) === null || _this$wave20 === void 0 ? void 0 : _this$wave20.setCurrentTime(duration);\n    }\n    if (this.isOperation) {\n      this.isOperation = false;\n    } else if (!isPlay && this.loop) {\n      var _this$wave21;\n      // There is a delay in pausing the timeline\n      (_this$wave21 = this.wave) === null || _this$wave21 === void 0 ? void 0 : _this$wave21.setCurrentTime(this.loop.end);\n      store.waveform.setCurrentTime(this.loop.end);\n    }\n    store.waveform.setIsPlaying(isPlay);\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"channel-waveform\",\n      ref: this.waveformContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"waveform-timeline\",\n      ref: this.timelineContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n;\nexport default observer(Waveform);","map":{"version":3,"names":["React","makeObservable","reaction","toJS","observer","debounce","notification","ResizeObserver","Wave","DrawType","store","i18n","UpdateType","MediaModes","formatTimeCallback","timeInterval","triggerForm","Waveform","Component","constructor","props","waveformContainer","createRef","timelineContainer","mousePosition","x","y","wave","resizeObserve","resizeDebounced","cursorTime","width","displayTimeRange","startTime","endTime","loop","isOperation","selectedChannelIndex","init","instance","instances","updateRegions","review","warnings","length","_this$wave","_this$wave$plugins$re","plugins","region","setWarnings","listen","on","duration","channelCount","setting","setLoading","waveform","setDuration","initChannelOptions","initInstances","draw","range","onZoom","time","setCurrentTime","e","channelIndex","start","ctrlKey","metaKey","playMode","OVERALL","id","selectedInstanceId","updatePlay","end","onChangSelectedInstance","setSelectedInstance","audition","deleteReviewById","deleteInstance","setAuditionRegion","mouse","setCursorTime","regions","updateInstances","warning","message","translate","error","updatedInstances","update","_this$loop","getInstanceById","category","ontology","categories","className","label","displayName","attributes","segmentConfig","updatedValues","isPlaying","_this$wave2","_this$wave2$backend","backend","setPlayEnd","Object","keys","forEach","setUpdatedInstances","MODIFY","triggerChannelVisible","_this$wave3","setHideChannels","hideChannels","triggerPlay","_this$loop2","_this$loop3","_this$loop4","Math","abs","currentTime","handlePlay","_this$wave4","pause","isSolo","undefined","_this$wave5","soloPlay","_this$wave6","play","setLoop","selectedInstance","auditionRegion","selectedReview","REGION_LOOP","REGION_PLAY","_this$wave7","handleSelectedInstance","_this$wave8","_this$wave8$plugins$r","reviewsMap","setSelected","selectedRegion","isMissing","scrollWaveform","instanceStart","instanceEnd","displayRange","center","halfPrecent","newStart","newEnd","handleScroll","_start","_end","handleChannelOptionsChange","_this$wave9","setChannelOptions","channelsOptions","changeWavePlayRate","speed","_this$wave0","setPlaybackRate","changeCurrentTime","step","_this$wave1","moveCurrentTime","success","values","seconds","changeSolo","_this$wave10","getPlayEnd","_this$wave11","_this$wave11$plugins$","_store$ontology$categ","color","displayColor","setRegions","setDisplayRange","resize","current","_this$wave12","clientWidth","redraw","RESIZE","_this$wave13","scroll","waveformZoom","_this$wave14","cursorPrecent","zoom","handleMouseWheel","preventDefault","_this$waveformContain","container","parentNode","top","scrollTop","deltaY","scrollTo","delta","ceil","setZoom","playAction","seekStep","drawMode","_this$wave15","_this$wave15$plugins$","setDisabled","global","annotateDisabled","_this$wave16","_this$wave16$plugins$","channelOffset","_this$wave17","handleOffsetOverall","_this$wave18","_this$wave18$plugins$","componentDidMount","segmentMode","segmentOverlap","pixelRatio","window","devicePixelRatio","source","urls","channels","map","splitChannels","offsetChannels","timeline","fontSize","notchPercentHeight","primaryColor","secondaryColor","unlabeledNotchColor","primaryFontColor","secondaryFontColor","disabled","deviation","addEventListener","observe","loadAudioBuffer","audioBuffer","loadBuffer","componentWillUnmount","_this$wave19","removeEventListener","disconnect","destroy","handlePausePlay","isPlay","isPlayOver","_this$wave20","_this$wave21","setIsPlaying","render","createElement","ref","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/components/Channels/Waveform.tsx"],"sourcesContent":["import React from 'react';\nimport { makeObservable, reaction, toJS } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { debounce, DebouncedFunc } from 'lodash';\nimport { notification } from 'antd';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport Wave, { DrawType } from '../Wave/index';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { Instance, Range, TimeRange, UpdateType, MediaModes } from '../../types';\nimport { Region } from '../Wave/types';\nimport { formatTimeCallback, timeInterval, triggerForm } from '../../utils';\n\ninterface WaveformProps {\n  selectedInstance: Instance | null;\n  onZoom: ({ start, end }: { start: number; end: number }) => void;\n  onChangSelectedInstance: (start?: number, end?: number) => void;\n}\n\nexport class Waveform extends React.Component<WaveformProps> {\n  /**\n   * application dom container\n   */\n  waveformContainer: React.RefObject<HTMLDivElement> = React.createRef();\n\n  /**\n   * timeline container\n   */\n  timelineContainer: React.RefObject<HTMLDivElement> = React.createRef();\n\n  /**\n   * mouse position\n   */\n  mousePosition = {\n    x: 0,\n    y: 0,\n  };\n\n  /**\n   * wave instance\n   */\n  wave?: Wave;\n\n  /**\n   * resize observer\n   */\n  resizeObserve: ResizeObserver | null = null;\n\n  /**\n   * resize debounced\n   */\n  resizeDebounced: DebouncedFunc<()=>void> | null = null;\n\n  /**\n   * cursor time\n   */\n  cursorTime = 0;\n\n  width = 0;\n\n  /**\n   * waveform visiblility range\n   */\n  displayTimeRange: TimeRange = {\n    startTime: 0,\n    endTime: 0,\n  };\n\n  // REGION_LOOP\n  loop: { id?: string; start: number; end: number } | undefined;\n\n  /**\n   * Operation Action\n   */\n  isOperation = false;\n\n  selectedChannelIndex?: number;\n\n  constructor(props: WaveformProps) {\n    super(props);\n    reaction(\n      () => store.setting.zoom,\n      () => {\n        this.waveformZoom();\n      },\n    );\n    reaction(\n      () => store.waveform.hideChannels,\n      () => {\n        this.triggerChannelVisible();\n      },\n    );\n    reaction(\n      () => store.waveform.playAction,\n      () => {\n        this.triggerPlay();\n      },\n    );\n    reaction(\n      () => store.waveform.channelsOptions,\n      () => {\n        this.handleChannelOptionsChange();\n      },\n    );\n    reaction(\n      () => store.waveform.speed,\n      () => {\n        this.changeWavePlayRate(store.waveform.speed);\n      },\n    );\n    reaction(\n      () => store.waveform.seekStep,\n      () => {\n        this.changeCurrentTime(store.waveform.seekStep);\n      },\n    );\n    reaction(\n      () => store.setting.isSolo,\n      () => {\n        this.changeSolo();\n      },\n    );\n    reaction(\n      () => store.instance.updatedInstances,\n      () => {\n        this.updateRegions(store.instance.updatedInstances);\n      }\n    );\n    reaction(\n      () => store.waveform.playMode,\n      () => {\n        this.setLoop();\n      }\n    );\n    reaction(\n      () => store.instance.selectedInstanceId,\n      () => {\n        this.handleSelectedInstance();\n      }\n    );\n    reaction(\n      () => store.review.drawMode,\n      () => {\n        this.wave?.plugins.region?.setDisabled(!store.review.drawMode || store.global.annotateDisabled);\n      }\n    );\n    reaction(\n      () => store.review.warnings,\n      () => {\n        this.wave?.plugins.region?.setWarnings(store.review.warnings);\n      }\n    );\n    reaction(\n      () => store.waveform.channelOffset,\n      () => {\n        this.wave?.handleOffsetOverall(toJS(store.waveform.channelOffset));\n      }\n    );\n    reaction(\n      () => store.global.annotateDisabled,\n      () => {\n        this.wave?.plugins.region?.setDisabled(store.global.annotateDisabled);\n      }\n    );\n    makeObservable(this, {});\n  }\n\n  componentDidMount() {\n    if (this.waveformContainer.current) {\n      const { ontology: { categories }, waveform: { channelOffset, segmentMode, segmentOverlap } } = store;\n      const pixelRatio = window.devicePixelRatio;\n      this.wave = new Wave({\n        source: store.urls[0],\n        container: this.waveformContainer.current,\n        pixelRatio,\n        channels: categories.map(({ className, displayColor }) => ({ label: className, color: displayColor })),\n        splitChannels: true,\n        offsetChannels: toJS(channelOffset),\n        plugins: {\n          timeline: {\n            container: this.timelineContainer.current!,\n            fontSize: 10,\n            notchPercentHeight: 30,\n            primaryColor: '#A9ABB1',\n            secondaryColor: '#A9ABB1',\n            unlabeledNotchColor: '#A9ABB1',\n            primaryFontColor: '#A9ABB1',\n            secondaryFontColor: '#A9ABB1',\n            timeInterval,\n            formatTimeCallback,\n          },\n          region: {\n            container: this.waveformContainer.current,\n            disabled: !store.review.drawMode || store.global.annotateDisabled,\n            deviation: store.waveform.deviation,\n            segmentMode,\n            segmentOverlap,\n          }\n        }\n      });\n      this.waveformContainer.current.addEventListener('wheel', this.handleMouseWheel, false);\n      this.resizeObserve = new ResizeObserver(this.resize);\n      this.resizeObserve.observe(this.waveformContainer.current.parentNode as HTMLElement);\n      this.resize();\n      this.listen();\n      if (store.urls.length > 1) {\n        this.wave.loadAudioBuffer(store.waveform.audioBuffer);\n      } else if (store.urls.length === 1) {\n        this.wave.loadBuffer(store.urls[0]);\n      }\n    }\n  }\n\n  init = () => {\n    if (store.instance.instances) {\n      this.updateRegions(store.instance.instances);\n    }\n    if (store.review.warnings.length) {\n      this.wave?.plugins.region?.setWarnings(store.review.warnings);\n    }\n  };\n\n  listen = () => {\n    if (this.wave) {\n      this.wave.on('ready', (duration: number, channelCount: number) => {\n        store.setting.setLoading(false);\n        store.waveform.setDuration(duration);\n        store.waveform.initChannelOptions(channelCount);\n        store.instance.initInstances(duration, channelCount);\n        this.init();\n      });\n      this.wave.on('draw', this.draw);\n      this.wave.on('zoom', (range: { start: number, end: number }) => { this.props.onZoom(range); });\n      this.wave.on('audioprocess', (time: number) => {\n        store.waveform.setCurrentTime(time);\n      });\n      this.wave.on('click_region', (e: MouseEvent, region?: Region, channelIndex?: number) => {\n        const start = (\n          (e.ctrlKey || e.metaKey) || (store.waveform.playMode === MediaModes.OVERALL && !region)\n        ) ? this.cursorTime : region?.start;\n        /**\n         * Click trigger play when region is isSelected\n         * change selected trigger play\n         */\n        if (region) {\n          if (region.id === store.instance.selectedInstanceId) {\n            this.updatePlay(region.channelIndex, start, region.end);\n          }\n          this.props.onChangSelectedInstance(region.start, region.end);\n        } else {\n          this.updatePlay(channelIndex, start || 0);\n        }\n        store.instance.setSelectedInstance(region?.id);\n        this.selectedChannelIndex = channelIndex;\n      });\n\n      this.wave.on('remove_region', (e: MouseEvent, region: Region) => {\n        if (region.audition) {\n          store.review.deleteReviewById(region.id);\n        } else {\n          store.instance.deleteInstance(region.id);\n        }\n      });\n      this.wave.on('remove_audition', () => {\n        store.review.setAuditionRegion();\n      });\n      this.wave.on('mousemove', ({ cursorTime, mouse }: {\n        cursorTime: number;\n        mouse: {x: number; y: number},\n        channelIndex: number\n      }) => {\n        this.cursorTime = cursorTime;\n        store.waveform.setCursorTime(cursorTime);\n        this.mousePosition = mouse;\n      });\n      this.wave.on('mouseleave', () => {\n        this.cursorTime = 0;\n        store.waveform.setCursorTime(0);\n      });\n      this.wave.on('update_regions', (regions: {[id: string]: Region | undefined}) => {\n        this.updateInstances(regions);\n      });\n      this.wave.on('overlap_warning', () => {\n        notification.warning({ message: i18n.translate('REGION_OVERLAP_WARNING') });\n      });\n\n      this.wave.on('load_error', () => {\n        store.setting.setLoading(false);\n        notification.error({ message: i18n.translate('AUDIO_LOAD_ERROR') });\n      });\n    }\n  };\n\n  updateInstances = (regions: {[id: string]: Region | undefined}) => {\n    const updatedInstances: { [id: string]: Instance | null } = {};\n    const update = (id: string, region?: Region) => {\n      if (region) {\n        if (!region.audition) {\n          const instance = store.instance.getInstanceById(id);\n          if (instance?.start === region.start && instance?.end === region.end) return;\n          const category = store.ontology.categories[region.channelIndex];\n          updatedInstances[id] = {\n            ...region,\n            category: category?.className || `${region.channelIndex + 1}`,\n            label: category?.displayName || category?.className || `${region.channelIndex + 1}`,\n            attributes: instance?.attributes || triggerForm(store.ontology.segmentConfig).updatedValues,\n          };\n        } else {\n          store.review.setAuditionRegion(region);\n        }\n        if (id === this.loop?.id) {\n          this.loop.start = region.start;\n          this.loop.end = region.end;\n          if (store.waveform.isPlaying) {\n            this.wave?.backend?.setPlayEnd(region.end);\n          }\n        }\n      } else {\n        updatedInstances[id] = null;\n      }\n    };\n    Object.keys(regions).forEach((id) => {\n      update(id, regions[id]);\n    });\n    if (Object.keys(updatedInstances).length > 0) {\n      store.instance.setUpdatedInstances(updatedInstances, UpdateType.MODIFY);\n    }\n  };\n\n  componentWillUnmount() {\n    if (this.waveformContainer.current) {\n      this.waveformContainer.current.removeEventListener('wheel', this.handleMouseWheel, false);\n    }\n    if (this.resizeObserve) {\n      this.resizeObserve.disconnect();\n      this.resizeObserve = null;\n    }\n    this.wave?.destroy();\n  }\n\n  handlePausePlay(isPlay: boolean) {\n    const { waveform: { playMode, currentTime, duration }, instance: { selectedInstance } } = store;\n    const isPlayOver = Math.abs(currentTime - duration) < 0.02;\n    if (playMode === MediaModes.REGION_LOOP && !isPlay && this.loop && !this.isOperation) {\n      this.handlePlay(selectedInstance?.channelIndex || this.selectedChannelIndex, this.loop.start, this.loop.end);\n      return;\n    }\n    if (playMode === MediaModes.OVERALL && !isPlay && !isPlayOver && !this.isOperation) {\n      this.handlePlay(selectedInstance?.channelIndex || this.selectedChannelIndex, currentTime);\n      return;\n    }\n\n    if (isPlayOver && !isPlay) {\n      this.wave?.setCurrentTime(duration);\n    }\n    if (this.isOperation) {\n      this.isOperation = false;\n    } else if (!isPlay && this.loop) {\n      // There is a delay in pausing the timeline\n      this.wave?.setCurrentTime(this.loop.end);\n      store.waveform.setCurrentTime(this.loop.end);\n    }\n    store.waveform.setIsPlaying(isPlay);\n  }\n\n  triggerChannelVisible = () => {\n    this.wave?.setHideChannels(toJS(store.waveform.hideChannels));\n  };\n\n  triggerPlay = () => {\n    this.isOperation = true;\n    if (!store.waveform.isPlaying) {\n      const start = this.loop?.end && Math.abs(store.waveform.currentTime - this.loop.end) < 0.05 ?\n        this.loop?.start : store.waveform.currentTime;\n      this.handlePlay(this.selectedChannelIndex, start, this.loop?.end);\n    } else {\n      this.wave?.pause();\n    }\n  };\n\n  handlePlay = (channelIndex?: number, start?: number, end?: number) => {\n    if (start && end && (end - start) <= 0.01) return;\n    if (store.setting.isSolo && channelIndex !== undefined) {\n      this.wave?.soloPlay(channelIndex, start, end);\n    } else {\n      this.wave?.play(start, end);\n    }\n  };\n\n  setLoop = () => {\n    let loop: { id?: string; start: number; end: number; } | undefined;\n    const {\n      instance: { selectedInstanceId, selectedInstance },\n      waveform: { playMode, isPlaying, currentTime, duration },\n      review: { auditionRegion, selectedReview }\n    } = store;\n    if (playMode === MediaModes.REGION_LOOP || playMode === MediaModes.REGION_PLAY) {\n      const start = selectedInstance?.start || selectedReview?.start;\n      const end = selectedInstance?.end || selectedReview?.end;\n      if (selectedInstanceId && start !== undefined && end !== undefined) {\n        loop = { id: selectedInstanceId, start, end };\n      } else if (auditionRegion) {\n        loop = { id: auditionRegion.id, start: auditionRegion.start, end: auditionRegion.end };\n      } else {\n        loop = { start: 0, end: duration };\n      }\n    }\n    this.loop = loop;\n    if (isPlaying) {\n      if (loop && (currentTime >= loop.end || currentTime < loop.start)) {\n        this.handlePlay(selectedInstance?.channelIndex || this.selectedChannelIndex, loop.start, loop.end);\n      } else if (playMode === MediaModes.OVERALL) {\n        this.wave?.setPlayEnd(duration);\n      }\n    }\n  };\n\n  handleSelectedInstance = () => {\n    this.props.onChangSelectedInstance();\n    const {\n      instance: { selectedInstance, selectedInstanceId },\n      review: { reviewsMap, auditionRegion, setAuditionRegion },\n    } = store;\n    this.wave?.plugins.region?.setSelected(selectedInstanceId);\n    const selectedReview = reviewsMap[selectedInstanceId || ''];\n    const selectedRegion = selectedInstance ||\n                          (selectedReview?.isMissing && selectedReview) ||\n                          (selectedInstanceId === auditionRegion?.id && auditionRegion);\n    if (selectedRegion) {\n      const { channelIndex, start, end } = selectedRegion;\n      this.selectedChannelIndex = channelIndex;\n      this.scrollWaveform(start!, end!);\n      this.updatePlay(channelIndex, start, end);\n    }\n    if (selectedInstanceId !== auditionRegion?.id) {\n      setAuditionRegion();\n    }\n  };\n\n  scrollWaveform = (instanceStart: number, instanceEnd: number) => {\n    const { displayRange: { start, end }, duration } = store.waveform;\n    const startTime = start * duration;\n    const endTime = end * duration;\n    if (instanceStart >= startTime && instanceEnd <= endTime) return;\n    const center = (instanceStart + instanceEnd) / (2 * duration);\n    const halfPrecent = (end - start) / 2;\n    let newStart = center - halfPrecent;\n    let newEnd = center + halfPrecent;\n    if (newStart < 0) {\n      newStart = 0;\n      newEnd = 2 * halfPrecent;\n    } else if (newEnd > 1) {\n      newEnd = 1;\n      newStart = 1 - 2 * halfPrecent;\n    }\n    this.handleScroll({\n      start: newStart,\n      end: newEnd,\n    });\n    this.props.onZoom({\n      start: newStart,\n      end: newEnd,\n    });\n  };\n\n  updatePlay = (channelIndex?: number, _start = store.waveform.currentTime, _end?: number) => {\n    this.setLoop();\n    this.handlePlay(channelIndex, _start, _end);\n  };\n\n  handleChannelOptionsChange = () => {\n    this.wave?.setChannelOptions(toJS(store.waveform.channelsOptions), store.setting.isSolo, this.selectedChannelIndex);\n  };\n\n  changeWavePlayRate = (speed: number) => {\n    this.wave?.setPlaybackRate(speed);\n  };\n\n  changeCurrentTime = (step: number) => {\n    const duration = 5;\n    this.wave?.moveCurrentTime(duration * (step > 0 ? 1 : -1));\n    notification.success({ message: i18n.translate(\n      step >= 0 ? 'CURRENT_FORWARD_TIP' : 'CURRENT_BACK_TIP',\n      {\n        values: {\n          seconds: Math.abs(duration)\n        }\n      }\n    ) });\n  };\n\n  changeSolo = () => {\n    if (store.waveform.isPlaying) {\n      this.handlePlay(this.selectedChannelIndex, store.waveform.currentTime, this.wave?.getPlayEnd());\n    }\n  };\n\n  updateRegions = (instances: {[id: string]: Instance | null}) => {\n    const regions: {[id: string]: Region | null} = {};\n    Object.keys(instances).forEach((id) => {\n      const instance = instances[id];\n      if (instance) {\n        regions[id] = {\n          ...instance,\n          color: store.ontology.categories[instance.channelIndex]?.displayColor,\n        };\n      } else {\n        regions[id] = null;\n      }\n    });\n    this.wave?.plugins.region?.setRegions(regions);\n  };\n\n  draw = ({ start, end }: Range) => {\n    const { duration } = store.waveform;\n    store.waveform.setDisplayRange({ start, end });\n    this.displayTimeRange = {\n      startTime: start * duration,\n      endTime: end * duration,\n    };\n  };\n\n  resize = () => {\n    if (this.resizeDebounced) {\n      this.resizeDebounced();\n    } else {\n      this.resizeDebounced = debounce(() => {\n        if (this.waveformContainer.current) {\n          const { clientWidth } = this.waveformContainer.current;\n          this.width = clientWidth;\n          this.wave?.redraw(DrawType.RESIZE);\n        }\n      }, 50);\n    }\n  };\n\n  handleScroll = ({ start, end }: { start: number; end: number }) => {\n    this.wave?.scroll({ start, end });\n  };\n\n  waveformZoom = () => {\n    const { start, end } = store.waveform.displayRange;\n    const cursorPrecent = (this.mousePosition.x / this.width) * (end - start) + start;\n    this.wave?.zoom(store.setting.zoom, cursorPrecent);\n  };\n\n  handleMouseWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    if (e.ctrlKey) {\n      const container = this.waveformContainer.current?.parentNode as HTMLElement;\n      if (container) {\n        const top = container.scrollTop + e.deltaY;\n        container.scrollTo({ top });\n      }\n    } else {\n      if (this.cursorTime === undefined) return;\n      let { zoom } = store.setting;\n      const { start, end } = store.waveform.displayRange;\n      if (end - start >= 1 && e.deltaY > 0) {\n        return;\n      }\n      let delta = 1;\n      zoom = Math.ceil(zoom);\n      if (zoom > 200) {\n        delta = 30;\n      } else if (zoom > 150) {\n        delta = 20;\n      } else if (zoom > 80) {\n        delta = 8;\n      } else if (zoom > 50) {\n        delta = 5;\n      } else if (zoom > 20) {\n        delta = 2;\n      }\n      if (e.deltaY < 0) {\n        zoom += delta;\n      } else if (e.deltaY > 0) {\n        zoom -= delta;\n      }\n      store.setting.setZoom(zoom);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"channel-waveform\" ref={this.waveformContainer}>\n        <div className=\"waveform-timeline\" ref={this.timelineContainer} />\n      </div>\n    );\n  }\n};\n\nexport default observer(Waveform);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}