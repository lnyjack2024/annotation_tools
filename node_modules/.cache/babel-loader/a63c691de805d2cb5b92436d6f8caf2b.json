{"ast":null,"code":"import en from './en-US';\nimport cn from './zh-CN';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function formatMessage(key, options = {}) {\n  const locale = navigator.language || 'en-US';\n  const message = locale.startsWith('zh') ? cn[key] : en[key];\n  if (message) {\n    let msg = message;\n    if (options.values) {\n      Object.keys(options.values).forEach(k => {\n        msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n      });\n    }\n    return msg;\n  }\n  return key;\n}","map":{"version":3,"names":["en","cn","formatMessage","key","options","locale","navigator","language","message","startsWith","msg","values","Object","keys","forEach","k","replace","RegExp"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/translation/locales/index.ts"],"sourcesContent":["import en from './en-US';\nimport cn from './zh-CN';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function formatMessage(key: string, options: any = {}) {\n  const locale = navigator.language || 'en-US';\n  const message = locale.startsWith('zh') ? cn[key] : en[key];\n  if (message) {\n    let msg = message;\n    if (options.values) {\n      Object.keys(options.values).forEach((k) => {\n        msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n      });\n    }\n    return msg;\n  }\n  return key;\n}\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,SAAS;AACxB,OAAOC,EAAE,MAAM,SAAS;;AAExB;AACA,eAAe,SAASC,aAAaA,CAACC,GAAW,EAAEC,OAAY,GAAG,CAAC,CAAC,EAAE;EACpE,MAAMC,MAAM,GAAGC,SAAS,CAACC,QAAQ,IAAI,OAAO;EAC5C,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC,GAAGR,EAAE,CAACE,GAAG,CAAC,GAAGH,EAAE,CAACG,GAAG,CAAC;EAC3D,IAAIK,OAAO,EAAE;IACX,IAAIE,GAAG,GAAGF,OAAO;IACjB,IAAIJ,OAAO,CAACO,MAAM,EAAE;MAClBC,MAAM,CAACC,IAAI,CAACT,OAAO,CAACO,MAAM,CAAC,CAACG,OAAO,CAAEC,CAAC,IAAK;QACzCL,GAAG,GAAGA,GAAG,CAACM,OAAO,CAAC,IAAIC,MAAM,CAAC,IAAIF,CAAC,GAAG,EAAE,GAAG,CAAC,EAAEX,OAAO,CAACO,MAAM,CAACI,CAAC,CAAC,CAAC;MACjE,CAAC,CAAC;IACJ;IACA,OAAOL,GAAG;EACZ;EACA,OAAOP,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module"}