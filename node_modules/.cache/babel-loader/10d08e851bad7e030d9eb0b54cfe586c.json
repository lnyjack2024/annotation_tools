{"ast":null,"code":"import { isConnection, isInsertion, isLabel } from '../data/tag_mode';\nclass TagInfoMap {\n  constructor() {\n    this.labels = {};\n    this.insertions = {};\n    this.connections = {};\n  }\n  reciveInfo(json) {\n    this.labels = JSON.parse(json.labels);\n    this.insertions = JSON.parse(json.insertions);\n    this.connections = JSON.parse(json.connections);\n    return this;\n  }\n  getItem(id) {\n    const {\n      labels,\n      connections,\n      insertions\n    } = this;\n    if (isLabel(id)) return labels[id];\n    if (isConnection(id)) return connections[id];\n    if (isInsertion(id)) return insertions[id];\n    return undefined;\n  }\n  setItem(id, item) {\n    const {\n      labels,\n      connections,\n      insertions\n    } = this;\n    if (isLabel(id)) return labels[id] = item;\n    if (isConnection(id)) return connections[id] = item;\n    if (isInsertion(id)) return insertions[id] = item;\n  }\n  removeItem(id) {\n    const {\n      labels,\n      connections,\n      insertions\n    } = this;\n    if (isConnection(id)) {\n      delete connections[id];\n      return true;\n    }\n    let itemId;\n    if (isLabel(id)) {\n      itemId = labels[id].id;\n      delete labels[id];\n    }\n    if (isInsertion(id)) {\n      itemId = insertions[id].id;\n      delete insertions[id];\n    }\n\n    // remove related connection\n    Object.entries(connections).forEach(([id, connection]) => {\n      if (connection.from.id === itemId || connection.to.id === itemId) delete connections[id];\n    });\n  }\n  getMap() {\n    return {\n      labels: JSON.stringify(this.labels),\n      connections: JSON.stringify(this.connections),\n      insertions: JSON.stringify(this.insertions)\n    };\n  }\n  clone() {\n    return new TagInfoMap().reciveInfo(this.getMap());\n  }\n}\nexport default TagInfoMap;","map":{"version":3,"names":["isConnection","isInsertion","isLabel","TagInfoMap","constructor","labels","insertions","connections","reciveInfo","json","JSON","parse","getItem","id","undefined","setItem","item","removeItem","itemId","Object","entries","forEach","connection","from","to","getMap","stringify","clone"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/utils/TagInfoMap.js"],"sourcesContent":["import { isConnection, isInsertion, isLabel } from '../data/tag_mode';\n\nclass TagInfoMap {\n  constructor() {\n    this.labels = {};\n    this.insertions = {};\n    this.connections = {};\n  }\n\n  reciveInfo(json) {\n    this.labels = JSON.parse(json.labels);\n    this.insertions = JSON.parse(json.insertions);\n    this.connections = JSON.parse(json.connections);\n    return this;\n  }\n\n  getItem(id) {\n    const { labels, connections, insertions } = this;\n    if (isLabel(id)) return labels[id];\n    if (isConnection(id)) return connections[id];\n    if (isInsertion(id)) return insertions[id];\n    return undefined;\n  }\n\n  setItem(id, item) {\n    const { labels, connections, insertions } = this;\n    if (isLabel(id)) return labels[id] = item;\n    if (isConnection(id)) return connections[id] = item;\n    if (isInsertion(id)) return insertions[id] = item;\n  }\n\n  removeItem(id) {\n    const { labels, connections, insertions } = this;\n    if (isConnection(id)) {\n      delete connections[id]; return true;\n    }\n    let itemId;\n    if (isLabel(id)) {\n      itemId = labels[id].id;\n      delete labels[id];\n    }\n    if (isInsertion(id)) {\n      itemId = insertions[id].id;\n      delete insertions[id];\n    }\n\n    // remove related connection\n    Object.entries(connections).forEach(([id, connection]) => {\n      if (connection.from.id === itemId || connection.to.id === itemId) delete connections[id];\n    })\n  }\n\n  getMap() {\n    return {\n      labels: JSON.stringify(this.labels),\n      connections: JSON.stringify(this.connections),\n      insertions: JSON.stringify(this.insertions),\n    }\n  }\n\n  clone() {\n    return new TagInfoMap().reciveInfo(this.getMap());\n  }\n}\n\nexport default TagInfoMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}