{"ast":null,"code":"import { getStorage, setStorage } from './storage';\nexport let CacheType = /*#__PURE__*/function (CacheType) {\n  CacheType[\"GLOBAL\"] = \"global\";\n  CacheType[\"SESSION\"] = \"session\";\n  CacheType[\"BY_PROJECT\"] = \"by-project\";\n  CacheType[\"BY_JOB\"] = \"by-job\";\n  return CacheType;\n}({});\nconst splitKey = '-pid-';\nconst cachedProjectsCount = 10;\nconst cachedJobsCount = 20;\nfunction getNamespaceForProject(toolName, projectId) {\n  return `${toolName}${splitKey}${projectId}`;\n}\nfunction getNamespaceForJob(toolName, jobId) {\n  return `${toolName}${splitKey}${jobId}`;\n}\nfunction getCache(type, key) {\n  const storage = type === 'session' ? sessionStorage : localStorage;\n  const value = storage.getItem(key);\n  if (typeof value === 'string') {\n    try {\n      const parsedValue = JSON.parse(value);\n      return parsedValue;\n    } catch (e) {\n      return value;\n    }\n  }\n  return undefined;\n}\nfunction setCache(type, key, value) {\n  const storage = type === 'session' ? sessionStorage : localStorage;\n  try {\n    storage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));\n  } catch (e) {\n    console.log(`set ${type} storage error: `, e);\n  }\n}\nfunction removeCache(type, key) {\n  const storage = type === 'session' ? sessionStorage : localStorage;\n  storage.removeItem(key);\n}\nexport default class ToolStorage {\n  get currentProjectNamespace() {\n    return getNamespaceForProject(this.toolName, this.currentProject);\n  }\n  get cachedProjectsNamespace() {\n    return `${this.toolName}-cached-proejcts`;\n  }\n  get currentJobNamespace() {\n    return getNamespaceForJob(this.toolName, this.currentJob);\n  }\n  get cachedJobsNamespace() {\n    return `${this.toolName}-cached-jobs`;\n  }\n  constructor({\n    toolName,\n    currentProject,\n    currentJob,\n    getCacheTypeByKey\n  }) {\n    this.toolName = void 0;\n    this.currentProject = void 0;\n    this.currentJob = void 0;\n    this.getCacheTypeByKey = void 0;\n    this.toolName = toolName;\n    this.currentProject = currentProject || 'projectId-default';\n    this.currentJob = currentJob || 'jobId-default';\n    this.getCacheTypeByKey = getCacheTypeByKey;\n  }\n  setCurrentProject(projectId, jobId) {\n    if (projectId) {\n      this.currentProject = projectId;\n    }\n    if (jobId) {\n      this.currentJob = jobId;\n    }\n  }\n  get(key) {\n    const cacheType = this.getCacheTypeByKey(key);\n    switch (cacheType) {\n      case CacheType.GLOBAL:\n      case CacheType.SESSION:\n        return getCache(cacheType, key);\n      case CacheType.BY_PROJECT:\n        return this.getCacheByProject(key);\n      case CacheType.BY_JOB:\n        return this.getCacheByJob(key);\n      default:\n        return undefined;\n    }\n  }\n  set(key, value) {\n    const cacheType = this.getCacheTypeByKey(key);\n    switch (cacheType) {\n      case CacheType.GLOBAL:\n      case CacheType.SESSION:\n        setCache(cacheType, key, value);\n        break;\n      case CacheType.BY_PROJECT:\n        this.setCacheByProject(key, value);\n        break;\n      case CacheType.BY_JOB:\n        this.setCacheByJob(key, value);\n        break;\n      default:\n    }\n  }\n  remove(key) {\n    const cacheType = this.getCacheTypeByKey(key);\n    switch (cacheType) {\n      case CacheType.GLOBAL:\n      case CacheType.SESSION:\n        removeCache(cacheType, key);\n        break;\n      case CacheType.BY_PROJECT:\n        this.removeCacheByProject(key);\n        break;\n      case CacheType.BY_JOB:\n        this.removeCacheByJob(key);\n        break;\n      default:\n    }\n  }\n  getCacheByProject(key) {\n    return getStorage(this.currentProjectNamespace, key);\n  }\n  setCacheByProject(key, value) {\n    this.updateCachedProjects();\n    setStorage(this.currentProjectNamespace, key, value);\n  }\n  removeCacheByProject(key) {\n    const store = this.getCacheByProject(key);\n    if (store) {\n      delete store[key];\n      this.updateCachedProjects();\n      try {\n        localStorage.setItem(this.currentProjectNamespace, JSON.stringify(store));\n      } catch (e) {\n        console.log('update storage error: ', e);\n      }\n    }\n  }\n  updateCachedProjects() {\n    let store;\n    try {\n      store = JSON.parse(localStorage.getItem(this.cachedProjectsNamespace) || '{}');\n    } catch (e) {\n      store = {};\n    }\n    const cachedProjects = Object.keys(store);\n    if (!cachedProjects.includes(this.currentProject) && cachedProjects.length >= cachedProjectsCount) {\n      // cached projects full, remove oldest projects\n      cachedProjects.sort((a, b) => store[a] - store[b]); // asc\n      const deleteCount = cachedProjects.length - cachedProjectsCount + 1;\n      for (let i = 0; i < deleteCount; i += 1) {\n        const deleteProject = cachedProjects[i];\n        delete store[deleteProject];\n        localStorage.removeItem(getNamespaceForProject(this.toolName, deleteProject));\n      }\n    }\n    store[this.currentProject] = Date.now();\n    try {\n      localStorage.setItem(this.cachedProjectsNamespace, JSON.stringify(store));\n    } catch (e) {\n      console.log('update cahced projects error: ', e);\n    }\n  }\n  getCacheByJob(key) {\n    return getStorage(this.currentJobNamespace, key);\n  }\n  setCacheByJob(key, value) {\n    this.updateCachedJobs();\n    setStorage(this.currentJobNamespace, key, value);\n  }\n  removeCacheByJob(key) {\n    const store = this.getCacheByJob(key);\n    if (store) {\n      delete store[key];\n      this.updateCachedJobs();\n      try {\n        localStorage.setItem(this.currentJobNamespace, JSON.stringify(store));\n      } catch (e) {\n        console.info('update storage error: ', e);\n      }\n    }\n  }\n  updateCachedJobs() {\n    let store;\n    try {\n      store = JSON.parse(localStorage.getItem(this.cachedJobsNamespace) || '{}');\n    } catch (e) {\n      store = {};\n    }\n    const cachedJobs = Object.keys(store);\n    if (!cachedJobs.includes(this.currentJob) && cachedJobs.length >= cachedJobsCount) {\n      // cached projects full, remove oldest projects\n      cachedJobs.sort((a, b) => store[a] - store[b]); // asc\n      const deleteCount = cachedJobs.length - cachedJobsCount + 1;\n      for (let i = 0; i < deleteCount; i += 1) {\n        const deleteJob = cachedJobs[i];\n        delete store[deleteJob];\n        localStorage.removeItem(getNamespaceForJob(this.toolName, deleteJob));\n      }\n    }\n    store[this.currentJob] = Date.now();\n    try {\n      localStorage.setItem(this.cachedJobsNamespace, JSON.stringify(store));\n    } catch (e) {\n      console.info('update cahced jobs error: ', e);\n    }\n  }\n}","map":{"version":3,"names":["getStorage","setStorage","CacheType","splitKey","cachedProjectsCount","cachedJobsCount","getNamespaceForProject","toolName","projectId","getNamespaceForJob","jobId","getCache","type","key","storage","sessionStorage","localStorage","value","getItem","parsedValue","JSON","parse","e","undefined","setCache","setItem","stringify","console","log","removeCache","removeItem","ToolStorage","currentProjectNamespace","currentProject","cachedProjectsNamespace","currentJobNamespace","currentJob","cachedJobsNamespace","constructor","getCacheTypeByKey","setCurrentProject","get","cacheType","GLOBAL","SESSION","BY_PROJECT","getCacheByProject","BY_JOB","getCacheByJob","set","setCacheByProject","setCacheByJob","remove","removeCacheByProject","removeCacheByJob","updateCachedProjects","store","cachedProjects","Object","keys","includes","length","sort","a","b","deleteCount","i","deleteProject","Date","now","updateCachedJobs","info","cachedJobs","deleteJob"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/utils/tool-storage.ts"],"sourcesContent":["import { getStorage, setStorage } from './storage';\n\nexport enum CacheType {\n  // for all projects\n  GLOBAL = 'global',\n  // for all projects, but only affect current session\n  SESSION = 'session',\n  // for one project\n  BY_PROJECT = 'by-project',\n\n  // for one job\n  BY_JOB = 'by-job',\n}\n\nconst splitKey = '-pid-';\nconst cachedProjectsCount = 10;\nconst cachedJobsCount = 20;\n\nfunction getNamespaceForProject(toolName: string, projectId: string) {\n  return `${toolName}${splitKey}${projectId}`;\n}\n\nfunction getNamespaceForJob(toolName: string, jobId: string) {\n  return `${toolName}${splitKey}${jobId}`;\n}\n\nfunction getCache(type: CacheType.GLOBAL | CacheType.SESSION, key: string) {\n  const storage = type === 'session' ? sessionStorage : localStorage;\n  const value = storage.getItem(key);\n  if (typeof value === 'string') {\n    try {\n      const parsedValue = JSON.parse(value);\n      return parsedValue;\n    } catch (e) {\n      return value;\n    }\n  }\n  return undefined;\n}\nfunction setCache(type: CacheType.GLOBAL | CacheType.SESSION, key: string, value: unknown) {\n  const storage = type === 'session' ? sessionStorage : localStorage;\n  try {\n    storage.setItem(key, typeof value === 'string' ? value : JSON.stringify(value));\n  } catch (e) {\n    console.log(`set ${type} storage error: `, e);\n  }\n}\nfunction removeCache(type: CacheType.GLOBAL | CacheType.SESSION, key: string) {\n  const storage = type === 'session' ? sessionStorage : localStorage;\n  storage.removeItem(key);\n}\n\nexport default class ToolStorage {\n  toolName: string;\n\n  currentProject: string;\n\n  currentJob: string;\n\n  getCacheTypeByKey: (key: string) => CacheType | undefined;\n\n  get currentProjectNamespace() {\n    return getNamespaceForProject(this.toolName, this.currentProject);\n  }\n\n  get cachedProjectsNamespace() {\n    return `${this.toolName}-cached-proejcts`;\n  }\n\n  get currentJobNamespace() {\n    return getNamespaceForJob(this.toolName, this.currentJob);\n  }\n\n  get cachedJobsNamespace() {\n    return `${this.toolName}-cached-jobs`;\n  }\n\n  constructor({ toolName, currentProject, currentJob, getCacheTypeByKey }: {\n    toolName: string;\n    currentProject?: string;\n    currentJob?: string;\n\n    getCacheTypeByKey: (key: string) => CacheType | undefined;\n  }) {\n    this.toolName = toolName;\n    this.currentProject = currentProject || 'projectId-default';\n    this.currentJob = currentJob || 'jobId-default';\n\n    this.getCacheTypeByKey = getCacheTypeByKey;\n  }\n\n  setCurrentProject(projectId?: string, jobId?: string) {\n    if (projectId) {\n      this.currentProject = projectId;\n    }\n    if (jobId) {\n      this.currentJob = jobId;\n    }\n  }\n\n  get(key: string) {\n    const cacheType = this.getCacheTypeByKey(key);\n    switch (cacheType) {\n      case CacheType.GLOBAL:\n      case CacheType.SESSION:\n        return getCache(cacheType, key);\n      case CacheType.BY_PROJECT:\n        return this.getCacheByProject(key);\n      case CacheType.BY_JOB:\n        return this.getCacheByJob(key);\n      default:\n        return undefined;\n    }\n  }\n\n  set(key: string, value: unknown) {\n    const cacheType = this.getCacheTypeByKey(key);\n    switch (cacheType) {\n      case CacheType.GLOBAL:\n      case CacheType.SESSION:\n        setCache(cacheType, key, value);\n        break;\n      case CacheType.BY_PROJECT:\n        this.setCacheByProject(key, value);\n        break;\n      case CacheType.BY_JOB:\n        this.setCacheByJob(key, value);\n        break;\n      default:\n    }\n  }\n\n  remove(key: string) {\n    const cacheType = this.getCacheTypeByKey(key);\n    switch (cacheType) {\n      case CacheType.GLOBAL:\n      case CacheType.SESSION:\n        removeCache(cacheType, key);\n        break;\n      case CacheType.BY_PROJECT:\n        this.removeCacheByProject(key);\n        break;\n      case CacheType.BY_JOB:\n        this.removeCacheByJob(key);\n        break;\n      default:\n    }\n  }\n\n  getCacheByProject(key: string) {\n    return getStorage(this.currentProjectNamespace, key);\n  }\n\n  setCacheByProject(key: string, value: unknown) {\n    this.updateCachedProjects();\n    setStorage(this.currentProjectNamespace, key, value);\n  }\n\n  removeCacheByProject(key: string) {\n    const store = this.getCacheByProject(key);\n    if (store) {\n      delete store[key];\n      this.updateCachedProjects();\n      try {\n        localStorage.setItem(this.currentProjectNamespace, JSON.stringify(store));\n      } catch (e) {\n        console.log('update storage error: ', e);\n      }\n    }\n  }\n\n  updateCachedProjects() {\n    let store: Record<string, number>;\n    try {\n      store = JSON.parse(localStorage.getItem(this.cachedProjectsNamespace) || '{}');\n    } catch (e) {\n      store = {};\n    }\n\n    const cachedProjects = Object.keys(store);\n    if (!cachedProjects.includes(this.currentProject) && cachedProjects.length >= cachedProjectsCount) {\n      // cached projects full, remove oldest projects\n      cachedProjects.sort((a, b) => store[a] - store[b]); // asc\n      const deleteCount = cachedProjects.length - cachedProjectsCount + 1;\n      for (let i = 0; i < deleteCount; i += 1) {\n        const deleteProject = cachedProjects[i];\n        delete store[deleteProject];\n        localStorage.removeItem(getNamespaceForProject(this.toolName, deleteProject));\n      }\n    }\n\n    store[this.currentProject] = Date.now();\n\n    try {\n      localStorage.setItem(this.cachedProjectsNamespace, JSON.stringify(store));\n    } catch (e) {\n      console.log('update cahced projects error: ', e);\n    }\n  }\n\n  getCacheByJob<K>(key: string): K | undefined {\n    return getStorage(this.currentJobNamespace, key);\n  }\n\n  setCacheByJob<K>(key: string, value: K) {\n    this.updateCachedJobs();\n    setStorage(this.currentJobNamespace, key, value);\n  }\n\n  removeCacheByJob(key: string) {\n    const store = this.getCacheByJob(key);\n    if (store) {\n      delete (store as { [key: string]: unknown })[key];\n      this.updateCachedJobs();\n      try {\n        localStorage.setItem(this.currentJobNamespace, JSON.stringify(store));\n      } catch (e) {\n        console.info('update storage error: ', e);\n      }\n    }\n  }\n\n  updateCachedJobs() {\n    let store: Record<string, number>;\n    try {\n      store = JSON.parse(localStorage.getItem(this.cachedJobsNamespace) || '{}');\n    } catch (e) {\n      store = {};\n    }\n\n    const cachedJobs = Object.keys(store);\n    if (!cachedJobs.includes(this.currentJob) && cachedJobs.length >= cachedJobsCount) {\n      // cached projects full, remove oldest projects\n      cachedJobs.sort((a, b) => store[a] - store[b]); // asc\n      const deleteCount = cachedJobs.length - cachedJobsCount + 1;\n      for (let i = 0; i < deleteCount; i += 1) {\n        const deleteJob = cachedJobs[i];\n        delete store[deleteJob];\n        localStorage.removeItem(getNamespaceForJob(this.toolName, deleteJob));\n      }\n    }\n    store[this.currentJob] = Date.now();\n\n    try {\n      localStorage.setItem(this.cachedJobsNamespace, JSON.stringify(store));\n    } catch (e) {\n      console.info('update cahced jobs error: ', e);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}