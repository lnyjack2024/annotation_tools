{"ast":null,"code":"var ImageFilters = {};\nImageFilters.utils = {\n  initSampleCanvas: function () {\n    var _canvas = document.createElement('canvas'),\n      _context = _canvas.getContext('2d');\n    _canvas.width = 0;\n    _canvas.height = 0;\n    this.getSampleCanvas = function () {\n      return _canvas;\n    };\n    this.getSampleContext = function () {\n      return _context;\n    };\n    this.createImageData = _context.createImageData ? function (w, h) {\n      return _context.createImageData(w, h);\n    } : function (w, h) {\n      return new ImageData(w, h);\n    };\n  },\n  getSampleCanvas: function () {\n    this.initSampleCanvas();\n    return this.getSampleCanvas();\n  },\n  getSampleContext: function () {\n    this.initSampleCanvas();\n    return this.getSampleContext();\n  },\n  createImageData: function (w, h) {\n    this.initSampleCanvas();\n    return this.createImageData(w, h);\n  },\n  clamp: function (value) {\n    return value > 255 ? 255 : value < 0 ? 0 : value;\n  },\n  buildMap: function (f) {\n    for (var m = [], k = 0, v; k < 256; k += 1) {\n      m[k] = (v = f(k)) > 255 ? 255 : v < 0 ? 0 : v | 0;\n    }\n    return m;\n  },\n  applyMap: function (src, dst, map) {\n    for (var i = 0, l = src.length; i < l; i += 4) {\n      dst[i] = map[src[i]];\n      dst[i + 1] = map[src[i + 1]];\n      dst[i + 2] = map[src[i + 2]];\n      dst[i + 3] = src[i + 3];\n    }\n  },\n  mapRGB: function (src, dst, func) {\n    this.applyMap(src, dst, this.buildMap(func));\n  },\n  getPixelIndex: function (x, y, width, height, edge) {\n    if (x < 0 || x >= width || y < 0 || y >= height) {\n      switch (edge) {\n        case 1:\n          // clamp\n          x = x < 0 ? 0 : x >= width ? width - 1 : x;\n          y = y < 0 ? 0 : y >= height ? height - 1 : y;\n          break;\n        case 2:\n          // wrap\n          x = (x %= width) < 0 ? x + width : x;\n          y = (y %= height) < 0 ? y + height : y;\n          break;\n        default:\n          // transparent\n          return null;\n      }\n    }\n    return y * width + x << 2;\n  },\n  getPixel: function (src, x, y, width, height, edge) {\n    if (x < 0 || x >= width || y < 0 || y >= height) {\n      switch (edge) {\n        case 1:\n          // clamp\n          x = x < 0 ? 0 : x >= width ? width - 1 : x;\n          y = y < 0 ? 0 : y >= height ? height - 1 : y;\n          break;\n        case 2:\n          // wrap\n          x = (x %= width) < 0 ? x + width : x;\n          y = (y %= height) < 0 ? y + height : y;\n          break;\n        default:\n          // transparent\n          return 0;\n      }\n    }\n    var i = y * width + x << 2;\n\n    // ARGB\n    return src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n  },\n  getPixelByIndex: function (src, i) {\n    return src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n  },\n  /**\n   * one of the most important functions in this library.\n   * I want to make this as fast as possible.\n   */\n  copyBilinear: function (src, x, y, width, height, dst, dstIndex, edge) {\n    var fx = x < 0 ? x - 1 | 0 : x | 0,\n      // Math.floor(x)\n      fy = y < 0 ? y - 1 | 0 : y | 0,\n      // Math.floor(y)\n      wx = x - fx,\n      wy = y - fy,\n      i,\n      nw = 0,\n      ne = 0,\n      sw = 0,\n      se = 0,\n      cx,\n      cy,\n      r,\n      g,\n      b,\n      a;\n    if (fx >= 0 && fx < width - 1 && fy >= 0 && fy < height - 1) {\n      // in bounds, no edge actions required\n      i = fy * width + fx << 2;\n      if (wx || wy) {\n        nw = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n        i += 4;\n        ne = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n        i = i - 8 + (width << 2);\n        sw = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n        i += 4;\n        se = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n      } else {\n        // no interpolation required\n        dst[dstIndex] = src[i];\n        dst[dstIndex + 1] = src[i + 1];\n        dst[dstIndex + 2] = src[i + 2];\n        dst[dstIndex + 3] = src[i + 3];\n        return;\n      }\n    } else {\n      // edge actions required\n      nw = this.getPixel(src, fx, fy, width, height, edge);\n      if (wx || wy) {\n        ne = this.getPixel(src, fx + 1, fy, width, height, edge);\n        sw = this.getPixel(src, fx, fy + 1, width, height, edge);\n        se = this.getPixel(src, fx + 1, fy + 1, width, height, edge);\n      } else {\n        // no interpolation required\n        dst[dstIndex] = nw >> 16 & 0xFF;\n        dst[dstIndex + 1] = nw >> 8 & 0xFF;\n        dst[dstIndex + 2] = nw & 0xFF;\n        dst[dstIndex + 3] = nw >> 24 & 0xFF;\n        return;\n      }\n    }\n    cx = 1 - wx;\n    cy = 1 - wy;\n    r = ((nw >> 16 & 0xFF) * cx + (ne >> 16 & 0xFF) * wx) * cy + ((sw >> 16 & 0xFF) * cx + (se >> 16 & 0xFF) * wx) * wy;\n    g = ((nw >> 8 & 0xFF) * cx + (ne >> 8 & 0xFF) * wx) * cy + ((sw >> 8 & 0xFF) * cx + (se >> 8 & 0xFF) * wx) * wy;\n    b = ((nw & 0xFF) * cx + (ne & 0xFF) * wx) * cy + ((sw & 0xFF) * cx + (se & 0xFF) * wx) * wy;\n    a = ((nw >> 24 & 0xFF) * cx + (ne >> 24 & 0xFF) * wx) * cy + ((sw >> 24 & 0xFF) * cx + (se >> 24 & 0xFF) * wx) * wy;\n    dst[dstIndex] = r > 255 ? 255 : r < 0 ? 0 : r | 0;\n    dst[dstIndex + 1] = g > 255 ? 255 : g < 0 ? 0 : g | 0;\n    dst[dstIndex + 2] = b > 255 ? 255 : b < 0 ? 0 : b | 0;\n    dst[dstIndex + 3] = a > 255 ? 255 : a < 0 ? 0 : a | 0;\n  },\n  /**\n   * @param r 0 <= n <= 255\n   * @param g 0 <= n <= 255\n   * @param b 0 <= n <= 255\n   * @return Array(h, s, l)\n   */\n  rgbToHsl: function (r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    //        var max = Math.max(r, g, b),\n    //            min = Math.min(r, g, b),\n    var max = r > g ? r > b ? r : b : g > b ? g : b,\n      min = r < g ? r < b ? r : b : g < b ? g : b,\n      chroma = max - min,\n      h = 0,\n      s = 0,\n      // Lightness\n      l = (min + max) / 2;\n    if (chroma !== 0) {\n      // Hue\n      if (r === max) {\n        h = (g - b) / chroma + (g < b ? 6 : 0);\n      } else if (g === max) {\n        h = (b - r) / chroma + 2;\n      } else {\n        h = (r - g) / chroma + 4;\n      }\n      h /= 6;\n\n      // Saturation\n      s = l > 0.5 ? chroma / (2 - max - min) : chroma / (max + min);\n    }\n    return [h, s, l];\n  },\n  /**\n   * @param h 0.0 <= n <= 1.0\n   * @param s 0.0 <= n <= 1.0\n   * @param l 0.0 <= n <= 1.0\n   * @return Array(r, g, b)\n   */\n  hslToRgb: function (h, s, l) {\n    var m1,\n      m2,\n      hue,\n      r,\n      g,\n      b,\n      rgb = [];\n    if (s === 0) {\n      r = g = b = l * 255 + 0.5 | 0;\n      rgb = [r, g, b];\n    } else {\n      if (l <= 0.5) {\n        m2 = l * (s + 1);\n      } else {\n        m2 = l + s - l * s;\n      }\n      m1 = l * 2 - m2;\n      hue = h + 1 / 3;\n      var tmp;\n      for (var i = 0; i < 3; i += 1) {\n        if (hue < 0) {\n          hue += 1;\n        } else if (hue > 1) {\n          hue -= 1;\n        }\n        if (6 * hue < 1) {\n          tmp = m1 + (m2 - m1) * hue * 6;\n        } else if (2 * hue < 1) {\n          tmp = m2;\n        } else if (3 * hue < 2) {\n          tmp = m1 + (m2 - m1) * (2 / 3 - hue) * 6;\n        } else {\n          tmp = m1;\n        }\n        rgb[i] = tmp * 255 + 0.5 | 0;\n        hue -= 1 / 3;\n      }\n    }\n    return rgb;\n  }\n};\n\n// TODO\nImageFilters.Translate = function (srcImageData, x, y, interpolation) {};\nImageFilters.Scale = function (srcImageData, scaleX, scaleY, interpolation) {};\nImageFilters.Rotate = function (srcImageData, originX, originY, angle, resize, interpolation) {};\nImageFilters.Affine = function (srcImageData, matrix, resize, interpolation) {};\nImageFilters.UnsharpMask = function (srcImageData, level) {};\nImageFilters.ConvolutionFilter = function (srcImageData, matrixX, matrixY, matrix, divisor, bias, preserveAlpha, clamp, color, alpha) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  divisor = divisor || 1;\n  bias = bias || 0;\n\n  // default true\n  preserveAlpha !== false && (preserveAlpha = true);\n  clamp !== false && (clamp = true);\n  color = color || 0;\n  alpha = alpha || 0;\n  var index = 0,\n    rows = matrixX >> 1,\n    cols = matrixY >> 1,\n    clampR = color >> 16 & 0xFF,\n    clampG = color >> 8 & 0xFF,\n    clampB = color & 0xFF,\n    clampA = alpha * 0xFF;\n  for (var y = 0; y < srcHeight; y += 1) {\n    for (var x = 0; x < srcWidth; x += 1, index += 4) {\n      var r = 0,\n        g = 0,\n        b = 0,\n        a = 0,\n        replace = false,\n        mIndex = 0,\n        v;\n      for (var row = -rows; row <= rows; row += 1) {\n        var rowIndex = y + row,\n          offset;\n        if (0 <= rowIndex && rowIndex < srcHeight) {\n          offset = rowIndex * srcWidth;\n        } else if (clamp) {\n          offset = y * srcWidth;\n        } else {\n          replace = true;\n        }\n        for (var col = -cols; col <= cols; col += 1) {\n          var m = matrix[mIndex++];\n          if (m !== 0) {\n            var colIndex = x + col;\n            if (!(0 <= colIndex && colIndex < srcWidth)) {\n              if (clamp) {\n                colIndex = x;\n              } else {\n                replace = true;\n              }\n            }\n            if (replace) {\n              r += m * clampR;\n              g += m * clampG;\n              b += m * clampB;\n              a += m * clampA;\n            } else {\n              var p = offset + colIndex << 2;\n              r += m * srcPixels[p];\n              g += m * srcPixels[p + 1];\n              b += m * srcPixels[p + 2];\n              a += m * srcPixels[p + 3];\n            }\n          }\n        }\n      }\n      dstPixels[index] = (v = r / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n      dstPixels[index + 1] = (v = g / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n      dstPixels[index + 2] = (v = b / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n      dstPixels[index + 3] = preserveAlpha ? srcPixels[index + 3] : (v = a / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n    }\n  }\n  return dstImageData;\n};\n\n/**\n * @param threshold 0.0 <= n <= 1.0\n */\nImageFilters.Binarize = function (srcImageData, threshold) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  if (isNaN(threshold)) {\n    threshold = 0.5;\n  }\n  threshold *= 255;\n  for (var i = 0; i < srcLength; i += 4) {\n    var avg = srcPixels[i] + srcPixels[i + 1] + srcPixels[i + 2] / 3;\n    dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = avg <= threshold ? 0 : 255;\n    dstPixels[i + 3] = 255;\n  }\n  return dstImageData;\n};\nImageFilters.BlendAdd = function (srcImageData, blendImageData, dx, dy) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data,\n    blendPixels = blendImageData.data;\n  var v;\n  for (var i = 0; i < srcLength; i += 4) {\n    dstPixels[i] = (v = srcPixels[i] + blendPixels[i]) > 255 ? 255 : v;\n    dstPixels[i + 1] = (v = srcPixels[i + 1] + blendPixels[i + 1]) > 255 ? 255 : v;\n    dstPixels[i + 2] = (v = srcPixels[i + 2] + blendPixels[i + 2]) > 255 ? 255 : v;\n    dstPixels[i + 3] = 255;\n  }\n  return dstImageData;\n};\nImageFilters.BlendSubtract = function (srcImageData, blendImageData, dx, dy) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data,\n    blendPixels = blendImageData.data;\n  var v;\n  for (var i = 0; i < srcLength; i += 4) {\n    dstPixels[i] = (v = srcPixels[i] - blendPixels[i]) < 0 ? 0 : v;\n    dstPixels[i + 1] = (v = srcPixels[i + 1] - blendPixels[i + 1]) < 0 ? 0 : v;\n    dstPixels[i + 2] = (v = srcPixels[i + 2] - blendPixels[i + 2]) < 0 ? 0 : v;\n    dstPixels[i + 3] = 255;\n  }\n  return dstImageData;\n};\n\n/**\n * Algorithm based on BoxBlurFilter.java by Huxtable.com\n * @see http://www.jhlabs.com/ip/blurring.html\n * Copyright 2005 Huxtable.com. All rights reserved.\n */\nImageFilters.BoxBlur = function () {\n  var blur = function (src, dst, width, height, radius) {\n    var tableSize = radius * 2 + 1;\n    var radiusPlus1 = radius + 1;\n    var widthMinus1 = width - 1;\n    var r, g, b, a;\n    var srcIndex = 0;\n    var dstIndex;\n    var p, next, prev;\n    var i, l, x, y, nextIndex, prevIndex;\n    var sumTable = [];\n    for (i = 0, l = 256 * tableSize; i < l; i += 1) {\n      sumTable[i] = i / tableSize | 0;\n    }\n    for (y = 0; y < height; y += 1) {\n      r = g = b = a = 0;\n      dstIndex = y;\n      p = srcIndex << 2;\n      r += radiusPlus1 * src[p];\n      g += radiusPlus1 * src[p + 1];\n      b += radiusPlus1 * src[p + 2];\n      a += radiusPlus1 * src[p + 3];\n      for (i = 1; i <= radius; i += 1) {\n        p = srcIndex + (i < width ? i : widthMinus1) << 2;\n        r += src[p];\n        g += src[p + 1];\n        b += src[p + 2];\n        a += src[p + 3];\n      }\n      for (x = 0; x < width; x += 1) {\n        p = dstIndex << 2;\n        dst[p] = sumTable[r];\n        dst[p + 1] = sumTable[g];\n        dst[p + 2] = sumTable[b];\n        dst[p + 3] = sumTable[a];\n        nextIndex = x + radiusPlus1;\n        if (nextIndex > widthMinus1) {\n          nextIndex = widthMinus1;\n        }\n        prevIndex = x - radius;\n        if (prevIndex < 0) {\n          prevIndex = 0;\n        }\n        next = srcIndex + nextIndex << 2;\n        prev = srcIndex + prevIndex << 2;\n        r += src[next] - src[prev];\n        g += src[next + 1] - src[prev + 1];\n        b += src[next + 2] - src[prev + 2];\n        a += src[next + 3] - src[prev + 3];\n        dstIndex += height;\n      }\n      srcIndex += width;\n    }\n  };\n  return function (srcImageData, hRadius, vRadius, quality) {\n    var srcPixels = srcImageData.data,\n      srcWidth = srcImageData.width,\n      srcHeight = srcImageData.height,\n      srcLength = srcPixels.length,\n      dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n      dstPixels = dstImageData.data,\n      tmpImageData = this.utils.createImageData(srcWidth, srcHeight),\n      tmpPixels = tmpImageData.data;\n    for (var i = 0; i < quality; i += 1) {\n      // only use the srcPixels on the first loop\n      blur(i ? dstPixels : srcPixels, tmpPixels, srcWidth, srcHeight, hRadius);\n      blur(tmpPixels, dstPixels, srcHeight, srcWidth, vRadius);\n    }\n    return dstImageData;\n  };\n}();\n\n/**\n * @ param strength 1 <= n <= 4\n */\nImageFilters.GaussianBlur = function (srcImageData, strength) {\n  var size, matrix, divisor;\n  switch (strength) {\n    case 2:\n      size = 5;\n      matrix = [1, 1, 2, 1, 1, 1, 2, 4, 2, 1, 2, 4, 8, 4, 2, 1, 2, 4, 2, 1, 1, 1, 2, 1, 1];\n      divisor = 52;\n      break;\n    case 3:\n      size = 7;\n      matrix = [1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 4, 2, 2, 1, 2, 2, 4, 8, 4, 2, 2, 2, 4, 8, 16, 8, 4, 2, 2, 2, 4, 8, 4, 2, 2, 1, 2, 2, 4, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1];\n      divisor = 140;\n      break;\n    case 4:\n      size = 15;\n      matrix = [2, 2, 3, 4, 5, 5, 6, 6, 6, 5, 5, 4, 3, 2, 2, 2, 3, 4, 5, 7, 7, 8, 8, 8, 7, 7, 5, 4, 3, 2, 3, 4, 6, 7, 9, 10, 10, 11, 10, 10, 9, 7, 6, 4, 3, 4, 5, 7, 9, 10, 12, 13, 13, 13, 12, 10, 9, 7, 5, 4, 5, 7, 9, 11, 13, 14, 15, 16, 15, 14, 13, 11, 9, 7, 5, 5, 7, 10, 12, 14, 16, 17, 18, 17, 16, 14, 12, 10, 7, 5, 6, 8, 10, 13, 15, 17, 19, 19, 19, 17, 15, 13, 10, 8, 6, 6, 8, 11, 13, 16, 18, 19, 20, 19, 18, 16, 13, 11, 8, 6, 6, 8, 10, 13, 15, 17, 19, 19, 19, 17, 15, 13, 10, 8, 6, 5, 7, 10, 12, 14, 16, 17, 18, 17, 16, 14, 12, 10, 7, 5, 5, 7, 9, 11, 13, 14, 15, 16, 15, 14, 13, 11, 9, 7, 5, 4, 5, 7, 9, 10, 12, 13, 13, 13, 12, 10, 9, 7, 5, 4, 3, 4, 6, 7, 9, 10, 10, 11, 10, 10, 9, 7, 6, 4, 3, 2, 3, 4, 5, 7, 7, 8, 8, 8, 7, 7, 5, 4, 3, 2, 2, 2, 3, 4, 5, 5, 6, 6, 6, 5, 5, 4, 3, 2, 2];\n      divisor = 2044;\n      break;\n    default:\n      size = 3;\n      matrix = [1, 2, 1, 2, 4, 2, 1, 2, 1];\n      divisor = 16;\n      break;\n  }\n  return this.ConvolutionFilter(srcImageData, size, size, matrix, divisor, 0, false);\n};\n\n/**\n * Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>\n * @see http://incubator.quasimondo.com/processing/fast_blur_deluxe.php\n */\n/*\nCopyright (c) 2010 Mario Klingemann\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\nImageFilters.StackBlur = function () {\n  var mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\n  var shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n  function BlurStack() {\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    this.a = 0;\n    this.next = null;\n  }\n  return function (srcImageData, radius) {\n    var srcPixels = srcImageData.data,\n      srcWidth = srcImageData.width,\n      srcHeight = srcImageData.height,\n      srcLength = srcPixels.length,\n      dstImageData = this.Clone(srcImageData),\n      dstPixels = dstImageData.data;\n    var x,\n      y,\n      i,\n      p,\n      yp,\n      yi,\n      yw,\n      r_sum,\n      g_sum,\n      b_sum,\n      a_sum,\n      r_out_sum,\n      g_out_sum,\n      b_out_sum,\n      a_out_sum,\n      r_in_sum,\n      g_in_sum,\n      b_in_sum,\n      a_in_sum,\n      pr,\n      pg,\n      pb,\n      pa,\n      rbs,\n      div = radius + radius + 1,\n      w4 = srcWidth << 2,\n      widthMinus1 = srcWidth - 1,\n      heightMinus1 = srcHeight - 1,\n      radiusPlus1 = radius + 1,\n      sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2,\n      stackStart = new BlurStack(),\n      stack = stackStart,\n      stackIn,\n      stackOut,\n      stackEnd,\n      mul_sum = mul_table[radius],\n      shg_sum = shg_table[radius];\n    for (i = 1; i < div; i += 1) {\n      stack = stack.next = new BlurStack();\n      if (i == radiusPlus1) {\n        stackEnd = stack;\n      }\n    }\n    stack.next = stackStart;\n    yw = yi = 0;\n    for (y = 0; y < srcHeight; y += 1) {\n      r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n      r_out_sum = radiusPlus1 * (pr = dstPixels[yi]);\n      g_out_sum = radiusPlus1 * (pg = dstPixels[yi + 1]);\n      b_out_sum = radiusPlus1 * (pb = dstPixels[yi + 2]);\n      a_out_sum = radiusPlus1 * (pa = dstPixels[yi + 3]);\n      r_sum += sumFactor * pr;\n      g_sum += sumFactor * pg;\n      b_sum += sumFactor * pb;\n      a_sum += sumFactor * pa;\n      stack = stackStart;\n      for (i = 0; i < radiusPlus1; i += 1) {\n        stack.r = pr;\n        stack.g = pg;\n        stack.b = pb;\n        stack.a = pa;\n        stack = stack.next;\n      }\n      for (i = 1; i < radiusPlus1; i += 1) {\n        p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n        r_sum += (stack.r = pr = dstPixels[p]) * (rbs = radiusPlus1 - i);\n        g_sum += (stack.g = pg = dstPixels[p + 1]) * rbs;\n        b_sum += (stack.b = pb = dstPixels[p + 2]) * rbs;\n        a_sum += (stack.a = pa = dstPixels[p + 3]) * rbs;\n        r_in_sum += pr;\n        g_in_sum += pg;\n        b_in_sum += pb;\n        a_in_sum += pa;\n        stack = stack.next;\n      }\n      stackIn = stackStart;\n      stackOut = stackEnd;\n      for (x = 0; x < srcWidth; x += 1) {\n        dstPixels[yi] = r_sum * mul_sum >> shg_sum;\n        dstPixels[yi + 1] = g_sum * mul_sum >> shg_sum;\n        dstPixels[yi + 2] = b_sum * mul_sum >> shg_sum;\n        dstPixels[yi + 3] = a_sum * mul_sum >> shg_sum;\n        r_sum -= r_out_sum;\n        g_sum -= g_out_sum;\n        b_sum -= b_out_sum;\n        a_sum -= a_out_sum;\n        r_out_sum -= stackIn.r;\n        g_out_sum -= stackIn.g;\n        b_out_sum -= stackIn.b;\n        a_out_sum -= stackIn.a;\n        p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n        r_in_sum += stackIn.r = dstPixels[p];\n        g_in_sum += stackIn.g = dstPixels[p + 1];\n        b_in_sum += stackIn.b = dstPixels[p + 2];\n        a_in_sum += stackIn.a = dstPixels[p + 3];\n        r_sum += r_in_sum;\n        g_sum += g_in_sum;\n        b_sum += b_in_sum;\n        a_sum += a_in_sum;\n        stackIn = stackIn.next;\n        r_out_sum += pr = stackOut.r;\n        g_out_sum += pg = stackOut.g;\n        b_out_sum += pb = stackOut.b;\n        a_out_sum += pa = stackOut.a;\n        r_in_sum -= pr;\n        g_in_sum -= pg;\n        b_in_sum -= pb;\n        a_in_sum -= pa;\n        stackOut = stackOut.next;\n        yi += 4;\n      }\n      yw += srcWidth;\n    }\n    for (x = 0; x < srcWidth; x += 1) {\n      g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n      yi = x << 2;\n      r_out_sum = radiusPlus1 * (pr = dstPixels[yi]);\n      g_out_sum = radiusPlus1 * (pg = dstPixels[yi + 1]);\n      b_out_sum = radiusPlus1 * (pb = dstPixels[yi + 2]);\n      a_out_sum = radiusPlus1 * (pa = dstPixels[yi + 3]);\n      r_sum += sumFactor * pr;\n      g_sum += sumFactor * pg;\n      b_sum += sumFactor * pb;\n      a_sum += sumFactor * pa;\n      stack = stackStart;\n      for (i = 0; i < radiusPlus1; i += 1) {\n        stack.r = pr;\n        stack.g = pg;\n        stack.b = pb;\n        stack.a = pa;\n        stack = stack.next;\n      }\n      yp = srcWidth;\n      for (i = 1; i <= radius; i += 1) {\n        yi = yp + x << 2;\n        r_sum += (stack.r = pr = dstPixels[yi]) * (rbs = radiusPlus1 - i);\n        g_sum += (stack.g = pg = dstPixels[yi + 1]) * rbs;\n        b_sum += (stack.b = pb = dstPixels[yi + 2]) * rbs;\n        a_sum += (stack.a = pa = dstPixels[yi + 3]) * rbs;\n        r_in_sum += pr;\n        g_in_sum += pg;\n        b_in_sum += pb;\n        a_in_sum += pa;\n        stack = stack.next;\n        if (i < heightMinus1) {\n          yp += srcWidth;\n        }\n      }\n      yi = x;\n      stackIn = stackStart;\n      stackOut = stackEnd;\n      for (y = 0; y < srcHeight; y += 1) {\n        p = yi << 2;\n        dstPixels[p] = r_sum * mul_sum >> shg_sum;\n        dstPixels[p + 1] = g_sum * mul_sum >> shg_sum;\n        dstPixels[p + 2] = b_sum * mul_sum >> shg_sum;\n        dstPixels[p + 3] = a_sum * mul_sum >> shg_sum;\n        r_sum -= r_out_sum;\n        g_sum -= g_out_sum;\n        b_sum -= b_out_sum;\n        a_sum -= a_out_sum;\n        r_out_sum -= stackIn.r;\n        g_out_sum -= stackIn.g;\n        b_out_sum -= stackIn.b;\n        a_out_sum -= stackIn.a;\n        p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * srcWidth << 2;\n        r_sum += r_in_sum += stackIn.r = dstPixels[p];\n        g_sum += g_in_sum += stackIn.g = dstPixels[p + 1];\n        b_sum += b_in_sum += stackIn.b = dstPixels[p + 2];\n        a_sum += a_in_sum += stackIn.a = dstPixels[p + 3];\n        stackIn = stackIn.next;\n        r_out_sum += pr = stackOut.r;\n        g_out_sum += pg = stackOut.g;\n        b_out_sum += pb = stackOut.b;\n        a_out_sum += pa = stackOut.a;\n        r_in_sum -= pr;\n        g_in_sum -= pg;\n        b_in_sum -= pb;\n        a_in_sum -= pa;\n        stackOut = stackOut.next;\n        yi += srcWidth;\n      }\n    }\n    return dstImageData;\n  };\n}();\n\n/**\n * TV based algorithm\n */\nImageFilters.Brightness = function (srcImageData, brightness) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n    value += brightness;\n    return value > 255 ? 255 : value;\n  });\n  return dstImageData;\n};\n\n/**\n * GIMP algorithm modified. pretty close to fireworks\n * @param brightness -100 <= n <= 100\n * @param contrast -100 <= n <= 100\n */\nImageFilters.BrightnessContrastGimp = function (srcImageData, brightness, contrast) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data,\n    p4 = Math.PI / 4;\n\n  // fix to -1 <= n <= 1\n  brightness /= 100;\n\n  // fix to -99 <= n <= 99\n  contrast *= 0.99;\n  // fix to -1 < n < 1\n  contrast /= 100;\n  // apply GIMP formula\n  contrast = Math.tan((contrast + 1) * p4);\n\n  // get the average color\n  for (var avg = 0, i = 0; i < srcLength; i += 4) {\n    avg += srcPixels[i] * 19595 + srcPixels[i + 1] * 38470 + srcPixels[i + 2] * 7471 >> 16;\n  }\n  avg = avg / (srcLength / 4);\n  this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n    if (brightness < 0) {\n      value = value * (1 + brightness);\n    } else if (brightness > 0) {\n      value = value + (255 - value) * brightness;\n    }\n    //value += brightness;\n\n    if (contrast !== 0) {\n      value = (value - avg) * contrast + avg;\n    }\n    return value + 0.5 | 0;\n  });\n  return dstImageData;\n};\n\n/**\n * more like the new photoshop algorithm\n * @param brightness -100 <= n <= 100\n * @param contrast -100 <= n <= 100\n */\nImageFilters.BrightnessContrastPhotoshop = function (srcImageData, brightness, contrast) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n\n  // fix to 0 <= n <= 2;\n  brightness = (brightness + 100) / 100;\n  contrast = (contrast + 100) / 100;\n  this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n    value *= brightness;\n    value = (value - 127.5) * contrast + 127.5;\n    return value + 0.5 | 0;\n  });\n  return dstImageData;\n};\nImageFilters.Channels = function (srcImageData, channel) {\n  var matrix;\n  switch (channel) {\n    case 2:\n      // green\n      matrix = [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0];\n      break;\n    case 3:\n      // blue\n      matrix = [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];\n      break;\n    default:\n      // red\n      matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0];\n      break;\n  }\n  return this.ColorMatrixFilter(srcImageData, matrix);\n};\nImageFilters.Clone = function (srcImageData) {\n  return this.Copy(srcImageData, this.utils.createImageData(srcImageData.width, srcImageData.height));\n};\n\n/**\n * slower\n */\nImageFilters.CloneBuiltin = function (srcImageData) {\n  var srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    canvas = this.utils.getSampleCanvas(),\n    context = this.utils.getSampleContext(),\n    dstImageData;\n  canvas.width = srcWidth;\n  canvas.height = srcHeight;\n  context.putImageData(srcImageData, 0, 0);\n  dstImageData = context.getImageData(0, 0, srcWidth, srcHeight);\n  canvas.width = 0;\n  canvas.height = 0;\n  return dstImageData;\n};\nImageFilters.ColorMatrixFilter = function (srcImageData, matrix) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  var m0 = matrix[0],\n    m1 = matrix[1],\n    m2 = matrix[2],\n    m3 = matrix[3],\n    m4 = matrix[4],\n    m5 = matrix[5],\n    m6 = matrix[6],\n    m7 = matrix[7],\n    m8 = matrix[8],\n    m9 = matrix[9],\n    m10 = matrix[10],\n    m11 = matrix[11],\n    m12 = matrix[12],\n    m13 = matrix[13],\n    m14 = matrix[14],\n    m15 = matrix[15],\n    m16 = matrix[16],\n    m17 = matrix[17],\n    m18 = matrix[18],\n    m19 = matrix[19];\n  var value, i, r, g, b, a;\n  for (i = 0; i < srcLength; i += 4) {\n    r = srcPixels[i];\n    g = srcPixels[i + 1];\n    b = srcPixels[i + 2];\n    a = srcPixels[i + 3];\n    dstPixels[i] = (value = r * m0 + g * m1 + b * m2 + a * m3 + m4) > 255 ? 255 : value < 0 ? 0 : value | 0;\n    dstPixels[i + 1] = (value = r * m5 + g * m6 + b * m7 + a * m8 + m9) > 255 ? 255 : value < 0 ? 0 : value | 0;\n    dstPixels[i + 2] = (value = r * m10 + g * m11 + b * m12 + a * m13 + m14) > 255 ? 255 : value < 0 ? 0 : value | 0;\n    dstPixels[i + 3] = (value = r * m15 + g * m16 + b * m17 + a * m18 + m19) > 255 ? 255 : value < 0 ? 0 : value | 0;\n  }\n  return dstImageData;\n};\nImageFilters.ColorTransformFilter = function (srcImageData, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  var i, v;\n  for (i = 0; i < srcLength; i += 4) {\n    dstPixels[i] = (v = srcPixels[i] * redMultiplier + redOffset) > 255 ? 255 : v < 0 ? 0 : v;\n    dstPixels[i + 1] = (v = srcPixels[i + 1] * greenMultiplier + greenOffset) > 255 ? 255 : v < 0 ? 0 : v;\n    dstPixels[i + 2] = (v = srcPixels[i + 2] * blueMultiplier + blueOffset) > 255 ? 255 : v < 0 ? 0 : v;\n    dstPixels[i + 3] = (v = srcPixels[i + 3] * alphaMultiplier + alphaOffset) > 255 ? 255 : v < 0 ? 0 : v;\n  }\n  return dstImageData;\n};\nImageFilters.Copy = function (srcImageData, dstImageData) {\n  var srcPixels = srcImageData.data,\n    srcLength = srcPixels.length,\n    dstPixels = dstImageData.data;\n  while (srcLength--) {\n    dstPixels[srcLength] = srcPixels[srcLength];\n  }\n  return dstImageData;\n};\nImageFilters.Crop = function (srcImageData, x, y, width, height) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(width, height),\n    dstPixels = dstImageData.data;\n  var srcLeft = Math.max(x, 0),\n    srcTop = Math.max(y, 0),\n    srcRight = Math.min(x + width, srcWidth),\n    srcBottom = Math.min(y + height, srcHeight),\n    dstLeft = srcLeft - x,\n    dstTop = srcTop - y,\n    srcRow,\n    srcCol,\n    srcIndex,\n    dstIndex;\n  for (srcRow = srcTop, dstRow = dstTop; srcRow < srcBottom; srcRow += 1, dstRow += 1) {\n    for (srcCol = srcLeft, dstCol = dstLeft; srcCol < srcRight; srcCol += 1, dstCol += 1) {\n      srcIndex = srcRow * srcWidth + srcCol << 2;\n      dstIndex = dstRow * width + dstCol << 2;\n      dstPixels[dstIndex] = srcPixels[srcIndex];\n      dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n      dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n      dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n    }\n  }\n  return dstImageData;\n};\nImageFilters.CropBuiltin = function (srcImageData, x, y, width, height) {\n  var srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    canvas = this.utils.getSampleCanvas(),\n    context = this.utils.getSampleContext();\n  canvas.width = srcWidth;\n  canvas.height = srcHeight;\n  context.putImageData(srcImageData, 0, 0);\n  var result = context.getImageData(x, y, width, height);\n  canvas.width = 0;\n  canvas.height = 0;\n  return result;\n};\n\n/**\n * sets to the average of the highest and lowest contrast\n */\nImageFilters.Desaturate = function (srcImageData) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  for (var i = 0; i < srcLength; i += 4) {\n    var r = srcPixels[i],\n      g = srcPixels[i + 1],\n      b = srcPixels[i + 2],\n      max = r > g ? r > b ? r : b : g > b ? g : b,\n      min = r < g ? r < b ? r : b : g < b ? g : b,\n      avg = (max + min) / 2 + 0.5 | 0;\n    dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = avg;\n    dstPixels[i + 3] = srcPixels[i + 3];\n  }\n  return dstImageData;\n};\n\n/**\n * TODO: use bilinear\n */\nImageFilters.DisplacementMapFilter = function (srcImageData, mapImageData, mapX, mapY, componentX, componentY, scaleX, scaleY, mode) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    //        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstImageData = ImageFilters.Clone(srcImageData),\n    dstPixels = dstImageData.data;\n  mapX || (mapX = 0);\n  mapY || (mapY = 0);\n  componentX || (componentX = 0); // red?\n  componentY || (componentY = 0);\n  scaleX || (scaleX = 0);\n  scaleY || (scaleY = 0);\n  mode || (mode = 2); // wrap\n\n  var mapWidth = mapImageData.width,\n    mapHeight = mapImageData.height,\n    mapPixels = mapImageData.data,\n    mapRight = mapWidth + mapX,\n    mapBottom = mapHeight + mapY,\n    dstIndex,\n    srcIndex,\n    mapIndex,\n    cx,\n    cy,\n    tx,\n    ty,\n    x,\n    y;\n  for (x = 0; x < srcWidth; x += 1) {\n    for (y = 0; y < srcHeight; y += 1) {\n      dstIndex = y * srcWidth + x << 2;\n      if (x < mapX || y < mapY || x >= mapRight || y >= mapBottom) {\n        // out of the map bounds\n        // copy src to dst\n        srcIndex = dstIndex;\n      } else {\n        // apply map\n        mapIndex = (y - mapY) * mapWidth + (x - mapX) << 2;\n\n        // tx = x + ((componentX(x, y) - 128) * scaleX) / 256\n        cx = mapPixels[mapIndex + componentX];\n        tx = x + ((cx - 128) * scaleX >> 8);\n\n        // tx = y + ((componentY(x, y) - 128) * scaleY) / 256\n        cy = mapPixels[mapIndex + componentY];\n        ty = y + ((cy - 128) * scaleY >> 8);\n        srcIndex = ImageFilters.utils.getPixelIndex(tx + 0.5 | 0, ty + 0.5 | 0, srcWidth, srcHeight, mode);\n        if (srcIndex === null) {\n          // if mode == ignore and (tx,ty) is out of src bounds\n          // then copy (x,y) to dst\n          srcIndex = dstIndex;\n        }\n      }\n      dstPixels[dstIndex] = srcPixels[srcIndex];\n      dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n      dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n      dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n    }\n  }\n  return dstImageData;\n};\n\n/**\n * Floyd-Steinberg algorithm\n * @param levels 2 <= n <= 255\n */\nImageFilters.Dither = function (srcImageData, levels) {\n  var srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    dstImageData = this.Clone(srcImageData),\n    dstPixels = dstImageData.data;\n  levels = levels < 2 ? 2 : levels > 255 ? 255 : levels;\n\n  // Build a color map using the same algorithm as the posterize filter.\n  var posterize,\n    levelMap = [],\n    levelsMinus1 = levels - 1,\n    j = 0,\n    k = 0,\n    i;\n  for (i = 0; i < levels; i += 1) {\n    levelMap[i] = 255 * i / levelsMinus1;\n  }\n  posterize = this.utils.buildMap(function (value) {\n    var ret = levelMap[j];\n    k += levels;\n    if (k > 255) {\n      k -= 255;\n      j += 1;\n    }\n    return ret;\n  });\n\n  // Apply the dithering algorithm to each pixel\n  var x,\n    y,\n    index,\n    old_r,\n    old_g,\n    old_b,\n    new_r,\n    new_g,\n    new_b,\n    err_r,\n    err_g,\n    err_b,\n    nbr_r,\n    nbr_g,\n    nbr_b,\n    srcWidthMinus1 = srcWidth - 1,\n    srcHeightMinus1 = srcHeight - 1,\n    A = 7 / 16,\n    B = 3 / 16,\n    C = 5 / 16,\n    D = 1 / 16;\n  for (y = 0; y < srcHeight; y += 1) {\n    for (x = 0; x < srcWidth; x += 1) {\n      // Get the current pixel.\n      index = y * srcWidth + x << 2;\n      old_r = dstPixels[index];\n      old_g = dstPixels[index + 1];\n      old_b = dstPixels[index + 2];\n\n      // Quantize using the color map\n      new_r = posterize[old_r];\n      new_g = posterize[old_g];\n      new_b = posterize[old_b];\n\n      // Set the current pixel.\n      dstPixels[index] = new_r;\n      dstPixels[index + 1] = new_g;\n      dstPixels[index + 2] = new_b;\n\n      // Quantization errors\n      err_r = old_r - new_r;\n      err_g = old_g - new_g;\n      err_b = old_b - new_b;\n\n      // Apply the matrix.\n      // x + 1, y\n      index += 1 << 2;\n      if (x < srcWidthMinus1) {\n        nbr_r = dstPixels[index] + A * err_r;\n        nbr_g = dstPixels[index + 1] + A * err_g;\n        nbr_b = dstPixels[index + 2] + A * err_b;\n        dstPixels[index] = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n        dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n        dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n      }\n\n      // x - 1, y + 1\n      index += srcWidth - 2 << 2;\n      if (x > 0 && y < srcHeightMinus1) {\n        nbr_r = dstPixels[index] + B * err_r;\n        nbr_g = dstPixels[index + 1] + B * err_g;\n        nbr_b = dstPixels[index + 2] + B * err_b;\n        dstPixels[index] = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n        dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n        dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n      }\n\n      // x, y + 1\n      index += 1 << 2;\n      if (y < srcHeightMinus1) {\n        nbr_r = dstPixels[index] + C * err_r;\n        nbr_g = dstPixels[index + 1] + C * err_g;\n        nbr_b = dstPixels[index + 2] + C * err_b;\n        dstPixels[index] = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n        dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n        dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n      }\n\n      // x + 1, y + 1\n      index += 1 << 2;\n      if (x < srcWidthMinus1 && y < srcHeightMinus1) {\n        nbr_r = dstPixels[index] + D * err_r;\n        nbr_g = dstPixels[index + 1] + D * err_g;\n        nbr_b = dstPixels[index + 2] + D * err_b;\n        dstPixels[index] = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n        dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n        dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n      }\n    }\n  }\n  return dstImageData;\n};\nImageFilters.Edge = function (srcImageData) {\n  //pretty close to Fireworks 'Find Edges' effect\n  return this.ConvolutionFilter(srcImageData, 3, 3, [-1, -1, -1, -1, 8, -1, -1, -1, -1]);\n};\nImageFilters.Emboss = function (srcImageData) {\n  return this.ConvolutionFilter(srcImageData, 3, 3, [-2, -1, 0, -1, 1, 1, 0, 1, 2]);\n};\nImageFilters.Enrich = function (srcImageData) {\n  return this.ConvolutionFilter(srcImageData, 3, 3, [0, -2, 0, -2, 20, -2, 0, -2, 0], 10, -40);\n};\nImageFilters.Flip = function (srcImageData, vertical) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  var x, y, srcIndex, dstIndex, i;\n  for (y = 0; y < srcHeight; y += 1) {\n    for (x = 0; x < srcWidth; x += 1) {\n      srcIndex = y * srcWidth + x << 2;\n      if (vertical) {\n        dstIndex = (srcHeight - y - 1) * srcWidth + x << 2;\n      } else {\n        dstIndex = y * srcWidth + (srcWidth - x - 1) << 2;\n      }\n      dstPixels[dstIndex] = srcPixels[srcIndex];\n      dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n      dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n      dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n    }\n  }\n  return dstImageData;\n};\nImageFilters.Gamma = function (srcImageData, gamma) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n    value = 255 * Math.pow(value / 255, 1 / gamma) + 0.5;\n    return value > 255 ? 255 : value + 0.5 | 0;\n  });\n  return dstImageData;\n};\nImageFilters.GrayScale = function (srcImageData) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  for (var i = 0; i < srcLength; i += 4) {\n    var intensity = srcPixels[i] * 19595 + srcPixels[i + 1] * 38470 + srcPixels[i + 2] * 7471 >> 16;\n    //var intensity = (srcPixels[i] * 0.3086 + srcPixels[i + 1] * 0.6094 + srcPixels[i + 2] * 0.0820) | 0;\n    dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = intensity;\n    dstPixels[i + 3] = srcPixels[i + 3];\n  }\n  return dstImageData;\n};\n\n/**\n * @param hueDelta  -180 <= n <= 180\n * @param satDelta  -100 <= n <= 100\n * @param lightness -100 <= n <= 100\n */\nImageFilters.HSLAdjustment = function (srcImageData, hueDelta, satDelta, lightness) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  hueDelta /= 360;\n  satDelta /= 100;\n  lightness /= 100;\n  var rgbToHsl = this.utils.rgbToHsl;\n  var hslToRgb = this.utils.hslToRgb;\n  var h, s, l, hsl, rgb, i;\n  for (i = 0; i < srcLength; i += 4) {\n    // convert to HSL\n    hsl = rgbToHsl(srcPixels[i], srcPixels[i + 1], srcPixels[i + 2]);\n\n    // hue\n    h = hsl[0] + hueDelta;\n    while (h < 0) {\n      h += 1;\n    }\n    while (h > 1) {\n      h -= 1;\n    }\n\n    // saturation\n    s = hsl[1] + hsl[1] * satDelta;\n    if (s < 0) {\n      s = 0;\n    } else if (s > 1) {\n      s = 1;\n    }\n\n    // lightness\n    l = hsl[2];\n    if (lightness > 0) {\n      l += (1 - l) * lightness;\n    } else if (lightness < 0) {\n      l += l * lightness;\n    }\n\n    // convert back to rgb\n    rgb = hslToRgb(h, s, l);\n    dstPixels[i] = rgb[0];\n    dstPixels[i + 1] = rgb[1];\n    dstPixels[i + 2] = rgb[2];\n    dstPixels[i + 3] = srcPixels[i + 3];\n  }\n  return dstImageData;\n};\nImageFilters.Invert = function (srcImageData) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n    return 255 - value;\n  });\n  return dstImageData;\n};\nImageFilters.Mosaic = function (srcImageData, blockSize) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  var cols = Math.ceil(srcWidth / blockSize),\n    rows = Math.ceil(srcHeight / blockSize),\n    row,\n    col,\n    x_start,\n    x_end,\n    y_start,\n    y_end,\n    x,\n    y,\n    yIndex,\n    index,\n    size,\n    r,\n    g,\n    b,\n    a;\n  for (row = 0; row < rows; row += 1) {\n    y_start = row * blockSize;\n    y_end = y_start + blockSize;\n    if (y_end > srcHeight) {\n      y_end = srcHeight;\n    }\n    for (col = 0; col < cols; col += 1) {\n      x_start = col * blockSize;\n      x_end = x_start + blockSize;\n      if (x_end > srcWidth) {\n        x_end = srcWidth;\n      }\n\n      // get the average color from the src\n      r = g = b = a = 0;\n      size = (x_end - x_start) * (y_end - y_start);\n      for (y = y_start; y < y_end; y += 1) {\n        yIndex = y * srcWidth;\n        for (x = x_start; x < x_end; x += 1) {\n          index = yIndex + x << 2;\n          r += srcPixels[index];\n          g += srcPixels[index + 1];\n          b += srcPixels[index + 2];\n          a += srcPixels[index + 3];\n        }\n      }\n      r = r / size + 0.5 | 0;\n      g = g / size + 0.5 | 0;\n      b = b / size + 0.5 | 0;\n      a = a / size + 0.5 | 0;\n\n      // fill the dst with that color\n      for (y = y_start; y < y_end; y += 1) {\n        yIndex = y * srcWidth;\n        for (x = x_start; x < x_end; x += 1) {\n          index = yIndex + x << 2;\n          dstPixels[index] = r;\n          dstPixels[index + 1] = g;\n          dstPixels[index + 2] = b;\n          dstPixels[index + 3] = a;\n        }\n      }\n    }\n  }\n  return dstImageData;\n};\n\n/**\n * @param range  1 <= n <= 5\n * @param levels 1 <= n <= 256\n */\nImageFilters.Oil = function (srcImageData, range, levels) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  var index = 0,\n    rh = [],\n    gh = [],\n    bh = [],\n    rt = [],\n    gt = [],\n    bt = [],\n    x,\n    y,\n    i,\n    row,\n    col,\n    rowIndex,\n    colIndex,\n    offset,\n    srcIndex,\n    sr,\n    sg,\n    sb,\n    ri,\n    gi,\n    bi,\n    r,\n    g,\n    b;\n  for (y = 0; y < srcHeight; y += 1) {\n    for (x = 0; x < srcWidth; x += 1) {\n      for (i = 0; i < levels; i += 1) {\n        rh[i] = gh[i] = bh[i] = rt[i] = gt[i] = bt[i] = 0;\n      }\n      for (row = -range; row <= range; row += 1) {\n        rowIndex = y + row;\n        if (rowIndex < 0 || rowIndex >= srcHeight) {\n          continue;\n        }\n        offset = rowIndex * srcWidth;\n        for (col = -range; col <= range; col += 1) {\n          colIndex = x + col;\n          if (colIndex < 0 || colIndex >= srcWidth) {\n            continue;\n          }\n          srcIndex = offset + colIndex << 2;\n          sr = srcPixels[srcIndex];\n          sg = srcPixels[srcIndex + 1];\n          sb = srcPixels[srcIndex + 2];\n          ri = sr * levels >> 8;\n          gi = sg * levels >> 8;\n          bi = sb * levels >> 8;\n          rt[ri] += sr;\n          gt[gi] += sg;\n          bt[bi] += sb;\n          rh[ri] += 1;\n          gh[gi] += 1;\n          bh[bi] += 1;\n        }\n      }\n      r = g = b = 0;\n      for (i = 1; i < levels; i += 1) {\n        if (rh[i] > rh[r]) {\n          r = i;\n        }\n        if (gh[i] > gh[g]) {\n          g = i;\n        }\n        if (bh[i] > bh[b]) {\n          b = i;\n        }\n      }\n      dstPixels[index] = rt[r] / rh[r] | 0;\n      dstPixels[index + 1] = gt[g] / gh[g] | 0;\n      dstPixels[index + 2] = bt[b] / bh[b] | 0;\n      dstPixels[index + 3] = srcPixels[index + 3];\n      index += 4;\n    }\n  }\n  return dstImageData;\n};\nImageFilters.OpacityFilter = function (srcImageData, opacity) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  for (var i = 0; i < srcLength; i += 4) {\n    dstPixels[i] = srcPixels[i];\n    dstPixels[i + 1] = srcPixels[i + 1];\n    dstPixels[i + 2] = srcPixels[i + 2];\n    dstPixels[i + 3] = opacity;\n  }\n  return dstImageData;\n};\n\n/**\n * @param levels 2 <= n <= 255\n */\nImageFilters.Posterize = function (srcImageData, levels) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  levels = levels < 2 ? 2 : levels > 255 ? 255 : levels;\n  var levelMap = [],\n    levelsMinus1 = levels - 1,\n    j = 0,\n    k = 0,\n    i;\n  for (i = 0; i < levels; i += 1) {\n    levelMap[i] = 255 * i / levelsMinus1;\n  }\n  this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n    var ret = levelMap[j];\n    k += levels;\n    if (k > 255) {\n      k -= 255;\n      j += 1;\n    }\n    return ret;\n  });\n  return dstImageData;\n};\n\n/**\n * @param scale 0.0 <= n <= 5.0\n */\nImageFilters.Rescale = function (srcImageData, scale) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n    value *= scale;\n    return value > 255 ? 255 : value + 0.5 | 0;\n  });\n  return dstImageData;\n};\n\n/**\n * Nearest neighbor\n */\nImageFilters.ResizeNearestNeighbor = function (srcImageData, width, height) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(width, height),\n    dstPixels = dstImageData.data;\n  var xFactor = srcWidth / width,\n    yFactor = srcHeight / height,\n    dstIndex = 0,\n    srcIndex,\n    x,\n    y,\n    offset;\n  for (y = 0; y < height; y += 1) {\n    offset = (y * yFactor | 0) * srcWidth;\n    for (x = 0; x < width; x += 1) {\n      srcIndex = offset + x * xFactor << 2;\n      dstPixels[dstIndex] = srcPixels[srcIndex];\n      dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n      dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n      dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n      dstIndex += 4;\n    }\n  }\n  return dstImageData;\n};\n\n/**\n * Bilinear\n */\nImageFilters.Resize = function (srcImageData, width, height) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(width, height),\n    dstPixels = dstImageData.data;\n  var xFactor = srcWidth / width,\n    yFactor = srcHeight / height,\n    dstIndex = 0,\n    x,\n    y;\n  for (y = 0; y < height; y += 1) {\n    for (x = 0; x < width; x += 1) {\n      this.utils.copyBilinear(srcPixels, x * xFactor, y * yFactor, srcWidth, srcHeight, dstPixels, dstIndex, 0);\n      dstIndex += 4;\n    }\n  }\n  return dstImageData;\n};\n\n/**\n * faster resizing using the builtin context.scale()\n * the resizing algorithm may be different between browsers\n * this might not work if the image is transparent.\n * to fix that we probably need two contexts\n */\nImageFilters.ResizeBuiltin = function (srcImageData, width, height) {\n  var srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    canvas = this.utils.getSampleCanvas(),\n    context = this.utils.getSampleContext(),\n    dstImageData;\n  canvas.width = Math.max(srcWidth, width);\n  canvas.height = Math.max(srcHeight, height);\n  context.save();\n  context.putImageData(srcImageData, 0, 0);\n  context.scale(width / srcWidth, height / srcHeight);\n  context.drawImage(canvas, 0, 0);\n  dstImageData = context.getImageData(0, 0, width, height);\n  context.restore();\n  canvas.width = 0;\n  canvas.height = 0;\n  return dstImageData;\n};\nImageFilters.Sepia = function (srcImageData) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  var r, g, b, i, value;\n  for (i = 0; i < srcLength; i += 4) {\n    r = srcPixels[i];\n    g = srcPixels[i + 1];\n    b = srcPixels[i + 2];\n    dstPixels[i] = (value = r * 0.393 + g * 0.769 + b * 0.189) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n    dstPixels[i + 1] = (value = r * 0.349 + g * 0.686 + b * 0.168) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n    dstPixels[i + 2] = (value = r * 0.272 + g * 0.534 + b * 0.131) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n    dstPixels[i + 3] = srcPixels[i + 3];\n  }\n  return dstImageData;\n};\n\n/**\n * @param factor 1 <= n\n */\nImageFilters.Sharpen = function (srcImageData, factor) {\n  //Convolution formula from VIGRA\n  return this.ConvolutionFilter(srcImageData, 3, 3, [-factor / 16, -factor / 8, -factor / 16, -factor / 8, factor * 0.75 + 1, -factor / 8, -factor / 16, -factor / 8, -factor / 16]);\n};\nImageFilters.Solarize = function (srcImageData) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n  this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n    return value > 127 ? (value - 127.5) * 2 : (127.5 - value) * 2;\n  });\n  return dstImageData;\n};\nImageFilters.Transpose = function (srcImageData) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcHeight, srcWidth),\n    dstPixels = dstImageData.data;\n  var srcIndex, dstIndex;\n  for (y = 0; y < srcHeight; y += 1) {\n    for (x = 0; x < srcWidth; x += 1) {\n      srcIndex = y * srcWidth + x << 2;\n      dstIndex = x * srcHeight + y << 2;\n      dstPixels[dstIndex] = srcPixels[srcIndex];\n      dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n      dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n      dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n    }\n  }\n  return dstImageData;\n};\n\n/**\n * @param centerX 0.0 <= n <= 1.0\n * @param centerY 0.0 <= n <= 1.0\n * @param radius\n * @param angle(degree)\n * @param smooth\n */\nImageFilters.Twril = function (srcImageData, centerX, centerY, radius, angle, edge, smooth) {\n  var srcPixels = srcImageData.data,\n    srcWidth = srcImageData.width,\n    srcHeight = srcImageData.height,\n    srcLength = srcPixels.length,\n    dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n    dstPixels = dstImageData.data;\n\n  //convert position to px\n  centerX = srcWidth * centerX;\n  centerY = srcHeight * centerY;\n\n  // degree to radian\n  angle *= Math.PI / 180;\n  var radius2 = radius * radius,\n    max_y = srcHeight - 1,\n    max_x = srcWidth - 1,\n    dstIndex = 0,\n    x,\n    y,\n    dx,\n    dy,\n    distance,\n    a,\n    tx,\n    ty,\n    srcIndex,\n    pixel,\n    i;\n  for (y = 0; y < srcHeight; y += 1) {\n    for (x = 0; x < srcWidth; x += 1) {\n      dx = x - centerX;\n      dy = y - centerY;\n      distance = dx * dx + dy * dy;\n      if (distance > radius2) {\n        // out of the effected area. just copy the pixel\n        dstPixels[dstIndex] = srcPixels[dstIndex];\n        dstPixels[dstIndex + 1] = srcPixels[dstIndex + 1];\n        dstPixels[dstIndex + 2] = srcPixels[dstIndex + 2];\n        dstPixels[dstIndex + 3] = srcPixels[dstIndex + 3];\n      } else {\n        // main formula\n        distance = Math.sqrt(distance);\n        a = Math.atan2(dy, dx) + angle * (radius - distance) / radius;\n        tx = centerX + distance * Math.cos(a);\n        ty = centerY + distance * Math.sin(a);\n\n        // copy target pixel\n        if (smooth) {\n          // bilinear\n          this.utils.copyBilinear(srcPixels, tx, ty, srcWidth, srcHeight, dstPixels, dstIndex, edge);\n        } else {\n          // nearest neighbor\n          // round tx, ty\n          // TODO edge actions!!\n          srcIndex = (ty + 0.5 | 0) * srcWidth + (tx + 0.5 | 0) << 2;\n          dstPixels[dstIndex] = srcPixels[srcIndex];\n          dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n          dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n          dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n      }\n      dstIndex += 4;\n    }\n  }\n  return dstImageData;\n};\nmodule.exports = ImageFilters;","map":{"version":3,"names":["ImageFilters","utils","initSampleCanvas","_canvas","document","createElement","_context","getContext","width","height","getSampleCanvas","getSampleContext","createImageData","w","h","ImageData","clamp","value","buildMap","f","m","k","v","applyMap","src","dst","map","i","l","length","mapRGB","func","getPixelIndex","x","y","edge","getPixel","getPixelByIndex","copyBilinear","dstIndex","fx","fy","wx","wy","nw","ne","sw","se","cx","cy","r","g","b","a","rgbToHsl","max","min","chroma","s","hslToRgb","m1","m2","hue","rgb","tmp","Translate","srcImageData","interpolation","Scale","scaleX","scaleY","Rotate","originX","originY","angle","resize","Affine","matrix","UnsharpMask","level","ConvolutionFilter","matrixX","matrixY","divisor","bias","preserveAlpha","color","alpha","srcPixels","data","srcWidth","srcHeight","srcLength","dstImageData","dstPixels","index","rows","cols","clampR","clampG","clampB","clampA","replace","mIndex","row","rowIndex","offset","col","colIndex","p","Binarize","threshold","isNaN","avg","BlendAdd","blendImageData","dx","dy","blendPixels","BlendSubtract","BoxBlur","blur","radius","tableSize","radiusPlus1","widthMinus1","srcIndex","next","prev","nextIndex","prevIndex","sumTable","hRadius","vRadius","quality","tmpImageData","tmpPixels","GaussianBlur","strength","size","StackBlur","mul_table","shg_table","BlurStack","Clone","yp","yi","yw","r_sum","g_sum","b_sum","a_sum","r_out_sum","g_out_sum","b_out_sum","a_out_sum","r_in_sum","g_in_sum","b_in_sum","a_in_sum","pr","pg","pb","pa","rbs","div","w4","heightMinus1","sumFactor","stackStart","stack","stackIn","stackOut","stackEnd","mul_sum","shg_sum","Brightness","brightness","BrightnessContrastGimp","contrast","p4","Math","PI","tan","BrightnessContrastPhotoshop","Channels","channel","ColorMatrixFilter","Copy","CloneBuiltin","canvas","context","putImageData","getImageData","m0","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","ColorTransformFilter","redMultiplier","greenMultiplier","blueMultiplier","alphaMultiplier","redOffset","greenOffset","blueOffset","alphaOffset","Crop","srcLeft","srcTop","srcRight","srcBottom","dstLeft","dstTop","srcRow","srcCol","dstRow","dstCol","CropBuiltin","result","Desaturate","DisplacementMapFilter","mapImageData","mapX","mapY","componentX","componentY","mode","mapWidth","mapHeight","mapPixels","mapRight","mapBottom","mapIndex","tx","ty","Dither","levels","posterize","levelMap","levelsMinus1","j","ret","old_r","old_g","old_b","new_r","new_g","new_b","err_r","err_g","err_b","nbr_r","nbr_g","nbr_b","srcWidthMinus1","srcHeightMinus1","A","B","C","D","Edge","Emboss","Enrich","Flip","vertical","Gamma","gamma","pow","GrayScale","intensity","HSLAdjustment","hueDelta","satDelta","lightness","hsl","Invert","Mosaic","blockSize","ceil","x_start","x_end","y_start","y_end","yIndex","Oil","range","rh","gh","bh","rt","gt","bt","sr","sg","sb","ri","gi","bi","OpacityFilter","opacity","Posterize","Rescale","scale","ResizeNearestNeighbor","xFactor","yFactor","Resize","ResizeBuiltin","save","drawImage","restore","Sepia","Sharpen","factor","Solarize","Transpose","Twril","centerX","centerY","smooth","radius2","max_y","max_x","distance","pixel","sqrt","atan2","cos","sin","module","exports"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/node_modules/canvas-filters/imagefilters.js"],"sourcesContent":["var ImageFilters = {};\nImageFilters.utils = {\n    initSampleCanvas: function () {\n        var _canvas = document.createElement('canvas'),\n            _context = _canvas.getContext('2d');\n\n        _canvas.width = 0;\n        _canvas.height = 0;\n\n        this.getSampleCanvas = function () {\n            return _canvas;\n        };\n        this.getSampleContext = function () {\n            return _context;\n        };\n        this.createImageData = (_context.createImageData) ? function (w, h) {\n                return _context.createImageData(w, h);\n            } : function (w, h) {\n                return new ImageData(w, h);\n            };\n    },\n    getSampleCanvas: function () {\n        this.initSampleCanvas();\n        return this.getSampleCanvas();\n    },\n    getSampleContext: function () {\n        this.initSampleCanvas();\n        return this.getSampleContext();\n    },\n    createImageData: function (w, h) {\n        this.initSampleCanvas();\n        return this.createImageData(w, h);\n    },\n    clamp: function (value) {\n        return value > 255 ? 255 : value < 0 ? 0 : value;\n    },\n    buildMap: function (f) {\n        for (var m = [], k = 0, v; k < 256; k += 1) {\n            m[k] = (v = f(k)) > 255 ? 255 : v < 0 ? 0 : v | 0;\n        }\n        return m;\n    },\n    applyMap: function (src, dst, map) {\n        for (var i = 0, l = src.length; i < l; i += 4) {\n            dst[i]     = map[src[i]];\n            dst[i + 1] = map[src[i + 1]];\n            dst[i + 2] = map[src[i + 2]];\n            dst[i + 3] = src[i + 3];\n        }\n    },\n    mapRGB: function (src, dst, func) {\n        this.applyMap(src, dst, this.buildMap(func));\n    },\n    getPixelIndex: function (x, y, width, height, edge) {\n        if (x < 0 || x >= width || y < 0 || y >= height) {\n            switch (edge) {\n            case 1: // clamp\n                x = x < 0 ? 0 : x >= width ? width - 1 : x;\n                y = y < 0 ? 0 : y >= height ? height - 1 : y;\n                break;\n            case 2: // wrap\n                x = (x %= width) < 0 ? x + width : x;\n                y = (y %= height) < 0 ? y + height : y;\n                break;\n            default: // transparent\n                return null;\n            }\n        }\n        return (y * width + x) << 2;\n    },\n    getPixel: function (src, x, y, width, height, edge) {\n        if (x < 0 || x >= width || y < 0 || y >= height) {\n            switch (edge) {\n            case 1: // clamp\n                x = x < 0 ? 0 : x >= width ? width - 1 : x;\n                y = y < 0 ? 0 : y >= height ? height - 1 : y;\n                break;\n            case 2: // wrap\n                x = (x %= width) < 0 ? x + width : x;\n                y = (y %= height) < 0 ? y + height : y;\n                break;\n            default: // transparent\n                return 0;\n            }\n        }\n\n        var i = (y * width + x) << 2;\n\n        // ARGB\n        return src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n    },\n    getPixelByIndex: function (src, i) {\n        return src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n    },\n    /**\n     * one of the most important functions in this library.\n     * I want to make this as fast as possible.\n     */\n    copyBilinear: function (src, x, y, width, height, dst, dstIndex, edge) {\n        var fx = x < 0 ? x - 1 | 0 : x | 0, // Math.floor(x)\n            fy = y < 0 ? y - 1 | 0 : y | 0, // Math.floor(y)\n            wx = x - fx,\n            wy = y - fy,\n            i,\n            nw = 0, ne = 0, sw = 0, se = 0,\n            cx, cy,\n            r, g, b, a;\n\n        if (fx >= 0 && fx < (width - 1) && fy >= 0 && fy < (height - 1)) {\n            // in bounds, no edge actions required\n            i = (fy * width + fx) << 2;\n\n            if (wx || wy) {\n                nw = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i += 4;\n                ne = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i = (i - 8) + (width << 2);\n                sw = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i += 4;\n                se = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n            }\n            else {\n                // no interpolation required\n                dst[dstIndex]     = src[i];\n                dst[dstIndex + 1] = src[i + 1];\n                dst[dstIndex + 2] = src[i + 2];\n                dst[dstIndex + 3] = src[i + 3];\n                return;\n            }\n        }\n        else {\n            // edge actions required\n            nw = this.getPixel(src, fx, fy, width, height, edge);\n\n            if (wx || wy) {\n                ne = this.getPixel(src, fx + 1, fy, width, height, edge);\n                sw = this.getPixel(src, fx, fy + 1, width, height, edge);\n                se = this.getPixel(src, fx + 1, fy + 1, width, height, edge);\n            }\n            else {\n                // no interpolation required\n                dst[dstIndex]     = nw >> 16 & 0xFF;\n                dst[dstIndex + 1] = nw >> 8  & 0xFF;\n                dst[dstIndex + 2] = nw       & 0xFF;\n                dst[dstIndex + 3] = nw >> 24 & 0xFF;\n                return;\n            }\n        }\n\n        cx = 1 - wx;\n        cy = 1 - wy;\n        r = ((nw >> 16 & 0xFF) * cx + (ne >> 16 & 0xFF) * wx) * cy + ((sw >> 16 & 0xFF) * cx + (se >> 16 & 0xFF) * wx) * wy;\n        g = ((nw >> 8  & 0xFF) * cx + (ne >> 8  & 0xFF) * wx) * cy + ((sw >> 8  & 0xFF) * cx + (se >> 8  & 0xFF) * wx) * wy;\n        b = ((nw       & 0xFF) * cx + (ne       & 0xFF) * wx) * cy + ((sw       & 0xFF) * cx + (se       & 0xFF) * wx) * wy;\n        a = ((nw >> 24 & 0xFF) * cx + (ne >> 24 & 0xFF) * wx) * cy + ((sw >> 24 & 0xFF) * cx + (se >> 24 & 0xFF) * wx) * wy;\n\n        dst[dstIndex]     = r > 255 ? 255 : r < 0 ? 0 : r | 0;\n        dst[dstIndex + 1] = g > 255 ? 255 : g < 0 ? 0 : g | 0;\n        dst[dstIndex + 2] = b > 255 ? 255 : b < 0 ? 0 : b | 0;\n        dst[dstIndex + 3] = a > 255 ? 255 : a < 0 ? 0 : a | 0;\n    },\n    /**\n     * @param r 0 <= n <= 255\n     * @param g 0 <= n <= 255\n     * @param b 0 <= n <= 255\n     * @return Array(h, s, l)\n     */\n    rgbToHsl: function (r, g, b) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n//        var max = Math.max(r, g, b),\n//            min = Math.min(r, g, b),\n        var max = (r > g) ? (r > b) ? r : b : (g > b) ? g : b,\n            min = (r < g) ? (r < b) ? r : b : (g < b) ? g : b,\n            chroma = max - min,\n            h = 0,\n            s = 0,\n            // Lightness\n            l = (min + max) / 2;\n\n        if (chroma !== 0) {\n            // Hue\n            if (r === max) {\n                h = (g - b) / chroma + ((g < b) ? 6 : 0);\n            }\n            else if (g === max) {\n                h = (b - r) / chroma + 2;\n            }\n            else {\n                h = (r - g) / chroma + 4;\n            }\n            h /= 6;\n\n            // Saturation\n            s = (l > 0.5) ? chroma / (2 - max - min) : chroma / (max + min);\n        }\n\n        return [h, s, l];\n    },\n    /**\n     * @param h 0.0 <= n <= 1.0\n     * @param s 0.0 <= n <= 1.0\n     * @param l 0.0 <= n <= 1.0\n     * @return Array(r, g, b)\n     */\n    hslToRgb: function (h, s, l) {\n        var m1, m2, hue,\n            r, g, b,\n            rgb = [];\n\n        if (s === 0) {\n            r = g = b = l * 255 + 0.5 | 0;\n            rgb = [r, g, b];\n        }\n        else {\n            if (l <= 0.5) {\n                m2 = l * (s + 1);\n            }\n            else {\n                m2 = l + s - l * s;\n            }\n\n            m1 = l * 2 - m2;\n            hue = h + 1 / 3;\n\n            var tmp;\n            for (var i = 0; i < 3; i += 1) {\n                if (hue < 0) {\n                    hue += 1;\n                }\n                else if (hue > 1) {\n                    hue -= 1;\n                }\n\n                if (6 * hue < 1) {\n                    tmp = m1 + (m2 - m1) * hue * 6;\n                }\n                else if (2 * hue < 1) {\n                    tmp = m2;\n                }\n                else if (3 * hue < 2) {\n                    tmp = m1 + (m2 - m1) * (2 / 3 - hue) * 6;\n                }\n                else {\n                    tmp = m1;\n                }\n\n                rgb[i] = tmp * 255 + 0.5 | 0;\n\n                hue -= 1 / 3;\n            }\n        }\n\n        return rgb;\n    }\n};\n\n\n// TODO\nImageFilters.Translate = function (srcImageData, x, y, interpolation) {\n\n};\nImageFilters.Scale = function (srcImageData, scaleX, scaleY, interpolation) {\n\n};\nImageFilters.Rotate = function (srcImageData, originX, originY, angle, resize, interpolation) {\n\n};\nImageFilters.Affine = function (srcImageData, matrix, resize, interpolation) {\n\n};\nImageFilters.UnsharpMask = function (srcImageData, level) {\n\n};\n\nImageFilters.ConvolutionFilter = function (srcImageData, matrixX, matrixY, matrix, divisor, bias, preserveAlpha, clamp, color, alpha) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    divisor = divisor || 1;\n    bias = bias || 0;\n\n    // default true\n    (preserveAlpha !== false) && (preserveAlpha = true);\n    (clamp !== false) && (clamp = true);\n\n    color = color || 0;\n    alpha = alpha || 0;\n\n    var index = 0,\n        rows = matrixX >> 1,\n        cols = matrixY >> 1,\n        clampR = color >> 16 & 0xFF,\n        clampG = color >>  8 & 0xFF,\n        clampB = color       & 0xFF,\n        clampA = alpha * 0xFF;\n\n    for (var y = 0; y < srcHeight; y += 1) {\n        for (var x = 0; x < srcWidth; x += 1, index += 4) {\n            var r = 0,\n                g = 0,\n                b = 0,\n                a = 0,\n                replace = false,\n                mIndex = 0,\n                v;\n\n            for (var row = -rows; row <= rows; row += 1) {\n                var rowIndex = y + row,\n                    offset;\n\n                if (0 <= rowIndex && rowIndex < srcHeight) {\n                    offset = rowIndex * srcWidth;\n                }\n                else if (clamp) {\n                    offset = y * srcWidth;\n                }\n                else {\n                    replace = true;\n                }\n\n                for (var col = -cols; col <= cols; col += 1) {\n                    var m = matrix[mIndex++];\n\n                    if (m !== 0) {\n                        var colIndex = x + col;\n\n                        if (!(0 <= colIndex && colIndex < srcWidth)) {\n                            if (clamp) {\n                                colIndex = x;\n                            }\n                            else {\n                                replace = true;\n                            }\n                        }\n\n                        if (replace) {\n                            r += m * clampR;\n                            g += m * clampG;\n                            b += m * clampB;\n                            a += m * clampA;\n                        }\n                        else {\n                            var p = (offset + colIndex) << 2;\n                            r += m * srcPixels[p];\n                            g += m * srcPixels[p + 1];\n                            b += m * srcPixels[p + 2];\n                            a += m * srcPixels[p + 3];\n                        }\n                    }\n                }\n            }\n\n            dstPixels[index]     = (v = r / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 1] = (v = g / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 2] = (v = b / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 3] = preserveAlpha ? srcPixels[index + 3] : (v = a / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param threshold 0.0 <= n <= 1.0\n */\nImageFilters.Binarize = function (srcImageData, threshold) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    if (isNaN(threshold)) {\n        threshold = 0.5;\n    }\n\n    threshold *= 255;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var avg = srcPixels[i] + srcPixels[i + 1] + srcPixels[i + 2] / 3;\n\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = avg <= threshold ? 0 : 255;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.BlendAdd = function (srcImageData, blendImageData, dx, dy) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data,\n        blendPixels  = blendImageData.data;\n\n    var v;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i]     = ((v = srcPixels[i]     + blendPixels[i])     > 255) ? 255 : v;\n        dstPixels[i + 1] = ((v = srcPixels[i + 1] + blendPixels[i + 1]) > 255) ? 255 : v;\n        dstPixels[i + 2] = ((v = srcPixels[i + 2] + blendPixels[i + 2]) > 255) ? 255 : v;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.BlendSubtract = function (srcImageData, blendImageData, dx, dy) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data,\n        blendPixels  = blendImageData.data;\n\n    var v;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i]     = ((v = srcPixels[i]     - blendPixels[i])     < 0) ? 0 : v;\n        dstPixels[i + 1] = ((v = srcPixels[i + 1] - blendPixels[i + 1]) < 0) ? 0 : v;\n        dstPixels[i + 2] = ((v = srcPixels[i + 2] - blendPixels[i + 2]) < 0) ? 0 : v;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\n/**\n * Algorithm based on BoxBlurFilter.java by Huxtable.com\n * @see http://www.jhlabs.com/ip/blurring.html\n * Copyright 2005 Huxtable.com. All rights reserved.\n */\nImageFilters.BoxBlur = (function () {\n    var blur = function(src, dst, width, height, radius) {\n        var tableSize = radius * 2 + 1;\n        var radiusPlus1 = radius + 1;\n        var widthMinus1 = width - 1;\n\n        var r, g, b, a;\n\n        var srcIndex = 0;\n        var dstIndex;\n        var p, next, prev;\n        var i, l, x, y,\n            nextIndex, prevIndex;\n\n        var sumTable = [];\n        for (i = 0, l = 256 * tableSize; i < l; i += 1) {\n            sumTable[i] = i / tableSize | 0;\n        }\n\n        for (y = 0; y < height; y += 1) {\n            r = g = b = a = 0;\n            dstIndex = y;\n\n            p = srcIndex << 2;\n            r += radiusPlus1 * src[p];\n            g += radiusPlus1 * src[p + 1];\n            b += radiusPlus1 * src[p + 2];\n            a += radiusPlus1 * src[p + 3];\n\n            for (i = 1; i <= radius; i += 1) {\n                p = (srcIndex + (i < width ? i : widthMinus1)) << 2;\n                r += src[p];\n                g += src[p + 1];\n                b += src[p + 2];\n                a += src[p + 3];\n            }\n\n            for (x = 0; x < width; x += 1) {\n                p = dstIndex << 2;\n                dst[p]     = sumTable[r];\n                dst[p + 1] = sumTable[g];\n                dst[p + 2] = sumTable[b];\n                dst[p + 3] = sumTable[a];\n\n                nextIndex = x + radiusPlus1;\n                if (nextIndex > widthMinus1) {\n                    nextIndex = widthMinus1;\n                }\n\n                prevIndex = x - radius;\n                if (prevIndex < 0) {\n                    prevIndex = 0;\n                }\n\n                next = (srcIndex + nextIndex) << 2;\n                prev = (srcIndex + prevIndex) << 2;\n\n                r += src[next]     - src[prev];\n                g += src[next + 1] - src[prev + 1];\n                b += src[next + 2] - src[prev + 2];\n                a += src[next + 3] - src[prev + 3];\n\n                dstIndex += height;\n            }\n            srcIndex += width;\n        }\n    };\n\n    return function (srcImageData, hRadius, vRadius, quality) {\n        var srcPixels    = srcImageData.data,\n            srcWidth     = srcImageData.width,\n            srcHeight    = srcImageData.height,\n            srcLength    = srcPixels.length,\n            dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n            dstPixels    = dstImageData.data,\n            tmpImageData = this.utils.createImageData(srcWidth, srcHeight),\n            tmpPixels    = tmpImageData.data;\n\n        for (var i = 0; i < quality; i += 1) {\n            // only use the srcPixels on the first loop\n            blur(i ? dstPixels : srcPixels, tmpPixels, srcWidth, srcHeight, hRadius);\n            blur(tmpPixels, dstPixels, srcHeight, srcWidth, vRadius);\n        }\n\n        return dstImageData;\n    };\n}());\n\n/**\n * @ param strength 1 <= n <= 4\n */\nImageFilters.GaussianBlur = function (srcImageData, strength) {\n    var size, matrix, divisor;\n\n    switch (strength) {\n    case 2:\n        size = 5;\n        matrix = [\n            1, 1, 2, 1, 1,\n            1, 2, 4, 2, 1,\n            2, 4, 8, 4, 2,\n            1, 2, 4, 2, 1,\n            1, 1, 2, 1, 1\n        ];\n        divisor = 52;\n        break;\n    case 3:\n        size = 7;\n        matrix = [\n            1, 1, 2,  2, 2, 1, 1,\n            1, 2, 2,  4, 2, 2, 1,\n            2, 2, 4,  8, 4, 2, 2,\n            2, 4, 8, 16, 8, 4, 2,\n            2, 2, 4,  8, 4, 2, 2,\n            1, 2, 2,  4, 2, 2, 1,\n            1, 1, 2,  2, 2, 1, 1\n        ];\n        divisor = 140;\n        break;\n    case 4:\n        size = 15;\n        matrix = [\n            2 ,2 , 3 , 4 , 5 , 5 , 6 , 6 , 6 , 5 , 5 , 4 , 3 ,2 ,2,\n            2 ,3 , 4 , 5 , 7 , 7 , 8 , 8 , 8 , 7 , 7 , 5 , 4 ,3 ,2,\n            3 ,4 , 6 , 7 , 9 ,10 ,10 ,11 ,10 ,10 , 9 , 7 , 6 ,4 ,3,\n            4 ,5 , 7 , 9 ,10 ,12 ,13 ,13 ,13 ,12 ,10 , 9 , 7 ,5 ,4,\n            5 ,7 , 9 ,11 ,13 ,14 ,15 ,16 ,15 ,14 ,13 ,11 , 9 ,7 ,5,\n            5 ,7 ,10 ,12 ,14 ,16 ,17 ,18 ,17 ,16 ,14 ,12 ,10 ,7 ,5,\n            6 ,8 ,10 ,13 ,15 ,17 ,19 ,19 ,19 ,17 ,15 ,13 ,10 ,8 ,6,\n            6 ,8 ,11 ,13 ,16 ,18 ,19 ,20 ,19 ,18 ,16 ,13 ,11 ,8 ,6,\n            6 ,8 ,10 ,13 ,15 ,17 ,19 ,19 ,19 ,17 ,15 ,13 ,10 ,8 ,6,\n            5 ,7 ,10 ,12 ,14 ,16 ,17 ,18 ,17 ,16 ,14 ,12 ,10 ,7 ,5,\n            5 ,7 , 9 ,11 ,13 ,14 ,15 ,16 ,15 ,14 ,13 ,11 , 9 ,7 ,5,\n            4 ,5 , 7 , 9 ,10 ,12 ,13 ,13 ,13 ,12 ,10 , 9 , 7 ,5 ,4,\n            3 ,4 , 6 , 7 , 9 ,10 ,10 ,11 ,10 ,10 , 9 , 7 , 6 ,4 ,3,\n            2 ,3 , 4 , 5 , 7 , 7 , 8 , 8 , 8 , 7 , 7 , 5 , 4 ,3 ,2,\n            2 ,2 , 3 , 4 , 5 , 5 , 6 , 6 , 6 , 5 , 5 , 4 , 3 ,2 ,2\n        ];\n        divisor = 2044;\n        break;\n    default:\n        size = 3;\n        matrix = [\n            1, 2, 1,\n            2, 4, 2,\n            1, 2, 1\n        ];\n        divisor = 16;\n        break;\n    }\n    return this.ConvolutionFilter(srcImageData, size, size, matrix, divisor, 0, false);\n};\n\n/**\n * Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>\n * @see http://incubator.quasimondo.com/processing/fast_blur_deluxe.php\n */\n/*\nCopyright (c) 2010 Mario Klingemann\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\nImageFilters.StackBlur = (function () {\n    var mul_table = [\n        512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,\n        454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,\n        482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,\n        437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,\n        497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,\n        320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,\n        446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,\n        329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,\n        505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,\n        399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,\n        324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,\n        268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,\n        451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,\n        385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,\n        332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,\n        289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];\n\n\n    var shg_table = [\n         9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n        17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];\n\n    function BlurStack() {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n        this.next = null;\n    }\n\n    return function (srcImageData, radius) {\n        var srcPixels    = srcImageData.data,\n            srcWidth     = srcImageData.width,\n            srcHeight    = srcImageData.height,\n            srcLength    = srcPixels.length,\n            dstImageData = this.Clone(srcImageData),\n            dstPixels    = dstImageData.data;\n\n        var x, y, i, p, yp, yi, yw,\n            r_sum, g_sum, b_sum, a_sum,\n            r_out_sum, g_out_sum, b_out_sum, a_out_sum,\n            r_in_sum, g_in_sum, b_in_sum, a_in_sum,\n            pr, pg, pb, pa, rbs,\n            div = radius + radius + 1,\n            w4 = srcWidth << 2,\n            widthMinus1  = srcWidth - 1,\n            heightMinus1 = srcHeight - 1,\n            radiusPlus1  = radius + 1,\n            sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2,\n            stackStart = new BlurStack(),\n            stack = stackStart,\n            stackIn, stackOut, stackEnd,\n            mul_sum = mul_table[radius],\n            shg_sum = shg_table[radius];\n\n        for (i = 1; i < div; i += 1) {\n            stack = stack.next = new BlurStack();\n            if (i == radiusPlus1) {\n                stackEnd = stack;\n            }\n        }\n\n        stack.next = stackStart;\n        yw = yi = 0;\n\n        for (y = 0; y < srcHeight; y += 1) {\n            r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n\n            r_out_sum = radiusPlus1 * (pr = dstPixels[yi]);\n            g_out_sum = radiusPlus1 * (pg = dstPixels[yi + 1]);\n            b_out_sum = radiusPlus1 * (pb = dstPixels[yi + 2]);\n            a_out_sum = radiusPlus1 * (pa = dstPixels[yi + 3]);\n\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n\n            stack = stackStart;\n\n            for (i = 0; i < radiusPlus1; i += 1) {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n\n            for (i = 1; i < radiusPlus1; i += 1) {\n                p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n                r_sum += (stack.r = (pr = dstPixels[p])) * (rbs = radiusPlus1 - i);\n                g_sum += (stack.g = (pg = dstPixels[p + 1])) * rbs;\n                b_sum += (stack.b = (pb = dstPixels[p + 2])) * rbs;\n                a_sum += (stack.a = (pa = dstPixels[p + 3])) * rbs;\n\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n\n                stack = stack.next;\n            }\n\n            stackIn = stackStart;\n            stackOut = stackEnd;\n\n            for (x = 0; x < srcWidth; x += 1) {\n                dstPixels[yi]     = (r_sum * mul_sum) >> shg_sum;\n                dstPixels[yi + 1] = (g_sum * mul_sum) >> shg_sum;\n                dstPixels[yi + 2] = (b_sum * mul_sum) >> shg_sum;\n                dstPixels[yi + 3] = (a_sum * mul_sum) >> shg_sum;\n\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n\n                p =  (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n                r_in_sum += (stackIn.r = dstPixels[p]);\n                g_in_sum += (stackIn.g = dstPixels[p + 1]);\n                b_in_sum += (stackIn.b = dstPixels[p + 2]);\n                a_in_sum += (stackIn.a = dstPixels[p + 3]);\n\n                r_sum += r_in_sum;\n                g_sum += g_in_sum;\n                b_sum += b_in_sum;\n                a_sum += a_in_sum;\n\n                stackIn = stackIn.next;\n\n                r_out_sum += (pr = stackOut.r);\n                g_out_sum += (pg = stackOut.g);\n                b_out_sum += (pb = stackOut.b);\n                a_out_sum += (pa = stackOut.a);\n\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n\n                stackOut = stackOut.next;\n\n                yi += 4;\n            }\n\n            yw += srcWidth;\n        }\n\n        for (x = 0; x < srcWidth; x += 1) {\n            g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n\n            yi = x << 2;\n            r_out_sum = radiusPlus1 * (pr = dstPixels[yi]);\n            g_out_sum = radiusPlus1 * (pg = dstPixels[yi + 1]);\n            b_out_sum = radiusPlus1 * (pb = dstPixels[yi + 2]);\n            a_out_sum = radiusPlus1 * (pa = dstPixels[yi + 3]);\n\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n\n            stack = stackStart;\n\n            for (i = 0; i < radiusPlus1; i += 1) {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n\n            yp = srcWidth;\n\n            for (i = 1; i <= radius; i += 1) {\n                yi = (yp + x) << 2;\n\n                r_sum += (stack.r = (pr = dstPixels[yi])) * (rbs = radiusPlus1 - i);\n                g_sum += (stack.g = (pg = dstPixels[yi + 1])) * rbs;\n                b_sum += (stack.b = (pb = dstPixels[yi + 2])) * rbs;\n                a_sum += (stack.a = (pa = dstPixels[yi + 3])) * rbs;\n\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n\n                stack = stack.next;\n\n                if (i < heightMinus1) {\n                    yp += srcWidth;\n                }\n            }\n\n            yi = x;\n            stackIn = stackStart;\n            stackOut = stackEnd;\n\n            for (y = 0; y < srcHeight; y += 1) {\n                p = yi << 2;\n                dstPixels[p]     = (r_sum * mul_sum) >> shg_sum;\n                dstPixels[p + 1] = (g_sum * mul_sum) >> shg_sum;\n                dstPixels[p + 2] = (b_sum * mul_sum) >> shg_sum;\n                dstPixels[p + 3] = (a_sum * mul_sum) >> shg_sum;\n\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n\n                p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * srcWidth)) << 2;\n\n                r_sum += (r_in_sum += (stackIn.r = dstPixels[p]));\n                g_sum += (g_in_sum += (stackIn.g = dstPixels[p + 1]));\n                b_sum += (b_in_sum += (stackIn.b = dstPixels[p + 2]));\n                a_sum += (a_in_sum += (stackIn.a = dstPixels[p + 3]));\n\n                stackIn = stackIn.next;\n\n                r_out_sum += (pr = stackOut.r);\n                g_out_sum += (pg = stackOut.g);\n                b_out_sum += (pb = stackOut.b);\n                a_out_sum += (pa = stackOut.a);\n\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n\n                stackOut = stackOut.next;\n\n                yi += srcWidth;\n            }\n        }\n\n        return dstImageData;\n    }\n}());\n\n/**\n * TV based algorithm\n */\nImageFilters.Brightness = function (srcImageData, brightness) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value += brightness;\n        return (value > 255) ? 255 : value;\n    });\n\n    return dstImageData;\n};\n\n/**\n * GIMP algorithm modified. pretty close to fireworks\n * @param brightness -100 <= n <= 100\n * @param contrast -100 <= n <= 100\n */\nImageFilters.BrightnessContrastGimp = function (srcImageData, brightness, contrast) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data,\n        p4           = Math.PI / 4;\n\n    // fix to -1 <= n <= 1\n    brightness /= 100;\n\n    // fix to -99 <= n <= 99\n    contrast *= 0.99;\n    // fix to -1 < n < 1\n    contrast /= 100;\n    // apply GIMP formula\n    contrast = Math.tan((contrast + 1) * p4);\n\n    // get the average color\n    for (var avg = 0, i = 0; i < srcLength; i += 4) {\n        avg += (srcPixels[i] * 19595 + srcPixels[i + 1] * 38470 + srcPixels[i + 2] * 7471) >> 16;\n    }\n    avg = avg / (srcLength / 4);\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        if (brightness < 0) {\n            value = value * (1 + brightness);\n        }\n        else if (brightness > 0) {\n            value = value + ((255 - value) * brightness);\n        }\n        //value += brightness;\n\n        if (contrast !== 0) {\n            value = (value - avg) * contrast + avg;\n        }\n        return value + 0.5 | 0;\n    });\n    return dstImageData;\n};\n\n/**\n * more like the new photoshop algorithm\n * @param brightness -100 <= n <= 100\n * @param contrast -100 <= n <= 100\n */\nImageFilters.BrightnessContrastPhotoshop = function (srcImageData, brightness, contrast) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    // fix to 0 <= n <= 2;\n    brightness = (brightness + 100) / 100;\n    contrast = (contrast + 100) / 100;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value *= brightness;\n        value = (value - 127.5) * contrast + 127.5;\n        return value + 0.5 | 0;\n    });\n    return dstImageData;\n};\n\nImageFilters.Channels = function (srcImageData, channel) {\n    var matrix;\n\n    switch (channel) {\n        case 2: // green\n            matrix = [\n                0, 1, 0, 0, 0,\n                0, 1, 0, 0, 0,\n                0, 1, 0, 0, 0,\n                0, 0, 0, 1, 0\n            ];\n            break;\n        case 3: // blue\n            matrix = [\n                0, 0, 1, 0, 0,\n                0, 0, 1, 0, 0,\n                0, 0, 1, 0, 0,\n                0, 0, 0, 1, 0\n            ];\n            break;\n        default: // red\n            matrix = [\n                1, 0, 0, 0, 0,\n                1, 0, 0, 0, 0,\n                1, 0, 0, 0, 0,\n                0, 0, 0, 1, 0\n            ];\n            break;\n\n    }\n\n    return this.ColorMatrixFilter(srcImageData, matrix);\n};\n\nImageFilters.Clone = function (srcImageData) {\n    return this.Copy(srcImageData, this.utils.createImageData(srcImageData.width, srcImageData.height));\n};\n\n/**\n * slower\n */\nImageFilters.CloneBuiltin = function (srcImageData) {\n    var srcWidth  = srcImageData.width,\n        srcHeight = srcImageData.height,\n        canvas    = this.utils.getSampleCanvas(),\n        context   = this.utils.getSampleContext(),\n        dstImageData;\n\n    canvas.width  = srcWidth;\n    canvas.height = srcHeight;\n\n    context.putImageData(srcImageData, 0, 0);\n    dstImageData = context.getImageData(0, 0, srcWidth, srcHeight);\n\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return dstImageData;\n};\n\nImageFilters.ColorMatrixFilter = function (srcImageData, matrix) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var m0  = matrix[0],\n        m1  = matrix[1],\n        m2  = matrix[2],\n        m3  = matrix[3],\n        m4  = matrix[4],\n        m5  = matrix[5],\n        m6  = matrix[6],\n        m7  = matrix[7],\n        m8  = matrix[8],\n        m9  = matrix[9],\n        m10 = matrix[10],\n        m11 = matrix[11],\n        m12 = matrix[12],\n        m13 = matrix[13],\n        m14 = matrix[14],\n        m15 = matrix[15],\n        m16 = matrix[16],\n        m17 = matrix[17],\n        m18 = matrix[18],\n        m19 = matrix[19];\n\n    var value, i, r, g, b, a;\n    for (i = 0; i < srcLength; i += 4) {\n        r = srcPixels[i];\n        g = srcPixels[i + 1];\n        b = srcPixels[i + 2];\n        a = srcPixels[i + 3];\n\n        dstPixels[i]     = (value = r *  m0 + g *  m1 + b *  m2 + a *  m3 +  m4) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 1] = (value = r *  m5 + g *  m6 + b *  m7 + a *  m8 +  m9) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 2] = (value = r * m10 + g * m11 + b * m12 + a * m13 + m14) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 3] = (value = r * m15 + g * m16 + b * m17 + a * m18 + m19) > 255 ? 255 : value < 0 ? 0 : value | 0;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.ColorTransformFilter = function (\n        srcImageData, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier,\n        redOffset, greenOffset, blueOffset, alphaOffset) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var i, v;\n    for (i = 0; i < srcLength; i += 4) {\n        dstPixels[i]     = (v = srcPixels[i]     * redMultiplier   + redOffset)   > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 1] = (v = srcPixels[i + 1] * greenMultiplier + greenOffset) > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 2] = (v = srcPixels[i + 2] * blueMultiplier  + blueOffset)  > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 3] = (v = srcPixels[i + 3] * alphaMultiplier + alphaOffset) > 255 ? 255 : v < 0 ? 0 : v;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Copy = function (srcImageData, dstImageData) {\n    var srcPixels = srcImageData.data,\n        srcLength = srcPixels.length,\n        dstPixels = dstImageData.data;\n\n    while (srcLength--) {\n        dstPixels[srcLength] = srcPixels[srcLength];\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Crop = function (srcImageData, x, y, width, height) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels    = dstImageData.data;\n\n    var srcLeft   = Math.max(x, 0),\n        srcTop    = Math.max(y, 0),\n        srcRight  = Math.min(x + width, srcWidth),\n        srcBottom = Math.min(y + height, srcHeight),\n        dstLeft   = srcLeft - x,\n        dstTop    = srcTop - y,\n        srcRow, srcCol, srcIndex, dstIndex;\n\n    for (srcRow = srcTop, dstRow = dstTop; srcRow < srcBottom; srcRow += 1, dstRow += 1) {\n        for (srcCol = srcLeft, dstCol = dstLeft; srcCol < srcRight; srcCol += 1, dstCol += 1) {\n            srcIndex = (srcRow * srcWidth + srcCol) << 2;\n            dstIndex = (dstRow * width    + dstCol) << 2;\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.CropBuiltin = function (srcImageData, x, y, width, height) {\n    var srcWidth  = srcImageData.width,\n        srcHeight = srcImageData.height,\n        canvas    = this.utils.getSampleCanvas(),\n        context   = this.utils.getSampleContext();\n\n    canvas.width = srcWidth;\n    canvas.height = srcHeight;\n    context.putImageData(srcImageData, 0, 0);\n    var result = context.getImageData(x, y, width, height);\n\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return result;\n};\n\n/**\n * sets to the average of the highest and lowest contrast\n */\nImageFilters.Desaturate = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var r = srcPixels[i],\n            g = srcPixels[i + 1],\n            b = srcPixels[i + 2],\n            max = (r > g) ? (r > b) ? r : b : (g > b) ? g : b,\n            min = (r < g) ? (r < b) ? r : b : (g < b) ? g : b,\n            avg = ((max + min) / 2) + 0.5 | 0;\n\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = avg;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\n * TODO: use bilinear\n */\nImageFilters.DisplacementMapFilter = function (srcImageData, mapImageData, mapX, mapY, componentX, componentY, scaleX, scaleY, mode) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n//        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstImageData = ImageFilters.Clone(srcImageData),\n        dstPixels    = dstImageData.data;\n\n    mapX || (mapX = 0);\n    mapY || (mapY = 0);\n    componentX || (componentX = 0); // red?\n    componentY || (componentY = 0);\n    scaleX || (scaleX = 0);\n    scaleY || (scaleY = 0);\n    mode || (mode = 2); // wrap\n\n    var mapWidth  = mapImageData.width,\n        mapHeight = mapImageData.height,\n        mapPixels = mapImageData.data,\n        mapRight  = mapWidth + mapX,\n        mapBottom = mapHeight + mapY,\n        dstIndex, srcIndex, mapIndex,\n        cx, cy, tx, ty, x, y;\n\n    for (x = 0; x < srcWidth; x += 1) {\n        for (y = 0; y < srcHeight; y += 1) {\n\n            dstIndex = (y * srcWidth + x) << 2;\n\n            if (x < mapX || y < mapY || x >= mapRight || y >= mapBottom) {\n                // out of the map bounds\n                // copy src to dst\n                srcIndex = dstIndex;\n            } else {\n                // apply map\n                mapIndex = ((y - mapY) * mapWidth + (x - mapX)) << 2;\n\n                // tx = x + ((componentX(x, y) - 128) * scaleX) / 256\n                cx = mapPixels[mapIndex + componentX];\n                tx = x + (((cx - 128) * scaleX) >> 8);\n\n                // tx = y + ((componentY(x, y) - 128) * scaleY) / 256\n                cy = mapPixels[mapIndex + componentY];\n                ty = y + (((cy - 128) * scaleY) >> 8);\n\n                srcIndex = ImageFilters.utils.getPixelIndex(tx + 0.5 | 0, ty + 0.5 | 0, srcWidth, srcHeight, mode);\n                if (srcIndex === null) {\n                    // if mode == ignore and (tx,ty) is out of src bounds\n                    // then copy (x,y) to dst\n                    srcIndex = dstIndex;\n                }\n            }\n\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * Floyd-Steinberg algorithm\n * @param levels 2 <= n <= 255\n */\nImageFilters.Dither = function (srcImageData, levels) {\n    var srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        dstImageData = this.Clone(srcImageData),\n        dstPixels    = dstImageData.data;\n\n    levels = levels < 2 ? 2 : levels > 255 ? 255 : levels;\n\n    // Build a color map using the same algorithm as the posterize filter.\n    var posterize,\n        levelMap = [],\n        levelsMinus1 = levels - 1,\n        j = 0,\n        k = 0,\n        i;\n\n    for (i = 0; i < levels; i += 1) {\n        levelMap[i] = (255 * i) / levelsMinus1;\n    }\n\n    posterize = this.utils.buildMap(function (value) {\n        var ret = levelMap[j];\n\n        k += levels;\n\n        if (k > 255) {\n            k -= 255;\n            j += 1;\n        }\n\n        return ret;\n    });\n\n    // Apply the dithering algorithm to each pixel\n    var x, y,\n        index,\n        old_r, old_g, old_b,\n        new_r, new_g, new_b,\n        err_r, err_g, err_b,\n        nbr_r, nbr_g, nbr_b,\n        srcWidthMinus1 = srcWidth - 1,\n        srcHeightMinus1 = srcHeight - 1,\n        A = 7 / 16,\n        B = 3 / 16,\n        C = 5 / 16,\n        D = 1 / 16;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            // Get the current pixel.\n            index = (y * srcWidth + x) << 2;\n\n            old_r = dstPixels[index];\n            old_g = dstPixels[index + 1];\n            old_b = dstPixels[index + 2];\n\n            // Quantize using the color map\n            new_r = posterize[old_r];\n            new_g = posterize[old_g];\n            new_b = posterize[old_b];\n\n            // Set the current pixel.\n            dstPixels[index]     = new_r;\n            dstPixels[index + 1] = new_g;\n            dstPixels[index + 2] = new_b;\n\n            // Quantization errors\n            err_r = old_r - new_r;\n            err_g = old_g - new_g;\n            err_b = old_b - new_b;\n\n            // Apply the matrix.\n            // x + 1, y\n            index += 1 << 2;\n            if (x < srcWidthMinus1) {\n                nbr_r = dstPixels[index]     + A * err_r;\n                nbr_g = dstPixels[index + 1] + A * err_g;\n                nbr_b = dstPixels[index + 2] + A * err_b;\n\n                dstPixels[index]     = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x - 1, y + 1\n            index += (srcWidth - 2) << 2;\n            if (x > 0 && y < srcHeightMinus1) {\n                nbr_r = dstPixels[index]     + B * err_r;\n                nbr_g = dstPixels[index + 1] + B * err_g;\n                nbr_b = dstPixels[index + 2] + B * err_b;\n\n                dstPixels[index]     = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x, y + 1\n            index += 1 << 2;\n            if (y < srcHeightMinus1) {\n                nbr_r = dstPixels[index]     + C * err_r;\n                nbr_g = dstPixels[index + 1] + C * err_g;\n                nbr_b = dstPixels[index + 2] + C * err_b;\n\n                dstPixels[index]     = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x + 1, y + 1\n            index += 1 << 2;\n            if (x < srcWidthMinus1 && y < srcHeightMinus1) {\n                nbr_r = dstPixels[index]     + D * err_r;\n                nbr_g = dstPixels[index + 1] + D * err_g;\n                nbr_b = dstPixels[index + 2] + D * err_b;\n\n                dstPixels[index]     = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Edge = function (srcImageData) {\n    //pretty close to Fireworks 'Find Edges' effect\n    return this.ConvolutionFilter(srcImageData, 3, 3, [\n        -1, -1, -1,\n        -1,  8, -1,\n        -1, -1, -1\n    ]);\n};\n\nImageFilters.Emboss = function (srcImageData) {\n    return this.ConvolutionFilter(srcImageData, 3, 3, [\n        -2, -1, 0,\n        -1,  1, 1,\n         0,  1, 2\n    ]);\n};\n\nImageFilters.Enrich = function (srcImageData) {\n    return this.ConvolutionFilter(srcImageData, 3, 3, [\n         0, -2,  0,\n        -2, 20, -2,\n         0, -2,  0\n    ], 10, -40);\n};\n\nImageFilters.Flip = function (srcImageData, vertical) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var x, y, srcIndex, dstIndex, i;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            srcIndex = (y * srcWidth + x) << 2;\n            if (vertical) {\n                dstIndex = ((srcHeight - y - 1) * srcWidth + x) << 2;\n            }\n            else {\n                dstIndex = (y * srcWidth + (srcWidth - x - 1)) << 2;\n            }\n\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Gamma = function (srcImageData, gamma) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value = (255 * Math.pow(value / 255, 1 / gamma) + 0.5);\n        return value > 255 ? 255 : value + 0.5 | 0;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.GrayScale = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var intensity = (srcPixels[i] * 19595 + srcPixels[i + 1] * 38470 + srcPixels[i + 2] * 7471) >> 16;\n        //var intensity = (srcPixels[i] * 0.3086 + srcPixels[i + 1] * 0.6094 + srcPixels[i + 2] * 0.0820) | 0;\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = intensity;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param hueDelta  -180 <= n <= 180\n * @param satDelta  -100 <= n <= 100\n * @param lightness -100 <= n <= 100\n */\nImageFilters.HSLAdjustment = function (srcImageData, hueDelta, satDelta, lightness) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    hueDelta /= 360;\n    satDelta /= 100;\n    lightness /= 100;\n\n    var rgbToHsl = this.utils.rgbToHsl;\n    var hslToRgb = this.utils.hslToRgb;\n    var h, s, l, hsl, rgb, i;\n\n    for (i = 0; i < srcLength; i += 4) {\n        // convert to HSL\n        hsl = rgbToHsl(srcPixels[i], srcPixels[i + 1], srcPixels[i + 2]);\n\n        // hue\n        h = hsl[0] + hueDelta;\n        while (h < 0) {\n            h += 1;\n        }\n        while (h > 1) {\n            h -= 1;\n        }\n\n        // saturation\n        s = hsl[1] + hsl[1] * satDelta;\n        if (s < 0) {\n            s = 0;\n        }\n        else if (s > 1) {\n            s = 1;\n        }\n\n        // lightness\n        l = hsl[2];\n        if (lightness > 0) {\n            l += (1 - l) * lightness;\n        }\n        else if (lightness < 0) {\n            l += l * lightness;\n        }\n\n        // convert back to rgb\n        rgb = hslToRgb(h, s, l);\n\n        dstPixels[i]     = rgb[0];\n        dstPixels[i + 1] = rgb[1];\n        dstPixels[i + 2] = rgb[2];\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Invert = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        return 255 - value;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.Mosaic = function (srcImageData, blockSize) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var cols = Math.ceil(srcWidth / blockSize),\n        rows = Math.ceil(srcHeight / blockSize),\n        row, col,\n        x_start, x_end, y_start, y_end,\n        x, y, yIndex, index, size,\n        r, g, b, a;\n\n    for (row = 0; row < rows; row += 1) {\n        y_start = row * blockSize;\n        y_end   = y_start + blockSize;\n\n        if (y_end > srcHeight) {\n            y_end = srcHeight;\n        }\n\n        for (col = 0; col < cols; col += 1) {\n            x_start = col * blockSize;\n            x_end   = x_start + blockSize;\n\n            if (x_end > srcWidth) {\n                x_end = srcWidth;\n            }\n\n            // get the average color from the src\n            r = g = b = a = 0;\n            size = (x_end - x_start) * (y_end - y_start);\n\n            for (y = y_start; y < y_end; y += 1) {\n                yIndex = y * srcWidth;\n\n                for (x = x_start; x < x_end; x += 1) {\n                    index = (yIndex + x) << 2;\n                    r += srcPixels[index];\n                    g += srcPixels[index + 1];\n                    b += srcPixels[index + 2];\n                    a += srcPixels[index + 3];\n                }\n            }\n\n            r = (r / size) + 0.5 | 0;\n            g = (g / size) + 0.5 | 0;\n            b = (b / size) + 0.5 | 0;\n            a = (a / size) + 0.5 | 0;\n\n            // fill the dst with that color\n            for (y = y_start; y < y_end; y += 1) {\n                yIndex = y * srcWidth;\n\n                for (x = x_start; x < x_end; x += 1) {\n                    index = (yIndex + x) << 2;\n                    dstPixels[index]     = r;\n                    dstPixels[index + 1] = g;\n                    dstPixels[index + 2] = b;\n                    dstPixels[index + 3] = a;\n                }\n            }\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param range  1 <= n <= 5\n * @param levels 1 <= n <= 256\n */\nImageFilters.Oil = function (srcImageData, range, levels) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var index = 0,\n        rh = [],\n        gh = [],\n        bh = [],\n        rt = [],\n        gt = [],\n        bt = [],\n        x, y, i, row, col,\n        rowIndex, colIndex, offset, srcIndex,\n        sr, sg, sb, ri, gi, bi,\n        r, g, b;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            for (i = 0; i < levels; i += 1) {\n                rh[i] = gh[i] = bh[i] = rt[i] = gt[i] = bt[i] = 0;\n            }\n\n            for (row = -range; row <= range; row += 1) {\n                rowIndex = y + row;\n\n                if (rowIndex < 0 || rowIndex >= srcHeight) {\n                    continue;\n                }\n\n                offset = rowIndex * srcWidth;\n\n                for (col = -range; col <= range; col += 1) {\n                    colIndex = x + col;\n                    if (colIndex < 0 || colIndex >= srcWidth) {\n                        continue;\n                    }\n\n                    srcIndex = (offset + colIndex) << 2;\n                    sr = srcPixels[srcIndex];\n                    sg = srcPixels[srcIndex + 1];\n                    sb = srcPixels[srcIndex + 2];\n                    ri = (sr * levels) >> 8;\n                    gi = (sg * levels) >> 8;\n                    bi = (sb * levels) >> 8;\n                    rt[ri] += sr;\n                    gt[gi] += sg;\n                    bt[bi] += sb;\n                    rh[ri] += 1;\n                    gh[gi] += 1;\n                    bh[bi] += 1;\n                }\n            }\n\n            r = g = b = 0;\n            for (i = 1; i < levels; i += 1) {\n                if(rh[i] > rh[r]) {\n                    r = i;\n                }\n                if(gh[i] > gh[g]) {\n                    g = i;\n                }\n                if(bh[i] > bh[b]) {\n                    b = i;\n                }\n            }\n\n            dstPixels[index]     = rt[r] / rh[r] | 0;\n            dstPixels[index + 1] = gt[g] / gh[g] | 0;\n            dstPixels[index + 2] = bt[b] / bh[b] | 0;\n            dstPixels[index + 3] = srcPixels[index + 3];\n            index += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.OpacityFilter = function (srcImageData, opacity) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i]     = srcPixels[i];\n        dstPixels[i + 1] = srcPixels[i + 1];\n        dstPixels[i + 2] = srcPixels[i + 2];\n        dstPixels[i + 3] = opacity;\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param levels 2 <= n <= 255\n */\nImageFilters.Posterize = function (srcImageData, levels) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    levels = levels < 2 ? 2 : levels > 255 ? 255 : levels;\n\n    var levelMap = [],\n        levelsMinus1 = levels - 1,\n        j = 0,\n        k = 0,\n        i;\n\n    for (i = 0; i < levels; i += 1) {\n        levelMap[i] = (255 * i) / levelsMinus1;\n    }\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        var ret = levelMap[j];\n\n        k += levels;\n\n        if (k > 255) {\n            k -= 255;\n            j += 1;\n        }\n\n        return ret;\n    });\n\n    return dstImageData;\n};\n\n/**\n * @param scale 0.0 <= n <= 5.0\n */\nImageFilters.Rescale = function (srcImageData, scale) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value *= scale;\n        return (value > 255) ? 255 : value + 0.5 | 0;\n    });\n\n    return dstImageData;\n};\n\n/**\n * Nearest neighbor\n */\nImageFilters.ResizeNearestNeighbor = function (srcImageData, width, height) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels    = dstImageData.data;\n\n    var xFactor = srcWidth / width,\n        yFactor = srcHeight / height,\n        dstIndex = 0, srcIndex,\n        x, y, offset;\n\n    for (y = 0; y < height; y += 1) {\n        offset = ((y * yFactor) | 0) * srcWidth;\n\n        for (x = 0; x < width; x += 1) {\n            srcIndex = (offset + x * xFactor) << 2;\n\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * Bilinear\n */\nImageFilters.Resize = function (srcImageData, width, height) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels    = dstImageData.data;\n\n    var xFactor = srcWidth / width,\n        yFactor = srcHeight / height,\n        dstIndex = 0,\n        x, y;\n\n    for (y = 0; y < height; y += 1) {\n        for (x = 0; x < width; x += 1) {\n            this.utils.copyBilinear(srcPixels, x * xFactor, y * yFactor, srcWidth, srcHeight, dstPixels, dstIndex, 0);\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\n\n/**\n * faster resizing using the builtin context.scale()\n * the resizing algorithm may be different between browsers\n * this might not work if the image is transparent.\n * to fix that we probably need two contexts\n */\nImageFilters.ResizeBuiltin = function (srcImageData, width, height) {\n    var srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        canvas    = this.utils.getSampleCanvas(),\n        context   = this.utils.getSampleContext(),\n        dstImageData;\n\n    canvas.width  = Math.max(srcWidth, width);\n    canvas.height = Math.max(srcHeight, height);\n    context.save();\n\n    context.putImageData(srcImageData, 0, 0);\n    context.scale(width / srcWidth, height / srcHeight);\n    context.drawImage(canvas, 0, 0);\n\n    dstImageData = context.getImageData(0, 0, width, height);\n\n    context.restore();\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return dstImageData;\n};\n\nImageFilters.Sepia = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var r, g, b, i, value;\n\n    for (i = 0; i < srcLength; i += 4) {\n        r = srcPixels[i];\n        g = srcPixels[i + 1];\n        b = srcPixels[i + 2];\n\n        dstPixels[i]     = (value = r * 0.393 + g * 0.769 + b * 0.189) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 1] = (value = r * 0.349 + g * 0.686 + b * 0.168) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 2] = (value = r * 0.272 + g * 0.534 + b * 0.131) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param factor 1 <= n\n */\nImageFilters.Sharpen = function (srcImageData, factor) {\n    //Convolution formula from VIGRA\n    return this.ConvolutionFilter(srcImageData, 3, 3, [\n        -factor/16,     -factor/8,      -factor/16,\n        -factor/8,       factor*0.75+1, -factor/8,\n        -factor/16,     -factor/8,      -factor/16\n    ]);\n};\n\nImageFilters.Solarize = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        return value > 127 ? (value - 127.5) * 2 : (127.5 - value) * 2;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.Transpose = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcHeight, srcWidth),\n        dstPixels    = dstImageData.data;\n\n    var srcIndex, dstIndex;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            srcIndex = (y * srcWidth + x) << 2;\n            dstIndex = (x * srcHeight + y) << 2;\n\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param centerX 0.0 <= n <= 1.0\n * @param centerY 0.0 <= n <= 1.0\n * @param radius\n * @param angle(degree)\n * @param smooth\n */\nImageFilters.Twril = function (srcImageData, centerX, centerY, radius, angle, edge, smooth) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    //convert position to px\n    centerX = srcWidth  * centerX;\n    centerY = srcHeight * centerY;\n\n    // degree to radian\n    angle *= (Math.PI / 180);\n\n    var radius2 = radius * radius,\n        max_y = srcHeight - 1,\n        max_x = srcWidth - 1,\n        dstIndex = 0,\n        x, y, dx, dy, distance, a, tx, ty, srcIndex, pixel, i;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            dx = x - centerX;\n            dy = y - centerY;\n            distance = dx * dx + dy * dy;\n\n            if (distance > radius2) {\n                // out of the effected area. just copy the pixel\n                dstPixels[dstIndex]     = srcPixels[dstIndex];\n                dstPixels[dstIndex + 1] = srcPixels[dstIndex + 1];\n                dstPixels[dstIndex + 2] = srcPixels[dstIndex + 2];\n                dstPixels[dstIndex + 3] = srcPixels[dstIndex + 3];\n            }\n            else {\n                // main formula\n                distance = Math.sqrt(distance);\n                a  = Math.atan2(dy, dx) + (angle * (radius - distance)) / radius;\n                tx = centerX + distance * Math.cos(a);\n                ty = centerY + distance * Math.sin(a);\n\n                // copy target pixel\n                if (smooth) {\n                    // bilinear\n                    this.utils.copyBilinear(srcPixels, tx, ty, srcWidth, srcHeight, dstPixels, dstIndex, edge);\n                }\n                else {\n                    // nearest neighbor\n                    // round tx, ty\n                    // TODO edge actions!!\n                    srcIndex = ((ty + 0.5 | 0) * srcWidth + (tx + 0.5 | 0)) << 2;\n                    dstPixels[dstIndex]     = srcPixels[srcIndex];\n                    dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n                    dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n                    dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n                }\n            }\n\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\nmodule.exports = ImageFilters;\n"],"mappings":"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,EAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACtD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EA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EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC/D,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC;EAGhE,IAAIC,SAAS,GAAG,CACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EA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","ignoreList":[]},"metadata":{},"sourceType":"script"}