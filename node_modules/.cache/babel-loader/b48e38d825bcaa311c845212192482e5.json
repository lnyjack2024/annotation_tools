{"ast":null,"code":"/*!\n * @pixi/mesh - v6.2.2\n * Compiled Wed, 26 Jan 2022 16:23:27 UTC\n *\n * @pixi/mesh is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { State, Program, TextureMatrix, Shader, Buffer, Geometry } from '@pixi/core';\nimport { Point, Polygon, Matrix } from '@pixi/math';\nimport { DRAW_MODES, TYPES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { premultiplyTintToRgba } from '@pixi/utils';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nvar MeshBatchUvs = /** @class */function () {\n  /**\n   * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n   * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n   */\n  function MeshBatchUvs(uvBuffer, uvMatrix) {\n    /**\n     * Buffer with normalized UV's\n     * @member {PIXI.Buffer}\n     */\n    this.uvBuffer = uvBuffer;\n    /**\n     * Material UV matrix\n     * @member {PIXI.TextureMatrix}\n     */\n    this.uvMatrix = uvMatrix;\n    /**\n     * UV Buffer data\n     * @member {Float32Array}\n     * @readonly\n     */\n    this.data = null;\n    this._bufferUpdateId = -1;\n    this._textureUpdateId = -1;\n    this._updateID = 0;\n  }\n  /**\n   * updates\n   *\n   * @param {boolean} [forceUpdate] - force the update\n   */\n  MeshBatchUvs.prototype.update = function (forceUpdate) {\n    if (!forceUpdate && this._bufferUpdateId === this.uvBuffer._updateID && this._textureUpdateId === this.uvMatrix._updateID) {\n      return;\n    }\n    this._bufferUpdateId = this.uvBuffer._updateID;\n    this._textureUpdateId = this.uvMatrix._updateID;\n    var data = this.uvBuffer.data;\n    if (!this.data || this.data.length !== data.length) {\n      this.data = new Float32Array(data.length);\n    }\n    this.uvMatrix.multiplyUvs(data, this.data);\n    this._updateID++;\n  };\n  return MeshBatchUvs;\n}();\nvar tempPoint = new Point();\nvar tempPolygon = new Polygon();\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make your life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @memberof PIXI\n */\nvar Mesh = /** @class */function (_super) {\n  __extends(Mesh, _super);\n  /**\n   * @param geometry - The geometry the mesh will use.\n   * @param {PIXI.MeshMaterial} shader - The shader the mesh will use.\n   * @param state - The state that the WebGL context is required to be in to render the mesh\n   *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n   * @param drawMode - The drawMode, can be any of the {@link PIXI.DRAW_MODES} constants.\n   */\n  function Mesh(geometry, shader, state, drawMode) {\n    if (drawMode === void 0) {\n      drawMode = DRAW_MODES.TRIANGLES;\n    }\n    var _this = _super.call(this) || this;\n    _this.geometry = geometry;\n    _this.shader = shader;\n    _this.state = state || State.for2d();\n    _this.drawMode = drawMode;\n    _this.start = 0;\n    _this.size = 0;\n    _this.uvs = null;\n    _this.indices = null;\n    _this.vertexData = new Float32Array(1);\n    _this.vertexDirty = -1;\n    _this._transformID = -1;\n    _this._roundPixels = settings.ROUND_PIXELS;\n    _this.batchUvs = null;\n    return _this;\n  }\n  Object.defineProperty(Mesh.prototype, \"geometry\", {\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh objects.\n     */\n    get: function () {\n      return this._geometry;\n    },\n    set: function (value) {\n      if (this._geometry === value) {\n        return;\n      }\n      if (this._geometry) {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0) {\n          this._geometry.dispose();\n        }\n      }\n      this._geometry = value;\n      if (this._geometry) {\n        this._geometry.refCount++;\n      }\n      this.vertexDirty = -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"uvBuffer\", {\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     *\n     * @readonly\n     */\n    get: function () {\n      return this.geometry.buffers[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"verticesBuffer\", {\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     *\n     * @readonly\n     */\n    get: function () {\n      return this.geometry.buffers[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"material\", {\n    get: function () {\n      return this.shader;\n    },\n    /** Alias for {@link PIXI.Mesh#shader}. */\n    set: function (value) {\n      this.shader = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"blendMode\", {\n    get: function () {\n      return this.state.blendMode;\n    },\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @default PIXI.BLEND_MODES.NORMAL;\n     */\n    set: function (value) {\n      this.state.blendMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"roundPixels\", {\n    get: function () {\n      return this._roundPixels;\n    },\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @default false\n     */\n    set: function (value) {\n      if (this._roundPixels !== value) {\n        this._transformID = -1;\n      }\n      this._roundPixels = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"tint\", {\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * Null for non-MeshMaterial shaders\n     *\n     * @default 0xFFFFFF\n     */\n    get: function () {\n      return 'tint' in this.shader ? this.shader.tint : null;\n    },\n    set: function (value) {\n      this.shader.tint = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"texture\", {\n    /**\n     * The texture that the Mesh uses.\n     *\n     * Null for non-MeshMaterial shaders\n     */\n    get: function () {\n      return 'texture' in this.shader ? this.shader.texture : null;\n    },\n    set: function (value) {\n      this.shader.texture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Standard renderer draw.\n   *\n   * @param renderer - Instance to renderer.\n   */\n  Mesh.prototype._render = function (renderer) {\n    // set properties for batching..\n    // TODO could use a different way to grab verts?\n    var vertices = this.geometry.buffers[0].data;\n    var shader = this.shader;\n    // TODO benchmark check for attribute size..\n    if (shader.batchable && this.drawMode === DRAW_MODES.TRIANGLES && vertices.length < Mesh.BATCHABLE_SIZE * 2) {\n      this._renderToBatch(renderer);\n    } else {\n      this._renderDefault(renderer);\n    }\n  };\n  /**\n   * Standard non-batching way of rendering.\n   *\n   * @param renderer - Instance to renderer.\n   */\n  Mesh.prototype._renderDefault = function (renderer) {\n    var shader = this.shader;\n    shader.alpha = this.worldAlpha;\n    if (shader.update) {\n      shader.update();\n    }\n    renderer.batch.flush();\n    // bind and sync uniforms..\n    shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n    renderer.shader.bind(shader);\n    // set state..\n    renderer.state.set(this.state);\n    // bind the geometry...\n    renderer.geometry.bind(this.geometry, shader);\n    // then render it\n    renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n  };\n  /**\n   * Rendering by using the Batch system.\n   *\n   * @param renderer - Instance to renderer.\n   */\n  Mesh.prototype._renderToBatch = function (renderer) {\n    var geometry = this.geometry;\n    var shader = this.shader;\n    if (shader.uvMatrix) {\n      shader.uvMatrix.update();\n      this.calculateUvs();\n    }\n    // set properties for batching..\n    this.calculateVertices();\n    this.indices = geometry.indexBuffer.data;\n    this._tintRGB = shader._tintRGB;\n    this._texture = shader.texture;\n    var pluginName = this.material.pluginName;\n    renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n    renderer.plugins[pluginName].render(this);\n  };\n  /** Updates vertexData field based on transform and vertices. */\n  Mesh.prototype.calculateVertices = function () {\n    var geometry = this.geometry;\n    var verticesBuffer = geometry.buffers[0];\n    var vertices = verticesBuffer.data;\n    var vertexDirtyId = verticesBuffer._updateID;\n    if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID) {\n      return;\n    }\n    this._transformID = this.transform._worldID;\n    if (this.vertexData.length !== vertices.length) {\n      this.vertexData = new Float32Array(vertices.length);\n    }\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var vertexData = this.vertexData;\n    for (var i = 0; i < vertexData.length / 2; i++) {\n      var x = vertices[i * 2];\n      var y = vertices[i * 2 + 1];\n      vertexData[i * 2] = a * x + c * y + tx;\n      vertexData[i * 2 + 1] = b * x + d * y + ty;\n    }\n    if (this._roundPixels) {\n      var resolution = settings.RESOLUTION;\n      for (var i = 0; i < vertexData.length; ++i) {\n        vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n      }\n    }\n    this.vertexDirty = vertexDirtyId;\n  };\n  /** Updates uv field based on from geometry uv's or batchUvs. */\n  Mesh.prototype.calculateUvs = function () {\n    var geomUvs = this.geometry.buffers[1];\n    var shader = this.shader;\n    if (!shader.uvMatrix.isSimple) {\n      if (!this.batchUvs) {\n        this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);\n      }\n      this.batchUvs.update();\n      this.uvs = this.batchUvs.data;\n    } else {\n      this.uvs = geomUvs.data;\n    }\n  };\n  /**\n   * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n   * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n   */\n  Mesh.prototype._calculateBounds = function () {\n    this.calculateVertices();\n    this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n  };\n  /**\n   * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n   *\n   * @param point - The point to test.\n   * @return - The result of the test.\n   */\n  Mesh.prototype.containsPoint = function (point) {\n    if (!this.getBounds().contains(point.x, point.y)) {\n      return false;\n    }\n    this.worldTransform.applyInverse(point, tempPoint);\n    var vertices = this.geometry.getBuffer('aVertexPosition').data;\n    var points = tempPolygon.points;\n    var indices = this.geometry.getIndex().data;\n    var len = indices.length;\n    var step = this.drawMode === 4 ? 3 : 1;\n    for (var i = 0; i + 2 < len; i += step) {\n      var ind0 = indices[i] * 2;\n      var ind1 = indices[i + 1] * 2;\n      var ind2 = indices[i + 2] * 2;\n      points[0] = vertices[ind0];\n      points[1] = vertices[ind0 + 1];\n      points[2] = vertices[ind1];\n      points[3] = vertices[ind1 + 1];\n      points[4] = vertices[ind2];\n      points[5] = vertices[ind2 + 1];\n      if (tempPolygon.contains(tempPoint.x, tempPoint.y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  Mesh.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n    if (this._cachedTexture) {\n      this._cachedTexture.destroy();\n      this._cachedTexture = null;\n    }\n    this.geometry = null;\n    this.shader = null;\n    this.state = null;\n    this.uvs = null;\n    this.indices = null;\n    this.vertexData = null;\n  };\n  /**\n   * The maximum number of vertices to consider batchable. Generally, the complexity\n   * of the geometry.\n   */\n  Mesh.BATCHABLE_SIZE = 100;\n  return Mesh;\n}(Container);\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform vec4 uColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\\n}\\n\";\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTextureMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nvar MeshMaterial = /** @class */function (_super) {\n  __extends(MeshMaterial, _super);\n  /**\n   * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n   * @param {object} [options] - Additional options\n   * @param {number} [options.alpha=1] - Default alpha.\n   * @param {number} [options.tint=0xFFFFFF] - Default tint.\n   * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n   * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n   * @param {object} [options.uniforms] - Custom uniforms.\n   */\n  function MeshMaterial(uSampler, options) {\n    var _this = this;\n    var uniforms = {\n      uSampler: uSampler,\n      alpha: 1,\n      uTextureMatrix: Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    };\n    // Set defaults\n    options = Object.assign({\n      tint: 0xFFFFFF,\n      alpha: 1,\n      pluginName: 'batch'\n    }, options);\n    if (options.uniforms) {\n      Object.assign(uniforms, options.uniforms);\n    }\n    _this = _super.call(this, options.program || Program.from(vertex, fragment), uniforms) || this;\n    /**\n     * Only do update if tint or alpha changes.\n     * @member {boolean}\n     * @private\n     * @default false\n     */\n    _this._colorDirty = false;\n    /**\n     * TextureMatrix instance for this Mesh, used to track Texture changes\n     *\n     * @member {PIXI.TextureMatrix}\n     * @readonly\n     */\n    _this.uvMatrix = new TextureMatrix(uSampler);\n    /**\n     * `true` if shader can be batch with the renderer's batch system.\n     * @member {boolean}\n     * @default true\n     */\n    _this.batchable = options.program === undefined;\n    /**\n     * Renderer plugin for batching\n     *\n     * @member {string}\n     * @default 'batch'\n     */\n    _this.pluginName = options.pluginName;\n    _this.tint = options.tint;\n    _this.alpha = options.alpha;\n    return _this;\n  }\n  Object.defineProperty(MeshMaterial.prototype, \"texture\", {\n    /**\n     * Reference to the texture being rendered.\n     * @member {PIXI.Texture}\n     */\n    get: function () {\n      return this.uniforms.uSampler;\n    },\n    set: function (value) {\n      if (this.uniforms.uSampler !== value) {\n        this.uniforms.uSampler = value;\n        this.uvMatrix.texture = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MeshMaterial.prototype, \"alpha\", {\n    get: function () {\n      return this._alpha;\n    },\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     * @member {number}\n     */\n    set: function (value) {\n      if (value === this._alpha) {\n        return;\n      }\n      this._alpha = value;\n      this._colorDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MeshMaterial.prototype, \"tint\", {\n    get: function () {\n      return this._tint;\n    },\n    /**\n     * Multiply tint for the material.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    set: function (value) {\n      if (value === this._tint) {\n        return;\n      }\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n      this._colorDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets called automatically by the Mesh. Intended to be overridden for custom\n   * MeshMaterial objects.\n   */\n  MeshMaterial.prototype.update = function () {\n    if (this._colorDirty) {\n      this._colorDirty = false;\n      var baseTexture = this.texture.baseTexture;\n      premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n    }\n    if (this.uvMatrix.update()) {\n      this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n    }\n  };\n  return MeshMaterial;\n}(Shader);\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nvar MeshGeometry = /** @class */function (_super) {\n  __extends(MeshGeometry, _super);\n  /**\n   * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n   * @param {Float32Array|number[]} [uvs] - Texture UVs.\n   * @param {Uint16Array|number[]} [index] - IndexBuffer\n   */\n  function MeshGeometry(vertices, uvs, index) {\n    var _this = _super.call(this) || this;\n    var verticesBuffer = new Buffer(vertices);\n    var uvsBuffer = new Buffer(uvs, true);\n    var indexBuffer = new Buffer(index, true, true);\n    _this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT).addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT).addIndex(indexBuffer);\n    /**\n     * Dirty flag to limit update calls on Mesh. For example,\n     * limiting updates on a single Mesh instance with a shared Geometry\n     * within the render loop.\n     * @private\n     * @member {number}\n     * @default -1\n     */\n    _this._updateId = -1;\n    return _this;\n  }\n  Object.defineProperty(MeshGeometry.prototype, \"vertexDirtyId\", {\n    /**\n     * If the vertex position is updated.\n     * @member {number}\n     * @readonly\n     * @private\n     */\n    get: function () {\n      return this.buffers[0]._updateID;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return MeshGeometry;\n}(Geometry);\nexport { Mesh, MeshBatchUvs, MeshGeometry, MeshMaterial };","map":{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/MeshBatchUvs.ts","../../src/Mesh.ts","../../src/MeshMaterial.ts","../../src/MeshGeometry.ts"],"names":[],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import type { TextureMatrix, Buffer } from '@pixi/core';\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    public readonly data: Float32Array;\n    public uvBuffer: Buffer;\n    public uvMatrix: TextureMatrix;\n\n    private _bufferUpdateId: number;\n    private _textureUpdateId: number;\n\n    // Internal-only properties\n    _updateID: number;\n\n    /**\n     * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n     * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer: Buffer, uvMatrix: TextureMatrix)\n    {\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer}\n         */\n        this.uvBuffer = uvBuffer;\n\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = uvMatrix;\n\n        /**\n         * UV Buffer data\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n\n        this._textureUpdateId = -1;\n\n        this._updateID = 0;\n    }\n\n    /**\n     * updates\n     *\n     * @param {boolean} [forceUpdate] - force the update\n     */\n    public update(forceUpdate?: boolean): void\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID\n        )\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data as Float32Array;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            (this.data as any) = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n","import { Shader, State } from '@pixi/core';\nimport { Point, Polygon } from '@pixi/math';\nimport { BLEND_MODES, DRAW_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { MeshBatchUvs } from './MeshBatchUvs';\nimport { MeshMaterial } from './MeshMaterial';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Texture, Renderer, Geometry, Buffer } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\nconst tempPoint = new Point();\nconst tempPolygon = new Polygon();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Mesh extends GlobalMixins.Mesh {}\n\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make your life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @memberof PIXI\n */\nexport class Mesh<T extends Shader = MeshMaterial> extends Container\n{\n    /**\n     * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n     * Can be shared between multiple Mesh objects.\n     *\n     * @type {PIXI.Shader|PIXI.MeshMaterial}\n     */\n    public shader: T;\n\n    /**\n     * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n     * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n     */\n    public state: State;\n\n    /** The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants. */\n    public drawMode: DRAW_MODES;\n\n    /**\n     * Typically the index of the IndexBuffer where to start drawing.\n     *\n     * @default 0\n     */\n    public start: number;\n\n    /**\n     * How much of the geometry to draw, by default `0` renders everything.\n     *\n     * @default 0\n     */\n    public size: number;\n\n    private _geometry: Geometry;\n\n    /** This is the caching layer used by the batcher. */\n    private vertexData: Float32Array;\n\n    /**\n     * If geometry is changed used to decide to re-transform\n     * the vertexData.\n     */\n    private vertexDirty: number;\n    private _transformID: number;\n\n    /** Internal roundPixels field. */\n    private _roundPixels: boolean;\n\n    /** Batched UV's are cached for atlas textures. */\n    private batchUvs: MeshBatchUvs;\n\n    // Internal-only properties\n    /**\n     * These are used as easy access for batching.\n     *\n     * @private\n     */\n    uvs: Float32Array;\n\n    /**\n     * These are used as easy access for batching.\n     *\n     * @private\n     */\n    indices: Uint16Array;\n    _tintRGB: number;\n    _texture: Texture;\n\n    /**\n     * @param geometry - The geometry the mesh will use.\n     * @param {PIXI.MeshMaterial} shader - The shader the mesh will use.\n     * @param state - The state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param drawMode - The drawMode, can be any of the {@link PIXI.DRAW_MODES} constants.\n     */\n    constructor(geometry: Geometry, shader: T, state?: State, drawMode: DRAW_MODES = DRAW_MODES.TRIANGLES)\n    {\n        super();\n\n        this.geometry = geometry;\n        this.shader = shader;\n        this.state = state || State.for2d();\n        this.drawMode = drawMode;\n        this.start = 0;\n        this.size = 0;\n\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = new Float32Array(1);\n        this.vertexDirty = -1;\n\n        this._transformID = -1;\n        this._roundPixels = settings.ROUND_PIXELS;\n        this.batchUvs = null;\n    }\n\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh objects.\n     */\n    get geometry(): Geometry\n    {\n        return this._geometry;\n    }\n\n    set geometry(value: Geometry)\n    {\n        if (this._geometry === value)\n        {\n            return;\n        }\n\n        if (this._geometry)\n        {\n            this._geometry.refCount--;\n\n            if (this._geometry.refCount === 0)\n            {\n                this._geometry.dispose();\n            }\n        }\n\n        this._geometry = value;\n\n        if (this._geometry)\n        {\n            this._geometry.refCount++;\n        }\n\n        this.vertexDirty = -1;\n    }\n\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     *\n     * @readonly\n     */\n    get uvBuffer(): Buffer\n    {\n        return this.geometry.buffers[1];\n    }\n\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     *\n     * @readonly\n     */\n    get verticesBuffer(): Buffer\n    {\n        return this.geometry.buffers[0];\n    }\n\n    /** Alias for {@link PIXI.Mesh#shader}. */\n    set material(value: T)\n    {\n        this.shader = value;\n    }\n\n    get material(): T\n    {\n        return this.shader;\n    }\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @default PIXI.BLEND_MODES.NORMAL;\n     */\n    set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * Null for non-MeshMaterial shaders\n     *\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return 'tint' in this.shader ? (this.shader as unknown as MeshMaterial).tint : null;\n    }\n\n    set tint(value: number)\n    {\n        (this.shader as unknown as MeshMaterial).tint = value;\n    }\n\n    /**\n     * The texture that the Mesh uses.\n     *\n     * Null for non-MeshMaterial shaders\n     */\n    get texture(): Texture\n    {\n        return 'texture' in this.shader ? (this.shader as unknown as MeshMaterial).texture : null;\n    }\n\n    set texture(value: Texture)\n    {\n        (this.shader as unknown as MeshMaterial).texture = value;\n    }\n\n    /**\n     * Standard renderer draw.\n     *\n     * @param renderer - Instance to renderer.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        const vertices = this.geometry.buffers[0].data;\n        const shader = this.shader as unknown as MeshMaterial;\n\n        // TODO benchmark check for attribute size..\n        if (\n            shader.batchable\n            && this.drawMode === DRAW_MODES.TRIANGLES\n            && vertices.length < Mesh.BATCHABLE_SIZE * 2\n        )\n        {\n            this._renderToBatch(renderer);\n        }\n        else\n        {\n            this._renderDefault(renderer);\n        }\n    }\n\n    /**\n     * Standard non-batching way of rendering.\n     *\n     * @param renderer - Instance to renderer.\n     */\n    protected _renderDefault(renderer: Renderer): void\n    {\n        const shader = this.shader as unknown as MeshMaterial;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        // bind and sync uniforms..\n        shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        renderer.shader.bind(shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n\n    /**\n     * Rendering by using the Batch system.\n     *\n     * @param renderer - Instance to renderer.\n     */\n    protected _renderToBatch(renderer: Renderer): void\n    {\n        const geometry = this.geometry;\n        const shader = this.shader as unknown as MeshMaterial;\n\n        if (shader.uvMatrix)\n        {\n            shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data as Uint16Array;\n        this._tintRGB = shader._tintRGB;\n        this._texture = shader.texture;\n\n        const pluginName = (this.material as unknown as MeshMaterial).pluginName;\n\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    }\n\n    /** Updates vertexData field based on transform and vertices. */\n    public calculateVertices(): void\n    {\n        const geometry = this.geometry;\n        const verticesBuffer = geometry.buffers[0];\n        const vertices = verticesBuffer.data;\n        const vertexDirtyId = verticesBuffer._updateID;\n\n        if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        if (this.vertexData.length !== vertices.length)\n        {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const vertexData = this.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n\n        this.vertexDirty = vertexDirtyId;\n    }\n\n    /** Updates uv field based on from geometry uv's or batchUvs. */\n    public calculateUvs(): void\n    {\n        const geomUvs = this.geometry.buffers[1];\n        const shader = this.shader as unknown as MeshMaterial;\n\n        if (!shader.uvMatrix.isSimple)\n        {\n            if (!this.batchUvs)\n            {\n                this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else\n        {\n            this.uvs = geomUvs.data as Float32Array;\n        }\n    }\n\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    }\n\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param point - The point to test.\n     * @return - The result of the test.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        if (!this.getBounds().contains(point.x, point.y))\n        {\n            return false;\n        }\n\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const vertices = this.geometry.getBuffer('aVertexPosition').data;\n\n        const points = tempPolygon.points;\n        const indices =  this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.drawMode === 4 ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        if (this._cachedTexture)\n        {\n            this._cachedTexture.destroy();\n            this._cachedTexture = null;\n        }\n\n        this.geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    }\n\n    /**\n     * The maximum number of vertices to consider batchable. Generally, the complexity\n     * of the geometry.\n     */\n    public static BATCHABLE_SIZE = 100;\n}\n","import { Program, Shader, TextureMatrix } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba } from '@pixi/utils';\nimport fragment from './shader/mesh.frag';\nimport vertex from './shader/mesh.vert';\n\nimport type { Texture } from '@pixi/core';\nimport type { Dict } from '@pixi/utils';\n\nexport interface IMeshMaterialOptions {\n    alpha?: number;\n    tint?: number;\n    pluginName?: string;\n    program?: Program;\n    uniforms?: Dict<unknown>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MeshMaterial extends GlobalMixins.MeshMaterial {}\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nexport class MeshMaterial extends Shader\n{\n    public readonly uvMatrix: TextureMatrix;\n\n    public batchable: boolean;\n    public pluginName: string;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    private _colorDirty: boolean;\n    private _alpha: number;\n    private _tint: number;\n\n    /**\n     * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n     * @param {object} [options] - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler: Texture, options?: IMeshMaterialOptions)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        /**\n         * Only do update if tint or alpha changes.\n         * @member {boolean}\n         * @private\n         * @default false\n         */\n        this._colorDirty = false;\n\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix}\n         * @readonly\n         */\n        this.uvMatrix = new TextureMatrix(uSampler);\n\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean}\n         * @default true\n         */\n        this.batchable = options.program === undefined;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /**\n     * Reference to the texture being rendered.\n     * @member {PIXI.Texture}\n     */\n    get texture(): Texture\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value: Texture)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     * @member {number}\n     */\n    set alpha(value: number)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    set tint(value: number)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * MeshMaterial objects.\n     */\n    public update(): void\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            premultiplyTintToRgba(\n                this._tint, this._alpha, this.uniforms.uColor, (baseTexture.alphaMode as unknown as boolean)\n            );\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { Buffer, Geometry } from '@pixi/core';\n\nimport type { IArrayBuffer } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nexport class MeshGeometry extends Geometry\n{\n    // Internal-only properties\n    _updateId: number;\n\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    constructor(vertices?: IArrayBuffer, uvs?: IArrayBuffer, index?: IArrayBuffer)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        /**\n         * Dirty flag to limit update calls on Mesh. For example,\n         * limiting updates on a single Mesh instance with a shared Geometry\n         * within the render loop.\n         * @private\n         * @member {number}\n         * @default -1\n         */\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     * @member {number}\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId(): number\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}