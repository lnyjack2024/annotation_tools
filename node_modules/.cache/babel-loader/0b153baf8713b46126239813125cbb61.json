{"ast":null,"code":"import { action, makeObservable, observable } from 'mobx';\nimport { ToolMode, isAnnotationReadonly, isPreview, isReviewEditable, isRework, isTemplatePreview } from 'src/utils/tool-mode';\nimport { ReviewItemResult } from '../types';\nimport ConfigStore from './ConfigStore';\nimport ValidationStore from './ValidationStore';\nimport OntologyStore from './OntologyStore';\nimport ReviewStore from './ReviewStore';\n\n/**\n * root store\n * @class\n */\nclass RootStore {\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool annotate allowed\n   */\n  get annotatable() {\n    return !isAnnotationReadonly(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool review enabled\n   */\n  get reviewable() {\n    return isReviewEditable(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool in labeling mode or template preview mode\n   */\n  get isLabeling() {\n    return this.jobProxy.toolMode === ToolMode.LABELING || this.isTemplatePreview;\n  }\n\n  /**\n   * is tool in rework mode\n   */\n  get isRework() {\n    return isRework(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool in preview mode\n   */\n  get isPreview() {\n    return isPreview(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool in template preview mode\n   */\n  get isTemplatePreview() {\n    return isTemplatePreview(this.jobProxy.toolMode);\n  }\n  constructor() {\n    /**\n     * is tool initialized\n     */\n    this.initialized = false;\n    /**\n     * ontology from payload\n     */\n    this.ontology = void 0;\n    /**\n     * review from payload\n     */\n    this.review = void 0;\n    /**\n     * config from payload\n     */\n    this.config = void 0;\n    /**\n     * results contain label results and reviews and text\n     */\n    // data = new DataProxy();\n    /**\n     * validation\n     */\n    this.validation = void 0;\n    /**\n     * job proxy\n     */\n    this.jobProxy = void 0;\n    /**\n    * get tag statistics\n    */\n    this.getTagStatistics = () => {\n      const data = {\n        totalCount: 0,\n        summary: []\n      };\n      data.summary = [];\n      this.ontology.getOntologiesStatusMap().forEach((value, key) => {\n        if (key === ReviewItemResult.MISSING) {\n          return;\n        }\n        if (value.tagCount) {\n          data.totalCount += value.tagCount;\n          data.summary.push({\n            count: value.tagCount,\n            shape: key,\n            keys: value.keys\n          });\n        }\n      });\n      return {\n        ...data\n      };\n    };\n    /**\n     * get audit statistics\n     */\n    this.getAuditStatistics = () => {\n      // all shapes\n      const objects = {\n        total: 0,\n        approved: 0,\n        rejected: 0,\n        missed: 0,\n        actualApproved: 0\n      };\n      // based on different shape types\n      const shapes = {};\n      this.ontology.updateOntologiesStatusMap();\n      this.ontology.getOntologiesStatusMap().forEach((value, key) => {\n        if (key === ReviewItemResult.MISSING) {\n          objects.missed = value.tagCount;\n          return;\n        }\n        if (!shapes[key]) {\n          shapes[key] = {\n            total: 0,\n            approved: 0,\n            rejected: 0,\n            actualApproved: 0\n          };\n        }\n        if (value.tagCount) {\n          objects.total += value.tagCount;\n          shapes[key].total = value.tagCount;\n        }\n        let hasRejected = false;\n        if (value.rejectCount) {\n          objects.rejected += value.rejectCount;\n          shapes[key].rejected = value.rejectCount;\n          hasRejected = true;\n        }\n        if (hasRejected) {\n          objects.approved += value.tagCount - value.rejectCount;\n          shapes[key].approved = value.tagCount - value.rejectCount;\n        } else {\n          objects.approved += value.tagCount;\n          shapes[key].approved = value.tagCount;\n        }\n        if (value.approveCount) {\n          objects.actualApproved += value.approveCount;\n          shapes[key].actualApproved = value.approveCount;\n        } else {\n          shapes[key].actualApproved = 0;\n        }\n      });\n      return {\n        objects,\n        shapes\n      };\n    };\n    this.ontology = new OntologyStore(this);\n    this.review = new ReviewStore(this);\n    this.config = new ConfigStore(this);\n    this.validation = new ValidationStore(this);\n    makeObservable(this, {\n      initialized: observable,\n      init: action\n    });\n  }\n  async init(payload) {\n    // init common stores\n    this.ontology.init(payload);\n    this.review.init(payload);\n    this.config.init(payload);\n    this.initialized = true;\n    // this.data.text = payload.content;\n  }\n\n  async saveResult(isSubmit = false) {\n    var _this$jobProxy;\n    return (_this$jobProxy = this.jobProxy) === null || _this$jobProxy === void 0 ? void 0 : _this$jobProxy.saveResult({\n      content: this.ontology.text,\n      results: this.ontology.getResults(false),\n      auditId: this.jobProxy.auditId\n    }, isSubmit);\n  }\n  getReviewStatistics() {\n    // all shapes\n    const objects = {\n      total: 0,\n      approved: 0,\n      rejected: 0,\n      missed: 0,\n      actualApproved: 0\n    };\n    const summary = [];\n    const approvedEleMap = {};\n    const rejectedEleMap = {};\n    this.ontology.updateOntologiesStatusMap();\n    this.ontology.getOntologiesStatusMap().forEach((value, key) => {\n      if (key === ReviewItemResult.MISSING) {\n        objects.missed = value.tagCount;\n        return;\n      }\n      if (value.tagCount) {\n        objects.total += value.tagCount;\n        summary.push({\n          count: value.tagCount,\n          shape: key,\n          keys: value.keys\n        });\n      }\n      let hasRejected = false;\n      if (value.rejectCount) {\n        objects.rejected += value.rejectCount;\n        rejectedEleMap[key] = value.rejectCount;\n        hasRejected = true;\n      }\n      if (hasRejected) {\n        objects.approved += value.tagCount - value.rejectCount;\n      } else {\n        objects.approved += value.tagCount;\n      }\n      if (value.approveCount) {\n        objects.actualApproved += value.approveCount;\n        approvedEleMap[key] = value.approveCount;\n      }\n    });\n    return {\n      elements: {\n        approved: {\n          ...approvedEleMap\n        },\n        rejected: {\n          ...rejectedEleMap\n        }\n      },\n      summary,\n      objects\n    };\n  }\n\n  /**\n  * save review result\n  */\n  async saveReviews(submit = false) {\n    const reviews = this.review.getReviews();\n    const statData = this.getReviewStatistics();\n    return this.jobProxy.saveReviews({\n      reviews\n    }, submit);\n  }\n}\nconst rootStore = new RootStore();\nexport default rootStore;","map":{"version":3,"names":["action","makeObservable","observable","ToolMode","isAnnotationReadonly","isPreview","isReviewEditable","isRework","isTemplatePreview","ReviewItemResult","ConfigStore","ValidationStore","OntologyStore","ReviewStore","RootStore","readonly","jobProxy","toolMode","annotatable","reviewable","isLabeling","LABELING","constructor","initialized","ontology","review","config","validation","getTagStatistics","data","totalCount","summary","getOntologiesStatusMap","forEach","value","key","MISSING","tagCount","push","count","shape","keys","getAuditStatistics","objects","total","approved","rejected","missed","actualApproved","shapes","updateOntologiesStatusMap","hasRejected","rejectCount","approveCount","init","payload","saveResult","isSubmit","_this$jobProxy","content","text","results","getResults","auditId","getReviewStatistics","approvedEleMap","rejectedEleMap","elements","saveReviews","submit","reviews","getReviews","statData","rootStore"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/store/RootStore.ts"],"sourcesContent":["import { action, makeObservable, observable } from 'mobx';\nimport { ToolMode, isAnnotationReadonly, isPreview, isReviewEditable, isRework, isTemplatePreview } from 'src/utils/tool-mode';\nimport { AuditStatistics, Payload, ReviewItemResult, ReviewStatistics, Statistics, SummaryItem } from '../types';\nimport JobProxy from '../../../libs/JobProxy';\nimport ConfigStore from './ConfigStore';\nimport ValidationStore from './ValidationStore';\nimport OntologyStore from './OntologyStore';\nimport ReviewStore from './ReviewStore';\n\n/**\n * root store\n * @class\n */\nclass RootStore {\n  /**\n   * is tool initialized\n   */\n  initialized = false;\n\n  /**\n   * ontology from payload\n   */\n  ontology: OntologyStore;\n\n  /**\n   * review from payload\n   */\n  review: ReviewStore;\n\n  /**\n   * config from payload\n   */\n  config: ConfigStore;\n\n  /**\n   * results contain label results and reviews and text\n   */\n  // data = new DataProxy();\n\n  /**\n   * validation\n   */\n  validation: ValidationStore;\n\n  /**\n   * job proxy\n   */\n  jobProxy?: JobProxy;\n\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool annotate allowed\n   */\n  get annotatable() {\n    return !isAnnotationReadonly(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool review enabled\n   */\n  get reviewable() {\n    return isReviewEditable(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool in labeling mode or template preview mode\n   */\n  get isLabeling() {\n    return this.jobProxy!.toolMode === ToolMode.LABELING || this.isTemplatePreview;\n  }\n\n  /**\n   * is tool in rework mode\n   */\n  get isRework() {\n    return isRework(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool in preview mode\n   */\n  get isPreview() {\n    return isPreview(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool in template preview mode\n   */\n  get isTemplatePreview() {\n    return isTemplatePreview(this.jobProxy!.toolMode);\n  }\n\n  constructor() {\n    this.ontology = new OntologyStore(this);\n    this.review = new ReviewStore(this);\n    this.config = new ConfigStore(this);\n    this.validation = new ValidationStore(this);\n\n    makeObservable(this, {\n      initialized: observable,\n      init: action,\n    });\n  }\n\n  async init(payload: Payload) {\n    // init common stores\n    this.ontology.init(payload);\n    this.review.init(payload);\n    this.config.init(payload);\n    this.initialized = true;\n    // this.data.text = payload.content;\n  }\n\n  /**\n* get tag statistics\n*/\n  getTagStatistics = () => {\n    const data: Statistics = {\n      totalCount: 0,\n      summary: [],\n    };\n    data.summary = [];\n    this.ontology.getOntologiesStatusMap().forEach((value, key) => {\n      if (key === ReviewItemResult.MISSING) {\n        return;\n      }\n      if (value.tagCount) {\n        data.totalCount += value.tagCount;\n        data.summary.push({\n          count: value.tagCount,\n          shape: key,\n          keys: value.keys\n        });\n      }\n    });\n\n    return {\n      ...data,\n\n    };\n  };\n\n  async saveResult(isSubmit = false) {\n    return this.jobProxy?.saveResult({\n      content: this.ontology.text,\n      results: this.ontology.getResults(false),\n      auditId: this.jobProxy.auditId,\n    }, isSubmit);\n\n  }\n\n  getReviewStatistics(): ReviewStatistics {\n    // all shapes\n    const objects = { total: 0, approved: 0, rejected: 0, missed: 0, actualApproved: 0 };\n    const summary: SummaryItem[] = [];\n    const approvedEleMap: {\n      [type: string]: number;\n    } = {};\n    const rejectedEleMap: {\n      [type: string]: number;\n    } = {};\n    this.ontology.updateOntologiesStatusMap();\n    this.ontology.getOntologiesStatusMap().forEach((value, key) => {\n      if (key === ReviewItemResult.MISSING) {\n        objects.missed = value.tagCount;\n        return;\n      }\n      if (value.tagCount) {\n        objects.total += value.tagCount;\n        summary.push({\n          count: value.tagCount,\n          shape: key,\n          keys: value.keys\n        });\n      }\n      let hasRejected = false;\n\n      if (value.rejectCount) {\n        objects.rejected += value.rejectCount;\n        rejectedEleMap[key] = value.rejectCount;\n        hasRejected = true;\n      }\n      if (hasRejected) {\n        objects.approved += (value.tagCount - value.rejectCount!);\n      } else {\n        objects.approved += value.tagCount;\n      }\n      if (value.approveCount) {\n        objects.actualApproved += value.approveCount;\n        approvedEleMap[key] = value.approveCount;\n      }\n    });\n\n    return {\n      elements: {\n        approved: { ...approvedEleMap },\n        rejected: { ...rejectedEleMap },\n      },\n      summary,\n      objects,\n    };\n  }\n\n  /**\n * save review result\n */\n  async saveReviews(submit = false) {\n    const reviews = this.review.getReviews();\n    const statData = this.getReviewStatistics();\n    return this.jobProxy!.saveReviews({\n      reviews,\n    }, submit);\n  }\n\n  /**\n   * get audit statistics\n   */\n  getAuditStatistics = (): AuditStatistics => {\n    // all shapes\n    const objects = { total: 0, approved: 0, rejected: 0, missed: 0, actualApproved: 0 };\n    // based on different shape types\n    const shapes: {\n      [shape: string]: { total: number; approved: number; rejected: number; actualApproved: number };\n    } = {};\n    this.ontology.updateOntologiesStatusMap();\n    this.ontology.getOntologiesStatusMap().forEach((value, key) => {\n      if (key === ReviewItemResult.MISSING) {\n        objects.missed = value.tagCount;\n        return;\n      }\n      if (!shapes[key]) {\n        shapes[key] = { total: 0, approved: 0, rejected: 0, actualApproved: 0 };\n      }\n      if (value.tagCount) {\n        objects.total += value.tagCount;\n        shapes[key].total = value.tagCount;\n      }\n      let hasRejected = false;\n      if (value.rejectCount) {\n        objects.rejected += value.rejectCount;\n        shapes[key].rejected = value.rejectCount;\n        hasRejected = true;\n      }\n      if (hasRejected) {\n        objects.approved += (value.tagCount - value.rejectCount!);\n        shapes[key].approved = value.tagCount - value.rejectCount!;\n      } else {\n        objects.approved += value.tagCount;\n        shapes[key].approved = value.tagCount;\n      }\n      if (value.approveCount) {\n        objects.actualApproved += value.approveCount;\n        shapes[key].actualApproved = value.approveCount;\n      } else {\n        shapes[key].actualApproved = 0;\n      }\n    });\n    return {\n      objects,\n      shapes,\n    };\n  };\n}\n\nconst rootStore = new RootStore();\nexport default rootStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}