{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/components/Helper/Ruler.tsx\";\nimport React from 'react';\nimport { makeObservable, reaction } from 'mobx';\nimport rootStore from '../../store/RootStore';\nimport { Align, Style } from '../../types';\nimport { wrapText } from '../../utils';\nconst pitchRange = {\n  min: 75,\n  max: 500\n};\nconst intensityRange = {\n  min: 50,\n  max: 100\n};\nclass Ruler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ratio = 1;\n    this.lineWidth = 1;\n    this.canvasRef = React.createRef();\n    this.ctx = null;\n    /**\n     * reaction disposer\n     */\n    this.reactionDisposer = void 0;\n    this.setupRulerCanvas = () => {\n      const canvas = this.canvasRef.current;\n      this.ctx = canvas.getContext('2d');\n    };\n    this.updateRuler = () => {\n      const canvas = this.canvasRef.current;\n      const rect = canvas.getBoundingClientRect();\n      this.ratio = window.devicePixelRatio;\n      canvas.width = rect.width * this.ratio;\n      canvas.height = rect.height * this.ratio;\n      if (this.props.ratioPlacement.atlasWidth > 0) {\n        this.drawCoordinates();\n      }\n    };\n    this.drawCoordinates = () => {\n      if (!this.ctx) return;\n      const {\n        amplitude,\n        frequency,\n        visible\n      } = rootStore.analyse;\n      const {\n        margin,\n        timelineHeight,\n        atlasHeight,\n        atlasWidth\n      } = this.props.ratioPlacement;\n      const fontSize = Style.FONTSIZE * this.ratio;\n\n      // draw start x\n      const leftStart = margin - 6;\n      const halfFont = fontSize / 2;\n      // waveform curve coordinates\n      if (amplitude.max !== 0) {\n        wrapText(this.ctx, amplitude.max.toFixed(6), leftStart, timelineHeight + halfFont, Align.RIGHT);\n        wrapText(this.ctx, '0', leftStart, timelineHeight + atlasHeight / 4 + halfFont, Align.RIGHT);\n        wrapText(this.ctx, amplitude.min.toFixed(6), leftStart, timelineHeight + atlasHeight / 2 - halfFont, Align.RIGHT);\n      }\n\n      /**\n       * spectrogram curve coordinates\n       */\n      if (visible.spectrogram) {\n        wrapText(this.ctx, `${frequency} Hz`, leftStart, timelineHeight + atlasHeight / 2 + 10 * this.ratio, Align.RIGHT);\n        wrapText(this.ctx, '0 Hz', leftStart, timelineHeight + atlasHeight - 3, Align.RIGHT);\n      }\n\n      /**\n       * pitch curve coordinates\n       */\n      if (visible.pitch) {\n        wrapText(this.ctx, `${pitchRange.max} Hz`, leftStart + atlasWidth + fontSize, timelineHeight + atlasHeight / 2 + 10 * this.ratio, Align.LEFT, Style.PITCH);\n        wrapText(this.ctx, `${pitchRange.min} Hz`, leftStart + atlasWidth + fontSize, timelineHeight + atlasHeight - halfFont, Align.LEFT, Style.PITCH);\n      }\n\n      /**\n       * intensity curve coordinates\n       */\n      if (visible.intensity) {\n        const align = visible.pitch ? Align.RIGHT : Align.LEFT;\n        const offsetX = visible.pitch ? 0 : fontSize;\n        wrapText(this.ctx, `${intensityRange.max} dB`, leftStart + atlasWidth + offsetX, timelineHeight + atlasHeight / 2 + 10 * this.ratio, align, Style.INTENSITY);\n        wrapText(this.ctx, `${intensityRange.min} dB`, leftStart + atlasWidth + offsetX, timelineHeight + atlasHeight - halfFont, align, Style.INTENSITY);\n      }\n    };\n    makeObservable(this, {});\n    this.reactionDisposer = reaction(() => [rootStore.analyse.amplitude, rootStore.analyse.visible], () => {\n      this.updateRuler();\n    });\n  }\n  componentDidUpdate(prevProps) {\n    if (JSON.stringify(prevProps.ratioPlacement) !== JSON.stringify(this.props.ratioPlacement)) {\n      this.updateRuler();\n    }\n  }\n  componentDidMount() {\n    this.setupRulerCanvas();\n    this.updateRuler();\n  }\n  componentWillUnmount() {\n    this.reactionDisposer();\n  }\n  render() {\n    const {\n      atlasWidth,\n      margin\n    } = rootStore.analyse.placement;\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      style: {\n        pointerEvents: 'none',\n        width: `${margin * 2 + atlasWidth}px`\n      },\n      className: \"absoluteTopLeftZeroW100H100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    });\n  }\n}\n;\nexport default Ruler;","map":{"version":3,"names":["React","makeObservable","reaction","rootStore","Align","Style","wrapText","pitchRange","min","max","intensityRange","Ruler","Component","constructor","props","ratio","lineWidth","canvasRef","createRef","ctx","reactionDisposer","setupRulerCanvas","canvas","current","getContext","updateRuler","rect","getBoundingClientRect","window","devicePixelRatio","width","height","ratioPlacement","atlasWidth","drawCoordinates","amplitude","frequency","visible","analyse","margin","timelineHeight","atlasHeight","fontSize","FONTSIZE","leftStart","halfFont","toFixed","RIGHT","spectrogram","pitch","LEFT","PITCH","intensity","align","offsetX","INTENSITY","componentDidUpdate","prevProps","JSON","stringify","componentDidMount","componentWillUnmount","render","placement","createElement","ref","style","pointerEvents","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/components/Helper/Ruler.tsx"],"sourcesContent":["import React from 'react';\nimport { makeObservable, reaction, IReactionDisposer } from 'mobx';\nimport rootStore from '../../store/RootStore';\nimport { Align, Style } from '../../types';\nimport { wrapText } from '../../utils';\n\nconst pitchRange = { min: 75, max: 500 };\nconst intensityRange = { min: 50, max: 100 };\n\ninterface RuleProps {\n  ratioPlacement: {[key: string]: number};\n}\n\nclass Ruler extends React.Component<RuleProps> {\n  ratio = 1;\n\n  lineWidth = 1;\n\n  canvasRef: React.RefObject<HTMLCanvasElement> = React.createRef();\n\n  ctx: CanvasRenderingContext2D | null = null;\n\n  /**\n   * reaction disposer\n   */\n  reactionDisposer: IReactionDisposer;\n\n  constructor(props: RuleProps) {\n    super(props);\n    makeObservable(this, {});\n\n    this.reactionDisposer = reaction(\n      () => [\n        rootStore.analyse.amplitude,\n        rootStore.analyse.visible,\n      ],\n      () => {\n        this.updateRuler();\n      },\n    );\n  }\n\n  componentDidUpdate(prevProps: RuleProps) {\n    if (JSON.stringify(prevProps.ratioPlacement) !== JSON.stringify(this.props.ratioPlacement)) {\n      this.updateRuler();\n    }\n  }\n\n  componentDidMount() {\n    this.setupRulerCanvas();\n    this.updateRuler();\n  }\n\n  componentWillUnmount() {\n    this.reactionDisposer();\n  }\n\n  setupRulerCanvas = () => {\n    const canvas = this.canvasRef.current! as HTMLCanvasElement;\n    this.ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  };\n\n  updateRuler = () => {\n    const canvas = this.canvasRef.current! as HTMLCanvasElement;\n    const rect = canvas.getBoundingClientRect();\n    this.ratio = window.devicePixelRatio;\n    canvas.width = rect.width * this.ratio;\n    canvas.height = rect.height * this.ratio;\n    if (this.props.ratioPlacement.atlasWidth > 0) {\n      this.drawCoordinates();\n    }\n  };\n\n  drawCoordinates = () => {\n    if (!this.ctx) return;\n    const {\n      amplitude,\n      frequency,\n      visible\n    } = rootStore.analyse;\n    const { margin, timelineHeight, atlasHeight, atlasWidth } = this.props.ratioPlacement;\n    const fontSize = Style.FONTSIZE * this.ratio;\n\n    // draw start x\n    const leftStart = margin - 6;\n    const halfFont = fontSize / 2;\n    // waveform curve coordinates\n    if (amplitude.max !== 0) {\n      wrapText(this.ctx, amplitude.max.toFixed(6), leftStart, timelineHeight + halfFont, Align.RIGHT);\n      wrapText(this.ctx, '0', leftStart, timelineHeight + atlasHeight / 4 + halfFont, Align.RIGHT);\n      wrapText(this.ctx, amplitude.min.toFixed(6), leftStart, timelineHeight + atlasHeight / 2 - halfFont, Align.RIGHT);\n    }\n\n    /**\n     * spectrogram curve coordinates\n     */\n    if (visible.spectrogram) {\n      wrapText(this.ctx, `${frequency} Hz`, leftStart, timelineHeight + atlasHeight / 2 + 10 * this.ratio, Align.RIGHT);\n      wrapText(this.ctx, '0 Hz', leftStart, timelineHeight + atlasHeight - 3, Align.RIGHT);\n    }\n\n    /**\n     * pitch curve coordinates\n     */\n    if (visible.pitch) {\n      wrapText(this.ctx, `${pitchRange.max} Hz`, leftStart + atlasWidth + fontSize, timelineHeight + atlasHeight / 2 + 10 * this.ratio, Align.LEFT, Style.PITCH);\n      wrapText(this.ctx, `${pitchRange.min} Hz`, leftStart + atlasWidth + fontSize, timelineHeight + atlasHeight - halfFont, Align.LEFT, Style.PITCH);\n    }\n\n    /**\n     * intensity curve coordinates\n     */\n    if (visible.intensity) {\n      const align = visible.pitch ? Align.RIGHT : Align.LEFT;\n      const offsetX = visible.pitch ? 0 : fontSize;\n      wrapText(this.ctx, `${intensityRange.max} dB`, leftStart + atlasWidth + offsetX, timelineHeight + atlasHeight / 2 + 10 * this.ratio, align, Style.INTENSITY);\n      wrapText(this.ctx, `${intensityRange.min} dB`, leftStart + atlasWidth + offsetX, timelineHeight + atlasHeight - halfFont, align, Style.INTENSITY);\n    }\n  };\n\n  render() {\n    const { atlasWidth, margin } = rootStore.analyse.placement;\n    return (\n      <canvas\n        ref={this.canvasRef}\n        style={{\n          pointerEvents: 'none',\n          width: `${margin * 2 + atlasWidth}px`,\n        }}\n        className=\"absoluteTopLeftZeroW100H100\"\n      />\n    );\n  }\n};\n\nexport default Ruler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}