{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking/components/Attributes.tsx\";\nimport React, { useMemo, useState, useImperativeHandle, useEffect, useRef } from 'react';\nimport { ConfigProvider, Form, Input, Checkbox, message, Tooltip } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport EasyForm, { utils } from '@appen/easy-form';\nimport Mousetrap from 'mousetrap';\nimport { FieldControlType } from '@appen/easy-form/es/types';\nimport Modal from '../../common/modal/Modal';\nimport { InsertTag, WrapTag } from '../../common/icons';\nimport SettingsStore from '../store/SettingsStore';\nimport { containsRTLLanguage } from '../utils';\nimport { getOCRText } from '../request';\nimport i18n from '../locales';\nimport './Attributes.scss';\nconst storagePrefixKey = 'video-tracking-ocr';\nconst checkOCRRequestCount = imageUrl => {\n  const {\n    image,\n    count = 0\n  } = JSON.parse(localStorage.getItem(storagePrefixKey) || '{}');\n  return image !== imageUrl || count < 100;\n};\nconst updateOCRRequestCount = imageUrl => {\n  const {\n    image,\n    count = 0\n  } = JSON.parse(localStorage.getItem(storagePrefixKey) || '{}');\n  if (image !== imageUrl) {\n    // reset\n    localStorage.setItem(storagePrefixKey, JSON.stringify({\n      image: imageUrl,\n      count: 1\n    }));\n  } else {\n    localStorage.setItem(storagePrefixKey, JSON.stringify({\n      image,\n      count: count + 1\n    }));\n  }\n};\nconst Attributes = React.forwardRef(({\n  readonly,\n  isMultiFrame,\n  config,\n  values,\n  ocrTagGroup,\n  snapshot,\n  currentFrame,\n  currentImage,\n  selectedInstance,\n  selectedCategoryColor,\n  onValuesChange,\n  getInstanceLabel\n}, ref) => {\n  const OCRSyncOn = useRef(true);\n  const shouldSyncOCR = useRef(false);\n  const ocrTextArea = useRef(null);\n  const [visible, setVisible] = useState(false);\n  const [syncing, setSyncing] = useState(false);\n  const [text, setText] = useState('');\n  const [applyAll, setApplyAll] = useState(false);\n  const [ontologyField, setOntologyField] = useState('');\n  // fields with initial value\n  const fieldsWithInitialValue = useMemo(() => ((config === null || config === void 0 ? void 0 : config.fields) || []).map(field => ({\n    ...field,\n    ...(values && values[field.name] !== undefined && {\n      defaultValue: values[field.name]\n    }),\n    ...(field.name === 'ef-ontology' && ontologyField && {\n      defaultValue: ontologyField\n    })\n  })), [config, values, ontologyField]);\n  // fields map\n  const fieldsMap = useMemo(() => {\n    const map = {};\n    ((config === null || config === void 0 ? void 0 : config.fields) || []).forEach(field => {\n      const {\n        name,\n        label,\n        type,\n        valueType,\n        options = []\n      } = field;\n      const newField = {\n        name,\n        type,\n        label\n      };\n      if (type === FieldControlType.RADIO || type === FieldControlType.SELECT || type === FieldControlType.CHECKBOX) {\n        // has options\n        newField.options = utils.parseOptions(options, valueType);\n      }\n      map[name] = newField;\n    });\n    return map;\n  }, [config]);\n  useImperativeHandle(ref, () => ({\n    modalVisible: visible,\n    showModal: () => {\n      if (selectedInstance) {\n        const frameData = selectedInstance.frames[currentFrame];\n        const attributesPassed = config && !frameData.attributes;\n        const ocrPassed = frameData.isOCR && !frameData.OCRText;\n        if (frameData && (attributesPassed || ocrPassed)) {\n          setVisible(true);\n          if (ocrPassed) {\n            shouldSyncOCR.current = true; // sync orc text when get snapshot\n          }\n        }\n      }\n    }\n  }));\n  const {\n    isOCR,\n    OCRText,\n    ...attributes\n  } = values || {};\n  useEffect(() => {\n    Mousetrap.bind('alt+t', () => {\n      if (SettingsStore.autoOCR) {\n        OCRSyncOn.current = !OCRSyncOn.current;\n        message.success(`${OCRSyncOn.current ? 'Enable' : 'Disable'} OCR.`);\n      }\n      return false;\n    });\n    return () => {\n      Mousetrap.unbind('alt+t');\n    };\n  }, []);\n  useEffect(() => {\n    if (!shouldSyncOCR.current) {\n      setText(OCRText || '');\n    } else {\n      setText('');\n    }\n    setApplyAll(false);\n    if (visible && fieldsMap['ef-ontology'] && selectedInstance && selectedInstance.frames[currentFrame] && !selectedInstance.frames[currentFrame].attributes) {\n      setOntologyField(selectedInstance.category);\n    } else {\n      setOntologyField('');\n    }\n  }, [visible]);\n  useEffect(() => {\n    if (shouldSyncOCR.current) {\n      handleOCRSync();\n    }\n  }, [snapshot]);\n  const handleOCRSync = async () => {\n    if (!SettingsStore.autoOCR) {\n      // disable ocr sync when auto ocr turned off\n      return;\n    }\n    if (snapshot) {\n      setSyncing(true);\n      const base64Str = snapshot.split(',').pop();\n      if (base64Str && OCRSyncOn.current && checkOCRRequestCount(currentImage)) {\n        let ocrText;\n        try {\n          ocrText = await getOCRText(base64Str);\n          ocrText = ocrText.replace(/\\n/g, ' ').trim();\n        } catch (e) {\n          ocrText = '';\n        }\n        setText(ocrText);\n        shouldSyncOCR.current = false;\n        updateOCRRequestCount(currentImage);\n      }\n      setSyncing(false);\n    }\n  };\n  const handleValuesChange = v => {\n    const allValues = {\n      ...v\n    };\n    if (isOCR) {\n      allValues.isOCR = true;\n      allValues.OCRText = text;\n    }\n    onValuesChange(allValues, applyAll);\n  };\n  const renderField = key => {\n    const field = fieldsMap[key];\n    const fieldValue = values[key];\n    let displayValue = '';\n    if (fieldValue !== undefined) {\n      if (field === null || field === void 0 ? void 0 : field.options) {\n        const getOptionLabel = value => {\n          const option = field.options.find(o => o.value === value);\n          return option && option.label ? option.label : value.toString();\n        };\n        displayValue = Array.isArray(fieldValue) ? fieldValue.map(getOptionLabel).toString() : getOptionLabel(fieldValue);\n      } else {\n        displayValue = fieldValue.toString();\n      }\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      className: \"value-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"value-item-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, `${field.label || field.name || key}:`), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"value-item-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, field.type === FieldControlType.IMAGETEXT\n    // eslint-disable-next-line react/no-danger\n    ? /*#__PURE__*/React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: displayValue\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }) : displayValue));\n  };\n  const handleTagClick = (group, tag) => {\n    if (ocrTextArea.current && ocrTextArea.current.resizableTextArea) {\n      const domTextArea = ocrTextArea.current.resizableTextArea.textArea;\n      const txt = domTextArea.value;\n      const before = txt.substring(0, domTextArea.selectionStart);\n      const selected = txt.substring(domTextArea.selectionStart, domTextArea.selectionEnd);\n      const after = txt.substring(domTextArea.selectionEnd);\n      let newTxt = domTextArea.value;\n      let newSelection = before === null || before === void 0 ? void 0 : before.length;\n      if (group.type === 'standalone') {\n        newSelection += tag.text.length;\n        newTxt = `${before}${tag.text}${after}`;\n      } else if (group.type === 'tag') {\n        newSelection += tag.prefix.length + (selected === null || selected === void 0 ? void 0 : selected.length) + (selected.length === 0 ? 0 : tag.suffix.length);\n        newTxt = `${before}${tag.prefix}${selected}${tag.suffix}${after}`;\n      }\n      domTextArea.value = newTxt;\n      setText(newTxt);\n      domTextArea.focus();\n      domTextArea.setSelectionRange(newSelection, newSelection);\n    }\n  };\n  const renderTag = (group, tag, key) => /*#__PURE__*/React.createElement(Tooltip, {\n    key: key,\n    destroyTooltipOnHide: {\n      keepParent: false\n    },\n    title: `${tag.prefix ? tag.prefix : ''}${tag.suffix ? tag.suffix : ''}${tag.text ? tag.text : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `ocr-tag-group-tag ocr-tag-group-tag-${group.type}`,\n    onClick: () => handleTagClick(group, tag),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }\n  }, tag.name));\n  const renderTagGroup = (group, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: group.name,\n    destroyTooltipOnHide: {\n      keepParent: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ocr-tag-group-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }, group.type === 'tag' && /*#__PURE__*/React.createElement(WrapTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 36\n    }\n  }), group.type === 'standalone' && /*#__PURE__*/React.createElement(InsertTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 43\n    }\n  }))), group.tags.map((tag, idx) => renderTag(group, tag, `${key}-${idx}`)));\n  const snapshotStyle = {\n    backgroundImage: `url(${snapshot})`,\n    backgroundSize: 'contain',\n    backgroundRepeat: 'no-repeat'\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"attributes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }\n  }, !selectedInstance ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"no-instance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }, i18n.translate('NO_INSTANCE_SELECTED')) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"instance-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"instance-label-dot\",\n    style: {\n      backgroundColor: selectedCategoryColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }), getInstanceLabel(selectedInstance)), selectedInstance && selectedInstance.frames[currentFrame] && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"values-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }\n  }, isOCR && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"value-item\",\n    style: {\n      ...snapshotStyle,\n      height: 60\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"value-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"value-item-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, `${i18n.translate('TEXT_LABEL')}:`), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"value-item-value\",\n    dir: containsRTLLanguage(OCRText) ? 'rtl' : 'ltr',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 17\n    }\n  }, OCRText))), config && attributes && Object.keys(attributes).length > 0 && Object.keys(attributes).map(key => renderField(key)), !readonly && (config || isOCR) && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"edit-btn\",\n    onClick: () => setVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }\n  }, i18n.translate('EDIT_ATTRIBUTES'))), /*#__PURE__*/React.createElement(Modal, Object.assign({\n    className: \"attributes-form\",\n    visible: visible,\n    draggable: true,\n    closable: false,\n    dragId: \"video-tracking-attributes\",\n    onClose: () => setVisible(false)\n  }, selectedInstance && {\n    title: getInstanceLabel(selectedInstance)\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }\n  }, isOCR && /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: \"easyform\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      ...snapshotStyle,\n      height: 72\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    colon: false,\n    className: \"ocr-text-field\",\n    labelCol: {\n      span: 24\n    },\n    label: /*#__PURE__*/React.createElement(React.Fragment, null, i18n.translate('TEXT_LABEL'), syncing && /*#__PURE__*/React.createElement(SyncOutlined, {\n      spin: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 33\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input.TextArea, {\n    ref: ocrTextArea,\n    disabled: syncing,\n    value: text,\n    onChange: e => setText(e.target.value),\n    dir: containsRTLLanguage(text) ? 'rtl' : 'ltr',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 17\n    }\n  })), ocrTagGroup && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ocr-tag-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 19\n    }\n  }, ocrTagGroup.map((group, idx) => renderTagGroup(group, `ocr-tag-group-${idx}`)))), /*#__PURE__*/React.createElement(EasyForm, {\n    theme: \"dark\",\n    fields: fieldsWithInitialValue,\n    conditions: config === null || config === void 0 ? void 0 : config.conditions,\n    effects: config === null || config === void 0 ? void 0 : config.effects,\n    rules: config === null || config === void 0 ? void 0 : config.rules,\n    submitText: i18n.translate('COMMON_SUBMIT'),\n    onSubmit: v => {\n      handleValuesChange(v);\n      setVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 11\n    }\n  }), isMultiFrame && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      bottom: 6,\n      left: 132\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: \"easyform\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: applyAll,\n    onChange: e => setApplyAll(e.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 17\n    }\n  }, i18n.translate('APPLY_TO_FOLLOWING_FRAMES')))))));\n});\nexport default Attributes;","map":{"version":3,"names":["React","useMemo","useState","useImperativeHandle","useEffect","useRef","ConfigProvider","Form","Input","Checkbox","message","Tooltip","SyncOutlined","EasyForm","utils","Mousetrap","FieldControlType","Modal","InsertTag","WrapTag","SettingsStore","containsRTLLanguage","getOCRText","i18n","storagePrefixKey","checkOCRRequestCount","imageUrl","image","count","JSON","parse","localStorage","getItem","updateOCRRequestCount","setItem","stringify","Attributes","forwardRef","readonly","isMultiFrame","config","values","ocrTagGroup","snapshot","currentFrame","currentImage","selectedInstance","selectedCategoryColor","onValuesChange","getInstanceLabel","ref","OCRSyncOn","shouldSyncOCR","ocrTextArea","visible","setVisible","syncing","setSyncing","text","setText","applyAll","setApplyAll","ontologyField","setOntologyField","fieldsWithInitialValue","fields","map","field","name","undefined","defaultValue","fieldsMap","forEach","label","type","valueType","options","newField","RADIO","SELECT","CHECKBOX","parseOptions","modalVisible","showModal","frameData","frames","attributesPassed","attributes","ocrPassed","isOCR","OCRText","current","bind","autoOCR","success","unbind","category","handleOCRSync","base64Str","split","pop","ocrText","replace","trim","e","handleValuesChange","v","allValues","renderField","key","fieldValue","displayValue","getOptionLabel","value","option","find","o","toString","Array","isArray","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","IMAGETEXT","dangerouslySetInnerHTML","__html","handleTagClick","group","tag","resizableTextArea","domTextArea","textArea","txt","before","substring","selectionStart","selected","selectionEnd","after","newTxt","newSelection","length","prefix","suffix","focus","setSelectionRange","renderTag","destroyTooltipOnHide","keepParent","title","onClick","renderTagGroup","tags","idx","snapshotStyle","backgroundImage","backgroundSize","backgroundRepeat","translate","style","backgroundColor","Fragment","height","dir","Object","keys","assign","draggable","closable","dragId","onClose","position","prefixCls","Item","colon","labelCol","span","spin","TextArea","disabled","onChange","target","theme","conditions","effects","rules","submitText","onSubmit","bottom","left","checked"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking/components/Attributes.tsx"],"sourcesContent":["import React, { useMemo, useState, useImperativeHandle, useEffect, useRef } from 'react';\nimport { ConfigProvider, Form, Input, Checkbox, message, Tooltip } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport EasyForm, { utils } from '@appen/easy-form';\nimport Mousetrap from 'mousetrap';\nimport { Field, Condition, Effect, Rule, FieldValue, FieldControlType, FieldOption } from '@appen/easy-form/es/types';\nimport Modal from '../../common/modal/Modal';\nimport { InsertTag, WrapTag } from '../../common/icons';\nimport SettingsStore from '../store/SettingsStore';\nimport { Instance, TagProps, TagGroupProps } from '../types';\nimport { containsRTLLanguage } from '../utils';\nimport { getOCRText } from '../request';\nimport i18n from '../locales';\nimport './Attributes.scss';\n\nconst storagePrefixKey = 'video-tracking-ocr';\nconst checkOCRRequestCount = (imageUrl: string) => {\n  const { image, count = 0 } = JSON.parse(localStorage.getItem(storagePrefixKey) || '{}');\n  return image !== imageUrl || count < 100;\n};\nconst updateOCRRequestCount = (imageUrl: string) => {\n  const { image, count = 0 } = JSON.parse(localStorage.getItem(storagePrefixKey) || '{}');\n  if (image !== imageUrl) {\n    // reset\n    localStorage.setItem(storagePrefixKey, JSON.stringify({ image: imageUrl, count: 1 }));\n  } else {\n    localStorage.setItem(storagePrefixKey, JSON.stringify({ image, count: count + 1 }));\n  }\n};\n\nexport interface AttributesHandle {\n  modalVisible: boolean;\n  showModal: () => void;\n}\n\ninterface AttributesProps {\n  readonly: boolean;\n  isMultiFrame: boolean;\n  config: {\n    fields: Field[];\n    conditions?: Condition[];\n    effects?: Effect[];\n    rules?: Rule[];\n  } | null;\n  values: any;\n  ocrTagGroup: TagGroupProps[] | null,\n  snapshot: string;\n  currentFrame: number;\n  currentImage: string;\n  selectedInstance?: Instance;\n  selectedCategoryColor: string;\n  onValuesChange: (values: any, applyAll: boolean) => void;\n  getInstanceLabel: (instance: Instance) => string;\n}\n\nconst Attributes = React.forwardRef<AttributesHandle, AttributesProps>(({\n  readonly,\n  isMultiFrame,\n  config,\n  values,\n  ocrTagGroup,\n  snapshot,\n  currentFrame,\n  currentImage,\n  selectedInstance,\n  selectedCategoryColor,\n  onValuesChange,\n  getInstanceLabel,\n}, ref) => {\n  const OCRSyncOn = useRef(true);\n  const shouldSyncOCR = useRef(false);\n  const ocrTextArea = useRef<any>(null);\n  const [visible, setVisible] = useState(false);\n  const [syncing, setSyncing] = useState(false);\n  const [text, setText] = useState('');\n  const [applyAll, setApplyAll] = useState(false);\n  const [ontologyField, setOntologyField] = useState('');\n  // fields with initial value\n  const fieldsWithInitialValue = useMemo(() => (config?.fields || []).map((field) => ({\n    ...field,\n    ...values && values[field.name] !== undefined && {\n      defaultValue: values[field.name],\n    },\n    ...field.name === 'ef-ontology' && ontologyField && {\n      defaultValue: ontologyField,\n    },\n  })), [config, values, ontologyField]);\n  // fields map\n  const fieldsMap = useMemo(() => {\n    const map: {\n      [fieldName: string]: { name: string; type: FieldControlType; label?: string; options?: FieldOption[] };\n    } = {};\n    (config?.fields || []).forEach((field) => {\n      const { name, label, type, valueType, options = [] } = field;\n      const newField: { name: string; type: FieldControlType; label?: string; options?: FieldOption[] } = { name, type, label };\n      if (type === FieldControlType.RADIO || type === FieldControlType.SELECT || type === FieldControlType.CHECKBOX) {\n        // has options\n        newField.options = utils.parseOptions(options, valueType);\n      }\n      map[name] = newField;\n    });\n    return map;\n  }, [config]);\n  useImperativeHandle(ref, () => ({\n    modalVisible: visible,\n    showModal: () => {\n      if (selectedInstance) {\n        const frameData = selectedInstance.frames[currentFrame];\n        const attributesPassed = config && !frameData.attributes;\n        const ocrPassed = frameData.isOCR && !frameData.OCRText;\n        if (frameData && (attributesPassed || ocrPassed)) {\n          setVisible(true);\n          if (ocrPassed) {\n            shouldSyncOCR.current = true; // sync orc text when get snapshot\n          }\n        }\n      }\n    },\n  }));\n\n  const { isOCR, OCRText, ...attributes } = values || {};\n\n  useEffect(() => {\n    Mousetrap.bind('alt+t', () => {\n      if (SettingsStore.autoOCR) {\n        OCRSyncOn.current = !OCRSyncOn.current;\n        message.success(`${OCRSyncOn.current ? 'Enable' : 'Disable'} OCR.`);\n      }\n      return false;\n    });\n    return () => {\n      Mousetrap.unbind('alt+t');\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!shouldSyncOCR.current) {\n      setText(OCRText || '');\n    } else {\n      setText('');\n    }\n    setApplyAll(false);\n    if (visible && fieldsMap['ef-ontology'] && selectedInstance && selectedInstance.frames[currentFrame] && !selectedInstance.frames[currentFrame].attributes) {\n      setOntologyField(selectedInstance.category);\n    } else {\n      setOntologyField('');\n    }\n  }, [visible]);\n\n  useEffect(() => {\n    if (shouldSyncOCR.current) {\n      handleOCRSync();\n    }\n  }, [snapshot]);\n\n  const handleOCRSync = async () => {\n    if (!SettingsStore.autoOCR) {\n      // disable ocr sync when auto ocr turned off\n      return;\n    }\n    if (snapshot) {\n      setSyncing(true);\n      const base64Str = snapshot.split(',').pop();\n      if (base64Str && OCRSyncOn.current && checkOCRRequestCount(currentImage)) {\n        let ocrText;\n        try {\n          ocrText = await getOCRText(base64Str);\n          ocrText = ocrText.replace(/\\n/g, ' ').trim();\n        } catch (e) {\n          ocrText = '';\n        }\n        setText(ocrText);\n        shouldSyncOCR.current = false;\n        updateOCRRequestCount(currentImage);\n      }\n      setSyncing(false);\n    }\n  };\n\n  const handleValuesChange = (v: any) => {\n    const allValues = { ...v };\n    if (isOCR) {\n      allValues.isOCR = true;\n      allValues.OCRText = text;\n    }\n    onValuesChange(allValues, applyAll);\n  };\n\n  const renderField = (key: string) => {\n    const field = fieldsMap[key];\n    const fieldValue = values[key];\n\n    let displayValue = '';\n    if (fieldValue !== undefined) {\n      if (field?.options) {\n        const getOptionLabel = (value: FieldValue) => {\n          const option = field.options!.find((o) => o.value === value);\n          return (option && option.label) ? option.label : value.toString();\n        };\n        displayValue = Array.isArray(fieldValue) ? fieldValue.map(getOptionLabel).toString() : getOptionLabel(fieldValue);\n      } else {\n        displayValue = fieldValue.toString();\n      }\n    }\n\n    return (\n      <div key={key} className=\"value-item\">\n        <div className=\"value-item-label\">\n          {`${field.label || field.name || key}:`}\n        </div>\n        <div className=\"value-item-value\">\n          {\n            field.type === FieldControlType.IMAGETEXT\n              // eslint-disable-next-line react/no-danger\n              ? <div dangerouslySetInnerHTML={{ __html: displayValue }} />\n              : displayValue\n          }\n        </div>\n      </div>\n    );\n  };\n\n  const handleTagClick = (group: TagGroupProps, tag: TagProps) => {\n    if (ocrTextArea.current && ocrTextArea.current.resizableTextArea) {\n      const domTextArea = ocrTextArea.current.resizableTextArea.textArea;\n      const txt = domTextArea.value;\n      const before = txt.substring(0, domTextArea.selectionStart);\n      const selected = txt.substring(domTextArea.selectionStart, domTextArea.selectionEnd);\n      const after = txt.substring(domTextArea.selectionEnd);\n      let newTxt = domTextArea.value;\n      let newSelection = before?.length;\n      if (group.type === 'standalone') {\n        newSelection += tag.text!.length;\n        newTxt = `${before}${tag.text}${after}`;\n      } else if (group.type === 'tag') {\n        newSelection += tag.prefix!.length + selected?.length + (selected.length === 0 ? 0 : tag.suffix!.length);\n        newTxt = `${before}${tag.prefix}${selected}${tag.suffix}${after}`;\n      }\n      domTextArea.value = newTxt;\n      setText(newTxt);\n      domTextArea.focus();\n      domTextArea.setSelectionRange(newSelection, newSelection);\n    }\n  };\n\n  const renderTag = (group: TagGroupProps, tag: TagProps, key: string) => (\n    <Tooltip\n      key={key}\n      destroyTooltipOnHide={{ keepParent: false }}\n      title={`${tag.prefix ? tag.prefix : ''}${tag.suffix ? tag.suffix : ''}${tag.text ? tag.text : ''}`}\n    >\n      <span\n        className={`ocr-tag-group-tag ocr-tag-group-tag-${group.type}`}\n        onClick={() => handleTagClick(group, tag)}\n      >\n        {tag.name}\n      </span>\n    </Tooltip>\n  );\n\n  const renderTagGroup = (group: TagGroupProps, key: string) => (\n    <div key={key}>\n      <Tooltip title={group.name} destroyTooltipOnHide={{ keepParent: false }}>\n        <span className=\"ocr-tag-group-icon\">\n          {group.type === 'tag' && <WrapTag />}\n          {group.type === 'standalone' && <InsertTag />}\n        </span>\n      </Tooltip>\n      {group.tags.map((tag, idx) => (renderTag(group, tag, `${key}-${idx}`)))}\n    </div>\n  );\n\n  const snapshotStyle = {\n    backgroundImage: `url(${snapshot})`,\n    backgroundSize: 'contain',\n    backgroundRepeat: 'no-repeat',\n  };\n  return (\n    <div className=\"attributes\">\n      {!selectedInstance ? (\n        <div className=\"no-instance\">{i18n.translate('NO_INSTANCE_SELECTED')}</div>\n      ) : (\n        <div className=\"instance-label\">\n          <div className=\"instance-label-dot\" style={{ backgroundColor: selectedCategoryColor }} />\n          {getInstanceLabel(selectedInstance)}\n        </div>\n      )}\n      {selectedInstance && selectedInstance.frames[currentFrame] && (\n        <div className=\"values-list\">\n          {isOCR && (\n            <>\n              <div className=\"value-item\" style={{ ...snapshotStyle, height: 60 }} />\n              <div className=\"value-item\">\n                <div className=\"value-item-label\">{`${i18n.translate('TEXT_LABEL')}:`}</div>\n                <div className=\"value-item-value\" dir={containsRTLLanguage(OCRText) ? 'rtl' : 'ltr'}>{OCRText}</div>\n              </div>\n            </>\n          )}\n          {config && attributes && Object.keys(attributes).length > 0 && Object.keys(attributes).map((key) => renderField(key))}\n          {!readonly && (config || isOCR) && (\n            <div className=\"edit-btn\" onClick={() => setVisible(true)}>\n              {i18n.translate('EDIT_ATTRIBUTES')}\n            </div>\n          )}\n        </div>\n      )}\n      <Modal\n        className=\"attributes-form\"\n        visible={visible}\n        draggable\n        closable={false}\n        dragId=\"video-tracking-attributes\"\n        onClose={() => setVisible(false)}\n        {...selectedInstance && { title: getInstanceLabel(selectedInstance) }}\n      >\n        <div style={{ position: 'relative' }}>\n          {isOCR && (\n            <ConfigProvider prefixCls=\"easyform\">\n              <Form.Item>\n                <div style={{ ...snapshotStyle, height: 72 }} />\n              </Form.Item>\n              <Form.Item\n                colon={false}\n                className=\"ocr-text-field\"\n                labelCol={{ span: 24 }}\n                label={(\n                  <>\n                    {i18n.translate('TEXT_LABEL')}\n                    {syncing && <SyncOutlined spin />}\n                  </>\n                )}\n              >\n                <Input.TextArea\n                  ref={ocrTextArea}\n                  disabled={syncing}\n                  value={text}\n                  onChange={(e) => setText(e.target.value)}\n                  dir={containsRTLLanguage(text) ? 'rtl' : 'ltr'}\n                />\n              </Form.Item>\n              {\n                ocrTagGroup && (\n                  <div className=\"ocr-tag-group\">\n                    {ocrTagGroup.map((group, idx) => renderTagGroup(group, `ocr-tag-group-${idx}`))}\n                  </div>\n                )\n              }\n            </ConfigProvider>\n          )}\n          <EasyForm\n            theme=\"dark\"\n            fields={fieldsWithInitialValue}\n            conditions={config?.conditions}\n            effects={config?.effects}\n            rules={config?.rules}\n            submitText={i18n.translate('COMMON_SUBMIT')}\n            onSubmit={(v) => {\n              handleValuesChange(v);\n              setVisible(false);\n            }}\n          />\n          {isMultiFrame && (\n            <div style={{ position: 'absolute', bottom: 6, left: 132 }}>\n              <ConfigProvider prefixCls=\"easyform\">\n                <Checkbox checked={applyAll} onChange={(e) => setApplyAll(e.target.checked)}>\n                  {i18n.translate('APPLY_TO_FOLLOWING_FRAMES')}\n                </Checkbox>\n              </ConfigProvider>\n            </div>\n          )}\n        </div>\n      </Modal>\n    </div>\n  );\n});\n\nexport default Attributes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}