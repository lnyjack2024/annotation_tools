{"ast":null,"code":"import{v4 as uuid}from'uuid';import{notification}from'antd';import{isAnnotationReadonly}from'../../../../utils/tool-mode';import{translate,triggerForm,StyleConfigMode,getConfigColor,SegmentMode}from'../../constants';export const createSegment=(start,end,segmentConfig,lineConfig)=>{start=Number.isNaN(parseFloat(start))?0:start;end=Number.isNaN(parseFloat(end))?null:end;const defaultValues={};segmentConfig.fields.forEach(value=>{if(value.defaultValue)defaultValues[value.name]=value.defaultValue;});return{id:uuid(),start,end,qaChecked:undefined,qaComment:'',qaReason:null,qaWorkerName:null,attributes:defaultValues,content:[createLine('none',lineConfig)]};};export const createLine=(role,lineConfig)=>{const defaultValues={};lineConfig.fields.forEach(value=>{if(value.defaultValue)defaultValues[value.name]=value.defaultValue;});return{role:role||'none',text:'',attributes:defaultValues};};export const getVideoContainer=(state,data)=>{const{videoContainer}=data;const{wavesurfers}=state;wavesurfers.getVideoContainer(videoContainer);return state;};export const getAudioContainer=(state,data)=>{const{waveform,timeline,audioContainer,minimap}=data;const{wavesurfers}=state;wavesurfers.getAudioContainer(waveform,timeline,audioContainer,minimap);return state;};export const segmentDeepClone=(results,videoIndex,segmentIndex)=>{results[videoIndex]=[...results[videoIndex]];const segments=results[videoIndex];segments[segmentIndex]={...segments[segmentIndex]};const segment=segments[segmentIndex];return segment;};const lineDeepClone=(results,videoIndex,segmentIndex,lineIndex)=>{const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.content=[...segment.content];const{content}=segment;content[lineIndex]={...content[lineIndex]};const line=content[lineIndex];return line;};export const setLineText=(state,data)=>{let{videoIndex,segmentIndex}=data;const{lineIndex,text}=data;const{currentVideo,currentSegment}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;segmentIndex=Number.isNaN(parseInt(segmentIndex,10))?currentSegment:segmentIndex;const results=[...state.results];const line=lineDeepClone(results,videoIndex,segmentIndex,lineIndex);line.text=text;return{...state,results};};export const setLineRole=(state,data)=>{const{lineIndex,role,actionType}=data;let{videoIndex,segmentIndex}=data;const{currentVideo,currentSegment,wavesurfers}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;segmentIndex=Number.isNaN(parseInt(segmentIndex,10))?currentSegment:segmentIndex;// const segmentIndex\nconst results=[...state.results];const line=lineDeepClone(results,videoIndex,segmentIndex,lineIndex);const segment=results[videoIndex][segmentIndex];const roles=segment.content.map(value=>value.role);if(roles.indexOf(role)>=0)return state;const prevRole=line.role;line.role=role;let timer=setTimeout(()=>{clearTimeout(timer);timer=null;wavesurfers.setLineColor(videoIndex,segmentIndex,lineIndex,role,prevRole,actionType);},0);return{...state,results};};export const setLineCategory=(state,data)=>{const{lineIndex,key,value}=data;let{videoIndex,segmentIndex}=data;const{currentVideo,currentSegment}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;segmentIndex=Number.isNaN(parseInt(segmentIndex,10))?currentSegment:segmentIndex;// const segmentIndex\nconst results=[...state.results];const line=lineDeepClone(results,videoIndex,segmentIndex,lineIndex);line.attributes={...line.attributes};const{attributes}=line;attributes[key]=value;return{...state,results};};export const setLineAttributes=(state,data)=>{var _styleConfig$groups;const{videoIndex,segmentIndex,lineIndex,attributes}=data;const{styleConfig,wavesurfers}=state;const results=[...state.results];const line=lineDeepClone(results,videoIndex,segmentIndex,lineIndex);line.attributes={...attributes};if((styleConfig===null||styleConfig===void 0?void 0:styleConfig.mode)===StyleConfigMode.line&&(styleConfig===null||styleConfig===void 0?void 0:(_styleConfig$groups=styleConfig.groups)===null||_styleConfig$groups===void 0?void 0:_styleConfig$groups.length)>0){const color=getConfigColor(attributes,styleConfig.groups);wavesurfers.setSegmentColor(videoIndex,segmentIndex,[lineIndex],color);}return{...state,results};};export const setSegmentType=(state,data)=>{let{videoIndex,segmentIndex}=data;const{value}=data;const{currentVideo,currentSegment}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;segmentIndex=Number.isNaN(parseInt(segmentIndex,10))?currentSegment:segmentIndex;// const segmentIndex\nconst results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.type=value;return{...state,results};};export const setSegmentCategory=(state,data)=>{let{videoIndex,segmentIndex}=data;const{key,value}=data;const{currentVideo,currentSegment}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;segmentIndex=Number.isNaN(parseInt(segmentIndex,10))?currentSegment:segmentIndex;const results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.attributes={...segment.attributes};const{attributes}=segment;attributes[key]=value;return{...state,results};};export const setSegmentAttributes=(state,data)=>{var _styleConfig$groups2;const results=[...state.results];const{styleConfig,wavesurfers}=state;const{videoIndex,segmentIndex,attributes}=data;const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.attributes={...attributes};if((styleConfig===null||styleConfig===void 0?void 0:styleConfig.mode)===StyleConfigMode.segment&&(styleConfig===null||styleConfig===void 0?void 0:(_styleConfig$groups2=styleConfig.groups)===null||_styleConfig$groups2===void 0?void 0:_styleConfig$groups2.length)>0){const color=getConfigColor(attributes,styleConfig.groups);const lines=Array(segment.content.length).fill(0).map((v,i)=>i);wavesurfers.setSegmentColor(videoIndex,segmentIndex,lines,color);}return{...state,results};};export const setSegmentTimestamp=(state,data)=>{// eslint-disable-next-line prefer-const\nlet{videoIndex,segmentIndex,start,end}=data;const{currentVideo}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;const results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);if(start!==undefined&&start!==null)segment.start=start;if(end!==undefined&&end!==null)segment.end=end;return{...state,results};};export const moveSegmentInBatch=(state,data)=>{let{videoIndex}=data;const{min,max,step}=data;const{currentVideo/* , results */}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;const results=[...state.results];results[videoIndex]=[...results[videoIndex]];const segments=results[videoIndex];segments.forEach((segment,i)=>{segments[i]={...segments[i]};if(segments[i].start>min){segments[i].start=segments[i].start+step<min?min:segments[i].start+step;}if(segments[i].end<max){segments[i].end=segments[i].end+step>max?max:segments[i].end+step;}});// segments[segmentIndex] = { ...segments[segmentIndex] };\n// const segment = segments[segmentIndex];\n// return segment;\n// results[videoIndex] = results[videoIndex].map((segment) => {\n//   const newSegment = segmentDeepClone()//deepClone(segment);\n//   if (newSegment.start > min) {\n//     newSegment.start = newSegment.start + step < min ? min : newSegment.start + step;\n//   }\n//   if (newSegment.end < max) {\n//     newSegment.end = newSegment.end + step > max ? max : newSegment.end + step;\n//   }\n//   return newSegment;\n// });\nreturn{...state,results};};const deepClone=item=>JSON.parse(JSON.stringify(item));export const mergeSegmentBackward=(state,data)=>{let{videoIndex}=data;const{segmentIndex}=data;const{currentVideo}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;const results=[...state.results];results[videoIndex]=deepClone(results[videoIndex]);const nextSegment=results[videoIndex][segmentIndex];const prevSegment=results[videoIndex][segmentIndex-1];const prevRoles=[];prevSegment.content.forEach(line=>{prevRoles.push(line.role);});nextSegment.content.forEach(line=>{if(prevRoles.indexOf(line.role)>=0){const i=prevRoles.indexOf(line.role);prevSegment.content[i].text+=line.text;}else if(line.role!=='none')prevSegment.content.push(line);});results[videoIndex].splice(segmentIndex,1);return{...state,results};};export const splitSegmentForward=(state,data)=>{const{segmentIndex,start,end,prevRules,nextRules}=data;let{videoIndex}=data;const{segmentConfig,lineConfig,currentVideo}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;const results=[...state.results];results[videoIndex]=deepClone(results[videoIndex]);const nextSegment=createSegment(start,end,segmentConfig,lineConfig);results[videoIndex].splice(segmentIndex+1,0,nextSegment);if(prevRules&&nextRules){const prevSegment=results[videoIndex][segmentIndex];prevSegment.content=[];nextSegment.content=[];prevRules.forEach(rule=>prevSegment.content.push(createLine(rule.role,lineConfig)));nextRules.forEach(rule=>nextSegment.content.push(createLine(rule.role,lineConfig)));}return{...state,results};};export const pushLine=(state,data)=>{// eslint-disable-next-line prefer-const\nlet{segmentIndex,role,lineIndex,videoIndex,deleteContent,actionType}=data;const{wavesurfers,lineConfig,currentVideo}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;const results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.content=[...segment.content];const{content,start,end}=segment;lineIndex=Number.isNaN(parseInt(lineIndex,10))?content.length:lineIndex;wavesurfers.insertLine({role,videoIndex,segmentIndex,lineIndex,start,end});data.lineIndex=lineIndex;if(actionType!=='history')wavesurfers.addHistory('pushLine',data);content.push(deleteContent||createLine(role,lineConfig));return{...state,results};};export const deleteLine=(state,data)=>{const{segmentIndex,lineIndex,actionType}=data;let{videoIndex}=data;const{wavesurfers,currentVideo}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;const results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.content=[...segment.content];const deleteContent=segment.content.splice(lineIndex,1);wavesurfers.deleteLine(data);if(actionType!=='history')wavesurfers.addHistory('deleteLine',{...data,deleteContent:deleteContent[0]});return{...state,results};};export const toppingLine=(state,data)=>{const{segmentIndex,lineIndex}=data;let{videoIndex}=data;const{wavesurfers,currentVideo}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;const results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.content=[...segment.content];const line=JSON.parse(JSON.stringify(segment.content[lineIndex]));segment.content.splice(lineIndex,1);segment.content.unshift(line);wavesurfers.toppingLine(data);return{...state,results};};export const setSegmentQAState=(state,data)=>{const{qaChecked}=data;let{segmentIndex,videoIndex}=data;const{currentVideo,currentSegment}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;segmentIndex=Number.isNaN(parseInt(segmentIndex,10))?currentSegment:segmentIndex;const results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.qaChecked=qaChecked;segment.qaWorkerName=state.workerName;return{...state,results};};export const setSegmentQAComment=(state,data)=>{const{qaComment}=data;let{segmentIndex,videoIndex}=data;const{currentVideo,currentSegment}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;segmentIndex=Number.isNaN(parseInt(segmentIndex,10))?currentSegment:segmentIndex;const results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.qaComment=qaComment;segment.qaWorkerName=state.workerName;return{...state,results};};export const setSegmentQAReason=(state,data)=>{const{qaReason}=data;let{segmentIndex,videoIndex}=data;const{currentVideo,currentSegment}=state;videoIndex=Number.isNaN(parseInt(videoIndex,10))?currentVideo:videoIndex;segmentIndex=Number.isNaN(parseInt(segmentIndex,10))?currentSegment:segmentIndex;const results=[...state.results];const segment=segmentDeepClone(results,videoIndex,segmentIndex);segment.qaReason=qaReason;segment.qaWorkerName=state.workerName;return{...state,results};};export const removeSegment=(state,data)=>{const{segmentIndex,videoIndex}=data;const results=[...state.results];results[videoIndex]=[...results[videoIndex]];const segments=results[videoIndex];segments.splice(segmentIndex,1);return{...state,results};};export const appendSegment=(state,data)=>{const{segment,segmentIndex,videoIndex:vIndex}=data;const{segmentOverlap,segmentMode}=state;const videoIndex=Number.isNaN(parseInt(vIndex,10))?state.currentVideo:vIndex;const results=deepClone(state.results);const currentIndex=results[videoIndex].findIndex(seg=>seg.id===segment.id);if(currentIndex>=0){results[videoIndex].splice(currentIndex,1,segment);}else if(segmentIndex!==undefined){results[videoIndex].splice(segmentIndex,0,segment);}else{results[videoIndex].push(segment);}results[videoIndex].sort((a,b)=>a.start-b.start);const index=results[videoIndex].indexOf(segment);if(segmentMode===SegmentMode.continuous||segmentMode===SegmentMode.individual&&!segmentOverlap){const prevSegment=results[videoIndex][index-1];const nextSegment=results[videoIndex][index+1];if(prevSegment&&segment.start<prevSegment.end){segment.start=prevSegment.end;}if(nextSegment&&segment.end>nextSegment.start){segment.end=nextSegment.start;}}return{...state,results,currentSegment:index};};export const updateSegment=(state,data)=>{const{segment,videoIndex:vIndex}=data;const{segmentOverlap,segmentMode}=state;const videoIndex=Number.isNaN(parseInt(vIndex,10))?state.currentVideo:vIndex;const results=deepClone(state.results);const segmentIndex=results[videoIndex].findIndex(seg=>seg.id===segment.id);if(segmentIndex>=0){results[videoIndex].splice(segmentIndex,1,segment);}results[videoIndex].sort((a,b)=>a.start-b.start);const index=results[videoIndex].indexOf(segment);if(segmentMode===SegmentMode.continuous||segmentMode===SegmentMode.individual&&!segmentOverlap){const prevSegment=results[videoIndex][index-1];const nextSegment=results[videoIndex][index+1];if(prevSegment&&segment.start<prevSegment.end){segment.start=prevSegment.end;}if(nextSegment&&segment.end>nextSegment.start){segment.end=nextSegment.start;}}return{...state,results,currentSegment:index};};export const deleteSegment=(state,data)=>{const{segmentIndex,videoIndex:vIndex}=data;const videoIndex=Number.isNaN(parseInt(vIndex,10))?state.currentVideo:vIndex;const results=deepClone(state.results);if(segmentIndex>=0){results[videoIndex].splice(segmentIndex,1);}return{...state,results};};export const setSegments=(state,data)=>{const{videoIndex,segments=[]}=data;const results=deepClone(state.results);results[videoIndex]=segments;return{...state,results};};export const updateLineRole=(state,data)=>{const{videoIndex:vIndex,segmentIndex:sIndex,lineIndex,role}=data;const videoIndex=Number.isNaN(parseInt(vIndex,10))?state.currentVideo:vIndex;const segmentIndex=Number.isNaN(parseInt(sIndex,10))?state.currentSegment:sIndex;const results=deepClone(state.results);const line=lineDeepClone(results,videoIndex,segmentIndex,lineIndex);const segment=results[videoIndex][segmentIndex];const roles=segment.content.map(value=>value.role);if(roles.indexOf(role)>=0){return state;}line.role=role;return{...state,results};};export const setSegmentStartEnd=(state,data)=>{const{videoIndex:vIndex,segmentIndex:sIndex,start,end}=data;const videoIndex=Number.isNaN(parseInt(vIndex,10))?state.currentVideo:vIndex;const segmentIndex=Number.isNaN(parseInt(sIndex,10))?state.currentSegment:sIndex;const results=deepClone(state.results);const segment=results[videoIndex][segmentIndex];segment.start=start;segment.end=end;state.wavesurfers.setSegmentStartEnd(videoIndex,segmentIndex,start,end);results[videoIndex].sort((a,b)=>a.start-b.start);const index=results[videoIndex].indexOf(segment);return{...state,results,currentSegment:index};};export const verifyCurrentForm=(state,action)=>{if(isAnnotationReadonly(state.toolMode))return true;const{results,segmentConfig,currentVideo,currentSegment,keyAttribute,lineConfig}=state;const currentValues=results[currentVideo][currentSegment];if(currentSegment<0)return true;const updatedSegment=triggerForm({...segmentConfig,fields:[...segmentConfig.fields,...keyAttribute.options]},currentValues.attributes);// add segment default values\ncurrentValues.attributes=updatedSegment.updatedValues;const segmentFields=updatedSegment.updatedFields;const segmentFieldIndex=segmentFields.findIndex(v=>v.required===true&&v.readonly!==true&&v.visible!==false&&(v.defaultValue===undefined||v.defaultValue===''));const lineIndex=[];let lineFields=[];for(let i=0;i<((_currentValues$conten=currentValues.content)===null||_currentValues$conten===void 0?void 0:_currentValues$conten.length);i+=1){var _currentValues$conten;const line=currentValues.content[i];const updatedLine=triggerForm(lineConfig,line.attributes);// add line default values\nline.attributes=updatedLine.updatedValues;lineFields=updatedLine.updatedFields;const index=lineFields.findIndex(v=>v.required===true&&v.readonly!==true&&v.visible!==false&&(v.defaultValue===undefined||v.defaultValue===''));if(index>=0)lineIndex.push(index);}if(segmentFieldIndex<0&&lineIndex.length===0)return{result:true,data:currentValues};const err=\"Item \".concat(currentVideo+1,\"-Segment \").concat(currentSegment+1,\": \").concat(translate('DATA_ERROR_REQUIRED'),\" \").concat((segmentFields[segmentFieldIndex]||lineFields[lineIndex[0]]).label);if(action!=='nohint'){notification.error({message:err});}return{result:false,error:err};};export const isInput=()=>document.activeElement.tagName==='INPUT'&&(document.activeElement.type==='text'||document.activeElement.type==='number')||document.activeElement.tagName==='TEXTAREA';","map":{"version":3,"names":["v4","uuid","notification","isAnnotationReadonly","translate","triggerForm","StyleConfigMode","getConfigColor","SegmentMode","createSegment","start","end","segmentConfig","lineConfig","Number","isNaN","parseFloat","defaultValues","fields","forEach","value","defaultValue","name","id","qaChecked","undefined","qaComment","qaReason","qaWorkerName","attributes","content","createLine","role","text","getVideoContainer","state","data","videoContainer","wavesurfers","getAudioContainer","waveform","timeline","audioContainer","minimap","segmentDeepClone","results","videoIndex","segmentIndex","segments","segment","lineDeepClone","lineIndex","line","setLineText","currentVideo","currentSegment","parseInt","setLineRole","actionType","roles","map","indexOf","prevRole","timer","setTimeout","clearTimeout","setLineColor","setLineCategory","key","setLineAttributes","_styleConfig$groups","styleConfig","mode","groups","length","color","setSegmentColor","setSegmentType","type","setSegmentCategory","setSegmentAttributes","_styleConfig$groups2","lines","Array","fill","v","i","setSegmentTimestamp","moveSegmentInBatch","min","max","step","deepClone","item","JSON","parse","stringify","mergeSegmentBackward","nextSegment","prevSegment","prevRoles","push","splice","splitSegmentForward","prevRules","nextRules","rule","pushLine","deleteContent","insertLine","addHistory","deleteLine","toppingLine","unshift","setSegmentQAState","workerName","setSegmentQAComment","setSegmentQAReason","removeSegment","appendSegment","vIndex","segmentOverlap","segmentMode","currentIndex","findIndex","seg","sort","a","b","index","continuous","individual","updateSegment","deleteSegment","setSegments","updateLineRole","sIndex","setSegmentStartEnd","verifyCurrentForm","action","toolMode","keyAttribute","currentValues","updatedSegment","options","updatedValues","segmentFields","updatedFields","segmentFieldIndex","required","readonly","visible","lineFields","_currentValues$conten","updatedLine","result","err","concat","label","error","message","isInput","document","activeElement","tagName"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/long-audio/redux/reducer/segmentController.js"],"sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { notification } from 'antd';\nimport { isAnnotationReadonly } from '../../../../utils/tool-mode';\nimport { translate, triggerForm, StyleConfigMode, getConfigColor, SegmentMode } from '../../constants';\n\nexport const createSegment = (start, end, segmentConfig, lineConfig) => {\n  start = Number.isNaN(parseFloat(start)) ? 0 : start;\n  end = Number.isNaN(parseFloat(end)) ? null : end;\n  const defaultValues = {};\n  segmentConfig.fields.forEach((value) => {\n    if (value.defaultValue) defaultValues[value.name] = value.defaultValue;\n  });\n  return {\n    id: uuid(),\n    start,\n    end,\n    qaChecked: undefined,\n    qaComment: '',\n    qaReason: null,\n    qaWorkerName: null,\n    attributes: defaultValues,\n    content: [createLine('none', lineConfig)],\n  };\n};\n\nexport const createLine = (role, lineConfig) => {\n  const defaultValues = {};\n  lineConfig.fields.forEach((value) => {\n    if (value.defaultValue) defaultValues[value.name] = value.defaultValue;\n  });\n  return {\n    role: role || 'none',\n    text: '',\n    attributes: defaultValues,\n  };\n};\n\nexport const getVideoContainer = (state, data) => {\n  const { videoContainer } = data;\n  const { wavesurfers } = state;\n  wavesurfers.getVideoContainer(videoContainer);\n  return state;\n};\n\nexport const getAudioContainer = (state, data) => {\n  const { waveform, timeline, audioContainer, minimap } = data;\n  const { wavesurfers } = state;\n  wavesurfers.getAudioContainer(waveform, timeline, audioContainer, minimap);\n  return state;\n};\n\nexport const segmentDeepClone = (results, videoIndex, segmentIndex) => {\n  results[videoIndex] = [...results[videoIndex]];\n  const segments = results[videoIndex];\n  segments[segmentIndex] = { ...segments[segmentIndex] };\n  const segment = segments[segmentIndex];\n  return segment;\n};\n\nconst lineDeepClone = (results, videoIndex, segmentIndex, lineIndex) => {\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.content = [...segment.content];\n  const { content } = segment;\n  content[lineIndex] = { ...content[lineIndex] };\n  const line = content[lineIndex];\n  return line;\n};\n\nexport const setLineText = (state, data) => {\n  let { videoIndex, segmentIndex } = data;\n  const { lineIndex, text } = data;\n  const { currentVideo, currentSegment } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  segmentIndex = Number.isNaN(parseInt(segmentIndex, 10)) ? currentSegment : segmentIndex;\n  const results = [...state.results];\n  const line = lineDeepClone(results, videoIndex, segmentIndex, lineIndex);\n  line.text = text;\n  return { ...state, results };\n};\n\nexport const setLineRole = (state, data) => {\n  const { lineIndex, role, actionType } = data;\n  let { videoIndex, segmentIndex } = data;\n  const { currentVideo, currentSegment, wavesurfers } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  segmentIndex = Number.isNaN(parseInt(segmentIndex, 10)) ? currentSegment : segmentIndex;\n  // const segmentIndex\n  const results = [...state.results];\n  const line = lineDeepClone(results, videoIndex, segmentIndex, lineIndex);\n  const segment = results[videoIndex][segmentIndex];\n  const roles = segment.content.map((value) => value.role);\n  if (roles.indexOf(role) >= 0) return state;\n  const prevRole = line.role;\n  line.role = role;\n  let timer = setTimeout(() => {\n    clearTimeout(timer);\n    timer = null;\n    wavesurfers.setLineColor(videoIndex, segmentIndex, lineIndex, role, prevRole, actionType);\n  }, 0);\n  return { ...state, results };\n};\n\nexport const setLineCategory = (state, data) => {\n  const { lineIndex, key, value } = data;\n  let { videoIndex, segmentIndex } = data;\n  const { currentVideo, currentSegment } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  segmentIndex = Number.isNaN(parseInt(segmentIndex, 10)) ? currentSegment : segmentIndex;\n  // const segmentIndex\n  const results = [...state.results];\n  const line = lineDeepClone(results, videoIndex, segmentIndex, lineIndex);\n  line.attributes = { ...line.attributes };\n  const { attributes } = line;\n  attributes[key] = value;\n  return { ...state, results };\n};\n\nexport const setLineAttributes = (state, data) => {\n  const { videoIndex, segmentIndex, lineIndex, attributes } = data;\n  const { styleConfig, wavesurfers } = state;\n  const results = [...state.results];\n  const line = lineDeepClone(results, videoIndex, segmentIndex, lineIndex);\n  line.attributes = { ...attributes };\n  if (styleConfig?.mode === StyleConfigMode.line && styleConfig?.groups?.length > 0) {\n    const color = getConfigColor(attributes, styleConfig.groups);\n    wavesurfers.setSegmentColor(videoIndex, segmentIndex, [lineIndex], color);\n  }\n  return { ...state, results };\n};\n\nexport const setSegmentType = (state, data) => {\n  let { videoIndex, segmentIndex } = data;\n  const { value } = data;\n  const { currentVideo, currentSegment } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  segmentIndex = Number.isNaN(parseInt(segmentIndex, 10)) ? currentSegment : segmentIndex;\n  // const segmentIndex\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.type = value;\n  return { ...state, results };\n};\n\nexport const setSegmentCategory = (state, data) => {\n  let { videoIndex, segmentIndex } = data;\n  const { key, value } = data;\n  const { currentVideo, currentSegment } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  segmentIndex = Number.isNaN(parseInt(segmentIndex, 10)) ? currentSegment : segmentIndex;\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.attributes = { ...segment.attributes };\n  const { attributes } = segment;\n  attributes[key] = value;\n  return { ...state, results };\n};\n\nexport const setSegmentAttributes = (state, data) => {\n  const results = [...state.results];\n  const { styleConfig, wavesurfers } = state;\n  const { videoIndex, segmentIndex, attributes } = data;\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.attributes = { ...attributes };\n  if (styleConfig?.mode === StyleConfigMode.segment && styleConfig?.groups?.length > 0) {\n    const color = getConfigColor(attributes, styleConfig.groups);\n    const lines = Array(segment.content.length).fill(0).map((v, i) => i);\n    wavesurfers.setSegmentColor(videoIndex, segmentIndex, lines, color);\n  }\n  return { ...state, results };\n};\n\nexport const setSegmentTimestamp = (state, data) => {\n  // eslint-disable-next-line prefer-const\n  let { videoIndex, segmentIndex, start, end } = data;\n  const { currentVideo } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  if (start !== undefined && start !== null) segment.start = start;\n  if (end !== undefined && end !== null) segment.end = end;\n  return { ...state, results };\n};\n\nexport const moveSegmentInBatch = (state, data) => {\n  let { videoIndex } = data;\n  const { min, max, step } = data;\n  const { currentVideo/* , results */ } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  const results = [...state.results];\n  results[videoIndex] = [...results[videoIndex]];\n  const segments = results[videoIndex];\n  segments.forEach((segment, i) => {\n    segments[i] = { ...segments[i] };\n    if (segments[i].start > min) {\n      segments[i].start = segments[i].start + step < min ? min : segments[i].start + step;\n    }\n    if (segments[i].end < max) {\n      segments[i].end = segments[i].end + step > max ? max : segments[i].end + step;\n    }\n  });\n  // segments[segmentIndex] = { ...segments[segmentIndex] };\n  // const segment = segments[segmentIndex];\n  // return segment;\n\n  // results[videoIndex] = results[videoIndex].map((segment) => {\n  //   const newSegment = segmentDeepClone()//deepClone(segment);\n  //   if (newSegment.start > min) {\n  //     newSegment.start = newSegment.start + step < min ? min : newSegment.start + step;\n  //   }\n  //   if (newSegment.end < max) {\n  //     newSegment.end = newSegment.end + step > max ? max : newSegment.end + step;\n  //   }\n  //   return newSegment;\n  // });\n  return { ...state, results };\n};\n\nconst deepClone = (item) => JSON.parse(JSON.stringify(item));\n\nexport const mergeSegmentBackward = (state, data) => {\n  let { videoIndex } = data;\n  const { segmentIndex } = data;\n  const { currentVideo } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  const results = [...state.results];\n  results[videoIndex] = deepClone(results[videoIndex]);\n  const nextSegment = results[videoIndex][segmentIndex];\n  const prevSegment = results[videoIndex][segmentIndex - 1];\n  const prevRoles = [];\n  prevSegment.content.forEach((line) => {\n    prevRoles.push(line.role);\n  });\n  nextSegment.content.forEach((line) => {\n    if (prevRoles.indexOf(line.role) >= 0) {\n      const i = prevRoles.indexOf(line.role);\n      prevSegment.content[i].text += line.text;\n    } else if (line.role !== 'none') prevSegment.content.push(line);\n  });\n  results[videoIndex].splice(segmentIndex, 1);\n  return { ...state, results };\n};\n\nexport const splitSegmentForward = (state, data) => {\n  const { segmentIndex, start, end, prevRules, nextRules } = data;\n  let { videoIndex } = data;\n  const { segmentConfig, lineConfig, currentVideo } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  const results = [...state.results];\n  results[videoIndex] = deepClone(results[videoIndex]);\n  const nextSegment = createSegment(start, end, segmentConfig, lineConfig);\n  results[videoIndex].splice(segmentIndex + 1, 0, nextSegment);\n  if (prevRules && nextRules) {\n    const prevSegment = results[videoIndex][segmentIndex];\n    prevSegment.content = [];\n    nextSegment.content = [];\n    prevRules.forEach((rule) => prevSegment.content.push(createLine(rule.role, lineConfig)));\n    nextRules.forEach((rule) => nextSegment.content.push(createLine(rule.role, lineConfig)));\n  }\n  return { ...state, results };\n};\n\nexport const pushLine = (state, data) => {\n  // eslint-disable-next-line prefer-const\n  let { segmentIndex, role, lineIndex, videoIndex, deleteContent, actionType } = data;\n  const { wavesurfers, lineConfig, currentVideo } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.content = [...segment.content];\n  const { content, start, end } = segment;\n  lineIndex = Number.isNaN(parseInt(lineIndex, 10)) ? content.length : lineIndex;\n  wavesurfers.insertLine({ role, videoIndex, segmentIndex, lineIndex, start, end });\n  data.lineIndex = lineIndex;\n  if (actionType !== 'history') wavesurfers.addHistory('pushLine', data);\n  content.push(deleteContent || createLine(role, lineConfig));\n  return { ...state, results };\n};\n\nexport const deleteLine = (state, data) => {\n  const { segmentIndex, lineIndex, actionType } = data;\n  let { videoIndex } = data;\n  const { wavesurfers, currentVideo } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.content = [...segment.content];\n  const deleteContent = segment.content.splice(lineIndex, 1);\n  wavesurfers.deleteLine(data);\n  if (actionType !== 'history') wavesurfers.addHistory('deleteLine', { ...data, deleteContent: deleteContent[0] });\n  return {\n    ...state,\n    results,\n  };\n};\n\nexport const toppingLine = (state, data) => {\n  const { segmentIndex, lineIndex } = data;\n  let { videoIndex } = data;\n  const { wavesurfers, currentVideo } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.content = [...segment.content];\n  const line = JSON.parse(JSON.stringify(segment.content[lineIndex]));\n  segment.content.splice(lineIndex, 1);\n  segment.content.unshift(line);\n  wavesurfers.toppingLine(data);\n\n  return { ...state, results };\n};\n\nexport const setSegmentQAState = (state, data) => {\n  const { qaChecked } = data;\n  let { segmentIndex, videoIndex } = data;\n  const { currentVideo, currentSegment } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  segmentIndex = Number.isNaN(parseInt(segmentIndex, 10)) ? currentSegment : segmentIndex;\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.qaChecked = qaChecked;\n  segment.qaWorkerName = state.workerName;\n  return { ...state, results };\n};\n\nexport const setSegmentQAComment = (state, data) => {\n  const { qaComment } = data;\n  let { segmentIndex, videoIndex } = data;\n  const { currentVideo, currentSegment } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  segmentIndex = Number.isNaN(parseInt(segmentIndex, 10)) ? currentSegment : segmentIndex;\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.qaComment = qaComment;\n  segment.qaWorkerName = state.workerName;\n  return { ...state, results };\n};\n\nexport const setSegmentQAReason = (state, data) => {\n  const { qaReason } = data;\n  let { segmentIndex, videoIndex } = data;\n  const { currentVideo, currentSegment } = state;\n  videoIndex = Number.isNaN(parseInt(videoIndex, 10)) ? currentVideo : videoIndex;\n  segmentIndex = Number.isNaN(parseInt(segmentIndex, 10)) ? currentSegment : segmentIndex;\n\n  const results = [...state.results];\n  const segment = segmentDeepClone(results, videoIndex, segmentIndex);\n  segment.qaReason = qaReason;\n  segment.qaWorkerName = state.workerName;\n  return { ...state, results };\n};\n\nexport const removeSegment = (state, data) => {\n  const { segmentIndex, videoIndex } = data;\n  const results = [...state.results];\n  results[videoIndex] = [...results[videoIndex]];\n  const segments = results[videoIndex];\n  segments.splice(segmentIndex, 1);\n  return { ...state, results };\n};\n\nexport const appendSegment = (state, data) => {\n  const { segment, segmentIndex, videoIndex: vIndex } = data;\n  const { segmentOverlap, segmentMode } = state;\n  const videoIndex = Number.isNaN(parseInt(vIndex, 10)) ? state.currentVideo : vIndex;\n  const results = deepClone(state.results);\n  const currentIndex = results[videoIndex].findIndex((seg) => seg.id === segment.id);\n  if (currentIndex >= 0) {\n    results[videoIndex].splice(currentIndex, 1, segment);\n  } else if (segmentIndex !== undefined) {\n    results[videoIndex].splice(segmentIndex, 0, segment);\n  } else {\n    results[videoIndex].push(segment);\n  }\n  results[videoIndex].sort((a, b) => a.start - b.start);\n  const index = results[videoIndex].indexOf(segment);\n  if (segmentMode === SegmentMode.continuous || (segmentMode === SegmentMode.individual && !segmentOverlap)) {\n    const prevSegment = results[videoIndex][index - 1];\n    const nextSegment = results[videoIndex][index + 1];\n    if (prevSegment && segment.start < prevSegment.end) {\n      segment.start = prevSegment.end;\n    }\n    if (nextSegment && segment.end > nextSegment.start) {\n      segment.end = nextSegment.start;\n    }\n  }\n  return { ...state, results, currentSegment: index };\n};\n\nexport const updateSegment = (state, data) => {\n  const { segment, videoIndex: vIndex } = data;\n  const { segmentOverlap, segmentMode } = state;\n  const videoIndex = Number.isNaN(parseInt(vIndex, 10)) ? state.currentVideo : vIndex;\n  const results = deepClone(state.results);\n  const segmentIndex = results[videoIndex].findIndex((seg) => seg.id === segment.id);\n  if (segmentIndex >= 0) {\n    results[videoIndex].splice(segmentIndex, 1, segment);\n  }\n  results[videoIndex].sort((a, b) => a.start - b.start);\n  const index = results[videoIndex].indexOf(segment);\n  if (segmentMode === SegmentMode.continuous || (segmentMode === SegmentMode.individual && !segmentOverlap)) {\n    const prevSegment = results[videoIndex][index - 1];\n    const nextSegment = results[videoIndex][index + 1];\n    if (prevSegment && segment.start < prevSegment.end) {\n      segment.start = prevSegment.end;\n    }\n    if (nextSegment && segment.end > nextSegment.start) {\n      segment.end = nextSegment.start;\n    }\n  }\n  return { ...state, results, currentSegment: index };\n};\n\nexport const deleteSegment = (state, data) => {\n  const { segmentIndex, videoIndex: vIndex } = data;\n  const videoIndex = Number.isNaN(parseInt(vIndex, 10)) ? state.currentVideo : vIndex;\n  const results = deepClone(state.results);\n  if (segmentIndex >= 0) {\n    results[videoIndex].splice(segmentIndex, 1);\n  }\n  return { ...state, results };\n};\n\nexport const setSegments = (state, data) => {\n  const { videoIndex, segments = [] } = data;\n  const results = deepClone(state.results);\n  results[videoIndex] = segments;\n  return { ...state, results };\n};\n\nexport const updateLineRole = (state, data) => {\n  const { videoIndex: vIndex, segmentIndex: sIndex, lineIndex, role } = data;\n  const videoIndex = Number.isNaN(parseInt(vIndex, 10)) ? state.currentVideo : vIndex;\n  const segmentIndex = Number.isNaN(parseInt(sIndex, 10)) ? state.currentSegment : sIndex;\n\n  const results = deepClone(state.results);\n  const line = lineDeepClone(results, videoIndex, segmentIndex, lineIndex);\n  const segment = results[videoIndex][segmentIndex];\n  const roles = segment.content.map((value) => value.role);\n  if (roles.indexOf(role) >= 0) {\n    return state;\n  }\n  line.role = role;\n  return { ...state, results };\n};\n\nexport const setSegmentStartEnd = (state, data) => {\n  const { videoIndex: vIndex, segmentIndex: sIndex, start, end } = data;\n  const videoIndex = Number.isNaN(parseInt(vIndex, 10)) ? state.currentVideo : vIndex;\n  const segmentIndex = Number.isNaN(parseInt(sIndex, 10)) ? state.currentSegment : sIndex;\n  const results = deepClone(state.results);\n  const segment = results[videoIndex][segmentIndex];\n  segment.start = start;\n  segment.end = end;\n  state.wavesurfers.setSegmentStartEnd(videoIndex, segmentIndex, start, end);\n  results[videoIndex].sort((a, b) => a.start - b.start);\n  const index = results[videoIndex].indexOf(segment);\n  return { ...state, results, currentSegment: index };\n};\n\nexport const verifyCurrentForm = (state, action) => {\n  if (isAnnotationReadonly(state.toolMode)) return true;\n  const { results, segmentConfig, currentVideo, currentSegment, keyAttribute, lineConfig } = state;\n  const currentValues = results[currentVideo][currentSegment];\n  if (currentSegment < 0) return true;\n  const updatedSegment = triggerForm({\n    ...segmentConfig,\n    fields: [...segmentConfig.fields, ...keyAttribute.options]\n  }, currentValues.attributes);\n  // add segment default values\n  currentValues.attributes = updatedSegment.updatedValues;\n  const segmentFields = updatedSegment.updatedFields;\n  const segmentFieldIndex = segmentFields.findIndex((v) => v.required === true && v.readonly !== true && v.visible !== false && (v.defaultValue === undefined || v.defaultValue === ''));\n\n  const lineIndex = [];\n  let lineFields = [];\n  for (let i = 0; i < currentValues.content?.length; i += 1) {\n    const line = currentValues.content[i];\n    const updatedLine = triggerForm(lineConfig, line.attributes);\n    // add line default values\n    line.attributes = updatedLine.updatedValues;\n    lineFields = updatedLine.updatedFields;\n    const index = lineFields.findIndex((v) => v.required === true && v.readonly !== true && v.visible !== false && (v.defaultValue === undefined || v.defaultValue === ''));\n    if (index >= 0) lineIndex.push(index);\n  }\n  if (segmentFieldIndex < 0 && lineIndex.length === 0) return { result: true, data: currentValues };\n  const err = `Item ${currentVideo + 1}-Segment ${currentSegment + 1}: ${translate('DATA_ERROR_REQUIRED')} ${(segmentFields[segmentFieldIndex] || lineFields[lineIndex[0]]).label}`;\n  if (action !== 'nohint') {\n    notification.error({ message: err });\n  }\n  return { result: false, error: err };\n};\n\nexport const isInput = () => (document.activeElement.tagName === 'INPUT' && (document.activeElement.type === 'text' || document.activeElement.type === 'number')) || document.activeElement.tagName === 'TEXTAREA';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}