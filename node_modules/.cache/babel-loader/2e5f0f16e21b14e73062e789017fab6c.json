{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nimport i18n from '../locales';\nimport { ViewMode } from '../types';\nimport ReviewItem from '../model/ReviewItem';\nconst STACK_SIZE = 20;\n;\n/**\n * undo & redo store\n * @class\n */\nexport default class UndoStore {\n  /**\n   * is undo disabled\n   * @getter\n   */\n  get undoDisabled() {\n    return this.pointer <= 0;\n  }\n\n  /**\n   * is redo disabled\n   * @getter\n   */\n  get redoDisabled() {\n    return this.pointer >= this.stack.length;\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * current pointer\n     */\n    this.pointer = 0;\n    /**\n     * last stored data uuid\n     */\n    this.lastStoreId = '';\n    /**\n     * saved status\n     */\n    this.stack = [];\n    /**\n     * current data uuid\n     */\n    this.storeId = '';\n    /**\n     * saved data copy\n     */\n    this.savedData = {};\n    makeAutoObservable(this, {\n      rootStore: false,\n      stack: false,\n      storeId: false,\n      savedData: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * preserve current data\n   * @param data\n   */\n  preserve(data = {}) {\n    this.storeId = uuidv4();\n    this.savedData = cloneDeep(data);\n    return this.storeId;\n  }\n\n  /**\n   * save to stack\n   * @param uid\n   * @param data\n   */\n  save(uid, data = {}) {\n    if (uid === this.storeId) {\n      // same command\n      this.stack = this.stack.slice(0, this.pointer);\n      this.stack.push({\n        before: this.savedData,\n        after: cloneDeep(data)\n      });\n      if (this.stack.length > STACK_SIZE) {\n        this.stack.shift();\n      } else {\n        this.pointer += 1;\n      }\n      this.lastStoreId = uid;\n    }\n    this.storeId = '';\n    this.savedData = {};\n  }\n\n  /**\n   * push state by prev & curr state\n   * @param prevState\n   * @param currState\n   */\n  push(prevState, currState) {\n    this.stack = this.stack.slice(0, this.pointer);\n    this.stack.push({\n      before: cloneDeep(prevState),\n      after: cloneDeep(currState)\n    });\n    if (this.stack.length > STACK_SIZE) {\n      this.stack.shift();\n    } else {\n      this.pointer += 1;\n    }\n    this.lastStoreId = uuidv4();\n  }\n\n  /**\n   * undo\n   */\n  undo() {\n    if (this.undoDisabled || this.rootStore.config.isAnyModalOpened || this.rootStore.shape.isDrawing) {\n      return;\n    }\n    if (this.pointer > 0) {\n      this.pointer -= 1;\n      const item = this.stack[this.pointer];\n      if (item && item.before) {\n        this.updateData(item.before, item.after);\n        message.success(i18n.translate('UNDO_SUCCESS'));\n      }\n    }\n  }\n\n  /**\n   * redo\n   */\n  redo() {\n    if (this.redoDisabled || this.rootStore.config.isAnyModalOpened || this.rootStore.shape.isDrawing) {\n      return;\n    }\n    if (this.pointer < this.stack.length) {\n      this.pointer += 1;\n      const item = this.stack[this.pointer - 1];\n      if (item && item.after) {\n        this.updateData(item.after, item.before);\n        message.success(i18n.translate('REDO_SUCCESS'));\n      }\n    }\n  }\n\n  /**\n   * update data (used for undo / redo)\n   * @param curr\n   * @param prev\n   */\n  updateData(curr, prev) {\n    var _prev$instances, _curr$instances, _prev$frames, _curr$frames, _prev$reviews, _curr$reviews, _prev$relationships, _curr$relationships;\n    const {\n      selectedInstances,\n      selectedInstanceItems,\n      getInstanceById,\n      deleteInstance,\n      deleteInstanceItem,\n      createInstanceFromData\n    } = this.rootStore.instance;\n    const {\n      getShapeByInstanceItem,\n      deleteShape,\n      setupShape\n    } = this.rootStore.shape;\n    const {\n      currentFrame\n    } = this.rootStore.frame;\n    const selectedInstanceMap = {};\n    selectedInstances.forEach(instance => {\n      selectedInstanceMap[instance.id] = selectedInstanceItems.filter(i => i.instance === instance).map(i => i.id);\n    });\n    this.rootStore.cancelShapeWorking();\n    const isGridView = this.rootStore.config.viewMode === ViewMode.GRID;\n    (_prev$instances = prev.instances) === null || _prev$instances === void 0 ? void 0 : _prev$instances.forEach(affectedInstance => {\n      if (affectedInstance) {\n        const instance = getInstanceById(affectedInstance.id);\n        if (instance) {\n          affectedInstance.children.forEach(affectedItem => {\n            const item = instance.items[affectedItem.id];\n            if (item) {\n              affectedItem.cameras.forEach(affectedCamera => {\n                const camera = item.cameras[affectedCamera.camera];\n                if (camera) {\n                  // delete frame\n                  affectedCamera.frames.forEach(affectedFrame => {\n                    delete camera.frames[affectedFrame.frameIndex];\n                    if (!isGridView && affectedFrame.frameIndex === currentFrame) {\n                      // remove shapes if needed\n                      const shape = getShapeByInstanceItem(item, camera.camera);\n                      if (shape) {\n                        deleteShape(shape);\n                      }\n                    }\n                  });\n                  // delete camera if needed\n                  if (camera.isEmpty) {\n                    delete item.cameras[camera.camera];\n                  }\n                  // delete instance item if needed\n                  if (item.isEmpty) {\n                    deleteInstanceItem(item);\n                  }\n                  // delete instance if needed\n                  if (instance.isEmpty) {\n                    deleteInstance(instance);\n                  }\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n    (_curr$instances = curr.instances) === null || _curr$instances === void 0 ? void 0 : _curr$instances.forEach(affectedInstance => {\n      if (affectedInstance) {\n        const instance = getInstanceById(affectedInstance.id);\n        if (instance) {\n          instance.attributes = cloneDeep(affectedInstance.attributes);\n          affectedInstance.children.forEach(affectedItem => {\n            const item = instance.items[affectedItem.id];\n            if (item) {\n              affectedItem.cameras.forEach(affectedCamera => {\n                const camera = item.cameras[affectedCamera.camera];\n                if (camera) {\n                  // update frame\n                  affectedCamera.frames.forEach(affectedFrame => {\n                    camera.createFrameFromData(affectedFrame);\n                  });\n                } else {\n                  // no camera, create\n                  item.createCameraFromData(affectedCamera);\n                  this.rootStore.relationship.setupRelationshipsForInstanceItem(item, affectedCamera.camera);\n                }\n                // readd shape\n                if (!isGridView) {\n                  setupShape(item, affectedCamera.camera);\n                }\n              });\n            } else {\n              // no instance item, create\n              instance.createItemFromData(affectedItem);\n              this.rootStore.relationship.setupRelationshipsForInstanceItem(instance.items[affectedItem.id]);\n              if (!isGridView) {\n                affectedItem.cameras.forEach(affectedCamera => {\n                  setupShape(instance.items[affectedItem.id], affectedCamera.camera);\n                });\n              }\n            }\n          });\n        } else {\n          // no instance, create\n          createInstanceFromData(affectedInstance);\n          const createdInstance = getInstanceById(affectedInstance.id);\n          affectedInstance.children.forEach(affectedItem => {\n            const item = createdInstance.items[affectedItem.id];\n            this.rootStore.relationship.setupRelationshipsForInstanceItem(item);\n            if (!isGridView) {\n              affectedItem.cameras.forEach(affectedCamera => {\n                setupShape(item, affectedCamera.camera);\n              });\n            }\n          });\n        }\n      }\n    });\n    (_prev$frames = prev.frames) === null || _prev$frames === void 0 ? void 0 : _prev$frames.forEach(affectedCamera => {\n      const {\n        camera,\n        frames\n      } = affectedCamera;\n      if (this.rootStore.frame.attributes[camera]) {\n        frames.forEach(({\n          frameIndex\n        }) => {\n          delete this.rootStore.frame.attributes[camera][frameIndex];\n        });\n      }\n    });\n    (_curr$frames = curr.frames) === null || _curr$frames === void 0 ? void 0 : _curr$frames.forEach(affectedCamera => {\n      const {\n        camera,\n        frames\n      } = affectedCamera;\n      if (!this.rootStore.frame.attributes[camera]) {\n        this.rootStore.frame.attributes[camera] = {};\n      }\n      frames.forEach(({\n        frameIndex,\n        ...attributes\n      }) => {\n        this.rootStore.frame.attributes[camera][frameIndex] = {\n          frameIndex,\n          ...attributes\n        };\n      });\n    });\n    (_prev$reviews = prev.reviews) === null || _prev$reviews === void 0 ? void 0 : _prev$reviews.forEach(affectedReview => {\n      const {\n        id,\n        frameIndex\n      } = affectedReview;\n      const frameReviews = this.rootStore.review.reviews[frameIndex] || [];\n      const index = frameReviews.findIndex(r => r.id === id);\n      if (index >= 0) {\n        frameReviews.splice(index, 1);\n      }\n      const {\n        anchor\n      } = this.rootStore.review.anchors[id] || {};\n      if (anchor) {\n        delete this.rootStore.review.anchors[id];\n        anchor.destroy();\n      }\n    });\n    (_curr$reviews = curr.reviews) === null || _curr$reviews === void 0 ? void 0 : _curr$reviews.forEach(affectedReview => {\n      const {\n        frameIndex,\n        camera\n      } = affectedReview;\n      const review = new ReviewItem(affectedReview);\n      if (!this.rootStore.review.reviews[frameIndex]) {\n        this.rootStore.review.reviews[frameIndex] = [];\n      }\n      this.rootStore.review.reviews[frameIndex].push(review);\n      if (frameIndex === currentFrame && this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        const cameraView = this.rootStore.frame.cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.rootStore.review.createReviewAnchor(review.result, review.x, review.y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.rootStore.review.anchors[review.id] = {\n              anchor,\n              camera\n            };\n          }\n        }\n      }\n    });\n    (_prev$relationships = prev.relationships) === null || _prev$relationships === void 0 ? void 0 : _prev$relationships.forEach(affectedRelationship => {\n      const relationship = this.rootStore.relationship.relationships.find(r => r.id === affectedRelationship.id);\n      if (relationship) {\n        this.rootStore.relationship.deleteRelationship(relationship);\n        this.rootStore.relationship.deleteConnection(relationship);\n      }\n    });\n    (_curr$relationships = curr.relationships) === null || _curr$relationships === void 0 ? void 0 : _curr$relationships.forEach(affectedRelationship => {\n      this.rootStore.relationship.createRelationship(affectedRelationship);\n      const relationship = this.rootStore.relationship.relationships.find(r => r.id === affectedRelationship.id);\n      if (relationship && relationship.frames[currentFrame]) {\n        this.rootStore.relationship.createConnection(relationship);\n      }\n    });\n\n    // reselect instance or instance item\n    if (Object.keys(selectedInstanceMap).length > 0) {\n      const instances = [];\n      const instanceItems = [];\n      Object.keys(selectedInstanceMap).forEach(instanceId => {\n        const instance = getInstanceById(instanceId);\n        if (instance) {\n          instances.push(instance);\n          const itemIds = selectedInstanceMap[instanceId];\n          Object.values(instance.items).forEach(item => {\n            if (itemIds.includes(item.id)) {\n              instanceItems.push(item);\n            }\n          });\n        }\n      });\n      if (instanceItems.length > 0) {\n        this.rootStore.instance.selectInstanceItem(instanceItems);\n      } else if (instances.length > 0) {\n        this.rootStore.instance.selectInstance(instances);\n      }\n    }\n    this.rootStore.shape.predict();\n\n    // reselect review item\n    if (this.rootStore.review.selectedReviewId) {\n      const review = this.rootStore.review.allReviews.find(r => r.id === this.rootStore.review.selectedReviewId);\n      if (review) {\n        if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n          const {\n            anchor\n          } = this.rootStore.review.anchors[review.id] || {};\n          if (anchor) {\n            this.rootStore.review.selectReview(review, anchor);\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","v4","uuidv4","cloneDeep","message","i18n","ViewMode","ReviewItem","STACK_SIZE","UndoStore","undoDisabled","pointer","redoDisabled","stack","length","constructor","rootStore","lastStoreId","storeId","savedData","autoBind","preserve","data","save","uid","slice","push","before","after","shift","prevState","currState","undo","config","isAnyModalOpened","shape","isDrawing","item","updateData","success","translate","redo","curr","prev","_prev$instances","_curr$instances","_prev$frames","_curr$frames","_prev$reviews","_curr$reviews","_prev$relationships","_curr$relationships","selectedInstances","selectedInstanceItems","getInstanceById","deleteInstance","deleteInstanceItem","createInstanceFromData","instance","getShapeByInstanceItem","deleteShape","setupShape","currentFrame","frame","selectedInstanceMap","forEach","id","filter","i","map","cancelShapeWorking","isGridView","viewMode","GRID","instances","affectedInstance","children","affectedItem","items","cameras","affectedCamera","camera","frames","affectedFrame","frameIndex","isEmpty","attributes","createFrameFromData","createCameraFromData","relationship","setupRelationshipsForInstanceItem","createItemFromData","createdInstance","reviews","affectedReview","frameReviews","review","index","findIndex","r","splice","anchor","anchors","destroy","DEFAULT","cameraView","cameraViews","reviewLayer","createReviewAnchor","result","x","y","viewScale","relationships","affectedRelationship","find","deleteRelationship","deleteConnection","createRelationship","createConnection","Object","keys","instanceItems","instanceId","itemIds","values","includes","selectInstanceItem","selectInstance","predict","selectedReviewId","allReviews","selectReview"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/UndoStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nimport RootStore from './RootStore';\nimport i18n from '../locales';\nimport { Instance, Review, CameraFrameAttributes, Relationship, ViewMode } from '../types';\nimport ReviewItem from '../model/ReviewItem';\nimport MInstance from '../model/Instance';\nimport MInstanceItem from '../model/InstanceItem';\n\nconst STACK_SIZE = 20;\n\nexport interface StoreData {\n  // for instances\n  instances?: Instance[];\n  // for reviews\n  reviews?: Review[];\n  // for frame attributes\n  frames?: CameraFrameAttributes[];\n  // for relationships\n  relationships?: Relationship[];\n};\n\ninterface StoreItem {\n  before: StoreData;\n  after: StoreData;\n}\n\n/**\n * undo & redo store\n * @class\n */\nexport default class UndoStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * current pointer\n   */\n  pointer = 0;\n\n  /**\n   * last stored data uuid\n   */\n  lastStoreId = '';\n\n  /**\n   * saved status\n   */\n  stack: StoreItem[] = [];\n\n  /**\n   * current data uuid\n   */\n  storeId = '';\n\n  /**\n   * saved data copy\n   */\n  savedData: StoreData = {};\n\n  /**\n   * is undo disabled\n   * @getter\n   */\n  get undoDisabled() {\n    return this.pointer <= 0;\n  }\n\n  /**\n   * is redo disabled\n   * @getter\n   */\n  get redoDisabled() {\n    return this.pointer >= this.stack.length;\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      stack: false,\n      storeId: false,\n      savedData: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * preserve current data\n   * @param data\n   */\n  preserve(data: StoreData = {}) {\n    this.storeId = uuidv4();\n    this.savedData = cloneDeep(data);\n    return this.storeId;\n  }\n\n  /**\n   * save to stack\n   * @param uid\n   * @param data\n   */\n  save(uid: string, data: StoreData = {}) {\n    if (uid === this.storeId) { // same command\n      this.stack = this.stack.slice(0, this.pointer);\n      this.stack.push({\n        before: this.savedData,\n        after: cloneDeep(data),\n      });\n      if (this.stack.length > STACK_SIZE) {\n        this.stack.shift();\n      } else {\n        this.pointer += 1;\n      }\n      this.lastStoreId = uid;\n    }\n    this.storeId = '';\n    this.savedData = {};\n  }\n\n  /**\n   * push state by prev & curr state\n   * @param prevState\n   * @param currState\n   */\n  push(prevState: StoreData, currState: StoreData) {\n    this.stack = this.stack.slice(0, this.pointer);\n    this.stack.push({\n      before: cloneDeep(prevState),\n      after: cloneDeep(currState),\n    });\n    if (this.stack.length > STACK_SIZE) {\n      this.stack.shift();\n    } else {\n      this.pointer += 1;\n    }\n    this.lastStoreId = uuidv4();\n  }\n\n  /**\n   * undo\n   */\n  undo() {\n    if (this.undoDisabled || this.rootStore.config.isAnyModalOpened || this.rootStore.shape.isDrawing) {\n      return;\n    }\n    if (this.pointer > 0) {\n      this.pointer -= 1;\n      const item = this.stack[this.pointer];\n      if (item && item.before) {\n        this.updateData(item.before, item.after);\n        message.success(i18n.translate('UNDO_SUCCESS'));\n      }\n    }\n  }\n\n  /**\n   * redo\n   */\n  redo() {\n    if (this.redoDisabled || this.rootStore.config.isAnyModalOpened || this.rootStore.shape.isDrawing) {\n      return;\n    }\n    if (this.pointer < this.stack.length) {\n      this.pointer += 1;\n      const item = this.stack[this.pointer - 1];\n      if (item && item.after) {\n        this.updateData(item.after, item.before);\n        message.success(i18n.translate('REDO_SUCCESS'));\n      }\n    }\n  }\n\n  /**\n   * update data (used for undo / redo)\n   * @param curr\n   * @param prev\n   */\n  updateData(curr: StoreData, prev: StoreData) {\n    const {\n      selectedInstances,\n      selectedInstanceItems,\n      getInstanceById,\n      deleteInstance,\n      deleteInstanceItem,\n      createInstanceFromData,\n    } = this.rootStore.instance;\n    const {\n      getShapeByInstanceItem,\n      deleteShape,\n      setupShape,\n    } = this.rootStore.shape;\n    const { currentFrame } = this.rootStore.frame;\n    const selectedInstanceMap: { [instanceId: string]: string[] } = {};\n    selectedInstances.forEach((instance) => {\n      selectedInstanceMap[instance.id] = selectedInstanceItems.filter((i) => i.instance === instance).map((i) => i.id);\n    });\n\n    this.rootStore.cancelShapeWorking();\n\n    const isGridView = this.rootStore.config.viewMode === ViewMode.GRID;\n    prev.instances?.forEach((affectedInstance) => {\n      if (affectedInstance) {\n        const instance = getInstanceById(affectedInstance.id);\n        if (instance) {\n          affectedInstance.children.forEach((affectedItem) => {\n            const item = instance.items[affectedItem.id];\n            if (item) {\n              affectedItem.cameras.forEach((affectedCamera) => {\n                const camera = item.cameras[affectedCamera.camera];\n                if (camera) {\n                  // delete frame\n                  affectedCamera.frames.forEach((affectedFrame) => {\n                    delete camera.frames[affectedFrame.frameIndex];\n                    if (!isGridView && affectedFrame.frameIndex === currentFrame) {\n                      // remove shapes if needed\n                      const shape = getShapeByInstanceItem(item, camera.camera);\n                      if (shape) {\n                        deleteShape(shape);\n                      }\n                    }\n                  });\n                  // delete camera if needed\n                  if (camera.isEmpty) {\n                    delete item.cameras[camera.camera];\n                  }\n                  // delete instance item if needed\n                  if (item.isEmpty) {\n                    deleteInstanceItem(item);\n                  }\n                  // delete instance if needed\n                  if (instance.isEmpty) {\n                    deleteInstance(instance);\n                  }\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n    curr.instances?.forEach((affectedInstance) => {\n      if (affectedInstance) {\n        const instance = getInstanceById(affectedInstance.id);\n        if (instance) {\n          instance.attributes = cloneDeep(affectedInstance.attributes);\n          affectedInstance.children.forEach((affectedItem) => {\n            const item = instance.items[affectedItem.id];\n            if (item) {\n              affectedItem.cameras.forEach((affectedCamera) => {\n                const camera = item.cameras[affectedCamera.camera];\n                if (camera) {\n                  // update frame\n                  affectedCamera.frames.forEach((affectedFrame) => {\n                    camera.createFrameFromData(affectedFrame);\n                  });\n                } else {\n                  // no camera, create\n                  item.createCameraFromData(affectedCamera);\n                  this.rootStore.relationship.setupRelationshipsForInstanceItem(item, affectedCamera.camera);\n                }\n                // readd shape\n                if (!isGridView) {\n                  setupShape(item, affectedCamera.camera);\n                }\n              });\n            } else {\n              // no instance item, create\n              instance.createItemFromData(affectedItem);\n              this.rootStore.relationship.setupRelationshipsForInstanceItem(instance.items[affectedItem.id]);\n              if (!isGridView) {\n                affectedItem.cameras.forEach((affectedCamera) => {\n                  setupShape(instance.items[affectedItem.id], affectedCamera.camera);\n                });\n              }\n            }\n          });\n        } else {\n          // no instance, create\n          createInstanceFromData(affectedInstance);\n          const createdInstance = getInstanceById(affectedInstance.id);\n          affectedInstance.children.forEach((affectedItem) => {\n            const item = createdInstance.items[affectedItem.id];\n            this.rootStore.relationship.setupRelationshipsForInstanceItem(item);\n            if (!isGridView) {\n              affectedItem.cameras.forEach((affectedCamera) => {\n                setupShape(item, affectedCamera.camera);\n              });\n            }\n          });\n        }\n      }\n    });\n\n    prev.frames?.forEach((affectedCamera) => {\n      const { camera, frames } = affectedCamera;\n      if (this.rootStore.frame.attributes[camera]) {\n        frames.forEach(({ frameIndex }) => {\n          delete this.rootStore.frame.attributes[camera][frameIndex];\n        });\n      }\n    });\n    curr.frames?.forEach((affectedCamera) => {\n      const { camera, frames } = affectedCamera;\n      if (!this.rootStore.frame.attributes[camera]) {\n        this.rootStore.frame.attributes[camera] = {};\n      }\n      frames.forEach(({ frameIndex, ...attributes }) => {\n        this.rootStore.frame.attributes[camera][frameIndex] = { frameIndex, ...attributes };\n      });\n    });\n\n    prev.reviews?.forEach((affectedReview) => {\n      const { id, frameIndex } = affectedReview;\n      const frameReviews = this.rootStore.review.reviews[frameIndex] || [];\n      const index = frameReviews.findIndex((r) => r.id === id);\n      if (index >= 0) {\n        frameReviews.splice(index, 1);\n      }\n      const { anchor } = this.rootStore.review.anchors[id] || {};\n      if (anchor) {\n        delete this.rootStore.review.anchors[id];\n        anchor.destroy();\n      }\n    });\n    curr.reviews?.forEach((affectedReview) => {\n      const { frameIndex, camera } = affectedReview;\n      const review = new ReviewItem(affectedReview);\n      if (!this.rootStore.review.reviews[frameIndex]) {\n        this.rootStore.review.reviews[frameIndex] = [];\n      }\n      this.rootStore.review.reviews[frameIndex].push(review);\n      if (frameIndex === currentFrame && this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        const cameraView = this.rootStore.frame.cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.rootStore.review.createReviewAnchor(review.result, review.x, review.y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.rootStore.review.anchors[review.id] = {\n              anchor,\n              camera,\n            };\n          }\n        }\n      }\n    });\n\n    prev.relationships?.forEach((affectedRelationship) => {\n      const relationship = this.rootStore.relationship.relationships.find((r) => r.id === affectedRelationship.id);\n      if (relationship) {\n        this.rootStore.relationship.deleteRelationship(relationship);\n        this.rootStore.relationship.deleteConnection(relationship);\n      }\n    });\n    curr.relationships?.forEach((affectedRelationship) => {\n      this.rootStore.relationship.createRelationship(affectedRelationship);\n      const relationship = this.rootStore.relationship.relationships.find((r) => r.id === affectedRelationship.id);\n      if (relationship && relationship.frames[currentFrame]) {\n        this.rootStore.relationship.createConnection(relationship);\n      }\n    });\n\n    // reselect instance or instance item\n    if (Object.keys(selectedInstanceMap).length > 0) {\n      const instances: MInstance[] = [];\n      const instanceItems: MInstanceItem[] = [];\n      Object.keys(selectedInstanceMap).forEach((instanceId) => {\n        const instance = getInstanceById(instanceId);\n        if (instance) {\n          instances.push(instance);\n          const itemIds = selectedInstanceMap[instanceId];\n          Object.values(instance.items).forEach((item) => {\n            if (itemIds.includes(item.id)) {\n              instanceItems.push(item);\n            }\n          });\n        }\n      });\n      if (instanceItems.length > 0) {\n        this.rootStore.instance.selectInstanceItem(instanceItems);\n      } else if (instances.length > 0) {\n        this.rootStore.instance.selectInstance(instances);\n      }\n    }\n    this.rootStore.shape.predict();\n\n    // reselect review item\n    if (this.rootStore.review.selectedReviewId) {\n      const review = this.rootStore.review.allReviews.find((r) => r.id === this.rootStore.review.selectedReviewId);\n      if (review) {\n        if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n          const { anchor } = this.rootStore.review.anchors[review.id] || {};\n          if (anchor) {\n            this.rootStore.review.selectReview(review, anchor);\n          }\n        }\n      }\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}