{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/cameras/CamerasContainer.tsx\";\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { reaction, makeObservable, observable, action, computed } from 'mobx';\nimport { Container, Graphics, Point, Sprite, Texture, utils } from 'pixi.js';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport cx from 'classnames';\nimport imageLoader from 'blueimp-load-image';\nimport OperationNavigator from '../toolbar/OperationNavigator';\nimport Layers from '../layers/Layers';\nimport PixelLock from '../tools/PixelLock';\nimport LabelViewer from '../attributes/LabelViewer';\nimport CameraBackground from './CameraBackground';\nimport NIFTI3DCameraView from './NIFTI3DCameraView';\nimport Assistant from '../../../common/shapes/assists/Assistant';\nimport PixelSearch from '../tools/PixelSearch';\nimport DICOMView from '../../shapes/DICOMView';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { CameraLayout } from '../../types';\nimport { NAVIGATOR_HEIGHT, CAMERA_VIEW, CAMERA_VIEW_LABELS, CAMERA_VIEW_CONNECTIONS, CONNECTION_MARKER_ARROW, LAYERS_HEIGHT } from '../../constants';\nimport { captureVideo } from '../../../../utils/video';\nimport { Plane } from '../../../../libs/nifti/NIFTIParser';\nimport './CamerasContainer.scss';\nconst THUMBNAIL_WIDTH = 192; // width of thumbnail view\nconst THUMBNAIL_HEIGHT = 108; // height of thumbnail view\n\nclass CamerasContainer extends React.Component {\n  /**\n   * scroll thumb top\n   */\n  get scrollThumbTop() {\n    if (this.scrollHeight === 0) {\n      return 0;\n    }\n    return this.scrollTop / this.scrollHeight * this.containerHeight;\n  }\n\n  /**\n   * scrooll thumb height\n   */\n  get scrollThumbHeight() {\n    if (this.scrollHeight === 0) {\n      return 0;\n    }\n    return this.containerHeight / this.scrollHeight * this.containerHeight;\n  }\n  constructor(props) {\n    super(props);\n    /**\n     * canvas dom container\n     */\n    this.container = React.createRef();\n    /**\n     * cameras dom container\n     */\n    this.camerasContainer = React.createRef();\n    /**\n     * nifti 3d view\n     */\n    this.nifti3DView = React.createRef();\n    /**\n     * cancellable image loader\n     */\n    this.cancellableLoaders = [];\n    /**\n     * loaded count for current frame\n     */\n    this.loadedCount = 0;\n    /**\n     * reactions\n     */\n    this.reactionDisposers = [];\n    /**\n     * mouse position\n     */\n    this.mousePosition = {\n      x: -1,\n      y: -1\n    };\n    /**\n     * image load errors\n     */\n    this.imageLoadErrors = {};\n    /**\n     * has scroller\n     */\n    this.hasScroller = false;\n    /**\n     * cameras container scroll top\n     */\n    this.scrollTop = 0;\n    /**\n     * cameras container scroll height\n     */\n    this.scrollHeight = 0;\n    /**\n     * cameras container height\n     */\n    this.containerHeight = 0;\n    /**\n     * scroll y when start\n     */\n    this.scrollStartY = 0;\n    /**\n     * scroll top when start\n     */\n    this.scrollStartTop = 0;\n    /**\n     * update mouse position\n     * @param e\n     */\n    this.updateMousePosition = e => {\n      const {\n        clientX,\n        clientY\n      } = e;\n      this.mousePosition = {\n        x: clientX,\n        y: clientY\n      };\n      this.updateMousePositionInCamera();\n    };\n    /**\n     * update mouse position in current camera\n     */\n    this.updateMousePositionInCamera = () => {\n      const {\n        currentCameraView\n      } = store.frame;\n      if (currentCameraView === null || currentCameraView === void 0 ? void 0 : currentCameraView.hovered) {\n        const position = this.mapScreenToStagePosition(this.mousePosition.x, this.mousePosition.y);\n        store.currPosition = currentCameraView.stage.toLocal(position);\n      } else {\n        store.currPosition = undefined;\n      }\n    };\n    /**\n     * resize\n     */\n    this.resize = () => {\n      var _this$nifti3DView$cur;\n      const {\n        width,\n        height\n      } = this.getContainerSize();\n      this.props.app.renderer.resize(width, height);\n      this.props.app.render();\n\n      // update if cameras container has scroller\n      this.updateHasScroller();\n      // update camera views\n      Object.values(store.frame.cameraViews).forEach((cameraView, i) => {\n        this.updateCameraBounds(cameraView, i);\n        if (store.fullscreenRequested && (!store.config.preferences.zoomTogether || cameraView.id === store.frame.currentCamera)) {\n          cameraView.fitImageToView();\n        }\n      });\n      // update cameras scroller\n      this.updateScroller();\n      // 更新 nifti 3d view\n      (_this$nifti3DView$cur = this.nifti3DView.current) === null || _this$nifti3DView$cur === void 0 ? void 0 : _this$nifti3DView$cur.updateContainerSize({\n        width,\n        height\n      });\n      // 更新 nifti views\n      store.frame.drawNIFTIViews();\n\n      // delay to set to false to wait fullscreen finish\n      setTimeout(() => {\n        store.fullscreenRequested = false;\n      }, 0);\n    };\n    /**\n     * on resource loaded\n     * @param name\n     * @param index\n     * @param url\n     * @param data\n     */\n    this.onLoaded = (name, index, url, data) => {\n      const error = data instanceof Event && data.type === 'error';\n      const cameraView = store.frame.cameraViews[name];\n      if (cameraView) {\n        const {\n          isSingleCamera,\n          currentCamera,\n          currentFrameByCamera,\n          getFrameRotationForCamera,\n          getFiltersForCamera,\n          updateImageSize\n        } = store.frame;\n        const isThumbnailLayout = !isSingleCamera && store.config.cameraLayout === CameraLayout.THUMBNAIL;\n        const currentFrame = currentFrameByCamera[name];\n        if (!isThumbnailLayout || currentCamera === name) {\n          this.props.app.stage.addChild(cameraView);\n        } else {\n          this.props.app.stage.removeChild(cameraView);\n        }\n        cameraView.imageLoadError = error;\n        cameraView.imageRotation = getFrameRotationForCamera(name, currentFrame);\n        this.updateCameraBounds(cameraView, index);\n        let texture;\n        let w = -1;\n        let h = -1;\n        if (!error) {\n          const {\n            canvas,\n            width,\n            height\n          } = data;\n          texture = Texture.from(canvas);\n          w = width;\n          h = height;\n          cameraView.setImage(texture, width, height, getFiltersForCamera(name));\n          this.props.checkOutOfRangeForWebGLRenderer(texture.width, texture.height);\n        }\n        updateImageSize(name, currentFrame, w, h);\n        if (isThumbnailLayout) {\n          this.updateCameraThumbnail(cameraView, index);\n        }\n      }\n      this.imageLoadErrors[name] = error ? i18n.translate('COMMON_IMAGE_ERROR', {\n        values: {\n          image: url || i18n.translate('COMMON_EMPTY')\n        }\n      }) : '';\n      this.loadedCount += 1;\n      this.checkLoaded();\n    };\n    /**\n     * wheel\n     */\n    this.wheel = event => {\n      event.stopPropagation();\n      const {\n        currentCameraView\n      } = store.frame;\n      if (currentCameraView) {\n        const point = this.mapScreenToStagePosition(event.clientX, event.clientY);\n        const localPoint = this.mapStageToLocalPosition(point);\n        const zoomed = currentCameraView.zoom(event.nativeEvent, localPoint, store.config.preferences.zoomStep);\n        if (zoomed) {\n          store.frame.syncDICOMViews();\n        } else if (this.hasScroller) {\n          this.scroll(event.deltaY);\n        }\n      }\n    };\n    /**\n     * start scroll\n     * @param e\n     */\n    this.startScroll = e => {\n      e.stopPropagation();\n      this.scrollStartY = e.clientY;\n      this.scrollStartTop = this.scrollThumbTop;\n      window.addEventListener('mousemove', this.scrolling);\n      window.addEventListener('mouseup', this.finishScroll);\n    };\n    /**\n     * scrolling\n     * @param e\n     */\n    this.scrolling = e => {\n      e.preventDefault();\n      if (this.camerasContainer.current) {\n        const offsetClientY = e.clientY - this.scrollStartY;\n        let top = this.scrollStartTop + offsetClientY;\n        if (top < 0) {\n          top = 0;\n        }\n        const {\n          clientHeight,\n          scrollHeight\n        } = this.camerasContainer.current;\n        const maxTop = clientHeight - this.scrollThumbHeight;\n        if (top > maxTop) {\n          top = maxTop;\n        }\n        this.scrollTop = top / clientHeight * scrollHeight;\n        this.camerasContainer.current.scroll(0, this.scrollTop);\n        this.updateAllCameraViewsBounds();\n      }\n    };\n    /**\n     * finish scroll\n     * @param e\n     */\n    this.finishScroll = e => {\n      e.preventDefault();\n      window.removeEventListener('mousemove', this.scrolling);\n      window.removeEventListener('mouseup', this.finishScroll);\n    };\n    makeObservable(this, {\n      mousePosition: observable,\n      imageLoadErrors: observable,\n      hasScroller: observable,\n      scrollTop: observable,\n      scrollHeight: observable,\n      containerHeight: observable,\n      scrollThumbTop: computed,\n      scrollThumbHeight: computed,\n      updateMousePosition: action,\n      updateScroller: action,\n      updateHasScroller: action,\n      onLoaded: action,\n      scroll: action,\n      scrolling: action\n    });\n    this.reactionDisposers.push(reaction(() => store.initialized, () => {\n      this.resize();\n      this.updateCameras();\n    }));\n    this.reactionDisposers.push(reaction(() => store.frame.currentFrameByCamera, () => {\n      if (store.initialized) {\n        this.updateCameras();\n      }\n    }));\n    this.reactionDisposers.push(reaction(() => store.frame.currentCamera, (_, prev) => {\n      if (!store.initialized) {\n        return;\n      }\n      if (!store.frame.isSingleCamera && store.config.cameraLayout === CameraLayout.THUMBNAIL) {\n        const {\n          currentCameraView,\n          cameraViews\n        } = store.frame;\n        // remove previous camera view\n        this.props.app.stage.removeChild(cameraViews[prev]);\n        // add current camera view\n        if (currentCameraView) {\n          this.props.app.stage.addChild(currentCameraView);\n          currentCameraView.fitImageToView();\n        }\n      }\n      this.updateMousePositionInCamera();\n    }));\n    this.reactionDisposers.push(reaction(() => store.config.cameraLayout, cameraLayout => {\n      var _this$camerasContaine, _this$nifti3DView$cur2;\n      if (!store.initialized) {\n        return;\n      }\n      this.updateHasScroller();\n      // reset scroll top when layout changes\n      (_this$camerasContaine = this.camerasContainer.current) === null || _this$camerasContaine === void 0 ? void 0 : _this$camerasContaine.scrollTo(0, 0);\n      this.scrollTop = 0;\n      const {\n        isSingleCamera,\n        cameraViews,\n        currentCamera\n      } = store.frame;\n      const isThumbnailLayout = !isSingleCamera && cameraLayout === CameraLayout.THUMBNAIL;\n      Object.values(cameraViews).forEach((cameraView, i) => {\n        // update camera view & fit view\n        this.updateCameraBounds(cameraView, i);\n        if (!store.config.preferences.zoomTogether || cameraView.id === currentCamera) {\n          cameraView.fitImageToView();\n        }\n        if (isThumbnailLayout) {\n          this.updateCameraThumbnail(cameraView, i);\n          if (cameraView.id !== currentCamera) {\n            this.props.app.stage.removeChild(cameraView);\n          }\n        } else {\n          this.props.app.stage.addChild(cameraView);\n          if (cameraView.snapshot) {\n            this.props.app.stage.removeChild(cameraView.snapshot);\n          }\n        }\n      });\n      (_this$nifti3DView$cur2 = this.nifti3DView.current) === null || _this$nifti3DView$cur2 === void 0 ? void 0 : _this$nifti3DView$cur2.updateContainerSize(this.getContainerSize());\n\n      // async to update scroller, waiting doms finish update\n      setTimeout(() => this.updateScroller(), 0);\n    }));\n    this.reactionDisposers.push(reaction(() => [store.frame.loading,\n    // finish shapes setup\n    store.frame.currentFrameRotation,\n    // rotation changes, should update image in thumbnail\n    JSON.stringify(store.frame.getFiltersForCamera(store.frame.currentCamera)),\n    // image filters changes\n    JSON.stringify(store.shape.config),\n    // shape styles change\n    store.shape.shapesRefreshCounter, store.undo.pointer, store.undo.lastStoreId], ([loading, rotation, filters, config, counter], [prevLoading, prevRotation, prevFilters, prevConfig, prevCounter]) => {\n      if (!store.frame.isSingleCamera && store.config.cameraLayout === CameraLayout.THUMBNAIL && !store.shape.recognitionStart) {\n        const updateShapesInAllCameras = loading !== prevLoading && !loading || config !== prevConfig || counter !== prevCounter;\n        const updateImageInCurrCamera = rotation !== prevRotation || filters !== prevFilters;\n        const {\n          currentCamera,\n          cameraViews\n        } = store.frame;\n        Object.values(cameraViews).forEach((cameraView, i) => {\n          if (updateShapesInAllCameras || cameraView.id === currentCamera) {\n            this.updateCameraThumbnail(cameraView, i, updateShapesInAllCameras || !updateImageInCurrCamera);\n          }\n        });\n      }\n    }, {\n      equals: (a, b) => b[0] === true || Array.from({\n        length: a.length\n      }).every((_, i) => a[i] === b[i])\n    }));\n  }\n  componentDidMount() {\n    window.addEventListener('mousemove', this.updateMousePosition);\n    if (this.container.current) {\n      new ResizeObserver(this.resize).observe(this.container.current);\n      this.props.app.renderer.on('resolution-changed', this.resize);\n\n      // setup view\n      this.container.current.appendChild(this.props.app.view);\n      this.resize();\n      this.updateCameras();\n    }\n  }\n  componentWillUnmount() {\n    // cancel loaders\n    this.cancellableLoaders.forEach(loader => {\n      loader.cancel();\n    });\n    this.cancellableLoaders = [];\n    this.loadedCount = 0;\n    store.frame.loading = false;\n\n    // remove camera views\n    Object.values(store.frame.cameraViews).forEach(view => {\n      this.props.app.stage.removeChild(view);\n      if (view.snapshot) {\n        this.props.app.stage.removeChild(view.snapshot);\n      }\n    });\n    window.removeEventListener('mousemove', this.updateMousePosition);\n    this.props.app.renderer.off('resolution-changed', this.resize);\n    this.reactionDisposers.forEach(disposer => disposer());\n  }\n  /**\n   * get container's size, defualt is 800 * 600\n   */\n  getContainerSize() {\n    // default size is 800 * 600\n    const size = {\n      width: 800,\n      height: 600\n    };\n    if (this.container.current) {\n      size.width = this.container.current.clientWidth;\n      size.height = this.container.current.clientHeight;\n    }\n    return size;\n  }\n\n  /**\n   * get camera bounds by camera index\n   * @param cameraIndex\n   */\n  getCameraBounds(cameraIndex) {\n    const {\n      width,\n      height\n    } = this.props.app.screen;\n    const {\n      cameraCount\n    } = store.frame;\n    // single camera, not use layout\n    if (cameraCount === 1) {\n      return {\n        width,\n        height,\n        x: 0,\n        y: 0\n      };\n    }\n    const {\n      cameraLayout\n    } = store.config;\n    if (cameraLayout === CameraLayout.THUMBNAIL) {\n      return {\n        width: width - 200,\n        height,\n        x: 200,\n        y: this.scrollTop\n      };\n    }\n    const colCount = cameraLayout === CameraLayout.COL2 ? 2 : 3;\n    const cameraWidth = (this.hasScroller ? width - 12 : width) / colCount;\n    const cameraHeight = this.hasScroller ? cameraWidth / 16 * 9 : height / colCount;\n    if (cameraCount === colCount) {\n      // split n columns\n      return {\n        width: cameraWidth,\n        height,\n        x: cameraIndex * cameraWidth,\n        y: 0\n      };\n    }\n    // default split into 4 parts\n    const colIndex = cameraIndex % colCount;\n    const rowIndex = Math.floor(cameraIndex / colCount);\n    return {\n      width: cameraWidth,\n      height: cameraHeight,\n      x: colIndex * cameraWidth,\n      y: rowIndex * cameraHeight\n    };\n  }\n  /**\n   * update cameras for current frame\n   */\n  updateCameras() {\n    const {\n      niftiParser,\n      dicomParser,\n      cameraNames,\n      currentFrameByCamera,\n      getImageUrl,\n      getPDFDocument,\n      getVideo\n    } = store.frame;\n    utils.clearTextureCache();\n    this.cancellableLoaders.forEach(loader => {\n      loader.cancel();\n    });\n    this.cancellableLoaders = [];\n    this.loadedCount = 0;\n    cameraNames.forEach((camera, i) => {\n      if (dicomParser) {\n        var _dicomCameraView$curr, _dicomCameraView$curr2, _dicomCameraView$curr3, _dicomCameraView$curr4, _dicomCameraView$curr5, _dicomCameraView$curr6;\n        const dicomCameraView = store.frame.cameraViews[camera];\n        this.onLoaded(camera, i, (_dicomCameraView$curr = (_dicomCameraView$curr2 = dicomCameraView.currentImage) === null || _dicomCameraView$curr2 === void 0 ? void 0 : _dicomCameraView$curr2.imageId) !== null && _dicomCameraView$curr !== void 0 ? _dicomCameraView$curr : '', {\n          canvas: dicomCameraView.transparentCanvas,\n          width: (_dicomCameraView$curr3 = (_dicomCameraView$curr4 = dicomCameraView.currentImage) === null || _dicomCameraView$curr4 === void 0 ? void 0 : _dicomCameraView$curr4.Columns) !== null && _dicomCameraView$curr3 !== void 0 ? _dicomCameraView$curr3 : 0,\n          height: (_dicomCameraView$curr5 = (_dicomCameraView$curr6 = dicomCameraView.currentImage) === null || _dicomCameraView$curr6 === void 0 ? void 0 : _dicomCameraView$curr6.Rows) !== null && _dicomCameraView$curr5 !== void 0 ? _dicomCameraView$curr5 : 0\n        });\n        return;\n      }\n      const currentFrame = currentFrameByCamera[camera];\n      const url = getImageUrl(camera, currentFrame) || '';\n      const loader = {\n        cancelled: false,\n        cancel() {\n          this.cancelled = true;\n        },\n        load() {\n          return new Promise((resove, reject) => {\n            const pdfDoc = getPDFDocument(camera);\n            const videoObj = getVideo(camera);\n            if (niftiParser) {\n              const canvas = niftiParser.getPlaneImage(camera, currentFrame);\n              if (!this.cancelled) {\n                resove({\n                  canvas,\n                  width: canvas.width,\n                  height: canvas.height\n                });\n              } else {\n                reject();\n              }\n            } else if (pdfDoc) {\n              pdfDoc.loadPage(currentFrame + 1).then(data => {\n                if (!this.cancelled) {\n                  resove(data);\n                } else {\n                  reject();\n                }\n              }).catch(() => resove(new Event('error')));\n            } else if (videoObj) {\n              const {\n                video,\n                fps\n              } = videoObj;\n              const targetTime = currentFrame / fps;\n              captureVideo(video, targetTime).then(canvas => {\n                if (!this.cancelled) {\n                  resove({\n                    canvas,\n                    width: canvas.width,\n                    height: canvas.height\n                  });\n                } else {\n                  reject();\n                }\n              });\n            } else {\n              imageLoader(store.proxyResource(url), data => {\n                if (!this.cancelled) {\n                  if (data instanceof HTMLCanvasElement) {\n                    resove({\n                      canvas: data,\n                      width: data.width,\n                      height: data.height\n                    });\n                  } else {\n                    resove(data);\n                  }\n                } else {\n                  reject();\n                }\n              }, {\n                canvas: true,\n                orientation: true,\n                crossOrigin: 'anonymous'\n              });\n            }\n          });\n        }\n      };\n      loader.load().then(data => this.onLoaded(camera, i, url, data)).catch(() => {\n        // canceled\n      });\n      this.cancellableLoaders.push(loader);\n    });\n  }\n\n  /**\n   * update camera bounds\n   * @param cameraView\n   * @param index\n   */\n  updateCameraBounds(cameraView, index) {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.getCameraBounds(index);\n    cameraView.updatePositionAndSize(x, y - this.scrollTop, width, height);\n    const cameraDom = document.getElementById(`${CAMERA_VIEW}-${cameraView.id}`);\n    if (cameraDom) {\n      cameraDom.style.left = `${x}px`;\n      cameraDom.style.top = `${y}px`;\n      cameraDom.style.width = `${width}px`;\n      cameraDom.style.height = `${height}px`;\n      if (cameraView instanceof DICOMView) {\n        // 如果是dicom view，把view中渲染dicom图片的dom插入到camera dom中\n        cameraDom.appendChild(cameraView.renderElement);\n      }\n    }\n  }\n\n  /**\n   * update camera thumbnail\n   * @param cameraView\n   * @param index\n   * @param shapesUpdateOnly\n   */\n  updateCameraThumbnail(cameraView, index, shapesUpdateOnly = false) {\n    if (!cameraView.imageLoadError) {\n      if (!cameraView.snapshot) {\n        cameraView.snapshot = new Container();\n        cameraView.snapshot.mask = new Graphics().beginFill(0x000000).drawRect(0, THUMBNAIL_HEIGHT * index, THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT).endFill();\n      }\n      this.props.app.stage.addChild(cameraView.snapshot);\n      const shapesTexture = this.props.app.renderer.generateTexture(cameraView.shapesLayer);\n      const shapesSnapshot = new Sprite(shapesTexture);\n      const {\n        x: sx,\n        y: sy\n      } = cameraView.shapesLayer.getLocalBounds();\n      shapesSnapshot.position.set(sx, sy);\n      if (shapesUpdateOnly && cameraView.snapshot.children.length === 2) {\n        const viewScale = cameraView.snapshot.scale.x;\n        const {\n          width,\n          height\n        } = cameraView.snapshot.getChildAt(0).getBounds();\n        shapesSnapshot.x += (THUMBNAIL_WIDTH - width) / viewScale / 2;\n        shapesSnapshot.y += (THUMBNAIL_HEIGHT - height) / viewScale / 2;\n        const toBeDestroyed = cameraView.snapshot.getChildAt(1);\n        cameraView.snapshot.removeChildAt(1);\n        cameraView.snapshot.addChildAt(shapesSnapshot, 1);\n        toBeDestroyed.destroy(true);\n      } else {\n        const imageTexture = this.props.app.renderer.generateTexture(cameraView.image, {\n          region: cameraView.image.getBounds()\n        });\n        const image = new Sprite(imageTexture);\n        image.scale.set(1 / cameraView.viewScale);\n        const {\n          width,\n          height\n        } = image;\n        const viewRatio = THUMBNAIL_WIDTH / THUMBNAIL_HEIGHT;\n        const imgRatio = width / height;\n        const scale = viewRatio < imgRatio ? THUMBNAIL_WIDTH / width : THUMBNAIL_HEIGHT / height;\n        const offsetX = (THUMBNAIL_WIDTH / scale - width) / 2;\n        const offsetY = (THUMBNAIL_HEIGHT / scale - height) / 2;\n        image.x += offsetX;\n        image.y += offsetY;\n        shapesSnapshot.x += offsetX;\n        shapesSnapshot.y += offsetY;\n        const toBeDestroyed = [...cameraView.snapshot.children];\n        cameraView.snapshot.removeChildren();\n        cameraView.snapshot.addChildAt(image, 0);\n        cameraView.snapshot.addChildAt(shapesSnapshot, 1);\n        cameraView.snapshot.position.set(0, THUMBNAIL_HEIGHT * index);\n        cameraView.snapshot.scale.set(scale);\n        toBeDestroyed.forEach(i => i.destroy(true));\n      }\n    }\n  }\n\n  /**\n   * update cameras scroller\n   */\n  updateScroller() {\n    if (this.camerasContainer.current) {\n      const {\n        scrollTop,\n        scrollHeight\n      } = this.camerasContainer.current;\n      const {\n        height\n      } = this.camerasContainer.current.getBoundingClientRect();\n      this.scrollTop = scrollTop;\n      this.scrollHeight = scrollHeight;\n      this.containerHeight = height;\n    }\n  }\n\n  /**\n   * update if cameras container has scroller\n   */\n  updateHasScroller() {\n    const {\n      cameraLayout\n    } = store.config;\n    const {\n      cameraCount\n    } = store.frame;\n    if (cameraCount > 1 && cameraLayout === CameraLayout.THUMBNAIL) {\n      const maxCount = Math.floor(this.props.app.screen.height / THUMBNAIL_HEIGHT);\n      this.hasScroller = cameraCount > maxCount;\n    } else {\n      const colCount = cameraLayout === CameraLayout.COL2 ? 2 : 3;\n      const oneScreenCameraCount = colCount ** 2;\n      this.hasScroller = cameraCount > oneScreenCameraCount;\n    }\n  }\n  /**\n   * check all cameras loaded in current frame\n   */\n  checkLoaded() {\n    const {\n      cameraCount,\n      onFrameLoaded\n    } = store.frame;\n    if (this.loadedCount === cameraCount) {\n      onFrameLoaded();\n      store.config.keepViewScaleAndPosition();\n    }\n  }\n\n  /**\n   * update all cameras bounds\n   */\n  updateAllCameraViewsBounds() {\n    var _this$nifti3DView$cur3;\n    const {\n      cameraLayout\n    } = store.config;\n    const {\n      cameraViews,\n      isSingleCamera\n    } = store.frame;\n    const isThumbnailLayout = !isSingleCamera && cameraLayout === CameraLayout.THUMBNAIL;\n    Object.values(cameraViews).forEach((cameraView, i) => {\n      this.updateCameraBounds(cameraView, i);\n      if (isThumbnailLayout && cameraView.snapshot) {\n        cameraView.snapshot.y = THUMBNAIL_HEIGHT * i - this.scrollTop;\n      }\n    });\n    (_this$nifti3DView$cur3 = this.nifti3DView.current) === null || _this$nifti3DView$cur3 === void 0 ? void 0 : _this$nifti3DView$cur3.updateContainerSize(this.getContainerSize());\n  }\n  /**\n   * scroll\n   * @param deltaY\n   */\n  scroll(deltaY) {\n    if (this.camerasContainer.current) {\n      this.camerasContainer.current.scrollBy(0, deltaY);\n      this.scrollTop = this.camerasContainer.current.scrollTop;\n      this.updateAllCameraViewsBounds();\n    }\n  }\n  /**\n   * map screen position to stage position as a PIXI point\n   * @param x screen position x\n   * @param y screen position y\n   */\n  mapScreenToStagePosition(x, y) {\n    const point = new Point();\n    this.props.app.renderer.plugins.interaction.mapPositionToPoint(point, x, y);\n    return point;\n  }\n\n  /**\n   * map stage position to local posistion as a PIXI point\n   * @param point\n   */\n  mapStageToLocalPosition(point) {\n    return this.props.app.stage.toLocal(point);\n  }\n  renderCameraView(camera, i, isThumbnail = false) {\n    const {\n      labelMode,\n      viewScale,\n      showCurrPosition,\n      crossLineVisible,\n      activeMeasurementBox,\n      pixelSearchVisible\n    } = store.config;\n    const {\n      niftiParser,\n      currentCamera,\n      isSingleCamera,\n      cameraFrames,\n      currentFrameByCamera\n    } = store.frame;\n    const key = isThumbnail ? `${camera}-thumbnail` : camera;\n    const selected = currentCamera === camera;\n    const isAxial = niftiParser && camera === Plane.AXIAL;\n    const isCoronal = niftiParser && camera === Plane.CORONAL;\n    const isSagittal = niftiParser && camera === Plane.SAGITTAL;\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      key: key,\n      id: `${CAMERA_VIEW}-${key}`,\n      className: cx('camera-view', {\n        selected,\n        single: isSingleCamera,\n        thumbnail: isThumbnail,\n        'nifti-axial': isAxial,\n        'nifti-coronal': isCoronal,\n        'nifti-sagittal': isSagittal\n      })\n      // for thumbnail\n    }, isThumbnail && {\n      style: {\n        width: THUMBNAIL_WIDTH,\n        height: THUMBNAIL_HEIGHT,\n        left: 0,\n        top: THUMBNAIL_HEIGHT * i\n      },\n      onClick: () => {\n        let p;\n        if (camera !== currentCamera && pixelSearchVisible) {\n          const {\n            currentCameraView\n          } = store.frame;\n          if (currentCameraView) {\n            p = currentCameraView.pixelMarkPosition;\n            currentCameraView.removePixelMark();\n          }\n        }\n        store.frame.setCamera(camera);\n        if (p) {\n          var _store$frame$currentC;\n          (_store$frame$currentC = store.frame.currentCameraView) === null || _store$frame$currentC === void 0 ? void 0 : _store$frame$currentC.fitPixelMarkToView(p);\n        }\n      },\n      onWheel: this.wheel\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 7\n      }\n    }), !isThumbnail && /*#__PURE__*/React.createElement(React.Fragment, null, !niftiParser && /*#__PURE__*/React.createElement(CameraBackground, {\n      camera: camera,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: `${CAMERA_VIEW_LABELS}-${camera}`,\n      className: cx('shape-labels-container', {\n        'label-mode': labelMode\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"svg\", {\n      id: `${CAMERA_VIEW_CONNECTIONS}-${camera}`,\n      className: \"connections-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"marker\", {\n      id: CONNECTION_MARKER_ARROW,\n      markerWidth: \"10\",\n      markerHeight: \"10\",\n      refX: \"8\",\n      refY: \"4\",\n      orient: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M0,0 L0,8 L8,4 z\",\n      fill: \"#FFAFFE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(LabelViewer, {\n      camera: camera,\n      mousePosition: this.mousePosition,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Assistant, {\n      scale: viewScale,\n      crossline: selected && crossLineVisible,\n      measurementBox: selected ? activeMeasurementBox : undefined,\n      mousePosition: this.mousePosition,\n      currPosition: selected && showCurrPosition ? store.currPosition : undefined,\n      zIndex: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"outer-border\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inner-border\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 11\n      }\n    }, this.imageLoadErrors[camera] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      onClick: () => store.frame.setCamera(camera),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 15\n      }\n    }, isThumbnail ? 'Error' : this.imageLoadErrors[camera]), !isSingleCamera && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 15\n      }\n    }, niftiParser ? camera : `C${i + 1}-${camera}`), isAxial && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis-frames\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 17\n      }\n    }, `${currentFrameByCamera[Plane.AXIAL] + 1} / ${cameraFrames[Plane.AXIAL]}`), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905,\n        columnNumber: 17\n      }\n    }, \"A\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906,\n        columnNumber: 17\n      }\n    }, \"L\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 17\n      }\n    }, \"P\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 17\n      }\n    }, \"R\")), isCoronal && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis-frames\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 17\n      }\n    }, `${currentFrameByCamera[Plane.CORONAL] + 1} / ${cameraFrames[Plane.CORONAL]}`), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 17\n      }\n    }, \"S\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917,\n        columnNumber: 17\n      }\n    }, \"L\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 17\n      }\n    }, \"I\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 17\n      }\n    }, \"R\")), isSagittal && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis-frames\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 17\n      }\n    }, `${currentFrameByCamera[Plane.SAGITTAL] + 1} / ${cameraFrames[Plane.SAGITTAL]}`), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927,\n        columnNumber: 17\n      }\n    }, \"S\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 17\n      }\n    }, \"P\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929,\n        columnNumber: 17\n      }\n    }, \"I\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"axis axis-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 17\n      }\n    }, \"A\")))));\n  }\n  render() {\n    const {\n      cursor,\n      cameraLayout,\n      layers\n    } = store.config;\n    const {\n      currentCameraView,\n      cameraNames,\n      isSingleCamera\n    } = store.frame;\n    const isThumbnailLayout = !isSingleCamera && cameraLayout === CameraLayout.THUMBNAIL;\n    const layersEnabled = layers.length > 0;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OperationNavigator, {\n      onViewReset: () => currentCameraView === null || currentCameraView === void 0 ? void 0 : currentCameraView.fitImageToView(),\n      setViewScale: scale => currentCameraView === null || currentCameraView === void 0 ? void 0 : currentCameraView.zoomTo(scale),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        height: `calc(100% - ${NAVIGATOR_HEIGHT + (layersEnabled ? LAYERS_HEIGHT : 0)}px)`,\n        position: 'relative',\n        cursor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.container,\n      className: \"canvas-container\",\n      onContextMenu: e => e.preventDefault(),\n      onWheel: this.wheel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(PixelSearch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(PixelLock, {\n      style: {\n        ...(this.hasScroller && {\n          marginRight: 8\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.camerasContainer,\n      className: cx('cameras-container', {\n        'thumbnail-layout': isThumbnailLayout\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 11\n      }\n    }, cameraNames.map((camera, i) => this.renderCameraView(camera, i)), cameraNames.map((camera, i) => this.renderCameraView(camera, i, true)), store.frame.niftiParser && /*#__PURE__*/React.createElement(NIFTI3DCameraView, {\n      ref: this.nifti3DView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 41\n      }\n    })), this.hasScroller && /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('cameras-scroller', {\n        'thumbnail-layout': isThumbnailLayout\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cameras-scroller__thumb\",\n      style: {\n        top: this.scrollThumbTop,\n        height: this.scrollThumbHeight\n      },\n      onMouseDown: this.startScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982,\n        columnNumber: 15\n      }\n    }))), layersEnabled && /*#__PURE__*/React.createElement(Layers, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993,\n        columnNumber: 27\n      }\n    }));\n  }\n}\nexport default observer(CamerasContainer);","map":{"version":3,"names":["React","observer","reaction","makeObservable","observable","action","computed","Container","Graphics","Point","Sprite","Texture","utils","ResizeObserver","cx","imageLoader","OperationNavigator","Layers","PixelLock","LabelViewer","CameraBackground","NIFTI3DCameraView","Assistant","PixelSearch","DICOMView","store","i18n","CameraLayout","NAVIGATOR_HEIGHT","CAMERA_VIEW","CAMERA_VIEW_LABELS","CAMERA_VIEW_CONNECTIONS","CONNECTION_MARKER_ARROW","LAYERS_HEIGHT","captureVideo","Plane","THUMBNAIL_WIDTH","THUMBNAIL_HEIGHT","CamerasContainer","Component","scrollThumbTop","scrollHeight","scrollTop","containerHeight","scrollThumbHeight","constructor","props","container","createRef","camerasContainer","nifti3DView","cancellableLoaders","loadedCount","reactionDisposers","mousePosition","x","y","imageLoadErrors","hasScroller","scrollStartY","scrollStartTop","updateMousePosition","e","clientX","clientY","updateMousePositionInCamera","currentCameraView","frame","hovered","position","mapScreenToStagePosition","currPosition","stage","toLocal","undefined","resize","_this$nifti3DView$cur","width","height","getContainerSize","app","renderer","render","updateHasScroller","Object","values","cameraViews","forEach","cameraView","i","updateCameraBounds","fullscreenRequested","config","preferences","zoomTogether","id","currentCamera","fitImageToView","updateScroller","current","updateContainerSize","drawNIFTIViews","setTimeout","onLoaded","name","index","url","data","error","Event","type","isSingleCamera","currentFrameByCamera","getFrameRotationForCamera","getFiltersForCamera","updateImageSize","isThumbnailLayout","cameraLayout","THUMBNAIL","currentFrame","addChild","removeChild","imageLoadError","imageRotation","texture","w","h","canvas","from","setImage","checkOutOfRangeForWebGLRenderer","updateCameraThumbnail","translate","image","checkLoaded","wheel","event","stopPropagation","point","localPoint","mapStageToLocalPosition","zoomed","zoom","nativeEvent","zoomStep","syncDICOMViews","scroll","deltaY","startScroll","window","addEventListener","scrolling","finishScroll","preventDefault","offsetClientY","top","clientHeight","maxTop","updateAllCameraViewsBounds","removeEventListener","push","initialized","updateCameras","_","prev","_this$camerasContaine","_this$nifti3DView$cur2","scrollTo","snapshot","loading","currentFrameRotation","JSON","stringify","shape","shapesRefreshCounter","undo","pointer","lastStoreId","rotation","filters","counter","prevLoading","prevRotation","prevFilters","prevConfig","prevCounter","recognitionStart","updateShapesInAllCameras","updateImageInCurrCamera","equals","a","b","Array","length","every","componentDidMount","observe","on","appendChild","view","componentWillUnmount","loader","cancel","off","disposer","size","clientWidth","getCameraBounds","cameraIndex","screen","cameraCount","colCount","COL2","cameraWidth","cameraHeight","colIndex","rowIndex","Math","floor","niftiParser","dicomParser","cameraNames","getImageUrl","getPDFDocument","getVideo","clearTextureCache","camera","_dicomCameraView$curr","_dicomCameraView$curr2","_dicomCameraView$curr3","_dicomCameraView$curr4","_dicomCameraView$curr5","_dicomCameraView$curr6","dicomCameraView","currentImage","imageId","transparentCanvas","Columns","Rows","cancelled","load","Promise","resove","reject","pdfDoc","videoObj","getPlaneImage","loadPage","then","catch","video","fps","targetTime","proxyResource","HTMLCanvasElement","orientation","crossOrigin","updatePositionAndSize","cameraDom","document","getElementById","style","left","renderElement","shapesUpdateOnly","mask","beginFill","drawRect","endFill","shapesTexture","generateTexture","shapesLayer","shapesSnapshot","sx","sy","getLocalBounds","set","children","viewScale","scale","getChildAt","getBounds","toBeDestroyed","removeChildAt","addChildAt","destroy","imageTexture","region","viewRatio","imgRatio","offsetX","offsetY","removeChildren","getBoundingClientRect","maxCount","oneScreenCameraCount","onFrameLoaded","keepViewScaleAndPosition","_this$nifti3DView$cur3","scrollBy","plugins","interaction","mapPositionToPoint","renderCameraView","isThumbnail","labelMode","showCurrPosition","crossLineVisible","activeMeasurementBox","pixelSearchVisible","cameraFrames","key","selected","isAxial","AXIAL","isCoronal","CORONAL","isSagittal","SAGITTAL","createElement","assign","className","single","thumbnail","onClick","p","pixelMarkPosition","removePixelMark","setCamera","_store$frame$currentC","fitPixelMarkToView","onWheel","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","markerWidth","markerHeight","refX","refY","orient","d","fill","crossline","measurementBox","zIndex","cursor","layers","layersEnabled","onViewReset","setViewScale","zoomTo","ref","onContextMenu","marginRight","map","onMouseDown"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/cameras/CamerasContainer.tsx"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { reaction, IReactionDisposer, makeObservable, observable, action, computed } from 'mobx';\nimport { Application, Container, Graphics, Point, Sprite, Texture, utils } from 'pixi.js';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport cx from 'classnames';\nimport imageLoader from 'blueimp-load-image';\nimport OperationNavigator from '../toolbar/OperationNavigator';\nimport Layers from '../layers/Layers';\nimport PixelLock from '../tools/PixelLock';\nimport LabelViewer from '../attributes/LabelViewer';\nimport CameraBackground from './CameraBackground';\nimport NIFTI3DCameraView, { NIFTI3DCameraViewHandle } from './NIFTI3DCameraView';\nimport Assistant from '../../../common/shapes/assists/Assistant';\nimport PixelSearch from '../tools/PixelSearch';\nimport type View from '../../shapes/View';\nimport DICOMView from '../../shapes/DICOMView';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { CameraLayout } from '../../types';\nimport { NAVIGATOR_HEIGHT, CAMERA_VIEW, CAMERA_VIEW_LABELS, CAMERA_VIEW_CONNECTIONS, CONNECTION_MARKER_ARROW, LAYERS_HEIGHT } from '../../constants';\nimport { captureVideo } from '../../../../utils/video';\nimport { Plane } from '../../../../libs/nifti/NIFTIParser';\nimport './CamerasContainer.scss';\n\ninterface CancellableLoader {\n  cancelled: boolean;\n  cancel: () => void;\n  load: () => Promise<Event | ImageLoadResult>;\n}\ninterface ImageLoadResult {\n  canvas: HTMLCanvasElement;\n  width: number;\n  height: number;\n}\n\ninterface CamerasContainerProps {\n  app: Application;\n  checkOutOfRangeForWebGLRenderer: (w: number, h: number) => void;\n}\n\nconst THUMBNAIL_WIDTH = 192; // width of thumbnail view\nconst THUMBNAIL_HEIGHT = 108; // height of thumbnail view\n\nclass CamerasContainer extends React.Component<CamerasContainerProps> {\n  /**\n   * canvas dom container\n   */\n  container = React.createRef<HTMLDivElement>();\n\n  /**\n   * cameras dom container\n   */\n  camerasContainer = React.createRef<HTMLDivElement>();\n\n  /**\n   * nifti 3d view\n   */\n  nifti3DView = React.createRef<NIFTI3DCameraViewHandle>();\n\n  /**\n   * cancellable image loader\n   */\n  cancellableLoaders: CancellableLoader[] = [];\n\n  /**\n   * loaded count for current frame\n   */\n  loadedCount = 0;\n\n  /**\n   * reactions\n   */\n  reactionDisposers: IReactionDisposer[] = [];\n\n  /**\n   * mouse position\n   */\n  mousePosition = {\n    x: -1,\n    y: -1,\n  };\n\n  /**\n   * image load errors\n   */\n  imageLoadErrors: {\n    [camera: string]: string;\n  } = {};\n\n  /**\n   * has scroller\n   */\n  hasScroller = false;\n\n  /**\n   * cameras container scroll top\n   */\n  scrollTop = 0;\n\n  /**\n   * cameras container scroll height\n   */\n  scrollHeight = 0;\n\n  /**\n   * cameras container height\n   */\n  containerHeight = 0;\n\n  /**\n   * scroll y when start\n   */\n  scrollStartY = 0;\n\n  /**\n   * scroll top when start\n   */\n  scrollStartTop = 0;\n\n  /**\n   * scroll thumb top\n   */\n  get scrollThumbTop() {\n    if (this.scrollHeight === 0) {\n      return 0;\n    }\n    return (this.scrollTop / this.scrollHeight) * this.containerHeight;\n  }\n\n  /**\n   * scrooll thumb height\n   */\n  get scrollThumbHeight() {\n    if (this.scrollHeight === 0) {\n      return 0;\n    }\n    return (this.containerHeight / this.scrollHeight) * this.containerHeight;\n  }\n\n  constructor(props: CamerasContainerProps) {\n    super(props);\n\n    makeObservable(this, {\n      mousePosition: observable,\n      imageLoadErrors: observable,\n      hasScroller: observable,\n      scrollTop: observable,\n      scrollHeight: observable,\n      containerHeight: observable,\n      scrollThumbTop: computed,\n      scrollThumbHeight: computed,\n      updateMousePosition: action,\n      updateScroller: action,\n      updateHasScroller: action,\n      onLoaded: action,\n      scroll: action,\n      scrolling: action,\n    });\n\n    this.reactionDisposers.push(reaction(\n      () => store.initialized,\n      () => {\n        this.resize();\n        this.updateCameras();\n      },\n    ));\n    this.reactionDisposers.push(reaction(\n      () => store.frame.currentFrameByCamera,\n      () => {\n        if (store.initialized) {\n          this.updateCameras();\n        }\n      },\n    ));\n    this.reactionDisposers.push(reaction(\n      () => store.frame.currentCamera,\n      (_, prev) => {\n        if (!store.initialized) {\n          return;\n        }\n        if (!store.frame.isSingleCamera && store.config.cameraLayout === CameraLayout.THUMBNAIL) {\n          const { currentCameraView, cameraViews } = store.frame;\n          // remove previous camera view\n          this.props.app.stage.removeChild(cameraViews[prev]);\n          // add current camera view\n          if (currentCameraView) {\n            this.props.app.stage.addChild(currentCameraView);\n            currentCameraView.fitImageToView();\n          }\n        }\n        this.updateMousePositionInCamera();\n      },\n    ));\n    this.reactionDisposers.push(reaction(\n      () => store.config.cameraLayout,\n      (cameraLayout) => {\n        if (!store.initialized) {\n          return;\n        }\n\n        this.updateHasScroller();\n        // reset scroll top when layout changes\n        this.camerasContainer.current?.scrollTo(0, 0);\n        this.scrollTop = 0;\n\n        const { isSingleCamera, cameraViews, currentCamera } = store.frame;\n        const isThumbnailLayout = !isSingleCamera && cameraLayout === CameraLayout.THUMBNAIL;\n        Object.values(cameraViews).forEach((cameraView, i) => {\n          // update camera view & fit view\n          this.updateCameraBounds(cameraView, i);\n          if (!store.config.preferences.zoomTogether || cameraView.id === currentCamera) {\n            cameraView.fitImageToView();\n          }\n          if (isThumbnailLayout) {\n            this.updateCameraThumbnail(cameraView, i);\n            if (cameraView.id !== currentCamera) {\n              this.props.app.stage.removeChild(cameraView);\n            }\n          } else {\n            this.props.app.stage.addChild(cameraView);\n            if (cameraView.snapshot) {\n              this.props.app.stage.removeChild(cameraView.snapshot);\n            }\n          }\n        });\n        this.nifti3DView.current?.updateContainerSize(this.getContainerSize());\n\n        // async to update scroller, waiting doms finish update\n        setTimeout(() => this.updateScroller(), 0);\n      },\n    ));\n    this.reactionDisposers.push(reaction(\n      () => [\n        store.frame.loading, // finish shapes setup\n        store.frame.currentFrameRotation, // rotation changes, should update image in thumbnail\n        JSON.stringify(store.frame.getFiltersForCamera(store.frame.currentCamera)), // image filters changes\n        JSON.stringify(store.shape.config), // shape styles change\n        store.shape.shapesRefreshCounter,\n        store.undo.pointer,\n        store.undo.lastStoreId,\n      ],\n      (\n        [loading, rotation, filters, config, counter],\n        [prevLoading, prevRotation, prevFilters, prevConfig, prevCounter],\n      ) => {\n        if (!store.frame.isSingleCamera && store.config.cameraLayout === CameraLayout.THUMBNAIL && !store.shape.recognitionStart) {\n          const updateShapesInAllCameras = (loading !== prevLoading && !loading) || config !== prevConfig || counter !== prevCounter;\n          const updateImageInCurrCamera = rotation !== prevRotation || filters !== prevFilters;\n          const { currentCamera, cameraViews } = store.frame;\n          Object.values(cameraViews).forEach((cameraView, i) => {\n            if (updateShapesInAllCameras || cameraView.id === currentCamera) {\n              this.updateCameraThumbnail(cameraView, i, updateShapesInAllCameras || !updateImageInCurrCamera);\n            }\n          });\n        }\n      },\n      {\n        equals: (a, b) => b[0] === true || Array.from({ length: a.length }).every((_, i) => a[i] === b[i]),\n      },\n    ));\n  }\n\n  componentDidMount() {\n    window.addEventListener('mousemove', this.updateMousePosition);\n    if (this.container.current) {\n      new ResizeObserver(this.resize).observe(this.container.current);\n      this.props.app.renderer.on('resolution-changed', this.resize);\n\n      // setup view\n      this.container.current.appendChild(this.props.app.view);\n      this.resize();\n      this.updateCameras();\n    }\n  }\n\n  componentWillUnmount() {\n    // cancel loaders\n    this.cancellableLoaders.forEach((loader) => {\n      loader.cancel();\n    });\n    this.cancellableLoaders = [];\n    this.loadedCount = 0;\n    store.frame.loading = false;\n\n    // remove camera views\n    Object.values(store.frame.cameraViews).forEach((view) => {\n      this.props.app.stage.removeChild(view);\n      if (view.snapshot) {\n        this.props.app.stage.removeChild(view.snapshot);\n      }\n    });\n\n    window.removeEventListener('mousemove', this.updateMousePosition);\n    this.props.app.renderer.off('resolution-changed', this.resize);\n    this.reactionDisposers.forEach((disposer) => disposer());\n  }\n\n  /**\n   * update mouse position\n   * @param e\n   */\n  updateMousePosition = (e: MouseEvent) => {\n    const { clientX, clientY } = e;\n    this.mousePosition = {\n      x: clientX,\n      y: clientY,\n    };\n    this.updateMousePositionInCamera();\n  };\n\n  /**\n   * update mouse position in current camera\n   */\n  updateMousePositionInCamera = () => {\n    const { currentCameraView } = store.frame;\n    if (currentCameraView?.hovered) {\n      const position = this.mapScreenToStagePosition(this.mousePosition.x, this.mousePosition.y);\n      store.currPosition = currentCameraView.stage.toLocal(position);\n    } else {\n      store.currPosition = undefined;\n    }\n  };\n\n  /**\n   * get container's size, defualt is 800 * 600\n   */\n  getContainerSize() {\n    // default size is 800 * 600\n    const size = {\n      width: 800,\n      height: 600,\n    };\n    if (this.container.current) {\n      size.width = this.container.current.clientWidth;\n      size.height = this.container.current.clientHeight;\n    }\n    return size;\n  }\n\n  /**\n   * get camera bounds by camera index\n   * @param cameraIndex\n   */\n  getCameraBounds(cameraIndex: number) {\n    const { width, height } = this.props.app.screen;\n    const { cameraCount } = store.frame;\n    // single camera, not use layout\n    if (cameraCount === 1) {\n      return {\n        width,\n        height,\n        x: 0,\n        y: 0,\n      };\n    }\n\n    const { cameraLayout } = store.config;\n    if (cameraLayout === CameraLayout.THUMBNAIL) {\n      return {\n        width: width - 200,\n        height,\n        x: 200,\n        y: this.scrollTop,\n      };\n    }\n\n    const colCount = cameraLayout === CameraLayout.COL2 ? 2 : 3;\n    const cameraWidth = (this.hasScroller ? width - 12 : width) / colCount;\n    const cameraHeight = this.hasScroller ? (cameraWidth / 16) * 9 : height / colCount;\n    if (cameraCount === colCount) {\n      // split n columns\n      return {\n        width: cameraWidth,\n        height,\n        x: cameraIndex * cameraWidth,\n        y: 0,\n      };\n    }\n    // default split into 4 parts\n    const colIndex = cameraIndex % colCount;\n    const rowIndex = Math.floor(cameraIndex / colCount);\n    return {\n      width: cameraWidth,\n      height: cameraHeight,\n      x: colIndex * cameraWidth,\n      y: rowIndex * cameraHeight,\n    };\n  }\n\n  /**\n   * resize\n   */\n  resize = () => {\n    const { width, height } = this.getContainerSize();\n    this.props.app.renderer.resize(width, height);\n    this.props.app.render();\n\n    // update if cameras container has scroller\n    this.updateHasScroller();\n    // update camera views\n    Object.values(store.frame.cameraViews).forEach((cameraView, i) => {\n      this.updateCameraBounds(cameraView, i);\n      if (store.fullscreenRequested && (\n        !store.config.preferences.zoomTogether || cameraView.id === store.frame.currentCamera\n      )) {\n        cameraView.fitImageToView();\n      }\n    });\n    // update cameras scroller\n    this.updateScroller();\n    // 更新 nifti 3d view\n    this.nifti3DView.current?.updateContainerSize({ width, height });\n    // 更新 nifti views\n    store.frame.drawNIFTIViews();\n\n    // delay to set to false to wait fullscreen finish\n    setTimeout(() => {\n      store.fullscreenRequested = false;\n    }, 0);\n  };\n\n  /**\n   * update cameras for current frame\n   */\n  updateCameras() {\n    const { niftiParser, dicomParser, cameraNames, currentFrameByCamera, getImageUrl, getPDFDocument, getVideo } = store.frame;\n\n    utils.clearTextureCache();\n    this.cancellableLoaders.forEach((loader) => {\n      loader.cancel();\n    });\n    this.cancellableLoaders = [];\n    this.loadedCount = 0;\n\n    cameraNames.forEach((camera, i) => {\n      if (dicomParser) {\n        const dicomCameraView = store.frame.cameraViews[camera] as DICOMView;\n        this.onLoaded(camera, i, dicomCameraView.currentImage?.imageId ?? '', {\n          canvas: dicomCameraView.transparentCanvas,\n          width: dicomCameraView.currentImage?.Columns ?? 0,\n          height: dicomCameraView.currentImage?.Rows ?? 0,\n        });\n        return;\n      }\n      const currentFrame = currentFrameByCamera[camera];\n      const url = getImageUrl(camera, currentFrame) || '';\n      const loader: CancellableLoader = {\n        cancelled: false,\n        cancel() {\n          this.cancelled = true;\n        },\n        load() {\n          return new Promise((resove, reject) => {\n            const pdfDoc = getPDFDocument(camera);\n            const videoObj = getVideo(camera);\n            if (niftiParser) {\n              const canvas = niftiParser.getPlaneImage(camera, currentFrame);\n              if (!this.cancelled) {\n                resove({\n                  canvas,\n                  width: canvas.width,\n                  height: canvas.height,\n                });\n              } else {\n                reject();\n              }\n            } else if (pdfDoc) {\n              pdfDoc\n                .loadPage(currentFrame + 1)\n                .then((data) => {\n                  if (!this.cancelled) {\n                    resove(data);\n                  } else {\n                    reject();\n                  }\n                })\n                .catch(() => resove(new Event('error')));\n            } else if (videoObj) {\n              const { video, fps } = videoObj;\n              const targetTime = currentFrame / fps;\n              captureVideo(video, targetTime).then((canvas) => {\n                if (!this.cancelled) {\n                  resove({\n                    canvas,\n                    width: canvas.width,\n                    height: canvas.height,\n                  });\n                } else {\n                  reject();\n                }\n              });\n            } else {\n              imageLoader(store.proxyResource(url), (data) => {\n                if (!this.cancelled) {\n                  if (data instanceof HTMLCanvasElement) {\n                    resove({\n                      canvas: data,\n                      width: data.width,\n                      height: data.height,\n                    });\n                  } else {\n                    resove(data as Event);\n                  }\n                } else {\n                  reject();\n                }\n              }, {\n                canvas: true,\n                orientation: true,\n                crossOrigin: 'anonymous',\n              });\n            }\n          });\n        }\n      };\n      loader\n        .load()\n        .then((data) => this.onLoaded(camera, i, url, data))\n        .catch(() => {\n          // canceled\n        });\n      this.cancellableLoaders.push(loader);\n    });\n  }\n\n  /**\n   * update camera bounds\n   * @param cameraView\n   * @param index\n   */\n  updateCameraBounds(cameraView: View, index: number) {\n    const { x, y, width, height } = this.getCameraBounds(index);\n    cameraView.updatePositionAndSize(x, y - this.scrollTop, width, height);\n    const cameraDom = document.getElementById(`${CAMERA_VIEW}-${cameraView.id}`);\n    if (cameraDom) {\n      cameraDom.style.left = `${x}px`;\n      cameraDom.style.top = `${y}px`;\n      cameraDom.style.width = `${width}px`;\n      cameraDom.style.height = `${height}px`;\n      if (cameraView instanceof DICOMView) {\n        // 如果是dicom view，把view中渲染dicom图片的dom插入到camera dom中\n        cameraDom.appendChild(cameraView.renderElement);\n      }\n    }\n  }\n\n  /**\n   * update camera thumbnail\n   * @param cameraView\n   * @param index\n   * @param shapesUpdateOnly\n   */\n  updateCameraThumbnail(cameraView: View, index: number, shapesUpdateOnly = false) {\n    if (!cameraView.imageLoadError) {\n      if (!cameraView.snapshot) {\n        cameraView.snapshot = new Container();\n        cameraView.snapshot.mask = new Graphics()\n          .beginFill(0x000000)\n          .drawRect(0, THUMBNAIL_HEIGHT * index, THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT)\n          .endFill();\n      }\n      this.props.app.stage.addChild(cameraView.snapshot);\n\n      const shapesTexture = this.props.app.renderer.generateTexture(cameraView.shapesLayer);\n      const shapesSnapshot = new Sprite(shapesTexture);\n      const { x: sx, y: sy } = cameraView.shapesLayer.getLocalBounds();\n      shapesSnapshot.position.set(sx, sy);\n\n      if (shapesUpdateOnly && cameraView.snapshot.children.length === 2) {\n        const viewScale = cameraView.snapshot.scale.x;\n        const { width, height } = cameraView.snapshot.getChildAt(0).getBounds();\n        shapesSnapshot.x += (THUMBNAIL_WIDTH - width) / viewScale / 2;\n        shapesSnapshot.y += (THUMBNAIL_HEIGHT - height) / viewScale / 2;\n        const toBeDestroyed = cameraView.snapshot.getChildAt(1);\n        cameraView.snapshot.removeChildAt(1);\n        cameraView.snapshot.addChildAt(shapesSnapshot, 1);\n        toBeDestroyed.destroy(true);\n      } else {\n        const imageTexture = this.props.app.renderer.generateTexture(cameraView.image, {\n          region: cameraView.image.getBounds(),\n        });\n        const image = new Sprite(imageTexture);\n        image.scale.set(1 / cameraView.viewScale);\n\n        const { width, height } = image;\n        const viewRatio = THUMBNAIL_WIDTH / THUMBNAIL_HEIGHT;\n        const imgRatio = width / height;\n        const scale = viewRatio < imgRatio ? THUMBNAIL_WIDTH / width : THUMBNAIL_HEIGHT / height;\n        const offsetX = (THUMBNAIL_WIDTH / scale - width) / 2;\n        const offsetY = (THUMBNAIL_HEIGHT / scale - height) / 2;\n        image.x += offsetX;\n        image.y += offsetY;\n        shapesSnapshot.x += offsetX;\n        shapesSnapshot.y += offsetY;\n\n        const toBeDestroyed = [...cameraView.snapshot.children];\n        cameraView.snapshot.removeChildren();\n        cameraView.snapshot.addChildAt(image, 0);\n        cameraView.snapshot.addChildAt(shapesSnapshot, 1);\n        cameraView.snapshot.position.set(0, THUMBNAIL_HEIGHT * index);\n        cameraView.snapshot.scale.set(scale);\n        toBeDestroyed.forEach((i) => i.destroy(true));\n      }\n    }\n  }\n\n  /**\n   * update cameras scroller\n   */\n  updateScroller() {\n    if (this.camerasContainer.current) {\n      const { scrollTop, scrollHeight } = this.camerasContainer.current;\n      const { height } = this.camerasContainer.current.getBoundingClientRect();\n      this.scrollTop = scrollTop;\n      this.scrollHeight = scrollHeight;\n      this.containerHeight = height;\n    }\n  }\n\n  /**\n   * update if cameras container has scroller\n   */\n  updateHasScroller() {\n    const { cameraLayout } = store.config;\n    const { cameraCount } = store.frame;\n    if (cameraCount > 1 && cameraLayout === CameraLayout.THUMBNAIL) {\n      const maxCount = Math.floor(this.props.app.screen.height / THUMBNAIL_HEIGHT);\n      this.hasScroller = cameraCount > maxCount;\n    } else {\n      const colCount = cameraLayout === CameraLayout.COL2 ? 2 : 3;\n      const oneScreenCameraCount = colCount ** 2;\n      this.hasScroller = cameraCount > oneScreenCameraCount;\n    }\n  }\n\n  /**\n   * on resource loaded\n   * @param name\n   * @param index\n   * @param url\n   * @param data\n   */\n  onLoaded = (name: string, index: number, url: string, data: Event | ImageLoadResult) => {\n    const error = data instanceof Event && data.type === 'error';\n    const cameraView = store.frame.cameraViews[name];\n    if (cameraView) {\n      const { isSingleCamera, currentCamera, currentFrameByCamera, getFrameRotationForCamera, getFiltersForCamera, updateImageSize } = store.frame;\n      const isThumbnailLayout = !isSingleCamera && store.config.cameraLayout === CameraLayout.THUMBNAIL;\n      const currentFrame = currentFrameByCamera[name];\n\n      if (!isThumbnailLayout || currentCamera === name) {\n        this.props.app.stage.addChild(cameraView);\n      } else {\n        this.props.app.stage.removeChild(cameraView);\n      }\n\n      cameraView.imageLoadError = error;\n      cameraView.imageRotation = getFrameRotationForCamera(name, currentFrame);\n      this.updateCameraBounds(cameraView, index);\n\n      let texture: Texture;\n      let w = -1;\n      let h = -1;\n      if (!error) {\n        const { canvas, width, height } = data as ImageLoadResult;\n        texture = Texture.from(canvas);\n        w = width;\n        h = height;\n        cameraView.setImage(texture, width, height, getFiltersForCamera(name));\n        this.props.checkOutOfRangeForWebGLRenderer(texture.width, texture.height);\n      }\n      updateImageSize(name, currentFrame, w, h);\n\n      if (isThumbnailLayout) {\n        this.updateCameraThumbnail(cameraView, index);\n      }\n    }\n    this.imageLoadErrors[name] = error\n      ? i18n.translate('COMMON_IMAGE_ERROR', { values: { image: url || i18n.translate('COMMON_EMPTY') } })\n      : '';\n    this.loadedCount += 1;\n    this.checkLoaded();\n  };\n\n  /**\n   * check all cameras loaded in current frame\n   */\n  checkLoaded() {\n    const { cameraCount, onFrameLoaded } = store.frame;\n    if (this.loadedCount === cameraCount) {\n      onFrameLoaded();\n      store.config.keepViewScaleAndPosition();\n    }\n  }\n\n  /**\n   * update all cameras bounds\n   */\n  updateAllCameraViewsBounds() {\n    const { cameraLayout } = store.config;\n    const { cameraViews, isSingleCamera } = store.frame;\n    const isThumbnailLayout = !isSingleCamera && cameraLayout === CameraLayout.THUMBNAIL;\n    Object.values(cameraViews).forEach((cameraView, i) => {\n      this.updateCameraBounds(cameraView, i);\n      if (isThumbnailLayout && cameraView.snapshot) {\n        cameraView.snapshot.y = THUMBNAIL_HEIGHT * i - this.scrollTop;\n      }\n    });\n    this.nifti3DView.current?.updateContainerSize(this.getContainerSize());\n  }\n\n  /**\n   * wheel\n   */\n  wheel = (event: React.WheelEvent) => {\n    event.stopPropagation();\n    const { currentCameraView } = store.frame;\n    if (currentCameraView) {\n      const point = this.mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this.mapStageToLocalPosition(point);\n      const zoomed = currentCameraView.zoom(event.nativeEvent, localPoint, store.config.preferences.zoomStep);\n      if (zoomed) {\n        store.frame.syncDICOMViews();\n      } else if (this.hasScroller) {\n        this.scroll(event.deltaY);\n      }\n    }\n  };\n\n  /**\n   * scroll\n   * @param deltaY\n   */\n  scroll(deltaY: number) {\n    if (this.camerasContainer.current) {\n      this.camerasContainer.current.scrollBy(0, deltaY);\n      this.scrollTop = this.camerasContainer.current.scrollTop;\n      this.updateAllCameraViewsBounds();\n    }\n  }\n\n  /**\n   * start scroll\n   * @param e\n   */\n  startScroll = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.scrollStartY = e.clientY;\n    this.scrollStartTop = this.scrollThumbTop;\n    window.addEventListener('mousemove', this.scrolling);\n    window.addEventListener('mouseup', this.finishScroll);\n  };\n\n  /**\n   * scrolling\n   * @param e\n   */\n  scrolling = (e: MouseEvent) => {\n    e.preventDefault();\n    if (this.camerasContainer.current) {\n      const offsetClientY = e.clientY - this.scrollStartY;\n      let top = this.scrollStartTop + offsetClientY;\n      if (top < 0) {\n        top = 0;\n      }\n      const { clientHeight, scrollHeight } = this.camerasContainer.current;\n      const maxTop = clientHeight - this.scrollThumbHeight;\n      if (top > maxTop) {\n        top = maxTop;\n      }\n\n      this.scrollTop = (top / clientHeight) * scrollHeight;\n      this.camerasContainer.current.scroll(0, this.scrollTop);\n      this.updateAllCameraViewsBounds();\n    }\n  };\n\n  /**\n   * finish scroll\n   * @param e\n   */\n  finishScroll = (e: MouseEvent) => {\n    e.preventDefault();\n    window.removeEventListener('mousemove', this.scrolling);\n    window.removeEventListener('mouseup', this.finishScroll);\n  };\n\n  /**\n   * map screen position to stage position as a PIXI point\n   * @param x screen position x\n   * @param y screen position y\n   */\n  mapScreenToStagePosition(x: number, y: number) {\n    const point = new Point();\n    this.props.app.renderer.plugins.interaction.mapPositionToPoint(point, x, y);\n    return point;\n  }\n\n  /**\n   * map stage position to local posistion as a PIXI point\n   * @param point\n   */\n  mapStageToLocalPosition(point: Point) {\n    return this.props.app.stage.toLocal(point);\n  }\n\n  renderCameraView(camera: string, i: number, isThumbnail = false) {\n    const { labelMode, viewScale, showCurrPosition, crossLineVisible, activeMeasurementBox, pixelSearchVisible } = store.config;\n    const { niftiParser, currentCamera, isSingleCamera, cameraFrames, currentFrameByCamera } = store.frame;\n\n    const key = isThumbnail ? `${camera}-thumbnail` : camera;\n    const selected = currentCamera === camera;\n    const isAxial = niftiParser && camera === Plane.AXIAL;\n    const isCoronal = niftiParser && camera === Plane.CORONAL;\n    const isSagittal = niftiParser && camera === Plane.SAGITTAL;\n    return (\n      <div\n        key={key}\n        id={`${CAMERA_VIEW}-${key}`}\n        className={cx('camera-view', {\n          selected,\n          single: isSingleCamera,\n          thumbnail: isThumbnail,\n          'nifti-axial': isAxial,\n          'nifti-coronal': isCoronal,\n          'nifti-sagittal': isSagittal,\n        })}\n        // for thumbnail\n        {...isThumbnail && {\n          style: {\n            width: THUMBNAIL_WIDTH,\n            height: THUMBNAIL_HEIGHT,\n            left: 0,\n            top: THUMBNAIL_HEIGHT * i,\n          },\n          onClick: () => {\n            let p;\n            if (camera !== currentCamera && pixelSearchVisible) {\n              const { currentCameraView } = store.frame;\n              if (currentCameraView) {\n                p = currentCameraView.pixelMarkPosition;\n                currentCameraView.removePixelMark();\n              }\n            }\n            store.frame.setCamera(camera);\n            if (p) {\n              store.frame.currentCameraView?.fitPixelMarkToView(p);\n            }\n          },\n          onWheel: this.wheel,\n        }}\n      >\n        {!isThumbnail && (\n          <>\n            {!niftiParser && <CameraBackground camera={camera} />}\n            <div\n              id={`${CAMERA_VIEW_LABELS}-${camera}`}\n              className={cx('shape-labels-container', {\n                'label-mode': labelMode,\n              })}\n            />\n            <svg\n              id={`${CAMERA_VIEW_CONNECTIONS}-${camera}`}\n              className=\"connections-container\"\n            >\n              <marker id={CONNECTION_MARKER_ARROW} markerWidth=\"10\" markerHeight=\"10\" refX=\"8\" refY=\"4\" orient=\"auto\">\n                <path d=\"M0,0 L0,8 L8,4 z\" fill=\"#FFAFFE\" />\n              </marker>\n            </svg>\n            <LabelViewer\n              camera={camera}\n              mousePosition={this.mousePosition}\n            />\n            <Assistant\n              scale={viewScale}\n              crossline={selected && crossLineVisible}\n              measurementBox={selected ? activeMeasurementBox : undefined}\n              mousePosition={this.mousePosition}\n              currPosition={selected && showCurrPosition ? store.currPosition : undefined}\n              zIndex={2}\n            />\n          </>\n        )}\n        <div className=\"outer-border\">\n          <div className=\"inner-border\">\n            {this.imageLoadErrors[camera] && (\n              <div\n                className=\"error\"\n                onClick={() => store.frame.setCamera(camera)}\n              >\n                {isThumbnail ? 'Error' : this.imageLoadErrors[camera]}\n              </div>\n            )}\n            {!isSingleCamera && (\n              <div className=\"name\">\n                {niftiParser ? camera : `C${i + 1}-${camera}`}\n              </div>\n            )}\n            {isAxial && (\n              <>\n                <div className=\"axis-frames\">\n                  {`${currentFrameByCamera[Plane.AXIAL] + 1} / ${cameraFrames[Plane.AXIAL]}`}\n                </div>\n                <div className=\"axis axis-top\">A</div>\n                <div className=\"axis axis-right\">L</div>\n                <div className=\"axis axis-bottom\">P</div>\n                <div className=\"axis axis-left\">R</div>\n              </>\n            )}\n            {isCoronal && (\n              <>\n                <div className=\"axis-frames\">\n                  {`${currentFrameByCamera[Plane.CORONAL] + 1} / ${cameraFrames[Plane.CORONAL]}`}\n                </div>\n                <div className=\"axis axis-top\">S</div>\n                <div className=\"axis axis-right\">L</div>\n                <div className=\"axis axis-bottom\">I</div>\n                <div className=\"axis axis-left\">R</div>\n              </>\n            )}\n            {isSagittal && (\n              <>\n                <div className=\"axis-frames\">\n                  {`${currentFrameByCamera[Plane.SAGITTAL] + 1} / ${cameraFrames[Plane.SAGITTAL]}`}\n                </div>\n                <div className=\"axis axis-top\">S</div>\n                <div className=\"axis axis-right\">P</div>\n                <div className=\"axis axis-bottom\">I</div>\n                <div className=\"axis axis-left\">A</div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { cursor, cameraLayout, layers } = store.config;\n    const { currentCameraView, cameraNames, isSingleCamera } = store.frame;\n    const isThumbnailLayout = !isSingleCamera && cameraLayout === CameraLayout.THUMBNAIL;\n    const layersEnabled = layers.length > 0;\n    return (\n      <>\n        <OperationNavigator\n          onViewReset={() => currentCameraView?.fitImageToView()}\n          setViewScale={(scale) => currentCameraView?.zoomTo(scale)}\n        />\n        <div\n          style={{\n            width: '100%',\n            height: `calc(100% - ${NAVIGATOR_HEIGHT + (layersEnabled ? LAYERS_HEIGHT : 0)}px)`,\n            position: 'relative',\n            cursor,\n          }}\n        >\n          <div\n            ref={this.container}\n            className=\"canvas-container\"\n            onContextMenu={(e) => e.preventDefault()}\n            onWheel={this.wheel}\n          />\n          <PixelSearch />\n          <PixelLock style={{ ...this.hasScroller && { marginRight: 8 } }} />\n          <div\n            ref={this.camerasContainer}\n            className={cx('cameras-container', {\n              'thumbnail-layout': isThumbnailLayout,\n            })}\n          >\n            {cameraNames.map((camera, i) => this.renderCameraView(camera, i))}\n            {cameraNames.map((camera, i) => this.renderCameraView(camera, i, true))}\n            {store.frame.niftiParser && <NIFTI3DCameraView ref={this.nifti3DView} />}\n          </div>\n          {this.hasScroller && (\n            <div\n              className={cx('cameras-scroller', {\n                'thumbnail-layout': isThumbnailLayout,\n              })}\n            >\n              <div\n                className=\"cameras-scroller__thumb\"\n                style={{\n                  top: this.scrollThumbTop,\n                  height: this.scrollThumbHeight,\n                }}\n                onMouseDown={this.startScroll}\n              />\n            </div>\n          )}\n        </div>\n        {layersEnabled && <Layers />}\n      </>\n    );\n  }\n}\n\nexport default observer(CamerasContainer);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}