{"ast":null,"code":"/* eslint-disable complexity, no-redeclare, no-var, one-var */\n\n/**\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\n *\n * @param {Number} bufferSize Buffer size\n * @param {Number} sampleRate Sample rate\n * @param {String | Undefiend} windowFunc Window function\n * @param {Number | Undefiend} alpha Alpha channel\n */\nexport default function FFT(bufferSize, sampleRate, windowFunc, alpha) {\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  this.bandwidth = 2 / bufferSize * (sampleRate / 2);\n  this.sinTable = new Float32Array(bufferSize);\n  this.cosTable = new Float32Array(bufferSize);\n  this.windowValues = new Float32Array(bufferSize);\n  this.reverseTable = new Uint32Array(bufferSize);\n  this.peakBand = 0;\n  this.peak = 0;\n  var i;\n  switch (windowFunc) {\n    case 'bartlett':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = 2 / (bufferSize - 1) * ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\n      }\n      break;\n    case 'bartlettHann':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = 0.62 - 0.48 * Math.abs(i / (bufferSize - 1) - 0.5) - 0.38 * Math.cos(Math.PI * 2 * i / (bufferSize - 1));\n      }\n      break;\n    case 'blackman':\n      alpha = alpha || 0.16;\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = (1 - alpha) / 2 - 0.5 * Math.cos(Math.PI * 2 * i / (bufferSize - 1)) + alpha / 2 * Math.cos(4 * Math.PI * i / (bufferSize - 1));\n      }\n      break;\n    case 'cosine':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = Math.cos(Math.PI * i / (bufferSize - 1) - Math.PI / 2);\n      }\n      break;\n    case 'gauss':\n      alpha = alpha || 0.25;\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = Math.pow(Math.E, -0.5 * Math.pow((i - (bufferSize - 1) / 2) / (alpha * (bufferSize - 1) / 2), 2));\n      }\n      break;\n    case 'hamming':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = 0.54 - 0.46 * Math.cos(Math.PI * 2 * i / (bufferSize - 1));\n      }\n      break;\n    case 'hann':\n    case undefined:\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = 0.5 * (1 - Math.cos(Math.PI * 2 * i / (bufferSize - 1)));\n      }\n      break;\n    case 'lanczoz':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = Math.sin(Math.PI * (2 * i / (bufferSize - 1) - 1)) / (Math.PI * (2 * i / (bufferSize - 1) - 1));\n      }\n      break;\n    case 'rectangular':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = 1;\n      }\n      break;\n    case 'triangular':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = 2 / bufferSize * (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\n      }\n      break;\n    default:\n      throw Error(`No such window function '${windowFunc}'`);\n  }\n  var limit = 1;\n  var bit = bufferSize >> 1;\n  var i;\n  while (limit < bufferSize) {\n    for (i = 0; i < limit; i += 1) {\n      this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n    }\n    limit <<= 1;\n    bit >>= 1;\n  }\n  for (i = 0; i < bufferSize; i += 1) {\n    this.sinTable[i] = Math.sin(-Math.PI / i);\n    this.cosTable[i] = Math.cos(-Math.PI / i);\n  }\n  this.calculateSpectrum = function (buffer) {\n    // Locally scope variables for speed up\n    var bufferSize = this.bufferSize,\n      cosTable = this.cosTable,\n      sinTable = this.sinTable,\n      reverseTable = this.reverseTable,\n      real = new Float32Array(bufferSize),\n      imag = new Float32Array(bufferSize),\n      bSi = 2 / this.bufferSize,\n      sqrt = Math.sqrt,\n      rval,\n      ival,\n      mag,\n      spectrum = new Float32Array(bufferSize / 2);\n    var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n    if (Math.pow(2, k) !== bufferSize) {\n      throw 'Invalid buffer size, must be a power of 2.';\n    }\n    if (bufferSize !== buffer.length) {\n      throw `Supplied buffer is not the same size as defined FFT. FFT Size: ${bufferSize} Buffer Size: ${buffer.length}`;\n    }\n    var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal;\n    for (var i = 0; i < bufferSize; i += 1) {\n      real[i] = buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\n      imag[i] = 0;\n    }\n    while (halfSize < bufferSize) {\n      phaseShiftStepReal = cosTable[halfSize];\n      phaseShiftStepImag = sinTable[halfSize];\n      currentPhaseShiftReal = 1;\n      currentPhaseShiftImag = 0;\n      for (var fftStep = 0; fftStep < halfSize; fftStep += 1) {\n        var i = fftStep;\n        while (i < bufferSize) {\n          off = i + halfSize;\n          tr = currentPhaseShiftReal * real[off] - currentPhaseShiftImag * imag[off];\n          ti = currentPhaseShiftReal * imag[off] + currentPhaseShiftImag * real[off];\n          real[off] = real[i] - tr;\n          imag[off] = imag[i] - ti;\n          real[i] += tr;\n          imag[i] += ti;\n          i += halfSize << 1;\n        }\n        tmpReal = currentPhaseShiftReal;\n        currentPhaseShiftReal = tmpReal * phaseShiftStepReal - currentPhaseShiftImag * phaseShiftStepImag;\n        currentPhaseShiftImag = tmpReal * phaseShiftStepImag + currentPhaseShiftImag * phaseShiftStepReal;\n      }\n      halfSize <<= 1;\n    }\n    for (var i = 0, N = bufferSize / 2; i < N; i += 1) {\n      rval = real[i];\n      ival = imag[i];\n      mag = bSi * sqrt(rval * rval + ival * ival);\n      if (mag > this.peak) {\n        this.peakBand = i;\n        this.peak = mag;\n      }\n      spectrum[i] = mag;\n    }\n    return spectrum;\n  };\n}","map":{"version":3,"names":["FFT","bufferSize","sampleRate","windowFunc","alpha","bandwidth","sinTable","Float32Array","cosTable","windowValues","reverseTable","Uint32Array","peakBand","peak","i","Math","abs","cos","PI","pow","E","undefined","sin","Error","limit","bit","calculateSpectrum","buffer","real","imag","bSi","sqrt","rval","ival","mag","spectrum","k","floor","log","LN2","length","halfSize","phaseShiftStepReal","phaseShiftStepImag","currentPhaseShiftReal","currentPhaseShiftImag","off","tr","ti","tmpReal","fftStep","N"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/common/Wave/Analyse/fft.js"],"sourcesContent":["/* eslint-disable complexity, no-redeclare, no-var, one-var */\n\n/**\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\n *\n * @param {Number} bufferSize Buffer size\n * @param {Number} sampleRate Sample rate\n * @param {String | Undefiend} windowFunc Window function\n * @param {Number | Undefiend} alpha Alpha channel\n */\nexport default function FFT(bufferSize, sampleRate, windowFunc, alpha) {\n  this.bufferSize = bufferSize;\n  this.sampleRate = sampleRate;\n  this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\n\n  this.sinTable = new Float32Array(bufferSize);\n  this.cosTable = new Float32Array(bufferSize);\n  this.windowValues = new Float32Array(bufferSize);\n  this.reverseTable = new Uint32Array(bufferSize);\n\n  this.peakBand = 0;\n  this.peak = 0;\n\n  var i;\n  switch (windowFunc) {\n    case 'bartlett':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] =\n                    (2 / (bufferSize - 1)) *\n                    ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\n      }\n      break;\n    case 'bartlettHann':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] =\n                    0.62 -\n                    0.48 * Math.abs(i / (bufferSize - 1) - 0.5) -\n                    0.38 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\n      }\n      break;\n    case 'blackman':\n      alpha = alpha || 0.16;\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] =\n                    (1 - alpha) / 2 -\n                    0.5 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1)) +\n                    (alpha / 2) *\n                        Math.cos((4 * Math.PI * i) / (bufferSize - 1));\n      }\n      break;\n    case 'cosine':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = Math.cos(\n          (Math.PI * i) / (bufferSize - 1) - Math.PI / 2\n        );\n      }\n      break;\n    case 'gauss':\n      alpha = alpha || 0.25;\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = Math.pow(\n          Math.E,\n          -0.5 *\n                        Math.pow(\n                          (i - (bufferSize - 1) / 2) /\n                                ((alpha * (bufferSize - 1)) / 2),\n                          2\n                        )\n        );\n      }\n      break;\n    case 'hamming':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] =\n                    0.54 -\n                    0.46 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\n      }\n      break;\n    case 'hann':\n    case undefined:\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] =\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i) / (bufferSize - 1)));\n      }\n      break;\n    case 'lanczoz':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] =\n                    Math.sin(Math.PI * ((2 * i) / (bufferSize - 1) - 1)) /\n                    (Math.PI * ((2 * i) / (bufferSize - 1) - 1));\n      }\n      break;\n    case 'rectangular':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] = 1;\n      }\n      break;\n    case 'triangular':\n      for (i = 0; i < bufferSize; i += 1) {\n        this.windowValues[i] =\n                    (2 / bufferSize) *\n                    (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\n      }\n      break;\n    default:\n      throw Error(`No such window function '${windowFunc}'`);\n  }\n\n  var limit = 1;\n  var bit = bufferSize >> 1;\n  var i;\n\n  while (limit < bufferSize) {\n    for (i = 0; i < limit; i += 1) {\n      this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n    }\n\n    limit <<= 1;\n    bit >>= 1;\n  }\n\n  for (i = 0; i < bufferSize; i += 1) {\n    this.sinTable[i] = Math.sin(-Math.PI / i);\n    this.cosTable[i] = Math.cos(-Math.PI / i);\n  }\n\n  this.calculateSpectrum = function (buffer) {\n    // Locally scope variables for speed up\n    var bufferSize = this.bufferSize,\n      cosTable = this.cosTable,\n      sinTable = this.sinTable,\n      reverseTable = this.reverseTable,\n      real = new Float32Array(bufferSize),\n      imag = new Float32Array(bufferSize),\n      bSi = 2 / this.bufferSize,\n      sqrt = Math.sqrt,\n      rval,\n      ival,\n      mag,\n      spectrum = new Float32Array(bufferSize / 2);\n\n    var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n    if (Math.pow(2, k) !== bufferSize) {\n      throw 'Invalid buffer size, must be a power of 2.';\n    }\n    if (bufferSize !== buffer.length) {\n      throw `Supplied buffer is not the same size as defined FFT. FFT Size: ${\n        bufferSize\n      } Buffer Size: ${\n        buffer.length}`;\n    }\n\n    var halfSize = 1,\n      phaseShiftStepReal,\n      phaseShiftStepImag,\n      currentPhaseShiftReal,\n      currentPhaseShiftImag,\n      off,\n      tr,\n      ti,\n      tmpReal;\n\n    for (var i = 0; i < bufferSize; i += 1) {\n      real[i] =\n                buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\n      imag[i] = 0;\n    }\n\n    while (halfSize < bufferSize) {\n      phaseShiftStepReal = cosTable[halfSize];\n      phaseShiftStepImag = sinTable[halfSize];\n\n      currentPhaseShiftReal = 1;\n      currentPhaseShiftImag = 0;\n\n      for (var fftStep = 0; fftStep < halfSize; fftStep += 1) {\n        var i = fftStep;\n\n        while (i < bufferSize) {\n          off = i + halfSize;\n          tr =\n                        currentPhaseShiftReal * real[off] -\n                        currentPhaseShiftImag * imag[off];\n          ti =\n                        currentPhaseShiftReal * imag[off] +\n                        currentPhaseShiftImag * real[off];\n\n          real[off] = real[i] - tr;\n          imag[off] = imag[i] - ti;\n          real[i] += tr;\n          imag[i] += ti;\n\n          i += halfSize << 1;\n        }\n\n        tmpReal = currentPhaseShiftReal;\n        currentPhaseShiftReal =\n                    tmpReal * phaseShiftStepReal -\n                    currentPhaseShiftImag * phaseShiftStepImag;\n        currentPhaseShiftImag =\n                    tmpReal * phaseShiftStepImag +\n                    currentPhaseShiftImag * phaseShiftStepReal;\n      }\n\n      halfSize <<= 1;\n    }\n\n    for (var i = 0, N = bufferSize / 2; i < N; i += 1) {\n      rval = real[i];\n      ival = imag[i];\n      mag = bSi * sqrt(rval * rval + ival * ival);\n\n      if (mag > this.peak) {\n        this.peakBand = i;\n        this.peak = mag;\n      }\n      spectrum[i] = mag;\n    }\n    return spectrum;\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}