{"ast":null,"code":"/*:: import type {CellMeasurerCache, Positioner} from './Masonry';*/\n/*:: type createCellPositionerParams = {\n  cellMeasurerCache: CellMeasurerCache,\n  columnCount: number,\n  columnWidth: number,\n  spacer?: number,\n};*/\n/*:: type resetParams = {\n  columnCount: number,\n  columnWidth: number,\n  spacer?: number,\n};*/\nexport default function createCellPositioner(_ref /*:: */) /*: Positioner*/{\n  var cellMeasurerCache = _ref /*:: */.cellMeasurerCache,\n    columnCount = _ref /*:: */.columnCount,\n    columnWidth = _ref /*:: */.columnWidth,\n    _ref$spacer = _ref /*:: */.spacer,\n    spacer = _ref$spacer === void 0 ? 0 : _ref$spacer;\n  var columnHeights;\n  initOrResetDerivedValues();\n  function cellPositioner(index) {\n    // Find the shortest column and use it.\n    var columnIndex = 0;\n    for (var i = 1; i < columnHeights.length; i++) {\n      if (columnHeights[i] < columnHeights[columnIndex]) {\n        columnIndex = i;\n      }\n    }\n    var left = columnIndex * (columnWidth + spacer);\n    var top = columnHeights[columnIndex] || 0;\n    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;\n    return {\n      left: left,\n      top: top\n    };\n  }\n  function initOrResetDerivedValues() /*: void*/{\n    // Track the height of each column.\n    // Layout algorithm below always inserts into the shortest column.\n    columnHeights = [];\n    for (var i = 0; i < columnCount; i++) {\n      columnHeights[i] = 0;\n    }\n  }\n  function reset(params /*: resetParams*/) /*: void*/{\n    columnCount = params.columnCount;\n    columnWidth = params.columnWidth;\n    spacer = params.spacer;\n    initOrResetDerivedValues();\n  }\n  cellPositioner.reset = reset;\n  return cellPositioner;\n}","map":{"version":3,"names":["createCellPositioner","_ref","cellMeasurerCache","columnCount","columnWidth","_ref$spacer","spacer","columnHeights","initOrResetDerivedValues","cellPositioner","index","columnIndex","i","length","left","top","getHeight","reset","params"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/node_modules/react-virtualized/dist/es/Masonry/createCellPositioner.js"],"sourcesContent":["/*:: import type {CellMeasurerCache, Positioner} from './Masonry';*/\n/*:: type createCellPositionerParams = {\n  cellMeasurerCache: CellMeasurerCache,\n  columnCount: number,\n  columnWidth: number,\n  spacer?: number,\n};*/\n/*:: type resetParams = {\n  columnCount: number,\n  columnWidth: number,\n  spacer?: number,\n};*/\nexport default function createCellPositioner(_ref /*:: */) /*: Positioner*/{\n  var cellMeasurerCache = _ref /*:: */.cellMeasurerCache,\n    columnCount = _ref /*:: */.columnCount,\n    columnWidth = _ref /*:: */.columnWidth,\n    _ref$spacer = _ref /*:: */.spacer,\n    spacer = _ref$spacer === void 0 ? 0 : _ref$spacer;\n  var columnHeights;\n  initOrResetDerivedValues();\n  function cellPositioner(index) {\n    // Find the shortest column and use it.\n    var columnIndex = 0;\n    for (var i = 1; i < columnHeights.length; i++) {\n      if (columnHeights[i] < columnHeights[columnIndex]) {\n        columnIndex = i;\n      }\n    }\n    var left = columnIndex * (columnWidth + spacer);\n    var top = columnHeights[columnIndex] || 0;\n    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;\n    return {\n      left: left,\n      top: top\n    };\n  }\n  function initOrResetDerivedValues() /*: void*/{\n    // Track the height of each column.\n    // Layout algorithm below always inserts into the shortest column.\n    columnHeights = [];\n    for (var i = 0; i < columnCount; i++) {\n      columnHeights[i] = 0;\n    }\n  }\n  function reset(params /*: resetParams*/) /*: void*/{\n    columnCount = params.columnCount;\n    columnWidth = params.columnWidth;\n    spacer = params.spacer;\n    initOrResetDerivedValues();\n  }\n  cellPositioner.reset = reset;\n  return cellPositioner;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,oBAAoBA,CAACC,IAAI,CAAC,SAAS,gBAAgB;EACzE,IAAIC,iBAAiB,GAAGD,IAAI,CAAC,QAAQC,iBAAiB;IACpDC,WAAW,GAAGF,IAAI,CAAC,QAAQE,WAAW;IACtCC,WAAW,GAAGH,IAAI,CAAC,QAAQG,WAAW;IACtCC,WAAW,GAAGJ,IAAI,CAAC,QAAQK,MAAM;IACjCA,MAAM,GAAGD,WAAW,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGA,WAAW;EACnD,IAAIE,aAAa;EACjBC,wBAAwB,CAAC,CAAC;EAC1B,SAASC,cAAcA,CAACC,KAAK,EAAE;IAC7B;IACA,IAAIC,WAAW,GAAG,CAAC;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,aAAa,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAIL,aAAa,CAACK,CAAC,CAAC,GAAGL,aAAa,CAACI,WAAW,CAAC,EAAE;QACjDA,WAAW,GAAGC,CAAC;MACjB;IACF;IACA,IAAIE,IAAI,GAAGH,WAAW,IAAIP,WAAW,GAAGE,MAAM,CAAC;IAC/C,IAAIS,GAAG,GAAGR,aAAa,CAACI,WAAW,CAAC,IAAI,CAAC;IACzCJ,aAAa,CAACI,WAAW,CAAC,GAAGI,GAAG,GAAGb,iBAAiB,CAACc,SAAS,CAACN,KAAK,CAAC,GAAGJ,MAAM;IAC9E,OAAO;MACLQ,IAAI,EAAEA,IAAI;MACVC,GAAG,EAAEA;IACP,CAAC;EACH;EACA,SAASP,wBAAwBA,CAAA,EAAG,UAAU;IAC5C;IACA;IACAD,aAAa,GAAG,EAAE;IAClB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,WAAW,EAAES,CAAC,EAAE,EAAE;MACpCL,aAAa,CAACK,CAAC,CAAC,GAAG,CAAC;IACtB;EACF;EACA,SAASK,KAAKA,CAACC,MAAM,CAAC,mBAAmB,UAAU;IACjDf,WAAW,GAAGe,MAAM,CAACf,WAAW;IAChCC,WAAW,GAAGc,MAAM,CAACd,WAAW;IAChCE,MAAM,GAAGY,MAAM,CAACZ,MAAM;IACtBE,wBAAwB,CAAC,CAAC;EAC5B;EACAC,cAAc,CAACQ,KAAK,GAAGA,KAAK;EAC5B,OAAOR,cAAc;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module"}