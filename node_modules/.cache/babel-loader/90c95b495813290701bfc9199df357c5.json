{"ast":null,"code":"import { Base64 } from 'js-base64';\nimport { cloneDeep } from 'lodash';\nimport { ToolMode, isAnnotationReadonly, isQA, isTemplatePreview } from '../utils/tool-mode';\nimport { fetchResultByUrl, getLocale } from '../utils';\nimport { Language } from '../utils/constants';\nvar ToolFileType = /*#__PURE__*/function (ToolFileType) {\n  ToolFileType[\"LABEL_RESULT\"] = \"LABEL_RESULT\";\n  ToolFileType[\"QA_RESULT\"] = \"QA_RESULT\";\n  ToolFileType[\"TEMP_LABEL_RESULT\"] = \"LABEL_TEMP_RESULT\";\n  ToolFileType[\"TEMP_QA_RESULT\"] = \"QA_TEMP_RESULT\";\n  ToolFileType[\"STAT_RESULT\"] = \"STAT_RESULT\";\n  ToolFileType[\"AUDIT_RESULT\"] = \"AUDIT_RESULT\";\n  ToolFileType[\"UNKNOWN\"] = \"UNKNOWN\";\n  return ToolFileType;\n}(ToolFileType || {}); // unknown\nvar FileType = /*#__PURE__*/function (FileType) {\n  FileType[\"TEXT\"] = \"text/plain\";\n  return FileType;\n}(FileType || {});\nconst AUDIT_DIRECTORY = 'audit';\nconst ErrMsg = {\n  RESULT_LOAD_ERROR: {\n    [Language.EN_US]: 'Failed to load annotation result. Submit is denied. Please refresh page and try again.',\n    [Language.ZH_CN]: '标注结果加载失败，禁止提交数据，请刷新后重试。',\n    [Language.JA_JP]: 'アノテーション結果の読み込みに失敗しました。提出は拒否されました。ページを更新して、もう一度お試しください。',\n    [Language.KO_KR]: '주석 결과를 로드하지 못했습니다. 제출이 거부되었습니다. 페이지를 새로고침하고 다시 시도하십시오.'\n  },\n  LOAD_CONTENT_NOT_DEFINED: {\n    [Language.EN_US]: 'No loadContent function defined.',\n    [Language.ZH_CN]: '未定义 loadContent 方法。',\n    [Language.JA_JP]: 'loadContent 関数が定義されていません。',\n    [Language.KO_KR]: 'loadContent 함수가 정의되지 않았습니다.'\n  },\n  SAVE_CONTENT_NOT_DEFINED: {\n    [Language.EN_US]: 'No saveContent function defined.',\n    [Language.ZH_CN]: '未定义 saveContent 方法。',\n    [Language.JA_JP]: 'saveContent 関数が定義されていません。',\n    [Language.KO_KR]: 'saveContent 함수가 정의되지 않았습니다.'\n  }\n};\nexport default class JobProxy {\n  get resultId() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.result`;\n  }\n  get reviewId() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.review`;\n  }\n  get resultFileName() {\n    return `${this.resultId}.json`;\n  }\n  get reviewFileName() {\n    return `${this.reviewId}.json`;\n  }\n  get auditFileName() {\n    return `${this.auditId}.json`;\n  }\n  get resultStatFileName() {\n    return `${this.resultId}.stat.json`;\n  }\n  get reviewStatFileName() {\n    if (this.toolMode === ToolMode.AUDIT) {\n      // for audit task, no job id provieded, so use audit id instead\n      return `${this.auditId}.stat.json`;\n    }\n    return `${this.reviewId}.stat.json`;\n  }\n  get fileDirectory() {\n    if (this.toolMode === ToolMode.AUDIT) {\n      // for audit task, no job id provieded, so use a constant\n      return AUDIT_DIRECTORY;\n    }\n    return this.jobId;\n  }\n  constructor({\n    locale,\n    toolName,\n    toolMode,\n    projectId,\n    flowId,\n    jobId,\n    taskId,\n    recordId,\n    auditId,\n    reviewUrl,\n    reviewFrom,\n    flowData,\n    templateConfig,\n    saveContent,\n    loadContent\n  }) {\n    this.locale = void 0;\n    this.toolName = void 0;\n    this.toolMode = ToolMode.TEMPLATE_PREVIEW;\n    this.projectId = '';\n    this.flowId = '';\n    this.jobId = '';\n    this.taskId = '';\n    this.recordId = '';\n    this.auditId = '';\n    this.reviewUrl = '';\n    this.reviewFrom = void 0;\n    this.reviewFromLoadError = false;\n    this.templateConfig = void 0;\n    this.flowData = void 0;\n    this.saveContent = void 0;\n    this.loadContent = void 0;\n    /**\n     * save file\n     * @param file\n     * @param toolFileType\n     */\n    this.saveFile = (file, toolFileType = ToolFileType.UNKNOWN) => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = async () => {\n        const base64Str = reader.result;\n        const url = await this.save(base64Str, file.type, `${Date.now()}.${file.name}`, toolFileType);\n        if (url) {\n          resolve(url);\n        } else {\n          reject();\n        }\n      };\n      reader.onerror = e => reject(e);\n    });\n    // set locale\n    this.locale = getLocale(locale);\n    // annotation type, unique key for the processor\n    this.toolName = toolName;\n    this.setMode(toolMode);\n    this.setJobInfo(projectId, flowId, jobId, taskId, recordId);\n    this.setAuditId(auditId);\n    this.setReviewUrl(reviewUrl);\n    this.reviewFrom = reviewFrom;\n    this.flowData = JSON.stringify(flowData);\n    this.templateConfig = cloneDeep(templateConfig);\n\n    // saveContent & loadContent is provided by the platform\n    // if no these two functions, load & save reviews should be implemented by each tool self\n    this.saveContent = saveContent;\n    this.loadContent = loadContent;\n  }\n  setMode(toolMode) {\n    if (Object.values(ToolMode).includes(toolMode)) {\n      this.toolMode = toolMode;\n    } else {\n      // default is a template preview job\n      this.toolMode = ToolMode.TEMPLATE_PREVIEW;\n    }\n  }\n  setJobInfo(projectId, flowId, jobId, taskId, recordId) {\n    this.projectId = projectId || '';\n    this.flowId = flowId || '';\n    this.jobId = jobId || '';\n    this.taskId = taskId || '';\n    this.recordId = recordId || '';\n  }\n  setAuditId(auditId) {\n    this.auditId = auditId || `${this.jobId}.${this.recordId}.audit`;\n  }\n  setReviewUrl(reviewUrl) {\n    this.reviewUrl = reviewUrl || '';\n  }\n\n  /**\n   * load data by loadContent\n   * @param filename\n   * @param directory\n   */\n  async load(filename, directory = this.fileDirectory) {\n    if (!this.loadContent || {}.toString.call(this.loadContent) !== '[object Function]') {\n      throw new Error(ErrMsg.LOAD_CONTENT_NOT_DEFINED[this.locale]);\n    }\n    let data;\n    try {\n      const res = await this.loadContent(filename, directory);\n      data = JSON.parse(res);\n    } catch (e) {\n      // load error\n    }\n    return data;\n  }\n\n  /**\n   * save data by saveContent\n   * @param base64\n   * @param filetype\n   * @param filename\n   * @param toolFileType\n   */\n  async save(base64, filetype, filename, toolFileType = ToolFileType.UNKNOWN) {\n    if (!this.saveContent || {}.toString.call(this.saveContent) !== '[object Function]') {\n      throw new Error(ErrMsg.SAVE_CONTENT_NOT_DEFINED[this.locale]);\n    }\n    let type = toolFileType;\n    if (isTemplatePreview(this.toolMode)) {\n      // for template preview mode, all save func should be unknown type\n      type = ToolFileType.UNKNOWN;\n    }\n    return this.saveContent(base64, filetype, filename, this.fileDirectory, this.jobId, this.projectId, this.recordId, type, this.flowId);\n  }\n\n  /**\n   * load temp save annotation result\n   */\n  async loadSavedResult() {\n    if (isAnnotationReadonly(this.toolMode)) {\n      // not load temp saved annotation when is readonly\n      return undefined;\n    }\n    return this.load(this.resultFileName);\n  }\n\n  /**\n   * load annotation result from last task\n   */\n  async loadReviewFrom() {\n    this.reviewFromLoadError = false;\n    let result;\n    if (typeof this.reviewFrom === 'object') {\n      result = this.reviewFrom;\n    } else if (typeof this.reviewFrom === 'string' && this.reviewFrom !== '') {\n      if (this.reviewFrom.startsWith('http')) {\n        try {\n          result = await fetchResultByUrl(this.reviewFrom);\n        } catch (e) {\n          this.reviewFromLoadError = true;\n          throw e;\n        }\n      } else {\n        result = JSON.parse(this.reviewFrom);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * simply to load annotation result\n   */\n  async loadResult() {\n    // get temp saved annotations\n    let result = await this.loadSavedResult();\n\n    // get result from review_from\n    if (!result) {\n      result = await this.loadReviewFrom();\n    }\n    return result;\n  }\n\n  /**\n   * load temp saved reviews\n   */\n  async loadSavedReviews() {\n    if (!isQA(this.toolMode)) {\n      // not load temp saved reviews when is not a qa job\n      return undefined;\n    }\n    return this.load(this.reviewFileName);\n  }\n\n  /**\n   * load reviews from last task by link\n   * @param reviewUrl\n   */\n  async loadReviewsFromReview(reviewUrl) {\n    let reviews;\n    if (this.toolMode !== ToolMode.AUDIT) {\n      try {\n        reviews = await fetchResultByUrl(reviewUrl);\n      } catch (e) {\n        // get from review url error\n      }\n    }\n    return reviews;\n  }\n\n  /**\n   * load audit reviews\n   */\n  async loadReviewsFromAudit() {\n    return this.load(this.auditFileName, AUDIT_DIRECTORY);\n  }\n\n  /**\n   * simply to load reviews\n   * @param reviewUrl\n   */\n  async loadReviews(reviewUrl) {\n    // get temp saved reviews\n    let reviews = await this.loadSavedReviews();\n    const url = reviewUrl || this.reviewUrl;\n    if (!reviews && url) {\n      // get from review url first\n      reviews = await this.loadReviewsFromReview(url);\n    }\n    if (!reviews) {\n      // then get from audit if necessary\n      reviews = await this.loadReviewsFromAudit();\n    }\n    return reviews;\n  }\n\n  /**\n   * save annotation result\n   * @param data\n   * @param isSubmit\n   */\n  async saveResult(data, isSubmit = false) {\n    if (this.reviewFromLoadError) {\n      throw new Error(ErrMsg.RESULT_LOAD_ERROR[this.locale]);\n    }\n    const base64 = Base64.encode(JSON.stringify(data));\n    const filename = `${isSubmit ? `R.${new Date().getTime()}.` : ''}${this.resultFileName}`;\n    const toolFileType = isSubmit ? ToolFileType.LABEL_RESULT : ToolFileType.TEMP_LABEL_RESULT;\n    return this.save(base64, FileType.TEXT, filename, toolFileType);\n  }\n\n  /**\n   * save reviews\n   * @param data\n   * @param isSubmit\n   */\n  async saveReviews(data, isSubmit = false) {\n    if (this.toolMode === ToolMode.AUDIT) {\n      return this.saveAudit(data);\n    }\n    const base64 = Base64.encode(JSON.stringify(data));\n    const toolFileType = isSubmit ? ToolFileType.QA_RESULT : ToolFileType.TEMP_QA_RESULT;\n    return this.save(base64, FileType.TEXT, this.reviewFileName, toolFileType);\n  }\n\n  /**\n   * save audit reviews\n   * @param data\n   */\n  async saveAudit(data) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    return this.save(base64, FileType.TEXT, this.auditFileName, ToolFileType.AUDIT_RESULT);\n  }\n\n  /**\n   * save annotation statistics\n   * @param data\n   */\n  async saveResultStat(data) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    return this.save(base64, FileType.TEXT, this.resultStatFileName, ToolFileType.STAT_RESULT);\n  }\n\n  /**\n   * save review statistics (including statistics for audit task)\n   * @param data\n   */\n  async saveReviewStat(data) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    return this.save(base64, FileType.TEXT, this.reviewStatFileName, ToolFileType.STAT_RESULT);\n  }\n}","map":{"version":3,"names":["Base64","cloneDeep","ToolMode","isAnnotationReadonly","isQA","isTemplatePreview","fetchResultByUrl","getLocale","Language","ToolFileType","FileType","AUDIT_DIRECTORY","ErrMsg","RESULT_LOAD_ERROR","EN_US","ZH_CN","JA_JP","KO_KR","LOAD_CONTENT_NOT_DEFINED","SAVE_CONTENT_NOT_DEFINED","JobProxy","resultId","jobId","taskId","recordId","reviewId","resultFileName","reviewFileName","auditFileName","auditId","resultStatFileName","reviewStatFileName","toolMode","AUDIT","fileDirectory","constructor","locale","toolName","projectId","flowId","reviewUrl","reviewFrom","flowData","templateConfig","saveContent","loadContent","TEMPLATE_PREVIEW","reviewFromLoadError","saveFile","file","toolFileType","UNKNOWN","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","base64Str","result","url","save","type","Date","now","name","onerror","e","setMode","setJobInfo","setAuditId","setReviewUrl","JSON","stringify","Object","values","includes","load","filename","directory","toString","call","Error","data","res","parse","base64","filetype","loadSavedResult","undefined","loadReviewFrom","startsWith","loadResult","loadSavedReviews","loadReviewsFromReview","reviews","loadReviewsFromAudit","loadReviews","saveResult","isSubmit","encode","getTime","LABEL_RESULT","TEMP_LABEL_RESULT","TEXT","saveReviews","saveAudit","QA_RESULT","TEMP_QA_RESULT","AUDIT_RESULT","saveResultStat","STAT_RESULT","saveReviewStat"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/libs/JobProxy.ts"],"sourcesContent":["import { Base64 } from 'js-base64';\nimport { cloneDeep } from 'lodash';\nimport { AnnotationType } from '../types';\nimport { ToolMode, isAnnotationReadonly, isQA, isTemplatePreview } from '../utils/tool-mode';\nimport { fetchResultByUrl, getLocale } from '../utils';\nimport { Language } from '../utils/constants';\n\ninterface JobProxyParams {\n  locale?: string;\n  toolName: AnnotationType;\n  toolMode?: string;\n  projectId?: string;\n  flowId?: string;\n  jobId?: string;\n  taskId?: string;\n  recordId?: string;\n  auditId?: string;\n  reviewUrl?: string;\n  reviewFrom?: any;\n  flowData?: any;\n  templateConfig: any;\n  saveContent?: (binary: string, filetype: string, filename: string, directory: string, jobId: string, projectId: string, recordId: string, toolFileType: ToolFileType, flowId: string) => Promise<string>;\n  loadContent?: (filename: string, directory: string) => Promise<string>;\n}\n\nenum ToolFileType {\n  LABEL_RESULT = 'LABEL_RESULT', // annotation result\n  QA_RESULT = 'QA_RESULT', // review result\n  TEMP_LABEL_RESULT = 'LABEL_TEMP_RESULT', // temp saved annotation result\n  TEMP_QA_RESULT = 'QA_TEMP_RESULT', // temp saved review result\n  STAT_RESULT = 'STAT_RESULT', // statistics result\n  AUDIT_RESULT = 'AUDIT_RESULT', // audit result\n  UNKNOWN = 'UNKNOWN', // unknown\n}\n\nenum FileType {\n  TEXT = 'text/plain',\n}\n\nconst AUDIT_DIRECTORY = 'audit';\nconst ErrMsg = {\n  RESULT_LOAD_ERROR: {\n    [Language.EN_US]: 'Failed to load annotation result. Submit is denied. Please refresh page and try again.',\n    [Language.ZH_CN]: '标注结果加载失败，禁止提交数据，请刷新后重试。',\n    [Language.JA_JP]: 'アノテーション結果の読み込みに失敗しました。提出は拒否されました。ページを更新して、もう一度お試しください。',\n    [Language.KO_KR]: '주석 결과를 로드하지 못했습니다. 제출이 거부되었습니다. 페이지를 새로고침하고 다시 시도하십시오.',\n  },\n  LOAD_CONTENT_NOT_DEFINED: {\n    [Language.EN_US]: 'No loadContent function defined.',\n    [Language.ZH_CN]: '未定义 loadContent 方法。',\n    [Language.JA_JP]: 'loadContent 関数が定義されていません。',\n    [Language.KO_KR]: 'loadContent 함수가 정의되지 않았습니다.',\n  },\n  SAVE_CONTENT_NOT_DEFINED: {\n    [Language.EN_US]: 'No saveContent function defined.',\n    [Language.ZH_CN]: '未定义 saveContent 方法。',\n    [Language.JA_JP]: 'saveContent 関数が定義されていません。',\n    [Language.KO_KR]: 'saveContent 함수가 정의되지 않았습니다.',\n  },\n};\n\nexport default class JobProxy {\n  locale: Language;\n\n  toolName: AnnotationType;\n\n  toolMode = ToolMode.TEMPLATE_PREVIEW;\n\n  projectId = '';\n\n  flowId = '';\n\n  jobId = '';\n\n  taskId = '';\n\n  recordId = '';\n\n  auditId = '';\n\n  reviewUrl = '';\n\n  reviewFrom: any;\n\n  reviewFromLoadError = false;\n\n  templateConfig: any;\n\n  flowData?: string;\n\n  saveContent?: (binary: string, filetype: string, filename: string, directory: string, jobId: string, projectId: string, recordId: string, toolFileType: ToolFileType, flowId: string) => Promise<string>;\n\n  loadContent?: (filename: string, directory: string) => Promise<string>;\n\n  get resultId() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.result`;\n  }\n\n  get reviewId() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.review`;\n  }\n\n  get resultFileName() {\n    return `${this.resultId}.json`;\n  }\n\n  get reviewFileName() {\n    return `${this.reviewId}.json`;\n  }\n\n  get auditFileName() {\n    return `${this.auditId}.json`;\n  }\n\n  get resultStatFileName() {\n    return `${this.resultId}.stat.json`;\n  }\n\n  get reviewStatFileName() {\n    if (this.toolMode === ToolMode.AUDIT) {\n      // for audit task, no job id provieded, so use audit id instead\n      return `${this.auditId}.stat.json`;\n    }\n    return `${this.reviewId}.stat.json`;\n  }\n\n  get fileDirectory() {\n    if (this.toolMode === ToolMode.AUDIT) {\n      // for audit task, no job id provieded, so use a constant\n      return AUDIT_DIRECTORY;\n    }\n    return this.jobId;\n  }\n\n  constructor({\n    locale,\n    toolName,\n    toolMode,\n    projectId,\n    flowId,\n    jobId,\n    taskId,\n    recordId,\n    auditId,\n    reviewUrl,\n    reviewFrom,\n    flowData,\n    templateConfig,\n    saveContent,\n    loadContent,\n  }: JobProxyParams) {\n    // set locale\n    this.locale = getLocale(locale);\n    // annotation type, unique key for the processor\n    this.toolName = toolName;\n\n    this.setMode(toolMode);\n    this.setJobInfo(projectId, flowId, jobId, taskId, recordId);\n    this.setAuditId(auditId);\n    this.setReviewUrl(reviewUrl);\n    this.reviewFrom = reviewFrom;\n    this.flowData = JSON.stringify(flowData);\n    this.templateConfig = cloneDeep(templateConfig);\n\n    // saveContent & loadContent is provided by the platform\n    // if no these two functions, load & save reviews should be implemented by each tool self\n    this.saveContent = saveContent;\n    this.loadContent = loadContent;\n  }\n\n  setMode(toolMode?: string) {\n    if (Object.values(ToolMode).includes(toolMode as ToolMode)) {\n      this.toolMode = toolMode as ToolMode;\n    } else {\n      // default is a template preview job\n      this.toolMode = ToolMode.TEMPLATE_PREVIEW;\n    }\n  }\n\n  setJobInfo(projectId?: string, flowId?: string, jobId?: string, taskId?: string, recordId?: string) {\n    this.projectId = projectId || '';\n    this.flowId = flowId || '';\n    this.jobId = jobId || '';\n    this.taskId = taskId || '';\n    this.recordId = recordId || '';\n  }\n\n  setAuditId(auditId?: string) {\n    this.auditId = auditId || `${this.jobId}.${this.recordId}.audit`;\n  }\n\n  setReviewUrl(reviewUrl?: string) {\n    this.reviewUrl = reviewUrl || '';\n  }\n\n  /**\n   * load data by loadContent\n   * @param filename\n   * @param directory\n   */\n  private async load(filename: string, directory = this.fileDirectory) {\n    if (!this.loadContent || {}.toString.call(this.loadContent) !== '[object Function]') {\n      throw new Error(ErrMsg.LOAD_CONTENT_NOT_DEFINED[this.locale]);\n    }\n\n    let data;\n    try {\n      const res = await this.loadContent(filename, directory);\n      data = JSON.parse(res);\n    } catch (e) {\n      // load error\n    }\n    return data;\n  }\n\n  /**\n   * save data by saveContent\n   * @param base64\n   * @param filetype\n   * @param filename\n   * @param toolFileType\n   */\n  private async save(base64: string, filetype: string, filename: string, toolFileType = ToolFileType.UNKNOWN) {\n    if (!this.saveContent || {}.toString.call(this.saveContent) !== '[object Function]') {\n      throw new Error(ErrMsg.SAVE_CONTENT_NOT_DEFINED[this.locale]);\n    }\n\n    let type = toolFileType;\n    if (isTemplatePreview(this.toolMode)) {\n      // for template preview mode, all save func should be unknown type\n      type = ToolFileType.UNKNOWN;\n    }\n    return this.saveContent(\n      base64,\n      filetype,\n      filename,\n      this.fileDirectory,\n      this.jobId,\n      this.projectId,\n      this.recordId,\n      type,\n      this.flowId,\n    );\n  }\n\n  /**\n   * load temp save annotation result\n   */\n  async loadSavedResult() {\n    if (isAnnotationReadonly(this.toolMode)) {\n      // not load temp saved annotation when is readonly\n      return undefined;\n    }\n    return this.load(this.resultFileName);\n  }\n\n  /**\n   * load annotation result from last task\n   */\n  async loadReviewFrom() {\n    this.reviewFromLoadError = false;\n    let result;\n    if (typeof this.reviewFrom === 'object') {\n      result = this.reviewFrom;\n    } else if (typeof this.reviewFrom === 'string' && this.reviewFrom !== '') {\n      if (this.reviewFrom.startsWith('http')) {\n        try {\n          result = await fetchResultByUrl(this.reviewFrom);\n        } catch (e) {\n          this.reviewFromLoadError = true;\n          throw e;\n        }\n      } else {\n        result = JSON.parse(this.reviewFrom);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * simply to load annotation result\n   */\n  async loadResult() {\n    // get temp saved annotations\n    let result = await this.loadSavedResult();\n\n    // get result from review_from\n    if (!result) {\n      result = await this.loadReviewFrom();\n    }\n\n    return result;\n  }\n\n  /**\n   * load temp saved reviews\n   */\n  async loadSavedReviews() {\n    if (!isQA(this.toolMode)) {\n      // not load temp saved reviews when is not a qa job\n      return undefined;\n    }\n    return this.load(this.reviewFileName);\n  }\n\n  /**\n   * load reviews from last task by link\n   * @param reviewUrl\n   */\n  async loadReviewsFromReview(reviewUrl: string) {\n    let reviews;\n    if (this.toolMode !== ToolMode.AUDIT) {\n      try {\n        reviews = await fetchResultByUrl(reviewUrl);\n      } catch (e) {\n        // get from review url error\n      }\n    }\n    return reviews;\n  }\n\n  /**\n   * load audit reviews\n   */\n  async loadReviewsFromAudit() {\n    return this.load(this.auditFileName, AUDIT_DIRECTORY);\n  }\n\n  /**\n   * simply to load reviews\n   * @param reviewUrl\n   */\n  async loadReviews(reviewUrl?: string) {\n    // get temp saved reviews\n    let reviews = await this.loadSavedReviews();\n    const url = reviewUrl || this.reviewUrl;\n    if (!reviews && url) {\n      // get from review url first\n      reviews = await this.loadReviewsFromReview(url);\n    }\n    if (!reviews) {\n      // then get from audit if necessary\n      reviews = await this.loadReviewsFromAudit();\n    }\n    return reviews;\n  }\n\n  /**\n   * save annotation result\n   * @param data\n   * @param isSubmit\n   */\n  async saveResult(data: unknown, isSubmit = false) {\n    if (this.reviewFromLoadError) {\n      throw new Error(ErrMsg.RESULT_LOAD_ERROR[this.locale]);\n    }\n    const base64 = Base64.encode(JSON.stringify(data));\n    const filename = `${isSubmit ? `R.${new Date().getTime()}.` : ''}${this.resultFileName}`;\n    const toolFileType = isSubmit ? ToolFileType.LABEL_RESULT : ToolFileType.TEMP_LABEL_RESULT;\n    return this.save(base64, FileType.TEXT, filename, toolFileType);\n  }\n\n  /**\n   * save reviews\n   * @param data\n   * @param isSubmit\n   */\n  async saveReviews(data: unknown, isSubmit = false) {\n    if (this.toolMode === ToolMode.AUDIT) {\n      return this.saveAudit(data);\n    }\n    const base64 = Base64.encode(JSON.stringify(data));\n    const toolFileType = isSubmit ? ToolFileType.QA_RESULT : ToolFileType.TEMP_QA_RESULT;\n    return this.save(base64, FileType.TEXT, this.reviewFileName, toolFileType);\n  }\n\n  /**\n   * save audit reviews\n   * @param data\n   */\n  async saveAudit(data: unknown) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    return this.save(base64, FileType.TEXT, this.auditFileName, ToolFileType.AUDIT_RESULT);\n  }\n\n  /**\n   * save annotation statistics\n   * @param data\n   */\n  async saveResultStat(data: unknown) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    return this.save(base64, FileType.TEXT, this.resultStatFileName, ToolFileType.STAT_RESULT);\n  }\n\n  /**\n   * save review statistics (including statistics for audit task)\n   * @param data\n   */\n  async saveReviewStat(data: unknown) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    return this.save(base64, FileType.TEXT, this.reviewStatFileName, ToolFileType.STAT_RESULT);\n  }\n\n  /**\n   * save file\n   * @param file\n   * @param toolFileType\n   */\n  saveFile = (file: File, toolFileType = ToolFileType.UNKNOWN) => new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = async () => {\n      const base64Str = reader.result as string;\n      const url = await this.save(base64Str, file.type, `${Date.now()}.${file.name}`, toolFileType);\n      if (url) {\n        resolve(url);\n      } else {\n        reject();\n      }\n    };\n    reader.onerror = (e) => reject(e);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}