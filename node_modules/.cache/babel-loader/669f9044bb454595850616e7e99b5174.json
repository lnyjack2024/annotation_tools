{"ast":null,"code":"import _applyDecoratedDescriptor from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nvar _class;\nimport { computed, makeAutoObservable, toJS } from 'mobx';\nimport { isEqual } from 'lodash';\nimport { ReviewResult, ValidationType, UpdateType } from '../types';\nimport { TOOL_MODE, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport i18n from '../locales';\n;\n;\n/**\n * reviews stores\n */\nlet ReviewsStore = (_class = class ReviewsStore {\n  /**\n   * selected review\n   */\n  get selectedReview() {\n    const {\n      selectedInstanceId\n    } = this.rootStore.instance;\n    const review = selectedInstanceId ? this.getReview(selectedInstanceId) : undefined;\n    return review ? toJS(review) : undefined;\n  }\n  get reviewsMap() {\n    const map = {};\n    this.reviews.forEach(review => {\n      map[review.instanceId] = review;\n    });\n    return map;\n  }\n\n  /**\n   * warnings\n   */\n  get warnings() {\n    const qaWarnings = this.reviews.filter(review => review.result === ReviewResult.REJECT).map(review => {\n      var _review$type;\n      return {\n        id: review.instanceId,\n        message: (_review$type = review.type) === null || _review$type === void 0 ? void 0 : _review$type.join(','),\n        comment: review.comment,\n        warningType: ValidationType.QUALITY,\n        channelIndex: review.channelIndex,\n        isMissing: review.isMissing,\n        start: review.start,\n        end: review.end\n      };\n    });\n    return this.customWarnings.length || qaWarnings.length ? [...this.customWarnings, ...qaWarnings] : [];\n  }\n\n  /**\n   * is select instance enable\n   */\n  get isSelectInstanceEnable() {\n    const {\n      selectedInstanceId\n    } = this.rootStore.instance;\n    const {\n      selectedReview\n    } = this;\n    return !selectedInstanceId || (selectedReview === null || selectedReview === void 0 ? void 0 : selectedReview.result) === ReviewResult.REJECT && (selectedReview === null || selectedReview === void 0 ? void 0 : selectedReview.type) && selectedReview.type.length > 0 || (selectedReview === null || selectedReview === void 0 ? void 0 : selectedReview.result) !== ReviewResult.REJECT;\n  }\n  constructor(rootStore) {\n    this.rootStore = void 0;\n    /**\n     * current tool mode\n     */\n    this.toolMode = TOOL_MODE.LABELING;\n    /**\n     * canvas draw\n     */\n    this.drawMode = true;\n    /**\n     * issue types\n     */\n    this.issueTypes = [];\n    /**\n     * all reviews\n     */\n    this.reviews = [];\n    /**\n     * custom warnings\n     */\n    this.customWarnings = [];\n    /**\n     * has custom error\n     */\n    this.hasCustomError = false;\n    /**\n     * blockSubmitErrors\n     */\n    this.blockSubmitErrors = [];\n    /**\n     * errors\n     */\n    this.errors = void 0;\n    /**\n     * updated reviews\n     */\n    this.updatedReviews = {};\n    // qc audition region\n    this.auditionRegion = void 0;\n    /**\n     * delete review\n     * @param instanceId\n     */\n    this.deleteReviewById = (id, type = UpdateType.MODIFY) => {\n      if (this.isEnabled) {\n        const index = this.reviews.findIndex(review => review.instanceId === id);\n        if (index >= 0) {\n          this.reviews.splice(index, 1);\n          const changeReviews = {\n            [id]: undefined\n          };\n          const previewReviews = {\n            [id]: toJS(this.reviews[index])\n          };\n          if (type === UpdateType.MODIFY) {\n            this.changeUndo(changeReviews, previewReviews);\n          }\n        }\n      }\n    };\n    /**\n     * delete review instane\n     * @param instanceId\n     */\n    this.deleteReviewAndInstance = id => {\n      if (this.isEnabled) {\n        const before = [];\n        const after = [];\n        const index = this.reviews.findIndex(review => review.instanceId === id);\n        if (index >= 0) {\n          before.push({\n            type: 'review',\n            status: {\n              [id]: toJS(this.reviews[index])\n            }\n          });\n          after.push({\n            type: 'review',\n            status: {\n              [id]: undefined\n            }\n          });\n          this.reviews.splice(index, 1);\n        }\n        const instance = this.rootStore.instance.instances[id];\n        if (instance) {\n          before.push({\n            type: 'instance',\n            status: {\n              [id]: toJS(instance)\n            }\n          });\n          after.push({\n            type: 'instance',\n            status: {\n              [id]: null\n            }\n          });\n          this.rootStore.instance.setUpdatedInstances({\n            [id]: null\n          }, UpdateType.REMOVE_MISSED);\n        }\n        this.rootStore.undo.saveStatus(before, after);\n      }\n    };\n    /**\n     * change selected review\n     * @param id review id\n     */\n    this.handleChangeReview = review => {\n      this.setReview(review);\n    };\n    /**\n     * update reviews\n     * @param reviews reviews\n     */\n    this.updateReviews = reviews => {\n      Object.keys(reviews).forEach(id => {\n        const review = reviews[id];\n        if (review) {\n          this.setReview(review, UpdateType.UNDOREDO);\n        } else {\n          this.deleteReviewById(id, UpdateType.UNDOREDO);\n        }\n      });\n    };\n    this.shortcutAction = result => {\n      var _this$selectedReview, _this$selectedReview2;\n      if (this.isEnabled && !this.drawMode && this.rootStore.instance.selectedInstanceId && ((_this$selectedReview = this.selectedReview) === null || _this$selectedReview === void 0 ? void 0 : _this$selectedReview.result) !== result && ((_this$selectedReview2 = this.selectedReview) === null || _this$selectedReview2 === void 0 ? void 0 : _this$selectedReview2.isMissing) !== true) {\n        this.setReview({\n          instanceId: this.rootStore.instance.selectedInstanceId,\n          result\n        });\n      }\n    };\n    this.setAuditionRegion = region => {\n      const review = this.reviewsMap[(region === null || region === void 0 ? void 0 : region.id) || ''];\n      if (review) {\n        this.setReview({\n          ...review,\n          start: region === null || region === void 0 ? void 0 : region.start,\n          end: region === null || region === void 0 ? void 0 : region.end\n        });\n      } else {\n        this.auditionRegion = region;\n      }\n    };\n    this.auditionToReview = () => {\n      if (this.auditionRegion && this.isSelectInstanceEnable && !this.rootStore.global.annotateDisabled) {\n        const {\n          id,\n          start,\n          end,\n          channelIndex\n        } = this.auditionRegion;\n        this.rootStore.instance.setSelectedInstance(id);\n        const review = {\n          instanceId: id,\n          result: ReviewResult.REJECT,\n          channelIndex,\n          isMissing: true,\n          start,\n          end\n        };\n        this.reviews.push({\n          ...review\n        });\n        this.changeUndo({\n          [id]: review\n        }, {\n          [id]: undefined\n        });\n      }\n      this.setAuditionRegion();\n    };\n    makeAutoObservable(this, {\n      rootStore: false,\n      issueTypes: false,\n      auditionRegion: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * review result types\n   */\n  get reviewResultTypes() {\n    return this.toolMode === TOOL_MODE.AUDIT ? [ReviewResult.APPROVE, ReviewResult.REJECT, ReviewResult.SUSPEND] : [ReviewResult.APPROVE, ReviewResult.REJECT];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes && typeof issueTypes === 'string' ? issueTypes.split(',').map(i => i.trim()).filter(i => !!i) : [];\n    if (this.isEnabled) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(list) {\n    if (list && Array.isArray(list)) {\n      const reviews = [];\n      const updatedReviews = {};\n      list.filter(v => !this.isEnabled && v.result === ReviewResult.REJECT || this.isEnabled).forEach(({\n        instanceId,\n        result,\n        type,\n        comment,\n        channelIndex,\n        isMissing,\n        start,\n        end\n      }) => {\n        if (instanceId !== undefined && result !== undefined) {\n          reviews.push({\n            instanceId,\n            result,\n            type,\n            comment,\n            channelIndex,\n            isMissing,\n            start,\n            end\n          });\n          updatedReviews[instanceId] = {\n            instanceId,\n            result,\n            type,\n            comment,\n            channelIndex,\n            isMissing,\n            start,\n            end\n          };\n        }\n      });\n      this.reviews = reviews;\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    return this.reviews.map(review => ({\n      ...review\n    }));\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(instanceId) {\n    return this.reviews.find(review => review.instanceId === instanceId);\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(reviewData, handleType = UpdateType.MODIFY) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const {\n      instanceId,\n      result,\n      type,\n      comment,\n      start,\n      end\n    } = reviewData;\n    const index = this.reviews.findIndex(review => review.instanceId === instanceId);\n    const previewReviews = {};\n    const changeReviews = {};\n    if (index >= 0) {\n      const reviewItem = this.reviews[index];\n      if (isEqual(reviewItem, reviewData) === false) {\n        previewReviews[instanceId] = toJS(reviewItem);\n        reviewItem.result = result;\n        reviewItem.type = type;\n        reviewItem.comment = comment;\n        if (start !== undefined && end !== undefined) {\n          reviewItem.start = start;\n          reviewItem.end = end;\n        }\n        changeReviews[instanceId] = {\n          ...reviewData\n        };\n      }\n    } else {\n      this.reviews.push({\n        ...reviewData\n      });\n      previewReviews[instanceId] = undefined;\n      changeReviews[instanceId] = {\n        ...reviewData\n      };\n    }\n    if (Object.keys(changeReviews).length > 0 && handleType === UpdateType.MODIFY) {\n      this.changeUndo(changeReviews, previewReviews);\n    }\n  }\n  changeUndo(changeReviews, previewReviews) {\n    const before = [];\n    const after = [];\n    before.push({\n      type: 'review',\n      status: previewReviews\n    });\n    after.push({\n      type: 'review',\n      status: changeReviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n  setScriptResult(result) {\n    if (result) {\n      const {\n        results,\n        hasCustomError\n      } = result;\n      this.customWarnings = results;\n      this.hasCustomError = hasCustomError;\n    } else {\n      this.customWarnings = [];\n      this.hasCustomError = false;\n    }\n    if (this.hasCustomError) {\n      this.errors = {\n        [ValidationType.CUSTOM]: this.hasCustomError ? i18n.translate('VALIDATION_CUSTOM_ERROR') : ''\n      };\n    }\n    this.blockSubmitErrors = this.customWarnings.filter(warning => warning.warningType === ValidationType.CUSTOM && warning.blockSubmit === true);\n    const updatedReviews = {};\n    this.reviews.forEach(({\n      instanceId,\n      result: rResult,\n      type,\n      comment\n    }) => {\n      if (instanceId !== undefined && result !== undefined) {\n        updatedReviews[instanceId] = {\n          instanceId,\n          result: rResult,\n          type,\n          comment\n        };\n      }\n    });\n    this.blockSubmitErrors.forEach(({\n      id,\n      message\n    }) => {\n      updatedReviews[id] = {\n        instanceId: id,\n        result: ReviewResult.REJECT,\n        comment: message,\n        validationType: ValidationType.CUSTOM\n      };\n    });\n  }\n\n  /**\n   * switch draw mode\n   * @param mode\n   */\n  setDrawMode(mode) {\n    if (this.isEditable) {\n      this.drawMode = mode;\n    }\n  }\n}, _applyDecoratedDescriptor(_class.prototype, \"selectedReview\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"selectedReview\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reviewsMap\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"reviewsMap\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"warnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"warnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isSelectInstanceEnable\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isSelectInstanceEnable\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEnabled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEnabled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEditable\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEditable\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reviewResultTypes\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"reviewResultTypes\"), _class.prototype), _class);\nexport default ReviewsStore;","map":{"version":3,"names":["computed","makeAutoObservable","toJS","isEqual","ReviewResult","ValidationType","UpdateType","TOOL_MODE","isReviewEditable","isAnnotationReadonly","i18n","ReviewsStore","_class","selectedReview","selectedInstanceId","rootStore","instance","review","getReview","undefined","reviewsMap","map","reviews","forEach","instanceId","warnings","qaWarnings","filter","result","REJECT","_review$type","id","message","type","join","comment","warningType","QUALITY","channelIndex","isMissing","start","end","customWarnings","length","isSelectInstanceEnable","constructor","toolMode","LABELING","drawMode","issueTypes","hasCustomError","blockSubmitErrors","errors","updatedReviews","auditionRegion","deleteReviewById","MODIFY","isEnabled","index","findIndex","splice","changeReviews","previewReviews","changeUndo","deleteReviewAndInstance","before","after","push","status","instances","setUpdatedInstances","REMOVE_MISSED","undo","saveStatus","handleChangeReview","setReview","updateReviews","Object","keys","UNDOREDO","shortcutAction","_this$selectedReview","_this$selectedReview2","setAuditionRegion","region","auditionToReview","global","annotateDisabled","setSelectedInstance","autoBind","isEditable","reviewResultTypes","AUDIT","APPROVE","SUSPEND","init","split","i","trim","setInitialData","list","Array","isArray","v","getReviewsForSave","find","reviewData","handleType","reviewItem","setScriptResult","results","CUSTOM","translate","warning","blockSubmit","rResult","validationType","setDrawMode","mode","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/store/ReviewsStore.ts"],"sourcesContent":["import { computed, makeAutoObservable, toJS } from 'mobx';\nimport { isEqual } from 'lodash';\nimport { RootStoreType } from './RootStore';\nimport { Status } from './UndoStore';\nimport { Region } from '../components/Wave/types';\nimport { Review, ReviewResult, ValidationType, UpdateType } from '../types';\nimport { IWarning } from '../../common/tabs-menu/Validator';\nimport { TOOL_MODE, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport i18n from '../locales';\n\nexport interface PointReviewResult {[id: number]: ReviewResult};\ninterface ShapeReviewResult {[id: string]: ReviewResult};\nexport interface GroupReviewsMap {\n  [groupName: string]: PointReviewResult | ShapeReviewResult;\n}\nexport interface InstanceReviewsMap {\n  [instanceId: string]: GroupReviewsMap\n}\n\nexport interface FrameReviewsMap {\n  [frameIndex: number]: InstanceReviewsMap\n}\n\n/**\n * reviews stores\n */\nclass ReviewsStore {\n  rootStore: RootStoreType;\n\n  /**\n   * current tool mode\n   */\n  toolMode: TOOL_MODE = TOOL_MODE.LABELING;\n\n  /**\n   * canvas draw\n   */\n  drawMode = true;\n\n  /**\n   * issue types\n   */\n  issueTypes: string[] = [];\n\n  /**\n   * all reviews\n   */\n  reviews: Review[] = [];\n\n  /**\n   * custom warnings\n   */\n  customWarnings: IWarning[] = [];\n\n  /**\n   * has custom error\n   */\n  hasCustomError = false;\n\n  /**\n   * blockSubmitErrors\n   */\n  blockSubmitErrors: IWarning[] = [];\n\n  /**\n   * errors\n   */\n  errors?: {\n    [type: string]: string;\n  };\n\n  /**\n   * updated reviews\n   */\n  updatedReviews: { [id: string]: Review | undefined } = {};\n\n  // qc audition region\n  auditionRegion?: Region;\n\n  /**\n   * selected review\n   */\n  @computed get selectedReview() {\n    const { selectedInstanceId } = this.rootStore.instance;\n    const review = selectedInstanceId ? this.getReview(selectedInstanceId) : undefined;\n    return review ? toJS(review) : undefined;\n  }\n\n  @computed get reviewsMap() {\n    const map: {[id: string]: Review} = {};\n    this.reviews.forEach((review) => {\n      map[review.instanceId] = review;\n    });\n    return map;\n  }\n\n  /**\n   * warnings\n   */\n  @computed get warnings() {\n    const qaWarnings = this.reviews\n      .filter((review) => review.result === ReviewResult.REJECT).map((review) => ({\n        id: review.instanceId,\n        message: review.type?.join(','),\n        comment: review.comment,\n        warningType: ValidationType.QUALITY,\n        channelIndex: review.channelIndex,\n        isMissing: review.isMissing,\n        start: review.start,\n        end: review.end,\n      }));\n    return (this.customWarnings.length || qaWarnings.length) ? [...this.customWarnings, ...qaWarnings] : [];\n  }\n\n  /**\n   * is select instance enable\n   */\n  @computed get isSelectInstanceEnable() {\n    const { selectedInstanceId } = this.rootStore.instance;\n    const { selectedReview } = this;\n    return !selectedInstanceId || (\n      (selectedReview?.result === ReviewResult.REJECT && selectedReview?.type && selectedReview.type.length > 0) ||\n      selectedReview?.result !== ReviewResult.REJECT\n    );\n  }\n\n  constructor(rootStore: RootStoreType) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      issueTypes: false,\n      auditionRegion: false,\n    }, {\n      autoBind: true,\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  @computed get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  @computed get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * review result types\n   */\n  @computed get reviewResultTypes() {\n    return this.toolMode === TOOL_MODE.AUDIT ? [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n      ReviewResult.SUSPEND,\n    ] : [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n    ];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode: TOOL_MODE, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes && typeof issueTypes === 'string' ?\n      issueTypes.split(',').map((i) => i.trim()).filter((i) => !!i) :\n      [];\n    if (this.isEnabled) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(list: any) {\n    if (list && Array.isArray(list)) {\n      const reviews: Review[] = [];\n      const updatedReviews: { [id: string]: Review } = {};\n      list\n        .filter((v) => (!this.isEnabled && v.result === ReviewResult.REJECT) || this.isEnabled)\n        .forEach(({ instanceId, result, type, comment, channelIndex, isMissing, start, end }: Review) => {\n          if (instanceId !== undefined && result !== undefined) {\n            reviews.push({ instanceId, result, type, comment, channelIndex, isMissing, start, end });\n            updatedReviews[instanceId] = { instanceId, result, type, comment, channelIndex, isMissing, start, end };\n          }\n        });\n      this.reviews = reviews;\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    return this.reviews.map((review) => ({ ...review }));\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(instanceId: string) {\n    return this.reviews.find((review) => review.instanceId === instanceId);\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(reviewData: Review, handleType = UpdateType.MODIFY) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const { instanceId, result, type, comment, start, end } = reviewData;\n    const index = this.reviews.findIndex((review) => review.instanceId === instanceId);\n    const previewReviews: {[id:string]: Review | undefined} = {};\n    const changeReviews: {[id:string]: Review | undefined} = {};\n    if (index >= 0) {\n      const reviewItem = this.reviews[index];\n      if (isEqual(reviewItem, reviewData) === false) {\n        previewReviews[instanceId] = toJS(reviewItem);\n        reviewItem.result = result;\n        reviewItem.type = type;\n        reviewItem.comment = comment;\n        if (start !== undefined && end !== undefined) {\n          reviewItem.start = start;\n          reviewItem.end = end;\n        }\n        changeReviews[instanceId] = { ...reviewData };\n      }\n    } else {\n      this.reviews.push({ ...reviewData });\n      previewReviews[instanceId] = undefined;\n      changeReviews[instanceId] = { ...reviewData };\n    }\n    if (Object.keys(changeReviews).length > 0 && handleType === UpdateType.MODIFY) {\n      this.changeUndo(changeReviews, previewReviews);\n    }\n  }\n\n  /**\n   * delete review\n   * @param instanceId\n   */\n  deleteReviewById = (id: string, type = UpdateType.MODIFY) => {\n    if (this.isEnabled) {\n      const index = this.reviews.findIndex((review) => review.instanceId === id);\n      if (index >= 0) {\n        this.reviews.splice(index, 1);\n        const changeReviews = { [id]: undefined };\n        const previewReviews = { [id]: toJS(this.reviews[index]) };\n        if (type === UpdateType.MODIFY) {\n          this.changeUndo(changeReviews, previewReviews);\n        }\n      }\n    }\n  };\n\n  /**\n   * delete review instane\n   * @param instanceId\n   */\n  deleteReviewAndInstance = (id: string) => {\n    if (this.isEnabled) {\n      const before: Status[] = [];\n      const after: Status[] = [];\n      const index = this.reviews.findIndex((review) => review.instanceId === id);\n      if (index >= 0) {\n        before.push({ type: 'review',\n          status: { [id]: toJS(this.reviews[index]) }\n        });\n        after.push({ type: 'review',\n          status: { [id]: undefined }\n        });\n        this.reviews.splice(index, 1);\n      }\n      const instance = this.rootStore.instance.instances[id];\n      if (instance) {\n        before.push({ type: 'instance',\n          status: { [id]: toJS(instance) }\n        });\n        after.push({ type: 'instance',\n          status: { [id]: null }\n        });\n        this.rootStore.instance.setUpdatedInstances({ [id]: null }, UpdateType.REMOVE_MISSED);\n      }\n      this.rootStore.undo.saveStatus(before, after);\n    }\n  };\n\n  changeUndo(\n    changeReviews: {[id:string]: Review | undefined},\n    previewReviews: {[id:string]: Review | undefined}\n  ) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    before.push({ type: 'review',\n      status: previewReviews\n    });\n    after.push({ type: 'review',\n      status: changeReviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n\n  setScriptResult(result?: {results: IWarning[]; hasCustomError: boolean}) {\n    if (result) {\n      const { results, hasCustomError } = result as {results: IWarning[]; hasCustomError: boolean};\n      this.customWarnings = results;\n      this.hasCustomError = hasCustomError;\n    } else {\n      this.customWarnings = [];\n      this.hasCustomError = false;\n    }\n    if (this.hasCustomError) {\n      this.errors = {\n        [ValidationType.CUSTOM]: this.hasCustomError ? i18n.translate('VALIDATION_CUSTOM_ERROR') : '',\n      };\n    }\n    this.blockSubmitErrors = this.customWarnings.filter((warning) => warning.warningType === ValidationType.CUSTOM && warning.blockSubmit === true);\n    const updatedReviews: { [id: string]: Review } = {};\n    this.reviews.forEach(({ instanceId, result: rResult, type, comment }: Review) => {\n      if (instanceId !== undefined && result !== undefined) {\n        updatedReviews[instanceId] = { instanceId, result: rResult, type, comment };\n      }\n    });\n    this.blockSubmitErrors.forEach(({ id, message }) => {\n      updatedReviews[id] = { instanceId: id, result: ReviewResult.REJECT, comment: message, validationType: ValidationType.CUSTOM };\n    });\n  }\n\n  /**\n   * switch draw mode\n   * @param mode\n   */\n  setDrawMode(mode: boolean) {\n    if (this.isEditable) {\n      this.drawMode = mode;\n    }\n  }\n\n  /**\n   * change selected review\n   * @param id review id\n   */\n  handleChangeReview = (review: Review) => {\n    this.setReview(review);\n  };\n\n  /**\n   * update reviews\n   * @param reviews reviews\n   */\n  updateReviews = (reviews: { [id:string]: Review | undefined }) => {\n    Object.keys(reviews).forEach((id) => {\n      const review = reviews[id];\n      if (review) {\n        this.setReview(review, UpdateType.UNDOREDO);\n      } else {\n        this.deleteReviewById(id, UpdateType.UNDOREDO);\n      }\n    });\n  };\n\n  shortcutAction = (result: ReviewResult) => {\n    if (\n      this.isEnabled &&\n      !this.drawMode &&\n      this.rootStore.instance.selectedInstanceId &&\n      this.selectedReview?.result !== result &&\n      this.selectedReview?.isMissing !== true\n    ) {\n      this.setReview({\n        instanceId: this.rootStore.instance.selectedInstanceId,\n        result,\n      });\n    }\n  };\n\n  setAuditionRegion = (region?: Region) => {\n    const review = this.reviewsMap[region?.id || ''];\n    if (review) {\n      this.setReview({\n        ...review,\n        start: region?.start,\n        end: region?.end,\n      });\n    } else {\n      this.auditionRegion = region;\n    }\n  };\n\n  auditionToReview = () => {\n    if (this.auditionRegion && this.isSelectInstanceEnable && !this.rootStore.global.annotateDisabled) {\n      const { id, start, end, channelIndex } = this.auditionRegion;\n      this.rootStore.instance.setSelectedInstance(id);\n      const review = {\n        instanceId: id,\n        result: ReviewResult.REJECT,\n        channelIndex,\n        isMissing: true,\n        start,\n        end,\n      };\n      this.reviews.push({ ...review });\n      this.changeUndo({ [id]: review }, { [id]: undefined });\n    }\n    this.setAuditionRegion();\n  };\n}\n\nexport default ReviewsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}