{"ast":null,"code":"/*!\n * @pixi/canvas-particle-container - v6.2.2\n * Compiled Wed, 26 Jan 2022 16:23:27 UTC\n *\n * @pixi/canvas-particle-container is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { ParticleContainer } from '@pixi/particle-container';\n\n/**\n * Renders the object using the Canvas renderer\n * @method renderCanvas\n * @memberof PIXI.ParticleContainer#\n * @private\n * @param {PIXI.CanvasRenderer} renderer - a reference to the canvas renderer\n */\nParticleContainer.prototype.renderCanvas = function renderCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n    return;\n  }\n  var context = renderer.context;\n  var transform = this.worldTransform;\n  var isRotated = true;\n  var positionX = 0;\n  var positionY = 0;\n  var finalWidth = 0;\n  var finalHeight = 0;\n  renderer.setBlendMode(this.blendMode);\n  context.globalAlpha = this.worldAlpha;\n  this.displayObjectUpdateTransform();\n  for (var i = 0; i < this.children.length; ++i) {\n    var child = this.children[i];\n    if (!child.visible) {\n      continue;\n    }\n    if (!child._texture.valid) {\n      continue;\n    }\n    var frame = child._texture.frame;\n    context.globalAlpha = this.worldAlpha * child.alpha;\n    if (child.rotation % (Math.PI * 2) === 0) {\n      // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call\n      if (isRotated) {\n        renderer.setContextTransform(transform, false, 1);\n        isRotated = false;\n      }\n      positionX = child.anchor.x * (-frame.width * child.scale.x) + child.position.x + 0.5;\n      positionY = child.anchor.y * (-frame.height * child.scale.y) + child.position.y + 0.5;\n      finalWidth = frame.width * child.scale.x;\n      finalHeight = frame.height * child.scale.y;\n    } else {\n      if (!isRotated) {\n        isRotated = true;\n      }\n      child.displayObjectUpdateTransform();\n      var childTransform = child.worldTransform;\n      renderer.setContextTransform(childTransform, this.roundPixels, 1);\n      positionX = child.anchor.x * -frame.width + 0.5;\n      positionY = child.anchor.y * -frame.height + 0.5;\n      finalWidth = frame.width;\n      finalHeight = frame.height;\n    }\n    var resolution = child._texture.baseTexture.resolution;\n    context.drawImage(child._texture.baseTexture.getDrawableSource(), frame.x * resolution, frame.y * resolution, frame.width * resolution, frame.height * resolution, positionX * renderer.resolution, positionY * renderer.resolution, finalWidth * renderer.resolution, finalHeight * renderer.resolution);\n  }\n};","map":{"version":3,"sources":["../../src/ParticleContainer.ts"],"names":[],"mappings":"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","sourcesContent":["import { ParticleContainer } from '@pixi/particle-container';\nimport type { Sprite } from '@pixi/sprite';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\n\n/**\n * Renders the object using the Canvas renderer\n * @method renderCanvas\n * @memberof PIXI.ParticleContainer#\n * @private\n * @param {PIXI.CanvasRenderer} renderer - a reference to the canvas renderer\n */\nParticleContainer.prototype.renderCanvas = function renderCanvas(renderer: CanvasRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n    {\n        return;\n    }\n\n    const context = renderer.context;\n    const transform = this.worldTransform;\n    let isRotated = true;\n\n    let positionX = 0;\n    let positionY = 0;\n\n    let finalWidth = 0;\n    let finalHeight = 0;\n\n    renderer.setBlendMode(this.blendMode);\n\n    context.globalAlpha = this.worldAlpha;\n\n    this.displayObjectUpdateTransform();\n\n    for (let i = 0; i < this.children.length; ++i)\n    {\n        const child = this.children[i] as Sprite;\n\n        if (!child.visible)\n        {\n            continue;\n        }\n\n        if (!child._texture.valid)\n        {\n            continue;\n        }\n\n        const frame = child._texture.frame;\n\n        context.globalAlpha = this.worldAlpha * child.alpha;\n\n        if (child.rotation % (Math.PI * 2) === 0)\n        {\n            // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call\n            if (isRotated)\n            {\n                renderer.setContextTransform(transform, false, 1);\n                isRotated = false;\n            }\n\n            positionX = ((child.anchor.x) * (-frame.width * child.scale.x)) + child.position.x + 0.5;\n            positionY = ((child.anchor.y) * (-frame.height * child.scale.y)) + child.position.y + 0.5;\n\n            finalWidth = frame.width * child.scale.x;\n            finalHeight = frame.height * child.scale.y;\n        }\n        else\n        {\n            if (!isRotated)\n            {\n                isRotated = true;\n            }\n\n            child.displayObjectUpdateTransform();\n\n            const childTransform = child.worldTransform;\n\n            renderer.setContextTransform(childTransform, this.roundPixels, 1);\n\n            positionX = ((child.anchor.x) * (-frame.width)) + 0.5;\n            positionY = ((child.anchor.y) * (-frame.height)) + 0.5;\n\n            finalWidth = frame.width;\n            finalHeight = frame.height;\n        }\n\n        const resolution = child._texture.baseTexture.resolution;\n\n        context.drawImage(\n            child._texture.baseTexture.getDrawableSource(),\n            frame.x * resolution,\n            frame.y * resolution,\n            frame.width * resolution,\n            frame.height * resolution,\n            positionX * renderer.resolution,\n            positionY * renderer.resolution,\n            finalWidth * renderer.resolution,\n            finalHeight * renderer.resolution\n        );\n    }\n};\n"]},"metadata":{},"sourceType":"module"}