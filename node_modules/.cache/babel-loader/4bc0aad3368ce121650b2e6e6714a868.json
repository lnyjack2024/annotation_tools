{"ast":null,"code":"import { EditorState } from 'draft-js';\nimport { CODE_BLOCK_TYPE } from '../constants';\nimport setLanguage from '../modifiers/set-language';\nexport default function insertFragmentCallback(updatedEditorState, editorState) {\n  const lastContent = editorState.getCurrentContent();\n  const lastSelection = editorState.getSelection();\n  const lastSelectionKey = lastSelection.getStartKey();\n  const lastBlock = lastContent.getBlockForKey(lastSelectionKey);\n  if ((lastBlock === null || lastBlock === void 0 ? void 0 : lastBlock.getType()) === CODE_BLOCK_TYPE) {\n    const language = lastBlock.getData().get('language');\n    if (language) {\n      const selection = updatedEditorState.getSelection();\n      const state = setLanguage(updatedEditorState, lastSelectionKey, language);\n      return EditorState.forceSelection(state, selection);\n    }\n  }\n  return updatedEditorState;\n}","map":{"version":3,"names":["EditorState","CODE_BLOCK_TYPE","setLanguage","insertFragmentCallback","updatedEditorState","editorState","lastContent","getCurrentContent","lastSelection","getSelection","lastSelectionKey","getStartKey","lastBlock","getBlockForKey","getType","language","getData","get","selection","state","forceSelection"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/llm/input/callbacks/insert-fragment-callback.ts"],"sourcesContent":["import { EditorState } from 'draft-js';\nimport { CODE_BLOCK_TYPE } from '../constants';\nimport setLanguage from '../modifiers/set-language';\n\nexport default function insertFragmentCallback(updatedEditorState: EditorState, editorState: EditorState) {\n  const lastContent = editorState.getCurrentContent();\n  const lastSelection = editorState.getSelection();\n  const lastSelectionKey = lastSelection.getStartKey();\n  const lastBlock = lastContent.getBlockForKey(lastSelectionKey);\n  if (lastBlock?.getType() === CODE_BLOCK_TYPE) {\n    const language = lastBlock.getData().get('language');\n    if (language) {\n      const selection = updatedEditorState.getSelection();\n      const state = setLanguage(updatedEditorState, lastSelectionKey, language);\n      return EditorState.forceSelection(state, selection);\n    }\n  }\n  return updatedEditorState;\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,UAAU;AACtC,SAASC,eAAe,QAAQ,cAAc;AAC9C,OAAOC,WAAW,MAAM,2BAA2B;AAEnD,eAAe,SAASC,sBAAsBA,CAACC,kBAA+B,EAAEC,WAAwB,EAAE;EACxG,MAAMC,WAAW,GAAGD,WAAW,CAACE,iBAAiB,CAAC,CAAC;EACnD,MAAMC,aAAa,GAAGH,WAAW,CAACI,YAAY,CAAC,CAAC;EAChD,MAAMC,gBAAgB,GAAGF,aAAa,CAACG,WAAW,CAAC,CAAC;EACpD,MAAMC,SAAS,GAAGN,WAAW,CAACO,cAAc,CAACH,gBAAgB,CAAC;EAC9D,IAAI,CAAAE,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,OAAO,CAAC,CAAC,MAAKb,eAAe,EAAE;IAC5C,MAAMc,QAAQ,GAAGH,SAAS,CAACI,OAAO,CAAC,CAAC,CAACC,GAAG,CAAC,UAAU,CAAC;IACpD,IAAIF,QAAQ,EAAE;MACZ,MAAMG,SAAS,GAAGd,kBAAkB,CAACK,YAAY,CAAC,CAAC;MACnD,MAAMU,KAAK,GAAGjB,WAAW,CAACE,kBAAkB,EAAEM,gBAAgB,EAAEK,QAAQ,CAAC;MACzE,OAAOf,WAAW,CAACoB,cAAc,CAACD,KAAK,EAAED,SAAS,CAAC;IACrD;EACF;EACA,OAAOd,kBAAkB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module"}