{"ast":null,"code":"import { Point } from 'pixi.js';\nimport Shape, { BorderStyle } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nimport { bezierSplit } from '../../../utils/math';\n/**\n * Circle shape\n * @class\n */\nexport default class Circle extends Shape {\n  /**\n   * get x\n   * @getter\n   */\n  get x() {\n    return this._x || 0;\n  }\n\n  /**\n   * set x\n   * @setter\n   */\n  set x(x) {\n    this._x = x;\n    this.normalize();\n  }\n\n  /**\n   * get y\n   * @getter\n   */\n  get y() {\n    return this._y || 0;\n  }\n\n  /**\n   * set y\n   * @setter\n   */\n  set y(y) {\n    this._y = y;\n    this.normalize();\n  }\n\n  /**\n   * get radius\n   * @getter\n   */\n  get radius() {\n    return this._radius || 0;\n  }\n\n  /**\n   * set radius\n   * @setter\n   */\n  set radius(radius) {\n    this._radius = radius;\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point) {\n    if (this._x !== point.x || this._y !== point.y) {\n      this._x = precise(point.x);\n      this._y = precise(point.y);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const shapePoints = this.getPoints();\n    const left = Math.min(...shapePoints.map(p => p.x));\n    const right = Math.max(...shapePoints.map(p => p.x));\n    const top = Math.min(...shapePoints.map(p => p.y));\n    const bottom = Math.max(...shapePoints.map(p => p.y));\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  /**\n   * shape area\n   * @getter\n   */\n  get area() {\n    return Math.PI * this.radius ** 2;\n  }\n  constructor(options) {\n    super(options);\n    this.shapeType = ShapeType.CIRCLE;\n    /**\n     * center position x\n     * @private\n     */\n    this._x = void 0;\n    /**\n    * center position y\n    * @private\n    */\n    this._y = void 0;\n    /**\n    * radius\n    * @private\n    */\n    this._radius = void 0;\n    this._controlPoint = null;\n    const {\n      x,\n      y,\n      radius\n    } = options;\n    if (x !== undefined && y !== undefined && radius !== undefined) {\n      this._x = x;\n      this._y = y;\n      this._radius = radius;\n      this.normalize();\n    }\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    const mouseMove = event => {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(point);\n      this._draw(localPoint);\n    };\n    const mouseUp = () => {\n      this.normalize();\n      this._finish();\n      document.removeEventListener('mousemove', mouseMove, false);\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n    document.addEventListener('mousemove', mouseMove, false);\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    this._drawShapeCenter();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   */\n  _drawShapeFill() {\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawCircle(this.x, this.y, Math.abs(this.radius));\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape border\n   */\n  _drawShapeLine() {\n    const bezierCurveTo = (x1, y1, x2, y2, x, y) => {\n      if (this.borderStyle === BorderStyle.DASHED) {\n        this.instance.dashBezierCurveTo(x1, y1, x2, y2, x, y);\n      } else {\n        this.instance.bezierCurveTo(x1, y1, x2, y2, x, y);\n      }\n    };\n    const kappa = 0.5522848;\n    const x = this.x - this.radius;\n    const y = this.y - this.radius;\n    const or = this.radius * kappa;\n    const xe = x + this.radius * 2; // x-end\n    const ye = y + this.radius * 2; // y-end\n    const xm = this.x; // x-middle\n    const ym = this.y; // y-middle\n\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this.instance.moveTo(x, ym);\n    bezierCurveTo(x, ym - or, xm - or, y, xm, y);\n    bezierCurveTo(xm + or, y, xe, ym - or, xe, ym);\n    bezierCurveTo(xe, ym + or, xm + or, ye, xm, ye);\n    bezierCurveTo(xm - or, ye, x, ym + or, x, ym);\n    this.instance.closePath();\n  }\n\n  /**\n   * draw shape center\n   */\n  _drawShapeCenter() {\n    const r = 4 / this.scale;\n    this.instance.beginFill(this.displayBorderColor, this.borderAlpha);\n    this.instance.drawCircle(this.x, this.y, r);\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape by the position\n   * @private\n   * @param point mouse position\n   */\n  _draw(point) {\n    const p = this._keepPointInBounds(point);\n    if (this._x === undefined || this._y === undefined) {\n      this._x = p.x;\n      this._y = p.y;\n    } else {\n      this._radius = Math.sqrt((p.x - this._x) ** 2 + (p.y - this._y) ** 2);\n    }\n    this._keepInBounds();\n    this.drawShape();\n  }\n\n  /**\n   * keep shap in bounds when creating & resizing\n   */\n  _keepInBounds() {\n    if (this.bounds && this._x !== undefined && this._y !== undefined) {\n      const {\n        left,\n        top,\n        right,\n        bottom\n      } = this.shapeBounds;\n      const {\n        left: bLeft,\n        top: bTop,\n        right: bRight,\n        bottom: bBottom\n      } = this.bounds;\n      if (left < bLeft) {\n        this._radius = this._x;\n      }\n      if (top < bTop && this._y < this.radius) {\n        this._radius = this._y;\n      }\n      if (right > bRight && bRight - this._x < this.radius) {\n        this._radius = bRight - this._x;\n      }\n      if (bottom > bBottom && bBottom - this._y < this.radius) {\n        this._radius = bBottom - this._y;\n      }\n    }\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n    this.getPoints().forEach((point, index) => {\n      if (this.selected) {\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: index % 2 === 0 ? Cursor.EW_RESIZE : Cursor.NS_RESIZE,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize()\n          });\n        }\n\n        // update\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].remove();\n      }\n    });\n  }\n\n  /**\n   * update ellipse x, y, half width, half height by dragging point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  _updateByPointPosition(index, x, y) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const points = this.getPoints();\n    const offsetX = position.x - points[index].x;\n    const offsetY = position.y - points[index].y;\n    if (this._x !== undefined && this._y !== undefined && this._radius !== undefined) {\n      switch (index) {\n        case 0:\n          this._radius -= offsetX;\n          break;\n        case 1:\n          this._radius -= offsetY;\n          break;\n        case 2:\n          this._radius += offsetX;\n          break;\n        case 3:\n          this._radius += offsetY;\n          break;\n        default:\n      }\n      this._keepInBounds();\n      this.drawShape();\n      this._resizing();\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      x: this.x,\n      y: this.y,\n      radius: this.radius\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const kappa = 0.5522848;\n    const x = this.x - this.radius;\n    const y = this.y - this.radius;\n    const or = this.radius * kappa;\n    const xe = x + this.radius * 2; // x-end\n    const ye = y + this.radius * 2; // y-end\n    const xm = this.x; // x-middle\n    const ym = this.y; // y-middle\n    const allPoints = [...bezierSplit(x, ym, xm, y, x, ym - or, xm - or, y, 4), ...bezierSplit(xm, y, xe, ym, xm + or, y, xe, ym - or, 4), ...bezierSplit(xe, ym, xm, ye, xe, ym + or, xm + or, ye, 4), ...bezierSplit(xm, ye, x, ym, xm - or, ye, x, ym + or, 4)];\n    return [allPoints];\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return new Point(this.x, this.y - this.radius);\n  }\n\n  /**\n   * normalize ellipse shape, remove it if necessary\n   */\n  normalize() {\n    if (this._x === undefined || this._y === undefined || !this._radius) {\n      this._remove();\n      return;\n    }\n    if (this._radius < 0) {\n      this._radius = Math.abs(this._radius);\n    }\n    this._x = precise(this._x);\n    this._y = precise(this._y);\n    this._radius = precise(this._radius);\n    this.drawShape();\n  }\n\n  /**\n   * get 4 vertex points\n   */\n  getPoints() {\n    return [{\n      x: this.x - this.radius,\n      y: this.y\n    }, {\n      x: this.x,\n      y: this.y - this.radius\n    }, {\n      x: this.x + this.radius,\n      y: this.y\n    }, {\n      x: this.x,\n      y: this.y + this.radius\n    }];\n  }\n}","map":{"version":3,"names":["Point","Shape","BorderStyle","ShapeType","ControlPoint","precise","Cursor","bezierSplit","Circle","x","_x","normalize","y","_y","radius","_radius","position","point","drawShape","shapeBounds","shapePoints","getPoints","left","Math","min","map","p","right","max","top","bottom","area","PI","constructor","options","shapeType","CIRCLE","_controlPoint","undefined","create","mouseMove","event","_mapScreenToStagePosition","clientX","clientY","localPoint","_mapStageToLocalPosition","_draw","mouseUp","_finish","document","removeEventListener","addEventListener","_finished","instance","clear","_drawShapeFill","_drawShapeLine","_drawShapeCenter","drawShapeLabel","attachControlPoints","beginFill","color","alpha","drawCircle","abs","endFill","bezierCurveTo","x1","y1","x2","y2","borderStyle","DASHED","dashBezierCurveTo","kappa","or","xe","ye","xm","ym","lineStyle","borderWidth","scale","displayBorderColor","borderAlpha","moveTo","closePath","r","_keepPointInBounds","sqrt","_keepInBounds","bounds","bLeft","bTop","bRight","bBottom","editable","removeControls","forEach","index","selected","_controls","container","controlsContainer","selectedColor","cursor","EW_RESIZE","NS_RESIZE","onPositionChange","_updateByPointPosition","onFinish","_finishResize","add","remove","points","offsetX","offsetY","_resizing","resizing","_changed","getData","getAreaAsGeoJSON","allPoints","getLabelPosition","_remove"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Circle.ts"],"sourcesContent":["import { Point } from 'pixi.js';\nimport { Pair } from 'polygon-clipping';\nimport Shape, { ShapeOptions, BorderStyle } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nimport { bezierSplit } from '../../../utils/math';\n\nexport interface CircleData {\n  x: number;\n  y: number;\n  radius: number;\n}\n\nexport interface CircleOptions extends ShapeOptions {\n  x?: number;\n  y?: number;\n  radius?: number;\n}\n\n/**\n * Circle shape\n * @class\n */\nexport default class Circle extends Shape<CircleData> {\n  shapeType = ShapeType.CIRCLE;\n\n  /**\n   * center position x\n   * @private\n   */\n  private _x: number | undefined;\n\n  /**\n  * center position y\n  * @private\n  */\n  private _y: number | undefined;\n\n  /**\n  * radius\n  * @private\n  */\n  private _radius: number | undefined;\n\n  private _controlPoint: { x: number; y: number } | null = null;\n\n  /**\n   * get x\n   * @getter\n   */\n  get x() {\n    return this._x || 0;\n  }\n\n  /**\n   * set x\n   * @setter\n   */\n  set x(x: number) {\n    this._x = x;\n    this.normalize();\n  }\n\n  /**\n   * get y\n   * @getter\n   */\n  get y() {\n    return this._y || 0;\n  }\n\n  /**\n   * set y\n   * @setter\n   */\n  set y(y: number) {\n    this._y = y;\n    this.normalize();\n  }\n\n  /**\n   * get radius\n   * @getter\n   */\n  get radius() {\n    return this._radius || 0;\n  }\n\n  /**\n   * set radius\n   * @setter\n   */\n  set radius(radius: number) {\n    this._radius = radius;\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point: Point) {\n    if (this._x !== point.x || this._y !== point.y) {\n      this._x = precise(point.x);\n      this._y = precise(point.y);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const shapePoints = this.getPoints();\n    const left = Math.min(...shapePoints.map((p) => p.x));\n    const right = Math.max(...shapePoints.map((p) => p.x));\n    const top = Math.min(...shapePoints.map((p) => p.y));\n    const bottom = Math.max(...shapePoints.map((p) => p.y));\n    return { left, top, right, bottom };\n  }\n\n  /**\n   * shape area\n   * @getter\n   */\n  get area() {\n    return Math.PI * this.radius ** 2;\n  }\n\n  constructor(options: CircleOptions) {\n    super(options);\n\n    const { x, y, radius } = options;\n    if (x !== undefined && y !== undefined && radius !== undefined) {\n      this._x = x;\n      this._y = y;\n      this._radius = radius;\n      this.normalize();\n    }\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    const mouseMove = (event: MouseEvent) => {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(point);\n      this._draw(localPoint);\n    };\n    const mouseUp = () => {\n      this.normalize();\n      this._finish();\n\n      document.removeEventListener('mousemove', mouseMove, false);\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n\n    document.addEventListener('mousemove', mouseMove, false);\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    this._drawShapeCenter();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   */\n  private _drawShapeFill() {\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawCircle(this.x, this.y, Math.abs(this.radius));\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape border\n   */\n  private _drawShapeLine() {\n    const bezierCurveTo = (x1: number, y1: number, x2: number, y2: number, x: number, y: number) => {\n      if (this.borderStyle === BorderStyle.DASHED) {\n        this.instance.dashBezierCurveTo(x1, y1, x2, y2, x, y);\n      } else {\n        this.instance.bezierCurveTo(x1, y1, x2, y2, x, y);\n      }\n    };\n\n    const kappa = 0.5522848;\n    const x = this.x - this.radius;\n    const y = this.y - this.radius;\n    const or = this.radius * kappa;\n    const xe = x + this.radius * 2; // x-end\n    const ye = y + this.radius * 2; // y-end\n    const xm = this.x; // x-middle\n    const ym = this.y; // y-middle\n\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this.instance.moveTo(x, ym);\n    bezierCurveTo(x, ym - or, xm - or, y, xm, y);\n    bezierCurveTo(xm + or, y, xe, ym - or, xe, ym);\n    bezierCurveTo(xe, ym + or, xm + or, ye, xm, ye);\n    bezierCurveTo(xm - or, ye, x, ym + or, x, ym);\n    this.instance.closePath();\n  }\n\n  /**\n   * draw shape center\n   */\n  private _drawShapeCenter() {\n    const r = 4 / this.scale;\n    this.instance.beginFill(this.displayBorderColor, this.borderAlpha);\n    this.instance.drawCircle(this.x, this.y, r);\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape by the position\n   * @private\n   * @param point mouse position\n   */\n  private _draw(point: Point) {\n    const p = this._keepPointInBounds(point);\n    if (this._x === undefined || this._y === undefined) {\n      this._x = p.x;\n      this._y = p.y;\n    } else {\n      this._radius = Math.sqrt((p.x - this._x) ** 2 + (p.y - this._y) ** 2);\n    }\n    this._keepInBounds();\n    this.drawShape();\n  }\n\n  /**\n   * keep shap in bounds when creating & resizing\n   */\n  private _keepInBounds() {\n    if (this.bounds && this._x !== undefined && this._y !== undefined) {\n      const { left, top, right, bottom } = this.shapeBounds;\n      const { left: bLeft, top: bTop, right: bRight, bottom: bBottom } = this.bounds;\n      if (left < bLeft) {\n        this._radius = this._x;\n      }\n      if (top < bTop && this._y < this.radius) {\n        this._radius = this._y;\n      }\n      if (right > bRight && bRight - this._x < this.radius) {\n        this._radius = bRight - this._x;\n      }\n      if (bottom > bBottom && bBottom - this._y < this.radius) {\n        this._radius = bBottom - this._y;\n      }\n    }\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    this.getPoints().forEach((point, index) => {\n      if (this.selected) {\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: index % 2 === 0 ? Cursor.EW_RESIZE : Cursor.NS_RESIZE,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n          });\n        }\n\n        // update\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].remove();\n      }\n    });\n  }\n\n  /**\n   * update ellipse x, y, half width, half height by dragging point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  private _updateByPointPosition(index: number, x: number, y: number) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const points = this.getPoints();\n    const offsetX = position.x - points[index].x;\n    const offsetY = position.y - points[index].y;\n    if (this._x !== undefined && this._y !== undefined && this._radius !== undefined) {\n      switch (index) {\n        case 0:\n          this._radius -= offsetX;\n          break;\n        case 1:\n          this._radius -= offsetY;\n          break;\n        case 2:\n          this._radius += offsetX;\n          break;\n        case 3:\n          this._radius += offsetY;\n          break;\n        default:\n      }\n      this._keepInBounds();\n      this.drawShape();\n      this._resizing();\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  private _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      x: this.x,\n      y: this.y,\n      radius: this.radius,\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const kappa = 0.5522848;\n    const x = this.x - this.radius;\n    const y = this.y - this.radius;\n    const or = this.radius * kappa;\n    const xe = x + this.radius * 2; // x-end\n    const ye = y + this.radius * 2; // y-end\n    const xm = this.x; // x-middle\n    const ym = this.y; // y-middle\n    const allPoints = [\n      ...bezierSplit(x, ym, xm, y, x, ym - or, xm - or, y, 4),\n      ...bezierSplit(xm, y, xe, ym, xm + or, y, xe, ym - or, 4),\n      ...bezierSplit(xe, ym, xm, ye, xe, ym + or, xm + or, ye, 4),\n      ...bezierSplit(xm, ye, x, ym, xm - or, ye, x, ym + or, 4),\n    ] as Pair[];\n    return [allPoints];\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return new Point(this.x, this.y - this.radius);\n  }\n\n  /**\n   * normalize ellipse shape, remove it if necessary\n   */\n  normalize() {\n    if (this._x === undefined || this._y === undefined || !this._radius) {\n      this._remove();\n      return;\n    }\n\n    if (this._radius < 0) {\n      this._radius = Math.abs(this._radius);\n    }\n\n    this._x = precise(this._x);\n    this._y = precise(this._y);\n    this._radius = precise(this._radius);\n\n    this.drawShape();\n  }\n\n  /**\n   * get 4 vertex points\n   */\n  getPoints() {\n    return [\n      { x: this.x - this.radius, y: this.y },\n      { x: this.x, y: this.y - this.radius },\n      { x: this.x + this.radius, y: this.y },\n      { x: this.x, y: this.y + this.radius },\n    ];\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,SAAS;AAE/B,OAAOC,KAAK,IAAkBC,WAAW,QAAQ,SAAS;AAC1D,SAASC,SAAS,QAAQ,SAAS;AACnC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,SAASC,OAAO,QAAQ,SAAS;AACjC,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,WAAW,QAAQ,qBAAqB;AAcjD;AACA;AACA;AACA;AACA,eAAe,MAAMC,MAAM,SAASP,KAAK,CAAa;EAuBpD;AACF;AACA;AACA;EACE,IAAIQ,CAACA,CAAA,EAAG;IACN,OAAO,IAAI,CAACC,EAAE,IAAI,CAAC;EACrB;;EAEA;AACF;AACA;AACA;EACE,IAAID,CAACA,CAACA,CAAS,EAAE;IACf,IAAI,CAACC,EAAE,GAAGD,CAAC;IACX,IAAI,CAACE,SAAS,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;AACA;EACE,IAAIC,CAACA,CAAA,EAAG;IACN,OAAO,IAAI,CAACC,EAAE,IAAI,CAAC;EACrB;;EAEA;AACF;AACA;AACA;EACE,IAAID,CAACA,CAACA,CAAS,EAAE;IACf,IAAI,CAACC,EAAE,GAAGD,CAAC;IACX,IAAI,CAACD,SAAS,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;AACA;EACE,IAAIG,MAAMA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,OAAO,IAAI,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;EACE,IAAID,MAAMA,CAACA,MAAc,EAAE;IACzB,IAAI,CAACC,OAAO,GAAGD,MAAM;IACrB,IAAI,CAACH,SAAS,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;AACA;EACE,IAAIK,QAAQA,CAAA,EAAG;IACb,OAAO,IAAIhB,KAAK,CAAC,IAAI,CAACS,CAAC,EAAE,IAAI,CAACG,CAAC,CAAC;EAClC;;EAEA;AACF;AACA;AACA;EACE,IAAII,QAAQA,CAACC,KAAY,EAAE;IACzB,IAAI,IAAI,CAACP,EAAE,KAAKO,KAAK,CAACR,CAAC,IAAI,IAAI,CAACI,EAAE,KAAKI,KAAK,CAACL,CAAC,EAAE;MAC9C,IAAI,CAACF,EAAE,GAAGL,OAAO,CAACY,KAAK,CAACR,CAAC,CAAC;MAC1B,IAAI,CAACI,EAAE,GAAGR,OAAO,CAACY,KAAK,CAACL,CAAC,CAAC;MAC1B,IAAI,CAACM,SAAS,CAAC,CAAC;IAClB;EACF;;EAEA;AACF;AACA;AACA;EACE,IAAIC,WAAWA,CAAA,EAAG;IAChB,MAAMC,WAAW,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;IACpC,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGJ,WAAW,CAACK,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACjB,CAAC,CAAC,CAAC;IACrD,MAAMkB,KAAK,GAAGJ,IAAI,CAACK,GAAG,CAAC,GAAGR,WAAW,CAACK,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACjB,CAAC,CAAC,CAAC;IACtD,MAAMoB,GAAG,GAAGN,IAAI,CAACC,GAAG,CAAC,GAAGJ,WAAW,CAACK,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACd,CAAC,CAAC,CAAC;IACpD,MAAMkB,MAAM,GAAGP,IAAI,CAACK,GAAG,CAAC,GAAGR,WAAW,CAACK,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACd,CAAC,CAAC,CAAC;IACvD,OAAO;MAAEU,IAAI;MAAEO,GAAG;MAAEF,KAAK;MAAEG;IAAO,CAAC;EACrC;;EAEA;AACF;AACA;AACA;EACE,IAAIC,IAAIA,CAAA,EAAG;IACT,OAAOR,IAAI,CAACS,EAAE,GAAG,IAAI,CAAClB,MAAM,IAAI,CAAC;EACnC;EAEAmB,WAAWA,CAACC,OAAsB,EAAE;IAClC,KAAK,CAACA,OAAO,CAAC;IAAC,KAnHjBC,SAAS,GAAGhC,SAAS,CAACiC,MAAM;IAE5B;AACF;AACA;AACA;IAHE,KAIQ1B,EAAE;IAEV;AACF;AACA;AACA;IAHE,KAIQG,EAAE;IAEV;AACF;AACA;AACA;IAHE,KAIQE,OAAO;IAAA,KAEPsB,aAAa,GAAoC,IAAI;IAiG3D,MAAM;MAAE5B,CAAC;MAAEG,CAAC;MAAEE;IAAO,CAAC,GAAGoB,OAAO;IAChC,IAAIzB,CAAC,KAAK6B,SAAS,IAAI1B,CAAC,KAAK0B,SAAS,IAAIxB,MAAM,KAAKwB,SAAS,EAAE;MAC9D,IAAI,CAAC5B,EAAE,GAAGD,CAAC;MACX,IAAI,CAACI,EAAE,GAAGD,CAAC;MACX,IAAI,CAACG,OAAO,GAAGD,MAAM;MACrB,IAAI,CAACH,SAAS,CAAC,CAAC;IAClB;EACF;;EAEA;AACF;AACA;EACE4B,MAAMA,CAAA,EAAG;IACP,MAAMC,SAAS,GAAIC,KAAiB,IAAK;MACvC,MAAMxB,KAAK,GAAG,IAAI,CAACyB,yBAAyB,CAACD,KAAK,CAACE,OAAO,EAAEF,KAAK,CAACG,OAAO,CAAC;MAC1E,MAAMC,UAAU,GAAG,IAAI,CAACC,wBAAwB,CAAC7B,KAAK,CAAC;MACvD,IAAI,CAAC8B,KAAK,CAACF,UAAU,CAAC;IACxB,CAAC;IACD,MAAMG,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAI,CAACrC,SAAS,CAAC,CAAC;MAChB,IAAI,CAACsC,OAAO,CAAC,CAAC;MAEdC,QAAQ,CAACC,mBAAmB,CAAC,WAAW,EAAEX,SAAS,EAAE,KAAK,CAAC;MAC3DU,QAAQ,CAACC,mBAAmB,CAAC,SAAS,EAAEH,OAAO,EAAE,KAAK,CAAC;IACzD,CAAC;IAEDE,QAAQ,CAACE,gBAAgB,CAAC,WAAW,EAAEZ,SAAS,EAAE,KAAK,CAAC;IACxDU,QAAQ,CAACE,gBAAgB,CAAC,SAAS,EAAEJ,OAAO,EAAE,KAAK,CAAC;IACpD,IAAI,CAACK,SAAS,GAAG,KAAK;EACxB;;EAEA;AACF;AACA;EACEnC,SAASA,CAAA,EAAG;IACV,IAAI,CAACoC,QAAQ,CAACC,KAAK,CAAC,CAAC;IACrB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACvB,IAAI,IAAI,CAACL,SAAS,EAAE;MAClB,IAAI,CAACM,cAAc,CAAC,CAAC;MACrB,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAC5B;EACF;;EAEA;AACF;AACA;EACUJ,cAAcA,CAAA,EAAG;IACvB,IAAI,CAACF,QAAQ,CAACO,SAAS,CAAC,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,KAAK,CAAC;IAC/C,IAAI,CAACT,QAAQ,CAACU,UAAU,CAAC,IAAI,CAACvD,CAAC,EAAE,IAAI,CAACG,CAAC,EAAEW,IAAI,CAAC0C,GAAG,CAAC,IAAI,CAACnD,MAAM,CAAC,CAAC;IAC/D,IAAI,CAACwC,QAAQ,CAACY,OAAO,CAAC,CAAC;EACzB;;EAEA;AACF;AACA;EACUT,cAAcA,CAAA,EAAG;IACvB,MAAMU,aAAa,GAAGA,CAACC,EAAU,EAAEC,EAAU,EAAEC,EAAU,EAAEC,EAAU,EAAE9D,CAAS,EAAEG,CAAS,KAAK;MAC9F,IAAI,IAAI,CAAC4D,WAAW,KAAKtE,WAAW,CAACuE,MAAM,EAAE;QAC3C,IAAI,CAACnB,QAAQ,CAACoB,iBAAiB,CAACN,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE9D,CAAC,EAAEG,CAAC,CAAC;MACvD,CAAC,MAAM;QACL,IAAI,CAAC0C,QAAQ,CAACa,aAAa,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE9D,CAAC,EAAEG,CAAC,CAAC;MACnD;IACF,CAAC;IAED,MAAM+D,KAAK,GAAG,SAAS;IACvB,MAAMlE,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG,IAAI,CAACK,MAAM;IAC9B,MAAMF,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG,IAAI,CAACE,MAAM;IAC9B,MAAM8D,EAAE,GAAG,IAAI,CAAC9D,MAAM,GAAG6D,KAAK;IAC9B,MAAME,EAAE,GAAGpE,CAAC,GAAG,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC;IAChC,MAAMgE,EAAE,GAAGlE,CAAC,GAAG,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;IAChC,MAAMiE,EAAE,GAAG,IAAI,CAACtE,CAAC,CAAC,CAAC;IACnB,MAAMuE,EAAE,GAAG,IAAI,CAACpE,CAAC,CAAC,CAAC;;IAEnB,IAAI,CAAC0C,QAAQ,CAAC2B,SAAS,CAAC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAACC,WAAW,CAAC;IACjG,IAAI,CAAC/B,QAAQ,CAACgC,MAAM,CAAC7E,CAAC,EAAEuE,EAAE,CAAC;IAC3Bb,aAAa,CAAC1D,CAAC,EAAEuE,EAAE,GAAGJ,EAAE,EAAEG,EAAE,GAAGH,EAAE,EAAEhE,CAAC,EAAEmE,EAAE,EAAEnE,CAAC,CAAC;IAC5CuD,aAAa,CAACY,EAAE,GAAGH,EAAE,EAAEhE,CAAC,EAAEiE,EAAE,EAAEG,EAAE,GAAGJ,EAAE,EAAEC,EAAE,EAAEG,EAAE,CAAC;IAC9Cb,aAAa,CAACU,EAAE,EAAEG,EAAE,GAAGJ,EAAE,EAAEG,EAAE,GAAGH,EAAE,EAAEE,EAAE,EAAEC,EAAE,EAAED,EAAE,CAAC;IAC/CX,aAAa,CAACY,EAAE,GAAGH,EAAE,EAAEE,EAAE,EAAErE,CAAC,EAAEuE,EAAE,GAAGJ,EAAE,EAAEnE,CAAC,EAAEuE,EAAE,CAAC;IAC7C,IAAI,CAAC1B,QAAQ,CAACiC,SAAS,CAAC,CAAC;EAC3B;;EAEA;AACF;AACA;EACU7B,gBAAgBA,CAAA,EAAG;IACzB,MAAM8B,CAAC,GAAG,CAAC,GAAG,IAAI,CAACL,KAAK;IACxB,IAAI,CAAC7B,QAAQ,CAACO,SAAS,CAAC,IAAI,CAACuB,kBAAkB,EAAE,IAAI,CAACC,WAAW,CAAC;IAClE,IAAI,CAAC/B,QAAQ,CAACU,UAAU,CAAC,IAAI,CAACvD,CAAC,EAAE,IAAI,CAACG,CAAC,EAAE4E,CAAC,CAAC;IAC3C,IAAI,CAAClC,QAAQ,CAACY,OAAO,CAAC,CAAC;EACzB;;EAEA;AACF;AACA;AACA;AACA;EACUnB,KAAKA,CAAC9B,KAAY,EAAE;IAC1B,MAAMS,CAAC,GAAG,IAAI,CAAC+D,kBAAkB,CAACxE,KAAK,CAAC;IACxC,IAAI,IAAI,CAACP,EAAE,KAAK4B,SAAS,IAAI,IAAI,CAACzB,EAAE,KAAKyB,SAAS,EAAE;MAClD,IAAI,CAAC5B,EAAE,GAAGgB,CAAC,CAACjB,CAAC;MACb,IAAI,CAACI,EAAE,GAAGa,CAAC,CAACd,CAAC;IACf,CAAC,MAAM;MACL,IAAI,CAACG,OAAO,GAAGQ,IAAI,CAACmE,IAAI,CAAC,CAAChE,CAAC,CAACjB,CAAC,GAAG,IAAI,CAACC,EAAE,KAAK,CAAC,GAAG,CAACgB,CAAC,CAACd,CAAC,GAAG,IAAI,CAACC,EAAE,KAAK,CAAC,CAAC;IACvE;IACA,IAAI,CAAC8E,aAAa,CAAC,CAAC;IACpB,IAAI,CAACzE,SAAS,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;EACUyE,aAAaA,CAAA,EAAG;IACtB,IAAI,IAAI,CAACC,MAAM,IAAI,IAAI,CAAClF,EAAE,KAAK4B,SAAS,IAAI,IAAI,CAACzB,EAAE,KAAKyB,SAAS,EAAE;MACjE,MAAM;QAAEhB,IAAI;QAAEO,GAAG;QAAEF,KAAK;QAAEG;MAAO,CAAC,GAAG,IAAI,CAACX,WAAW;MACrD,MAAM;QAAEG,IAAI,EAAEuE,KAAK;QAAEhE,GAAG,EAAEiE,IAAI;QAAEnE,KAAK,EAAEoE,MAAM;QAAEjE,MAAM,EAAEkE;MAAQ,CAAC,GAAG,IAAI,CAACJ,MAAM;MAC9E,IAAItE,IAAI,GAAGuE,KAAK,EAAE;QAChB,IAAI,CAAC9E,OAAO,GAAG,IAAI,CAACL,EAAE;MACxB;MACA,IAAImB,GAAG,GAAGiE,IAAI,IAAI,IAAI,CAACjF,EAAE,GAAG,IAAI,CAACC,MAAM,EAAE;QACvC,IAAI,CAACC,OAAO,GAAG,IAAI,CAACF,EAAE;MACxB;MACA,IAAIc,KAAK,GAAGoE,MAAM,IAAIA,MAAM,GAAG,IAAI,CAACrF,EAAE,GAAG,IAAI,CAACI,MAAM,EAAE;QACpD,IAAI,CAACC,OAAO,GAAGgF,MAAM,GAAG,IAAI,CAACrF,EAAE;MACjC;MACA,IAAIoB,MAAM,GAAGkE,OAAO,IAAIA,OAAO,GAAG,IAAI,CAACnF,EAAE,GAAG,IAAI,CAACC,MAAM,EAAE;QACvD,IAAI,CAACC,OAAO,GAAGiF,OAAO,GAAG,IAAI,CAACnF,EAAE;MAClC;IACF;EACF;;EAEA;AACF;AACA;EACE+C,mBAAmBA,CAAA,EAAG;IACpB,IAAI,CAAC,IAAI,CAACqC,QAAQ,EAAE;MAClB,IAAI,CAACC,cAAc,CAAC,CAAC;MACrB;IACF;IAEA,IAAI,CAAC7E,SAAS,CAAC,CAAC,CAAC8E,OAAO,CAAC,CAAClF,KAAK,EAAEmF,KAAK,KAAK;MACzC,IAAI,IAAI,CAACC,QAAQ,EAAE;QACjB;QACA,IAAI,CAAC,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,EAAE;UAC1B,IAAI,CAACE,SAAS,CAACF,KAAK,CAAC,GAAG,IAAIhG,YAAY,CAAC;YACvCY,QAAQ,EAAEC,KAAK;YACfsF,SAAS,EAAE,IAAI,CAACC,iBAAiB;YACjCrB,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBrB,KAAK,EAAE,IAAI,CAAC2C,aAAa;YACzBC,MAAM,EAAEN,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG9F,MAAM,CAACqG,SAAS,GAAGrG,MAAM,CAACsG,SAAS;YAC7DC,gBAAgB,EAAEA,CAACpG,CAAC,EAAEG,CAAC,KAAK,IAAI,CAACkG,sBAAsB,CAACV,KAAK,EAAE3F,CAAC,EAAEG,CAAC,CAAC;YACpEmG,QAAQ,EAAEA,CAAA,KAAM,IAAI,CAACC,aAAa,CAAC;UACrC,CAAC,CAAC;QACJ;;QAEA;QACA,IAAI,CAACV,SAAS,CAACF,KAAK,CAAC,CAACpF,QAAQ,GAAGC,KAAK;QACtC,IAAI,CAACqF,SAAS,CAACF,KAAK,CAAC,CAACa,GAAG,CAAC,CAAC;MAC7B,CAAC,MAAM,IAAI,IAAI,CAACX,SAAS,CAACF,KAAK,CAAC,EAAE;QAChC;QACA,IAAI,CAACE,SAAS,CAACF,KAAK,CAAC,CAACc,MAAM,CAAC,CAAC;MAChC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACUJ,sBAAsBA,CAACV,KAAa,EAAE3F,CAAS,EAAEG,CAAS,EAAE;IAClE,MAAMI,QAAQ,GAAG,IAAI,CAACyE,kBAAkB,CAAC,IAAIzF,KAAK,CAACS,CAAC,EAAEG,CAAC,CAAC,CAAC;IACzD,MAAMuG,MAAM,GAAG,IAAI,CAAC9F,SAAS,CAAC,CAAC;IAC/B,MAAM+F,OAAO,GAAGpG,QAAQ,CAACP,CAAC,GAAG0G,MAAM,CAACf,KAAK,CAAC,CAAC3F,CAAC;IAC5C,MAAM4G,OAAO,GAAGrG,QAAQ,CAACJ,CAAC,GAAGuG,MAAM,CAACf,KAAK,CAAC,CAACxF,CAAC;IAC5C,IAAI,IAAI,CAACF,EAAE,KAAK4B,SAAS,IAAI,IAAI,CAACzB,EAAE,KAAKyB,SAAS,IAAI,IAAI,CAACvB,OAAO,KAAKuB,SAAS,EAAE;MAChF,QAAQ8D,KAAK;QACX,KAAK,CAAC;UACJ,IAAI,CAACrF,OAAO,IAAIqG,OAAO;UACvB;QACF,KAAK,CAAC;UACJ,IAAI,CAACrG,OAAO,IAAIsG,OAAO;UACvB;QACF,KAAK,CAAC;UACJ,IAAI,CAACtG,OAAO,IAAIqG,OAAO;UACvB;QACF,KAAK,CAAC;UACJ,IAAI,CAACrG,OAAO,IAAIsG,OAAO;UACvB;QACF;MACF;MACA,IAAI,CAAC1B,aAAa,CAAC,CAAC;MACpB,IAAI,CAACzE,SAAS,CAAC,CAAC;MAChB,IAAI,CAACoG,SAAS,CAAC,CAAC;IAClB;EACF;;EAEA;AACF;AACA;EACUN,aAAaA,CAAA,EAAG;IACtB,IAAI,CAACO,QAAQ,GAAG,KAAK;IACrB,IAAI,CAAC5G,SAAS,CAAC,CAAC;IAChB,IAAI,CAAC6G,QAAQ,CAAC,CAAC;EACjB;;EAEA;AACF;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,OAAO;MACLhH,CAAC,EAAE,IAAI,CAACA,CAAC;MACTG,CAAC,EAAE,IAAI,CAACA,CAAC;MACTE,MAAM,EAAE,IAAI,CAACA;IACf,CAAC;EACH;;EAEA;AACF;AACA;EACE4G,gBAAgBA,CAAA,EAAG;IACjB,MAAM/C,KAAK,GAAG,SAAS;IACvB,MAAMlE,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG,IAAI,CAACK,MAAM;IAC9B,MAAMF,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG,IAAI,CAACE,MAAM;IAC9B,MAAM8D,EAAE,GAAG,IAAI,CAAC9D,MAAM,GAAG6D,KAAK;IAC9B,MAAME,EAAE,GAAGpE,CAAC,GAAG,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC;IAChC,MAAMgE,EAAE,GAAGlE,CAAC,GAAG,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;IAChC,MAAMiE,EAAE,GAAG,IAAI,CAACtE,CAAC,CAAC,CAAC;IACnB,MAAMuE,EAAE,GAAG,IAAI,CAACpE,CAAC,CAAC,CAAC;IACnB,MAAM+G,SAAS,GAAG,CAChB,GAAGpH,WAAW,CAACE,CAAC,EAAEuE,EAAE,EAAED,EAAE,EAAEnE,CAAC,EAAEH,CAAC,EAAEuE,EAAE,GAAGJ,EAAE,EAAEG,EAAE,GAAGH,EAAE,EAAEhE,CAAC,EAAE,CAAC,CAAC,EACvD,GAAGL,WAAW,CAACwE,EAAE,EAAEnE,CAAC,EAAEiE,EAAE,EAAEG,EAAE,EAAED,EAAE,GAAGH,EAAE,EAAEhE,CAAC,EAAEiE,EAAE,EAAEG,EAAE,GAAGJ,EAAE,EAAE,CAAC,CAAC,EACzD,GAAGrE,WAAW,CAACsE,EAAE,EAAEG,EAAE,EAAED,EAAE,EAAED,EAAE,EAAED,EAAE,EAAEG,EAAE,GAAGJ,EAAE,EAAEG,EAAE,GAAGH,EAAE,EAAEE,EAAE,EAAE,CAAC,CAAC,EAC3D,GAAGvE,WAAW,CAACwE,EAAE,EAAED,EAAE,EAAErE,CAAC,EAAEuE,EAAE,EAAED,EAAE,GAAGH,EAAE,EAAEE,EAAE,EAAErE,CAAC,EAAEuE,EAAE,GAAGJ,EAAE,EAAE,CAAC,CAAC,CAChD;IACX,OAAO,CAAC+C,SAAS,CAAC;EACpB;;EAEA;AACF;AACA;EACEC,gBAAgBA,CAAA,EAAG;IACjB,OAAO,IAAI5H,KAAK,CAAC,IAAI,CAACS,CAAC,EAAE,IAAI,CAACG,CAAC,GAAG,IAAI,CAACE,MAAM,CAAC;EAChD;;EAEA;AACF;AACA;EACEH,SAASA,CAAA,EAAG;IACV,IAAI,IAAI,CAACD,EAAE,KAAK4B,SAAS,IAAI,IAAI,CAACzB,EAAE,KAAKyB,SAAS,IAAI,CAAC,IAAI,CAACvB,OAAO,EAAE;MACnE,IAAI,CAAC8G,OAAO,CAAC,CAAC;MACd;IACF;IAEA,IAAI,IAAI,CAAC9G,OAAO,GAAG,CAAC,EAAE;MACpB,IAAI,CAACA,OAAO,GAAGQ,IAAI,CAAC0C,GAAG,CAAC,IAAI,CAAClD,OAAO,CAAC;IACvC;IAEA,IAAI,CAACL,EAAE,GAAGL,OAAO,CAAC,IAAI,CAACK,EAAE,CAAC;IAC1B,IAAI,CAACG,EAAE,GAAGR,OAAO,CAAC,IAAI,CAACQ,EAAE,CAAC;IAC1B,IAAI,CAACE,OAAO,GAAGV,OAAO,CAAC,IAAI,CAACU,OAAO,CAAC;IAEpC,IAAI,CAACG,SAAS,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;EACEG,SAASA,CAAA,EAAG;IACV,OAAO,CACL;MAAEZ,CAAC,EAAE,IAAI,CAACA,CAAC,GAAG,IAAI,CAACK,MAAM;MAAEF,CAAC,EAAE,IAAI,CAACA;IAAE,CAAC,EACtC;MAAEH,CAAC,EAAE,IAAI,CAACA,CAAC;MAAEG,CAAC,EAAE,IAAI,CAACA,CAAC,GAAG,IAAI,CAACE;IAAO,CAAC,EACtC;MAAEL,CAAC,EAAE,IAAI,CAACA,CAAC,GAAG,IAAI,CAACK,MAAM;MAAEF,CAAC,EAAE,IAAI,CAACA;IAAE,CAAC,EACtC;MAAEH,CAAC,EAAE,IAAI,CAACA,CAAC;MAAEG,CAAC,EAAE,IAAI,CAACA,CAAC,GAAG,IAAI,CAACE;IAAO,CAAC,CACvC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}