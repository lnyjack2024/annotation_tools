{"ast":null,"code":"import { Circle } from 'pixi.js';\nimport Control from './Control';\nimport { drawVertex } from '../utils';\nimport { ShapeVertexType } from '../types';\n/**\n * Control Point\n * @class\n */\nexport default class ControlPoint extends Control {\n  /**\n   * get fill color\n   * @getter\n   */\n  get fillColor() {\n    return this._fillColor;\n  }\n\n  /**\n   * set fill color\n   * @setter\n   */\n  set fillColor(color) {\n    const shouldUpdate = this._fillColor !== color;\n    this._fillColor = color;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * control shape type\n   * @private\n   */\n\n  /**\n   * get control type\n   * @getter\n   */\n  get type() {\n    return this._type;\n  }\n\n  /**\n   * set control type\n   * @setter\n   */\n  set type(type) {\n    const shouldUpdate = this._type !== type;\n    this._type = type;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * set scale\n   * @setter\n   */\n  set scale(scale) {\n    this.control.scale.set(1 / scale, 1 / scale);\n  }\n  constructor(options) {\n    super(options);\n    /**\n     * fill color\n     * @private\n     */\n    this._fillColor = 0x222222;\n    this._type = ShapeVertexType.DOT;\n    if (options.fillColor !== undefined) {\n      this.fillColor = options.fillColor;\n    }\n    this.control.hitArea = new Circle(0, 0, this.size * 3);\n  }\n\n  /**\n   * draw point control\n   */\n  drawControl() {\n    this.control.clear();\n    this.control.lineStyle(1, this.color);\n    this.control.beginFill(this.selected ? this.color : this.fillColor);\n    drawVertex(this.control, 0, 0, this.size, this.type);\n    this.control.endFill();\n  }\n\n  /**\n   * update control point position\n   * @param point\n   */\n  move(point) {\n    this.control.x = point.x;\n    this.control.y = point.y;\n  }\n}","map":{"version":3,"names":["Circle","Control","drawVertex","ShapeVertexType","ControlPoint","fillColor","_fillColor","color","shouldUpdate","drawControl","type","_type","scale","control","set","constructor","options","DOT","undefined","hitArea","size","clear","lineStyle","beginFill","selected","endFill","move","point","x","y"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/controls/ControlPoint.ts"],"sourcesContent":["import { Point, Circle } from 'pixi.js';\nimport Control, { ControlOptions } from './Control';\nimport { drawVertex } from '../utils';\nimport { ShapeVertexType } from '../types';\n\ninterface Options extends ControlOptions {\n  fillColor?: number;\n  type?: ShapeVertexType;\n}\n\n/**\n * Control Point\n * @class\n */\nexport default class ControlPoint extends Control {\n  /**\n   * fill color\n   * @private\n   */\n  private _fillColor = 0x222222;\n\n  /**\n   * get fill color\n   * @getter\n   */\n  get fillColor() {\n    return this._fillColor;\n  }\n\n  /**\n   * set fill color\n   * @setter\n   */\n  set fillColor(color: number) {\n    const shouldUpdate = this._fillColor !== color;\n    this._fillColor = color;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * control shape type\n   * @private\n   */\n  private _type = ShapeVertexType.DOT;\n\n  /**\n   * get control type\n   * @getter\n   */\n  get type() {\n    return this._type;\n  }\n\n  /**\n   * set control type\n   * @setter\n   */\n  set type(type: ShapeVertexType) {\n    const shouldUpdate = this._type !== type;\n    this._type = type;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * set scale\n   * @setter\n   */\n  set scale(scale: number) {\n    this.control.scale.set(1 / scale, 1 / scale);\n  }\n\n  constructor(options: Options) {\n    super(options);\n\n    if (options.fillColor !== undefined) {\n      this.fillColor = options.fillColor;\n    }\n\n    this.control.hitArea = new Circle(0, 0, this.size * 3);\n  }\n\n  /**\n   * draw point control\n   */\n  drawControl() {\n    this.control.clear();\n    this.control.lineStyle(1, this.color);\n    this.control.beginFill(this.selected ? this.color : this.fillColor);\n    drawVertex(this.control, 0, 0, this.size, this.type);\n    this.control.endFill();\n  }\n\n  /**\n   * update control point position\n   * @param point\n   */\n  move(point: Point) {\n    this.control.x = point.x;\n    this.control.y = point.y;\n  }\n}\n"],"mappings":"AAAA,SAAgBA,MAAM,QAAQ,SAAS;AACvC,OAAOC,OAAO,MAA0B,WAAW;AACnD,SAASC,UAAU,QAAQ,UAAU;AACrC,SAASC,eAAe,QAAQ,UAAU;AAO1C;AACA;AACA;AACA;AACA,eAAe,MAAMC,YAAY,SAASH,OAAO,CAAC;EAOhD;AACF;AACA;AACA;EACE,IAAII,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAACC,UAAU;EACxB;;EAEA;AACF;AACA;AACA;EACE,IAAID,SAASA,CAACE,KAAa,EAAE;IAC3B,MAAMC,YAAY,GAAG,IAAI,CAACF,UAAU,KAAKC,KAAK;IAC9C,IAAI,CAACD,UAAU,GAAGC,KAAK;IACvB,IAAIC,YAAY,EAAE;MAChB,IAAI,CAACC,WAAW,CAAC,CAAC;IACpB;EACF;;EAEA;AACF;AACA;AACA;;EAGE;AACF;AACA;AACA;EACE,IAAIC,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACC,KAAK;EACnB;;EAEA;AACF;AACA;AACA;EACE,IAAID,IAAIA,CAACA,IAAqB,EAAE;IAC9B,MAAMF,YAAY,GAAG,IAAI,CAACG,KAAK,KAAKD,IAAI;IACxC,IAAI,CAACC,KAAK,GAAGD,IAAI;IACjB,IAAIF,YAAY,EAAE;MAChB,IAAI,CAACC,WAAW,CAAC,CAAC;IACpB;EACF;;EAEA;AACF;AACA;AACA;EACE,IAAIG,KAAKA,CAACA,KAAa,EAAE;IACvB,IAAI,CAACC,OAAO,CAACD,KAAK,CAACE,GAAG,CAAC,CAAC,GAAGF,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;EAC9C;EAEAG,WAAWA,CAACC,OAAgB,EAAE;IAC5B,KAAK,CAACA,OAAO,CAAC;IA7DhB;AACF;AACA;AACA;IAHE,KAIQV,UAAU,GAAG,QAAQ;IAAA,KA0BrBK,KAAK,GAAGR,eAAe,CAACc,GAAG;IAiCjC,IAAID,OAAO,CAACX,SAAS,KAAKa,SAAS,EAAE;MACnC,IAAI,CAACb,SAAS,GAAGW,OAAO,CAACX,SAAS;IACpC;IAEA,IAAI,CAACQ,OAAO,CAACM,OAAO,GAAG,IAAInB,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACoB,IAAI,GAAG,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;EACEX,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACI,OAAO,CAACQ,KAAK,CAAC,CAAC;IACpB,IAAI,CAACR,OAAO,CAACS,SAAS,CAAC,CAAC,EAAE,IAAI,CAACf,KAAK,CAAC;IACrC,IAAI,CAACM,OAAO,CAACU,SAAS,CAAC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACjB,KAAK,GAAG,IAAI,CAACF,SAAS,CAAC;IACnEH,UAAU,CAAC,IAAI,CAACW,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAACO,IAAI,EAAE,IAAI,CAACV,IAAI,CAAC;IACpD,IAAI,CAACG,OAAO,CAACY,OAAO,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;AACA;EACEC,IAAIA,CAACC,KAAY,EAAE;IACjB,IAAI,CAACd,OAAO,CAACe,CAAC,GAAGD,KAAK,CAACC,CAAC;IACxB,IAAI,CAACf,OAAO,CAACgB,CAAC,GAAGF,KAAK,CAACE,CAAC;EAC1B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}