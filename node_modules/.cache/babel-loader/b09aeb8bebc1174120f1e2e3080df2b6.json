{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/TextAnnotationApp.jsx\";\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable no-undef */\n/* eslint-disable no-underscore-dangle */\nimport React, { createContext } from 'react';\nimport { Editor, EditorState, convertFromRaw, getDefaultKeyBinding } from 'draft-js';\nimport { notification, message } from 'antd';\nimport { uniq } from 'lodash';\nimport { substr, strlen } from 'fbjs/lib/UnicodeUtils';\nimport { v4 as uuidv4 } from 'uuid';\nimport localMessage, { setLocale } from './locale';\nimport { LabelTag, InsertionTag, ConnectionTag } from './components/tag';\nimport { isAnnotationReadonly, isRework, isReviewEditable, isPreview } from '../../utils/tool-mode';\nimport Sidebar from './components/sidebar';\nimport { genTagMap, renderTagMap } from './utils/tagMapUtil';\nimport ReviewForm from './components/reviewForm';\nimport UndoRedo from './components/UndoRedo';\nimport ReviewMode from './components/ReviewMode';\nimport Save from './components/Save';\nimport { isAppenCloud } from '../../utils';\nimport AppenLogo from '../common/AppenLogo';\nimport store from './store/RootStore';\nimport './TextAnnotationApp.scss';\nimport 'draft-js/dist/Draft.css';\nimport { FIND_BLOCK, FIND_BLOCK_SELECTED, FOCUS_COLOR, DEFAULT_COLOR, FONT_COLOR, BASE_COLOR, HISTORY_SIZE, FONT_SIZE, TAG_HEIGHT, LINE_HEIGHT, EDITOR_PADDING, COMPOSITION, SELECTION, ACTION, KEY_COMMAND, RECALL_TYPE, HOVER_COLOR, FONT_SPACE, FOCUS_TYPE, HOVER_ALPHA, ACTIVE_ALPHA, DEFAULT_ALPHA } from './store/constant';\nimport { isArabic, convertArrayToColor, convertColorToArray, getSliceHead, setSelection, closeSelection, getTextByInsertion, getTargetWrapperDataSet, getConfigByKeys } from './utils/helper';\nimport { isLabel, isInsertion, isConnection, isQATag } from './store/tag_mode';\nimport { ReviewItemResult, TAG, ReviewMode as ReviewModeType } from './types';\nimport TagInfoMap from './utils/TagInfoMap';\nexport const TextToolContext = createContext();\nexport default class TextAnnotationApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addHistory = (type, data) => {\n      let targetList;\n      if (this.undoLock) {\n        // Add history to redo list\n        targetList = this.redoList;\n      } else if (this.redoLock) {\n        // Add history back to undo list\n        targetList = this.undoList;\n        // Clear redo list\n      } else {\n        // Add history to redo list\n        targetList = this.undoList;\n        this.redoList = [];\n      }\n      let {\n        length\n      } = targetList;\n      if (length > HISTORY_SIZE) {\n        targetList.shift();\n        length -= 1;\n      }\n      if (type === ACTION.EDIT_SINGLE_ADD && length >= 1) {\n        const prev = targetList[length - 1];\n        if ((prev.type === ACTION.EDIT_DEFAULT || prev.type === ACTION.EDIT_SINGLE_ADD) && prev.data.prevSlice === '' && prev.data.end === data.prevStart) {\n          targetList.pop();\n          targetList.push({\n            type: ACTION.EDIT_DEFAULT,\n            data: {\n              prevSlice: '',\n              slice: prev.data.slice + data.slice,\n              prevStart: prev.data.prevStart,\n              prevEnd: prev.data.prevEnd,\n              start: data.start,\n              end: data.end\n            }\n          });\n        } else targetList.push({\n          type,\n          data\n        });\n      } else if (type === ACTION.EDIT_SINGLE_DEL && length >= 1) {\n        const prev = targetList[length - 1];\n        if ((prev.type === ACTION.EDIT_DEFAULT || prev.type === ACTION.EDIT_SINGLE_DEL) && prev.data.slice === '' && data.prevEnd === prev.data.start) {\n          targetList.pop();\n          targetList.push({\n            type: ACTION.EDIT_DEFAULT,\n            data: {\n              slice: '',\n              prevSlice: data.prevSlice + prev.data.prevSlice,\n              prevStart: data.end,\n              prevEnd: prev.data.prevEnd,\n              start: data.start,\n              end: data.end\n            }\n          });\n        } else targetList.push({\n          type,\n          data\n        });\n      } else targetList.push({\n        type,\n        data\n      });\n    };\n    this.executeHistory = recallType => {\n      // Execute history\n      let targetList;\n      if (recallType === RECALL_TYPE.UNDO) {\n        // Get from undo list\n        this.undoLock = true;\n        targetList = this.undoList;\n      } else if (recallType === RECALL_TYPE.REDO) {\n        // Get from redo list\n        this.redoLock = true;\n        targetList = this.redoList;\n      }\n      if (targetList.length === 0) {\n        this.undoLock = false;\n        this.redoLock = false;\n        return;\n      }\n      const item = targetList.pop();\n      const {\n        data\n      } = item;\n      let nextEditorState = this.state.editorState;\n      switch (item.type) {\n        case ACTION.EDIT_SINGLE_ADD:\n        case ACTION.EDIT_SINGLE_DEL:\n        case ACTION.EDIT_DEFAULT:\n        case ACTION.EDIT_REPLACE:\n          {\n            const newData = {\n              prevSlice: data.slice,\n              slice: data.prevSlice,\n              start: data.prevEnd,\n              end: data.prevEnd,\n              prevStart: data.prevStart,\n              prevEnd: data.end,\n              ...(item.type === ACTION.EDIT_REPLACE && {\n                tags: data.prevTags,\n                prevTags: data.tags\n              })\n            };\n            // nextEditorState = this.onContentChange(nextEditorState, newData);\n            nextEditorState = setSelection(this.onContentChange(nextEditorState, newData, item.type), newData.start, newData.end);\n            break;\n          }\n        case ACTION.ADD_INSERTION:\n          {\n            const {\n              type,\n              id\n            } = data.insertion;\n            nextEditorState = this.deleteTag(type, id);\n            break;\n          }\n        case ACTION.ADD_LABEL:\n          {\n            const {\n              type,\n              id\n            } = data.label;\n            nextEditorState = this.deleteTag(type, id);\n            break;\n          }\n        case ACTION.ADD_MISSING_REVIEW:\n          {\n            const {\n              preReview,\n              id\n            } = data;\n            if (preReview) {\n              const {\n                editorState\n              } = this.addReview(nextEditorState, id, {\n                ...preReview\n              });\n              nextEditorState = editorState;\n            } else {\n              const {\n                editorState\n              } = this.deleteQATag(id);\n              nextEditorState = editorState;\n            }\n            break;\n          }\n        case ACTION.ADD_CONNECTION:\n          {\n            const {\n              type,\n              id\n            } = data;\n            nextEditorState = this.deleteTag(type, id);\n            break;\n          }\n        case ACTION.DEL_LABEL:\n          {\n            const {\n              relatedConnections,\n              label\n            } = data;\n            nextEditorState = this.addLabel(nextEditorState, label, relatedConnections);\n            break;\n          }\n        case ACTION.DEL_MISSING_REVIEW:\n          {\n            const {\n              label,\n              review\n            } = data;\n            const {\n              editorState\n            } = this.addQALabel(nextEditorState, label, {\n              ...review\n            });\n            nextEditorState = editorState;\n            break;\n          }\n        case ACTION.DEL_INSERTION:\n          {\n            const {\n              relatedConnections,\n              insertion\n            } = data;\n            nextEditorState = this.addInsertion(nextEditorState, insertion, relatedConnections);\n            break;\n          }\n        case ACTION.DEL_CONNECTION:\n          {\n            const {\n              connection\n            } = data;\n            nextEditorState = this.addConnection(nextEditorState, connection);\n            break;\n          }\n        case ACTION.EDIT_REPLACE_ALL:\n          {\n            const {\n              text: currentText,\n              prevText,\n              prevResults,\n              results\n            } = data;\n            store.ontology.text = prevText;\n            store.ontology.setResults(prevResults);\n            this.raw = this.renderTextArea(prevText);\n            nextEditorState = EditorState.set(nextEditorState, {\n              currentContent: convertFromRaw(this.raw)\n            });\n            this.addHistory(ACTION.EDIT_REPLACE_ALL, {\n              text: prevText,\n              prevText: currentText,\n              prevResults: results,\n              results: prevResults\n            });\n            break;\n          }\n        case ACTION.ADD_REVIEW:\n          {\n            const {\n              preReview,\n              id\n            } = data;\n            if (preReview) {\n              const {\n                editorState\n              } = this.addReview(nextEditorState, id, {\n                ...preReview\n              });\n              nextEditorState = editorState;\n            } else {\n              const {\n                editorState\n              } = this.deleteReview(id);\n              nextEditorState = editorState;\n            }\n            break;\n          }\n        case ACTION.DELETE_REVIEW:\n          {\n            const {\n              review,\n              id\n            } = data;\n            const {\n              editorState\n            } = this.addReview(nextEditorState, id, {\n              ...review\n            });\n            nextEditorState = editorState;\n            break;\n          }\n        case ACTION.ADD_REVIEWS:\n          {\n            nextEditorState = this.deleteReviewItems(data);\n            break;\n          }\n        case ACTION.DELETE_REVIEWS:\n          {\n            nextEditorState = this.addReviewItems(nextEditorState, data);\n            break;\n          }\n        default:\n          break;\n      }\n      this.renderAndSave(nextEditorState);\n      this.undoLock = false;\n      this.redoLock = false;\n    };\n    this.renderAndSave = (_editorState, shouldRenderTags = true, shouldResetCurrentState = false, shouldSaveURL = false) => {\n      const editorState = _editorState || this.state.editorState;\n      const {\n        hasFocus\n      } = editorState.getSelection();\n      const top = this.editorWrapper.scrollTop;\n      // window.ew = this.editorWrapper;\n      return new Promise(resolve => {\n        if (shouldResetCurrentState) {\n          this.resetCurrentFrom();\n        }\n        this.setState({\n          editorState\n        });\n        if (shouldSaveURL) {\n          this.exportResult();\n        }\n        resolve();\n      }).then(() => {\n        if (shouldRenderTags) {\n          const {\n            nextEditorState,\n            tagMap\n          } = this.measureTags(editorState);\n          return new Promise(resolve => {\n            this.setState({\n              editorState: nextEditorState\n            }, () => {\n              store.ontology.updateOntologiesStatusMap();\n            });\n            resolve(tagMap);\n          });\n        }\n      }).then(tagMap => {\n        if (shouldRenderTags) {\n          this.renderTags(tagMap);\n          return new Promise(resolve => {\n            this.setState({\n              editorWidth: this.editorWrapper.offsetWidth - EDITOR_PADDING * 2,\n              editorHeight: this.editorWrapper.scrollHeight - EDITOR_PADDING * 2,\n              tagMap\n            });\n            resolve();\n          });\n        }\n      }).then(() => {\n        if (hasFocus) {\n          // move back to current selection after composition end\n          if (this.compositionTop >= 0) {\n            this.editor.focus({\n              y: this.compositionTop\n            });\n            this.compositionTop = -1;\n          } else this.editor.focus({\n            y: top\n          });\n        }\n        return new Promise(resolve => resolve());\n      });\n    };\n    this.updateEditorAndRender = options => {\n      let {\n        editorState\n      } = this.state;\n      // update rawDraftContentState, using new results\n      this.raw = this.renderTextArea();\n      // update editorState, using new rawDraftContentState\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      if (options && typeof options[Symbol.iterator] === 'function') {\n        return this.renderAndSave(editorState, ...options);\n      }\n      return this.renderAndSave(editorState);\n    };\n    this.onChange = editorState => {\n      // ignore composition operation\n      if (this.compositionFlag === COMPOSITION.ENABLED) return;\n      // get operation type ( handled operation not included )\n      const prevEditorState = this.state.editorState;\n      const prevText = store.ontology.text;\n      const text = editorState.getCurrentContent().getPlainText();\n      let prevStart = prevEditorState.getSelection().getStartOffset();\n      const prevEnd = prevEditorState.getSelection().getEndOffset();\n      const start = editorState.getSelection().getStartOffset();\n      const end = editorState.getSelection().getEndOffset();\n      const {\n        hasFocus\n      } = editorState.getSelection();\n      const {\n        hasFocus: prevFocus\n      } = prevEditorState.getSelection();\n      if (hasFocus !== prevFocus) {\n        // when focus change update new editor state and return without doing anything\n        const nextEditorState = EditorState.set(editorState, {\n          currentContent: convertFromRaw(this.raw)\n        });\n        this.renderAndSave(nextEditorState, null, false);\n        return;\n      }\n      if (this.inputFlag || this.pasteFlag || this.compositionFlag === COMPOSITION.PENDING || prevText !== text) {\n        /* text changed:\n         * 1. deleted by delete key\n         * 2. deleted by drag + delete key\n         * 3. deleted by drag + cut operation\n         * 4. insert/replace by (drag) + simply typing\n         * 5. insert/replace by (drag) + composition typing\n         * 6. insert/replace by (drag) + paste operation\n         * 7. redo && undo\n         */\n        if (prevStart === prevEnd && start === prevStart - 1) prevStart -= 1;\n        const prevSlice = prevText.slice(prevStart, prevEnd);\n        const slice = text.slice(prevStart, end);\n        const data = {\n          prevSlice,\n          slice,\n          prevStart,\n          prevEnd,\n          start,\n          end\n        };\n        const nextEditorState = this.onContentChange(editorState, data);\n        // reset flag\n        this.inputFlag = false;\n        this.pasteFlag = false;\n        this.compositionFlag = COMPOSITION.DISABLED;\n        this.renderAndSave(nextEditorState);\n      } else {\n        /* selection changed\n         * 1. simply select\n         * 2. click select: add insertion\n         * 3. drag select: add label\n         */\n        const data = {\n          start,\n          end\n        };\n        const {\n          nextEditorState,\n          type\n        } = this.onSelectionChange(editorState, data);\n        const shouldRender = type !== SELECTION.MOVE;\n        this.renderAndSave(nextEditorState, shouldRender, shouldRender);\n      }\n    };\n    this.renderTags = tagMap => {\n      const spanMap = this.getAnchorElementsByHeads();\n      const newTagMap = renderTagMap(tagMap, spanMap);\n      return newTagMap;\n    };\n    this.onSave = async () => {\n      if (isPreview(this.toolMode)) return;\n      try {\n        if (!isAnnotationReadonly(this.toolMode)) {\n          await this.exportResult();\n        }\n        if (isReviewEditable(this.toolMode)) {\n          await this.submitReviews(false);\n        }\n        message.success(localMessage('saveSuccess'));\n      } catch (e) {\n        message.warning(localMessage('saveFail'));\n      }\n    };\n    this.onSubmit = async params => {\n      const invalid = params && params.validityFlag === 'false';\n      if (store.config.submitCheck && (!invalid || !store.config.skipCheckForInvalidData)) {\n        // validate before submit\n        await store.validation.defaultSync();\n        if (store.validation.blocked) {\n          throw new Error(localMessage('SUBMIT_CHECK_FAIL'));\n        }\n      }\n      return this.exportResult(true);\n    };\n    this.exportResult = (isSubmit = false) => {\n      if (isAnnotationReadonly(this.toolMode)) return;\n      return store.saveResult(isSubmit);\n    };\n    this.measureTags = editorState => {\n      const {\n        raw\n      } = this;\n      const {\n        text\n      } = store.ontology;\n      const {\n        labels,\n        insertions\n      } = store.ontology.getResults();\n      const spanMap = this.getAnchorElementsByHeads();\n      const offsetTops = uniq(labels.map(label => {\n        var _spanMap$get;\n        return (_spanMap$get = spanMap.get(label.start)) === null || _spanMap$get === void 0 ? void 0 : _spanMap$get.offsetTop;\n      }).concat(insertions.map(insertion => {\n        var _spanMap$get2;\n        return (_spanMap$get2 = spanMap.get(insertion.at)) === null || _spanMap$get2 === void 0 ? void 0 : _spanMap$get2.offsetTop;\n      })));\n      const occupyMap = new Map();\n      offsetTops.forEach(offsetTop => {\n        occupyMap.set(offsetTop, []);\n      });\n\n      // get label offsets\n      const tagMap = genTagMap(store.ontology.getResults(), store.ontology.ontologyConfigMap, spanMap, occupyMap, text);\n      const ranges = raw.blocks[0].inlineStyleRanges;\n      const style = {\n        ...this.state.style\n      };\n      ranges.filter(item => item.style.slice(0, 6) === 'ANCHOR').forEach(item => {\n        const span = this.getAnchorElementByHead(item.offset);\n        if (span) {\n          const occupyList = occupyMap.get(span.offsetTop);\n          const lineHeight = occupyList.map(it => it.top > 0 ? it.top - FONT_SIZE + TAG_HEIGHT : -it.top).sort((a, b) => a - b).pop() * 2 + LINE_HEIGHT;\n          style[`LINEHEIGHT_${lineHeight}`] = {\n            lineHeight: `${lineHeight}px`\n          };\n          ranges.push({\n            offset: item.offset,\n            length: item.length,\n            style: `LINEHEIGHT_${lineHeight}`\n          });\n        }\n      });\n      const nextEditorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      this.setState({\n        style\n      });\n      return {\n        nextEditorState,\n        tagMap\n      };\n    };\n    this.onSelectionChange = (editorState, data) => {\n      const {\n        start,\n        end\n      } = data;\n      const {\n        currentBrush\n      } = this.state;\n      if (!this.mouseFlag) {\n        return {\n          nextEditorState: editorState,\n          type: SELECTION.MOVE\n        };\n      }\n      if (start === end && isInsertion(currentBrush === null || currentBrush === void 0 ? void 0 : currentBrush.type)) {\n        const fbAt = strlen(store.ontology.text.slice(0, start));\n        const nextEditorState = this.addInsertion(editorState, {\n          at: fbAt,\n          value: currentBrush.text,\n          keys: currentBrush.keys,\n          type: TAG.INSERTION\n        });\n        return {\n          nextEditorState,\n          type: SELECTION.CLICK\n        };\n      }\n      if (start !== end && isLabel(currentBrush === null || currentBrush === void 0 ? void 0 : currentBrush.type)) {\n        const fbStart = strlen(store.ontology.text.slice(0, start));\n        const fbEnd = strlen(store.ontology.text.slice(0, end));\n        if (isQATag(currentBrush === null || currentBrush === void 0 ? void 0 : currentBrush.type)) {\n          const {\n            editorState: nextEditorState\n          } = this.addQALabel(editorState, {\n            start: fbStart,\n            end: fbEnd,\n            value: currentBrush.text,\n            keys: currentBrush.keys,\n            type: currentBrush.type\n          }, {\n            result: ReviewItemResult.MISSING\n          }, true, true);\n          return {\n            nextEditorState,\n            type: SELECTION.DRAG\n          };\n        }\n        const nextEditorState = this.addLabel(editorState, {\n          start: fbStart,\n          end: fbEnd,\n          value: currentBrush.text,\n          keys: currentBrush.keys,\n          type: currentBrush.type\n        });\n        return {\n          nextEditorState,\n          type: SELECTION.DRAG\n        };\n      }\n      return {\n        nextEditorState: editorState,\n        type: SELECTION.MOVE\n      };\n    };\n    this.deleteTag = (type, id) => {\n      const {\n        state: {\n          editorState\n        }\n      } = this;\n      if (isQATag(type) && store.config.reviewMode !== ReviewModeType.REVIEW) {\n        return editorState;\n      }\n      if (!isQATag(type) && store.config.reviewMode === ReviewModeType.REVIEW) {\n        return;\n      }\n      if (isAnnotationReadonly(this.toolMode)) {\n        return editorState;\n      }\n      const operation = store.ontology.deleteTag(type, id);\n      switch (true) {\n        case isLabel(type):\n          this.addHistory(ACTION.DEL_LABEL, operation);\n          break;\n        case isConnection(type):\n          this.addHistory(ACTION.DEL_CONNECTION, operation);\n          break;\n        case isInsertion(type):\n          this.addHistory(ACTION.DEL_INSERTION, operation);\n          break;\n        default:\n          break;\n      }\n      this.raw = this.renderTextArea();\n      return EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n    };\n    this.addInsertion = (editorState, {\n      at,\n      value,\n      id,\n      keys,\n      type\n    }, relatedConnections = []) => {\n      const {\n        state: {\n          currentBrush\n        },\n        toolMode\n      } = this;\n      const {\n        text\n      } = store.ontology;\n      if (isAnnotationReadonly(this.toolMode) || store.config.reviewMode === ReviewModeType.REVIEW) return editorState;\n      if (at === strlen(text)) return editorState; // prevent insert to the end of content\n      // eslint-disable-next-line no-restricted-syntax\n      for (const item of store.ontology.results.insertions) {\n        if (item.at === at && item.value === currentBrush.text) return editorState;\n      }\n      if (!id) id = uuidv4();\n      const arabic = isArabic(substr(text, at));\n      if (arabic && at) at -= 1;\n      const newItem = {\n        type,\n        at,\n        value,\n        id,\n        text: getTextByInsertion(store.ontology.text, {\n          at,\n          value\n        }),\n        isReview: isReviewEditable(toolMode),\n        keys\n      };\n      this.addHistory(ACTION.ADD_INSERTION, {\n        insertion: newItem,\n        relatedConnections\n      });\n      store.ontology.addResultItem(newItem, relatedConnections);\n      this.raw = this.renderTextArea();\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      editorState = closeSelection(editorState);\n      return editorState;\n    };\n    this.addConnection = (editorState, {\n      fromId,\n      fromType,\n      toId,\n      toType,\n      value,\n      id,\n      keys,\n      type\n    }) => {\n      const {\n        state: {\n          currentBrush\n        },\n        toolMode\n      } = this;\n      if (isAnnotationReadonly(toolMode) || store.config.reviewMode === ReviewModeType.REVIEW) return editorState;\n      if (fromId === toId) return editorState;\n      if (isQATag(fromType) || isQATag(toType)) return editorState; // can't add connection for qa tool\n\n      if (store.ontology.results.connections.some(item => item.fromId === fromId && item.toId === toId && item.value === currentBrush.text)) return editorState;\n      if (!id) id = uuidv4();\n      const newItem = {\n        type,\n        fromId,\n        fromType,\n        toId,\n        toType,\n        value,\n        id,\n        isReview: isReviewEditable(toolMode),\n        keys\n      };\n      this.addHistory(ACTION.ADD_CONNECTION, newItem);\n      store.ontology.addResultItem(newItem);\n      this.raw = this.renderTextArea();\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      return editorState;\n    };\n    this.addLabel = (editorState, {\n      start,\n      end,\n      value,\n      id,\n      keys,\n      type\n    }, relatedConnections = []) => {\n      const {\n        toolMode\n      } = this;\n      const {\n        ontology,\n        config\n      } = store;\n      const {\n        text\n      } = store.ontology;\n      if (config.reviewMode === ReviewModeType.REVIEW && !isQATag(type)) return editorState;\n      if (isAnnotationReadonly(this.toolMode) && !isQATag(type)) return editorState;\n      if (isQATag(type) && (!isReviewEditable(this.toolMode) || config.reviewMode === ReviewModeType.LABELING)) return editorState; // qa mode can only use qa tool, work mode can only use normal tool\n\n      // slice should not begin with \\n\n      if (substr(text, start, 1) === '\\n') return editorState;\n      if (ontology.results.labels.some(item => item.start === start && item.end === end && item.value === value)) return editorState;\n\n      // generate new label\n      if (!id) id = uuidv4();\n      const newItem = {\n        type,\n        start,\n        end,\n        value,\n        id,\n        text: substr(text, start, end - start),\n        isReview: isReviewEditable(toolMode),\n        keys\n      };\n      this.addHistory(ACTION.ADD_LABEL, {\n        label: newItem,\n        relatedConnections\n      });\n      ontology.addResultItem(newItem, relatedConnections);\n      // update rawDraftContentState, using new results\n      this.raw = this.renderTextArea();\n      // update editorState, using new rawDraftContentState\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      editorState = closeSelection(editorState);\n      return editorState;\n    };\n    this.addQALabel = (editorState, {\n      start,\n      end,\n      value,\n      id,\n      keys,\n      type\n    }, reviewInfo, needUnRedo = true, needOpenReview = false) => {\n      const {\n        toolMode\n      } = this;\n      const {\n        ontology,\n        config,\n        review\n      } = store;\n      const {\n        text\n      } = ontology;\n      if (config.reviewMode === ReviewModeType.REVIEW && !isQATag(type)) return {\n        editorState,\n        operation: null\n      };\n      if (isAnnotationReadonly(this.toolMode) && !isQATag(type)) return {\n        editorState,\n        operation: null\n      };\n      if (isQATag(type) && (!isReviewEditable(this.toolMode) || config.reviewMode === ReviewModeType.LABELING)) return {\n        editorState,\n        operation: null\n      }; // qa mode can only use qa tool, work mode can only use normal tool\n\n      // slice should not begin with \\n\n      if (substr(text, start, 1) === '\\n') return {\n        editorState,\n        operation: null\n      };\n      if (review.reviews.missing.some(item => item.start === start && item.end === end && item.value === value)) return {\n        editorState,\n        operation: null\n      };\n\n      // generate new label\n      if (!id) id = uuidv4();\n      const newItem = {\n        type,\n        start,\n        end,\n        value,\n        id,\n        text: substr(text, start, end - start),\n        isReview: isReviewEditable(toolMode),\n        keys\n      };\n      if (needOpenReview) {\n        this.setState({\n          tagOpenReview: {\n            ...newItem\n          }\n        });\n      }\n      const operation = review.addMissingReview(newItem, id, {\n        ...reviewInfo\n      });\n      if (needUnRedo) {\n        this.addHistory(ACTION.ADD_MISSING_REVIEW, operation);\n      }\n\n      // update rawDraftContentState, using new results\n      this.raw = this.renderTextArea();\n      // update editorState, using new rawDraftContentState\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      editorState = closeSelection(editorState);\n      return {\n        editorState,\n        operation\n      };\n    };\n    this.deleteQATag = (id, needUnRedo = true) => {\n      const {\n        state: {\n          editorState\n        }\n      } = this;\n      if (store.config.reviewMode !== ReviewModeType.REVIEW) {\n        return {\n          editorState,\n          operation: null\n        };\n      }\n      if (isAnnotationReadonly(this.toolMode)) {\n        return {\n          editorState,\n          operation: null\n        };\n      }\n      const operation = store.review.deleteMissingReview(id);\n      if (needUnRedo) {\n        this.addHistory(ACTION.DEL_MISSING_REVIEW, operation);\n      }\n      this.raw = this.renderTextArea();\n      return {\n        editorState: EditorState.set(editorState, {\n          currentContent: convertFromRaw(this.raw)\n        }),\n        operation\n      };\n    };\n    this.deleteReview = (reviewId, needUnRedo = true) => {\n      const {\n        state: {\n          editorState\n        }\n      } = this;\n      if (!(isReviewEditable(this.toolMode) && store.config.reviewMode === ReviewModeType.REVIEW)) {\n        return {\n          editorState,\n          operation: null\n        };\n      }\n      const operation = store.review.deleteReview(reviewId);\n      if (needUnRedo) {\n        this.addHistory(ACTION.DELETE_REVIEW, operation);\n      }\n      this.raw = this.renderTextArea();\n      return {\n        editorState: EditorState.set(editorState, {\n          currentContent: convertFromRaw(this.raw)\n        }),\n        operation\n      };\n    };\n    this.addReview = (editorState, reviewId, review, needUnRedo = true) => {\n      const {\n        state: {\n          editorState: currEditorState\n        }\n      } = this;\n      if (!(isReviewEditable(this.toolMode) && store.config.reviewMode === ReviewModeType.REVIEW)) {\n        return {\n          editorState: currEditorState,\n          operation: null\n        };\n      }\n      const operation = store.review.setReview(reviewId, {\n        ...review\n      });\n      if (needUnRedo) {\n        this.addHistory(ACTION.ADD_REVIEW, operation);\n      }\n      this.raw = this.renderTextArea();\n      return {\n        editorState: EditorState.set(editorState, {\n          currentContent: convertFromRaw(this.raw)\n        }),\n        operation\n      };\n    };\n    this.deleteReviewItemById = reviewId => {\n      if (reviewId) {\n        let nextEditorState = this.state.editorState;\n        const reviewItem = store.ontology.getItemById(reviewId);\n        if (reviewItem && isQATag(reviewItem.type)) {\n          const {\n            editorState\n          } = this.deleteQATag(reviewItem.id);\n          nextEditorState = editorState;\n        } else {\n          const {\n            editorState\n          } = this.deleteReview(reviewId);\n          nextEditorState = editorState;\n        }\n        this.renderAndSave(nextEditorState);\n      }\n    };\n    this.deleteReviewItemsById = reviewIds => {\n      const operations = [];\n      reviewIds === null || reviewIds === void 0 ? void 0 : reviewIds.forEach(reviewId => {\n        if (reviewId) {\n          const reviewItem = store.ontology.getItemById(reviewId);\n          if (reviewItem && isQATag(reviewItem.type)) {\n            const {\n              operation\n            } = this.deleteQATag(reviewItem.id, false);\n            if (operation) {\n              operations.push(operation);\n            }\n          } else {\n            const {\n              operation\n            } = this.deleteReview(reviewId, false);\n            if (operation) {\n              operations.push(operation);\n            }\n          }\n        }\n      });\n      this.addHistory(ACTION.DELETE_REVIEWS, operations);\n      const {\n        state: {\n          editorState\n        }\n      } = this;\n      this.raw = this.renderTextArea();\n      return EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n    };\n    this.deleteReviewItems = reviewItems => {\n      const operations = [];\n      const {\n        state: {\n          editorState\n        }\n      } = this;\n      if (!(isReviewEditable(this.toolMode) && store.config.reviewMode === ReviewModeType.REVIEW)) {\n        return editorState;\n      }\n      reviewItems === null || reviewItems === void 0 ? void 0 : reviewItems.forEach(reviewItem => {\n        const {\n          review,\n          id\n        } = reviewItem;\n        if (review.result === ReviewItemResult.MISSING) {\n          const {\n            operation\n          } = this.deleteQATag(id, false);\n          if (operation) {\n            operations.push(operation);\n          }\n        } else {\n          const {\n            operation\n          } = this.deleteReview(id, false);\n          if (operation) {\n            operations.push(operation);\n          }\n        }\n      });\n      this.addHistory(ACTION.DELETE_REVIEWS, operations);\n      this.raw = this.renderTextArea();\n      return EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n    };\n    this.addReviewItems = (editorState, reviewItems) => {\n      const operations = [];\n      if (!(isReviewEditable(this.toolMode) && store.config.reviewMode === ReviewModeType.REVIEW)) {\n        return editorState;\n      }\n      reviewItems === null || reviewItems === void 0 ? void 0 : reviewItems.forEach(reviewItem => {\n        const {\n          review,\n          id\n        } = reviewItem;\n        if (review.result === ReviewItemResult.MISSING) {\n          const {\n            operation\n          } = this.addQALabel(editorState, reviewItem.label, {\n            ...review\n          }, false, false);\n          if (operation) {\n            operations.push(operation);\n          }\n        } else {\n          const {\n            operation\n          } = this.addReview(editorState, id, {\n            ...review\n          }, false);\n          if (operation) {\n            operations.push(operation);\n          }\n        }\n      });\n      this.addHistory(ACTION.ADD_REVIEWS, operations);\n      this.raw = this.renderTextArea();\n      return EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n    };\n    this.deleteReviewHandle = reviewItem => {\n      if (reviewItem) {\n        let nextEditorState = this.state.editorState;\n        if (isQATag(reviewItem.type)) {\n          const {\n            editorState\n          } = this.deleteQATag(reviewItem.id);\n          nextEditorState = editorState;\n        } else {\n          const {\n            editorState\n          } = this.deleteReview(reviewItem.id);\n          nextEditorState = editorState;\n        }\n        this.renderAndSave(nextEditorState);\n      }\n    };\n    this.onDeleteReview = () => {\n      const {\n        tagOpenReview\n      } = this.state;\n      this.deleteReviewHandle(tagOpenReview);\n    };\n    // create new RawDraftContentState and update customeStyleMap\n    // update: raw, style, sliceMap\n    this.renderTextArea = _text => {\n      const {\n        ontology\n      } = store;\n      const {\n        ontologyConfigMap\n      } = ontology;\n      const {\n        currentClick,\n        currentHover,\n        foundTags,\n        foundTagSelectedIndex,\n        needJumpFound\n      } = this.state;\n      const style = {\n        ...this.state.style\n      };\n      const text = _text || store.ontology.text;\n      const {\n        labels,\n        insertions\n      } = ontology.getResults();\n      // render missing labels as normal labels\n\n      // slice text to segments\n      const slices = uniq(labels.map(label => label.start).concat(labels.map(label => label.end)).concat(insertions.map(insertion => insertion.at)).concat(foundTags.map(t => t.start)).concat(foundTags.map(t => t.end)).concat([0, text.length]).sort((a, b) => a - b));\n      const labelHeads = uniq(labels.map(label => label.start));\n      const insertionHeads = uniq(insertions.map(insertion => insertion.at));\n      const foundTagHeads = uniq(foundTags.map(tag => tag.start));\n\n      // .concat(insertions.map((insertion) => insertion.at)));\n      const raw = {\n        blocks: [{\n          text,\n          key: 'span-wrapper',\n          type: 'unstyled',\n          depth: 0,\n          inlineStyleRanges: [{\n            offset: 0,\n            length: text.length,\n            style: 'DEFAULT_STYLE'\n          }],\n          children: [],\n          entityRanges: [],\n          data: {}\n        }],\n        entityMap: {}\n      };\n      let sliceCount = 0;\n      // 对重叠的tag进行背景色叠加\n      const ranges = raw.blocks[0].inlineStyleRanges;\n      this.sliceMap = new Map();\n      slices.forEach((anchor, index, array) => {\n        // set slice\n        if (!index) return;\n        const {\n          prev,\n          next\n        } = {\n          prev: array[index - 1],\n          next: anchor\n        };\n        const match = labels.filter(label => label.start <= prev && label.end > prev);\n        let currentRGB = [0, 0, 0];\n        let currentAlpha = 0;\n        let nextAlpha = DEFAULT_ALPHA;\n        let isCoverbyQa = false;\n        let keepRGB = null;\n        match.some(label => {\n          const labelItem = getConfigByKeys(ontologyConfigMap, label.keys);\n          const tempRGB = convertColorToArray(labelItem.color);\n          if (!keepRGB) isCoverbyQa = isQATag(label.type);\n          // render clicked tag in priority\n          if (currentClick.id === label.id || currentClick.fromId === label.id || currentClick.toId === label.id) {\n            keepRGB = tempRGB.map((value, i) => value * ACTIVE_ALPHA);\n            isCoverbyQa = isQATag(label.type);\n            return true;\n          }\n          if (!keepRGB && currentHover.id === label.id || currentHover.fromId === label.id || currentHover.toId === label.id) {\n            keepRGB = tempRGB.map(v => v * HOVER_ALPHA);\n          }\n          if (!keepRGB) {\n            currentRGB = currentRGB.map((value, i) => value + tempRGB[i] * nextAlpha);\n            currentAlpha += nextAlpha;\n            nextAlpha = DEFAULT_ALPHA * (1 - currentAlpha) * (1 - currentAlpha);\n          }\n          return false;\n        });\n        // background of found tag\n        foundTags.filter(tag => tag.start <= prev && tag.end > prev).some(tag => {\n          const tagIndex = foundTags.findIndex(f => f.start === tag.start);\n          if (tagIndex !== undefined) {\n            keepRGB = foundTagSelectedIndex === tagIndex && !needJumpFound ? [255, 230, 0] : [255, 169, 64, 0.20];\n            return true;\n          }\n          return false;\n        });\n        const baseRGB = convertColorToArray(BASE_COLOR);\n        currentRGB = keepRGB || currentRGB.map((value, i) => Math.min(255, value + baseRGB[i] * (1 - currentAlpha)));\n        const currentColor = convertArrayToColor(currentRGB);\n        if (!style[`BACKGROUND_${currentColor}`]) style[`BACKGROUND_${currentColor}`] = {\n          backgroundColor: currentColor\n        };\n        if (isCoverbyQa) ranges.push({\n          offset: prev,\n          length: next - prev,\n          style: 'MISSING_STYLE'\n        });\n        ranges.push({\n          offset: prev,\n          length: next - prev,\n          style: `BACKGROUND_${currentColor}`\n        });\n        ranges.push({\n          offset: prev,\n          length: next - prev,\n          style: `SLICE_${prev}_${next}`\n        });\n        // set slice head if for label/insertion slice\n        if (labelHeads.indexOf(prev) >= 0 || insertionHeads.indexOf(prev) >= 0) {\n          const slice = substr(text, prev, next - prev);\n          const head = getSliceHead(slice);\n          ranges.push({\n            offset: prev,\n            length: strlen(head),\n            style: `ANCHOR_${prev}`\n          });\n        }\n        if (foundTagHeads.indexOf(prev) >= 0) {\n          const tagIndex = foundTags.findIndex(f => f.start === prev);\n          if (tagIndex !== undefined) {\n            const tag = foundTags[tagIndex];\n            ranges.push({\n              offset: prev,\n              length: tag.end - tag.start,\n              style: foundTagSelectedIndex === tagIndex && !needJumpFound ? 'FIND_BLOCK_SELECTED' : 'FIND_BLOCK'\n            });\n          }\n        }\n        if (labelHeads.indexOf(prev) >= 0 || insertionHeads.indexOf(prev) >= 0 || foundTagHeads.indexOf(prev) >= 0) {\n          const slice = substr(text, prev, next - prev);\n          const head = getSliceHead(slice);\n          // set sliceMap\n          this.sliceMap.set(prev, sliceCount);\n          if (head !== slice) sliceCount += 1;\n        }\n        sliceCount += 1;\n      });\n      // update new style\n      this.setState({\n        style\n      });\n      return raw;\n    };\n    this.onMouseMove = e => {\n      const box = this.svg.getBoundingClientRect();\n      this.setState({\n        currentMouse: {\n          left: e.clientX - box.x,\n          top: e.clientY - box.y\n        }\n      });\n    };\n    this.moveFocusToTag = tag => {\n      let currentClick = {\n        ...this.state.currentClick\n      };\n      const {\n        tagMap\n      } = this.state;\n      if (tag == null) return;\n      currentClick = {\n        id: tag.id,\n        fromId: tag.fromId,\n        toId: tag.toId,\n        fromType: tag.fromType,\n        toType: tag.toType\n      };\n      const {\n        top\n      } = tagMap.getItem(tag.id, tag.type);\n      const {\n        clientHeight,\n        scrollTop\n      } = this.editorWrapper;\n      if (top < scrollTop || top > clientHeight + scrollTop) {\n        this.editor.focus({\n          y: top\n        });\n      }\n      this.setState({\n        currentClick\n      }, () => {\n        this.updateEditorAndRender();\n      });\n    };\n    this.onKeyDown = e => {\n      if (window.disableTextHotKeys) {\n        return;\n      }\n      const {\n        currentClick,\n        editorState\n      } = this.state;\n      const {\n        keyCode,\n        ctrlKey,\n        altKey\n      } = e;\n      const config = [];\n      store.ontology.ontologyConfigMap.forEach(value => {\n        config.push(value);\n      });\n      if (ctrlKey) {\n        switch (true) {\n          case keyCode >= 48 && keyCode <= 57:\n            {\n              // 0 - 9\n              e.preventDefault();\n              const index = e.keyCode - 49;\n              if (index === -1) {\n                this.setCurrentBrush(null);\n              }\n              if (config[index]) {\n                this.setCurrentBrush(config[index]);\n              }\n              break;\n            }\n          case keyCode === 90:\n            e.preventDefault();\n            this.executeHistory(RECALL_TYPE.UNDO);\n            break;\n          // Z\n          case keyCode === 89:\n            e.preventDefault();\n            this.executeHistory(RECALL_TYPE.REDO);\n            break;\n          // Y\n          case keyCode === 83:\n            e.preventDefault();\n            this.onSave();\n            break;\n          // S\n          case keyCode === 82:\n            {\n              // R\n              e.preventDefault();\n              const nTag = store.ontology.moveToTagByStep(currentClick.id, 1, true);\n              this.moveFocusToTag(nTag);\n              break;\n            }\n          case keyCode === 81:\n            {\n              // Q\n              e.preventDefault();\n              if (currentClick.id == null) break;\n              let nxtTag;\n              if (altKey) {\n                nxtTag = store.ontology.stepToTag(currentClick.id, -1);\n              } else {\n                nxtTag = store.ontology.moveToTagByStep(currentClick.id, -1);\n              }\n              this.moveFocusToTag(nxtTag);\n              break;\n            }\n          case keyCode === 69:\n            {\n              // E\n              e.preventDefault();\n              if (currentClick.id == null) break;\n              let nextTag;\n              if (altKey) {\n                nextTag = store.ontology.stepToTag(currentClick.id, 1);\n              } else {\n                nextTag = store.ontology.moveToTagByStep(currentClick.id, 1);\n              }\n              this.moveFocusToTag(nextTag);\n              break;\n            }\n          default:\n            break;\n        }\n      } else if ((currentClick === null || currentClick === void 0 ? void 0 : currentClick.id) !== null && isReviewEditable(this.toolMode) && !isQATag(currentClick.type) && store.config.reviewMode === ReviewModeType.REVIEW) {\n        switch (keyCode) {\n          case 49:\n            // 1\n            e.preventDefault();\n            e.stopPropagation();\n            this.addReview(editorState, currentClick.id, {\n              result: 'pass'\n            });\n            break;\n          // 2\n          case 50:\n            {\n              e.preventDefault();\n              e.stopPropagation();\n              let tagReviewInfo = store.review.getReview(currentClick.id);\n              if (!tagReviewInfo || tagReviewInfo.result !== ReviewItemResult.REJECT) {\n                tagReviewInfo = {\n                  result: 'reject',\n                  id: currentClick.id,\n                  type: []\n                };\n              }\n              const item = store.ontology.getItem(currentClick.type, currentClick.id);\n              this.setState({\n                tagOpenReview: item,\n                tagReviewInfo\n              });\n              this.editor.blur();\n              break;\n            }\n          default:\n            break;\n        }\n      }\n    };\n    // update text\n    this.onContentChange = (editorState, data, type) => {\n      const {\n        currentBrush,\n        editorState: preState,\n        findPanelVisible,\n        inputEnable\n      } = this.state;\n      if (isAnnotationReadonly(this.toolMode) || store.config.reviewMode === ReviewModeType.REVIEW || (currentBrush || findPanelVisible || !inputEnable) && type === undefined || this.props.read_only) {\n        return preState;\n      }\n      const {\n        slice,\n        prevSlice,\n        tags,\n        prevTags\n      } = data;\n      let {\n        prevStart,\n        prevEnd\n      } = data;\n      if (prevSlice.length === 1 && slice.length === 0) this.addHistory(ACTION.EDIT_SINGLE_DEL, data);else if (prevSlice.length === 0 && slice.length === 1) this.addHistory(ACTION.EDIT_SINGLE_ADD, data);else if (type === ACTION.EDIT_REPLACE) this.addHistory(ACTION.EDIT_REPLACE, data);else this.addHistory(ACTION.EDIT_DEFAULT, data);\n      prevStart = strlen(store.ontology.text.slice(0, data.prevStart));\n      prevEnd = strlen(store.ontology.text.slice(0, data.prevEnd));\n      store.ontology.text = store.ontology.text.slice(0, data.prevStart) + data.slice + store.ontology.text.slice(data.prevEnd);\n      // update labels and insertions\n      const offset = slice.length - prevSlice.length;\n      if (type === ACTION.EDIT_REPLACE && prevTags) {\n        const {\n          insertions = [],\n          labels = [],\n          connections = []\n        } = prevTags;\n        [...insertions, ...labels, ...connections].forEach(t => {\n          store.ontology.deleteTag(t.type, t.id);\n        });\n      }\n      store.ontology.tagMove(prevStart, prevEnd, offset);\n      if (type === ACTION.EDIT_REPLACE && tags) {\n        const {\n          insertions = [],\n          labels = [],\n          connections = []\n        } = tags;\n        [...insertions, ...labels, ...connections].forEach(t => {\n          store.ontology.addResultItem(t);\n        });\n      }\n\n      // update rawDraftContentState, using new text and results\n      this.raw = this.renderTextArea();\n\n      // update editorState, using new rawDraftContentState\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      return editorState;\n    };\n    this.resetCurrentFocus = (attribute = 'currentClick', shouldUpdate) => new Promise(resolve => {\n      this.setState({\n        [`${attribute}`]: {\n          id: null,\n          from: null,\n          to: null\n        }\n      }, () => resolve('state updated'));\n    }).then(() => {\n      if (shouldUpdate) {\n        return this.updateEditorAndRender();\n      }\n    });\n    this.resetCurrentFrom = () => {\n      this.setState({\n        currentFrom: {\n          type: null,\n          id: null,\n          offset: null\n        }\n      });\n    };\n    // to status for tag: connection mode and other mode\n    this.onTagClick = (e, type, id) => {\n      const {\n        currentFrom,\n        currentBrush,\n        editorState,\n        tagMap\n      } = this.state;\n      const offset = tagMap.getItem(id, type);\n      this.editor.blur();\n      if (!isConnection(currentBrush === null || currentBrush === void 0 ? void 0 : currentBrush.type)) return;\n\n      // connecting mode only applys to label and insertion\n      if (isLabel(type) || isInsertion(type)) {\n        // if there is no starting point, setup the starting point\n        if (!currentFrom.type) {\n          this.setState({\n            currentFrom: {\n              type,\n              id,\n              offset\n            }\n          });\n        } else {\n          const nextEditorState = this.addConnection(editorState, {\n            fromId: currentFrom.id,\n            fromType: currentFrom.type,\n            toId: id,\n            toType: type,\n            type: TAG.CONNECTION,\n            value: currentBrush.text,\n            keys: currentBrush.keys\n          });\n          this.renderAndSave(nextEditorState, true, true);\n        }\n      }\n    };\n    this.onTagDoubleClick = e => {\n      // only work in qa mode\n      if (!store.reviewable && !store.isRework) {\n        return;\n      }\n      const {\n        id,\n        type\n      } = getTargetWrapperDataSet(e);\n      const item = store.ontology.getItem(type, id);\n      const tagReviewInfo = store.review.getReview(id);\n      this.setState({\n        tagOpenReview: item,\n        tagReviewInfo\n      });\n      this.editor.blur();\n    };\n    // mouseEvent includes: mouse enter, mouse leave, mouse click, mouse context menu\n    this.TagMouseEvent = (e, type, id, focusType, active) => {\n      const {\n        currentClick: {\n          id: currId\n        }\n      } = this.state;\n      const tag = store.ontology.getItem(type, id);\n      if (!tag) {\n        return;\n      }\n      let attribute = '';\n      if (focusType === FOCUS_TYPE.HOVER) {\n        if (currId === tag.id && active) return;\n        attribute = 'currentHover';\n      } else if (focusType === FOCUS_TYPE.CLICK) {\n        attribute = 'currentClick';\n        this.editor.blur();\n      }\n\n      // active status: mouse enter | mouse click\n      if (active) {\n        if (focusType === FOCUS_TYPE.CLICK) {\n          this.onTagClick(e, type, id);\n        }\n        // ranges.push({ offset: label.start, length: label.end - label.start, style: `${focusType}_STYLE_${color}` });\n        this.setState({\n          [`${attribute}`]: {\n            id: tag.id,\n            fromId: tag === null || tag === void 0 ? void 0 : tag.fromId,\n            toId: tag === null || tag === void 0 ? void 0 : tag.toId,\n            fromType: tag === null || tag === void 0 ? void 0 : tag.fromType,\n            toType: tag === null || tag === void 0 ? void 0 : tag.toType,\n            type: tag === null || tag === void 0 ? void 0 : tag.type\n          }\n        }, () => {\n          this.updateEditorAndRender();\n        });\n      } else {\n        // unactive status: mouse leave | mouse context menu\n        const tagType = type;\n        this.resetCurrentFocus(attribute, true).then(() => {\n          if (focusType === FOCUS_TYPE.CLICK) {\n            this.onContextMenu(e, tag.id, tagType);\n          }\n        });\n      }\n    };\n    this.onContextMenu = (e, id, type) => {\n      let nextEditorState;\n      switch (type) {\n        case TAG.LABEL:\n        case TAG.CONNECTION:\n        case TAG.INSERTION:\n          nextEditorState = this.deleteTag(type, id);\n          break;\n        case TAG.LABEL_QA:\n          {\n            const {\n              editorState\n            } = this.deleteQATag(id);\n            nextEditorState = editorState;\n            break;\n          }\n        default:\n          return;\n      }\n      this.renderAndSave(nextEditorState);\n    };\n    this.setCurrentBrush = (item, input = false) => {\n      this.setState({\n        currentBrush: item,\n        inputEnable: input\n      });\n    };\n    this.setFormVisible = () => {\n      this.setState({\n        tagOpenReview: null,\n        tagReviewInfo: null\n      });\n    };\n    this.genKeyCommand = e => {\n      if (e.metaKey || e.altKey) return KEY_COMMAND.INVALID_KEY;\n      switch (e.keyCode) {\n        case 90:\n          // prevent default undo\n          e.preventDefault();\n          if (e.ctrlKey) return KEY_COMMAND.HANDLE_UNDO;\n          return getDefaultKeyBinding(e);\n        case 89:\n          // prevent default redo\n          e.preventDefault();\n          if (e.ctrlKey) return KEY_COMMAND.HANDLE_REDO;\n          return getDefaultKeyBinding(e);\n        case 13:\n          e.preventDefault();\n          return KEY_COMMAND.HANDLE_RETURN;\n        default:\n          return getDefaultKeyBinding(e);\n      }\n    };\n    this.handleKeyCommand = command => {\n      const {\n        editorState\n      } = this.state;\n      switch (command) {\n        case KEY_COMMAND.INVALID_KEY:\n          return 'handled';\n        case KEY_COMMAND.HANDLE_RETURN:\n          {\n            const start = editorState.getSelection().getStartOffset();\n            const end = editorState.getSelection().getEndOffset();\n            const nextEditorState = setSelection(this.onContentChange(editorState, {\n              slice: '\\n',\n              prevSlice: store.ontology.text.slice(start, end),\n              prevStart: start,\n              prevEnd: end,\n              start: start + 1,\n              end: start + 1\n            }), start + 1, start + 1);\n            this.renderAndSave(nextEditorState);\n            return 'handled';\n          }\n        case KEY_COMMAND.HANDLE_UNDO:\n          return 'handled';\n        case KEY_COMMAND.HANDLE_REDO:\n          return 'handled';\n        default:\n          return 'not-handled';\n      }\n    };\n    // Get one anchor by slice head\n    this.getAnchorElementByHead = at => {\n      const {\n        sliceMap\n      } = this;\n      const wrapper = this.editorWrapper.querySelector('.public-DraftStyleDefault-block');\n      const id = `span-wrapper-0-${sliceMap.get(at)}`;\n      const span = wrapper.querySelector(`[data-offset-key='${id}']`);\n      return span;\n    };\n    // Get all anchors at one time\n    this.getAnchorElementsByHeads = () => {\n      const {\n        sliceMap\n      } = this;\n      const wrapper = this.editorWrapper.querySelector('.public-DraftStyleDefault-block');\n      const spanMap = new Map();\n      sliceMap.forEach((value, key) => {\n        const id = `span-wrapper-0-${sliceMap.get(key)}`;\n        const span = wrapper.querySelector(`[data-offset-key='${id}']`);\n        spanMap.set(key, span);\n      });\n      return spanMap;\n    };\n    this.onMouseDown = e => {\n      if (e.which === 1) {\n        this.mouseFlag = true;\n      }\n      const onMouseUp = () => {\n        this.mouseFlag = false;\n        window.removeEventListener('mouseup', onMouseUp);\n      };\n      window.addEventListener('mouseup', onMouseUp);\n    };\n    this.onCompositionEnd = () => {\n      this.compositionFlag = COMPOSITION.PENDING;\n    };\n    this.onCompositionStart = () => {\n      this.compositionFlag = COMPOSITION.ENABLED;\n      this.compositionTop = this.editorWrapper.scrollTop;\n    };\n    this.handleBeforeInput = () => {\n      this.inputFlag = true;\n      return 'not-handled';\n    };\n    this.handlePastedText = () => {\n      this.pasteFlag = true;\n      return 'not-handled';\n    };\n    setLocale(props.locale);\n    this.raw = {\n      blocks: [],\n      entityMap: {}\n    };\n    this.sliceMap = new Map();\n    this.state = {\n      foundTags: [],\n      needJumpFound: false,\n      foundTagSelectedIndex: 0,\n      style: {\n        FIND_BLOCK,\n        FIND_BLOCK_SELECTED\n      },\n      tagOpenReview: null,\n      tagReviewInfo: null,\n      editorState: EditorState.createEmpty(),\n      currentBrush: null,\n      editorHeight: null,\n      editorWidth: null,\n      tagMap: new TagInfoMap(),\n      currentClick: {\n        id: null,\n        fromId: null,\n        toId: null,\n        fromType: null,\n        toType: null\n      },\n      currentHover: {\n        id: '',\n        fromId: null,\n        toId: null,\n        fromType: null,\n        toType: null\n      },\n      currentFrom: {\n        type: null,\n        id: null,\n        offset: null\n      },\n      currentMouse: {\n        left: 0,\n        top: 0\n      },\n      inputEnable: false\n    };\n    this.compositionTop = -1;\n    this.compositionFlag = COMPOSITION.DISABLED;\n    this.inputFlag = false;\n    this.mouseFlag = false;\n    this.pasteFlag = false;\n    this.undoLock = false;\n    this.redoLock = false;\n    this.redoList = [];\n    this.undoList = [];\n\n    // user setting\n    this.fontColor = FONT_COLOR;\n    this.toolMode = this.props.jobProxy.toolMode || this.props.mode;\n    store.jobProxy = this.props.jobProxy;\n  }\n  submitReviews(isSubmit = true) {\n    return store.saveReviews(isSubmit);\n  }\n  getReviews() {\n    return this.submitReviews();\n  }\n  getStatistics() {\n    return store.getAuditStatistics();\n  }\n  async componentDidMount() {\n    this.toolMode = this.props.jobProxy.toolMode;\n    let {\n      content\n    } = this.props;\n    let results;\n\n    // insert qa tool's label\n    try {\n      const resultRes = await this.props.jobProxy.loadResult();\n      if ((resultRes === null || resultRes === void 0 ? void 0 : resultRes.results) && (resultRes === null || resultRes === void 0 ? void 0 : resultRes.content)) {\n        content = resultRes.content;\n        results = resultRes.results;\n      } else if ((resultRes === null || resultRes === void 0 ? void 0 : resultRes.labels) && (resultRes === null || resultRes === void 0 ? void 0 : resultRes.connections) && (resultRes === null || resultRes === void 0 ? void 0 : resultRes.insertions)) {\n        results = resultRes;\n      }\n    } catch (e) {\n      notification.error({\n        message: localMessage('ANNOTATION_DATA_LOAD_ERROR'),\n        duration: null\n      });\n      return;\n    }\n\n    // init store\n    try {\n      await store.init({\n        ...this.props,\n        content: content || ''\n      });\n    } catch (e) {\n      notification.error({\n        message: e.message,\n        duration: null\n      });\n      return;\n    }\n\n    // initialize results\n    store.ontology.parseResults(results);\n    const reviewRes = await this.props.jobProxy.loadReviews();\n    if (reviewRes) {\n      store.review.parseReview(reviewRes);\n    }\n\n    // initialize raw\n    this.raw = this.renderTextArea();\n    this.editorWrapper.addEventListener('compositionstart', this.onCompositionStart);\n    this.editorWrapper.addEventListener('compositionend', this.onCompositionEnd);\n    this.editorWrapper.addEventListener('mousedown', this.onMouseDown);\n    this.editorWrapper.addEventListener('dragstart', e => e.preventDefault());\n    this.editorWrapper.addEventListener('contextmenu', e => {\n      e.preventDefault();\n      this.resetCurrentFrom();\n      this.resetCurrentFocus('currentClick', true);\n    });\n    this.editorWrapper.addEventListener('mousemove', this.onMouseMove);\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('resize', () => this.renderAndSave(null, true, false, false));\n\n    // initialize customStyleMap\n    this.setState({\n      style: {\n        ...this.state.style,\n        DEFAULT_STYLE: {\n          color: this.fontColor,\n          fontSize: `${FONT_SIZE}px`,\n          lineHeight: `${LINE_HEIGHT}px`,\n          letterSpacing: `${FONT_SPACE}px`\n        },\n        MISSING_STYLE: {\n          color: '#000000'\n        }\n      }\n    });\n    this.renderAndSave(EditorState.createWithContent(convertFromRaw(this.raw)), true, true, false);\n    // use url file backup to replace content, results, and reviews information\n    // use local storage backup to replace text, results, and reviews information\n    // save every 5 minutes\n    setInterval(() => {\n      this.onSave();\n    }, 1000 * 60 * 5);\n    if (this.props.renderComplete) {\n      this.props.renderComplete();\n    }\n  }\n  render() {\n    var _currentFrom$offset, _currentFrom$offset2;\n    const {\n      editorState,\n      style,\n      currentBrush,\n      editorWidth,\n      editorHeight,\n      currentClick,\n      currentHover,\n      currentMouse,\n      currentFrom,\n      tagMap,\n      tagOpenReview,\n      tagReviewInfo,\n      inputEnable\n    } = this.state;\n    const {\n      config\n    } = store;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1381,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topbar-wrapper\",\n      onClick: () => {\n        this.editorOnFocus = false;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topbar-left-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 11\n      }\n    }, isAppenCloud() && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AppenLogo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(ReviewMode, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"divider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1390,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(UndoRedo, {\n      undoHandle: () => this.executeHistory(RECALL_TYPE.UNDO),\n      redoHandle: () => this.executeHistory(RECALL_TYPE.REDO),\n      undoList: this.undoList,\n      redoList: this.redoList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1391,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"divider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1397,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Save, {\n      onSave: this.onSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1398,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topbar-right-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1400,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(TextToolContext.Provider, {\n      value: {\n        moveFocusToTag: this.moveFocusToTag,\n        deleteReviewItemById: this.deleteReviewItemById,\n        deleteReviewItemsById: this.deleteReviewItemsById\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      showReview: isRework(this.toolMode) || isReviewEditable(this.toolMode),\n      onClick: () => {\n        this.editorOnFocus = false;\n      },\n      currentBrush: currentBrush,\n      inputEnable: inputEnable,\n      setCurrentBrush: this.setCurrentBrush,\n      items: tagMap,\n      contentReadyOnly: this.props.read_only,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1405,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1415,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"editor-wrapper\",\n      ref: r => {\n        this.editorWrapper = r;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"svg-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1420,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      ref: r => {\n        this.svg = r;\n      },\n      style: {\n        height: `${editorHeight}px`,\n        width: `${editorWidth}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 15\n      }\n    }, Object.entries(tagMap.connections).map(([id, connect]) => /*#__PURE__*/React.createElement(\"g\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      d: connect.path,\n      stroke: currentHover.id === id ? HOVER_COLOR : currentClick.id === id ? FOCUS_COLOR : DEFAULT_COLOR,\n      fill: \"#00000000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424,\n        columnNumber: 21\n      }\n    }))), currentFrom.type ? /*#__PURE__*/React.createElement(\"path\", {\n      d: `M ${(_currentFrom$offset = currentFrom.offset) === null || _currentFrom$offset === void 0 ? void 0 : _currentFrom$offset.left} ${(_currentFrom$offset2 = currentFrom.offset) === null || _currentFrom$offset2 === void 0 ? void 0 : _currentFrom$offset2.top} L ${currentMouse.left} ${currentMouse.top}`,\n      stroke: FOCUS_COLOR,\n      fill: \"#00000000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1432,\n        columnNumber: 19\n      }\n    }) : null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tags-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tags-panel\",\n      style: {\n        height: `${editorHeight}px`,\n        width: `${editorWidth}px`\n      },\n      onDoubleClick: this.onTagDoubleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 15\n      }\n    }, Object.entries(tagMap.labels).map(([id, label]) => {\n      var _store$review$getRevi;\n      return /*#__PURE__*/React.createElement(LabelTag, {\n        key: id,\n        reviewResult: (_store$review$getRevi = store.review.getReview(id)) === null || _store$review$getRevi === void 0 ? void 0 : _store$review$getRevi.result,\n        label: label,\n        isHover: currentHover.id === id || currentHover.fromId === id || currentHover.toId === id,\n        isClick: currentClick.id === id || currentClick.fromId === id || currentClick.toId === id,\n        labelMouseEvent: this.TagMouseEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1443,\n          columnNumber: 19\n        }\n      });\n    }), Object.entries(tagMap.insertions).map(([id, insertion]) => {\n      var _store$review$getRevi2;\n      return /*#__PURE__*/React.createElement(InsertionTag, {\n        key: id,\n        reviewResult: (_store$review$getRevi2 = store.review.getReview(id)) === null || _store$review$getRevi2 === void 0 ? void 0 : _store$review$getRevi2.result,\n        insertion: insertion,\n        isHover: currentHover.id === id || currentHover.fromId === id || currentHover.toId === id,\n        isClick: currentClick.id === id || currentClick.fromId === id || currentClick.toId === id,\n        insertionMouseEvent: this.TagMouseEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1461,\n          columnNumber: 19\n        }\n      });\n    }), Object.entries(tagMap.connections).map(([id, connection]) => {\n      var _store$review$getRevi3;\n      return /*#__PURE__*/React.createElement(ConnectionTag, {\n        key: id,\n        reviewResult: (_store$review$getRevi3 = store.review.getReview(id)) === null || _store$review$getRevi3 === void 0 ? void 0 : _store$review$getRevi3.result,\n        connection: connection,\n        isHover: currentHover.id === id,\n        isClick: currentClick.id === id,\n        connectionMouseEvent: this.TagMouseEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1479,\n          columnNumber: 19\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => {\n        this.editor.focus();\n        this.resetCurrentFocus('currentClick', true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1490,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      ref: r => {\n        this.editor = r;\n      },\n      editorState: editorState,\n      customStyleMap: style,\n      onChange: this.onChange,\n      handlePastedText: this.handlePastedText,\n      handleBeforeInput: this.handleBeforeInput,\n      handleKeyCommand: this.handleKeyCommand,\n      keyBindingFn: this.genKeyCommand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(ReviewForm, {\n      toolMode: this.toolMode,\n      tagReviewInfo: tagReviewInfo,\n      tagOpenReview: tagOpenReview,\n      issueTypes: this.props.issue_types,\n      setFormVisible: this.setFormVisible,\n      onConfirm: review => {\n        this.addReview(editorState, tagOpenReview === null || tagOpenReview === void 0 ? void 0 : tagOpenReview.id, review);\n        store.ontology.updateOntologiesStatusMap();\n      },\n      onDelete: this.onDeleteReview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"names":["React","createContext","Editor","EditorState","convertFromRaw","getDefaultKeyBinding","notification","message","uniq","substr","strlen","v4","uuidv4","localMessage","setLocale","LabelTag","InsertionTag","ConnectionTag","isAnnotationReadonly","isRework","isReviewEditable","isPreview","Sidebar","genTagMap","renderTagMap","ReviewForm","UndoRedo","ReviewMode","Save","isAppenCloud","AppenLogo","store","FIND_BLOCK","FIND_BLOCK_SELECTED","FOCUS_COLOR","DEFAULT_COLOR","FONT_COLOR","BASE_COLOR","HISTORY_SIZE","FONT_SIZE","TAG_HEIGHT","LINE_HEIGHT","EDITOR_PADDING","COMPOSITION","SELECTION","ACTION","KEY_COMMAND","RECALL_TYPE","HOVER_COLOR","FONT_SPACE","FOCUS_TYPE","HOVER_ALPHA","ACTIVE_ALPHA","DEFAULT_ALPHA","isArabic","convertArrayToColor","convertColorToArray","getSliceHead","setSelection","closeSelection","getTextByInsertion","getTargetWrapperDataSet","getConfigByKeys","isLabel","isInsertion","isConnection","isQATag","ReviewItemResult","TAG","ReviewModeType","TagInfoMap","TextToolContext","TextAnnotationApp","Component","constructor","props","addHistory","type","data","targetList","undoLock","redoList","redoLock","undoList","length","shift","EDIT_SINGLE_ADD","prev","EDIT_DEFAULT","prevSlice","end","prevStart","pop","push","slice","prevEnd","start","EDIT_SINGLE_DEL","executeHistory","recallType","UNDO","REDO","item","nextEditorState","state","editorState","EDIT_REPLACE","newData","tags","prevTags","onContentChange","ADD_INSERTION","id","insertion","deleteTag","ADD_LABEL","label","ADD_MISSING_REVIEW","preReview","addReview","deleteQATag","ADD_CONNECTION","DEL_LABEL","relatedConnections","addLabel","DEL_MISSING_REVIEW","review","addQALabel","DEL_INSERTION","addInsertion","DEL_CONNECTION","connection","addConnection","EDIT_REPLACE_ALL","text","currentText","prevText","prevResults","results","ontology","setResults","raw","renderTextArea","set","currentContent","ADD_REVIEW","deleteReview","DELETE_REVIEW","ADD_REVIEWS","deleteReviewItems","DELETE_REVIEWS","addReviewItems","renderAndSave","_editorState","shouldRenderTags","shouldResetCurrentState","shouldSaveURL","hasFocus","getSelection","top","editorWrapper","scrollTop","Promise","resolve","resetCurrentFrom","setState","exportResult","then","tagMap","measureTags","updateOntologiesStatusMap","renderTags","editorWidth","offsetWidth","editorHeight","scrollHeight","compositionTop","editor","focus","y","updateEditorAndRender","options","Symbol","iterator","onChange","compositionFlag","ENABLED","prevEditorState","getCurrentContent","getPlainText","getStartOffset","getEndOffset","prevFocus","inputFlag","pasteFlag","PENDING","DISABLED","onSelectionChange","shouldRender","MOVE","spanMap","getAnchorElementsByHeads","newTagMap","onSave","toolMode","submitReviews","success","e","warning","onSubmit","params","invalid","validityFlag","config","submitCheck","skipCheckForInvalidData","validation","defaultSync","blocked","Error","isSubmit","saveResult","labels","insertions","getResults","offsetTops","map","_spanMap$get","get","offsetTop","concat","_spanMap$get2","at","occupyMap","Map","forEach","ontologyConfigMap","ranges","blocks","inlineStyleRanges","style","filter","span","getAnchorElementByHead","offset","occupyList","lineHeight","it","sort","a","b","currentBrush","mouseFlag","fbAt","value","keys","INSERTION","CLICK","fbStart","fbEnd","result","MISSING","DRAG","reviewMode","REVIEW","operation","arabic","newItem","isReview","addResultItem","fromId","fromType","toId","toType","connections","some","LABELING","reviewInfo","needUnRedo","needOpenReview","reviews","missing","tagOpenReview","addMissingReview","deleteMissingReview","reviewId","currEditorState","setReview","deleteReviewItemById","reviewItem","getItemById","deleteReviewItemsById","reviewIds","operations","reviewItems","deleteReviewHandle","onDeleteReview","_text","currentClick","currentHover","foundTags","foundTagSelectedIndex","needJumpFound","slices","t","labelHeads","insertionHeads","foundTagHeads","tag","key","depth","children","entityRanges","entityMap","sliceCount","sliceMap","anchor","index","array","next","match","currentRGB","currentAlpha","nextAlpha","isCoverbyQa","keepRGB","labelItem","tempRGB","color","i","v","tagIndex","findIndex","f","undefined","baseRGB","Math","min","currentColor","backgroundColor","indexOf","head","onMouseMove","box","svg","getBoundingClientRect","currentMouse","left","clientX","x","clientY","moveFocusToTag","getItem","clientHeight","onKeyDown","window","disableTextHotKeys","keyCode","ctrlKey","altKey","preventDefault","setCurrentBrush","nTag","moveToTagByStep","nxtTag","stepToTag","nextTag","stopPropagation","tagReviewInfo","getReview","REJECT","blur","preState","findPanelVisible","inputEnable","read_only","tagMove","resetCurrentFocus","attribute","shouldUpdate","from","to","currentFrom","onTagClick","CONNECTION","onTagDoubleClick","reviewable","TagMouseEvent","focusType","active","currId","HOVER","tagType","onContextMenu","LABEL","LABEL_QA","input","setFormVisible","genKeyCommand","metaKey","INVALID_KEY","HANDLE_UNDO","HANDLE_REDO","HANDLE_RETURN","handleKeyCommand","command","wrapper","querySelector","onMouseDown","which","onMouseUp","removeEventListener","addEventListener","onCompositionEnd","onCompositionStart","handleBeforeInput","handlePastedText","locale","createEmpty","fontColor","jobProxy","mode","saveReviews","getReviews","getStatistics","getAuditStatistics","componentDidMount","content","resultRes","loadResult","error","duration","init","parseResults","reviewRes","loadReviews","parseReview","DEFAULT_STYLE","fontSize","letterSpacing","MISSING_STYLE","createWithContent","setInterval","renderComplete","render","_currentFrom$offset","_currentFrom$offset2","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","editorOnFocus","undoHandle","redoHandle","Provider","showReview","items","contentReadyOnly","ref","r","height","width","Object","entries","connect","d","path","stroke","fill","onDoubleClick","_store$review$getRevi","reviewResult","isHover","isClick","labelMouseEvent","_store$review$getRevi2","insertionMouseEvent","_store$review$getRevi3","connectionMouseEvent","customStyleMap","keyBindingFn","issueTypes","issue_types","onConfirm","onDelete"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/TextAnnotationApp.jsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable no-undef */\n/* eslint-disable no-underscore-dangle */\nimport React, { createContext } from 'react';\nimport { Editor, EditorState, convertFromRaw, getDefaultKeyBinding } from 'draft-js';\nimport { notification, message } from 'antd';\nimport { uniq } from 'lodash';\nimport { substr, strlen } from 'fbjs/lib/UnicodeUtils';\nimport { v4 as uuidv4 } from 'uuid';\nimport localMessage, { setLocale } from './locale';\nimport { LabelTag, InsertionTag, ConnectionTag } from './components/tag';\nimport { isAnnotationReadonly, isRework, isReviewEditable, isPreview } from '../../utils/tool-mode';\nimport Sidebar from './components/sidebar';\nimport { genTagMap, renderTagMap } from './utils/tagMapUtil';\n\nimport ReviewForm from './components/reviewForm';\nimport UndoRedo from './components/UndoRedo';\nimport ReviewMode from './components/ReviewMode';\nimport Save from './components/Save';\nimport { isAppenCloud } from '../../utils';\nimport AppenLogo from '../common/AppenLogo';\nimport store from './store/RootStore';\nimport './TextAnnotationApp.scss';\nimport 'draft-js/dist/Draft.css';\nimport {\n  FIND_BLOCK,\n  FIND_BLOCK_SELECTED,\n  FOCUS_COLOR, DEFAULT_COLOR,\n  FONT_COLOR, BASE_COLOR, HISTORY_SIZE,\n  FONT_SIZE, TAG_HEIGHT,\n  LINE_HEIGHT, EDITOR_PADDING,\n  COMPOSITION, SELECTION, ACTION, KEY_COMMAND,\n  RECALL_TYPE,\n  HOVER_COLOR,\n  FONT_SPACE, FOCUS_TYPE,\n  HOVER_ALPHA,\n  ACTIVE_ALPHA,\n  DEFAULT_ALPHA,\n} from './store/constant';\nimport {\n  isArabic,\n  convertArrayToColor,\n  convertColorToArray,\n  getSliceHead,\n  setSelection,\n  closeSelection,\n  getTextByInsertion,\n  getTargetWrapperDataSet,\n  getConfigByKeys,\n} from './utils/helper';\nimport {\n  isLabel,\n  isInsertion,\n  isConnection,\n  isQATag,\n} from './store/tag_mode';\nimport { ReviewItemResult, TAG, ReviewMode as ReviewModeType } from './types';\nimport TagInfoMap from './utils/TagInfoMap';\n\nexport const TextToolContext = createContext();\nexport default class TextAnnotationApp extends React.Component {\n  constructor(props) {\n    super(props);\n    setLocale(props.locale);\n    this.raw = { blocks: [], entityMap: {} };\n    this.sliceMap = new Map();\n    this.state = {\n      foundTags: [],\n      needJumpFound: false,\n      foundTagSelectedIndex: 0,\n      style: {\n        FIND_BLOCK,\n        FIND_BLOCK_SELECTED,\n      },\n      tagOpenReview: null,\n      tagReviewInfo: null,\n      editorState: EditorState.createEmpty(),\n      currentBrush: null,\n      editorHeight: null,\n      editorWidth: null,\n      tagMap: new TagInfoMap(),\n      currentClick: {\n        id: null,\n        fromId: null,\n        toId: null,\n        fromType: null,\n        toType: null,\n      },\n      currentHover: {\n        id: '',\n        fromId: null,\n        toId: null,\n        fromType: null,\n        toType: null,\n      },\n      currentFrom: {\n        type: null,\n        id: null,\n        offset: null,\n      },\n      currentMouse: {\n        left: 0,\n        top: 0,\n      },\n      inputEnable: false,\n    };\n\n    this.compositionTop = -1;\n    this.compositionFlag = COMPOSITION.DISABLED;\n    this.inputFlag = false;\n    this.mouseFlag = false;\n    this.pasteFlag = false;\n    this.undoLock = false;\n    this.redoLock = false;\n    this.redoList = [];\n    this.undoList = [];\n\n    // user setting\n    this.fontColor = FONT_COLOR;\n    this.toolMode = this.props.jobProxy.toolMode || this.props.mode;\n    store.jobProxy = this.props.jobProxy;\n  };\n\n  addHistory = (type, data) => {\n    let targetList;\n    if (this.undoLock) {\n      // Add history to redo list\n      targetList = this.redoList;\n    } else if (this.redoLock) {\n      // Add history back to undo list\n      targetList = this.undoList;\n      // Clear redo list\n    } else {\n      // Add history to redo list\n      targetList = this.undoList;\n      this.redoList = [];\n    }\n    let { length } = targetList;\n    if (length > HISTORY_SIZE) {\n      targetList.shift();\n      length -= 1;\n    }\n    if (type === ACTION.EDIT_SINGLE_ADD && length >= 1) {\n      const prev = targetList[length - 1];\n      if ((prev.type === ACTION.EDIT_DEFAULT || prev.type === ACTION.EDIT_SINGLE_ADD) && (prev.data.prevSlice === '' && prev.data.end === data.prevStart)) {\n        targetList.pop();\n        targetList.push({\n          type: ACTION.EDIT_DEFAULT,\n          data: {\n            prevSlice: '',\n            slice: prev.data.slice + data.slice,\n            prevStart: prev.data.prevStart,\n            prevEnd: prev.data.prevEnd,\n            start: data.start,\n            end: data.end,\n          }\n        });\n      } else targetList.push({ type, data });\n    } else if (type === ACTION.EDIT_SINGLE_DEL && length >= 1) {\n      const prev = targetList[length - 1];\n      if ((prev.type === ACTION.EDIT_DEFAULT || prev.type === ACTION.EDIT_SINGLE_DEL) && (prev.data.slice === '' && data.prevEnd === prev.data.start)) {\n        targetList.pop();\n        targetList.push({\n          type: ACTION.EDIT_DEFAULT,\n          data: {\n            slice: '',\n            prevSlice: data.prevSlice + prev.data.prevSlice,\n            prevStart: data.end,\n            prevEnd: prev.data.prevEnd,\n            start: data.start,\n            end: data.end,\n          }\n        });\n      } else targetList.push({ type, data });\n    } else targetList.push({ type, data });\n  };\n\n  executeHistory = (recallType) => {\n    // Execute history\n    let targetList;\n    if (recallType === RECALL_TYPE.UNDO) {\n      // Get from undo list\n      this.undoLock = true;\n      targetList = this.undoList;\n    } else if (recallType === RECALL_TYPE.REDO) {\n      // Get from redo list\n      this.redoLock = true;\n      targetList = this.redoList;\n    }\n    if (targetList.length === 0) {\n      this.undoLock = false;\n      this.redoLock = false;\n      return;\n    }\n    const item = targetList.pop();\n    const { data } = item;\n    let nextEditorState = this.state.editorState;\n    switch (item.type) {\n      case ACTION.EDIT_SINGLE_ADD:\n      case ACTION.EDIT_SINGLE_DEL:\n      case ACTION.EDIT_DEFAULT:\n      case ACTION.EDIT_REPLACE:\n      {\n        const newData = {\n          prevSlice: data.slice,\n          slice: data.prevSlice,\n          start: data.prevEnd,\n          end: data.prevEnd,\n          prevStart: data.prevStart,\n          prevEnd: data.end,\n          ...item.type === ACTION.EDIT_REPLACE && {\n            tags: data.prevTags,\n            prevTags: data.tags,\n          }\n        };\n        // nextEditorState = this.onContentChange(nextEditorState, newData);\n        nextEditorState = setSelection(this.onContentChange(nextEditorState, newData, item.type), newData.start, newData.end);\n        break;\n      }\n      case ACTION.ADD_INSERTION:\n      {\n        const { type, id } = data.insertion;\n        nextEditorState = this.deleteTag(type, id);\n        break;\n      }\n      case ACTION.ADD_LABEL:\n      {\n        const { type, id } = data.label;\n        nextEditorState = this.deleteTag(type, id);\n        break;\n      }\n      case ACTION.ADD_MISSING_REVIEW:\n      {\n        const { preReview, id } = data;\n        if (preReview) {\n          const { editorState } = this.addReview(nextEditorState, id, { ...preReview });\n          nextEditorState = editorState;\n        } else {\n          const { editorState } = this.deleteQATag(id);\n          nextEditorState = editorState;\n        }\n        break;\n      }\n      case ACTION.ADD_CONNECTION:\n      {\n        const { type, id } = data;\n        nextEditorState = this.deleteTag(type, id);\n        break;\n      }\n      case ACTION.DEL_LABEL:\n      {\n        const { relatedConnections, label } = data;\n        nextEditorState = this.addLabel(nextEditorState, label, relatedConnections);\n        break;\n      }\n      case ACTION.DEL_MISSING_REVIEW:\n      {\n        const { label, review } = data;\n        const { editorState } = this.addQALabel(nextEditorState, label, { ...review });\n        nextEditorState = editorState;\n\n        break;\n      }\n      case ACTION.DEL_INSERTION:\n      {\n        const { relatedConnections, insertion } = data;\n\n        nextEditorState = this.addInsertion(nextEditorState, insertion, relatedConnections);\n        break;\n      }\n      case ACTION.DEL_CONNECTION:\n      {\n        const { connection } = data;\n        nextEditorState = this.addConnection(nextEditorState, connection);\n        break;\n      }\n      case ACTION.EDIT_REPLACE_ALL:\n      {\n        const { text: currentText, prevText, prevResults, results } = data;\n        store.ontology.text = prevText;\n        store.ontology.setResults(prevResults);\n        this.raw = this.renderTextArea(prevText);\n        nextEditorState = EditorState.set(nextEditorState, { currentContent: convertFromRaw(this.raw) });\n        this.addHistory(ACTION.EDIT_REPLACE_ALL, {\n          text: prevText,\n          prevText: currentText,\n          prevResults: results,\n          results: prevResults,\n        });\n        break;\n      }\n      case ACTION.ADD_REVIEW: {\n        const { preReview, id } = data;\n        if (preReview) {\n          const { editorState } = this.addReview(nextEditorState, id, { ...preReview });\n          nextEditorState = editorState;\n        } else {\n          const { editorState } = this.deleteReview(id);\n          nextEditorState = editorState;\n        }\n        break;\n      }\n      case ACTION.DELETE_REVIEW: {\n        const { review, id } = data;\n        const { editorState } = this.addReview(nextEditorState, id, { ...review });\n        nextEditorState = editorState;\n        break;\n      }\n      case ACTION.ADD_REVIEWS: {\n        nextEditorState = this.deleteReviewItems(data);\n        break;\n      }\n      case ACTION.DELETE_REVIEWS: {\n        nextEditorState = this.addReviewItems(nextEditorState, data);\n        break;\n      }\n      default:\n        break;\n    }\n\n    this.renderAndSave(nextEditorState);\n    this.undoLock = false;\n    this.redoLock = false;\n  };\n\n  renderAndSave = (\n    _editorState,\n    shouldRenderTags = true,\n    shouldResetCurrentState = false,\n    shouldSaveURL = false,\n  ) => {\n    const editorState = _editorState || this.state.editorState;\n    const { hasFocus } = editorState.getSelection();\n    const top = this.editorWrapper.scrollTop;\n    // window.ew = this.editorWrapper;\n    return new Promise((resolve) => {\n      if (shouldResetCurrentState) {\n        this.resetCurrentFrom();\n      }\n      this.setState({ editorState });\n      if (shouldSaveURL) {\n        this.exportResult();\n      }\n      resolve();\n    }).then(() => {\n      if (shouldRenderTags) {\n        const { nextEditorState, tagMap } = this.measureTags(editorState);\n        return new Promise((resolve) => {\n          this.setState({ editorState: nextEditorState }, () => {\n            store.ontology.updateOntologiesStatusMap();\n          });\n          resolve(tagMap);\n        });\n      }\n    }).then((tagMap) => {\n      if (shouldRenderTags) {\n        this.renderTags(tagMap);\n        return new Promise((resolve) => {\n          this.setState({\n            editorWidth: this.editorWrapper.offsetWidth - EDITOR_PADDING * 2,\n            editorHeight: this.editorWrapper.scrollHeight - EDITOR_PADDING * 2,\n            tagMap,\n          });\n          resolve();\n        });\n      }\n    }).then(() => {\n      if (hasFocus) {\n        // move back to current selection after composition end\n        if (this.compositionTop >= 0) {\n          this.editor.focus({ y: this.compositionTop });\n          this.compositionTop = -1;\n        } else this.editor.focus({ y: top });\n      }\n      return new Promise((resolve) => resolve());\n    });\n  };\n\n  updateEditorAndRender = (options) => {\n    let { editorState } = this.state;\n    // update rawDraftContentState, using new results\n    this.raw = this.renderTextArea();\n    // update editorState, using new rawDraftContentState\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    if (options && typeof options[Symbol.iterator] === 'function') {\n      return this.renderAndSave(editorState, ...options);\n    }\n\n    return this.renderAndSave(editorState);\n  };\n\n  onChange = (editorState) => {\n    // ignore composition operation\n    if (this.compositionFlag === COMPOSITION.ENABLED) return;\n    // get operation type ( handled operation not included )\n    const prevEditorState = this.state.editorState;\n    const prevText = store.ontology.text;\n    const text = editorState.getCurrentContent().getPlainText();\n    let prevStart = prevEditorState.getSelection().getStartOffset();\n    const prevEnd = prevEditorState.getSelection().getEndOffset();\n    const start = editorState.getSelection().getStartOffset();\n    const end = editorState.getSelection().getEndOffset();\n    const { hasFocus } = editorState.getSelection();\n    const { hasFocus: prevFocus } = prevEditorState.getSelection();\n\n    if (hasFocus !== prevFocus) { // when focus change update new editor state and return without doing anything\n      const nextEditorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n      this.renderAndSave(nextEditorState, null, false);\n      return;\n    }\n\n    if (this.inputFlag || this.pasteFlag || this.compositionFlag === COMPOSITION.PENDING || prevText !== text) {\n      /* text changed:\n       * 1. deleted by delete key\n       * 2. deleted by drag + delete key\n       * 3. deleted by drag + cut operation\n       * 4. insert/replace by (drag) + simply typing\n       * 5. insert/replace by (drag) + composition typing\n       * 6. insert/replace by (drag) + paste operation\n       * 7. redo && undo\n       */\n      if (prevStart === prevEnd && start === prevStart - 1) prevStart -= 1;\n      const prevSlice = prevText.slice(prevStart, prevEnd);\n      const slice = text.slice(prevStart, end);\n      const data = { prevSlice, slice, prevStart, prevEnd, start, end };\n      const nextEditorState = this.onContentChange(editorState, data);\n      // reset flag\n      this.inputFlag = false;\n      this.pasteFlag = false;\n      this.compositionFlag = COMPOSITION.DISABLED;\n      this.renderAndSave(nextEditorState);\n    } else {\n      /* selection changed\n       * 1. simply select\n       * 2. click select: add insertion\n       * 3. drag select: add label\n       */\n      const data = { start, end };\n      const { nextEditorState, type } = this.onSelectionChange(editorState, data);\n      const shouldRender = type !== SELECTION.MOVE;\n      this.renderAndSave(nextEditorState, shouldRender, shouldRender);\n    }\n  };\n\n  renderTags = (tagMap) => {\n    const spanMap = this.getAnchorElementsByHeads();\n    const newTagMap = renderTagMap(tagMap, spanMap);\n    return newTagMap;\n  };\n\n  onSave = async () => {\n    if (isPreview(this.toolMode)) return;\n    try {\n      if (!isAnnotationReadonly(this.toolMode)) {\n        await this.exportResult();\n      }\n      if (isReviewEditable(this.toolMode)) {\n        await this.submitReviews(false);\n      }\n      message.success(localMessage('saveSuccess'));\n    } catch (e) {\n      message.warning(localMessage('saveFail'));\n    }\n  };\n\n  onSubmit = async (params) => {\n    const invalid = params && params.validityFlag === 'false';\n    if (store.config.submitCheck && (\n      !invalid || !store.config.skipCheckForInvalidData\n    )) {\n      // validate before submit\n      await store.validation.defaultSync();\n      if (store.validation.blocked) {\n        throw new Error(localMessage('SUBMIT_CHECK_FAIL'));\n      }\n    }\n    return this.exportResult(true);\n  };\n\n  exportResult = (isSubmit = false) => {\n    if (isAnnotationReadonly(this.toolMode)) return;\n    return store.saveResult(isSubmit);\n  };\n\n  submitReviews(isSubmit = true) {\n    return store.saveReviews(isSubmit);\n  }\n\n  getReviews() {\n    return this.submitReviews();\n  }\n\n  getStatistics() {\n    return store.getAuditStatistics();\n  }\n\n  measureTags = (editorState) => {\n    const { raw } = this;\n    const { text } = store.ontology;\n    const { labels, insertions } = store.ontology.getResults();\n\n    const spanMap = this.getAnchorElementsByHeads();\n    const offsetTops = uniq((labels.map((label) => spanMap.get(label.start)?.offsetTop))\n      .concat(insertions.map((insertion) => spanMap.get(insertion.at)?.offsetTop)));\n    const occupyMap = new Map();\n    offsetTops.forEach((offsetTop) => { occupyMap.set(offsetTop, []); });\n\n    // get label offsets\n    const tagMap = genTagMap(store.ontology.getResults(), store.ontology.ontologyConfigMap, spanMap, occupyMap, text);\n    const ranges = raw.blocks[0].inlineStyleRanges;\n    const style = { ...this.state.style };\n    ranges.filter((item) => item.style.slice(0, 6) === 'ANCHOR').forEach((item) => {\n      const span = this.getAnchorElementByHead(item.offset);\n      if (span) {\n        const occupyList = occupyMap.get(span.offsetTop);\n        const lineHeight = occupyList.map((it) => (it.top > 0 ? it.top - FONT_SIZE + TAG_HEIGHT : -it.top))\n          .sort((a, b) => (a - b)).pop() * 2 + LINE_HEIGHT;\n        style[`LINEHEIGHT_${lineHeight}`] = { lineHeight: `${lineHeight}px` };\n        ranges.push({ offset: item.offset, length: item.length, style: `LINEHEIGHT_${lineHeight}` });\n      }\n    });\n    const nextEditorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    this.setState({ style });\n    return { nextEditorState, tagMap };\n  };\n\n  onSelectionChange = (editorState, data) => {\n    const { start, end } = data;\n    const { currentBrush } = this.state;\n    if (!this.mouseFlag) {\n      return { nextEditorState: editorState, type: SELECTION.MOVE };\n    } if (start === end && isInsertion(currentBrush?.type)) {\n      const fbAt = strlen(store.ontology.text.slice(0, start));\n      const nextEditorState = this.addInsertion(editorState, { at: fbAt, value: currentBrush.text, keys: currentBrush.keys, type: TAG.INSERTION });\n      return { nextEditorState, type: SELECTION.CLICK };\n    } if (start !== end && isLabel(currentBrush?.type)) {\n      const fbStart = strlen(store.ontology.text.slice(0, start));\n      const fbEnd = strlen(store.ontology.text.slice(0, end));\n      if (isQATag(currentBrush?.type)) {\n        const { editorState: nextEditorState } = this.addQALabel(editorState, { start: fbStart, end: fbEnd, value: currentBrush.text, keys: currentBrush.keys, type: currentBrush.type }, { result: ReviewItemResult.MISSING }, true, true);\n        return { nextEditorState, type: SELECTION.DRAG };\n      }\n      const nextEditorState = this.addLabel(editorState, { start: fbStart, end: fbEnd, value: currentBrush.text, keys: currentBrush.keys, type: currentBrush.type });\n      return { nextEditorState, type: SELECTION.DRAG };\n    }\n    return { nextEditorState: editorState, type: SELECTION.MOVE };\n  };\n\n  deleteTag = (type, id) => {\n    const { state: { editorState } } = this;\n    if (isQATag(type) && store.config.reviewMode !== ReviewModeType.REVIEW) {\n      return editorState;\n    }\n    if (!isQATag(type) && store.config.reviewMode === ReviewModeType.REVIEW) {\n      return;\n    }\n    if (isAnnotationReadonly(this.toolMode)) {\n      return editorState;\n    }\n\n    const operation = store.ontology.deleteTag(type, id);\n    switch (true) {\n      case (isLabel(type)): this.addHistory(ACTION.DEL_LABEL, operation); break;\n      case (isConnection(type)): this.addHistory(ACTION.DEL_CONNECTION, operation); break;\n      case (isInsertion(type)): this.addHistory(ACTION.DEL_INSERTION, operation); break;\n      default: break;\n    }\n    this.raw = this.renderTextArea();\n    return EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n  };\n\n  addInsertion = (editorState, { at, value, id, keys, type }, relatedConnections = []) => {\n    const { state: { currentBrush }, toolMode } = this;\n    const { text } = store.ontology;\n    if (isAnnotationReadonly(this.toolMode) || store.config.reviewMode === ReviewModeType.REVIEW) return editorState;\n    if (at === strlen(text)) return editorState; // prevent insert to the end of content\n    // eslint-disable-next-line no-restricted-syntax\n    for (const item of store.ontology.results.insertions) {\n      if (item.at === at && item.value === currentBrush.text) return editorState;\n    }\n    if (!id) id = uuidv4();\n    const arabic = isArabic(substr(text, at));\n    if (arabic && at) at -= 1;\n    const newItem = {\n      type,\n      at,\n      value,\n      id,\n      text: getTextByInsertion(store.ontology.text, { at, value }),\n      isReview: isReviewEditable(toolMode),\n      keys,\n    };\n\n    this.addHistory(ACTION.ADD_INSERTION, {\n      insertion: newItem,\n      relatedConnections,\n    });\n\n    store.ontology.addResultItem(newItem, relatedConnections);\n\n    this.raw = this.renderTextArea();\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    editorState = closeSelection(editorState);\n    return editorState;\n  };\n\n  addConnection = (editorState, { fromId, fromType, toId, toType, value, id, keys, type }) => {\n    const { state: { currentBrush }, toolMode } = this;\n    if (isAnnotationReadonly(toolMode) || store.config.reviewMode === ReviewModeType.REVIEW) return editorState;\n    if (fromId === toId) return editorState;\n    if (isQATag(fromType) || isQATag(toType)) return editorState; // can't add connection for qa tool\n\n    if (store.ontology.results.connections.some((item) => item.fromId === fromId && item.toId === toId && item.value === currentBrush.text)) return editorState;\n\n    if (!id) id = uuidv4();\n    const newItem = {\n      type,\n      fromId,\n      fromType,\n      toId,\n      toType,\n      value,\n      id,\n      isReview: isReviewEditable(toolMode),\n      keys,\n    };\n    this.addHistory(ACTION.ADD_CONNECTION, newItem);\n    store.ontology.addResultItem(newItem);\n\n    this.raw = this.renderTextArea();\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    return editorState;\n  };\n\n  addLabel = (editorState, { start, end, value, id, keys, type }, relatedConnections = []) => {\n    const { toolMode } = this;\n    const { ontology, config } = store;\n    const { text } = store.ontology;\n\n    if (config.reviewMode === ReviewModeType.REVIEW && (!isQATag(type))) return editorState;\n    if (isAnnotationReadonly(this.toolMode) && (!isQATag(type))) return editorState;\n    if (isQATag(type) && (!isReviewEditable(this.toolMode) || config.reviewMode === ReviewModeType.LABELING)) return editorState; // qa mode can only use qa tool, work mode can only use normal tool\n\n    // slice should not begin with \\n\n    if (substr(text, start, 1) === '\\n') return editorState;\n\n    if (ontology.results.labels.some((item) => item.start === start && item.end === end && item.value === value)) return editorState;\n\n    // generate new label\n    if (!id) id = uuidv4();\n    const newItem = {\n      type,\n      start,\n      end,\n      value,\n      id,\n      text: substr(text, start, end - start),\n      isReview: isReviewEditable(toolMode),\n      keys\n    };\n\n    this.addHistory(ACTION.ADD_LABEL, {\n      label: newItem,\n      relatedConnections,\n    });\n\n    ontology.addResultItem(newItem, relatedConnections);\n    // update rawDraftContentState, using new results\n    this.raw = this.renderTextArea();\n    // update editorState, using new rawDraftContentState\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    editorState = closeSelection(editorState);\n    return editorState;\n  };\n\n  addQALabel = (editorState, { start, end, value, id, keys, type }, reviewInfo, needUnRedo = true, needOpenReview = false) => {\n    const { toolMode } = this;\n    const { ontology, config, review } = store;\n    const { text } = ontology;\n    if (config.reviewMode === ReviewModeType.REVIEW && (!isQATag(type))) return { editorState, operation: null };\n    if (isAnnotationReadonly(this.toolMode) && (!isQATag(type))) return { editorState, operation: null };\n    if (isQATag(type) && (!isReviewEditable(this.toolMode) || config.reviewMode === ReviewModeType.LABELING)) return { editorState, operation: null }; // qa mode can only use qa tool, work mode can only use normal tool\n\n    // slice should not begin with \\n\n    if (substr(text, start, 1) === '\\n') return { editorState, operation: null };\n\n    if (review.reviews.missing.some((item) => item.start === start && item.end === end && item.value === value)) return { editorState, operation: null };\n\n    // generate new label\n    if (!id) id = uuidv4();\n    const newItem = {\n      type,\n      start,\n      end,\n      value,\n      id,\n      text: substr(text, start, end - start),\n      isReview: isReviewEditable(toolMode),\n      keys\n    };\n    if (needOpenReview) {\n      this.setState({ tagOpenReview: { ...newItem } });\n    }\n\n    const operation = review.addMissingReview(newItem, id, { ...reviewInfo });\n    if (needUnRedo) {\n      this.addHistory(ACTION.ADD_MISSING_REVIEW, operation);\n    }\n\n    // update rawDraftContentState, using new results\n    this.raw = this.renderTextArea();\n    // update editorState, using new rawDraftContentState\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    editorState = closeSelection(editorState);\n    return { editorState, operation };\n  };\n\n  deleteQATag = (id, needUnRedo = true) => {\n    const { state: { editorState } } = this;\n\n    if (store.config.reviewMode !== ReviewModeType.REVIEW) {\n      return { editorState, operation: null };\n    }\n    if (isAnnotationReadonly(this.toolMode)) {\n      return { editorState, operation: null };\n    }\n    const operation = store.review.deleteMissingReview(id);\n    if (needUnRedo) {\n      this.addHistory(ACTION.DEL_MISSING_REVIEW, operation);\n    }\n    this.raw = this.renderTextArea();\n    return { editorState: EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) }), operation };\n  };\n\n  deleteReview = (reviewId, needUnRedo = true) => {\n    const { state: { editorState } } = this;\n    if (!(isReviewEditable(this.toolMode) && store.config.reviewMode === ReviewModeType.REVIEW)) {\n      return { editorState, operation: null };\n    }\n    const operation = store.review.deleteReview(reviewId);\n    if (needUnRedo) {\n      this.addHistory(ACTION.DELETE_REVIEW, operation);\n    }\n    this.raw = this.renderTextArea();\n    return { editorState: EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) }), operation };\n  };\n\n  addReview = (editorState, reviewId, review, needUnRedo = true) => {\n    const { state: { editorState: currEditorState } } = this;\n    if (!(isReviewEditable(this.toolMode) && store.config.reviewMode === ReviewModeType.REVIEW)) {\n      return { editorState: currEditorState, operation: null };\n    }\n    const operation = store.review.setReview(reviewId, {\n      ...review\n    });\n    if (needUnRedo) {\n      this.addHistory(ACTION.ADD_REVIEW, operation);\n    }\n    this.raw = this.renderTextArea();\n    return { editorState: EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) }), operation };\n  };\n\n  deleteReviewItemById = (reviewId) => {\n    if (reviewId) {\n      let nextEditorState = this.state.editorState;\n      const reviewItem = store.ontology.getItemById(reviewId);\n      if (reviewItem && isQATag(reviewItem.type)) {\n        const { editorState } = this.deleteQATag(reviewItem.id);\n        nextEditorState = editorState;\n      } else {\n        const { editorState } = this.deleteReview(reviewId);\n        nextEditorState = editorState;\n      }\n      this.renderAndSave(nextEditorState);\n    }\n  };\n\n  deleteReviewItemsById = (reviewIds) => {\n    const operations = [];\n    reviewIds?.forEach((reviewId) => {\n      if (reviewId) {\n        const reviewItem = store.ontology.getItemById(reviewId);\n        if (reviewItem && isQATag(reviewItem.type)) {\n          const { operation } = this.deleteQATag(reviewItem.id, false);\n          if (operation) {\n            operations.push(operation);\n          }\n        } else {\n          const { operation } = this.deleteReview(reviewId, false);\n          if (operation) {\n            operations.push(operation);\n          }\n        }\n      }\n    });\n    this.addHistory(ACTION.DELETE_REVIEWS, operations);\n    const { state: { editorState } } = this;\n    this.raw = this.renderTextArea();\n    return EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n  };\n\n  deleteReviewItems = (reviewItems) => {\n    const operations = [];\n    const { state: { editorState } } = this;\n    if (!(isReviewEditable(this.toolMode) && store.config.reviewMode === ReviewModeType.REVIEW)) {\n      return editorState;\n    }\n    reviewItems?.forEach((reviewItem) => {\n      const { review, id } = reviewItem;\n      if (review.result === ReviewItemResult.MISSING) {\n        const { operation } = this.deleteQATag(id, false);\n        if (operation) {\n          operations.push(operation);\n        }\n      } else {\n        const { operation } = this.deleteReview(id, false);\n        if (operation) {\n          operations.push(operation);\n        }\n      }\n    });\n    this.addHistory(ACTION.DELETE_REVIEWS, operations);\n    this.raw = this.renderTextArea();\n    return EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n  };\n\n  addReviewItems = (editorState, reviewItems) => {\n    const operations = [];\n    if (!(isReviewEditable(this.toolMode) && store.config.reviewMode === ReviewModeType.REVIEW)) {\n      return editorState;\n    }\n    reviewItems?.forEach((reviewItem) => {\n      const { review, id } = reviewItem;\n      if (review.result === ReviewItemResult.MISSING) {\n        const { operation } = this.addQALabel(editorState, reviewItem.label, { ...review }, false, false);\n        if (operation) {\n          operations.push(operation);\n        }\n      } else {\n        const { operation } = this.addReview(editorState, id, { ...review }, false);\n        if (operation) {\n          operations.push(operation);\n        }\n      }\n    });\n    this.addHistory(ACTION.ADD_REVIEWS, operations);\n    this.raw = this.renderTextArea();\n    return EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n  };\n\n  deleteReviewHandle = (reviewItem) => {\n    if (reviewItem) {\n      let nextEditorState = this.state.editorState;\n      if (isQATag(reviewItem.type)) {\n        const { editorState } = this.deleteQATag(reviewItem.id);\n        nextEditorState = editorState;\n      } else {\n        const { editorState } = this.deleteReview(reviewItem.id);\n        nextEditorState = editorState;\n      }\n      this.renderAndSave(nextEditorState);\n    }\n  };\n\n  onDeleteReview = () => {\n    const { tagOpenReview } = this.state;\n    this.deleteReviewHandle(tagOpenReview);\n  };\n\n  // create new RawDraftContentState and update customeStyleMap\n  // update: raw, style, sliceMap\n  renderTextArea = (_text) => {\n    const { ontology } = store;\n    const { ontologyConfigMap } = ontology;\n    const {\n      currentClick, currentHover,\n      foundTags, foundTagSelectedIndex, needJumpFound,\n    } = this.state;\n    const style = { ...this.state.style };\n    const text = _text || store.ontology.text;\n    const { labels, insertions } = ontology.getResults();\n    // render missing labels as normal labels\n\n    // slice text to segments\n    const slices = uniq(\n      (labels.map((label) => label.start))\n        .concat(labels.map((label) => label.end))\n        .concat(insertions.map((insertion) => insertion.at))\n        .concat(foundTags.map((t) => t.start))\n        .concat(foundTags.map((t) => t.end))\n        .concat([0, text.length])\n        .sort((a, b) => a - b)\n    );\n    const labelHeads = uniq((labels.map((label) => label.start)));\n    const insertionHeads = uniq((insertions.map((insertion) => insertion.at)));\n    const foundTagHeads = uniq((foundTags.map((tag) => tag.start)));\n\n    // .concat(insertions.map((insertion) => insertion.at)));\n    const raw = {\n      blocks: [{\n        text,\n        key: 'span-wrapper',\n        type: 'unstyled',\n        depth: 0,\n        inlineStyleRanges: [\n          { offset: 0, length: text.length, style: 'DEFAULT_STYLE' }],\n        children: [],\n        entityRanges: [],\n        data: {},\n      }],\n      entityMap: {}\n    };\n    let sliceCount = 0;\n    // 对重叠的tag进行背景色叠加\n    const ranges = raw.blocks[0].inlineStyleRanges;\n    this.sliceMap = new Map();\n    slices.forEach((anchor, index, array) => {\n      // set slice\n      if (!index) return;\n      const { prev, next } = { prev: array[index - 1], next: anchor };\n      const match = labels.filter((label) => (label.start <= prev && label.end > prev));\n      let currentRGB = [0, 0, 0];\n      let currentAlpha = 0;\n      let nextAlpha = DEFAULT_ALPHA;\n      let isCoverbyQa = false;\n      let keepRGB = null;\n      match.some((label) => {\n        const labelItem = getConfigByKeys(ontologyConfigMap, label.keys);\n        const tempRGB = convertColorToArray(labelItem.color);\n        if (!keepRGB) isCoverbyQa = isQATag(label.type);\n        // render clicked tag in priority\n        if (currentClick.id === label.id || currentClick.fromId === label.id || currentClick.toId === label.id) {\n          keepRGB = tempRGB.map((value, i) => value * ACTIVE_ALPHA);\n          isCoverbyQa = isQATag(label.type);\n          return true;\n        }\n\n        if ((!keepRGB && currentHover.id === label.id) || currentHover.fromId === label.id || currentHover.toId === label.id) {\n          keepRGB = tempRGB.map((v) => v * HOVER_ALPHA);\n        }\n\n        if (!keepRGB) {\n          currentRGB = currentRGB.map((value, i) => value + tempRGB[i] * nextAlpha);\n          currentAlpha += nextAlpha;\n          nextAlpha = DEFAULT_ALPHA * (1 - currentAlpha) * (1 - currentAlpha);\n        }\n        return false;\n      });\n      // background of found tag\n      foundTags\n        .filter((tag) => (tag.start <= prev && tag.end > prev))\n        .some((tag) => {\n          const tagIndex = foundTags.findIndex((f) => f.start === tag.start);\n          if (tagIndex !== undefined) {\n            keepRGB = foundTagSelectedIndex === tagIndex && !needJumpFound ? [255, 230, 0] : [255, 169, 64, 0.20];\n            return true;\n          }\n          return false;\n        });\n      const baseRGB = convertColorToArray(BASE_COLOR);\n      currentRGB = keepRGB || currentRGB.map((value, i) => Math.min(255, value + baseRGB[i] * (1 - currentAlpha)));\n      const currentColor = convertArrayToColor(currentRGB);\n\n      if (!style[`BACKGROUND_${currentColor}`]) style[`BACKGROUND_${currentColor}`] = { backgroundColor: currentColor };\n\n      if (isCoverbyQa) ranges.push({ offset: prev, length: next - prev, style: 'MISSING_STYLE' });\n      ranges.push({ offset: prev, length: next - prev, style: `BACKGROUND_${currentColor}` });\n      ranges.push({ offset: prev, length: next - prev, style: `SLICE_${prev}_${next}` });\n      // set slice head if for label/insertion slice\n      if (labelHeads.indexOf(prev) >= 0 || insertionHeads.indexOf(prev) >= 0) {\n        const slice = substr(text, prev, next - prev);\n        const head = getSliceHead(slice);\n        ranges.push({ offset: prev, length: strlen(head), style: `ANCHOR_${prev}` });\n      }\n      if (foundTagHeads.indexOf(prev) >= 0) {\n        const tagIndex = foundTags.findIndex((f) => f.start === prev);\n        if (tagIndex !== undefined) {\n          const tag = foundTags[tagIndex];\n          ranges.push({\n            offset: prev,\n            length: tag.end - tag.start,\n            style: foundTagSelectedIndex === tagIndex && !needJumpFound ? 'FIND_BLOCK_SELECTED' : 'FIND_BLOCK',\n          });\n        }\n      }\n\n      if (labelHeads.indexOf(prev) >= 0 || insertionHeads.indexOf(prev) >= 0 || foundTagHeads.indexOf(prev) >= 0) {\n        const slice = substr(text, prev, next - prev);\n        const head = getSliceHead(slice);\n        // set sliceMap\n        this.sliceMap.set(prev, sliceCount);\n        if (head !== slice) sliceCount += 1;\n      }\n      sliceCount += 1;\n    });\n    // update new style\n    this.setState({ style });\n    return raw;\n  };\n\n  async componentDidMount() {\n    this.toolMode = this.props.jobProxy.toolMode;\n    let { content } = this.props;\n    let results;\n\n    // insert qa tool's label\n    try {\n      const resultRes = await this.props.jobProxy.loadResult();\n      if (resultRes?.results && resultRes?.content) {\n        content = resultRes.content;\n        results = resultRes.results;\n      } else if (resultRes?.labels && resultRes?.connections && resultRes?.insertions) {\n        results = resultRes;\n      }\n    } catch (e) {\n      notification.error({ message: localMessage('ANNOTATION_DATA_LOAD_ERROR'), duration: null });\n      return;\n    }\n\n    // init store\n    try {\n      await store.init({ ...this.props, content: content || '' });\n    } catch (e) {\n      notification.error({ message: e.message, duration: null });\n      return;\n    }\n\n    // initialize results\n    store.ontology.parseResults(results);\n\n    const reviewRes = await this.props.jobProxy.loadReviews();\n    if (reviewRes) {\n      store.review.parseReview(reviewRes);\n    }\n\n    // initialize raw\n    this.raw = this.renderTextArea();\n\n    this.editorWrapper.addEventListener('compositionstart', this.onCompositionStart);\n    this.editorWrapper.addEventListener('compositionend', this.onCompositionEnd);\n\n    this.editorWrapper.addEventListener('mousedown', this.onMouseDown);\n    this.editorWrapper.addEventListener('dragstart', (e) => e.preventDefault());\n    this.editorWrapper.addEventListener('contextmenu', (e) => {\n      e.preventDefault();\n      this.resetCurrentFrom();\n      this.resetCurrentFocus('currentClick', true);\n    });\n    this.editorWrapper.addEventListener('mousemove', this.onMouseMove);\n\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('resize', () => this.renderAndSave(null, true, false, false));\n\n    // initialize customStyleMap\n    this.setState({\n      style: {\n        ...this.state.style,\n        DEFAULT_STYLE: {\n          color: this.fontColor,\n          fontSize: `${FONT_SIZE}px`,\n          lineHeight: `${LINE_HEIGHT}px`,\n          letterSpacing: `${FONT_SPACE}px`,\n        },\n        MISSING_STYLE: {\n          color: '#000000',\n        }\n      },\n    });\n    this.renderAndSave(EditorState.createWithContent(convertFromRaw(this.raw)), true, true, false);\n    // use url file backup to replace content, results, and reviews information\n    // use local storage backup to replace text, results, and reviews information\n    // save every 5 minutes\n    setInterval(() => {\n      this.onSave();\n    }, 1000 * 60 * 5);\n    if (this.props.renderComplete) {\n      this.props.renderComplete();\n    }\n  }\n\n  onMouseMove = (e) => {\n    const box = this.svg.getBoundingClientRect();\n    this.setState({\n      currentMouse: {\n        left: e.clientX - box.x,\n        top: e.clientY - box.y,\n      }\n    });\n  };\n\n  moveFocusToTag = (tag) => {\n    let currentClick = { ...this.state.currentClick };\n    const { tagMap } = this.state;\n    if (tag == null) return;\n    currentClick = {\n      id: tag.id,\n      fromId: tag.fromId,\n      toId: tag.toId,\n      fromType: tag.fromType,\n      toType: tag.toType,\n    };\n    const { top } = tagMap.getItem(tag.id, tag.type);\n    const { clientHeight, scrollTop } = this.editorWrapper;\n    if (top < scrollTop || top > clientHeight + scrollTop) {\n      this.editor.focus({ y: top });\n    }\n\n    this.setState({ currentClick }, () => {\n      this.updateEditorAndRender();\n    });\n  };\n\n  onKeyDown = (e) => {\n    if (window.disableTextHotKeys) {\n      return;\n    }\n    const { currentClick, editorState } = this.state;\n    const { keyCode, ctrlKey, altKey } = e;\n    const config = [];\n    store.ontology.ontologyConfigMap.forEach((value) => { config.push(value); });\n    if (ctrlKey) {\n      switch (true) {\n        case (keyCode >= 48 && keyCode <= 57): {\n          // 0 - 9\n          e.preventDefault();\n          const index = e.keyCode - 49;\n          if (index === -1) {\n            this.setCurrentBrush(null);\n          }\n          if (config[index]) {\n            this.setCurrentBrush(config[index]);\n          }\n          break; }\n        case (keyCode === 90): e.preventDefault(); this.executeHistory(RECALL_TYPE.UNDO); break; // Z\n        case (keyCode === 89): e.preventDefault(); this.executeHistory(RECALL_TYPE.REDO); break; // Y\n        case (keyCode === 83): e.preventDefault(); this.onSave(); break; // S\n        case (keyCode === 82): { // R\n          e.preventDefault();\n          const nTag = store.ontology.moveToTagByStep(currentClick.id, 1, true);\n          this.moveFocusToTag(nTag);\n          break;\n        }\n        case (keyCode === 81): { // Q\n          e.preventDefault();\n          if (currentClick.id == null) break;\n          let nxtTag;\n          if (altKey) {\n            nxtTag = store.ontology.stepToTag(currentClick.id, -1);\n          } else {\n            nxtTag = store.ontology.moveToTagByStep(currentClick.id, -1);\n          }\n          this.moveFocusToTag(nxtTag);\n          break;\n        }\n        case (keyCode === 69): { // E\n          e.preventDefault();\n          if (currentClick.id == null) break;\n          let nextTag;\n          if (altKey) {\n            nextTag = store.ontology.stepToTag(currentClick.id, 1);\n          } else {\n            nextTag = store.ontology.moveToTagByStep(currentClick.id, 1);\n          }\n          this.moveFocusToTag(nextTag);\n          break;\n        }\n        default: break;\n      }\n    } else if (currentClick?.id !== null && isReviewEditable(this.toolMode) && !isQATag(currentClick.type) && store.config.reviewMode === ReviewModeType.REVIEW) {\n      switch (keyCode) {\n        case 49: // 1\n          e.preventDefault();\n          e.stopPropagation();\n          this.addReview(editorState, currentClick.id, {\n            result: 'pass',\n          });\n          break;\n        // 2\n        case 50: {\n          e.preventDefault();\n          e.stopPropagation();\n          let tagReviewInfo = store.review.getReview(currentClick.id);\n          if (!tagReviewInfo || tagReviewInfo.result !== ReviewItemResult.REJECT) {\n            tagReviewInfo = { result: 'reject', id: currentClick.id, type: [] };\n          }\n          const item = store.ontology.getItem(currentClick.type, currentClick.id);\n\n          this.setState({ tagOpenReview: item, tagReviewInfo });\n          this.editor.blur();\n          break;\n        }\n        default: break;\n      }\n    }\n  };\n\n  // update text\n  onContentChange = (editorState, data, type) => {\n    const { currentBrush, editorState: preState, findPanelVisible, inputEnable } = this.state;\n\n    if (\n      (isAnnotationReadonly(this.toolMode) || store.config.reviewMode === ReviewModeType.REVIEW)\n      || ((currentBrush || findPanelVisible || !inputEnable) && type === undefined)\n      || this.props.read_only\n    ) {\n      return preState;\n    }\n    const { slice, prevSlice, tags, prevTags } = data;\n    let { prevStart, prevEnd } = data;\n\n    if (prevSlice.length === 1 && slice.length === 0) this.addHistory(ACTION.EDIT_SINGLE_DEL, data);\n    else if (prevSlice.length === 0 && slice.length === 1) this.addHistory(ACTION.EDIT_SINGLE_ADD, data);\n    else if (type === ACTION.EDIT_REPLACE) this.addHistory(ACTION.EDIT_REPLACE, data);\n    else this.addHistory(ACTION.EDIT_DEFAULT, data);\n\n    prevStart = strlen(store.ontology.text.slice(0, data.prevStart));\n    prevEnd = strlen(store.ontology.text.slice(0, data.prevEnd));\n    store.ontology.text = store.ontology.text.slice(0, data.prevStart) + data.slice + store.ontology.text.slice(data.prevEnd);\n    // update labels and insertions\n    const offset = slice.length - prevSlice.length;\n\n    if (type === ACTION.EDIT_REPLACE && prevTags) {\n      const { insertions = [], labels = [], connections = [] } = prevTags;\n      [...insertions, ...labels, ...connections].forEach((t) => {\n        store.ontology.deleteTag(t.type, t.id);\n      });\n    }\n    store.ontology.tagMove(prevStart, prevEnd, offset);\n    if (type === ACTION.EDIT_REPLACE && tags) {\n      const { insertions = [], labels = [], connections = [] } = tags;\n      [...insertions, ...labels, ...connections].forEach((t) => {\n        store.ontology.addResultItem(t);\n      });\n    }\n\n    // update rawDraftContentState, using new text and results\n    this.raw = this.renderTextArea();\n\n    // update editorState, using new rawDraftContentState\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    return editorState;\n  };\n\n  resetCurrentFocus = (attribute = 'currentClick', shouldUpdate) => new Promise((resolve) => {\n    this.setState({\n      [`${attribute}`]: { id: null, from: null, to: null },\n    }, () => resolve('state updated'));\n  }).then(() => {\n    if (shouldUpdate) {\n      return this.updateEditorAndRender();\n    }\n  });\n\n  resetCurrentFrom = () => {\n    this.setState({\n      currentFrom: { type: null, id: null, offset: null },\n    });\n  };\n\n  // to status for tag: connection mode and other mode\n  onTagClick = (e, type, id) => {\n    const { currentFrom, currentBrush, editorState, tagMap } = this.state;\n    const offset = tagMap.getItem(id, type);\n    this.editor.blur();\n    if (!isConnection(currentBrush?.type)) return;\n\n    // connecting mode only applys to label and insertion\n    if (isLabel(type) || isInsertion(type)) {\n      // if there is no starting point, setup the starting point\n      if (!currentFrom.type) {\n        this.setState({\n          currentFrom: {\n            type,\n            id,\n            offset,\n          }\n        });\n      } else {\n        const nextEditorState = this.addConnection(editorState, { fromId: currentFrom.id, fromType: currentFrom.type, toId: id, toType: type, type: TAG.CONNECTION, value: currentBrush.text, keys: currentBrush.keys });\n        this.renderAndSave(nextEditorState, true, true);\n      }\n    }\n  };\n\n  onTagDoubleClick = (e) => {\n    // only work in qa mode\n    if (!store.reviewable && !store.isRework) {\n      return;\n    }\n    const { id, type } = getTargetWrapperDataSet(e);\n    const item = store.ontology.getItem(type, id);\n    const tagReviewInfo = store.review.getReview(id);\n    this.setState({ tagOpenReview: item, tagReviewInfo });\n    this.editor.blur();\n  };\n\n  // mouseEvent includes: mouse enter, mouse leave, mouse click, mouse context menu\n  TagMouseEvent = (e, type, id, focusType, active) => {\n    const { currentClick: { id: currId } } = this.state;\n    const tag = store.ontology.getItem(type, id);\n    if (!tag) {\n      return;\n    }\n\n    let attribute = '';\n    if (focusType === FOCUS_TYPE.HOVER) {\n      if (currId === tag.id && active) return;\n      attribute = 'currentHover';\n    } else if (focusType === FOCUS_TYPE.CLICK) {\n      attribute = 'currentClick';\n      this.editor.blur();\n    }\n\n    // active status: mouse enter | mouse click\n    if (active) {\n      if (focusType === FOCUS_TYPE.CLICK) {\n        this.onTagClick(e, type, id);\n      }\n      // ranges.push({ offset: label.start, length: label.end - label.start, style: `${focusType}_STYLE_${color}` });\n      this.setState({\n        [`${attribute}`]: {\n          id: tag.id,\n          fromId: tag?.fromId,\n          toId: tag?.toId,\n          fromType: tag?.fromType,\n          toType: tag?.toType,\n          type: tag?.type,\n        }\n      }, () => {\n        this.updateEditorAndRender();\n      });\n    } else { // unactive status: mouse leave | mouse context menu\n      const tagType = type;\n      this.resetCurrentFocus(attribute, true).then(() => {\n        if (focusType === FOCUS_TYPE.CLICK) {\n          this.onContextMenu(e, tag.id, tagType);\n        }\n      });\n    }\n  };\n\n  onContextMenu = (e, id, type) => {\n    let nextEditorState;\n    switch (type) {\n      case TAG.LABEL:\n      case TAG.CONNECTION:\n      case TAG.INSERTION:\n        nextEditorState = this.deleteTag(type, id);\n        break;\n      case TAG.LABEL_QA:\n      {\n        const { editorState } = this.deleteQATag(id);\n        nextEditorState = editorState;\n        break;\n      }\n      default: return;\n    }\n    this.renderAndSave(nextEditorState);\n  };\n\n  render() {\n    const {\n      editorState,\n      style,\n      currentBrush,\n      editorWidth,\n      editorHeight,\n      currentClick,\n      currentHover,\n      currentMouse,\n      currentFrom,\n      tagMap,\n      tagOpenReview,\n      tagReviewInfo,\n\n      inputEnable,\n    } = this.state;\n    const { config } = store;\n    return (\n      <div className=\"app-wrapper\">\n        <div className=\"topbar-wrapper\" onClick={() => { this.editorOnFocus = false; }}>\n          <div className=\"topbar-left-wrapper\">\n            {isAppenCloud() && (\n            <div className=\"logo\">\n              <AppenLogo />\n            </div>\n            )}\n            <ReviewMode />\n            <div className=\"divider\" />\n            <UndoRedo\n              undoHandle={() => this.executeHistory(RECALL_TYPE.UNDO)}\n              redoHandle={() => this.executeHistory(RECALL_TYPE.REDO)}\n              undoList={this.undoList}\n              redoList={this.redoList}\n            />\n            <div className=\"divider\" />\n            <Save onSave={this.onSave} />\n          </div>\n          <div className=\"topbar-right-wrapper\">\n            {/* <LabelScan onToggle={this.toggleLabelsDrawer} /> */}\n          </div>\n        </div>\n        <TextToolContext.Provider value={{ moveFocusToTag: this.moveFocusToTag, deleteReviewItemById: this.deleteReviewItemById, deleteReviewItemsById: this.deleteReviewItemsById }}>\n          <Sidebar\n            showReview={isRework(this.toolMode) || isReviewEditable(this.toolMode)}\n            onClick={() => { this.editorOnFocus = false; }}\n            currentBrush={currentBrush}\n            inputEnable={inputEnable}\n            setCurrentBrush={this.setCurrentBrush}\n            items={tagMap}\n            contentReadyOnly={this.props.read_only}\n          />\n        </TextToolContext.Provider>\n        <div className=\"right-wrapper\">\n          <div\n            className=\"editor-wrapper\"\n            ref={(r) => { this.editorWrapper = r; }}\n          >\n            <div className=\"svg-wrapper\">\n              <svg ref={(r) => { this.svg = r; }} style={{ height: `${editorHeight}px`, width: `${editorWidth}px` }}>\n                {Object.entries(tagMap.connections).map(([id, connect]) => (\n                  <g key={id}>\n                    <path\n                      d={connect.path}\n                      stroke={currentHover.id === id ? HOVER_COLOR : currentClick.id === id ? FOCUS_COLOR : DEFAULT_COLOR}\n                      fill=\"#00000000\"\n                    />\n                  </g>\n                ))}\n                {currentFrom.type ?\n                  <path d={`M ${currentFrom.offset?.left} ${currentFrom.offset?.top} L ${currentMouse.left} ${currentMouse.top}`} stroke={FOCUS_COLOR} fill=\"#00000000\" /> :\n                  null}\n              </svg>\n            </div>\n            <div className=\"tags-wrapper\">\n              <div\n                className=\"tags-panel\"\n                style={{ height: `${editorHeight}px`, width: `${editorWidth}px` }}\n                onDoubleClick={this.onTagDoubleClick}\n              >\n                {Object.entries(tagMap.labels).map(([id, label]) => (\n                  <LabelTag\n                    key={id}\n                    reviewResult={store.review.getReview(id)?.result}\n                    label={label}\n                    isHover={\n                      (currentHover.id === id) ||\n                      currentHover.fromId === id ||\n                      currentHover.toId === id\n                    }\n                    isClick={\n                      (currentClick.id === id) ||\n                      currentClick.fromId === id ||\n                      currentClick.toId === id\n                    }\n                    labelMouseEvent={this.TagMouseEvent}\n                  />\n                ))}\n                {Object.entries(tagMap.insertions).map(([id, insertion]) => (\n                  <InsertionTag\n                    key={id}\n                    reviewResult={store.review.getReview(id)?.result}\n                    insertion={insertion}\n                    isHover={\n                      (currentHover.id === id) ||\n                      currentHover.fromId === id ||\n                      currentHover.toId === id\n                    }\n                    isClick={\n                      (currentClick.id === id) ||\n                      currentClick.fromId === id ||\n                      currentClick.toId === id\n                    }\n                    insertionMouseEvent={this.TagMouseEvent}\n                  />\n                ))}\n                {Object.entries(tagMap.connections).map(([id, connection]) => (\n                  <ConnectionTag\n                    key={id}\n                    reviewResult={store.review.getReview(id)?.result}\n                    connection={connection}\n                    isHover={currentHover.id === id}\n                    isClick={currentClick.id === id}\n                    connectionMouseEvent={this.TagMouseEvent}\n                  />\n                ))}\n              </div>\n            </div>\n            <div\n              onClick={() => {\n                this.editor.focus();\n                this.resetCurrentFocus('currentClick', true);\n              }}\n            >\n              <Editor\n                ref={(r) => { this.editor = r; }}\n                editorState={editorState}\n                customStyleMap={style}\n                onChange={this.onChange}\n                handlePastedText={this.handlePastedText}\n                handleBeforeInput={this.handleBeforeInput}\n                handleKeyCommand={this.handleKeyCommand}\n                keyBindingFn={this.genKeyCommand}\n              />\n            </div>\n          </div>\n        </div>\n        <ReviewForm\n          toolMode={this.toolMode}\n          tagReviewInfo={tagReviewInfo}\n          tagOpenReview={tagOpenReview}\n          issueTypes={this.props.issue_types}\n          setFormVisible={this.setFormVisible}\n          onConfirm={(review) => {\n            this.addReview(editorState, tagOpenReview?.id, review);\n            store.ontology.updateOntologiesStatusMap();\n          }}\n          onDelete={this.onDeleteReview}\n        />\n      </div>\n    );\n  };\n\n  setCurrentBrush = (item, input = false) => {\n    this.setState({ currentBrush: item, inputEnable: input });\n  };\n\n  setFormVisible = () => {\n    this.setState({ tagOpenReview: null, tagReviewInfo: null });\n  };\n\n  genKeyCommand = (e) => {\n    if (e.metaKey || e.altKey) return KEY_COMMAND.INVALID_KEY;\n    switch (e.keyCode) {\n      case 90:\n        // prevent default undo\n        e.preventDefault();\n        if (e.ctrlKey) return KEY_COMMAND.HANDLE_UNDO;\n        return getDefaultKeyBinding(e);\n      case 89:\n        // prevent default redo\n        e.preventDefault();\n        if (e.ctrlKey) return KEY_COMMAND.HANDLE_REDO;\n        return getDefaultKeyBinding(e);\n      case 13:\n        e.preventDefault();\n        return KEY_COMMAND.HANDLE_RETURN;\n      default:\n        return getDefaultKeyBinding(e);\n    }\n  };\n\n  handleKeyCommand = (command) => {\n    const { editorState } = this.state;\n    switch (command) {\n      case KEY_COMMAND.INVALID_KEY: return 'handled';\n      case KEY_COMMAND.HANDLE_RETURN:\n      {\n        const start = editorState.getSelection().getStartOffset();\n        const end = editorState.getSelection().getEndOffset();\n        const nextEditorState = setSelection(this.onContentChange(editorState, {\n          slice: '\\n',\n          prevSlice: store.ontology.text.slice(start, end),\n          prevStart: start,\n          prevEnd: end,\n          start: start + 1,\n          end: start + 1,\n        }), start + 1, start + 1);\n        this.renderAndSave(nextEditorState);\n        return 'handled';\n      }\n      case KEY_COMMAND.HANDLE_UNDO: return 'handled';\n      case KEY_COMMAND.HANDLE_REDO: return 'handled';\n      default: return 'not-handled';\n    }\n  };\n\n  // Get one anchor by slice head\n  getAnchorElementByHead = (at) => {\n    const { sliceMap } = this;\n    const wrapper = this.editorWrapper.querySelector('.public-DraftStyleDefault-block');\n    const id = `span-wrapper-0-${sliceMap.get(at)}`;\n    const span = wrapper.querySelector(`[data-offset-key='${id}']`);\n    return span;\n  };\n\n  // Get all anchors at one time\n  getAnchorElementsByHeads = () => {\n    const { sliceMap } = this;\n    const wrapper = this.editorWrapper.querySelector('.public-DraftStyleDefault-block');\n    const spanMap = new Map();\n    sliceMap.forEach((value, key) => {\n      const id = `span-wrapper-0-${sliceMap.get(key)}`;\n      const span = wrapper.querySelector(`[data-offset-key='${id}']`);\n      spanMap.set(key, span);\n    });\n    return spanMap;\n  };\n\n  onMouseDown = (e) => {\n    if (e.which === 1) {\n      this.mouseFlag = true;\n    }\n    const onMouseUp = () => {\n      this.mouseFlag = false;\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n    window.addEventListener('mouseup', onMouseUp);\n  };\n\n  onCompositionEnd = () => {\n    this.compositionFlag = COMPOSITION.PENDING;\n  };\n\n  onCompositionStart = () => {\n    this.compositionFlag = COMPOSITION.ENABLED;\n    this.compositionTop = this.editorWrapper.scrollTop;\n  };\n\n  handleBeforeInput = () => { this.inputFlag = true; return 'not-handled'; };\n\n  handlePastedText = () => { this.pasteFlag = true; return 'not-handled'; };\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,aAAa,QAAQ,OAAO;AAC5C,SAASC,MAAM,EAAEC,WAAW,EAAEC,cAAc,EAAEC,oBAAoB,QAAQ,UAAU;AACpF,SAASC,YAAY,EAAEC,OAAO,QAAQ,MAAM;AAC5C,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,MAAM,EAAEC,MAAM,QAAQ,uBAAuB;AACtD,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,OAAOC,YAAY,IAAIC,SAAS,QAAQ,UAAU;AAClD,SAASC,QAAQ,EAAEC,YAAY,EAAEC,aAAa,QAAQ,kBAAkB;AACxE,SAASC,oBAAoB,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,SAAS,QAAQ,uBAAuB;AACnG,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,SAAS,EAAEC,YAAY,QAAQ,oBAAoB;AAE5D,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,IAAI,MAAM,mBAAmB;AACpC,SAASC,YAAY,QAAQ,aAAa;AAC1C,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAO,0BAA0B;AACjC,OAAO,yBAAyB;AAChC,SACEC,UAAU,EACVC,mBAAmB,EACnBC,WAAW,EAAEC,aAAa,EAC1BC,UAAU,EAAEC,UAAU,EAAEC,YAAY,EACpCC,SAAS,EAAEC,UAAU,EACrBC,WAAW,EAAEC,cAAc,EAC3BC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,EAC3CC,WAAW,EACXC,WAAW,EACXC,UAAU,EAAEC,UAAU,EACtBC,WAAW,EACXC,YAAY,EACZC,aAAa,QACR,kBAAkB;AACzB,SACEC,QAAQ,EACRC,mBAAmB,EACnBC,mBAAmB,EACnBC,YAAY,EACZC,YAAY,EACZC,cAAc,EACdC,kBAAkB,EAClBC,uBAAuB,EACvBC,eAAe,QACV,gBAAgB;AACvB,SACEC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZC,OAAO,QACF,kBAAkB;AACzB,SAASC,gBAAgB,EAAEC,GAAG,EAAEzC,UAAU,IAAI0C,cAAc,QAAQ,SAAS;AAC7E,OAAOC,UAAU,MAAM,oBAAoB;AAE3C,OAAO,MAAMC,eAAe,GAAGtE,aAAa,CAAC,CAAC;AAC9C,eAAe,MAAMuE,iBAAiB,SAASxE,KAAK,CAACyE,SAAS,CAAC;EAC7DC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KA6DfC,UAAU,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;MAC3B,IAAIC,UAAU;MACd,IAAI,IAAI,CAACC,QAAQ,EAAE;QACjB;QACAD,UAAU,GAAG,IAAI,CAACE,QAAQ;MAC5B,CAAC,MAAM,IAAI,IAAI,CAACC,QAAQ,EAAE;QACxB;QACAH,UAAU,GAAG,IAAI,CAACI,QAAQ;QAC1B;MACF,CAAC,MAAM;QACL;QACAJ,UAAU,GAAG,IAAI,CAACI,QAAQ;QAC1B,IAAI,CAACF,QAAQ,GAAG,EAAE;MACpB;MACA,IAAI;QAAEG;MAAO,CAAC,GAAGL,UAAU;MAC3B,IAAIK,MAAM,GAAG9C,YAAY,EAAE;QACzByC,UAAU,CAACM,KAAK,CAAC,CAAC;QAClBD,MAAM,IAAI,CAAC;MACb;MACA,IAAIP,IAAI,KAAKhC,MAAM,CAACyC,eAAe,IAAIF,MAAM,IAAI,CAAC,EAAE;QAClD,MAAMG,IAAI,GAAGR,UAAU,CAACK,MAAM,GAAG,CAAC,CAAC;QACnC,IAAI,CAACG,IAAI,CAACV,IAAI,KAAKhC,MAAM,CAAC2C,YAAY,IAAID,IAAI,CAACV,IAAI,KAAKhC,MAAM,CAACyC,eAAe,KAAMC,IAAI,CAACT,IAAI,CAACW,SAAS,KAAK,EAAE,IAAIF,IAAI,CAACT,IAAI,CAACY,GAAG,KAAKZ,IAAI,CAACa,SAAU,EAAE;UACnJZ,UAAU,CAACa,GAAG,CAAC,CAAC;UAChBb,UAAU,CAACc,IAAI,CAAC;YACdhB,IAAI,EAAEhC,MAAM,CAAC2C,YAAY;YACzBV,IAAI,EAAE;cACJW,SAAS,EAAE,EAAE;cACbK,KAAK,EAAEP,IAAI,CAACT,IAAI,CAACgB,KAAK,GAAGhB,IAAI,CAACgB,KAAK;cACnCH,SAAS,EAAEJ,IAAI,CAACT,IAAI,CAACa,SAAS;cAC9BI,OAAO,EAAER,IAAI,CAACT,IAAI,CAACiB,OAAO;cAC1BC,KAAK,EAAElB,IAAI,CAACkB,KAAK;cACjBN,GAAG,EAAEZ,IAAI,CAACY;YACZ;UACF,CAAC,CAAC;QACJ,CAAC,MAAMX,UAAU,CAACc,IAAI,CAAC;UAAEhB,IAAI;UAAEC;QAAK,CAAC,CAAC;MACxC,CAAC,MAAM,IAAID,IAAI,KAAKhC,MAAM,CAACoD,eAAe,IAAIb,MAAM,IAAI,CAAC,EAAE;QACzD,MAAMG,IAAI,GAAGR,UAAU,CAACK,MAAM,GAAG,CAAC,CAAC;QACnC,IAAI,CAACG,IAAI,CAACV,IAAI,KAAKhC,MAAM,CAAC2C,YAAY,IAAID,IAAI,CAACV,IAAI,KAAKhC,MAAM,CAACoD,eAAe,KAAMV,IAAI,CAACT,IAAI,CAACgB,KAAK,KAAK,EAAE,IAAIhB,IAAI,CAACiB,OAAO,KAAKR,IAAI,CAACT,IAAI,CAACkB,KAAM,EAAE;UAC/IjB,UAAU,CAACa,GAAG,CAAC,CAAC;UAChBb,UAAU,CAACc,IAAI,CAAC;YACdhB,IAAI,EAAEhC,MAAM,CAAC2C,YAAY;YACzBV,IAAI,EAAE;cACJgB,KAAK,EAAE,EAAE;cACTL,SAAS,EAAEX,IAAI,CAACW,SAAS,GAAGF,IAAI,CAACT,IAAI,CAACW,SAAS;cAC/CE,SAAS,EAAEb,IAAI,CAACY,GAAG;cACnBK,OAAO,EAAER,IAAI,CAACT,IAAI,CAACiB,OAAO;cAC1BC,KAAK,EAAElB,IAAI,CAACkB,KAAK;cACjBN,GAAG,EAAEZ,IAAI,CAACY;YACZ;UACF,CAAC,CAAC;QACJ,CAAC,MAAMX,UAAU,CAACc,IAAI,CAAC;UAAEhB,IAAI;UAAEC;QAAK,CAAC,CAAC;MACxC,CAAC,MAAMC,UAAU,CAACc,IAAI,CAAC;QAAEhB,IAAI;QAAEC;MAAK,CAAC,CAAC;IACxC,CAAC;IAAA,KAEDoB,cAAc,GAAIC,UAAU,IAAK;MAC/B;MACA,IAAIpB,UAAU;MACd,IAAIoB,UAAU,KAAKpD,WAAW,CAACqD,IAAI,EAAE;QACnC;QACA,IAAI,CAACpB,QAAQ,GAAG,IAAI;QACpBD,UAAU,GAAG,IAAI,CAACI,QAAQ;MAC5B,CAAC,MAAM,IAAIgB,UAAU,KAAKpD,WAAW,CAACsD,IAAI,EAAE;QAC1C;QACA,IAAI,CAACnB,QAAQ,GAAG,IAAI;QACpBH,UAAU,GAAG,IAAI,CAACE,QAAQ;MAC5B;MACA,IAAIF,UAAU,CAACK,MAAM,KAAK,CAAC,EAAE;QAC3B,IAAI,CAACJ,QAAQ,GAAG,KAAK;QACrB,IAAI,CAACE,QAAQ,GAAG,KAAK;QACrB;MACF;MACA,MAAMoB,IAAI,GAAGvB,UAAU,CAACa,GAAG,CAAC,CAAC;MAC7B,MAAM;QAAEd;MAAK,CAAC,GAAGwB,IAAI;MACrB,IAAIC,eAAe,GAAG,IAAI,CAACC,KAAK,CAACC,WAAW;MAC5C,QAAQH,IAAI,CAACzB,IAAI;QACf,KAAKhC,MAAM,CAACyC,eAAe;QAC3B,KAAKzC,MAAM,CAACoD,eAAe;QAC3B,KAAKpD,MAAM,CAAC2C,YAAY;QACxB,KAAK3C,MAAM,CAAC6D,YAAY;UACxB;YACE,MAAMC,OAAO,GAAG;cACdlB,SAAS,EAAEX,IAAI,CAACgB,KAAK;cACrBA,KAAK,EAAEhB,IAAI,CAACW,SAAS;cACrBO,KAAK,EAAElB,IAAI,CAACiB,OAAO;cACnBL,GAAG,EAAEZ,IAAI,CAACiB,OAAO;cACjBJ,SAAS,EAAEb,IAAI,CAACa,SAAS;cACzBI,OAAO,EAAEjB,IAAI,CAACY,GAAG;cACjB,IAAGY,IAAI,CAACzB,IAAI,KAAKhC,MAAM,CAAC6D,YAAY,IAAI;gBACtCE,IAAI,EAAE9B,IAAI,CAAC+B,QAAQ;gBACnBA,QAAQ,EAAE/B,IAAI,CAAC8B;cACjB,CAAC;YACH,CAAC;YACD;YACAL,eAAe,GAAG7C,YAAY,CAAC,IAAI,CAACoD,eAAe,CAACP,eAAe,EAAEI,OAAO,EAAEL,IAAI,CAACzB,IAAI,CAAC,EAAE8B,OAAO,CAACX,KAAK,EAAEW,OAAO,CAACjB,GAAG,CAAC;YACrH;UACF;QACA,KAAK7C,MAAM,CAACkE,aAAa;UACzB;YACE,MAAM;cAAElC,IAAI;cAAEmC;YAAG,CAAC,GAAGlC,IAAI,CAACmC,SAAS;YACnCV,eAAe,GAAG,IAAI,CAACW,SAAS,CAACrC,IAAI,EAAEmC,EAAE,CAAC;YAC1C;UACF;QACA,KAAKnE,MAAM,CAACsE,SAAS;UACrB;YACE,MAAM;cAAEtC,IAAI;cAAEmC;YAAG,CAAC,GAAGlC,IAAI,CAACsC,KAAK;YAC/Bb,eAAe,GAAG,IAAI,CAACW,SAAS,CAACrC,IAAI,EAAEmC,EAAE,CAAC;YAC1C;UACF;QACA,KAAKnE,MAAM,CAACwE,kBAAkB;UAC9B;YACE,MAAM;cAAEC,SAAS;cAAEN;YAAG,CAAC,GAAGlC,IAAI;YAC9B,IAAIwC,SAAS,EAAE;cACb,MAAM;gBAAEb;cAAY,CAAC,GAAG,IAAI,CAACc,SAAS,CAAChB,eAAe,EAAES,EAAE,EAAE;gBAAE,GAAGM;cAAU,CAAC,CAAC;cAC7Ef,eAAe,GAAGE,WAAW;YAC/B,CAAC,MAAM;cACL,MAAM;gBAAEA;cAAY,CAAC,GAAG,IAAI,CAACe,WAAW,CAACR,EAAE,CAAC;cAC5CT,eAAe,GAAGE,WAAW;YAC/B;YACA;UACF;QACA,KAAK5D,MAAM,CAAC4E,cAAc;UAC1B;YACE,MAAM;cAAE5C,IAAI;cAAEmC;YAAG,CAAC,GAAGlC,IAAI;YACzByB,eAAe,GAAG,IAAI,CAACW,SAAS,CAACrC,IAAI,EAAEmC,EAAE,CAAC;YAC1C;UACF;QACA,KAAKnE,MAAM,CAAC6E,SAAS;UACrB;YACE,MAAM;cAAEC,kBAAkB;cAAEP;YAAM,CAAC,GAAGtC,IAAI;YAC1CyB,eAAe,GAAG,IAAI,CAACqB,QAAQ,CAACrB,eAAe,EAAEa,KAAK,EAAEO,kBAAkB,CAAC;YAC3E;UACF;QACA,KAAK9E,MAAM,CAACgF,kBAAkB;UAC9B;YACE,MAAM;cAAET,KAAK;cAAEU;YAAO,CAAC,GAAGhD,IAAI;YAC9B,MAAM;cAAE2B;YAAY,CAAC,GAAG,IAAI,CAACsB,UAAU,CAACxB,eAAe,EAAEa,KAAK,EAAE;cAAE,GAAGU;YAAO,CAAC,CAAC;YAC9EvB,eAAe,GAAGE,WAAW;YAE7B;UACF;QACA,KAAK5D,MAAM,CAACmF,aAAa;UACzB;YACE,MAAM;cAAEL,kBAAkB;cAAEV;YAAU,CAAC,GAAGnC,IAAI;YAE9CyB,eAAe,GAAG,IAAI,CAAC0B,YAAY,CAAC1B,eAAe,EAAEU,SAAS,EAAEU,kBAAkB,CAAC;YACnF;UACF;QACA,KAAK9E,MAAM,CAACqF,cAAc;UAC1B;YACE,MAAM;cAAEC;YAAW,CAAC,GAAGrD,IAAI;YAC3ByB,eAAe,GAAG,IAAI,CAAC6B,aAAa,CAAC7B,eAAe,EAAE4B,UAAU,CAAC;YACjE;UACF;QACA,KAAKtF,MAAM,CAACwF,gBAAgB;UAC5B;YACE,MAAM;cAAEC,IAAI,EAAEC,WAAW;cAAEC,QAAQ;cAAEC,WAAW;cAAEC;YAAQ,CAAC,GAAG5D,IAAI;YAClE/C,KAAK,CAAC4G,QAAQ,CAACL,IAAI,GAAGE,QAAQ;YAC9BzG,KAAK,CAAC4G,QAAQ,CAACC,UAAU,CAACH,WAAW,CAAC;YACtC,IAAI,CAACI,GAAG,GAAG,IAAI,CAACC,cAAc,CAACN,QAAQ,CAAC;YACxCjC,eAAe,GAAGpG,WAAW,CAAC4I,GAAG,CAACxC,eAAe,EAAE;cAAEyC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;YAAE,CAAC,CAAC;YAChG,IAAI,CAACjE,UAAU,CAAC/B,MAAM,CAACwF,gBAAgB,EAAE;cACvCC,IAAI,EAAEE,QAAQ;cACdA,QAAQ,EAAED,WAAW;cACrBE,WAAW,EAAEC,OAAO;cACpBA,OAAO,EAAED;YACX,CAAC,CAAC;YACF;UACF;QACA,KAAK5F,MAAM,CAACoG,UAAU;UAAE;YACtB,MAAM;cAAE3B,SAAS;cAAEN;YAAG,CAAC,GAAGlC,IAAI;YAC9B,IAAIwC,SAAS,EAAE;cACb,MAAM;gBAAEb;cAAY,CAAC,GAAG,IAAI,CAACc,SAAS,CAAChB,eAAe,EAAES,EAAE,EAAE;gBAAE,GAAGM;cAAU,CAAC,CAAC;cAC7Ef,eAAe,GAAGE,WAAW;YAC/B,CAAC,MAAM;cACL,MAAM;gBAAEA;cAAY,CAAC,GAAG,IAAI,CAACyC,YAAY,CAAClC,EAAE,CAAC;cAC7CT,eAAe,GAAGE,WAAW;YAC/B;YACA;UACF;QACA,KAAK5D,MAAM,CAACsG,aAAa;UAAE;YACzB,MAAM;cAAErB,MAAM;cAAEd;YAAG,CAAC,GAAGlC,IAAI;YAC3B,MAAM;cAAE2B;YAAY,CAAC,GAAG,IAAI,CAACc,SAAS,CAAChB,eAAe,EAAES,EAAE,EAAE;cAAE,GAAGc;YAAO,CAAC,CAAC;YAC1EvB,eAAe,GAAGE,WAAW;YAC7B;UACF;QACA,KAAK5D,MAAM,CAACuG,WAAW;UAAE;YACvB7C,eAAe,GAAG,IAAI,CAAC8C,iBAAiB,CAACvE,IAAI,CAAC;YAC9C;UACF;QACA,KAAKjC,MAAM,CAACyG,cAAc;UAAE;YAC1B/C,eAAe,GAAG,IAAI,CAACgD,cAAc,CAAChD,eAAe,EAAEzB,IAAI,CAAC;YAC5D;UACF;QACA;UACE;MACJ;MAEA,IAAI,CAAC0E,aAAa,CAACjD,eAAe,CAAC;MACnC,IAAI,CAACvB,QAAQ,GAAG,KAAK;MACrB,IAAI,CAACE,QAAQ,GAAG,KAAK;IACvB,CAAC;IAAA,KAEDsE,aAAa,GAAG,CACdC,YAAY,EACZC,gBAAgB,GAAG,IAAI,EACvBC,uBAAuB,GAAG,KAAK,EAC/BC,aAAa,GAAG,KAAK,KAClB;MACH,MAAMnD,WAAW,GAAGgD,YAAY,IAAI,IAAI,CAACjD,KAAK,CAACC,WAAW;MAC1D,MAAM;QAAEoD;MAAS,CAAC,GAAGpD,WAAW,CAACqD,YAAY,CAAC,CAAC;MAC/C,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACC,SAAS;MACxC;MACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAIR,uBAAuB,EAAE;UAC3B,IAAI,CAACS,gBAAgB,CAAC,CAAC;QACzB;QACA,IAAI,CAACC,QAAQ,CAAC;UAAE5D;QAAY,CAAC,CAAC;QAC9B,IAAImD,aAAa,EAAE;UACjB,IAAI,CAACU,YAAY,CAAC,CAAC;QACrB;QACAH,OAAO,CAAC,CAAC;MACX,CAAC,CAAC,CAACI,IAAI,CAAC,MAAM;QACZ,IAAIb,gBAAgB,EAAE;UACpB,MAAM;YAAEnD,eAAe;YAAEiE;UAAO,CAAC,GAAG,IAAI,CAACC,WAAW,CAAChE,WAAW,CAAC;UACjE,OAAO,IAAIyD,OAAO,CAAEC,OAAO,IAAK;YAC9B,IAAI,CAACE,QAAQ,CAAC;cAAE5D,WAAW,EAAEF;YAAgB,CAAC,EAAE,MAAM;cACpDxE,KAAK,CAAC4G,QAAQ,CAAC+B,yBAAyB,CAAC,CAAC;YAC5C,CAAC,CAAC;YACFP,OAAO,CAACK,MAAM,CAAC;UACjB,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,CAACD,IAAI,CAAEC,MAAM,IAAK;QAClB,IAAId,gBAAgB,EAAE;UACpB,IAAI,CAACiB,UAAU,CAACH,MAAM,CAAC;UACvB,OAAO,IAAIN,OAAO,CAAEC,OAAO,IAAK;YAC9B,IAAI,CAACE,QAAQ,CAAC;cACZO,WAAW,EAAE,IAAI,CAACZ,aAAa,CAACa,WAAW,GAAGnI,cAAc,GAAG,CAAC;cAChEoI,YAAY,EAAE,IAAI,CAACd,aAAa,CAACe,YAAY,GAAGrI,cAAc,GAAG,CAAC;cAClE8H;YACF,CAAC,CAAC;YACFL,OAAO,CAAC,CAAC;UACX,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,CAACI,IAAI,CAAC,MAAM;QACZ,IAAIV,QAAQ,EAAE;UACZ;UACA,IAAI,IAAI,CAACmB,cAAc,IAAI,CAAC,EAAE;YAC5B,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC;cAAEC,CAAC,EAAE,IAAI,CAACH;YAAe,CAAC,CAAC;YAC7C,IAAI,CAACA,cAAc,GAAG,CAAC,CAAC;UAC1B,CAAC,MAAM,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC;YAAEC,CAAC,EAAEpB;UAAI,CAAC,CAAC;QACtC;QACA,OAAO,IAAIG,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC,CAAC,CAAC;MAC5C,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDiB,qBAAqB,GAAIC,OAAO,IAAK;MACnC,IAAI;QAAE5E;MAAY,CAAC,GAAG,IAAI,CAACD,KAAK;MAChC;MACA,IAAI,CAACqC,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC;MACArC,WAAW,GAAGtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;MACxF,IAAIwC,OAAO,IAAI,OAAOA,OAAO,CAACC,MAAM,CAACC,QAAQ,CAAC,KAAK,UAAU,EAAE;QAC7D,OAAO,IAAI,CAAC/B,aAAa,CAAC/C,WAAW,EAAE,GAAG4E,OAAO,CAAC;MACpD;MAEA,OAAO,IAAI,CAAC7B,aAAa,CAAC/C,WAAW,CAAC;IACxC,CAAC;IAAA,KAED+E,QAAQ,GAAI/E,WAAW,IAAK;MAC1B;MACA,IAAI,IAAI,CAACgF,eAAe,KAAK9I,WAAW,CAAC+I,OAAO,EAAE;MAClD;MACA,MAAMC,eAAe,GAAG,IAAI,CAACnF,KAAK,CAACC,WAAW;MAC9C,MAAM+B,QAAQ,GAAGzG,KAAK,CAAC4G,QAAQ,CAACL,IAAI;MACpC,MAAMA,IAAI,GAAG7B,WAAW,CAACmF,iBAAiB,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC;MAC3D,IAAIlG,SAAS,GAAGgG,eAAe,CAAC7B,YAAY,CAAC,CAAC,CAACgC,cAAc,CAAC,CAAC;MAC/D,MAAM/F,OAAO,GAAG4F,eAAe,CAAC7B,YAAY,CAAC,CAAC,CAACiC,YAAY,CAAC,CAAC;MAC7D,MAAM/F,KAAK,GAAGS,WAAW,CAACqD,YAAY,CAAC,CAAC,CAACgC,cAAc,CAAC,CAAC;MACzD,MAAMpG,GAAG,GAAGe,WAAW,CAACqD,YAAY,CAAC,CAAC,CAACiC,YAAY,CAAC,CAAC;MACrD,MAAM;QAAElC;MAAS,CAAC,GAAGpD,WAAW,CAACqD,YAAY,CAAC,CAAC;MAC/C,MAAM;QAAED,QAAQ,EAAEmC;MAAU,CAAC,GAAGL,eAAe,CAAC7B,YAAY,CAAC,CAAC;MAE9D,IAAID,QAAQ,KAAKmC,SAAS,EAAE;QAAE;QAC5B,MAAMzF,eAAe,GAAGpG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;UAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;QAAE,CAAC,CAAC;QAClG,IAAI,CAACW,aAAa,CAACjD,eAAe,EAAE,IAAI,EAAE,KAAK,CAAC;QAChD;MACF;MAEA,IAAI,IAAI,CAAC0F,SAAS,IAAI,IAAI,CAACC,SAAS,IAAI,IAAI,CAACT,eAAe,KAAK9I,WAAW,CAACwJ,OAAO,IAAI3D,QAAQ,KAAKF,IAAI,EAAE;QACzG;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACM,IAAI3C,SAAS,KAAKI,OAAO,IAAIC,KAAK,KAAKL,SAAS,GAAG,CAAC,EAAEA,SAAS,IAAI,CAAC;QACpE,MAAMF,SAAS,GAAG+C,QAAQ,CAAC1C,KAAK,CAACH,SAAS,EAAEI,OAAO,CAAC;QACpD,MAAMD,KAAK,GAAGwC,IAAI,CAACxC,KAAK,CAACH,SAAS,EAAED,GAAG,CAAC;QACxC,MAAMZ,IAAI,GAAG;UAAEW,SAAS;UAAEK,KAAK;UAAEH,SAAS;UAAEI,OAAO;UAAEC,KAAK;UAAEN;QAAI,CAAC;QACjE,MAAMa,eAAe,GAAG,IAAI,CAACO,eAAe,CAACL,WAAW,EAAE3B,IAAI,CAAC;QAC/D;QACA,IAAI,CAACmH,SAAS,GAAG,KAAK;QACtB,IAAI,CAACC,SAAS,GAAG,KAAK;QACtB,IAAI,CAACT,eAAe,GAAG9I,WAAW,CAACyJ,QAAQ;QAC3C,IAAI,CAAC5C,aAAa,CAACjD,eAAe,CAAC;MACrC,CAAC,MAAM;QACL;AACN;AACA;AACA;AACA;QACM,MAAMzB,IAAI,GAAG;UAAEkB,KAAK;UAAEN;QAAI,CAAC;QAC3B,MAAM;UAAEa,eAAe;UAAE1B;QAAK,CAAC,GAAG,IAAI,CAACwH,iBAAiB,CAAC5F,WAAW,EAAE3B,IAAI,CAAC;QAC3E,MAAMwH,YAAY,GAAGzH,IAAI,KAAKjC,SAAS,CAAC2J,IAAI;QAC5C,IAAI,CAAC/C,aAAa,CAACjD,eAAe,EAAE+F,YAAY,EAAEA,YAAY,CAAC;MACjE;IACF,CAAC;IAAA,KAED3B,UAAU,GAAIH,MAAM,IAAK;MACvB,MAAMgC,OAAO,GAAG,IAAI,CAACC,wBAAwB,CAAC,CAAC;MAC/C,MAAMC,SAAS,GAAGlL,YAAY,CAACgJ,MAAM,EAAEgC,OAAO,CAAC;MAC/C,OAAOE,SAAS;IAClB,CAAC;IAAA,KAEDC,MAAM,GAAG,YAAY;MACnB,IAAItL,SAAS,CAAC,IAAI,CAACuL,QAAQ,CAAC,EAAE;MAC9B,IAAI;QACF,IAAI,CAAC1L,oBAAoB,CAAC,IAAI,CAAC0L,QAAQ,CAAC,EAAE;UACxC,MAAM,IAAI,CAACtC,YAAY,CAAC,CAAC;QAC3B;QACA,IAAIlJ,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAC,EAAE;UACnC,MAAM,IAAI,CAACC,aAAa,CAAC,KAAK,CAAC;QACjC;QACAtM,OAAO,CAACuM,OAAO,CAACjM,YAAY,CAAC,aAAa,CAAC,CAAC;MAC9C,CAAC,CAAC,OAAOkM,CAAC,EAAE;QACVxM,OAAO,CAACyM,OAAO,CAACnM,YAAY,CAAC,UAAU,CAAC,CAAC;MAC3C;IACF,CAAC;IAAA,KAEDoM,QAAQ,GAAG,MAAOC,MAAM,IAAK;MAC3B,MAAMC,OAAO,GAAGD,MAAM,IAAIA,MAAM,CAACE,YAAY,KAAK,OAAO;MACzD,IAAIrL,KAAK,CAACsL,MAAM,CAACC,WAAW,KAC1B,CAACH,OAAO,IAAI,CAACpL,KAAK,CAACsL,MAAM,CAACE,uBAAuB,CAClD,EAAE;QACD;QACA,MAAMxL,KAAK,CAACyL,UAAU,CAACC,WAAW,CAAC,CAAC;QACpC,IAAI1L,KAAK,CAACyL,UAAU,CAACE,OAAO,EAAE;UAC5B,MAAM,IAAIC,KAAK,CAAC9M,YAAY,CAAC,mBAAmB,CAAC,CAAC;QACpD;MACF;MACA,OAAO,IAAI,CAACyJ,YAAY,CAAC,IAAI,CAAC;IAChC,CAAC;IAAA,KAEDA,YAAY,GAAG,CAACsD,QAAQ,GAAG,KAAK,KAAK;MACnC,IAAI1M,oBAAoB,CAAC,IAAI,CAAC0L,QAAQ,CAAC,EAAE;MACzC,OAAO7K,KAAK,CAAC8L,UAAU,CAACD,QAAQ,CAAC;IACnC,CAAC;IAAA,KAcDnD,WAAW,GAAIhE,WAAW,IAAK;MAC7B,MAAM;QAAEoC;MAAI,CAAC,GAAG,IAAI;MACpB,MAAM;QAAEP;MAAK,CAAC,GAAGvG,KAAK,CAAC4G,QAAQ;MAC/B,MAAM;QAAEmF,MAAM;QAAEC;MAAW,CAAC,GAAGhM,KAAK,CAAC4G,QAAQ,CAACqF,UAAU,CAAC,CAAC;MAE1D,MAAMxB,OAAO,GAAG,IAAI,CAACC,wBAAwB,CAAC,CAAC;MAC/C,MAAMwB,UAAU,GAAGzN,IAAI,CAAEsN,MAAM,CAACI,GAAG,CAAE9G,KAAK;QAAA,IAAA+G,YAAA;QAAA,QAAAA,YAAA,GAAK3B,OAAO,CAAC4B,GAAG,CAAChH,KAAK,CAACpB,KAAK,CAAC,cAAAmI,YAAA,uBAAxBA,YAAA,CAA0BE,SAAS;MAAA,EAAC,CAChFC,MAAM,CAACP,UAAU,CAACG,GAAG,CAAEjH,SAAS;QAAA,IAAAsH,aAAA;QAAA,QAAAA,aAAA,GAAK/B,OAAO,CAAC4B,GAAG,CAACnH,SAAS,CAACuH,EAAE,CAAC,cAAAD,aAAA,uBAAzBA,aAAA,CAA2BF,SAAS;MAAA,EAAC,CAAC,CAAC;MAC/E,MAAMI,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC3BT,UAAU,CAACU,OAAO,CAAEN,SAAS,IAAK;QAAEI,SAAS,CAAC1F,GAAG,CAACsF,SAAS,EAAE,EAAE,CAAC;MAAE,CAAC,CAAC;;MAEpE;MACA,MAAM7D,MAAM,GAAGjJ,SAAS,CAACQ,KAAK,CAAC4G,QAAQ,CAACqF,UAAU,CAAC,CAAC,EAAEjM,KAAK,CAAC4G,QAAQ,CAACiG,iBAAiB,EAAEpC,OAAO,EAAEiC,SAAS,EAAEnG,IAAI,CAAC;MACjH,MAAMuG,MAAM,GAAGhG,GAAG,CAACiG,MAAM,CAAC,CAAC,CAAC,CAACC,iBAAiB;MAC9C,MAAMC,KAAK,GAAG;QAAE,GAAG,IAAI,CAACxI,KAAK,CAACwI;MAAM,CAAC;MACrCH,MAAM,CAACI,MAAM,CAAE3I,IAAI,IAAKA,IAAI,CAAC0I,KAAK,CAAClJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC6I,OAAO,CAAErI,IAAI,IAAK;QAC7E,MAAM4I,IAAI,GAAG,IAAI,CAACC,sBAAsB,CAAC7I,IAAI,CAAC8I,MAAM,CAAC;QACrD,IAAIF,IAAI,EAAE;UACR,MAAMG,UAAU,GAAGZ,SAAS,CAACL,GAAG,CAACc,IAAI,CAACb,SAAS,CAAC;UAChD,MAAMiB,UAAU,GAAGD,UAAU,CAACnB,GAAG,CAAEqB,EAAE,IAAMA,EAAE,CAACxF,GAAG,GAAG,CAAC,GAAGwF,EAAE,CAACxF,GAAG,GAAGxH,SAAS,GAAGC,UAAU,GAAG,CAAC+M,EAAE,CAACxF,GAAI,CAAC,CAChGyF,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,GAAGC,CAAE,CAAC,CAAC9J,GAAG,CAAC,CAAC,GAAG,CAAC,GAAGnD,WAAW;UAClDuM,KAAK,CAAE,cAAaM,UAAW,EAAC,CAAC,GAAG;YAAEA,UAAU,EAAG,GAAEA,UAAW;UAAI,CAAC;UACrET,MAAM,CAAChJ,IAAI,CAAC;YAAEuJ,MAAM,EAAE9I,IAAI,CAAC8I,MAAM;YAAEhK,MAAM,EAAEkB,IAAI,CAAClB,MAAM;YAAE4J,KAAK,EAAG,cAAaM,UAAW;UAAE,CAAC,CAAC;QAC9F;MACF,CAAC,CAAC;MACF,MAAM/I,eAAe,GAAGpG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;MAClG,IAAI,CAACwB,QAAQ,CAAC;QAAE2E;MAAM,CAAC,CAAC;MACxB,OAAO;QAAEzI,eAAe;QAAEiE;MAAO,CAAC;IACpC,CAAC;IAAA,KAED6B,iBAAiB,GAAG,CAAC5F,WAAW,EAAE3B,IAAI,KAAK;MACzC,MAAM;QAAEkB,KAAK;QAAEN;MAAI,CAAC,GAAGZ,IAAI;MAC3B,MAAM;QAAE6K;MAAa,CAAC,GAAG,IAAI,CAACnJ,KAAK;MACnC,IAAI,CAAC,IAAI,CAACoJ,SAAS,EAAE;QACnB,OAAO;UAAErJ,eAAe,EAAEE,WAAW;UAAE5B,IAAI,EAAEjC,SAAS,CAAC2J;QAAK,CAAC;MAC/D;MAAE,IAAIvG,KAAK,KAAKN,GAAG,IAAI1B,WAAW,CAAC2L,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE9K,IAAI,CAAC,EAAE;QACtD,MAAMgL,IAAI,GAAGnP,MAAM,CAACqB,KAAK,CAAC4G,QAAQ,CAACL,IAAI,CAACxC,KAAK,CAAC,CAAC,EAAEE,KAAK,CAAC,CAAC;QACxD,MAAMO,eAAe,GAAG,IAAI,CAAC0B,YAAY,CAACxB,WAAW,EAAE;UAAE+H,EAAE,EAAEqB,IAAI;UAAEC,KAAK,EAAEH,YAAY,CAACrH,IAAI;UAAEyH,IAAI,EAAEJ,YAAY,CAACI,IAAI;UAAElL,IAAI,EAAET,GAAG,CAAC4L;QAAU,CAAC,CAAC;QAC5I,OAAO;UAAEzJ,eAAe;UAAE1B,IAAI,EAAEjC,SAAS,CAACqN;QAAM,CAAC;MACnD;MAAE,IAAIjK,KAAK,KAAKN,GAAG,IAAI3B,OAAO,CAAC4L,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE9K,IAAI,CAAC,EAAE;QAClD,MAAMqL,OAAO,GAAGxP,MAAM,CAACqB,KAAK,CAAC4G,QAAQ,CAACL,IAAI,CAACxC,KAAK,CAAC,CAAC,EAAEE,KAAK,CAAC,CAAC;QAC3D,MAAMmK,KAAK,GAAGzP,MAAM,CAACqB,KAAK,CAAC4G,QAAQ,CAACL,IAAI,CAACxC,KAAK,CAAC,CAAC,EAAEJ,GAAG,CAAC,CAAC;QACvD,IAAIxB,OAAO,CAACyL,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE9K,IAAI,CAAC,EAAE;UAC/B,MAAM;YAAE4B,WAAW,EAAEF;UAAgB,CAAC,GAAG,IAAI,CAACwB,UAAU,CAACtB,WAAW,EAAE;YAAET,KAAK,EAAEkK,OAAO;YAAExK,GAAG,EAAEyK,KAAK;YAAEL,KAAK,EAAEH,YAAY,CAACrH,IAAI;YAAEyH,IAAI,EAAEJ,YAAY,CAACI,IAAI;YAAElL,IAAI,EAAE8K,YAAY,CAAC9K;UAAK,CAAC,EAAE;YAAEuL,MAAM,EAAEjM,gBAAgB,CAACkM;UAAQ,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;UACnO,OAAO;YAAE9J,eAAe;YAAE1B,IAAI,EAAEjC,SAAS,CAAC0N;UAAK,CAAC;QAClD;QACA,MAAM/J,eAAe,GAAG,IAAI,CAACqB,QAAQ,CAACnB,WAAW,EAAE;UAAET,KAAK,EAAEkK,OAAO;UAAExK,GAAG,EAAEyK,KAAK;UAAEL,KAAK,EAAEH,YAAY,CAACrH,IAAI;UAAEyH,IAAI,EAAEJ,YAAY,CAACI,IAAI;UAAElL,IAAI,EAAE8K,YAAY,CAAC9K;QAAK,CAAC,CAAC;QAC9J,OAAO;UAAE0B,eAAe;UAAE1B,IAAI,EAAEjC,SAAS,CAAC0N;QAAK,CAAC;MAClD;MACA,OAAO;QAAE/J,eAAe,EAAEE,WAAW;QAAE5B,IAAI,EAAEjC,SAAS,CAAC2J;MAAK,CAAC;IAC/D,CAAC;IAAA,KAEDrF,SAAS,GAAG,CAACrC,IAAI,EAAEmC,EAAE,KAAK;MACxB,MAAM;QAAER,KAAK,EAAE;UAAEC;QAAY;MAAE,CAAC,GAAG,IAAI;MACvC,IAAIvC,OAAO,CAACW,IAAI,CAAC,IAAI9C,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,EAAE;QACtE,OAAO/J,WAAW;MACpB;MACA,IAAI,CAACvC,OAAO,CAACW,IAAI,CAAC,IAAI9C,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,EAAE;QACvE;MACF;MACA,IAAItP,oBAAoB,CAAC,IAAI,CAAC0L,QAAQ,CAAC,EAAE;QACvC,OAAOnG,WAAW;MACpB;MAEA,MAAMgK,SAAS,GAAG1O,KAAK,CAAC4G,QAAQ,CAACzB,SAAS,CAACrC,IAAI,EAAEmC,EAAE,CAAC;MACpD,QAAQ,IAAI;QACV,KAAMjD,OAAO,CAACc,IAAI,CAAC;UAAG,IAAI,CAACD,UAAU,CAAC/B,MAAM,CAAC6E,SAAS,EAAE+I,SAAS,CAAC;UAAE;QACpE,KAAMxM,YAAY,CAACY,IAAI,CAAC;UAAG,IAAI,CAACD,UAAU,CAAC/B,MAAM,CAACqF,cAAc,EAAEuI,SAAS,CAAC;UAAE;QAC9E,KAAMzM,WAAW,CAACa,IAAI,CAAC;UAAG,IAAI,CAACD,UAAU,CAAC/B,MAAM,CAACmF,aAAa,EAAEyI,SAAS,CAAC;UAAE;QAC5E;UAAS;MACX;MACA,IAAI,CAAC5H,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC,OAAO3I,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;IACnF,CAAC;IAAA,KAEDZ,YAAY,GAAG,CAACxB,WAAW,EAAE;MAAE+H,EAAE;MAAEsB,KAAK;MAAE9I,EAAE;MAAE+I,IAAI;MAAElL;IAAK,CAAC,EAAE8C,kBAAkB,GAAG,EAAE,KAAK;MACtF,MAAM;QAAEnB,KAAK,EAAE;UAAEmJ;QAAa,CAAC;QAAE/C;MAAS,CAAC,GAAG,IAAI;MAClD,MAAM;QAAEtE;MAAK,CAAC,GAAGvG,KAAK,CAAC4G,QAAQ;MAC/B,IAAIzH,oBAAoB,CAAC,IAAI,CAAC0L,QAAQ,CAAC,IAAI7K,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,EAAE,OAAO/J,WAAW;MAChH,IAAI+H,EAAE,KAAK9N,MAAM,CAAC4H,IAAI,CAAC,EAAE,OAAO7B,WAAW,CAAC,CAAC;MAC7C;MACA,KAAK,MAAMH,IAAI,IAAIvE,KAAK,CAAC4G,QAAQ,CAACD,OAAO,CAACqF,UAAU,EAAE;QACpD,IAAIzH,IAAI,CAACkI,EAAE,KAAKA,EAAE,IAAIlI,IAAI,CAACwJ,KAAK,KAAKH,YAAY,CAACrH,IAAI,EAAE,OAAO7B,WAAW;MAC5E;MACA,IAAI,CAACO,EAAE,EAAEA,EAAE,GAAGpG,MAAM,CAAC,CAAC;MACtB,MAAM8P,MAAM,GAAGpN,QAAQ,CAAC7C,MAAM,CAAC6H,IAAI,EAAEkG,EAAE,CAAC,CAAC;MACzC,IAAIkC,MAAM,IAAIlC,EAAE,EAAEA,EAAE,IAAI,CAAC;MACzB,MAAMmC,OAAO,GAAG;QACd9L,IAAI;QACJ2J,EAAE;QACFsB,KAAK;QACL9I,EAAE;QACFsB,IAAI,EAAE1E,kBAAkB,CAAC7B,KAAK,CAAC4G,QAAQ,CAACL,IAAI,EAAE;UAAEkG,EAAE;UAAEsB;QAAM,CAAC,CAAC;QAC5Dc,QAAQ,EAAExP,gBAAgB,CAACwL,QAAQ,CAAC;QACpCmD;MACF,CAAC;MAED,IAAI,CAACnL,UAAU,CAAC/B,MAAM,CAACkE,aAAa,EAAE;QACpCE,SAAS,EAAE0J,OAAO;QAClBhJ;MACF,CAAC,CAAC;MAEF5F,KAAK,CAAC4G,QAAQ,CAACkI,aAAa,CAACF,OAAO,EAAEhJ,kBAAkB,CAAC;MAEzD,IAAI,CAACkB,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChCrC,WAAW,GAAGtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;MACxFpC,WAAW,GAAG9C,cAAc,CAAC8C,WAAW,CAAC;MACzC,OAAOA,WAAW;IACpB,CAAC;IAAA,KAED2B,aAAa,GAAG,CAAC3B,WAAW,EAAE;MAAEqK,MAAM;MAAEC,QAAQ;MAAEC,IAAI;MAAEC,MAAM;MAAEnB,KAAK;MAAE9I,EAAE;MAAE+I,IAAI;MAAElL;IAAK,CAAC,KAAK;MAC1F,MAAM;QAAE2B,KAAK,EAAE;UAAEmJ;QAAa,CAAC;QAAE/C;MAAS,CAAC,GAAG,IAAI;MAClD,IAAI1L,oBAAoB,CAAC0L,QAAQ,CAAC,IAAI7K,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,EAAE,OAAO/J,WAAW;MAC3G,IAAIqK,MAAM,KAAKE,IAAI,EAAE,OAAOvK,WAAW;MACvC,IAAIvC,OAAO,CAAC6M,QAAQ,CAAC,IAAI7M,OAAO,CAAC+M,MAAM,CAAC,EAAE,OAAOxK,WAAW,CAAC,CAAC;;MAE9D,IAAI1E,KAAK,CAAC4G,QAAQ,CAACD,OAAO,CAACwI,WAAW,CAACC,IAAI,CAAE7K,IAAI,IAAKA,IAAI,CAACwK,MAAM,KAAKA,MAAM,IAAIxK,IAAI,CAAC0K,IAAI,KAAKA,IAAI,IAAI1K,IAAI,CAACwJ,KAAK,KAAKH,YAAY,CAACrH,IAAI,CAAC,EAAE,OAAO7B,WAAW;MAE3J,IAAI,CAACO,EAAE,EAAEA,EAAE,GAAGpG,MAAM,CAAC,CAAC;MACtB,MAAM+P,OAAO,GAAG;QACd9L,IAAI;QACJiM,MAAM;QACNC,QAAQ;QACRC,IAAI;QACJC,MAAM;QACNnB,KAAK;QACL9I,EAAE;QACF4J,QAAQ,EAAExP,gBAAgB,CAACwL,QAAQ,CAAC;QACpCmD;MACF,CAAC;MACD,IAAI,CAACnL,UAAU,CAAC/B,MAAM,CAAC4E,cAAc,EAAEkJ,OAAO,CAAC;MAC/C5O,KAAK,CAAC4G,QAAQ,CAACkI,aAAa,CAACF,OAAO,CAAC;MAErC,IAAI,CAAC9H,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChCrC,WAAW,GAAGtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;MACxF,OAAOpC,WAAW;IACpB,CAAC;IAAA,KAEDmB,QAAQ,GAAG,CAACnB,WAAW,EAAE;MAAET,KAAK;MAAEN,GAAG;MAAEoK,KAAK;MAAE9I,EAAE;MAAE+I,IAAI;MAAElL;IAAK,CAAC,EAAE8C,kBAAkB,GAAG,EAAE,KAAK;MAC1F,MAAM;QAAEiF;MAAS,CAAC,GAAG,IAAI;MACzB,MAAM;QAAEjE,QAAQ;QAAE0E;MAAO,CAAC,GAAGtL,KAAK;MAClC,MAAM;QAAEuG;MAAK,CAAC,GAAGvG,KAAK,CAAC4G,QAAQ;MAE/B,IAAI0E,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,IAAK,CAACtM,OAAO,CAACW,IAAI,CAAE,EAAE,OAAO4B,WAAW;MACvF,IAAIvF,oBAAoB,CAAC,IAAI,CAAC0L,QAAQ,CAAC,IAAK,CAAC1I,OAAO,CAACW,IAAI,CAAE,EAAE,OAAO4B,WAAW;MAC/E,IAAIvC,OAAO,CAACW,IAAI,CAAC,KAAK,CAACzD,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAC,IAAIS,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAAC+M,QAAQ,CAAC,EAAE,OAAO3K,WAAW,CAAC,CAAC;;MAE9H;MACA,IAAIhG,MAAM,CAAC6H,IAAI,EAAEtC,KAAK,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE,OAAOS,WAAW;MAEvD,IAAIkC,QAAQ,CAACD,OAAO,CAACoF,MAAM,CAACqD,IAAI,CAAE7K,IAAI,IAAKA,IAAI,CAACN,KAAK,KAAKA,KAAK,IAAIM,IAAI,CAACZ,GAAG,KAAKA,GAAG,IAAIY,IAAI,CAACwJ,KAAK,KAAKA,KAAK,CAAC,EAAE,OAAOrJ,WAAW;;MAEhI;MACA,IAAI,CAACO,EAAE,EAAEA,EAAE,GAAGpG,MAAM,CAAC,CAAC;MACtB,MAAM+P,OAAO,GAAG;QACd9L,IAAI;QACJmB,KAAK;QACLN,GAAG;QACHoK,KAAK;QACL9I,EAAE;QACFsB,IAAI,EAAE7H,MAAM,CAAC6H,IAAI,EAAEtC,KAAK,EAAEN,GAAG,GAAGM,KAAK,CAAC;QACtC4K,QAAQ,EAAExP,gBAAgB,CAACwL,QAAQ,CAAC;QACpCmD;MACF,CAAC;MAED,IAAI,CAACnL,UAAU,CAAC/B,MAAM,CAACsE,SAAS,EAAE;QAChCC,KAAK,EAAEuJ,OAAO;QACdhJ;MACF,CAAC,CAAC;MAEFgB,QAAQ,CAACkI,aAAa,CAACF,OAAO,EAAEhJ,kBAAkB,CAAC;MACnD;MACA,IAAI,CAACkB,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC;MACArC,WAAW,GAAGtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;MACxFpC,WAAW,GAAG9C,cAAc,CAAC8C,WAAW,CAAC;MACzC,OAAOA,WAAW;IACpB,CAAC;IAAA,KAEDsB,UAAU,GAAG,CAACtB,WAAW,EAAE;MAAET,KAAK;MAAEN,GAAG;MAAEoK,KAAK;MAAE9I,EAAE;MAAE+I,IAAI;MAAElL;IAAK,CAAC,EAAEwM,UAAU,EAAEC,UAAU,GAAG,IAAI,EAAEC,cAAc,GAAG,KAAK,KAAK;MAC1H,MAAM;QAAE3E;MAAS,CAAC,GAAG,IAAI;MACzB,MAAM;QAAEjE,QAAQ;QAAE0E,MAAM;QAAEvF;MAAO,CAAC,GAAG/F,KAAK;MAC1C,MAAM;QAAEuG;MAAK,CAAC,GAAGK,QAAQ;MACzB,IAAI0E,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,IAAK,CAACtM,OAAO,CAACW,IAAI,CAAE,EAAE,OAAO;QAAE4B,WAAW;QAAEgK,SAAS,EAAE;MAAK,CAAC;MAC5G,IAAIvP,oBAAoB,CAAC,IAAI,CAAC0L,QAAQ,CAAC,IAAK,CAAC1I,OAAO,CAACW,IAAI,CAAE,EAAE,OAAO;QAAE4B,WAAW;QAAEgK,SAAS,EAAE;MAAK,CAAC;MACpG,IAAIvM,OAAO,CAACW,IAAI,CAAC,KAAK,CAACzD,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAC,IAAIS,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAAC+M,QAAQ,CAAC,EAAE,OAAO;QAAE3K,WAAW;QAAEgK,SAAS,EAAE;MAAK,CAAC,CAAC,CAAC;;MAEnJ;MACA,IAAIhQ,MAAM,CAAC6H,IAAI,EAAEtC,KAAK,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE,OAAO;QAAES,WAAW;QAAEgK,SAAS,EAAE;MAAK,CAAC;MAE5E,IAAI3I,MAAM,CAAC0J,OAAO,CAACC,OAAO,CAACN,IAAI,CAAE7K,IAAI,IAAKA,IAAI,CAACN,KAAK,KAAKA,KAAK,IAAIM,IAAI,CAACZ,GAAG,KAAKA,GAAG,IAAIY,IAAI,CAACwJ,KAAK,KAAKA,KAAK,CAAC,EAAE,OAAO;QAAErJ,WAAW;QAAEgK,SAAS,EAAE;MAAK,CAAC;;MAEpJ;MACA,IAAI,CAACzJ,EAAE,EAAEA,EAAE,GAAGpG,MAAM,CAAC,CAAC;MACtB,MAAM+P,OAAO,GAAG;QACd9L,IAAI;QACJmB,KAAK;QACLN,GAAG;QACHoK,KAAK;QACL9I,EAAE;QACFsB,IAAI,EAAE7H,MAAM,CAAC6H,IAAI,EAAEtC,KAAK,EAAEN,GAAG,GAAGM,KAAK,CAAC;QACtC4K,QAAQ,EAAExP,gBAAgB,CAACwL,QAAQ,CAAC;QACpCmD;MACF,CAAC;MACD,IAAIwB,cAAc,EAAE;QAClB,IAAI,CAAClH,QAAQ,CAAC;UAAEqH,aAAa,EAAE;YAAE,GAAGf;UAAQ;QAAE,CAAC,CAAC;MAClD;MAEA,MAAMF,SAAS,GAAG3I,MAAM,CAAC6J,gBAAgB,CAAChB,OAAO,EAAE3J,EAAE,EAAE;QAAE,GAAGqK;MAAW,CAAC,CAAC;MACzE,IAAIC,UAAU,EAAE;QACd,IAAI,CAAC1M,UAAU,CAAC/B,MAAM,CAACwE,kBAAkB,EAAEoJ,SAAS,CAAC;MACvD;;MAEA;MACA,IAAI,CAAC5H,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC;MACArC,WAAW,GAAGtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;MACxFpC,WAAW,GAAG9C,cAAc,CAAC8C,WAAW,CAAC;MACzC,OAAO;QAAEA,WAAW;QAAEgK;MAAU,CAAC;IACnC,CAAC;IAAA,KAEDjJ,WAAW,GAAG,CAACR,EAAE,EAAEsK,UAAU,GAAG,IAAI,KAAK;MACvC,MAAM;QAAE9K,KAAK,EAAE;UAAEC;QAAY;MAAE,CAAC,GAAG,IAAI;MAEvC,IAAI1E,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,EAAE;QACrD,OAAO;UAAE/J,WAAW;UAAEgK,SAAS,EAAE;QAAK,CAAC;MACzC;MACA,IAAIvP,oBAAoB,CAAC,IAAI,CAAC0L,QAAQ,CAAC,EAAE;QACvC,OAAO;UAAEnG,WAAW;UAAEgK,SAAS,EAAE;QAAK,CAAC;MACzC;MACA,MAAMA,SAAS,GAAG1O,KAAK,CAAC+F,MAAM,CAAC8J,mBAAmB,CAAC5K,EAAE,CAAC;MACtD,IAAIsK,UAAU,EAAE;QACd,IAAI,CAAC1M,UAAU,CAAC/B,MAAM,CAACgF,kBAAkB,EAAE4I,SAAS,CAAC;MACvD;MACA,IAAI,CAAC5H,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC,OAAO;QAAErC,WAAW,EAAEtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;UAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;QAAE,CAAC,CAAC;QAAE4H;MAAU,CAAC;IAC/G,CAAC;IAAA,KAEDvH,YAAY,GAAG,CAAC2I,QAAQ,EAAEP,UAAU,GAAG,IAAI,KAAK;MAC9C,MAAM;QAAE9K,KAAK,EAAE;UAAEC;QAAY;MAAE,CAAC,GAAG,IAAI;MACvC,IAAI,EAAErF,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAC,IAAI7K,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,CAAC,EAAE;QAC3F,OAAO;UAAE/J,WAAW;UAAEgK,SAAS,EAAE;QAAK,CAAC;MACzC;MACA,MAAMA,SAAS,GAAG1O,KAAK,CAAC+F,MAAM,CAACoB,YAAY,CAAC2I,QAAQ,CAAC;MACrD,IAAIP,UAAU,EAAE;QACd,IAAI,CAAC1M,UAAU,CAAC/B,MAAM,CAACsG,aAAa,EAAEsH,SAAS,CAAC;MAClD;MACA,IAAI,CAAC5H,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC,OAAO;QAAErC,WAAW,EAAEtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;UAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;QAAE,CAAC,CAAC;QAAE4H;MAAU,CAAC;IAC/G,CAAC;IAAA,KAEDlJ,SAAS,GAAG,CAACd,WAAW,EAAEoL,QAAQ,EAAE/J,MAAM,EAAEwJ,UAAU,GAAG,IAAI,KAAK;MAChE,MAAM;QAAE9K,KAAK,EAAE;UAAEC,WAAW,EAAEqL;QAAgB;MAAE,CAAC,GAAG,IAAI;MACxD,IAAI,EAAE1Q,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAC,IAAI7K,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,CAAC,EAAE;QAC3F,OAAO;UAAE/J,WAAW,EAAEqL,eAAe;UAAErB,SAAS,EAAE;QAAK,CAAC;MAC1D;MACA,MAAMA,SAAS,GAAG1O,KAAK,CAAC+F,MAAM,CAACiK,SAAS,CAACF,QAAQ,EAAE;QACjD,GAAG/J;MACL,CAAC,CAAC;MACF,IAAIwJ,UAAU,EAAE;QACd,IAAI,CAAC1M,UAAU,CAAC/B,MAAM,CAACoG,UAAU,EAAEwH,SAAS,CAAC;MAC/C;MACA,IAAI,CAAC5H,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC,OAAO;QAAErC,WAAW,EAAEtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;UAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;QAAE,CAAC,CAAC;QAAE4H;MAAU,CAAC;IAC/G,CAAC;IAAA,KAEDuB,oBAAoB,GAAIH,QAAQ,IAAK;MACnC,IAAIA,QAAQ,EAAE;QACZ,IAAItL,eAAe,GAAG,IAAI,CAACC,KAAK,CAACC,WAAW;QAC5C,MAAMwL,UAAU,GAAGlQ,KAAK,CAAC4G,QAAQ,CAACuJ,WAAW,CAACL,QAAQ,CAAC;QACvD,IAAII,UAAU,IAAI/N,OAAO,CAAC+N,UAAU,CAACpN,IAAI,CAAC,EAAE;UAC1C,MAAM;YAAE4B;UAAY,CAAC,GAAG,IAAI,CAACe,WAAW,CAACyK,UAAU,CAACjL,EAAE,CAAC;UACvDT,eAAe,GAAGE,WAAW;QAC/B,CAAC,MAAM;UACL,MAAM;YAAEA;UAAY,CAAC,GAAG,IAAI,CAACyC,YAAY,CAAC2I,QAAQ,CAAC;UACnDtL,eAAe,GAAGE,WAAW;QAC/B;QACA,IAAI,CAAC+C,aAAa,CAACjD,eAAe,CAAC;MACrC;IACF,CAAC;IAAA,KAED4L,qBAAqB,GAAIC,SAAS,IAAK;MACrC,MAAMC,UAAU,GAAG,EAAE;MACrBD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEzD,OAAO,CAAEkD,QAAQ,IAAK;QAC/B,IAAIA,QAAQ,EAAE;UACZ,MAAMI,UAAU,GAAGlQ,KAAK,CAAC4G,QAAQ,CAACuJ,WAAW,CAACL,QAAQ,CAAC;UACvD,IAAII,UAAU,IAAI/N,OAAO,CAAC+N,UAAU,CAACpN,IAAI,CAAC,EAAE;YAC1C,MAAM;cAAE4L;YAAU,CAAC,GAAG,IAAI,CAACjJ,WAAW,CAACyK,UAAU,CAACjL,EAAE,EAAE,KAAK,CAAC;YAC5D,IAAIyJ,SAAS,EAAE;cACb4B,UAAU,CAACxM,IAAI,CAAC4K,SAAS,CAAC;YAC5B;UACF,CAAC,MAAM;YACL,MAAM;cAAEA;YAAU,CAAC,GAAG,IAAI,CAACvH,YAAY,CAAC2I,QAAQ,EAAE,KAAK,CAAC;YACxD,IAAIpB,SAAS,EAAE;cACb4B,UAAU,CAACxM,IAAI,CAAC4K,SAAS,CAAC;YAC5B;UACF;QACF;MACF,CAAC,CAAC;MACF,IAAI,CAAC7L,UAAU,CAAC/B,MAAM,CAACyG,cAAc,EAAE+I,UAAU,CAAC;MAClD,MAAM;QAAE7L,KAAK,EAAE;UAAEC;QAAY;MAAE,CAAC,GAAG,IAAI;MACvC,IAAI,CAACoC,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC,OAAO3I,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;IACnF,CAAC;IAAA,KAEDQ,iBAAiB,GAAIiJ,WAAW,IAAK;MACnC,MAAMD,UAAU,GAAG,EAAE;MACrB,MAAM;QAAE7L,KAAK,EAAE;UAAEC;QAAY;MAAE,CAAC,GAAG,IAAI;MACvC,IAAI,EAAErF,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAC,IAAI7K,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,CAAC,EAAE;QAC3F,OAAO/J,WAAW;MACpB;MACA6L,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE3D,OAAO,CAAEsD,UAAU,IAAK;QACnC,MAAM;UAAEnK,MAAM;UAAEd;QAAG,CAAC,GAAGiL,UAAU;QACjC,IAAInK,MAAM,CAACsI,MAAM,KAAKjM,gBAAgB,CAACkM,OAAO,EAAE;UAC9C,MAAM;YAAEI;UAAU,CAAC,GAAG,IAAI,CAACjJ,WAAW,CAACR,EAAE,EAAE,KAAK,CAAC;UACjD,IAAIyJ,SAAS,EAAE;YACb4B,UAAU,CAACxM,IAAI,CAAC4K,SAAS,CAAC;UAC5B;QACF,CAAC,MAAM;UACL,MAAM;YAAEA;UAAU,CAAC,GAAG,IAAI,CAACvH,YAAY,CAAClC,EAAE,EAAE,KAAK,CAAC;UAClD,IAAIyJ,SAAS,EAAE;YACb4B,UAAU,CAACxM,IAAI,CAAC4K,SAAS,CAAC;UAC5B;QACF;MACF,CAAC,CAAC;MACF,IAAI,CAAC7L,UAAU,CAAC/B,MAAM,CAACyG,cAAc,EAAE+I,UAAU,CAAC;MAClD,IAAI,CAACxJ,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC,OAAO3I,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;IACnF,CAAC;IAAA,KAEDU,cAAc,GAAG,CAAC9C,WAAW,EAAE6L,WAAW,KAAK;MAC7C,MAAMD,UAAU,GAAG,EAAE;MACrB,IAAI,EAAEjR,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAC,IAAI7K,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,CAAC,EAAE;QAC3F,OAAO/J,WAAW;MACpB;MACA6L,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE3D,OAAO,CAAEsD,UAAU,IAAK;QACnC,MAAM;UAAEnK,MAAM;UAAEd;QAAG,CAAC,GAAGiL,UAAU;QACjC,IAAInK,MAAM,CAACsI,MAAM,KAAKjM,gBAAgB,CAACkM,OAAO,EAAE;UAC9C,MAAM;YAAEI;UAAU,CAAC,GAAG,IAAI,CAAC1I,UAAU,CAACtB,WAAW,EAAEwL,UAAU,CAAC7K,KAAK,EAAE;YAAE,GAAGU;UAAO,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC;UACjG,IAAI2I,SAAS,EAAE;YACb4B,UAAU,CAACxM,IAAI,CAAC4K,SAAS,CAAC;UAC5B;QACF,CAAC,MAAM;UACL,MAAM;YAAEA;UAAU,CAAC,GAAG,IAAI,CAAClJ,SAAS,CAACd,WAAW,EAAEO,EAAE,EAAE;YAAE,GAAGc;UAAO,CAAC,EAAE,KAAK,CAAC;UAC3E,IAAI2I,SAAS,EAAE;YACb4B,UAAU,CAACxM,IAAI,CAAC4K,SAAS,CAAC;UAC5B;QACF;MACF,CAAC,CAAC;MACF,IAAI,CAAC7L,UAAU,CAAC/B,MAAM,CAACuG,WAAW,EAAEiJ,UAAU,CAAC;MAC/C,IAAI,CAACxJ,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;MAChC,OAAO3I,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;IACnF,CAAC;IAAA,KAED0J,kBAAkB,GAAIN,UAAU,IAAK;MACnC,IAAIA,UAAU,EAAE;QACd,IAAI1L,eAAe,GAAG,IAAI,CAACC,KAAK,CAACC,WAAW;QAC5C,IAAIvC,OAAO,CAAC+N,UAAU,CAACpN,IAAI,CAAC,EAAE;UAC5B,MAAM;YAAE4B;UAAY,CAAC,GAAG,IAAI,CAACe,WAAW,CAACyK,UAAU,CAACjL,EAAE,CAAC;UACvDT,eAAe,GAAGE,WAAW;QAC/B,CAAC,MAAM;UACL,MAAM;YAAEA;UAAY,CAAC,GAAG,IAAI,CAACyC,YAAY,CAAC+I,UAAU,CAACjL,EAAE,CAAC;UACxDT,eAAe,GAAGE,WAAW;QAC/B;QACA,IAAI,CAAC+C,aAAa,CAACjD,eAAe,CAAC;MACrC;IACF,CAAC;IAAA,KAEDiM,cAAc,GAAG,MAAM;MACrB,MAAM;QAAEd;MAAc,CAAC,GAAG,IAAI,CAAClL,KAAK;MACpC,IAAI,CAAC+L,kBAAkB,CAACb,aAAa,CAAC;IACxC,CAAC;IAED;IACA;IAAA,KACA5I,cAAc,GAAI2J,KAAK,IAAK;MAC1B,MAAM;QAAE9J;MAAS,CAAC,GAAG5G,KAAK;MAC1B,MAAM;QAAE6M;MAAkB,CAAC,GAAGjG,QAAQ;MACtC,MAAM;QACJ+J,YAAY;QAAEC,YAAY;QAC1BC,SAAS;QAAEC,qBAAqB;QAAEC;MACpC,CAAC,GAAG,IAAI,CAACtM,KAAK;MACd,MAAMwI,KAAK,GAAG;QAAE,GAAG,IAAI,CAACxI,KAAK,CAACwI;MAAM,CAAC;MACrC,MAAM1G,IAAI,GAAGmK,KAAK,IAAI1Q,KAAK,CAAC4G,QAAQ,CAACL,IAAI;MACzC,MAAM;QAAEwF,MAAM;QAAEC;MAAW,CAAC,GAAGpF,QAAQ,CAACqF,UAAU,CAAC,CAAC;MACpD;;MAEA;MACA,MAAM+E,MAAM,GAAGvS,IAAI,CAChBsN,MAAM,CAACI,GAAG,CAAE9G,KAAK,IAAKA,KAAK,CAACpB,KAAK,CAAC,CAChCsI,MAAM,CAACR,MAAM,CAACI,GAAG,CAAE9G,KAAK,IAAKA,KAAK,CAAC1B,GAAG,CAAC,CAAC,CACxC4I,MAAM,CAACP,UAAU,CAACG,GAAG,CAAEjH,SAAS,IAAKA,SAAS,CAACuH,EAAE,CAAC,CAAC,CACnDF,MAAM,CAACsE,SAAS,CAAC1E,GAAG,CAAE8E,CAAC,IAAKA,CAAC,CAAChN,KAAK,CAAC,CAAC,CACrCsI,MAAM,CAACsE,SAAS,CAAC1E,GAAG,CAAE8E,CAAC,IAAKA,CAAC,CAACtN,GAAG,CAAC,CAAC,CACnC4I,MAAM,CAAC,CAAC,CAAC,EAAEhG,IAAI,CAAClD,MAAM,CAAC,CAAC,CACxBoK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CACzB,CAAC;MACD,MAAMuD,UAAU,GAAGzS,IAAI,CAAEsN,MAAM,CAACI,GAAG,CAAE9G,KAAK,IAAKA,KAAK,CAACpB,KAAK,CAAE,CAAC;MAC7D,MAAMkN,cAAc,GAAG1S,IAAI,CAAEuN,UAAU,CAACG,GAAG,CAAEjH,SAAS,IAAKA,SAAS,CAACuH,EAAE,CAAE,CAAC;MAC1E,MAAM2E,aAAa,GAAG3S,IAAI,CAAEoS,SAAS,CAAC1E,GAAG,CAAEkF,GAAG,IAAKA,GAAG,CAACpN,KAAK,CAAE,CAAC;;MAE/D;MACA,MAAM6C,GAAG,GAAG;QACViG,MAAM,EAAE,CAAC;UACPxG,IAAI;UACJ+K,GAAG,EAAE,cAAc;UACnBxO,IAAI,EAAE,UAAU;UAChByO,KAAK,EAAE,CAAC;UACRvE,iBAAiB,EAAE,CACjB;YAAEK,MAAM,EAAE,CAAC;YAAEhK,MAAM,EAAEkD,IAAI,CAAClD,MAAM;YAAE4J,KAAK,EAAE;UAAgB,CAAC,CAAC;UAC7DuE,QAAQ,EAAE,EAAE;UACZC,YAAY,EAAE,EAAE;UAChB1O,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;QACF2O,SAAS,EAAE,CAAC;MACd,CAAC;MACD,IAAIC,UAAU,GAAG,CAAC;MAClB;MACA,MAAM7E,MAAM,GAAGhG,GAAG,CAACiG,MAAM,CAAC,CAAC,CAAC,CAACC,iBAAiB;MAC9C,IAAI,CAAC4E,QAAQ,GAAG,IAAIjF,GAAG,CAAC,CAAC;MACzBqE,MAAM,CAACpE,OAAO,CAAC,CAACiF,MAAM,EAAEC,KAAK,EAAEC,KAAK,KAAK;QACvC;QACA,IAAI,CAACD,KAAK,EAAE;QACZ,MAAM;UAAEtO,IAAI;UAAEwO;QAAK,CAAC,GAAG;UAAExO,IAAI,EAAEuO,KAAK,CAACD,KAAK,GAAG,CAAC,CAAC;UAAEE,IAAI,EAAEH;QAAO,CAAC;QAC/D,MAAMI,KAAK,GAAGlG,MAAM,CAACmB,MAAM,CAAE7H,KAAK,IAAMA,KAAK,CAACpB,KAAK,IAAIT,IAAI,IAAI6B,KAAK,CAAC1B,GAAG,GAAGH,IAAK,CAAC;QACjF,IAAI0O,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC1B,IAAIC,YAAY,GAAG,CAAC;QACpB,IAAIC,SAAS,GAAG9Q,aAAa;QAC7B,IAAI+Q,WAAW,GAAG,KAAK;QACvB,IAAIC,OAAO,GAAG,IAAI;QAClBL,KAAK,CAAC7C,IAAI,CAAE/J,KAAK,IAAK;UACpB,MAAMkN,SAAS,GAAGxQ,eAAe,CAAC8K,iBAAiB,EAAExH,KAAK,CAAC2I,IAAI,CAAC;UAChE,MAAMwE,OAAO,GAAG/Q,mBAAmB,CAAC8Q,SAAS,CAACE,KAAK,CAAC;UACpD,IAAI,CAACH,OAAO,EAAED,WAAW,GAAGlQ,OAAO,CAACkD,KAAK,CAACvC,IAAI,CAAC;UAC/C;UACA,IAAI6N,YAAY,CAAC1L,EAAE,KAAKI,KAAK,CAACJ,EAAE,IAAI0L,YAAY,CAAC5B,MAAM,KAAK1J,KAAK,CAACJ,EAAE,IAAI0L,YAAY,CAAC1B,IAAI,KAAK5J,KAAK,CAACJ,EAAE,EAAE;YACtGqN,OAAO,GAAGE,OAAO,CAACrG,GAAG,CAAC,CAAC4B,KAAK,EAAE2E,CAAC,KAAK3E,KAAK,GAAG1M,YAAY,CAAC;YACzDgR,WAAW,GAAGlQ,OAAO,CAACkD,KAAK,CAACvC,IAAI,CAAC;YACjC,OAAO,IAAI;UACb;UAEA,IAAK,CAACwP,OAAO,IAAI1B,YAAY,CAAC3L,EAAE,KAAKI,KAAK,CAACJ,EAAE,IAAK2L,YAAY,CAAC7B,MAAM,KAAK1J,KAAK,CAACJ,EAAE,IAAI2L,YAAY,CAAC3B,IAAI,KAAK5J,KAAK,CAACJ,EAAE,EAAE;YACpHqN,OAAO,GAAGE,OAAO,CAACrG,GAAG,CAAEwG,CAAC,IAAKA,CAAC,GAAGvR,WAAW,CAAC;UAC/C;UAEA,IAAI,CAACkR,OAAO,EAAE;YACZJ,UAAU,GAAGA,UAAU,CAAC/F,GAAG,CAAC,CAAC4B,KAAK,EAAE2E,CAAC,KAAK3E,KAAK,GAAGyE,OAAO,CAACE,CAAC,CAAC,GAAGN,SAAS,CAAC;YACzED,YAAY,IAAIC,SAAS;YACzBA,SAAS,GAAG9Q,aAAa,IAAI,CAAC,GAAG6Q,YAAY,CAAC,IAAI,CAAC,GAAGA,YAAY,CAAC;UACrE;UACA,OAAO,KAAK;QACd,CAAC,CAAC;QACF;QACAtB,SAAS,CACN3D,MAAM,CAAEmE,GAAG,IAAMA,GAAG,CAACpN,KAAK,IAAIT,IAAI,IAAI6N,GAAG,CAAC1N,GAAG,GAAGH,IAAK,CAAC,CACtD4L,IAAI,CAAEiC,GAAG,IAAK;UACb,MAAMuB,QAAQ,GAAG/B,SAAS,CAACgC,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAAC7O,KAAK,KAAKoN,GAAG,CAACpN,KAAK,CAAC;UAClE,IAAI2O,QAAQ,KAAKG,SAAS,EAAE;YAC1BT,OAAO,GAAGxB,qBAAqB,KAAK8B,QAAQ,IAAI,CAAC7B,aAAa,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC;YACrG,OAAO,IAAI;UACb;UACA,OAAO,KAAK;QACd,CAAC,CAAC;QACJ,MAAMiC,OAAO,GAAGvR,mBAAmB,CAACnB,UAAU,CAAC;QAC/C4R,UAAU,GAAGI,OAAO,IAAIJ,UAAU,CAAC/F,GAAG,CAAC,CAAC4B,KAAK,EAAE2E,CAAC,KAAKO,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEnF,KAAK,GAAGiF,OAAO,CAACN,CAAC,CAAC,IAAI,CAAC,GAAGP,YAAY,CAAC,CAAC,CAAC;QAC5G,MAAMgB,YAAY,GAAG3R,mBAAmB,CAAC0Q,UAAU,CAAC;QAEpD,IAAI,CAACjF,KAAK,CAAE,cAAakG,YAAa,EAAC,CAAC,EAAElG,KAAK,CAAE,cAAakG,YAAa,EAAC,CAAC,GAAG;UAAEC,eAAe,EAAED;QAAa,CAAC;QAEjH,IAAId,WAAW,EAAEvF,MAAM,CAAChJ,IAAI,CAAC;UAAEuJ,MAAM,EAAE7J,IAAI;UAAEH,MAAM,EAAE2O,IAAI,GAAGxO,IAAI;UAAEyJ,KAAK,EAAE;QAAgB,CAAC,CAAC;QAC3FH,MAAM,CAAChJ,IAAI,CAAC;UAAEuJ,MAAM,EAAE7J,IAAI;UAAEH,MAAM,EAAE2O,IAAI,GAAGxO,IAAI;UAAEyJ,KAAK,EAAG,cAAakG,YAAa;QAAE,CAAC,CAAC;QACvFrG,MAAM,CAAChJ,IAAI,CAAC;UAAEuJ,MAAM,EAAE7J,IAAI;UAAEH,MAAM,EAAE2O,IAAI,GAAGxO,IAAI;UAAEyJ,KAAK,EAAG,SAAQzJ,IAAK,IAAGwO,IAAK;QAAE,CAAC,CAAC;QAClF;QACA,IAAId,UAAU,CAACmC,OAAO,CAAC7P,IAAI,CAAC,IAAI,CAAC,IAAI2N,cAAc,CAACkC,OAAO,CAAC7P,IAAI,CAAC,IAAI,CAAC,EAAE;UACtE,MAAMO,KAAK,GAAGrF,MAAM,CAAC6H,IAAI,EAAE/C,IAAI,EAAEwO,IAAI,GAAGxO,IAAI,CAAC;UAC7C,MAAM8P,IAAI,GAAG5R,YAAY,CAACqC,KAAK,CAAC;UAChC+I,MAAM,CAAChJ,IAAI,CAAC;YAAEuJ,MAAM,EAAE7J,IAAI;YAAEH,MAAM,EAAE1E,MAAM,CAAC2U,IAAI,CAAC;YAAErG,KAAK,EAAG,UAASzJ,IAAK;UAAE,CAAC,CAAC;QAC9E;QACA,IAAI4N,aAAa,CAACiC,OAAO,CAAC7P,IAAI,CAAC,IAAI,CAAC,EAAE;UACpC,MAAMoP,QAAQ,GAAG/B,SAAS,CAACgC,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAAC7O,KAAK,KAAKT,IAAI,CAAC;UAC7D,IAAIoP,QAAQ,KAAKG,SAAS,EAAE;YAC1B,MAAM1B,GAAG,GAAGR,SAAS,CAAC+B,QAAQ,CAAC;YAC/B9F,MAAM,CAAChJ,IAAI,CAAC;cACVuJ,MAAM,EAAE7J,IAAI;cACZH,MAAM,EAAEgO,GAAG,CAAC1N,GAAG,GAAG0N,GAAG,CAACpN,KAAK;cAC3BgJ,KAAK,EAAE6D,qBAAqB,KAAK8B,QAAQ,IAAI,CAAC7B,aAAa,GAAG,qBAAqB,GAAG;YACxF,CAAC,CAAC;UACJ;QACF;QAEA,IAAIG,UAAU,CAACmC,OAAO,CAAC7P,IAAI,CAAC,IAAI,CAAC,IAAI2N,cAAc,CAACkC,OAAO,CAAC7P,IAAI,CAAC,IAAI,CAAC,IAAI4N,aAAa,CAACiC,OAAO,CAAC7P,IAAI,CAAC,IAAI,CAAC,EAAE;UAC1G,MAAMO,KAAK,GAAGrF,MAAM,CAAC6H,IAAI,EAAE/C,IAAI,EAAEwO,IAAI,GAAGxO,IAAI,CAAC;UAC7C,MAAM8P,IAAI,GAAG5R,YAAY,CAACqC,KAAK,CAAC;UAChC;UACA,IAAI,CAAC6N,QAAQ,CAAC5K,GAAG,CAACxD,IAAI,EAAEmO,UAAU,CAAC;UACnC,IAAI2B,IAAI,KAAKvP,KAAK,EAAE4N,UAAU,IAAI,CAAC;QACrC;QACAA,UAAU,IAAI,CAAC;MACjB,CAAC,CAAC;MACF;MACA,IAAI,CAACrJ,QAAQ,CAAC;QAAE2E;MAAM,CAAC,CAAC;MACxB,OAAOnG,GAAG;IACZ,CAAC;IAAA,KAkFDyM,WAAW,GAAIvI,CAAC,IAAK;MACnB,MAAMwI,GAAG,GAAG,IAAI,CAACC,GAAG,CAACC,qBAAqB,CAAC,CAAC;MAC5C,IAAI,CAACpL,QAAQ,CAAC;QACZqL,YAAY,EAAE;UACZC,IAAI,EAAE5I,CAAC,CAAC6I,OAAO,GAAGL,GAAG,CAACM,CAAC;UACvB9L,GAAG,EAAEgD,CAAC,CAAC+I,OAAO,GAAGP,GAAG,CAACpK;QACvB;MACF,CAAC,CAAC;IACJ,CAAC;IAAA,KAED4K,cAAc,GAAI3C,GAAG,IAAK;MACxB,IAAIV,YAAY,GAAG;QAAE,GAAG,IAAI,CAAClM,KAAK,CAACkM;MAAa,CAAC;MACjD,MAAM;QAAElI;MAAO,CAAC,GAAG,IAAI,CAAChE,KAAK;MAC7B,IAAI4M,GAAG,IAAI,IAAI,EAAE;MACjBV,YAAY,GAAG;QACb1L,EAAE,EAAEoM,GAAG,CAACpM,EAAE;QACV8J,MAAM,EAAEsC,GAAG,CAACtC,MAAM;QAClBE,IAAI,EAAEoC,GAAG,CAACpC,IAAI;QACdD,QAAQ,EAAEqC,GAAG,CAACrC,QAAQ;QACtBE,MAAM,EAAEmC,GAAG,CAACnC;MACd,CAAC;MACD,MAAM;QAAElH;MAAI,CAAC,GAAGS,MAAM,CAACwL,OAAO,CAAC5C,GAAG,CAACpM,EAAE,EAAEoM,GAAG,CAACvO,IAAI,CAAC;MAChD,MAAM;QAAEoR,YAAY;QAAEhM;MAAU,CAAC,GAAG,IAAI,CAACD,aAAa;MACtD,IAAID,GAAG,GAAGE,SAAS,IAAIF,GAAG,GAAGkM,YAAY,GAAGhM,SAAS,EAAE;QACrD,IAAI,CAACgB,MAAM,CAACC,KAAK,CAAC;UAAEC,CAAC,EAAEpB;QAAI,CAAC,CAAC;MAC/B;MAEA,IAAI,CAACM,QAAQ,CAAC;QAAEqI;MAAa,CAAC,EAAE,MAAM;QACpC,IAAI,CAACtH,qBAAqB,CAAC,CAAC;MAC9B,CAAC,CAAC;IACJ,CAAC;IAAA,KAED8K,SAAS,GAAInJ,CAAC,IAAK;MACjB,IAAIoJ,MAAM,CAACC,kBAAkB,EAAE;QAC7B;MACF;MACA,MAAM;QAAE1D,YAAY;QAAEjM;MAAY,CAAC,GAAG,IAAI,CAACD,KAAK;MAChD,MAAM;QAAE6P,OAAO;QAAEC,OAAO;QAAEC;MAAO,CAAC,GAAGxJ,CAAC;MACtC,MAAMM,MAAM,GAAG,EAAE;MACjBtL,KAAK,CAAC4G,QAAQ,CAACiG,iBAAiB,CAACD,OAAO,CAAEmB,KAAK,IAAK;QAAEzC,MAAM,CAACxH,IAAI,CAACiK,KAAK,CAAC;MAAE,CAAC,CAAC;MAC5E,IAAIwG,OAAO,EAAE;QACX,QAAQ,IAAI;UACV,KAAMD,OAAO,IAAI,EAAE,IAAIA,OAAO,IAAI,EAAE;YAAG;cACrC;cACAtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;cAClB,MAAM3C,KAAK,GAAG9G,CAAC,CAACsJ,OAAO,GAAG,EAAE;cAC5B,IAAIxC,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,IAAI,CAAC4C,eAAe,CAAC,IAAI,CAAC;cAC5B;cACA,IAAIpJ,MAAM,CAACwG,KAAK,CAAC,EAAE;gBACjB,IAAI,CAAC4C,eAAe,CAACpJ,MAAM,CAACwG,KAAK,CAAC,CAAC;cACrC;cACA;YAAO;UACT,KAAMwC,OAAO,KAAK,EAAE;YAAGtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;YAAE,IAAI,CAACtQ,cAAc,CAACnD,WAAW,CAACqD,IAAI,CAAC;YAAE;UAAO;UACzF,KAAMiQ,OAAO,KAAK,EAAE;YAAGtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;YAAE,IAAI,CAACtQ,cAAc,CAACnD,WAAW,CAACsD,IAAI,CAAC;YAAE;UAAO;UACzF,KAAMgQ,OAAO,KAAK,EAAE;YAAGtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;YAAE,IAAI,CAAC7J,MAAM,CAAC,CAAC;YAAE;UAAO;UACjE,KAAM0J,OAAO,KAAK,EAAE;YAAG;cAAE;cACvBtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;cAClB,MAAME,IAAI,GAAG3U,KAAK,CAAC4G,QAAQ,CAACgO,eAAe,CAACjE,YAAY,CAAC1L,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;cACrE,IAAI,CAAC+O,cAAc,CAACW,IAAI,CAAC;cACzB;YACF;UACA,KAAML,OAAO,KAAK,EAAE;YAAG;cAAE;cACvBtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;cAClB,IAAI9D,YAAY,CAAC1L,EAAE,IAAI,IAAI,EAAE;cAC7B,IAAI4P,MAAM;cACV,IAAIL,MAAM,EAAE;gBACVK,MAAM,GAAG7U,KAAK,CAAC4G,QAAQ,CAACkO,SAAS,CAACnE,YAAY,CAAC1L,EAAE,EAAE,CAAC,CAAC,CAAC;cACxD,CAAC,MAAM;gBACL4P,MAAM,GAAG7U,KAAK,CAAC4G,QAAQ,CAACgO,eAAe,CAACjE,YAAY,CAAC1L,EAAE,EAAE,CAAC,CAAC,CAAC;cAC9D;cACA,IAAI,CAAC+O,cAAc,CAACa,MAAM,CAAC;cAC3B;YACF;UACA,KAAMP,OAAO,KAAK,EAAE;YAAG;cAAE;cACvBtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;cAClB,IAAI9D,YAAY,CAAC1L,EAAE,IAAI,IAAI,EAAE;cAC7B,IAAI8P,OAAO;cACX,IAAIP,MAAM,EAAE;gBACVO,OAAO,GAAG/U,KAAK,CAAC4G,QAAQ,CAACkO,SAAS,CAACnE,YAAY,CAAC1L,EAAE,EAAE,CAAC,CAAC;cACxD,CAAC,MAAM;gBACL8P,OAAO,GAAG/U,KAAK,CAAC4G,QAAQ,CAACgO,eAAe,CAACjE,YAAY,CAAC1L,EAAE,EAAE,CAAC,CAAC;cAC9D;cACA,IAAI,CAAC+O,cAAc,CAACe,OAAO,CAAC;cAC5B;YACF;UACA;YAAS;QACX;MACF,CAAC,MAAM,IAAI,CAAApE,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE1L,EAAE,MAAK,IAAI,IAAI5F,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAC,IAAI,CAAC1I,OAAO,CAACwO,YAAY,CAAC7N,IAAI,CAAC,IAAI9C,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,EAAE;QAC3J,QAAQ6F,OAAO;UACb,KAAK,EAAE;YAAE;YACPtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;YAClBzJ,CAAC,CAACgK,eAAe,CAAC,CAAC;YACnB,IAAI,CAACxP,SAAS,CAACd,WAAW,EAAEiM,YAAY,CAAC1L,EAAE,EAAE;cAC3CoJ,MAAM,EAAE;YACV,CAAC,CAAC;YACF;UACF;UACA,KAAK,EAAE;YAAE;cACPrD,CAAC,CAACyJ,cAAc,CAAC,CAAC;cAClBzJ,CAAC,CAACgK,eAAe,CAAC,CAAC;cACnB,IAAIC,aAAa,GAAGjV,KAAK,CAAC+F,MAAM,CAACmP,SAAS,CAACvE,YAAY,CAAC1L,EAAE,CAAC;cAC3D,IAAI,CAACgQ,aAAa,IAAIA,aAAa,CAAC5G,MAAM,KAAKjM,gBAAgB,CAAC+S,MAAM,EAAE;gBACtEF,aAAa,GAAG;kBAAE5G,MAAM,EAAE,QAAQ;kBAAEpJ,EAAE,EAAE0L,YAAY,CAAC1L,EAAE;kBAAEnC,IAAI,EAAE;gBAAG,CAAC;cACrE;cACA,MAAMyB,IAAI,GAAGvE,KAAK,CAAC4G,QAAQ,CAACqN,OAAO,CAACtD,YAAY,CAAC7N,IAAI,EAAE6N,YAAY,CAAC1L,EAAE,CAAC;cAEvE,IAAI,CAACqD,QAAQ,CAAC;gBAAEqH,aAAa,EAAEpL,IAAI;gBAAE0Q;cAAc,CAAC,CAAC;cACrD,IAAI,CAAC/L,MAAM,CAACkM,IAAI,CAAC,CAAC;cAClB;YACF;UACA;YAAS;QACX;MACF;IACF,CAAC;IAED;IAAA,KACArQ,eAAe,GAAG,CAACL,WAAW,EAAE3B,IAAI,EAAED,IAAI,KAAK;MAC7C,MAAM;QAAE8K,YAAY;QAAElJ,WAAW,EAAE2Q,QAAQ;QAAEC,gBAAgB;QAAEC;MAAY,CAAC,GAAG,IAAI,CAAC9Q,KAAK;MAEzF,IACGtF,oBAAoB,CAAC,IAAI,CAAC0L,QAAQ,CAAC,IAAI7K,KAAK,CAACsL,MAAM,CAACkD,UAAU,KAAKlM,cAAc,CAACmM,MAAM,IACrF,CAACb,YAAY,IAAI0H,gBAAgB,IAAI,CAACC,WAAW,KAAKzS,IAAI,KAAKiQ,SAAU,IAC1E,IAAI,CAACnQ,KAAK,CAAC4S,SAAS,EACvB;QACA,OAAOH,QAAQ;MACjB;MACA,MAAM;QAAEtR,KAAK;QAAEL,SAAS;QAAEmB,IAAI;QAAEC;MAAS,CAAC,GAAG/B,IAAI;MACjD,IAAI;QAAEa,SAAS;QAAEI;MAAQ,CAAC,GAAGjB,IAAI;MAEjC,IAAIW,SAAS,CAACL,MAAM,KAAK,CAAC,IAAIU,KAAK,CAACV,MAAM,KAAK,CAAC,EAAE,IAAI,CAACR,UAAU,CAAC/B,MAAM,CAACoD,eAAe,EAAEnB,IAAI,CAAC,CAAC,KAC3F,IAAIW,SAAS,CAACL,MAAM,KAAK,CAAC,IAAIU,KAAK,CAACV,MAAM,KAAK,CAAC,EAAE,IAAI,CAACR,UAAU,CAAC/B,MAAM,CAACyC,eAAe,EAAER,IAAI,CAAC,CAAC,KAChG,IAAID,IAAI,KAAKhC,MAAM,CAAC6D,YAAY,EAAE,IAAI,CAAC9B,UAAU,CAAC/B,MAAM,CAAC6D,YAAY,EAAE5B,IAAI,CAAC,CAAC,KAC7E,IAAI,CAACF,UAAU,CAAC/B,MAAM,CAAC2C,YAAY,EAAEV,IAAI,CAAC;MAE/Ca,SAAS,GAAGjF,MAAM,CAACqB,KAAK,CAAC4G,QAAQ,CAACL,IAAI,CAACxC,KAAK,CAAC,CAAC,EAAEhB,IAAI,CAACa,SAAS,CAAC,CAAC;MAChEI,OAAO,GAAGrF,MAAM,CAACqB,KAAK,CAAC4G,QAAQ,CAACL,IAAI,CAACxC,KAAK,CAAC,CAAC,EAAEhB,IAAI,CAACiB,OAAO,CAAC,CAAC;MAC5DhE,KAAK,CAAC4G,QAAQ,CAACL,IAAI,GAAGvG,KAAK,CAAC4G,QAAQ,CAACL,IAAI,CAACxC,KAAK,CAAC,CAAC,EAAEhB,IAAI,CAACa,SAAS,CAAC,GAAGb,IAAI,CAACgB,KAAK,GAAG/D,KAAK,CAAC4G,QAAQ,CAACL,IAAI,CAACxC,KAAK,CAAChB,IAAI,CAACiB,OAAO,CAAC;MACzH;MACA,MAAMqJ,MAAM,GAAGtJ,KAAK,CAACV,MAAM,GAAGK,SAAS,CAACL,MAAM;MAE9C,IAAIP,IAAI,KAAKhC,MAAM,CAAC6D,YAAY,IAAIG,QAAQ,EAAE;QAC5C,MAAM;UAAEkH,UAAU,GAAG,EAAE;UAAED,MAAM,GAAG,EAAE;UAAEoD,WAAW,GAAG;QAAG,CAAC,GAAGrK,QAAQ;QACnE,CAAC,GAAGkH,UAAU,EAAE,GAAGD,MAAM,EAAE,GAAGoD,WAAW,CAAC,CAACvC,OAAO,CAAEqE,CAAC,IAAK;UACxDjR,KAAK,CAAC4G,QAAQ,CAACzB,SAAS,CAAC8L,CAAC,CAACnO,IAAI,EAAEmO,CAAC,CAAChM,EAAE,CAAC;QACxC,CAAC,CAAC;MACJ;MACAjF,KAAK,CAAC4G,QAAQ,CAAC6O,OAAO,CAAC7R,SAAS,EAAEI,OAAO,EAAEqJ,MAAM,CAAC;MAClD,IAAIvK,IAAI,KAAKhC,MAAM,CAAC6D,YAAY,IAAIE,IAAI,EAAE;QACxC,MAAM;UAAEmH,UAAU,GAAG,EAAE;UAAED,MAAM,GAAG,EAAE;UAAEoD,WAAW,GAAG;QAAG,CAAC,GAAGtK,IAAI;QAC/D,CAAC,GAAGmH,UAAU,EAAE,GAAGD,MAAM,EAAE,GAAGoD,WAAW,CAAC,CAACvC,OAAO,CAAEqE,CAAC,IAAK;UACxDjR,KAAK,CAAC4G,QAAQ,CAACkI,aAAa,CAACmC,CAAC,CAAC;QACjC,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI,CAACnK,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;;MAEhC;MACArC,WAAW,GAAGtG,WAAW,CAAC4I,GAAG,CAACtC,WAAW,EAAE;QAAEuC,cAAc,EAAE5I,cAAc,CAAC,IAAI,CAACyI,GAAG;MAAE,CAAC,CAAC;MACxF,OAAOpC,WAAW;IACpB,CAAC;IAAA,KAEDgR,iBAAiB,GAAG,CAACC,SAAS,GAAG,cAAc,EAAEC,YAAY,KAAK,IAAIzN,OAAO,CAAEC,OAAO,IAAK;MACzF,IAAI,CAACE,QAAQ,CAAC;QACZ,CAAE,GAAEqN,SAAU,EAAC,GAAG;UAAE1Q,EAAE,EAAE,IAAI;UAAE4Q,IAAI,EAAE,IAAI;UAAEC,EAAE,EAAE;QAAK;MACrD,CAAC,EAAE,MAAM1N,OAAO,CAAC,eAAe,CAAC,CAAC;IACpC,CAAC,CAAC,CAACI,IAAI,CAAC,MAAM;MACZ,IAAIoN,YAAY,EAAE;QAChB,OAAO,IAAI,CAACvM,qBAAqB,CAAC,CAAC;MACrC;IACF,CAAC,CAAC;IAAA,KAEFhB,gBAAgB,GAAG,MAAM;MACvB,IAAI,CAACC,QAAQ,CAAC;QACZyN,WAAW,EAAE;UAAEjT,IAAI,EAAE,IAAI;UAAEmC,EAAE,EAAE,IAAI;UAAEoI,MAAM,EAAE;QAAK;MACpD,CAAC,CAAC;IACJ,CAAC;IAED;IAAA,KACA2I,UAAU,GAAG,CAAChL,CAAC,EAAElI,IAAI,EAAEmC,EAAE,KAAK;MAC5B,MAAM;QAAE8Q,WAAW;QAAEnI,YAAY;QAAElJ,WAAW;QAAE+D;MAAO,CAAC,GAAG,IAAI,CAAChE,KAAK;MACrE,MAAM4I,MAAM,GAAG5E,MAAM,CAACwL,OAAO,CAAChP,EAAE,EAAEnC,IAAI,CAAC;MACvC,IAAI,CAACoG,MAAM,CAACkM,IAAI,CAAC,CAAC;MAClB,IAAI,CAAClT,YAAY,CAAC0L,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE9K,IAAI,CAAC,EAAE;;MAEvC;MACA,IAAId,OAAO,CAACc,IAAI,CAAC,IAAIb,WAAW,CAACa,IAAI,CAAC,EAAE;QACtC;QACA,IAAI,CAACiT,WAAW,CAACjT,IAAI,EAAE;UACrB,IAAI,CAACwF,QAAQ,CAAC;YACZyN,WAAW,EAAE;cACXjT,IAAI;cACJmC,EAAE;cACFoI;YACF;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,MAAM7I,eAAe,GAAG,IAAI,CAAC6B,aAAa,CAAC3B,WAAW,EAAE;YAAEqK,MAAM,EAAEgH,WAAW,CAAC9Q,EAAE;YAAE+J,QAAQ,EAAE+G,WAAW,CAACjT,IAAI;YAAEmM,IAAI,EAAEhK,EAAE;YAAEiK,MAAM,EAAEpM,IAAI;YAAEA,IAAI,EAAET,GAAG,CAAC4T,UAAU;YAAElI,KAAK,EAAEH,YAAY,CAACrH,IAAI;YAAEyH,IAAI,EAAEJ,YAAY,CAACI;UAAK,CAAC,CAAC;UAChN,IAAI,CAACvG,aAAa,CAACjD,eAAe,EAAE,IAAI,EAAE,IAAI,CAAC;QACjD;MACF;IACF,CAAC;IAAA,KAED0R,gBAAgB,GAAIlL,CAAC,IAAK;MACxB;MACA,IAAI,CAAChL,KAAK,CAACmW,UAAU,IAAI,CAACnW,KAAK,CAACZ,QAAQ,EAAE;QACxC;MACF;MACA,MAAM;QAAE6F,EAAE;QAAEnC;MAAK,CAAC,GAAGhB,uBAAuB,CAACkJ,CAAC,CAAC;MAC/C,MAAMzG,IAAI,GAAGvE,KAAK,CAAC4G,QAAQ,CAACqN,OAAO,CAACnR,IAAI,EAAEmC,EAAE,CAAC;MAC7C,MAAMgQ,aAAa,GAAGjV,KAAK,CAAC+F,MAAM,CAACmP,SAAS,CAACjQ,EAAE,CAAC;MAChD,IAAI,CAACqD,QAAQ,CAAC;QAAEqH,aAAa,EAAEpL,IAAI;QAAE0Q;MAAc,CAAC,CAAC;MACrD,IAAI,CAAC/L,MAAM,CAACkM,IAAI,CAAC,CAAC;IACpB,CAAC;IAED;IAAA,KACAgB,aAAa,GAAG,CAACpL,CAAC,EAAElI,IAAI,EAAEmC,EAAE,EAAEoR,SAAS,EAAEC,MAAM,KAAK;MAClD,MAAM;QAAE3F,YAAY,EAAE;UAAE1L,EAAE,EAAEsR;QAAO;MAAE,CAAC,GAAG,IAAI,CAAC9R,KAAK;MACnD,MAAM4M,GAAG,GAAGrR,KAAK,CAAC4G,QAAQ,CAACqN,OAAO,CAACnR,IAAI,EAAEmC,EAAE,CAAC;MAC5C,IAAI,CAACoM,GAAG,EAAE;QACR;MACF;MAEA,IAAIsE,SAAS,GAAG,EAAE;MAClB,IAAIU,SAAS,KAAKlV,UAAU,CAACqV,KAAK,EAAE;QAClC,IAAID,MAAM,KAAKlF,GAAG,CAACpM,EAAE,IAAIqR,MAAM,EAAE;QACjCX,SAAS,GAAG,cAAc;MAC5B,CAAC,MAAM,IAAIU,SAAS,KAAKlV,UAAU,CAAC+M,KAAK,EAAE;QACzCyH,SAAS,GAAG,cAAc;QAC1B,IAAI,CAACzM,MAAM,CAACkM,IAAI,CAAC,CAAC;MACpB;;MAEA;MACA,IAAIkB,MAAM,EAAE;QACV,IAAID,SAAS,KAAKlV,UAAU,CAAC+M,KAAK,EAAE;UAClC,IAAI,CAAC8H,UAAU,CAAChL,CAAC,EAAElI,IAAI,EAAEmC,EAAE,CAAC;QAC9B;QACA;QACA,IAAI,CAACqD,QAAQ,CAAC;UACZ,CAAE,GAAEqN,SAAU,EAAC,GAAG;YAChB1Q,EAAE,EAAEoM,GAAG,CAACpM,EAAE;YACV8J,MAAM,EAAEsC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEtC,MAAM;YACnBE,IAAI,EAAEoC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEpC,IAAI;YACfD,QAAQ,EAAEqC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAErC,QAAQ;YACvBE,MAAM,EAAEmC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEnC,MAAM;YACnBpM,IAAI,EAAEuO,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEvO;UACb;QACF,CAAC,EAAE,MAAM;UACP,IAAI,CAACuG,qBAAqB,CAAC,CAAC;QAC9B,CAAC,CAAC;MACJ,CAAC,MAAM;QAAE;QACP,MAAMoN,OAAO,GAAG3T,IAAI;QACpB,IAAI,CAAC4S,iBAAiB,CAACC,SAAS,EAAE,IAAI,CAAC,CAACnN,IAAI,CAAC,MAAM;UACjD,IAAI6N,SAAS,KAAKlV,UAAU,CAAC+M,KAAK,EAAE;YAClC,IAAI,CAACwI,aAAa,CAAC1L,CAAC,EAAEqG,GAAG,CAACpM,EAAE,EAAEwR,OAAO,CAAC;UACxC;QACF,CAAC,CAAC;MACJ;IACF,CAAC;IAAA,KAEDC,aAAa,GAAG,CAAC1L,CAAC,EAAE/F,EAAE,EAAEnC,IAAI,KAAK;MAC/B,IAAI0B,eAAe;MACnB,QAAQ1B,IAAI;QACV,KAAKT,GAAG,CAACsU,KAAK;QACd,KAAKtU,GAAG,CAAC4T,UAAU;QACnB,KAAK5T,GAAG,CAAC4L,SAAS;UAChBzJ,eAAe,GAAG,IAAI,CAACW,SAAS,CAACrC,IAAI,EAAEmC,EAAE,CAAC;UAC1C;QACF,KAAK5C,GAAG,CAACuU,QAAQ;UACjB;YACE,MAAM;cAAElS;YAAY,CAAC,GAAG,IAAI,CAACe,WAAW,CAACR,EAAE,CAAC;YAC5CT,eAAe,GAAGE,WAAW;YAC7B;UACF;QACA;UAAS;MACX;MACA,IAAI,CAAC+C,aAAa,CAACjD,eAAe,CAAC;IACrC,CAAC;IAAA,KAqKDkQ,eAAe,GAAG,CAACnQ,IAAI,EAAEsS,KAAK,GAAG,KAAK,KAAK;MACzC,IAAI,CAACvO,QAAQ,CAAC;QAAEsF,YAAY,EAAErJ,IAAI;QAAEgR,WAAW,EAAEsB;MAAM,CAAC,CAAC;IAC3D,CAAC;IAAA,KAEDC,cAAc,GAAG,MAAM;MACrB,IAAI,CAACxO,QAAQ,CAAC;QAAEqH,aAAa,EAAE,IAAI;QAAEsF,aAAa,EAAE;MAAK,CAAC,CAAC;IAC7D,CAAC;IAAA,KAED8B,aAAa,GAAI/L,CAAC,IAAK;MACrB,IAAIA,CAAC,CAACgM,OAAO,IAAIhM,CAAC,CAACwJ,MAAM,EAAE,OAAOzT,WAAW,CAACkW,WAAW;MACzD,QAAQjM,CAAC,CAACsJ,OAAO;QACf,KAAK,EAAE;UACL;UACAtJ,CAAC,CAACyJ,cAAc,CAAC,CAAC;UAClB,IAAIzJ,CAAC,CAACuJ,OAAO,EAAE,OAAOxT,WAAW,CAACmW,WAAW;UAC7C,OAAO5Y,oBAAoB,CAAC0M,CAAC,CAAC;QAChC,KAAK,EAAE;UACL;UACAA,CAAC,CAACyJ,cAAc,CAAC,CAAC;UAClB,IAAIzJ,CAAC,CAACuJ,OAAO,EAAE,OAAOxT,WAAW,CAACoW,WAAW;UAC7C,OAAO7Y,oBAAoB,CAAC0M,CAAC,CAAC;QAChC,KAAK,EAAE;UACLA,CAAC,CAACyJ,cAAc,CAAC,CAAC;UAClB,OAAO1T,WAAW,CAACqW,aAAa;QAClC;UACE,OAAO9Y,oBAAoB,CAAC0M,CAAC,CAAC;MAClC;IACF,CAAC;IAAA,KAEDqM,gBAAgB,GAAIC,OAAO,IAAK;MAC9B,MAAM;QAAE5S;MAAY,CAAC,GAAG,IAAI,CAACD,KAAK;MAClC,QAAQ6S,OAAO;QACb,KAAKvW,WAAW,CAACkW,WAAW;UAAE,OAAO,SAAS;QAC9C,KAAKlW,WAAW,CAACqW,aAAa;UAC9B;YACE,MAAMnT,KAAK,GAAGS,WAAW,CAACqD,YAAY,CAAC,CAAC,CAACgC,cAAc,CAAC,CAAC;YACzD,MAAMpG,GAAG,GAAGe,WAAW,CAACqD,YAAY,CAAC,CAAC,CAACiC,YAAY,CAAC,CAAC;YACrD,MAAMxF,eAAe,GAAG7C,YAAY,CAAC,IAAI,CAACoD,eAAe,CAACL,WAAW,EAAE;cACrEX,KAAK,EAAE,IAAI;cACXL,SAAS,EAAE1D,KAAK,CAAC4G,QAAQ,CAACL,IAAI,CAACxC,KAAK,CAACE,KAAK,EAAEN,GAAG,CAAC;cAChDC,SAAS,EAAEK,KAAK;cAChBD,OAAO,EAAEL,GAAG;cACZM,KAAK,EAAEA,KAAK,GAAG,CAAC;cAChBN,GAAG,EAAEM,KAAK,GAAG;YACf,CAAC,CAAC,EAAEA,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,CAAC;YACzB,IAAI,CAACwD,aAAa,CAACjD,eAAe,CAAC;YACnC,OAAO,SAAS;UAClB;QACA,KAAKzD,WAAW,CAACmW,WAAW;UAAE,OAAO,SAAS;QAC9C,KAAKnW,WAAW,CAACoW,WAAW;UAAE,OAAO,SAAS;QAC9C;UAAS,OAAO,aAAa;MAC/B;IACF,CAAC;IAED;IAAA,KACA/J,sBAAsB,GAAIX,EAAE,IAAK;MAC/B,MAAM;QAAEmF;MAAS,CAAC,GAAG,IAAI;MACzB,MAAM2F,OAAO,GAAG,IAAI,CAACtP,aAAa,CAACuP,aAAa,CAAC,iCAAiC,CAAC;MACnF,MAAMvS,EAAE,GAAI,kBAAiB2M,QAAQ,CAACvF,GAAG,CAACI,EAAE,CAAE,EAAC;MAC/C,MAAMU,IAAI,GAAGoK,OAAO,CAACC,aAAa,CAAE,qBAAoBvS,EAAG,IAAG,CAAC;MAC/D,OAAOkI,IAAI;IACb,CAAC;IAED;IAAA,KACAzC,wBAAwB,GAAG,MAAM;MAC/B,MAAM;QAAEkH;MAAS,CAAC,GAAG,IAAI;MACzB,MAAM2F,OAAO,GAAG,IAAI,CAACtP,aAAa,CAACuP,aAAa,CAAC,iCAAiC,CAAC;MACnF,MAAM/M,OAAO,GAAG,IAAIkC,GAAG,CAAC,CAAC;MACzBiF,QAAQ,CAAChF,OAAO,CAAC,CAACmB,KAAK,EAAEuD,GAAG,KAAK;QAC/B,MAAMrM,EAAE,GAAI,kBAAiB2M,QAAQ,CAACvF,GAAG,CAACiF,GAAG,CAAE,EAAC;QAChD,MAAMnE,IAAI,GAAGoK,OAAO,CAACC,aAAa,CAAE,qBAAoBvS,EAAG,IAAG,CAAC;QAC/DwF,OAAO,CAACzD,GAAG,CAACsK,GAAG,EAAEnE,IAAI,CAAC;MACxB,CAAC,CAAC;MACF,OAAO1C,OAAO;IAChB,CAAC;IAAA,KAEDgN,WAAW,GAAIzM,CAAC,IAAK;MACnB,IAAIA,CAAC,CAAC0M,KAAK,KAAK,CAAC,EAAE;QACjB,IAAI,CAAC7J,SAAS,GAAG,IAAI;MACvB;MACA,MAAM8J,SAAS,GAAGA,CAAA,KAAM;QACtB,IAAI,CAAC9J,SAAS,GAAG,KAAK;QACtBuG,MAAM,CAACwD,mBAAmB,CAAC,SAAS,EAAED,SAAS,CAAC;MAClD,CAAC;MACDvD,MAAM,CAACyD,gBAAgB,CAAC,SAAS,EAAEF,SAAS,CAAC;IAC/C,CAAC;IAAA,KAEDG,gBAAgB,GAAG,MAAM;MACvB,IAAI,CAACpO,eAAe,GAAG9I,WAAW,CAACwJ,OAAO;IAC5C,CAAC;IAAA,KAED2N,kBAAkB,GAAG,MAAM;MACzB,IAAI,CAACrO,eAAe,GAAG9I,WAAW,CAAC+I,OAAO;MAC1C,IAAI,CAACV,cAAc,GAAG,IAAI,CAAChB,aAAa,CAACC,SAAS;IACpD,CAAC;IAAA,KAED8P,iBAAiB,GAAG,MAAM;MAAE,IAAI,CAAC9N,SAAS,GAAG,IAAI;MAAE,OAAO,aAAa;IAAE,CAAC;IAAA,KAE1E+N,gBAAgB,GAAG,MAAM;MAAE,IAAI,CAAC9N,SAAS,GAAG,IAAI;MAAE,OAAO,aAAa;IAAE,CAAC;IAthDvEpL,SAAS,CAAC6D,KAAK,CAACsV,MAAM,CAAC;IACvB,IAAI,CAACpR,GAAG,GAAG;MAAEiG,MAAM,EAAE,EAAE;MAAE2E,SAAS,EAAE,CAAC;IAAE,CAAC;IACxC,IAAI,CAACE,QAAQ,GAAG,IAAIjF,GAAG,CAAC,CAAC;IACzB,IAAI,CAAClI,KAAK,GAAG;MACXoM,SAAS,EAAE,EAAE;MACbE,aAAa,EAAE,KAAK;MACpBD,qBAAqB,EAAE,CAAC;MACxB7D,KAAK,EAAE;QACLhN,UAAU;QACVC;MACF,CAAC;MACDyP,aAAa,EAAE,IAAI;MACnBsF,aAAa,EAAE,IAAI;MACnBvQ,WAAW,EAAEtG,WAAW,CAAC+Z,WAAW,CAAC,CAAC;MACtCvK,YAAY,EAAE,IAAI;MAClB7E,YAAY,EAAE,IAAI;MAClBF,WAAW,EAAE,IAAI;MACjBJ,MAAM,EAAE,IAAIlG,UAAU,CAAC,CAAC;MACxBoO,YAAY,EAAE;QACZ1L,EAAE,EAAE,IAAI;QACR8J,MAAM,EAAE,IAAI;QACZE,IAAI,EAAE,IAAI;QACVD,QAAQ,EAAE,IAAI;QACdE,MAAM,EAAE;MACV,CAAC;MACD0B,YAAY,EAAE;QACZ3L,EAAE,EAAE,EAAE;QACN8J,MAAM,EAAE,IAAI;QACZE,IAAI,EAAE,IAAI;QACVD,QAAQ,EAAE,IAAI;QACdE,MAAM,EAAE;MACV,CAAC;MACD6G,WAAW,EAAE;QACXjT,IAAI,EAAE,IAAI;QACVmC,EAAE,EAAE,IAAI;QACRoI,MAAM,EAAE;MACV,CAAC;MACDsG,YAAY,EAAE;QACZC,IAAI,EAAE,CAAC;QACP5L,GAAG,EAAE;MACP,CAAC;MACDuN,WAAW,EAAE;IACf,CAAC;IAED,IAAI,CAACtM,cAAc,GAAG,CAAC,CAAC;IACxB,IAAI,CAACS,eAAe,GAAG9I,WAAW,CAACyJ,QAAQ;IAC3C,IAAI,CAACH,SAAS,GAAG,KAAK;IACtB,IAAI,CAAC2D,SAAS,GAAG,KAAK;IACtB,IAAI,CAAC1D,SAAS,GAAG,KAAK;IACtB,IAAI,CAAClH,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACE,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACD,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACE,QAAQ,GAAG,EAAE;;IAElB;IACA,IAAI,CAACgV,SAAS,GAAG/X,UAAU;IAC3B,IAAI,CAACwK,QAAQ,GAAG,IAAI,CAACjI,KAAK,CAACyV,QAAQ,CAACxN,QAAQ,IAAI,IAAI,CAACjI,KAAK,CAAC0V,IAAI;IAC/DtY,KAAK,CAACqY,QAAQ,GAAG,IAAI,CAACzV,KAAK,CAACyV,QAAQ;EACtC;EA2WAvN,aAAaA,CAACe,QAAQ,GAAG,IAAI,EAAE;IAC7B,OAAO7L,KAAK,CAACuY,WAAW,CAAC1M,QAAQ,CAAC;EACpC;EAEA2M,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC1N,aAAa,CAAC,CAAC;EAC7B;EAEA2N,aAAaA,CAAA,EAAG;IACd,OAAOzY,KAAK,CAAC0Y,kBAAkB,CAAC,CAAC;EACnC;EA0fA,MAAMC,iBAAiBA,CAAA,EAAG;IACxB,IAAI,CAAC9N,QAAQ,GAAG,IAAI,CAACjI,KAAK,CAACyV,QAAQ,CAACxN,QAAQ;IAC5C,IAAI;MAAE+N;IAAQ,CAAC,GAAG,IAAI,CAAChW,KAAK;IAC5B,IAAI+D,OAAO;;IAEX;IACA,IAAI;MACF,MAAMkS,SAAS,GAAG,MAAM,IAAI,CAACjW,KAAK,CAACyV,QAAQ,CAACS,UAAU,CAAC,CAAC;MACxD,IAAI,CAAAD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAElS,OAAO,MAAIkS,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAED,OAAO,GAAE;QAC5CA,OAAO,GAAGC,SAAS,CAACD,OAAO;QAC3BjS,OAAO,GAAGkS,SAAS,CAAClS,OAAO;MAC7B,CAAC,MAAM,IAAI,CAAAkS,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE9M,MAAM,MAAI8M,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE1J,WAAW,MAAI0J,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE7M,UAAU,GAAE;QAC/ErF,OAAO,GAAGkS,SAAS;MACrB;IACF,CAAC,CAAC,OAAO7N,CAAC,EAAE;MACVzM,YAAY,CAACwa,KAAK,CAAC;QAAEva,OAAO,EAAEM,YAAY,CAAC,4BAA4B,CAAC;QAAEka,QAAQ,EAAE;MAAK,CAAC,CAAC;MAC3F;IACF;;IAEA;IACA,IAAI;MACF,MAAMhZ,KAAK,CAACiZ,IAAI,CAAC;QAAE,GAAG,IAAI,CAACrW,KAAK;QAAEgW,OAAO,EAAEA,OAAO,IAAI;MAAG,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAO5N,CAAC,EAAE;MACVzM,YAAY,CAACwa,KAAK,CAAC;QAAEva,OAAO,EAAEwM,CAAC,CAACxM,OAAO;QAAEwa,QAAQ,EAAE;MAAK,CAAC,CAAC;MAC1D;IACF;;IAEA;IACAhZ,KAAK,CAAC4G,QAAQ,CAACsS,YAAY,CAACvS,OAAO,CAAC;IAEpC,MAAMwS,SAAS,GAAG,MAAM,IAAI,CAACvW,KAAK,CAACyV,QAAQ,CAACe,WAAW,CAAC,CAAC;IACzD,IAAID,SAAS,EAAE;MACbnZ,KAAK,CAAC+F,MAAM,CAACsT,WAAW,CAACF,SAAS,CAAC;IACrC;;IAEA;IACA,IAAI,CAACrS,GAAG,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IAEhC,IAAI,CAACkB,aAAa,CAAC4P,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAACE,kBAAkB,CAAC;IAChF,IAAI,CAAC9P,aAAa,CAAC4P,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAACC,gBAAgB,CAAC;IAE5E,IAAI,CAAC7P,aAAa,CAAC4P,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACJ,WAAW,CAAC;IAClE,IAAI,CAACxP,aAAa,CAAC4P,gBAAgB,CAAC,WAAW,EAAG7M,CAAC,IAAKA,CAAC,CAACyJ,cAAc,CAAC,CAAC,CAAC;IAC3E,IAAI,CAACxM,aAAa,CAAC4P,gBAAgB,CAAC,aAAa,EAAG7M,CAAC,IAAK;MACxDA,CAAC,CAACyJ,cAAc,CAAC,CAAC;MAClB,IAAI,CAACpM,gBAAgB,CAAC,CAAC;MACvB,IAAI,CAACqN,iBAAiB,CAAC,cAAc,EAAE,IAAI,CAAC;IAC9C,CAAC,CAAC;IACF,IAAI,CAACzN,aAAa,CAAC4P,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACtE,WAAW,CAAC;IAElEa,MAAM,CAACyD,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC1D,SAAS,CAAC;IAClDC,MAAM,CAACyD,gBAAgB,CAAC,QAAQ,EAAE,MAAM,IAAI,CAACpQ,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;IAErF;IACA,IAAI,CAACa,QAAQ,CAAC;MACZ2E,KAAK,EAAE;QACL,GAAG,IAAI,CAACxI,KAAK,CAACwI,KAAK;QACnBqM,aAAa,EAAE;UACb7G,KAAK,EAAE,IAAI,CAAC2F,SAAS;UACrBmB,QAAQ,EAAG,GAAE/Y,SAAU,IAAG;UAC1B+M,UAAU,EAAG,GAAE7M,WAAY,IAAG;UAC9B8Y,aAAa,EAAG,GAAEtY,UAAW;QAC/B,CAAC;QACDuY,aAAa,EAAE;UACbhH,KAAK,EAAE;QACT;MACF;IACF,CAAC,CAAC;IACF,IAAI,CAAChL,aAAa,CAACrJ,WAAW,CAACsb,iBAAiB,CAACrb,cAAc,CAAC,IAAI,CAACyI,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;IAC9F;IACA;IACA;IACA6S,WAAW,CAAC,MAAM;MAChB,IAAI,CAAC/O,MAAM,CAAC,CAAC;IACf,CAAC,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC,CAAC;IACjB,IAAI,IAAI,CAAChI,KAAK,CAACgX,cAAc,EAAE;MAC7B,IAAI,CAAChX,KAAK,CAACgX,cAAc,CAAC,CAAC;IAC7B;EACF;EA0RAC,MAAMA,CAAA,EAAG;IAAA,IAAAC,mBAAA,EAAAC,oBAAA;IACP,MAAM;MACJrV,WAAW;MACXuI,KAAK;MACLW,YAAY;MACZ/E,WAAW;MACXE,YAAY;MACZ4H,YAAY;MACZC,YAAY;MACZ+C,YAAY;MACZoC,WAAW;MACXtN,MAAM;MACNkH,aAAa;MACbsF,aAAa;MAEbM;IACF,CAAC,GAAG,IAAI,CAAC9Q,KAAK;IACd,MAAM;MAAE6G;IAAO,CAAC,GAAGtL,KAAK;IACxB,oBACE/B,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,aAAa;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC1Btc,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,gBAAgB;MAACO,OAAO,EAAEA,CAAA,KAAM;QAAE,IAAI,CAACC,aAAa,GAAG,KAAK;MAAE,CAAE;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC7Etc,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,qBAAqB;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACjCza,YAAY,CAAC,CAAC,iBACf7B,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,MAAM;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACnBtc,KAAA,CAAA+b,aAAA,CAACja,SAAS;MAAAma,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CACT,CACJ,eACDtc,KAAA,CAAA+b,aAAA,CAACpa,UAAU;MAAAsa,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,eACdtc,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,SAAS;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,eAC3Btc,KAAA,CAAA+b,aAAA,CAACra,QAAQ;MACP+a,UAAU,EAAEA,CAAA,KAAM,IAAI,CAACvW,cAAc,CAACnD,WAAW,CAACqD,IAAI,CAAE;MACxDsW,UAAU,EAAEA,CAAA,KAAM,IAAI,CAACxW,cAAc,CAACnD,WAAW,CAACsD,IAAI,CAAE;MACxDlB,QAAQ,EAAE,IAAI,CAACA,QAAS;MACxBF,QAAQ,EAAE,IAAI,CAACA,QAAS;MAAAgX,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACzB,CAAC,eACFtc,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,SAAS;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,eAC3Btc,KAAA,CAAA+b,aAAA,CAACna,IAAI;MAAC+K,MAAM,EAAE,IAAI,CAACA,MAAO;MAAAsP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CACzB,CAAC,eACNtc,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,sBAAsB;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAEhC,CACF,CAAC,eACNtc,KAAA,CAAA+b,aAAA,CAACxX,eAAe,CAACoY,QAAQ;MAAC7M,KAAK,EAAE;QAAEiG,cAAc,EAAE,IAAI,CAACA,cAAc;QAAE/D,oBAAoB,EAAE,IAAI,CAACA,oBAAoB;QAAEG,qBAAqB,EAAE,IAAI,CAACA;MAAsB,CAAE;MAAA8J,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC3Ktc,KAAA,CAAA+b,aAAA,CAACza,OAAO;MACNsb,UAAU,EAAEzb,QAAQ,CAAC,IAAI,CAACyL,QAAQ,CAAC,IAAIxL,gBAAgB,CAAC,IAAI,CAACwL,QAAQ,CAAE;MACvE2P,OAAO,EAAEA,CAAA,KAAM;QAAE,IAAI,CAACC,aAAa,GAAG,KAAK;MAAE,CAAE;MAC/C7M,YAAY,EAAEA,YAAa;MAC3B2H,WAAW,EAAEA,WAAY;MACzBb,eAAe,EAAE,IAAI,CAACA,eAAgB;MACtCoG,KAAK,EAAErS,MAAO;MACdsS,gBAAgB,EAAE,IAAI,CAACnY,KAAK,CAAC4S,SAAU;MAAA0E,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACxC,CACuB,CAAC,eAC3Btc,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,eAAe;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC5Btc,KAAA,CAAA+b,aAAA;MACEC,SAAS,EAAC,gBAAgB;MAC1Be,GAAG,EAAGC,CAAC,IAAK;QAAE,IAAI,CAAChT,aAAa,GAAGgT,CAAC;MAAE,CAAE;MAAAf,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAExCtc,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,aAAa;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC1Btc,KAAA,CAAA+b,aAAA;MAAKgB,GAAG,EAAGC,CAAC,IAAK;QAAE,IAAI,CAACxH,GAAG,GAAGwH,CAAC;MAAE,CAAE;MAAChO,KAAK,EAAE;QAAEiO,MAAM,EAAG,GAAEnS,YAAa,IAAG;QAAEoS,KAAK,EAAG,GAAEtS,WAAY;MAAI,CAAE;MAAAqR,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACnGa,MAAM,CAACC,OAAO,CAAC5S,MAAM,CAAC0G,WAAW,CAAC,CAAChD,GAAG,CAAC,CAAC,CAAClH,EAAE,EAAEqW,OAAO,CAAC,kBACpDrd,KAAA,CAAA+b,aAAA;MAAG1I,GAAG,EAAErM,EAAG;MAAAiV,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACTtc,KAAA,CAAA+b,aAAA;MACEuB,CAAC,EAAED,OAAO,CAACE,IAAK;MAChBC,MAAM,EAAE7K,YAAY,CAAC3L,EAAE,KAAKA,EAAE,GAAGhE,WAAW,GAAG0P,YAAY,CAAC1L,EAAE,KAAKA,EAAE,GAAG9E,WAAW,GAAGC,aAAc;MACpGsb,IAAI,EAAC,WAAW;MAAAxB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACjB,CACA,CACJ,CAAC,EACDxE,WAAW,CAACjT,IAAI,gBACf7E,KAAA,CAAA+b,aAAA;MAAMuB,CAAC,EAAG,KAAE,CAAAzB,mBAAA,GAAE/D,WAAW,CAAC1I,MAAM,cAAAyM,mBAAA,uBAAlBA,mBAAA,CAAoBlG,IAAK,IAAC,CAAAmG,oBAAA,GAAEhE,WAAW,CAAC1I,MAAM,cAAA0M,oBAAA,uBAAlBA,oBAAA,CAAoB/R,GAAI,MAAK2L,YAAY,CAACC,IAAK,IAAGD,YAAY,CAAC3L,GAAI,EAAE;MAACyT,MAAM,EAAEtb,WAAY;MAACub,IAAI,EAAC,WAAW;MAAAxB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,GACxJ,IACC,CACF,CAAC,eACNtc,KAAA,CAAA+b,aAAA;MAAKC,SAAS,EAAC,cAAc;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC3Btc,KAAA,CAAA+b,aAAA;MACEC,SAAS,EAAC,YAAY;MACtBhN,KAAK,EAAE;QAAEiO,MAAM,EAAG,GAAEnS,YAAa,IAAG;QAAEoS,KAAK,EAAG,GAAEtS,WAAY;MAAI,CAAE;MAClE8S,aAAa,EAAE,IAAI,CAACzF,gBAAiB;MAAAgE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAEpCa,MAAM,CAACC,OAAO,CAAC5S,MAAM,CAACsD,MAAM,CAAC,CAACI,GAAG,CAAC,CAAC,CAAClH,EAAE,EAAEI,KAAK,CAAC;MAAA,IAAAuW,qBAAA;MAAA,oBAC7C3d,KAAA,CAAA+b,aAAA,CAAChb,QAAQ;QACPsS,GAAG,EAAErM,EAAG;QACR4W,YAAY,GAAAD,qBAAA,GAAE5b,KAAK,CAAC+F,MAAM,CAACmP,SAAS,CAACjQ,EAAE,CAAC,cAAA2W,qBAAA,uBAA1BA,qBAAA,CAA4BvN,MAAO;QACjDhJ,KAAK,EAAEA,KAAM;QACbyW,OAAO,EACJlL,YAAY,CAAC3L,EAAE,KAAKA,EAAE,IACvB2L,YAAY,CAAC7B,MAAM,KAAK9J,EAAE,IAC1B2L,YAAY,CAAC3B,IAAI,KAAKhK,EACvB;QACD8W,OAAO,EACJpL,YAAY,CAAC1L,EAAE,KAAKA,EAAE,IACvB0L,YAAY,CAAC5B,MAAM,KAAK9J,EAAE,IAC1B0L,YAAY,CAAC1B,IAAI,KAAKhK,EACvB;QACD+W,eAAe,EAAE,IAAI,CAAC5F,aAAc;QAAA8D,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACrC,CAAC;IAAA,CACH,CAAC,EACDa,MAAM,CAACC,OAAO,CAAC5S,MAAM,CAACuD,UAAU,CAAC,CAACG,GAAG,CAAC,CAAC,CAAClH,EAAE,EAAEC,SAAS,CAAC;MAAA,IAAA+W,sBAAA;MAAA,oBACrDhe,KAAA,CAAA+b,aAAA,CAAC/a,YAAY;QACXqS,GAAG,EAAErM,EAAG;QACR4W,YAAY,GAAAI,sBAAA,GAAEjc,KAAK,CAAC+F,MAAM,CAACmP,SAAS,CAACjQ,EAAE,CAAC,cAAAgX,sBAAA,uBAA1BA,sBAAA,CAA4B5N,MAAO;QACjDnJ,SAAS,EAAEA,SAAU;QACrB4W,OAAO,EACJlL,YAAY,CAAC3L,EAAE,KAAKA,EAAE,IACvB2L,YAAY,CAAC7B,MAAM,KAAK9J,EAAE,IAC1B2L,YAAY,CAAC3B,IAAI,KAAKhK,EACvB;QACD8W,OAAO,EACJpL,YAAY,CAAC1L,EAAE,KAAKA,EAAE,IACvB0L,YAAY,CAAC5B,MAAM,KAAK9J,EAAE,IAC1B0L,YAAY,CAAC1B,IAAI,KAAKhK,EACvB;QACDiX,mBAAmB,EAAE,IAAI,CAAC9F,aAAc;QAAA8D,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACzC,CAAC;IAAA,CACH,CAAC,EACDa,MAAM,CAACC,OAAO,CAAC5S,MAAM,CAAC0G,WAAW,CAAC,CAAChD,GAAG,CAAC,CAAC,CAAClH,EAAE,EAAEmB,UAAU,CAAC;MAAA,IAAA+V,sBAAA;MAAA,oBACvDle,KAAA,CAAA+b,aAAA,CAAC9a,aAAa;QACZoS,GAAG,EAAErM,EAAG;QACR4W,YAAY,GAAAM,sBAAA,GAAEnc,KAAK,CAAC+F,MAAM,CAACmP,SAAS,CAACjQ,EAAE,CAAC,cAAAkX,sBAAA,uBAA1BA,sBAAA,CAA4B9N,MAAO;QACjDjI,UAAU,EAAEA,UAAW;QACvB0V,OAAO,EAAElL,YAAY,CAAC3L,EAAE,KAAKA,EAAG;QAChC8W,OAAO,EAAEpL,YAAY,CAAC1L,EAAE,KAAKA,EAAG;QAChCmX,oBAAoB,EAAE,IAAI,CAAChG,aAAc;QAAA8D,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CAC1C,CAAC;IAAA,CACH,CACE,CACF,CAAC,eACNtc,KAAA,CAAA+b,aAAA;MACEQ,OAAO,EAAEA,CAAA,KAAM;QACb,IAAI,CAACtR,MAAM,CAACC,KAAK,CAAC,CAAC;QACnB,IAAI,CAACuM,iBAAiB,CAAC,cAAc,EAAE,IAAI,CAAC;MAC9C,CAAE;MAAAwE,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAEFtc,KAAA,CAAA+b,aAAA,CAAC7b,MAAM;MACL6c,GAAG,EAAGC,CAAC,IAAK;QAAE,IAAI,CAAC/R,MAAM,GAAG+R,CAAC;MAAE,CAAE;MACjCvW,WAAW,EAAEA,WAAY;MACzB2X,cAAc,EAAEpP,KAAM;MACtBxD,QAAQ,EAAE,IAAI,CAACA,QAAS;MACxBwO,gBAAgB,EAAE,IAAI,CAACA,gBAAiB;MACxCD,iBAAiB,EAAE,IAAI,CAACA,iBAAkB;MAC1CX,gBAAgB,EAAE,IAAI,CAACA,gBAAiB;MACxCiF,YAAY,EAAE,IAAI,CAACvF,aAAc;MAAAmD,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAClC,CACE,CACF,CACF,CAAC,eACNtc,KAAA,CAAA+b,aAAA,CAACta,UAAU;MACTmL,QAAQ,EAAE,IAAI,CAACA,QAAS;MACxBoK,aAAa,EAAEA,aAAc;MAC7BtF,aAAa,EAAEA,aAAc;MAC7B4M,UAAU,EAAE,IAAI,CAAC3Z,KAAK,CAAC4Z,WAAY;MACnC1F,cAAc,EAAE,IAAI,CAACA,cAAe;MACpC2F,SAAS,EAAG1W,MAAM,IAAK;QACrB,IAAI,CAACP,SAAS,CAACd,WAAW,EAAEiL,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE1K,EAAE,EAAEc,MAAM,CAAC;QACtD/F,KAAK,CAAC4G,QAAQ,CAAC+B,yBAAyB,CAAC,CAAC;MAC5C,CAAE;MACF+T,QAAQ,EAAE,IAAI,CAACjM,cAAe;MAAAyJ,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC/B,CACE,CAAC;EAEV;AAqGF","ignoreList":[]},"metadata":{},"sourceType":"module"}