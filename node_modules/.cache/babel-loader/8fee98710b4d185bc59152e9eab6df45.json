{"ast":null,"code":"/**\n * Get the distance from a point to a line\n */\nexport function getDistance(p1, p2, p3) {\n  let len;\n  if (p1.x - p2.x === 0) {\n    len = Math.abs(p3.x - p1.x);\n  } else if (p1.y - p2.y === 0) {\n    len = Math.abs(p3.y - p1.y);\n  } else {\n    const A = (p1.y - p2.y) / (p1.x - p2.x);\n    const B = p1.y - A * p1.x;\n    len = Math.abs((A * p3.x + B - p3.y) / Math.sqrt(A * A + 1));\n  }\n  return len;\n}\n;\nexport function getFourDotsRectVertex(a, b, c, d) {\n  /**\n   * Auxiliary line slope rate\n   */\n  const k1 = (b.y - a.y) / (b.x - a.x);\n  const k2 = -1 / k1;\n  // horizontal\n  if (a.x === b.x) {\n    return {\n      width: Math.abs(c.x - d.x),\n      height: Math.abs(a.y - b.y),\n      x: Math.min(c.x, d.x),\n      y: Math.min(a.y, b.y),\n      rotation: a.y > b.y ? Math.PI : 0\n    };\n  }\n  // vertical\n  if (a.y === b.y) {\n    const width = Math.abs(c.y - d.y);\n    const height = Math.abs(a.x - b.x);\n    const centerPoint = {\n      x: (a.x + b.x) / 2,\n      y: (c.y + d.y) / 2\n    };\n    return {\n      width,\n      height,\n      x: centerPoint.x - width / 2,\n      y: centerPoint.y - height / 2,\n      rotation: a.x < b.x ? -Math.PI / 2 : Math.PI / 2\n    };\n  }\n\n  /**\n   * The vertical distance from the point to the auxiliary line\n   */\n  const distanceCAB = getDistance(a, b, c);\n  const distanceDAB = getDistance(a, b, d);\n  /**\n  * Point on one side of the auxiliary line\n  */\n  const side1 = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);\n  const side2 = (a.x - d.x) * (b.y - d.y) - (a.y - d.y) * (b.x - d.x);\n  const width = side1 * side2 >= 0 ? Math.abs(distanceCAB - distanceDAB) : distanceCAB + distanceDAB;\n  const height = Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n\n  // (ax, ay) ==> line1: y= k2*x + A\n  const A = a.y - a.x * k2;\n  // (dx, dy) ==> line2: y= k1*x + D\n  const D = d.y - d.x * k1;\n  // (tlx, tly) ==> k1*tlx+D == k2*tlx+A\n  const tlx = (A - D) / (k1 - k2);\n  const tly = tlx * k2 + A;\n  const B = b.y - b.x * k2;\n  const C = c.y - c.x * k1;\n  const brx = (B - C) / (k1 - k2);\n  const bry = brx * k2 + B;\n  const centerPoint = {\n    x: (tlx + brx) / 2,\n    y: (tly + bry) / 2\n  };\n  return {\n    width,\n    height,\n    x: centerPoint.x - width / 2,\n    y: centerPoint.y - height / 2,\n    rotation: a.x < b.x ? Math.atan(k1) - Math.PI / 2 : Math.atan(k1) + Math.PI / 2\n  };\n}\n;\n\n/**\n * rotate point around center (based on canvas axis)\n * @param center\n * @param point\n * @param rotation\n * @returns\n */\nexport function computeRotatedPosition(center, point, rotation) {\n  const cos = Math.cos(-rotation);\n  const sin = Math.sin(-rotation);\n  const nx = cos * (point.x - center.x) + sin * (point.y - center.y) + center.x;\n  const ny = -sin * (point.x - center.x) + cos * (point.y - center.y) + center.y;\n  return {\n    x: nx,\n    y: ny\n  };\n}\n;\n\n/**\n * Calculate the angle of rotation\n */\nexport function computedAngle(center, first, second) {\n  if (first.x === second.x && first.y === second.y) {\n    return 0;\n  }\n  const fcx = first.x - center.x;\n  const fcy = first.y - center.y;\n  const scx = second.x - center.x;\n  const scy = second.y - center.y;\n  const cfVector = {\n    x: fcx,\n    y: fcy\n  };\n  const csVector = {\n    x: scx,\n    y: scy\n  };\n  const angle = Math.acos((cfVector.x * csVector.x + cfVector.y * csVector.y) / (Math.sqrt(cfVector.x ** 2 + cfVector.y ** 2) * Math.sqrt(csVector.x ** 2 + csVector.y ** 2)));\n  const direct = cfVector.x * csVector.y - cfVector.y * csVector.x;\n  return direct < 0 ? -angle : angle;\n}\n;\n\n/**\n * split bezier curve as points\n * @param fromX\n * @param fromY\n * @param toX\n * @param toY\n * @param cpX\n * @param cpY\n * @param cpX2\n * @param cpY2\n * @param count\n */\nexport function bezierSplit(fromX, fromY, toX, toY, cpX, cpY, cpX2, cpY2, count) {\n  const points = [];\n  let dt = 0;\n  let dt2 = 0;\n  let dt3 = 0;\n  let t2 = 0;\n  let t3 = 0;\n  const len = count || curveLength(fromX, fromY, toX, toY, cpX, cpY, cpX2, cpY2);\n  for (let i = 1, j = 0; i <= len; i += 1) {\n    j = i / len;\n    dt = 1 - j;\n    dt2 = dt * dt;\n    dt3 = dt2 * dt;\n    t2 = j * j;\n    t3 = t2 * j;\n    const px = dt3 * fromX + 3 * dt2 * j * cpX + 3 * dt * t2 * cpX2 + t3 * toX;\n    const py = dt3 * fromY + 3 * dt2 * j * cpY + 3 * dt * t2 * cpY2 + t3 * toY;\n    points.push([px, py]);\n  }\n  return points;\n}\n\n/**\n * calc curve length\n * @param fromX\n * @param fromY\n * @param cpX\n * @param cpY\n * @param cpX2\n * @param cpY2\n * @param toX\n * @param toY\n */\nexport function curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {\n  const n = 10;\n  let result = 0;\n  let t = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let nt = 0;\n  let nt2 = 0;\n  let nt3 = 0;\n  let x = 0;\n  let y = 0;\n  let dx = 0;\n  let dy = 0;\n  let prevX = fromX;\n  let prevY = fromY;\n  for (let i = 1; i <= n; i += 1) {\n    t = i / n;\n    t2 = t * t;\n    t3 = t2 * t;\n    nt = 1 - t;\n    nt2 = nt * nt;\n    nt3 = nt2 * nt;\n    x = nt3 * fromX + 3 * nt2 * t * cpX + 3 * nt * t2 * cpX2 + t3 * toX;\n    y = nt3 * fromY + 3 * nt2 * t * cpY + 3 * nt * t2 * cpY2 + t3 * toY;\n    dx = prevX - x;\n    dy = prevY - y;\n    prevX = x;\n    prevY = y;\n    result += Math.sqrt(dx * dx + dy * dy);\n  }\n  return result;\n}\n\n/**\n * average divide circle\n * @param x\n * @param y\n * @param radius\n * @param len\n * @param rotation\n */\nexport function avgCircleDivider(x, y, radius, len, rotation = 0) {\n  const startAngle = -(Math.PI / 2) + rotation;\n  const delta = Math.PI * 2 / len;\n  const points = [];\n  for (let i = 0; i < len; i += 1) {\n    const angle = i * delta + startAngle;\n    points.push({\n      x: x + radius * Math.cos(angle),\n      y: y + radius * Math.sin(angle)\n    });\n  }\n  return points;\n}","map":{"version":3,"names":["getDistance","p1","p2","p3","len","x","Math","abs","y","A","B","sqrt","getFourDotsRectVertex","a","b","c","d","k1","k2","width","height","min","rotation","PI","centerPoint","distanceCAB","distanceDAB","side1","side2","D","tlx","tly","C","brx","bry","atan","computeRotatedPosition","center","point","cos","sin","nx","ny","computedAngle","first","second","fcx","fcy","scx","scy","cfVector","csVector","angle","acos","direct","bezierSplit","fromX","fromY","toX","toY","cpX","cpY","cpX2","cpY2","count","points","dt","dt2","dt3","t2","t3","curveLength","i","j","px","py","push","n","result","t","nt","nt2","nt3","dx","dy","prevX","prevY","avgCircleDivider","radius","startAngle","delta"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/utils/math.ts"],"sourcesContent":["/**\n * Get the distance from a point to a line\n */\nexport function getDistance(\n  p1: { x: number; y: number },\n  p2: { x: number; y: number },\n  p3: { x: number; y: number },\n) {\n  let len;\n  if (p1.x - p2.x === 0) {\n    len = Math.abs(p3.x - p1.x);\n  } else if (p1.y - p2.y === 0) {\n    len = Math.abs(p3.y - p1.y);\n  } else {\n    const A = (p1.y - p2.y) / (p1.x - p2.x);\n    const B = p1.y - A * p1.x;\n    len = Math.abs((A * p3.x + B - p3.y) / Math.sqrt(A * A + 1));\n  }\n  return len;\n};\n\nexport function getFourDotsRectVertex(\n  a: { x: number; y: number },\n  b: { x: number; y: number },\n  c: { x: number; y: number },\n  d: { x: number; y: number },\n) {\n  /**\n   * Auxiliary line slope rate\n   */\n  const k1 = (b.y - a.y) / (b.x - a.x);\n  const k2 = -1 / k1;\n  // horizontal\n  if (a.x === b.x) {\n    return {\n      width: Math.abs(c.x - d.x),\n      height: Math.abs(a.y - b.y),\n      x: Math.min(c.x, d.x),\n      y: Math.min(a.y, b.y),\n      rotation: a.y > b.y ? Math.PI : 0\n    };\n  }\n  // vertical\n  if (a.y === b.y) {\n    const width = Math.abs(c.y - d.y);\n    const height = Math.abs(a.x - b.x);\n    const centerPoint = {\n      x: (a.x + b.x) / 2,\n      y: (c.y + d.y) / 2,\n    };\n    return {\n      width,\n      height,\n      x: centerPoint.x - width / 2,\n      y: centerPoint.y - height / 2,\n      rotation: a.x < b.x ? -Math.PI / 2 : Math.PI / 2\n    };\n  }\n\n  /**\n   * The vertical distance from the point to the auxiliary line\n   */\n  const distanceCAB = getDistance(a, b, c);\n  const distanceDAB = getDistance(a, b, d);\n  /**\n  * Point on one side of the auxiliary line\n  */\n  const side1 = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);\n  const side2 = (a.x - d.x) * (b.y - d.y) - (a.y - d.y) * (b.x - d.x);\n  const width = side1 * side2 >= 0 ? Math.abs(distanceCAB - distanceDAB) : distanceCAB + distanceDAB;\n  const height = Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n\n  // (ax, ay) ==> line1: y= k2*x + A\n  const A = a.y - a.x * k2;\n  // (dx, dy) ==> line2: y= k1*x + D\n  const D = d.y - d.x * k1;\n  // (tlx, tly) ==> k1*tlx+D == k2*tlx+A\n  const tlx = (A - D) / (k1 - k2);\n  const tly = tlx * k2 + A;\n\n  const B = b.y - b.x * k2;\n  const C = c.y - c.x * k1;\n  const brx = (B - C) / (k1 - k2);\n  const bry = brx * k2 + B;\n\n  const centerPoint = {\n    x: (tlx + brx) / 2,\n    y: (tly + bry) / 2\n  };\n  return {\n    width,\n    height,\n    x: centerPoint.x - width / 2,\n    y: centerPoint.y - height / 2,\n    rotation: a.x < b.x ? Math.atan(k1) - Math.PI / 2 : Math.atan(k1) + Math.PI / 2\n  };\n};\n\n/**\n * rotate point around center (based on canvas axis)\n * @param center\n * @param point\n * @param rotation\n * @returns\n */\nexport function computeRotatedPosition(\n  center: { x: number; y: number },\n  point: { x: number; y: number },\n  rotation: number,\n) {\n  const cos = Math.cos(-rotation);\n  const sin = Math.sin(-rotation);\n  const nx = cos * (point.x - center.x) + sin * (point.y - center.y) + center.x;\n  const ny = -sin * (point.x - center.x) + cos * (point.y - center.y) + center.y;\n  return { x: nx, y: ny };\n};\n\n/**\n * Calculate the angle of rotation\n */\nexport function computedAngle(\n  center: { x: number; y: number },\n  first: { x: number; y: number },\n  second: { x: number; y: number },\n) {\n  if (first.x === second.x && first.y === second.y) {\n    return 0;\n  }\n  const fcx = first.x - center.x;\n  const fcy = first.y - center.y;\n  const scx = second.x - center.x;\n  const scy = second.y - center.y;\n  const cfVector = {\n    x: fcx,\n    y: fcy\n  };\n  const csVector = {\n    x: scx,\n    y: scy\n  };\n\n  const angle = Math.acos((cfVector.x * csVector.x + cfVector.y * csVector.y) / (Math.sqrt(cfVector.x ** 2 + cfVector.y ** 2) * Math.sqrt(csVector.x ** 2 + csVector.y ** 2)));\n  const direct = (cfVector.x * csVector.y) - (cfVector.y * csVector.x);\n\n  return direct < 0 ? -angle : angle;\n};\n\n/**\n * split bezier curve as points\n * @param fromX\n * @param fromY\n * @param toX\n * @param toY\n * @param cpX\n * @param cpY\n * @param cpX2\n * @param cpY2\n * @param count\n */\nexport function bezierSplit(\n  fromX: number,\n  fromY: number,\n  toX: number,\n  toY: number,\n  cpX: number,\n  cpY: number,\n  cpX2: number,\n  cpY2: number,\n  count?: number,\n) {\n  const points = [];\n  let dt = 0;\n  let dt2 = 0;\n  let dt3 = 0;\n  let t2 = 0;\n  let t3 = 0;\n\n  const len = count || curveLength(fromX, fromY, toX, toY, cpX, cpY, cpX2, cpY2);\n  for (let i = 1, j = 0; i <= len; i += 1) {\n    j = i / len;\n\n    dt = (1 - j);\n    dt2 = dt * dt;\n    dt3 = dt2 * dt;\n\n    t2 = j * j;\n    t3 = t2 * j;\n\n    const px = (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX);\n    const py = (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY);\n    points.push([px, py]);\n  }\n\n  return points;\n}\n\n/**\n * calc curve length\n * @param fromX\n * @param fromY\n * @param cpX\n * @param cpY\n * @param cpX2\n * @param cpY2\n * @param toX\n * @param toY\n */\nexport function curveLength(\n  fromX: number,\n  fromY: number,\n  cpX: number,\n  cpY: number,\n  cpX2: number,\n  cpY2: number,\n  toX: number,\n  toY: number,\n) {\n  const n = 10;\n  let result = 0;\n  let t = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let nt = 0;\n  let nt2 = 0;\n  let nt3 = 0;\n  let x = 0;\n  let y = 0;\n  let dx = 0;\n  let dy = 0;\n  let prevX = fromX;\n  let prevY = fromY;\n\n  for (let i = 1; i <= n; i += 1) {\n    t = i / n;\n    t2 = t * t;\n    t3 = t2 * t;\n    nt = (1 - t);\n    nt2 = nt * nt;\n    nt3 = nt2 * nt;\n\n    x = (nt3 * fromX) + (3 * nt2 * t * cpX) + (3 * nt * t2 * cpX2) + (t3 * toX);\n    y = (nt3 * fromY) + (3 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n    dx = prevX - x;\n    dy = prevY - y;\n    prevX = x;\n    prevY = y;\n\n    result += Math.sqrt((dx * dx) + (dy * dy));\n  }\n\n  return result;\n}\n\n/**\n * average divide circle\n * @param x\n * @param y\n * @param radius\n * @param len\n * @param rotation\n */\nexport function avgCircleDivider(x: number, y: number, radius: number, len: number, rotation = 0) {\n  const startAngle = -(Math.PI / 2) + rotation;\n  const delta = (Math.PI * 2) / len;\n  const points = [];\n  for (let i = 0; i < len; i += 1) {\n    const angle = (i * delta) + startAngle;\n    points.push({\n      x: x + radius * Math.cos(angle),\n      y: y + radius * Math.sin(angle),\n    });\n  }\n  return points;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,WAAWA,CACzBC,EAA4B,EAC5BC,EAA4B,EAC5BC,EAA4B,EAC5B;EACA,IAAIC,GAAG;EACP,IAAIH,EAAE,CAACI,CAAC,GAAGH,EAAE,CAACG,CAAC,KAAK,CAAC,EAAE;IACrBD,GAAG,GAAGE,IAAI,CAACC,GAAG,CAACJ,EAAE,CAACE,CAAC,GAAGJ,EAAE,CAACI,CAAC,CAAC;EAC7B,CAAC,MAAM,IAAIJ,EAAE,CAACO,CAAC,GAAGN,EAAE,CAACM,CAAC,KAAK,CAAC,EAAE;IAC5BJ,GAAG,GAAGE,IAAI,CAACC,GAAG,CAACJ,EAAE,CAACK,CAAC,GAAGP,EAAE,CAACO,CAAC,CAAC;EAC7B,CAAC,MAAM;IACL,MAAMC,CAAC,GAAG,CAACR,EAAE,CAACO,CAAC,GAAGN,EAAE,CAACM,CAAC,KAAKP,EAAE,CAACI,CAAC,GAAGH,EAAE,CAACG,CAAC,CAAC;IACvC,MAAMK,CAAC,GAAGT,EAAE,CAACO,CAAC,GAAGC,CAAC,GAAGR,EAAE,CAACI,CAAC;IACzBD,GAAG,GAAGE,IAAI,CAACC,GAAG,CAAC,CAACE,CAAC,GAAGN,EAAE,CAACE,CAAC,GAAGK,CAAC,GAAGP,EAAE,CAACK,CAAC,IAAIF,IAAI,CAACK,IAAI,CAACF,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,CAAC;EAC9D;EACA,OAAOL,GAAG;AACZ;AAAC;AAED,OAAO,SAASQ,qBAAqBA,CACnCC,CAA2B,EAC3BC,CAA2B,EAC3BC,CAA2B,EAC3BC,CAA2B,EAC3B;EACA;AACF;AACA;EACE,MAAMC,EAAE,GAAG,CAACH,CAAC,CAACN,CAAC,GAAGK,CAAC,CAACL,CAAC,KAAKM,CAAC,CAACT,CAAC,GAAGQ,CAAC,CAACR,CAAC,CAAC;EACpC,MAAMa,EAAE,GAAG,CAAC,CAAC,GAAGD,EAAE;EAClB;EACA,IAAIJ,CAAC,CAACR,CAAC,KAAKS,CAAC,CAACT,CAAC,EAAE;IACf,OAAO;MACLc,KAAK,EAAEb,IAAI,CAACC,GAAG,CAACQ,CAAC,CAACV,CAAC,GAAGW,CAAC,CAACX,CAAC,CAAC;MAC1Be,MAAM,EAAEd,IAAI,CAACC,GAAG,CAACM,CAAC,CAACL,CAAC,GAAGM,CAAC,CAACN,CAAC,CAAC;MAC3BH,CAAC,EAAEC,IAAI,CAACe,GAAG,CAACN,CAAC,CAACV,CAAC,EAAEW,CAAC,CAACX,CAAC,CAAC;MACrBG,CAAC,EAAEF,IAAI,CAACe,GAAG,CAACR,CAAC,CAACL,CAAC,EAAEM,CAAC,CAACN,CAAC,CAAC;MACrBc,QAAQ,EAAET,CAAC,CAACL,CAAC,GAAGM,CAAC,CAACN,CAAC,GAAGF,IAAI,CAACiB,EAAE,GAAG;IAClC,CAAC;EACH;EACA;EACA,IAAIV,CAAC,CAACL,CAAC,KAAKM,CAAC,CAACN,CAAC,EAAE;IACf,MAAMW,KAAK,GAAGb,IAAI,CAACC,GAAG,CAACQ,CAAC,CAACP,CAAC,GAAGQ,CAAC,CAACR,CAAC,CAAC;IACjC,MAAMY,MAAM,GAAGd,IAAI,CAACC,GAAG,CAACM,CAAC,CAACR,CAAC,GAAGS,CAAC,CAACT,CAAC,CAAC;IAClC,MAAMmB,WAAW,GAAG;MAClBnB,CAAC,EAAE,CAACQ,CAAC,CAACR,CAAC,GAAGS,CAAC,CAACT,CAAC,IAAI,CAAC;MAClBG,CAAC,EAAE,CAACO,CAAC,CAACP,CAAC,GAAGQ,CAAC,CAACR,CAAC,IAAI;IACnB,CAAC;IACD,OAAO;MACLW,KAAK;MACLC,MAAM;MACNf,CAAC,EAAEmB,WAAW,CAACnB,CAAC,GAAGc,KAAK,GAAG,CAAC;MAC5BX,CAAC,EAAEgB,WAAW,CAAChB,CAAC,GAAGY,MAAM,GAAG,CAAC;MAC7BE,QAAQ,EAAET,CAAC,CAACR,CAAC,GAAGS,CAAC,CAACT,CAAC,GAAG,CAACC,IAAI,CAACiB,EAAE,GAAG,CAAC,GAAGjB,IAAI,CAACiB,EAAE,GAAG;IACjD,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAME,WAAW,GAAGzB,WAAW,CAACa,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACxC,MAAMW,WAAW,GAAG1B,WAAW,CAACa,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAC;EACxC;AACF;AACA;EACE,MAAMW,KAAK,GAAG,CAACd,CAAC,CAACR,CAAC,GAAGU,CAAC,CAACV,CAAC,KAAKS,CAAC,CAACN,CAAC,GAAGO,CAAC,CAACP,CAAC,CAAC,GAAG,CAACK,CAAC,CAACL,CAAC,GAAGO,CAAC,CAACP,CAAC,KAAKM,CAAC,CAACT,CAAC,GAAGU,CAAC,CAACV,CAAC,CAAC;EACnE,MAAMuB,KAAK,GAAG,CAACf,CAAC,CAACR,CAAC,GAAGW,CAAC,CAACX,CAAC,KAAKS,CAAC,CAACN,CAAC,GAAGQ,CAAC,CAACR,CAAC,CAAC,GAAG,CAACK,CAAC,CAACL,CAAC,GAAGQ,CAAC,CAACR,CAAC,KAAKM,CAAC,CAACT,CAAC,GAAGW,CAAC,CAACX,CAAC,CAAC;EACnE,MAAMc,KAAK,GAAGQ,KAAK,GAAGC,KAAK,IAAI,CAAC,GAAGtB,IAAI,CAACC,GAAG,CAACkB,WAAW,GAAGC,WAAW,CAAC,GAAGD,WAAW,GAAGC,WAAW;EAClG,MAAMN,MAAM,GAAGd,IAAI,CAACK,IAAI,CAAC,CAACE,CAAC,CAACR,CAAC,GAAGS,CAAC,CAACT,CAAC,KAAK,CAAC,GAAG,CAACQ,CAAC,CAACL,CAAC,GAAGM,CAAC,CAACN,CAAC,KAAK,CAAC,CAAC;;EAE7D;EACA,MAAMC,CAAC,GAAGI,CAAC,CAACL,CAAC,GAAGK,CAAC,CAACR,CAAC,GAAGa,EAAE;EACxB;EACA,MAAMW,CAAC,GAAGb,CAAC,CAACR,CAAC,GAAGQ,CAAC,CAACX,CAAC,GAAGY,EAAE;EACxB;EACA,MAAMa,GAAG,GAAG,CAACrB,CAAC,GAAGoB,CAAC,KAAKZ,EAAE,GAAGC,EAAE,CAAC;EAC/B,MAAMa,GAAG,GAAGD,GAAG,GAAGZ,EAAE,GAAGT,CAAC;EAExB,MAAMC,CAAC,GAAGI,CAAC,CAACN,CAAC,GAAGM,CAAC,CAACT,CAAC,GAAGa,EAAE;EACxB,MAAMc,CAAC,GAAGjB,CAAC,CAACP,CAAC,GAAGO,CAAC,CAACV,CAAC,GAAGY,EAAE;EACxB,MAAMgB,GAAG,GAAG,CAACvB,CAAC,GAAGsB,CAAC,KAAKf,EAAE,GAAGC,EAAE,CAAC;EAC/B,MAAMgB,GAAG,GAAGD,GAAG,GAAGf,EAAE,GAAGR,CAAC;EAExB,MAAMc,WAAW,GAAG;IAClBnB,CAAC,EAAE,CAACyB,GAAG,GAAGG,GAAG,IAAI,CAAC;IAClBzB,CAAC,EAAE,CAACuB,GAAG,GAAGG,GAAG,IAAI;EACnB,CAAC;EACD,OAAO;IACLf,KAAK;IACLC,MAAM;IACNf,CAAC,EAAEmB,WAAW,CAACnB,CAAC,GAAGc,KAAK,GAAG,CAAC;IAC5BX,CAAC,EAAEgB,WAAW,CAAChB,CAAC,GAAGY,MAAM,GAAG,CAAC;IAC7BE,QAAQ,EAAET,CAAC,CAACR,CAAC,GAAGS,CAAC,CAACT,CAAC,GAAGC,IAAI,CAAC6B,IAAI,CAAClB,EAAE,CAAC,GAAGX,IAAI,CAACiB,EAAE,GAAG,CAAC,GAAGjB,IAAI,CAAC6B,IAAI,CAAClB,EAAE,CAAC,GAAGX,IAAI,CAACiB,EAAE,GAAG;EAChF,CAAC;AACH;AAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,sBAAsBA,CACpCC,MAAgC,EAChCC,KAA+B,EAC/BhB,QAAgB,EAChB;EACA,MAAMiB,GAAG,GAAGjC,IAAI,CAACiC,GAAG,CAAC,CAACjB,QAAQ,CAAC;EAC/B,MAAMkB,GAAG,GAAGlC,IAAI,CAACkC,GAAG,CAAC,CAAClB,QAAQ,CAAC;EAC/B,MAAMmB,EAAE,GAAGF,GAAG,IAAID,KAAK,CAACjC,CAAC,GAAGgC,MAAM,CAAChC,CAAC,CAAC,GAAGmC,GAAG,IAAIF,KAAK,CAAC9B,CAAC,GAAG6B,MAAM,CAAC7B,CAAC,CAAC,GAAG6B,MAAM,CAAChC,CAAC;EAC7E,MAAMqC,EAAE,GAAG,CAACF,GAAG,IAAIF,KAAK,CAACjC,CAAC,GAAGgC,MAAM,CAAChC,CAAC,CAAC,GAAGkC,GAAG,IAAID,KAAK,CAAC9B,CAAC,GAAG6B,MAAM,CAAC7B,CAAC,CAAC,GAAG6B,MAAM,CAAC7B,CAAC;EAC9E,OAAO;IAAEH,CAAC,EAAEoC,EAAE;IAAEjC,CAAC,EAAEkC;EAAG,CAAC;AACzB;AAAC;;AAED;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAC3BN,MAAgC,EAChCO,KAA+B,EAC/BC,MAAgC,EAChC;EACA,IAAID,KAAK,CAACvC,CAAC,KAAKwC,MAAM,CAACxC,CAAC,IAAIuC,KAAK,CAACpC,CAAC,KAAKqC,MAAM,CAACrC,CAAC,EAAE;IAChD,OAAO,CAAC;EACV;EACA,MAAMsC,GAAG,GAAGF,KAAK,CAACvC,CAAC,GAAGgC,MAAM,CAAChC,CAAC;EAC9B,MAAM0C,GAAG,GAAGH,KAAK,CAACpC,CAAC,GAAG6B,MAAM,CAAC7B,CAAC;EAC9B,MAAMwC,GAAG,GAAGH,MAAM,CAACxC,CAAC,GAAGgC,MAAM,CAAChC,CAAC;EAC/B,MAAM4C,GAAG,GAAGJ,MAAM,CAACrC,CAAC,GAAG6B,MAAM,CAAC7B,CAAC;EAC/B,MAAM0C,QAAQ,GAAG;IACf7C,CAAC,EAAEyC,GAAG;IACNtC,CAAC,EAAEuC;EACL,CAAC;EACD,MAAMI,QAAQ,GAAG;IACf9C,CAAC,EAAE2C,GAAG;IACNxC,CAAC,EAAEyC;EACL,CAAC;EAED,MAAMG,KAAK,GAAG9C,IAAI,CAAC+C,IAAI,CAAC,CAACH,QAAQ,CAAC7C,CAAC,GAAG8C,QAAQ,CAAC9C,CAAC,GAAG6C,QAAQ,CAAC1C,CAAC,GAAG2C,QAAQ,CAAC3C,CAAC,KAAKF,IAAI,CAACK,IAAI,CAACuC,QAAQ,CAAC7C,CAAC,IAAI,CAAC,GAAG6C,QAAQ,CAAC1C,CAAC,IAAI,CAAC,CAAC,GAAGF,IAAI,CAACK,IAAI,CAACwC,QAAQ,CAAC9C,CAAC,IAAI,CAAC,GAAG8C,QAAQ,CAAC3C,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5K,MAAM8C,MAAM,GAAIJ,QAAQ,CAAC7C,CAAC,GAAG8C,QAAQ,CAAC3C,CAAC,GAAK0C,QAAQ,CAAC1C,CAAC,GAAG2C,QAAQ,CAAC9C,CAAE;EAEpE,OAAOiD,MAAM,GAAG,CAAC,GAAG,CAACF,KAAK,GAAGA,KAAK;AACpC;AAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,WAAWA,CACzBC,KAAa,EACbC,KAAa,EACbC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,IAAY,EACZC,IAAY,EACZC,KAAc,EACd;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EAEV,MAAMlE,GAAG,GAAG4D,KAAK,IAAIO,WAAW,CAACf,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;EAC9E,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAED,CAAC,IAAIpE,GAAG,EAAEoE,CAAC,IAAI,CAAC,EAAE;IACvCC,CAAC,GAAGD,CAAC,GAAGpE,GAAG;IAEX8D,EAAE,GAAI,CAAC,GAAGO,CAAE;IACZN,GAAG,GAAGD,EAAE,GAAGA,EAAE;IACbE,GAAG,GAAGD,GAAG,GAAGD,EAAE;IAEdG,EAAE,GAAGI,CAAC,GAAGA,CAAC;IACVH,EAAE,GAAGD,EAAE,GAAGI,CAAC;IAEX,MAAMC,EAAE,GAAIN,GAAG,GAAGZ,KAAK,GAAK,CAAC,GAAGW,GAAG,GAAGM,CAAC,GAAGb,GAAI,GAAI,CAAC,GAAGM,EAAE,GAAGG,EAAE,GAAGP,IAAK,GAAIQ,EAAE,GAAGZ,GAAI;IAClF,MAAMiB,EAAE,GAAIP,GAAG,GAAGX,KAAK,GAAK,CAAC,GAAGU,GAAG,GAAGM,CAAC,GAAGZ,GAAI,GAAI,CAAC,GAAGK,EAAE,GAAGG,EAAE,GAAGN,IAAK,GAAIO,EAAE,GAAGX,GAAI;IAClFM,MAAM,CAACW,IAAI,CAAC,CAACF,EAAE,EAAEC,EAAE,CAAC,CAAC;EACvB;EAEA,OAAOV,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,WAAWA,CACzBf,KAAa,EACbC,KAAa,EACbG,GAAW,EACXC,GAAW,EACXC,IAAY,EACZC,IAAY,EACZL,GAAW,EACXC,GAAW,EACX;EACA,MAAMkB,CAAC,GAAG,EAAE;EACZ,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIV,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIU,EAAE,GAAG,CAAC;EACV,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG,GAAG,CAAC;EACX,IAAI7E,CAAC,GAAG,CAAC;EACT,IAAIG,CAAC,GAAG,CAAC;EACT,IAAI2E,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,KAAK,GAAG7B,KAAK;EACjB,IAAI8B,KAAK,GAAG7B,KAAK;EAEjB,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIK,CAAC,EAAEL,CAAC,IAAI,CAAC,EAAE;IAC9BO,CAAC,GAAGP,CAAC,GAAGK,CAAC;IACTR,EAAE,GAAGU,CAAC,GAAGA,CAAC;IACVT,EAAE,GAAGD,EAAE,GAAGU,CAAC;IACXC,EAAE,GAAI,CAAC,GAAGD,CAAE;IACZE,GAAG,GAAGD,EAAE,GAAGA,EAAE;IACbE,GAAG,GAAGD,GAAG,GAAGD,EAAE;IAEd3E,CAAC,GAAI6E,GAAG,GAAG1B,KAAK,GAAK,CAAC,GAAGyB,GAAG,GAAGF,CAAC,GAAGnB,GAAI,GAAI,CAAC,GAAGoB,EAAE,GAAGX,EAAE,GAAGP,IAAK,GAAIQ,EAAE,GAAGZ,GAAI;IAC3ElD,CAAC,GAAI0E,GAAG,GAAGzB,KAAK,GAAK,CAAC,GAAGwB,GAAG,GAAGF,CAAC,GAAGlB,GAAI,GAAI,CAAC,GAAGmB,EAAE,GAAGX,EAAE,GAAGN,IAAK,GAAIO,EAAE,GAAGX,GAAI;IAC3EwB,EAAE,GAAGE,KAAK,GAAGhF,CAAC;IACd+E,EAAE,GAAGE,KAAK,GAAG9E,CAAC;IACd6E,KAAK,GAAGhF,CAAC;IACTiF,KAAK,GAAG9E,CAAC;IAETsE,MAAM,IAAIxE,IAAI,CAACK,IAAI,CAAEwE,EAAE,GAAGA,EAAE,GAAKC,EAAE,GAAGA,EAAG,CAAC;EAC5C;EAEA,OAAON,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,gBAAgBA,CAAClF,CAAS,EAAEG,CAAS,EAAEgF,MAAc,EAAEpF,GAAW,EAAEkB,QAAQ,GAAG,CAAC,EAAE;EAChG,MAAMmE,UAAU,GAAG,EAAEnF,IAAI,CAACiB,EAAE,GAAG,CAAC,CAAC,GAAGD,QAAQ;EAC5C,MAAMoE,KAAK,GAAIpF,IAAI,CAACiB,EAAE,GAAG,CAAC,GAAInB,GAAG;EACjC,MAAM6D,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpE,GAAG,EAAEoE,CAAC,IAAI,CAAC,EAAE;IAC/B,MAAMpB,KAAK,GAAIoB,CAAC,GAAGkB,KAAK,GAAID,UAAU;IACtCxB,MAAM,CAACW,IAAI,CAAC;MACVvE,CAAC,EAAEA,CAAC,GAAGmF,MAAM,GAAGlF,IAAI,CAACiC,GAAG,CAACa,KAAK,CAAC;MAC/B5C,CAAC,EAAEA,CAAC,GAAGgF,MAAM,GAAGlF,IAAI,CAACkC,GAAG,CAACY,KAAK;IAChC,CAAC,CAAC;EACJ;EACA,OAAOa,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module"}