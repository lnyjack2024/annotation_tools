{"ast":null,"code":"import{utils}from'@appen-china/easy-form';import{FieldControlType}from'@appen-china/easy-form/es/types';// eslint-disable-next-line import/prefer-default-export\nexport function triggerFormRules(config,values){const{fields:configFields,conditions=[],effects=[],rules=[]}=config;const fields=(configFields||[]).map(field=>({...field,...(values[field.name]!==undefined&&{defaultValue:values[field.name]})}));const parsedValue=utils.parseFormFields(fields);// trigger rule effects\nconst{updatedFields,updatedValues}=rules.reduce((acc,curr)=>utils.ruleTrigger(curr,acc.updatedFields,acc.updatedValues,fields,conditions,effects),{updatedFields:parsedValue.fields,updatedValues:parsedValue.initialValues});// remove invisible values\nupdatedFields.forEach(f=>{if(!f.visible){delete updatedValues[f.name];}});return{updatedValues,updatedFields};}/**\n * get field option label\n * @param value\n * @param options\n */export function getFieldOptionLabel(value,options){const option=options.find(o=>o.value===value);return(option===null||option===void 0?void 0:option.label)||\"\".concat(value);}/**\n * get field display label\n * @param value\n * @param field\n */export function getFieldDisplayLabel(fieldValue,field){let displayValue='';if(fieldValue!==undefined&&fieldValue!==null){if(field===null||field===void 0?void 0:field.options){displayValue=Array.isArray(fieldValue)?\"\".concat(fieldValue.map(v=>getFieldOptionLabel(v,field.options))):getFieldOptionLabel(fieldValue,field.options);}else{displayValue=\"\".concat(fieldValue);}}return displayValue;}/**\n * get field option item‘s reference url\n * @param value\n * @param field\n * @param keys match by keys order\n */export function getReferenceImageUrl(fieldValue,field){let keys=arguments.length>2&&arguments[2]!==undefined?arguments[2]:['value'];if((field===null||field===void 0?void 0:field.type)!==FieldControlType.RADIO){return;}let referenceImage='';if(fieldValue!==undefined&&fieldValue!==null){if(field===null||field===void 0?void 0:field.options){const option=field===null||field===void 0?void 0:field.options.find(o=>{for(let index=0;index<keys.length;index+=1){const element=keys[index];if(o[element]===fieldValue){return true;}}return false;});referenceImage=(option===null||option===void 0?void 0:option.referenceUrl)||'';}}return referenceImage;};/**\n * parse fields (with options), return a name-field map\n * @param config\n */export function parseFields(config){const map={};((config===null||config===void 0?void 0:config.fields)||[]).forEach(field=>{const{name,label,type,valueType,options=[]}=field;const newField={name,type,label};if(type===FieldControlType.RADIO||type===FieldControlType.SELECT||type===FieldControlType.CHECKBOX||type===FieldControlType.CASCADER){// has options\nnewField.options=utils.parseOptions(options,valueType);}map[name]=newField;});return map;}","map":{"version":3,"names":["utils","FieldControlType","triggerFormRules","config","values","fields","configFields","conditions","effects","rules","map","field","name","undefined","defaultValue","parsedValue","parseFormFields","updatedFields","updatedValues","reduce","acc","curr","ruleTrigger","initialValues","forEach","f","visible","getFieldOptionLabel","value","options","option","find","o","label","concat","getFieldDisplayLabel","fieldValue","displayValue","Array","isArray","v","getReferenceImageUrl","keys","arguments","length","type","RADIO","referenceImage","index","element","referenceUrl","parseFields","valueType","newField","SELECT","CHECKBOX","CASCADER","parseOptions"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/utils/form.ts"],"sourcesContent":["import { utils } from '@appen-china/easy-form';\nimport { FormConfig, FieldValue, FieldOption, FieldControlType } from '@appen-china/easy-form/es/types';\n\nexport interface FieldConfig {\n  name: string;\n  type: FieldControlType;\n  label?: string;\n  options?: FieldOption[];\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function triggerFormRules(config: FormConfig, values: any) {\n  const { fields: configFields, conditions = [], effects = [], rules = [] } = config;\n  const fields = (configFields || []).map((field) => ({\n    ...field,\n    ...values[field.name] !== undefined && {\n      defaultValue: values[field.name],\n    },\n  }));\n\n  const parsedValue = utils.parseFormFields(fields);\n  // trigger rule effects\n  const { updatedFields, updatedValues } = rules.reduce(\n    (acc, curr) => utils.ruleTrigger(\n      curr, acc.updatedFields, acc.updatedValues, fields, conditions, effects,\n    ),\n    { updatedFields: parsedValue.fields, updatedValues: parsedValue.initialValues },\n  );\n\n  // remove invisible values\n  updatedFields.forEach((f) => {\n    if (!f.visible) {\n      delete updatedValues[f.name];\n    }\n  });\n  return {\n    updatedValues,\n    updatedFields,\n  };\n}\n\n/**\n * get field option label\n * @param value\n * @param options\n */\nexport function getFieldOptionLabel(value: FieldValue, options: FieldOption[]) {\n  const option = options.find((o) => o.value === value);\n  return option?.label || `${value}`;\n}\n\n/**\n * get field display label\n * @param value\n * @param field\n */\nexport function getFieldDisplayLabel(fieldValue: FieldValue | FieldValue[], field?: FieldConfig) {\n  let displayValue = '';\n  if (fieldValue !== undefined && fieldValue !== null) {\n    if (field?.options) {\n      displayValue = Array.isArray(fieldValue)\n        ? `${fieldValue.map((v) => getFieldOptionLabel(v, field.options!))}`\n        : getFieldOptionLabel(fieldValue, field.options);\n    } else {\n      displayValue = `${fieldValue}`;\n    }\n  }\n  return displayValue;\n}\n\n/**\n * get field option item‘s reference url\n * @param value\n * @param field\n * @param keys match by keys order\n */\nexport function getReferenceImageUrl(fieldValue: FieldValue, field?: FieldConfig, keys: ('value' | 'label')[] = ['value']) {\n  if (field?.type !== FieldControlType.RADIO) {\n    return;\n  }\n  let referenceImage = '';\n  if (fieldValue !== undefined && fieldValue !== null) {\n    if (field?.options) {\n      const option = field?.options.find((o) => {\n        for (let index = 0; index < keys.length; index += 1) {\n          const element = keys[index];\n          if (o[element] === fieldValue) {\n            return true;\n          }\n        }\n        return false;\n      });\n      referenceImage = option?.referenceUrl || '';\n    }\n  }\n  return referenceImage;\n};\n\n\n/**\n * parse fields (with options), return a name-field map\n * @param config\n */\nexport function parseFields(config?: FormConfig) {\n  const map: { [fieldName: string]: FieldConfig } = {};\n  (config?.fields || []).forEach((field) => {\n    const { name, label, type, valueType, options = [] } = field;\n    const newField: FieldConfig = { name, type, label };\n    if (type === FieldControlType.RADIO || type === FieldControlType.SELECT || type === FieldControlType.CHECKBOX || type === FieldControlType.CASCADER) {\n      // has options\n      newField.options = utils.parseOptions(options, valueType);\n    }\n    map[name] = newField;\n  });\n  return map;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}