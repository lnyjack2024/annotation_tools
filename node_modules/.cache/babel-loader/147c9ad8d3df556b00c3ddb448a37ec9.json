{"ast":null,"code":"/**\n * rotate point around center (based on canvas axis)\n * @param center\n * @param point\n * @param rotation\n * @returns\n */export function computeRotatedPosition(center,point,rotation){const cos=Math.cos(-rotation);const sin=Math.sin(-rotation);const nx=cos*(point.x-center.x)+sin*(point.y-center.y)+center.x;const ny=-sin*(point.x-center.x)+cos*(point.y-center.y)+center.y;return{x:nx,y:ny};};/**\n * Calculate the angle of rotation\n */export function computedAngle(center,first,second){if(first.x===second.x&&first.y===second.y){return 0;}const fcx=first.x-center.x;const fcy=first.y-center.y;const scx=second.x-center.x;const scy=second.y-center.y;const cfVector={x:fcx,y:fcy};const csVector={x:scx,y:scy};const angle=Math.acos((cfVector.x*csVector.x+cfVector.y*csVector.y)/(Math.sqrt(cfVector.x**2+cfVector.y**2)*Math.sqrt(csVector.x**2+csVector.y**2)));const direct=cfVector.x*csVector.y-cfVector.y*csVector.x;return direct<0?-angle:angle;};/**\n * calc curve length\n * @param fromX\n * @param fromY\n * @param cpX\n * @param cpY\n * @param cpX2\n * @param cpY2\n * @param toX\n * @param toY\n */export function curveLength(fromX,fromY,cpX,cpY,cpX2,cpY2,toX,toY){const n=10;let result=0;let t=0;let t2=0;let t3=0;let nt=0;let nt2=0;let nt3=0;let x=0;let y=0;let dx=0;let dy=0;let prevX=fromX;let prevY=fromY;for(let i=1;i<=n;i+=1){t=i/n;t2=t*t;t3=t2*t;nt=1-t;nt2=nt*nt;nt3=nt2*nt;x=nt3*fromX+3*nt2*t*cpX+3*nt*t2*cpX2+t3*toX;y=nt3*fromY+3*nt2*t*cpY+3*nt*t2*cpY2+t3*toY;dx=prevX-x;dy=prevY-y;prevX=x;prevY=y;result+=Math.sqrt(dx*dx+dy*dy);}return result;}export function computePolygonAreaCenter(points){let sumX=0;let sumY=0;let sumArea=0;const p0=points[0];for(let i=1;i<points.length-1;i+=1){const p1=points[i];const p2=points[i+1];const area=0.5*(p0.x*p1.y-p1.x*p0.y+(p1.x*p2.y-p2.x*p1.y)+(p2.x*p0.y-p0.x*p2.y));sumArea+=area;sumX+=(points[0].x+p1.x+p2.x)*area;sumY+=(points[0].y+p1.y+p2.y)*area;}const x=sumX/sumArea/3;const y=sumY/sumArea/3;return{x,y};}","map":{"version":3,"names":["computeRotatedPosition","center","point","rotation","cos","Math","sin","nx","x","y","ny","computedAngle","first","second","fcx","fcy","scx","scy","cfVector","csVector","angle","acos","sqrt","direct","curveLength","fromX","fromY","cpX","cpY","cpX2","cpY2","toX","toY","n","result","t","t2","t3","nt","nt2","nt3","dx","dy","prevX","prevY","i","computePolygonAreaCenter","points","sumX","sumY","sumArea","p0","length","p1","p2","area"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/utils/math.ts"],"sourcesContent":["/**\n * rotate point around center (based on canvas axis)\n * @param center\n * @param point\n * @param rotation\n * @returns\n */\nexport function computeRotatedPosition(\n  center: { x: number; y: number },\n  point: { x: number; y: number },\n  rotation: number,\n) {\n  const cos = Math.cos(-rotation);\n  const sin = Math.sin(-rotation);\n  const nx = cos * (point.x - center.x) + sin * (point.y - center.y) + center.x;\n  const ny = -sin * (point.x - center.x) + cos * (point.y - center.y) + center.y;\n  return { x: nx, y: ny };\n};\n\n/**\n * Calculate the angle of rotation\n */\nexport function computedAngle(\n  center: { x: number; y: number },\n  first: { x: number; y: number },\n  second: { x: number; y: number },\n) {\n  if (first.x === second.x && first.y === second.y) {\n    return 0;\n  }\n  const fcx = first.x - center.x;\n  const fcy = first.y - center.y;\n  const scx = second.x - center.x;\n  const scy = second.y - center.y;\n  const cfVector = {\n    x: fcx,\n    y: fcy\n  };\n  const csVector = {\n    x: scx,\n    y: scy\n  };\n\n  const angle = Math.acos((cfVector.x * csVector.x + cfVector.y * csVector.y) / (Math.sqrt(cfVector.x ** 2 + cfVector.y ** 2) * Math.sqrt(csVector.x ** 2 + csVector.y ** 2)));\n  const direct = (cfVector.x * csVector.y) - (cfVector.y * csVector.x);\n\n  return direct < 0 ? -angle : angle;\n};\n\n/**\n * calc curve length\n * @param fromX\n * @param fromY\n * @param cpX\n * @param cpY\n * @param cpX2\n * @param cpY2\n * @param toX\n * @param toY\n */\nexport function curveLength(\n  fromX: number,\n  fromY: number,\n  cpX: number,\n  cpY: number,\n  cpX2: number,\n  cpY2: number,\n  toX: number,\n  toY: number,\n) {\n  const n = 10;\n  let result = 0;\n  let t = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let nt = 0;\n  let nt2 = 0;\n  let nt3 = 0;\n  let x = 0;\n  let y = 0;\n  let dx = 0;\n  let dy = 0;\n  let prevX = fromX;\n  let prevY = fromY;\n\n  for (let i = 1; i <= n; i += 1) {\n    t = i / n;\n    t2 = t * t;\n    t3 = t2 * t;\n    nt = (1 - t);\n    nt2 = nt * nt;\n    nt3 = nt2 * nt;\n\n    x = (nt3 * fromX) + (3 * nt2 * t * cpX) + (3 * nt * t2 * cpX2) + (t3 * toX);\n    y = (nt3 * fromY) + (3 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n    dx = prevX - x;\n    dy = prevY - y;\n    prevX = x;\n    prevY = y;\n\n    result += Math.sqrt((dx * dx) + (dy * dy));\n  }\n\n  return result;\n}\n\nexport function computePolygonAreaCenter(points: { x: number, y: number }[]) {\n  let sumX = 0;\n  let sumY = 0;\n  let sumArea = 0;\n  const p0 = points[0];\n  for (let i = 1; i < points.length - 1; i += 1) {\n    const p1 = points[i];\n    const p2 = points[i + 1];\n    const area = 0.5 * ((p0.x * p1.y - p1.x * p0.y) + (p1.x * p2.y - p2.x * p1.y) + (p2.x * p0.y - p0.x * p2.y));\n    sumArea += area;\n    sumX += (points[0].x + p1.x + p2.x) * area;\n    sumY += (points[0].y + p1.y + p2.y) * area;\n  }\n  const x = sumX / sumArea / 3;\n  const y = sumY / sumArea / 3;\n  return { x, y };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}