{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport ReviewItem from '../model/ReviewItem';\nimport { ReviewMode, ReviewResult, ViewMode } from '../types';\nimport { TOOLBAR_HEIGHT, SIDEBAR_WIDTH } from '../constants';\nimport { getToolTypeFromFrameData } from '../utils';\nimport { TOOL_MODE } from '../../../utils/tool-mode';\nimport Anchor, { EventAction } from '../../common/shapes/anchors/Anchor';\nimport Cursor from '../../common/Cursor';\nimport ApproveIcon from '../images/approve.png';\nimport RejectIcon from '../images/reject.png';\nimport SuspendIcon from '../images/suspend.png';\nimport ApproveSelectedIcon from '../images/approve_selected.png';\nimport RejectSelectedIcon from '../images/reject_selected.png';\nimport SuspendSelectedIcon from '../images/suspend_selected.png';\nfunction getIconByReviewResultType(type) {\n  switch (type) {\n    case ReviewResult.APPROVE:\n      return {\n        icon: ApproveIcon,\n        selectedIcon: ApproveSelectedIcon\n      };\n    case ReviewResult.REJECT:\n      return {\n        icon: RejectIcon,\n        selectedIcon: RejectSelectedIcon\n      };\n    case ReviewResult.SUSPEND:\n      return {\n        icon: SuspendIcon,\n        selectedIcon: SuspendSelectedIcon\n      };\n    default:\n  }\n  return {};\n}\nfunction getReviewResultSummary(reviews) {\n  const allResults = new Set(reviews.map(r => r.result));\n  if (allResults.has(ReviewResult.REJECT)) {\n    return ReviewResult.REJECT;\n  }\n  if (allResults.has(ReviewResult.SUSPEND)) {\n    return ReviewResult.SUSPEND;\n  }\n  if (allResults.has(ReviewResult.APPROVE)) {\n    return ReviewResult.APPROVE;\n  }\n  return undefined;\n}\n\n/**\n * store for reviews\n * @class\n */\nexport default class ReviewsStore {\n  /**\n   * review result types based on tool mode\n   * @getter\n   */\n  get reviewResultTypes() {\n    return this.rootStore.jobProxy.toolMode === TOOL_MODE.AUDIT ? [ReviewResult.APPROVE, ReviewResult.REJECT, ReviewResult.SUSPEND] : [ReviewResult.APPROVE, ReviewResult.REJECT];\n  }\n\n  /**\n   * all reviews\n   * @getter\n   */\n  get allReviews() {\n    return Object.values(this.reviews).flatMap(frameReviews => frameReviews);\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * issue types\n     */\n    this.issueTypes = [];\n    /**\n     * all reviews\n     */\n    this.reviews = {};\n    /**\n     * layer for reviews\n     */\n    this.reviewLayer = void 0;\n    /**\n     * review layer offset (according to document body)\n     */\n    this.reviewLayerOffset = {\n      x: SIDEBAR_WIDTH,\n      y: TOOLBAR_HEIGHT * 2\n    };\n    /**\n     * review anchors\n     */\n    this.anchors = {};\n    /**\n     * selected review id\n     */\n    this.selectedReviewId = '';\n    /**\n     * selected anchor\n     */\n    this.selectedAnchor = null;\n    /**\n     * selected review result type (default is approve)\n     */\n    this.selectedReviewResultType = ReviewResult.APPROVE;\n    /**\n     * is adding review anchor\n     */\n    this.addMode = false;\n    /**\n     * current editing review instance\n     */\n    this.editingReview = null;\n    /**\n     * current hovered review instance\n     */\n    this.hoveredReview = null;\n    /**\n     * hovered anchor\n     */\n    this.hoveredAnchor = null;\n    /**\n     * store id preserved before review edit\n     */\n    this.reviewStoreId = '';\n    /**\n     * hide or show reviews\n     */\n    this.hideOrShowReviews = () => {\n      const {\n        currentFrame\n      } = this.rootStore.frame;\n      if (!this.reviews[currentFrame]) {\n        return;\n      }\n      const {\n        hideOthers\n      } = this.rootStore.config;\n      const selectedInstanceIds = this.rootStore.instance.selectedInstances.map(i => i.id);\n      const shouldHide = hideOthers && selectedInstanceIds.length > 0;\n      this.reviews[currentFrame].forEach(review => {\n        const {\n          id,\n          instanceId\n        } = review;\n        const anchor = this.anchors[id];\n        if (anchor) {\n          if (shouldHide && !selectedInstanceIds.includes(instanceId || '')) {\n            this.anchors[id].anchor.visible = false;\n          } else {\n            this.anchors[id].anchor.visible = true;\n          }\n        }\n      });\n    };\n    makeAutoObservable(this, {\n      rootStore: false,\n      reviewLayer: false,\n      reviewLayerOffset: false,\n      anchors: false,\n      selectedReviewId: false,\n      selectedAnchor: false,\n      reviewStoreId: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   * @param initialReviews\n   */\n  init(payload, initialReviews) {\n    if (typeof payload.issue_types === 'string') {\n      this.issueTypes = payload.issue_types.split(',').map(i => i.trim()).filter(i => !!i);\n    }\n    if (initialReviews && Array.isArray(initialReviews)) {\n      const reviews = {};\n      initialReviews.forEach(review => {\n        const {\n          frameIndex\n        } = review;\n        if (!reviews[frameIndex]) {\n          reviews[frameIndex] = [];\n        }\n        const reviewItem = new ReviewItem(review);\n        reviews[frameIndex].push(reviewItem);\n      });\n      this.reviews = reviews;\n    }\n  }\n\n  /**\n   * get review in current frame by instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewForInstanceItem(instanceItem, camera = this.rootStore.frame.currentCamera, frameIndex = this.rootStore.frame.currentFrame) {\n    if (instanceItem) {\n      if (this.reviews[frameIndex]) {\n        const reviews = this.reviews[frameIndex].filter(r => r.camera === camera && r.instanceItemId === instanceItem.id);\n        return getReviewResultSummary(reviews);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * get total review result for instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewResultForInstanceItem(instanceItem, camera = this.rootStore.frame.currentCamera) {\n    const reviews = this.allReviews.filter(r => r.camera === camera && r.instanceItemId === instanceItem.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get total review result for instance\n   * @param instance\n   */\n  getReviewResultForInstance(instance) {\n    const reviews = this.allReviews.filter(r => r.instanceId === instance.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get instances json data (for save)\n   */\n  reviewsJSON() {\n    return Object.values(this.reviews).flatMap(reviews => reviews.map(r => r.toJSON()));\n  }\n\n  /**\n   * get review statistics\n   */\n  getReviewStatistics() {\n    const approvedFrameSet = new Set();\n    const rejectedFrameSet = new Set();\n    const rejectedElements = new Set();\n    const issueMap = {};\n    const approvedEleMap = {};\n    const rejectedEleMap = {};\n    const {\n      instances\n    } = this.rootStore.instance;\n    Object.values(this.reviews).forEach(reviews => {\n      reviews.forEach(review => {\n        const {\n          result,\n          type,\n          instanceId,\n          instanceItemId,\n          camera,\n          frameIndex\n        } = review;\n        if (result === ReviewResult.REJECT) {\n          // reject\n          let eleKey = '';\n          if (instanceId && instanceItemId) {\n            var _instances$instanceId, _instances$instanceId2, _instances$instanceId3;\n            if ((_instances$instanceId = instances[instanceId]) === null || _instances$instanceId === void 0 ? void 0 : (_instances$instanceId2 = _instances$instanceId.items[instanceItemId]) === null || _instances$instanceId2 === void 0 ? void 0 : (_instances$instanceId3 = _instances$instanceId2.cameras[camera]) === null || _instances$instanceId3 === void 0 ? void 0 : _instances$instanceId3.frames[frameIndex]) {\n              // shape exists\n              eleKey = `${instanceId}-${instanceItemId}-${camera}-${frameIndex}`;\n            }\n          }\n          rejectedFrameSet.add(frameIndex);\n          if (eleKey) {\n            rejectedElements.add(eleKey);\n          }\n          type === null || type === void 0 ? void 0 : type.forEach(t => {\n            if (!issueMap[t]) {\n              issueMap[t] = {\n                count: 0,\n                eleSet: new Set()\n              };\n            }\n            issueMap[t].count += 1;\n            if (eleKey) {\n              issueMap[t].eleSet.add(eleKey);\n            }\n          });\n        } else {\n          // approve, or suspend\n          approvedFrameSet.add(frameIndex);\n        }\n      });\n    });\n\n    // filter out rejected frames\n    new Set(approvedFrameSet).forEach(frame => {\n      if (rejectedFrameSet.has(frame)) {\n        approvedFrameSet.delete(frame);\n      }\n    });\n    const allInstances = Object.values(instances);\n    for (let i = 0; i < allInstances.length; i += 1) {\n      const instance = allInstances[i];\n      const items = Object.values(instance.items);\n      for (let j = 0; j < items.length; j += 1) {\n        const item = items[j];\n        const cameras = Object.values(item.cameras);\n        for (let k = 0; k < cameras.length; k += 1) {\n          const camera = cameras[k];\n          const frames = Object.values(camera.frames);\n          for (let l = 0; l < frames.length; l += 1) {\n            const frame = frames[l];\n            const shape = getToolTypeFromFrameData(frame);\n            if (shape) {\n              const {\n                frameIndex\n              } = frame;\n              const eleKey = `${instance.id}-${item.id}-${camera.camera}-${frameIndex}`;\n              if (rejectedElements.has(eleKey)) {\n                // shape rejected\n                if (!rejectedEleMap[shape]) {\n                  rejectedEleMap[shape] = 0;\n                }\n                rejectedEleMap[shape] += 1;\n              } else if (approvedFrameSet.has(frameIndex) || rejectedFrameSet.has(frameIndex)) {\n                // shape approved\n                // or not reviewed but in frames with review status\n                if (!approvedEleMap[shape]) {\n                  approvedEleMap[shape] = 0;\n                }\n                approvedEleMap[shape] += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n    return {\n      issues: Object.keys(issueMap).reduce((acc, curr) => {\n        const {\n          count,\n          eleSet\n        } = issueMap[curr];\n        acc[curr] = {\n          count,\n          elements: eleSet.size\n        };\n        return acc;\n      }, {}),\n      frames: {\n        approved: approvedFrameSet.size,\n        rejected: rejectedFrameSet.size\n      },\n      elements: {\n        approved: {\n          ...approvedEleMap\n        },\n        rejected: {\n          ...rejectedEleMap\n        }\n      }\n    };\n  }\n\n  /**\n   * set layer for review anchors\n   * @param layer\n   */\n  setReviewLayer(layer) {\n    this.reviewLayer = layer;\n  }\n\n  /**\n   * set layer offset\n   * @param x\n   * @param y\n   */\n  setReviewLayerOffset(x, y) {\n    this.reviewLayerOffset.x = x;\n    this.reviewLayerOffset.y = y;\n  }\n\n  /**\n   * setup anchors in current frame & current camera\n   */\n  setupReviewAnchors() {\n    this.clearAnchors();\n    const {\n      cameraViews,\n      currentFrame\n    } = this.rootStore.frame;\n    (this.reviews[currentFrame] || []).forEach(review => {\n      const {\n        id,\n        camera,\n        result,\n        x,\n        y\n      } = review;\n      if (!this.rootStore.isRework || result === ReviewResult.REJECT) {\n        // only show reject anchors when rework\n        const cameraView = cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.createReviewAnchor(result, x, y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.anchors[id] = {\n              anchor,\n              camera\n            };\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * create anchor instance\n   * @param type\n   * @param x\n   * @param y\n   * @param container\n   * @param viewScale\n   */\n  createReviewAnchor(type, x, y, container = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (container) {\n      const {\n        icon,\n        selectedIcon\n      } = getIconByReviewResultType(type);\n      if (icon && selectedIcon) {\n        const anchor = new Anchor({\n          container,\n          scale: viewScale,\n          x,\n          y,\n          img: icon,\n          selectedImg: selectedIcon\n        });\n        this.addAnchorListeners(anchor);\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * get review instance by anchor instance\n   * @param anchor\n   */\n  getReviewByAnchor(anchor) {\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      const reviewId = Object.keys(this.anchors).find(id => this.anchors[id].anchor === anchor);\n      if (reviewId) {\n        return this.reviews[this.rootStore.frame.currentFrame].find(r => r.id === reviewId);\n      }\n    } else if (this.rootStore.config.viewMode === ViewMode.GRID) {\n      return anchor.data;\n    }\n    return undefined;\n  }\n\n  /**\n   * add listeners for anchor\n   * @param anchor\n   */\n  addAnchorListeners(anchor) {\n    anchor.on(EventAction.SELECTED, a => {\n      if (this.addMode) {\n        return;\n      }\n      const review = this.getReviewByAnchor(a);\n      if (review) {\n        this.selectReview(review, a);\n\n        // select related instance\n        let instance;\n        let instanceItem;\n        if (review.instanceId) {\n          instance = this.rootStore.instance.getInstanceById(review.instanceId);\n          if (instance && review.instanceItemId) {\n            instanceItem = instance.items[review.instanceItemId];\n          }\n        }\n        if (instanceItem) {\n          this.rootStore.instance.selectInstanceItem(instanceItem);\n        } else if (instance) {\n          this.rootStore.instance.selectInstance(instance);\n        }\n\n        // open modal in review mode\n        if (this.rootStore.config.reviewMode === ReviewMode.REVIEW) {\n          this.reviewStoreId = this.rootStore.undo.preserve({\n            reviews: [review.toJSON()]\n          });\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OVER, a => {\n      if (this.rootStore.config.reviewMode === ReviewMode.LABELING) {\n        // only show comment in labeling mode\n        const review = this.getReviewByAnchor(a);\n        if (review) {\n          this.setHoveredReview(review, a);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OUT, () => {\n      this.setHoveredReview(null, null);\n    });\n  }\n\n  /**\n   * set editing review\n   * @param review\n   */\n  setEditingReview(review) {\n    this.editingReview = review;\n  }\n\n  /**\n   * set hovered review\n   * @param review\n   */\n  setHoveredReview(review, anchor) {\n    this.hoveredReview = review;\n    this.hoveredAnchor = anchor;\n  }\n\n  /**\n   * select review\n   * @param review\n   * @param anchor\n   */\n  selectReview(review, anchor) {\n    if (review.camera !== this.rootStore.frame.currentCamera) {\n      this.rootStore.frame.setCamera(review.camera);\n    }\n    if (this.selectedAnchor && this.selectedAnchor !== anchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = review.id;\n    this.selectedAnchor = anchor;\n    this.selectedAnchor.selected = true;\n  }\n\n  /**\n   * unselect review\n   */\n  unselectReview() {\n    if (this.selectedAnchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n  }\n\n  /**\n   * clear all anchors\n   */\n  clearAnchors() {\n    Object.values(this.anchors).forEach(({\n      anchor\n    }) => {\n      anchor.destroy();\n    });\n    this.anchors = {};\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n    this.setEditingReview(null);\n    this.setHoveredReview(null, null);\n    this.reviewStoreId = '';\n  }\n\n  /**\n   * get anchors for camera\n   * @param camera\n   */\n  getAnchorsForCamera(camera = this.rootStore.frame.currentCamera) {\n    return Object.values(this.anchors).filter(i => i.camera === camera);\n  }\n\n  /**\n   * update anchors' scale\n   * @param scale\n   * @param camera\n   */\n  updateAnchorsScale(scale, camera) {\n    this.getAnchorsForCamera(camera).forEach(({\n      anchor\n    }) => {\n      anchor.setScale(scale);\n    });\n  }\n\n  /**\n   * update anchors' interactive\n   * @param interactive\n   */\n  updateAnchorsInteractive(interactive) {\n    Object.values(this.anchors).forEach(({\n      anchor\n    }) => {\n      anchor.interactive = interactive;\n    });\n  }\n  /**\n   * activate review tool\n   * @param type\n   */\n  activateReview(type) {\n    this.selectedReviewResultType = type;\n    this.setAddMode(true);\n  }\n\n  /**\n   * activate review tool by hotkey\n   * @param hotkey\n   */\n  activateReviewByHotkey(hotkey) {\n    if (hotkey === 1) {\n      // approve\n      this.activateReview(ReviewResult.APPROVE);\n    } else if (hotkey === 2) {\n      // reject\n      this.activateReview(ReviewResult.REJECT);\n    } else if (hotkey === 3) {\n      // suspend\n      this.activateReview(ReviewResult.SUSPEND);\n    }\n  }\n\n  /**\n   * set review add mode\n   * @param addMode\n   */\n  setAddMode(addMode) {\n    this.addMode = addMode;\n    this.rootStore.config.cursor = addMode ? Cursor.POINTER : Cursor.DEFAULT;\n    this.updateAnchorsInteractive(!addMode);\n  }\n\n  /**\n   * add review when click canvas\n   * @param point\n   * @param layer\n   * @param viewScale\n   */\n  addReview(point, layer = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (this.addMode) {\n      let instanceId;\n      let instanceItemId;\n      const {\n        isSingleSelected,\n        selectedInstances,\n        selectedInstanceItems\n      } = this.rootStore.instance;\n      if (isSingleSelected) {\n        // link to the shape\n        instanceItemId = selectedInstanceItems[0].id;\n        instanceId = selectedInstances[0].id;\n      }\n      const anchor = this.createReviewAnchor(this.selectedReviewResultType, point.x, point.y, layer, viewScale);\n      if (anchor) {\n        const {\n          currentCamera,\n          currentFrame\n        } = this.rootStore.frame;\n        const review = new ReviewItem({\n          camera: currentCamera,\n          frameIndex: currentFrame,\n          result: this.selectedReviewResultType,\n          instanceId,\n          instanceItemId,\n          position: {\n            x: point.x,\n            y: point.y\n          }\n        });\n        if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n          this.anchors[review.id] = {\n            anchor,\n            camera: currentCamera\n          };\n        } else {\n          anchor.data = review;\n        }\n        this.selectReview(review, anchor);\n        if (!this.rootStore.config.continuousMode) {\n          this.setAddMode(false);\n        } else {\n          anchor.interactive = false;\n        }\n        if (review.result === ReviewResult.REJECT) {\n          // open modal\n          this.reviewStoreId = this.rootStore.undo.preserve();\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        } else {\n          // save directly\n          this.insertReview(review);\n          this.unselectReview();\n        }\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * insert review\n   * @param review\n   */\n  insertReview(review) {\n    const storeId = this.rootStore.undo.preserve();\n    const {\n      frameIndex\n    } = review;\n    if (!this.reviews[frameIndex]) {\n      this.reviews[frameIndex] = [];\n    }\n    this.reviews[frameIndex].push(review);\n    this.rootStore.undo.save(storeId, {\n      reviews: [review.toJSON()]\n    });\n  }\n\n  /**\n   * update review\n   * @param review\n   */\n  updateReview(review) {\n    if (this.reviewStoreId) {\n      const {\n        frameIndex\n      } = review;\n      if (!this.reviews[frameIndex]) {\n        this.reviews[frameIndex] = [];\n      }\n      if (this.reviews[frameIndex].indexOf(review) < 0) {\n        this.reviews[frameIndex].push(review);\n      }\n      this.rootStore.undo.save(this.reviewStoreId, {\n        reviews: [review.toJSON()]\n      });\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete review\n   * @param review\n   * @param anchor\n   */\n  deleteReview(review, anchor) {\n    const {\n      id,\n      frameIndex\n    } = review;\n    const frameReviews = this.reviews[frameIndex] || [];\n    const index = frameReviews.findIndex(r => r.id === id);\n    let existed = false;\n    if (index >= 0) {\n      existed = true;\n      frameReviews.splice(index, 1);\n    }\n    anchor.destroy();\n    if (this.anchors[id]) {\n      delete this.anchors[id];\n    }\n    if (existed && this.reviewStoreId) {\n      this.rootStore.undo.save(this.reviewStoreId);\n      this.reviewStoreId = '';\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewResult(review, result, anchor) {\n    if (review.result !== result) {\n      review.result = result;\n      if (result === ReviewResult.APPROVE) {\n        review.type = [];\n        review.comment = '';\n      }\n      // update anchor\n      const {\n        icon,\n        selectedIcon\n      } = getIconByReviewResultType(result);\n      if (icon && selectedIcon) {\n        anchor.setImage(icon, selectedIcon);\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewInfo(review, {\n    type,\n    comment,\n    x,\n    y\n  }) {\n    if (type !== undefined) {\n      review.type = [...type];\n    }\n    if (comment !== undefined) {\n      review.comment = comment;\n    }\n    if (x !== undefined) {\n      review.x = x;\n    }\n    if (y !== undefined) {\n      review.y = y;\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","ReviewItem","ReviewMode","ReviewResult","ViewMode","TOOLBAR_HEIGHT","SIDEBAR_WIDTH","getToolTypeFromFrameData","TOOL_MODE","Anchor","EventAction","Cursor","ApproveIcon","RejectIcon","SuspendIcon","ApproveSelectedIcon","RejectSelectedIcon","SuspendSelectedIcon","getIconByReviewResultType","type","APPROVE","icon","selectedIcon","REJECT","SUSPEND","getReviewResultSummary","reviews","allResults","Set","map","r","result","has","undefined","ReviewsStore","reviewResultTypes","rootStore","jobProxy","toolMode","AUDIT","allReviews","Object","values","flatMap","frameReviews","constructor","issueTypes","reviewLayer","reviewLayerOffset","x","y","anchors","selectedReviewId","selectedAnchor","selectedReviewResultType","addMode","editingReview","hoveredReview","hoveredAnchor","reviewStoreId","hideOrShowReviews","currentFrame","frame","hideOthers","config","selectedInstanceIds","instance","selectedInstances","i","id","shouldHide","length","forEach","review","instanceId","anchor","includes","visible","autoBind","init","payload","initialReviews","issue_types","split","trim","filter","Array","isArray","frameIndex","reviewItem","push","getReviewForInstanceItem","instanceItem","camera","currentCamera","instanceItemId","getReviewResultForInstanceItem","getReviewResultForInstance","reviewsJSON","toJSON","getReviewStatistics","approvedFrameSet","rejectedFrameSet","rejectedElements","issueMap","approvedEleMap","rejectedEleMap","instances","eleKey","_instances$instanceId","_instances$instanceId2","_instances$instanceId3","items","cameras","frames","add","t","count","eleSet","delete","allInstances","j","item","k","l","shape","issues","keys","reduce","acc","curr","elements","size","approved","rejected","setReviewLayer","layer","setReviewLayerOffset","setupReviewAnchors","clearAnchors","cameraViews","isRework","cameraView","createReviewAnchor","viewScale","container","scale","img","selectedImg","addAnchorListeners","getReviewByAnchor","viewMode","DEFAULT","reviewId","find","GRID","data","on","SELECTED","a","selectReview","getInstanceById","selectInstanceItem","selectInstance","reviewMode","REVIEW","undo","preserve","setEditingReview","setReviewModalVisible","POINTER_OVER","LABELING","setHoveredReview","POINTER_OUT","setCamera","selected","unselectReview","destroy","getAnchorsForCamera","updateAnchorsScale","setScale","updateAnchorsInteractive","interactive","activateReview","setAddMode","activateReviewByHotkey","hotkey","cursor","POINTER","addReview","point","isSingleSelected","selectedInstanceItems","position","continuousMode","insertReview","storeId","save","updateReview","indexOf","deleteReview","index","findIndex","existed","splice","updateReviewResult","comment","setImage","updateReviewInfo"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/ReviewStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { Container, Point } from 'pixi.js';\nimport RootStore from './RootStore';\nimport ReviewItem from '../model/ReviewItem';\nimport Instance from '../model/Instance';\nimport InstanceItem from '../model/InstanceItem';\nimport { Payload, Review, ReviewMode, ReviewResult, ViewMode } from '../types';\nimport { TOOLBAR_HEIGHT, SIDEBAR_WIDTH } from '../constants';\nimport { getToolTypeFromFrameData } from '../utils';\nimport { TOOL_MODE } from '../../../utils/tool-mode';\nimport Anchor, { EventAction } from '../../common/shapes/anchors/Anchor';\nimport Cursor from '../../common/Cursor';\nimport ApproveIcon from '../images/approve.png';\nimport RejectIcon from '../images/reject.png';\nimport SuspendIcon from '../images/suspend.png';\nimport ApproveSelectedIcon from '../images/approve_selected.png';\nimport RejectSelectedIcon from '../images/reject_selected.png';\nimport SuspendSelectedIcon from '../images/suspend_selected.png';\n\nfunction getIconByReviewResultType(type: ReviewResult) {\n  switch (type) {\n    case ReviewResult.APPROVE:\n      return { icon: ApproveIcon, selectedIcon: ApproveSelectedIcon };\n    case ReviewResult.REJECT:\n      return { icon: RejectIcon, selectedIcon: RejectSelectedIcon };\n    case ReviewResult.SUSPEND:\n      return { icon: SuspendIcon, selectedIcon: SuspendSelectedIcon };\n    default:\n  }\n  return {};\n}\n\nfunction getReviewResultSummary(reviews: ReviewItem[]) {\n  const allResults = new Set(reviews.map((r) => r.result));\n  if (allResults.has(ReviewResult.REJECT)) {\n    return ReviewResult.REJECT;\n  }\n  if (allResults.has(ReviewResult.SUSPEND)) {\n    return ReviewResult.SUSPEND;\n  }\n  if (allResults.has(ReviewResult.APPROVE)) {\n    return ReviewResult.APPROVE;\n  }\n  return undefined;\n}\n\n/**\n * store for reviews\n * @class\n */\nexport default class ReviewsStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * issue types\n   */\n  issueTypes: string[] = [];\n\n  /**\n   * all reviews\n   */\n  reviews: { [frameIndex: number]: ReviewItem[] } = {};\n\n  /**\n   * layer for reviews\n   */\n  reviewLayer?: Container;\n\n  /**\n   * review layer offset (according to document body)\n   */\n  reviewLayerOffset = { x: SIDEBAR_WIDTH, y: TOOLBAR_HEIGHT * 2 };\n\n  /**\n   * review anchors\n   */\n  anchors: {\n    [reviewId: string]: {\n      anchor: Anchor;\n      camera: string;\n    };\n  } = {};\n\n  /**\n   * selected review id\n   */\n  selectedReviewId = '';\n\n  /**\n   * selected anchor\n   */\n  selectedAnchor: Anchor | null = null;\n\n  /**\n   * selected review result type (default is approve)\n   */\n  selectedReviewResultType: ReviewResult = ReviewResult.APPROVE;\n\n  /**\n   * is adding review anchor\n   */\n  addMode = false;\n\n  /**\n   * current editing review instance\n   */\n  editingReview: ReviewItem | null = null;\n\n  /**\n   * current hovered review instance\n   */\n  hoveredReview: ReviewItem | null = null;\n\n  /**\n   * hovered anchor\n   */\n  hoveredAnchor: Anchor | null = null;\n\n  /**\n   * store id preserved before review edit\n   */\n  reviewStoreId = '';\n\n  /**\n   * review result types based on tool mode\n   * @getter\n   */\n  get reviewResultTypes() {\n    return this.rootStore.jobProxy!.toolMode === TOOL_MODE.AUDIT ? [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n      ReviewResult.SUSPEND,\n    ] : [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n    ];\n  }\n\n  /**\n   * all reviews\n   * @getter\n   */\n  get allReviews() {\n    return Object.values(this.reviews).flatMap((frameReviews) => frameReviews);\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      reviewLayer: false,\n      reviewLayerOffset: false,\n      anchors: false,\n      selectedReviewId: false,\n      selectedAnchor: false,\n      reviewStoreId: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   * @param initialReviews\n   */\n  init(payload: Payload, initialReviews?: Review[]) {\n    if (typeof payload.issue_types === 'string') {\n      this.issueTypes = payload.issue_types.split(',').map((i) => i.trim()).filter((i) => !!i);\n    }\n    if (initialReviews && Array.isArray(initialReviews)) {\n      const reviews: { [frameIndex: number]: ReviewItem[] } = {};\n      initialReviews.forEach((review) => {\n        const { frameIndex } = review;\n        if (!reviews[frameIndex]) {\n          reviews[frameIndex] = [];\n        }\n        const reviewItem = new ReviewItem(review);\n        reviews[frameIndex].push(reviewItem);\n      });\n      this.reviews = reviews;\n    }\n  }\n\n  /**\n   * get review in current frame by instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewForInstanceItem(\n    instanceItem?: InstanceItem | null,\n    camera = this.rootStore.frame.currentCamera,\n    frameIndex = this.rootStore.frame.currentFrame,\n  ) {\n    if (instanceItem) {\n      if (this.reviews[frameIndex]) {\n        const reviews = this.reviews[frameIndex].filter((r) => r.camera === camera && r.instanceItemId === instanceItem.id);\n        return getReviewResultSummary(reviews);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * get total review result for instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewResultForInstanceItem(\n    instanceItem: InstanceItem,\n    camera = this.rootStore.frame.currentCamera,\n  ) {\n    const reviews = this.allReviews.filter((r) => r.camera === camera && r.instanceItemId === instanceItem.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get total review result for instance\n   * @param instance\n   */\n  getReviewResultForInstance(instance: Instance) {\n    const reviews = this.allReviews.filter((r) => r.instanceId === instance.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get instances json data (for save)\n   */\n  reviewsJSON() {\n    return Object.values(this.reviews).flatMap((reviews) => reviews.map((r) => r.toJSON()));\n  }\n\n  /**\n   * get review statistics\n   */\n  getReviewStatistics() {\n    const approvedFrameSet = new Set<number>();\n    const rejectedFrameSet = new Set<number>();\n    const rejectedElements = new Set<string>();\n    const issueMap: {\n      [type: string]: {\n        count: number;\n        eleSet: Set<string>;\n      }\n    } = {};\n    const approvedEleMap: {\n      [type: string]: number;\n    } = {};\n    const rejectedEleMap: {\n      [type: string]: number;\n    } = {};\n\n    const { instances } = this.rootStore.instance;\n    Object.values(this.reviews).forEach((reviews) => {\n      reviews.forEach((review) => {\n        const { result, type, instanceId, instanceItemId, camera, frameIndex } = review;\n        if (result === ReviewResult.REJECT) {\n          // reject\n          let eleKey = '';\n          if (instanceId && instanceItemId) {\n            if (instances[instanceId]?.items[instanceItemId]?.cameras[camera]?.frames[frameIndex]) {\n              // shape exists\n              eleKey = `${instanceId}-${instanceItemId}-${camera}-${frameIndex}`;\n            }\n          }\n          rejectedFrameSet.add(frameIndex);\n          if (eleKey) {\n            rejectedElements.add(eleKey);\n          }\n          type?.forEach((t) => {\n            if (!issueMap[t]) {\n              issueMap[t] = {\n                count: 0,\n                eleSet: new Set(),\n              };\n            }\n            issueMap[t].count += 1;\n            if (eleKey) {\n              issueMap[t].eleSet.add(eleKey);\n            }\n          });\n        } else {\n          // approve, or suspend\n          approvedFrameSet.add(frameIndex);\n        }\n      });\n    });\n\n    // filter out rejected frames\n    new Set(approvedFrameSet).forEach((frame) => {\n      if (rejectedFrameSet.has(frame)) {\n        approvedFrameSet.delete(frame);\n      }\n    });\n\n    const allInstances = Object.values(instances);\n    for (let i = 0; i < allInstances.length; i += 1) {\n      const instance = allInstances[i];\n      const items = Object.values(instance.items);\n      for (let j = 0; j < items.length; j += 1) {\n        const item = items[j];\n        const cameras = Object.values(item.cameras);\n        for (let k = 0; k < cameras.length; k += 1) {\n          const camera = cameras[k];\n          const frames = Object.values(camera.frames);\n          for (let l = 0; l < frames.length; l += 1) {\n            const frame = frames[l];\n            const shape = getToolTypeFromFrameData(frame);\n            if (shape) {\n              const { frameIndex } = frame;\n              const eleKey = `${instance.id}-${item.id}-${camera.camera}-${frameIndex}`;\n              if (rejectedElements.has(eleKey)) {\n                // shape rejected\n                if (!rejectedEleMap[shape]) {\n                  rejectedEleMap[shape] = 0;\n                }\n                rejectedEleMap[shape] += 1;\n              } else if (approvedFrameSet.has(frameIndex) || rejectedFrameSet.has(frameIndex)) {\n                // shape approved\n                // or not reviewed but in frames with review status\n                if (!approvedEleMap[shape]) {\n                  approvedEleMap[shape] = 0;\n                }\n                approvedEleMap[shape] += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      issues: Object.keys(issueMap).reduce((acc, curr) => {\n        const { count, eleSet } = issueMap[curr];\n        acc[curr] = {\n          count,\n          elements: eleSet.size,\n        };\n        return acc;\n      }, {} as {[type: string]: { count: number; elements: number }}),\n      frames: {\n        approved: approvedFrameSet.size,\n        rejected: rejectedFrameSet.size,\n      },\n      elements: {\n        approved: { ...approvedEleMap },\n        rejected: { ...rejectedEleMap },\n      },\n    };\n  }\n\n  /**\n   * set layer for review anchors\n   * @param layer\n   */\n  setReviewLayer(layer: Container) {\n    this.reviewLayer = layer;\n  }\n\n  /**\n   * set layer offset\n   * @param x\n   * @param y\n   */\n  setReviewLayerOffset(x: number, y: number) {\n    this.reviewLayerOffset.x = x;\n    this.reviewLayerOffset.y = y;\n  }\n\n  /**\n   * setup anchors in current frame & current camera\n   */\n  setupReviewAnchors() {\n    this.clearAnchors();\n    const { cameraViews, currentFrame } = this.rootStore.frame;\n    (this.reviews[currentFrame] || []).forEach((review) => {\n      const { id, camera, result, x, y } = review;\n      if (!this.rootStore.isRework || result === ReviewResult.REJECT) {\n        // only show reject anchors when rework\n        const cameraView = cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.createReviewAnchor(result, x, y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.anchors[id] = {\n              anchor,\n              camera,\n            };\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * create anchor instance\n   * @param type\n   * @param x\n   * @param y\n   * @param container\n   * @param viewScale\n   */\n  createReviewAnchor(type: ReviewResult, x: number, y: number, container = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (container) {\n      const { icon, selectedIcon } = getIconByReviewResultType(type);\n      if (icon && selectedIcon) {\n        const anchor = new Anchor({\n          container,\n          scale: viewScale,\n          x,\n          y,\n          img: icon,\n          selectedImg: selectedIcon,\n        });\n        this.addAnchorListeners(anchor);\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * get review instance by anchor instance\n   * @param anchor\n   */\n  getReviewByAnchor(anchor: Anchor) {\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      const reviewId = Object.keys(this.anchors).find((id) => this.anchors[id].anchor === anchor);\n      if (reviewId) {\n        return this.reviews[this.rootStore.frame.currentFrame].find((r) => r.id === reviewId);\n      }\n    } else if (this.rootStore.config.viewMode === ViewMode.GRID) {\n      return anchor.data;\n    }\n    return undefined;\n  }\n\n  /**\n   * add listeners for anchor\n   * @param anchor\n   */\n  addAnchorListeners(anchor: Anchor) {\n    anchor.on(EventAction.SELECTED, (a) => {\n      if (this.addMode) {\n        return;\n      }\n      const review = this.getReviewByAnchor(a);\n      if (review) {\n        this.selectReview(review, a);\n\n        // select related instance\n        let instance;\n        let instanceItem;\n        if (review.instanceId) {\n          instance = this.rootStore.instance.getInstanceById(review.instanceId);\n          if (instance && review.instanceItemId) {\n            instanceItem = instance.items[review.instanceItemId];\n          }\n        }\n        if (instanceItem) {\n          this.rootStore.instance.selectInstanceItem(instanceItem);\n        } else if (instance) {\n          this.rootStore.instance.selectInstance(instance);\n        }\n\n        // open modal in review mode\n        if (this.rootStore.config.reviewMode === ReviewMode.REVIEW) {\n          this.reviewStoreId = this.rootStore.undo.preserve({ reviews: [review.toJSON()] });\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OVER, (a) => {\n      if (this.rootStore.config.reviewMode === ReviewMode.LABELING) { // only show comment in labeling mode\n        const review = this.getReviewByAnchor(a);\n        if (review) {\n          this.setHoveredReview(review, a);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OUT, () => {\n      this.setHoveredReview(null, null);\n    });\n  }\n\n  /**\n   * set editing review\n   * @param review\n   */\n  setEditingReview(review: ReviewItem | null) {\n    this.editingReview = review;\n  }\n\n  /**\n   * set hovered review\n   * @param review\n   */\n  setHoveredReview(review: ReviewItem | null, anchor: Anchor | null) {\n    this.hoveredReview = review;\n    this.hoveredAnchor = anchor;\n  }\n\n  /**\n   * select review\n   * @param review\n   * @param anchor\n   */\n  selectReview(review: ReviewItem, anchor: Anchor) {\n    if (review.camera !== this.rootStore.frame.currentCamera) {\n      this.rootStore.frame.setCamera(review.camera);\n    }\n    if (this.selectedAnchor && this.selectedAnchor !== anchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = review.id;\n    this.selectedAnchor = anchor;\n    this.selectedAnchor.selected = true;\n  }\n\n  /**\n   * unselect review\n   */\n  unselectReview() {\n    if (this.selectedAnchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n  }\n\n  /**\n   * clear all anchors\n   */\n  clearAnchors() {\n    Object.values(this.anchors).forEach(({ anchor }) => {\n      anchor.destroy();\n    });\n    this.anchors = {};\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n    this.setEditingReview(null);\n    this.setHoveredReview(null, null);\n    this.reviewStoreId = '';\n  }\n\n  /**\n   * get anchors for camera\n   * @param camera\n   */\n  getAnchorsForCamera(camera = this.rootStore.frame.currentCamera) {\n    return Object.values(this.anchors).filter((i) => i.camera === camera);\n  }\n\n  /**\n   * update anchors' scale\n   * @param scale\n   * @param camera\n   */\n  updateAnchorsScale(scale: number, camera: string) {\n    this.getAnchorsForCamera(camera).forEach(({ anchor }) => {\n      anchor.setScale(scale);\n    });\n  }\n\n  /**\n   * update anchors' interactive\n   * @param interactive\n   */\n  updateAnchorsInteractive(interactive: boolean) {\n    Object.values(this.anchors).forEach(({ anchor }) => {\n      anchor.interactive = interactive;\n    });\n  };\n\n  /**\n   * activate review tool\n   * @param type\n   */\n  activateReview(type: ReviewResult) {\n    this.selectedReviewResultType = type;\n    this.setAddMode(true);\n  }\n\n  /**\n   * activate review tool by hotkey\n   * @param hotkey\n   */\n  activateReviewByHotkey(hotkey: number) {\n    if (hotkey === 1) {\n      // approve\n      this.activateReview(ReviewResult.APPROVE);\n    } else if (hotkey === 2) {\n      // reject\n      this.activateReview(ReviewResult.REJECT);\n    } else if (hotkey === 3) {\n      // suspend\n      this.activateReview(ReviewResult.SUSPEND);\n    }\n  }\n\n  /**\n   * set review add mode\n   * @param addMode\n   */\n  setAddMode(addMode: boolean) {\n    this.addMode = addMode;\n    this.rootStore.config.cursor = addMode ? Cursor.POINTER : Cursor.DEFAULT;\n    this.updateAnchorsInteractive(!addMode);\n  }\n\n  /**\n   * add review when click canvas\n   * @param point\n   * @param layer\n   * @param viewScale\n   */\n  addReview(point: Point, layer = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (this.addMode) {\n      let instanceId;\n      let instanceItemId;\n      const { isSingleSelected, selectedInstances, selectedInstanceItems } = this.rootStore.instance;\n      if (isSingleSelected) {\n        // link to the shape\n        instanceItemId = selectedInstanceItems[0].id;\n        instanceId = selectedInstances[0].id;\n      }\n      const anchor = this.createReviewAnchor(this.selectedReviewResultType, point.x, point.y, layer, viewScale);\n      if (anchor) {\n        const { currentCamera, currentFrame } = this.rootStore.frame;\n        const review = new ReviewItem({\n          camera: currentCamera,\n          frameIndex: currentFrame,\n          result: this.selectedReviewResultType,\n          instanceId,\n          instanceItemId,\n          position: { x: point.x, y: point.y },\n        });\n        if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n          this.anchors[review.id] = {\n            anchor,\n            camera: currentCamera,\n          };\n        } else {\n          anchor.data = review;\n        }\n        this.selectReview(review, anchor);\n        if (!this.rootStore.config.continuousMode) {\n          this.setAddMode(false);\n        } else {\n          anchor.interactive = false;\n        }\n        if (review.result === ReviewResult.REJECT) {\n          // open modal\n          this.reviewStoreId = this.rootStore.undo.preserve();\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        } else {\n          // save directly\n          this.insertReview(review);\n          this.unselectReview();\n        }\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * insert review\n   * @param review\n   */\n  insertReview(review: ReviewItem) {\n    const storeId = this.rootStore.undo.preserve();\n    const { frameIndex } = review;\n    if (!this.reviews[frameIndex]) {\n      this.reviews[frameIndex] = [];\n    }\n    this.reviews[frameIndex].push(review);\n    this.rootStore.undo.save(storeId, { reviews: [review.toJSON()] });\n  }\n\n  /**\n   * update review\n   * @param review\n   */\n  updateReview(review: ReviewItem) {\n    if (this.reviewStoreId) {\n      const { frameIndex } = review;\n      if (!this.reviews[frameIndex]) {\n        this.reviews[frameIndex] = [];\n      }\n      if (this.reviews[frameIndex].indexOf(review) < 0) {\n        this.reviews[frameIndex].push(review);\n      }\n      this.rootStore.undo.save(this.reviewStoreId, { reviews: [review.toJSON()] });\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete review\n   * @param review\n   * @param anchor\n   */\n  deleteReview(review: ReviewItem, anchor: Anchor) {\n    const { id, frameIndex } = review;\n    const frameReviews = this.reviews[frameIndex] || [];\n    const index = frameReviews.findIndex((r) => r.id === id);\n    let existed = false;\n    if (index >= 0) {\n      existed = true;\n      frameReviews.splice(index, 1);\n    }\n    anchor.destroy();\n    if (this.anchors[id]) {\n      delete this.anchors[id];\n    }\n    if (existed && this.reviewStoreId) {\n      this.rootStore.undo.save(this.reviewStoreId);\n      this.reviewStoreId = '';\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewResult(review: ReviewItem, result: ReviewResult, anchor: Anchor) {\n    if (review.result !== result) {\n      review.result = result;\n      if (result === ReviewResult.APPROVE) {\n        review.type = [];\n        review.comment = '';\n      }\n      // update anchor\n      const { icon, selectedIcon } = getIconByReviewResultType(result);\n      if (icon && selectedIcon) {\n        anchor.setImage(icon, selectedIcon);\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewInfo(review: ReviewItem, { type, comment, x, y }: { type?: string[], comment?: string, x?: number, y?: number }) {\n    if (type !== undefined) {\n      review.type = [...type];\n    }\n    if (comment !== undefined) {\n      review.comment = comment;\n    }\n    if (x !== undefined) {\n      review.x = x;\n    }\n    if (y !== undefined) {\n      review.y = y;\n    }\n  }\n\n  /**\n   * hide or show reviews\n   */\n  hideOrShowReviews = () => {\n    const { currentFrame } = this.rootStore.frame;\n    if (!this.reviews[currentFrame]) {\n      return;\n    }\n\n    const { hideOthers } = this.rootStore.config;\n    const selectedInstanceIds = this.rootStore.instance.selectedInstances.map((i) => i.id);\n    const shouldHide = hideOthers && selectedInstanceIds.length > 0;\n\n    this.reviews[currentFrame].forEach((review) => {\n      const { id, instanceId } = review;\n      const anchor = this.anchors[id];\n      if (anchor) {\n        if (shouldHide && !selectedInstanceIds.includes(instanceId || '')) {\n          this.anchors[id].anchor.visible = false;\n        } else {\n          this.anchors[id].anchor.visible = true;\n        }\n      }\n    });\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}