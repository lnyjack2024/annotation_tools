{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/index.tsx\";\nimport React from 'react';\nimport { makeObservable, toJS } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { Modal, notification } from 'antd';\nimport LayoutWrapper from '../common/layout/LayoutWrapper';\nimport AutoSaver from '../common/AutoSaver';\nimport Toolbar from './components/Toolbar';\nimport TabMenu from '../common/tabs-menu/TabMenu';\nimport Sidebar from './components/Sidebar';\nimport Validator from './components/Validator';\nimport Channels from './components/Channels';\nimport InstanceLabel from './components/InstanceLabel';\nimport Attributes from './components/Attributes';\nimport Review from './components/Review';\nimport InfoPanel from './components/InfoPanel';\nimport bindKeyboardEvents from './keyboard-events';\nimport i18n from './locales';\nimport { UpdateType, ReviewResult, ValidationType } from './types';\nimport { OverlapMode, SegmentMode } from './components/Wave/types';\nimport store from './store/RootStore';\nimport { validate, verifyCurrentForm, verifyForm, loadInstancesFromResult, verifyChannelForm } from './utils';\nimport { getWords, minDistance } from '../../utils';\nimport advanceJob, { AdvanceMessage } from '../../libs/advanceJob';\nimport DragResizeControl from './components/DragResizeControl';\nimport './index.scss';\nconst EXTRA_HEIGHT = [36,\n// toolbar\n21,\n// timeline\n29,\n// scroll\n48 // controls\n].reduce((t, a) => t + a, 0);\nexport class MultiChannel extends React.Component {\n  constructor(props) {\n    super(props);\n    /**\n     * auto saver reference\n     */\n    this.saverRef = React.createRef();\n    /**\n     * channels reference\n     */\n    this.channelsRef = React.createRef();\n    this.dragResizeControl = void 0;\n    this.store = store;\n    /**\n     * keyboard events\n     */\n    this.removeKeyboardEvents = () => {};\n    /**\n     * trigger validation, return passed or not\n     */\n    this.triggerValidation = async () => {\n      if (store.global.annotateDisabled) return true;\n      const {\n        results,\n        hasCustomError\n      } = await this.getScriptResult();\n      const {\n        emptys,\n        durations,\n        hasAttrError\n      } = this.segmentAttrValidation();\n      const {\n        emptyChannelAttrs,\n        hasChannelAttrError\n      } = this.channelAttrValidation();\n      const {\n        overlaps,\n        hasOverlapError\n      } = this.overlapValidation();\n      const {\n        globals,\n        hasGlobalError\n      } = this.globalValidation();\n      const hasError = hasCustomError || hasAttrError || hasOverlapError || hasGlobalError || hasChannelAttrError;\n      const errors = [...overlaps, ...emptys, ...durations, ...results, ...globals, ...emptyChannelAttrs];\n      store.review.setScriptResult({\n        results: errors,\n        hasCustomError\n      });\n      return !hasError && errors.length <= 0;\n    };\n    this.globalValidation = () => {\n      const result = {\n        globals: [],\n        hasGlobalError: false\n      };\n      const globalVerify = verifyForm(store.global.globalConfig, store.global.attributes);\n      if (!globalVerify.result) {\n        result.hasGlobalError = true;\n        result.globals.push({\n          warningType: ValidationType.GLOBAL_ERROR,\n          id: '',\n          message: i18n.translate('VALIDATION_TYPE_ATTR_EMPTY'),\n          frames: [],\n          blockSubmit: true\n        });\n      }\n      return result;\n    };\n    this.overlapValidation = () => {\n      const {\n        waveform: {\n          channelCount\n        },\n        instance: {\n          instances\n        }\n      } = store;\n      const result = {\n        overlaps: [],\n        hasOverlapError: false\n      };\n      if (store.waveform.segmentMode === SegmentMode.CONTINUOUS) return result;\n      const createError = (channelIndex, id) => {\n        result.hasOverlapError = true;\n        const categoryInstances = store.instance.channelInstancesMap[channelIndex];\n        const index = categoryInstances.findIndex(instance => instance.id === id);\n        result.overlaps.push({\n          warningType: ValidationType.OVERLAP,\n          id,\n          message: i18n.translate('ERROR_OVERLAP', {\n            values: {\n              channelIndex: channelIndex + 1,\n              index: index + 1\n            }\n          }),\n          frames: [],\n          blockSubmit: true\n        });\n      };\n      const newInstances = Object.values(toJS(instances)).sort((a, b) => a.start - b.start);\n      if (store.waveform.segmentOverlap === OverlapMode.DISABLED_CHANNEL_OVERLAP) {\n        for (let i = 0; i < channelCount; i += 1) {\n          let prev;\n          newInstances.filter(current => current.channelIndex === i).forEach(current => {\n            if (prev && current.start < prev.end) {\n              createError(current.channelIndex, current.id);\n            }\n            prev = current;\n          });\n        }\n      } else if (store.waveform.segmentOverlap === OverlapMode.DISABLED_OVERALL_OVERLAP) {\n        let prev;\n        Object.values(toJS(instances)).sort((a, b) => a.start - b.start).forEach(current => {\n          if (prev && current.start < prev.end) {\n            createError(current.channelIndex, current.id);\n          }\n          prev = current;\n        });\n      }\n      return result;\n    };\n    this.channelAttrValidation = () => {\n      const result = {\n        hasChannelAttrError: false,\n        emptyChannelAttrs: []\n      };\n      Object.keys(store.ontology.channelAttribuesList).forEach(channelName => {\n        const attributes = store.ontology.channelAttribuesList[channelName];\n        const verifyRes = verifyChannelForm(store.ontology.channelConfig, attributes, channelName);\n        if (verifyRes.result === false) {\n          result.emptyChannelAttrs.push({\n            warningType: ValidationType.CHANNEL_ERROR,\n            id: channelName,\n            message: verifyRes.error || i18n.translate('ERROR_INCOMPLETE_CHANNEL_ATTR', {\n              values: {\n                channelName\n              }\n            }),\n            frames: [],\n            blockSubmit: true\n          });\n        }\n      });\n      return result;\n    };\n    this.segmentAttrValidation = () => {\n      const newInstances = Object.values(toJS(store.instance.instances));\n      const result = {\n        emptys: [],\n        durations: [],\n        hasAttrError: false\n      };\n      for (let i = 0; i < newInstances.length; i += 1) {\n        const {\n          id,\n          channelIndex,\n          start,\n          end,\n          text,\n          isTranslationRequired\n        } = newInstances[i];\n        const verifyRes = verifyCurrentForm(store.ontology.segmentConfig, newInstances[i], i);\n        if (!text && isTranslationRequired || verifyRes.result === false) {\n          result.hasAttrError = true;\n          const categoryInstances = store.instance.channelInstancesMap[channelIndex];\n          const index = categoryInstances.findIndex(instance => instance.start === start);\n          result.emptys.push({\n            warningType: ValidationType.ATTR_EMPTY,\n            id,\n            message: verifyRes.error || i18n.translate('ERROR_INCOMPLETE', {\n              values: {\n                channelIndex: channelIndex + 1,\n                index: index + 1\n              }\n            }),\n            frames: [],\n            blockSubmit: true\n          });\n        }\n        if (store.waveform.segmentMode === SegmentMode.INDIVIDUAL) {\n          const duration = end - start;\n          if (duration < store.setting.minLength) {\n            result.hasAttrError = true;\n            result.durations.push({\n              warningType: ValidationType.DURATION_ILLEGAL,\n              id,\n              message: i18n.translate('ERROR_DURATION_MIN', {\n                values: {\n                  duration: store.setting.minLength\n                }\n              }),\n              frames: [],\n              blockSubmit: true\n            });\n          } else if (store.setting.maxLength && duration > store.setting.maxLength) {\n            result.hasAttrError = true;\n            result.durations.push({\n              warningType: ValidationType.DURATION_ILLEGAL,\n              id,\n              message: i18n.translate('ERROR_DURATION_MAX', {\n                values: {\n                  duration: store.setting.maxLength\n                }\n              }),\n              frames: [],\n              blockSubmit: true\n            });\n          }\n        }\n      }\n      return result;\n    };\n    this.onSave = async (submit = true, params) => {\n      var _this$saverRef$curren;\n      if (store.setting.loading || !store.jobProxy) {\n        const loadError = i18n.translate('ERROR_DATA_LOAD');\n        notification.error({\n          message: loadError\n        });\n        throw new Error(loadError);\n      }\n      if (!store.review.isSelectInstanceEnable) {\n        const reviewError = i18n.translate('QC_ERROR');\n        notification.error({\n          message: reviewError\n        });\n        throw new Error(reviewError);\n      }\n      (_this$saverRef$curren = this.saverRef.current) === null || _this$saverRef$curren === void 0 ? void 0 : _this$saverRef$curren.disableLeaveCheck();\n      const {\n        duration,\n        channelCount\n      } = store.waveform;\n      store.instance.initInstances(duration, channelCount);\n\n      // validate before save\n      await this.triggerValidation();\n      if (submit) {\n        const invalid = (params === null || params === void 0 ? void 0 : params.validityFlag) === 'false';\n        if (store.setting.submitCheck && (!invalid || !store.setting.skipCheckForInvalidData) && store.review.blockSubmitErrors.length > 0) {\n          throw new Error(i18n.translate('SUBMIT_CHECK_FAIL'));\n        }\n      }\n      return store.saveResult(submit);\n    };\n    this.saveResult = params => this.onSave(true, params);\n    this.saveReviews = (type = 'submit') => {\n      var _this$saverRef$curren2;\n      if (type === 'submit') {\n        const hasSuspend = store.review.reviews.find(review => review.result === ReviewResult.SUSPEND);\n        if (hasSuspend) {\n          throw new Error(i18n.translate('QC_SUSPEND_ERROR'));\n        }\n      }\n      (_this$saverRef$curren2 = this.saverRef.current) === null || _this$saverRef$curren2 === void 0 ? void 0 : _this$saverRef$curren2.disableLeaveCheck();\n      return store.saveReviews(type === 'submit');\n    };\n    /**\n     * get review statistics\n     */\n    this.getStatistics = () => {\n      const statShapes = {};\n      const objects = {\n        total: 0,\n        approved: 0,\n        rejected: 0,\n        suspended: 0,\n        missed: 0,\n        correctWord: 0,\n        incorrectWord: 0,\n        actualCorrectWord: 0\n      };\n      const reviews = store.review.getReviewsForSave().filter(r => r.result !== ReviewResult.APPROVE);\n      const instancesList = Object.values(store.instance.instances).filter(v => !!v);\n      for (let i = 0; i < instancesList.length; i += 1) {\n        const {\n          id,\n          category,\n          start,\n          end,\n          text\n        } = instancesList[i];\n        if (!statShapes[category]) {\n          statShapes[category] = {\n            rejected: 0,\n            approved: 0,\n            suspended: 0,\n            missed: 0,\n            total: 0\n          };\n        }\n        const duration = (end - start) * 1000;\n        statShapes[category].total += duration;\n        objects.total += duration;\n        const review = reviews.find(r => r.instanceId === id);\n        if ((review === null || review === void 0 ? void 0 : review.result) === ReviewResult.REJECT) {\n          statShapes[category].rejected += duration;\n          objects.rejected += duration;\n        } else if ((review === null || review === void 0 ? void 0 : review.result) === ReviewResult.SUSPEND) {\n          statShapes[category].suspended += duration;\n          objects.suspended += duration;\n        } else {\n          statShapes[category].approved += duration;\n          objects.approved += duration;\n        }\n        const annotationWords = getWords(text, store.config.wordCountItems);\n        if ((review === null || review === void 0 ? void 0 : review.result) === ReviewResult.REJECT && review.translation) {\n          const auditWords = getWords(review.translation, store.config.wordCountItems);\n          const distance = minDistance(annotationWords, auditWords);\n          const correctWordCount = Math.max(annotationWords.length, auditWords.length) - distance;\n          objects.incorrectWord += distance;\n          objects.correctWord += correctWordCount;\n          objects.actualCorrectWord += correctWordCount;\n        } else {\n          if ([ReviewResult.REJECT, ReviewResult.APPROVE].includes(review === null || review === void 0 ? void 0 : review.result)) {\n            objects.actualCorrectWord += annotationWords.length;\n          }\n          objects.correctWord += annotationWords.length;\n        }\n      }\n      return {\n        objects: {\n          ...objects,\n          total: Number(objects.total.toFixed(2)),\n          approved: Number(objects.approved.toFixed(2)),\n          rejected: Number(objects.rejected.toFixed(2)),\n          suspended: Number(objects.suspended.toFixed(2)),\n          missed: Number(objects.missed.toFixed(2))\n        },\n        shapes: statShapes\n      };\n    };\n    this.handleSave = async () => {\n      if (store.isPreview) {\n        return;\n      }\n      try {\n        if (!store.annotationReadonly) {\n          await this.onSave(false);\n        }\n        if (store.review.isEnabled) {\n          await this.saveReviews('save');\n        }\n        notification.success({\n          message: i18n.translate('SAVE_SUCCESS')\n        });\n      } catch (e) {\n        notification.error({\n          message: i18n.translate('SAVE_FAIL')\n        });\n      }\n    };\n    this.handleUndo = () => {\n      if (!store.undo.undoDisabled) {\n        const item = store.undo.undo();\n        if (item && item.before) {\n          this.updateStatus(item.before);\n          notification.success({\n            message: 'Undo successfully.'\n          });\n        }\n      }\n    };\n    this.handleRedo = () => {\n      if (!store.undo.redoDisabled) {\n        const item = store.undo.redo();\n        if (item && item.after) {\n          this.updateStatus(item.after);\n          notification.success({\n            message: 'Redo successfully.'\n          });\n        }\n      }\n    };\n    this.updateStatus = curr => {\n      curr.forEach(step => {\n        if (step.type === 'instance') {\n          store.instance.setUpdatedInstances(step.status, UpdateType.UNDOREDO);\n        } else if (step.type === 'review') {\n          store.review.updateReviews(step.status);\n        }\n      });\n    };\n    this.getScriptResult = async () => {\n      var _store$jobProxy;\n      let resultLink = '';\n      if (store.setting.customCheck.length > 0 || store.setting.scriptCheck) {\n        if (typeof store.jobProxy.reviewFrom === 'string') {\n          resultLink = store.jobProxy.reviewFrom;\n        }\n        if (!store.readonly) {\n          try {\n            resultLink = await store.saveResult(false);\n          } catch (e) {\n            resultLink = '';\n          }\n        }\n      }\n      const [result] = await Promise.all([validate(store.setting.customCheck, {\n        resultLink,\n        flowData: (_store$jobProxy = store.jobProxy) === null || _store$jobProxy === void 0 ? void 0 : _store$jobProxy.flowData\n      }), new Promise(resolve => {\n        setTimeout(resolve, 300);\n      })]);\n      return result || {\n        results: [],\n        hasCustomError: false\n      };\n    };\n    this.handleScreenFull = () => {\n      if (store.setting.screenfull.isEnabled) {\n        store.setting.screenfull.toggle();\n      }\n    };\n    this.reload = () => {\n      window.location.reload();\n    };\n    /**\n     * load latest data of advance job\n     */\n    this.loadAdvanceJobData = e => {\n      var _e$result;\n      let needRender = false;\n\n      // load instance\n      if ((_e$result = e.result) === null || _e$result === void 0 ? void 0 : _e$result.instances) {\n        needRender = true;\n        store.instance.init(loadInstancesFromResult(e.result.instances, this.props.ontology));\n      }\n\n      // load reviews\n      if (typeof e.reviews === 'object') {\n        var _e$reviews;\n        needRender = true;\n        if (Array.isArray(e.reviews)) {\n          store.review.setInitialData(e.reviews);\n        } else if ((_e$reviews = e.reviews) === null || _e$reviews === void 0 ? void 0 : _e$reviews.updateTime) {\n          delete e.reviews.updateTime;\n          store.review.setInitialData(Object.values(e.reviews));\n        }\n      }\n\n      // render\n      if (needRender) {\n        var _this$channelsRef$cur, _this$channelsRef$cur2;\n        (_this$channelsRef$cur = this.channelsRef.current) === null || _this$channelsRef$cur === void 0 ? void 0 : (_this$channelsRef$cur2 = _this$channelsRef$cur.waveformRef.current) === null || _this$channelsRef$cur2 === void 0 ? void 0 : _this$channelsRef$cur2.init();\n      }\n    };\n    makeObservable(this, {});\n    // set props\n    store.jobProxy = this.props.jobProxy;\n    i18n.setLocale(props.locale);\n  }\n  async componentDidMount() {\n    window.view = this;\n    this.removeKeyboardEvents = bindKeyboardEvents(this);\n\n    // advancejob listener\n    advanceJob.on(AdvanceMessage.UPDATE_RESULT, this.loadAdvanceJobData);\n\n    // init store\n    try {\n      await store.init(this.props);\n    } catch (e) {\n      notification.error({\n        message: i18n.translate('ANNOTATION_DATA_LOAD_ERROR')\n      });\n      return;\n    }\n    // render completed\n    this.props.renderComplete();\n    this.dragResizeControl = new DragResizeControl({\n      dragList: [{\n        nodeId: 'multi-side-bar',\n        direct: 'x',\n        border: 'right'\n      }, {\n        nodeId: 'multi-handle-pannel',\n        direct: 'y',\n        border: 'top',\n        defaultHeight: this.getAttributesPanelHeight()\n      }]\n    });\n\n    // check temp saved data\n    if (this.props.jobProxy.savedDataLoadError) {\n      Modal.confirm({\n        title: i18n.translate('TEMP_SAVED_LOAD_ERROR'),\n        okText: i18n.translate('TEMP_SAVED_LOAD_ERROR_OK'),\n        cancelText: i18n.translate('TEMP_SAVED_LOAD_ERROR_CANCEL'),\n        autoFocusButton: null,\n        onOk: () => {\n          var _this$saverRef$curren3;\n          // set temp saved to true to disable leave check\n          (_this$saverRef$curren3 = this.saverRef.current) === null || _this$saverRef$curren3 === void 0 ? void 0 : _this$saverRef$curren3.setTempSaved(true);\n          window.location.reload();\n        },\n        onCancel: () => {\n          // set to false to enable result save\n          this.props.jobProxy.savedDataLoadError = false;\n        }\n      });\n    }\n  }\n  componentWillUnmount() {\n    var _this$dragResizeContr;\n    this.removeKeyboardEvents();\n    advanceJob.off(AdvanceMessage.UPDATE_RESULT);\n    advanceJob.destory();\n    (_this$dragResizeContr = this.dragResizeControl) === null || _this$dragResizeContr === void 0 ? void 0 : _this$dragResizeContr.destory();\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getAttributesPanelHeight() {\n    const {\n      channelCount\n    } = store.waveform;\n    const {\n      showSpectrogram\n    } = store.config;\n    const defaultWaveHeight = channelCount * (showSpectrogram ? 2 : 1) * 80;\n    return Math.max(window.innerHeight - (defaultWaveHeight + EXTRA_HEIGHT), 200);\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(LayoutWrapper, {\n      className: \"multi-channel-app\",\n      loading: store.setting.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AutoSaver, {\n      ref: this.saverRef,\n      leaveCheck: true,\n      data: {\n        storePointer: store.undo.pointer\n      },\n      save: this.handleSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Toolbar, {\n      readonly: store.setting.loading,\n      onSave: this.handleSave,\n      handleUndo: this.handleUndo,\n      handleRedo: this.handleRedo,\n      handleScreenFull: this.handleScreenFull,\n      reload: this.reload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      onContextMenu: e => e.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TabMenu, {\n      id: \"multi-side-bar\",\n      tabs: [{\n        title: i18n.translate('MENU_SENTENCE'),\n        key: 'instance',\n        count: 0,\n        content: /*#__PURE__*/React.createElement(Sidebar, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 19\n          }\n        })\n      }, {\n        title: i18n.translate('MENU_WARNING'),\n        key: 'validator',\n        count: store.review.warnings.length,\n        content: /*#__PURE__*/React.createElement(Validator, {\n          triggerValidation: this.triggerValidation,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 19\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 11\n      }\n    }), store.initialized && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"channel-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Channels, {\n      ref: this.channelsRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"multi-handle-pannel\",\n      className: \"handle-pannel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InstanceLabel, {\n      instance: store.instance.selectedInstance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 19\n      }\n    }, store.instance.selectedInstance || store.review.selectedReview ? /*#__PURE__*/React.createElement(React.Fragment, null, (store.review.isReviewMode || store.review.selectedReview) && /*#__PURE__*/React.createElement(Review, {\n      instanceId: store.instance.selectedInstanceId,\n      review: store.review.selectedReview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 27\n      }\n    }), store.instance.selectedInstance && /*#__PURE__*/React.createElement(Attributes, {\n      instance: store.instance.selectedInstance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 27\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"not-selected\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 23\n      }\n    }, i18n.translate('NOT_SELECTED'))))), /*#__PURE__*/React.createElement(InfoPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 15\n      }\n    }))));\n  }\n}\n;\nexport default observer(MultiChannel);","map":{"version":3,"names":["React","makeObservable","toJS","observer","Modal","notification","LayoutWrapper","AutoSaver","Toolbar","TabMenu","Sidebar","Validator","Channels","InstanceLabel","Attributes","Review","InfoPanel","bindKeyboardEvents","i18n","UpdateType","ReviewResult","ValidationType","OverlapMode","SegmentMode","store","validate","verifyCurrentForm","verifyForm","loadInstancesFromResult","verifyChannelForm","getWords","minDistance","advanceJob","AdvanceMessage","DragResizeControl","EXTRA_HEIGHT","reduce","t","a","MultiChannel","Component","constructor","props","saverRef","createRef","channelsRef","dragResizeControl","removeKeyboardEvents","triggerValidation","global","annotateDisabled","results","hasCustomError","getScriptResult","emptys","durations","hasAttrError","segmentAttrValidation","emptyChannelAttrs","hasChannelAttrError","channelAttrValidation","overlaps","hasOverlapError","overlapValidation","globals","hasGlobalError","globalValidation","hasError","errors","review","setScriptResult","length","result","globalVerify","globalConfig","attributes","push","warningType","GLOBAL_ERROR","id","message","translate","frames","blockSubmit","waveform","channelCount","instance","instances","segmentMode","CONTINUOUS","createError","channelIndex","categoryInstances","channelInstancesMap","index","findIndex","OVERLAP","values","newInstances","Object","sort","b","start","segmentOverlap","DISABLED_CHANNEL_OVERLAP","i","prev","filter","current","forEach","end","DISABLED_OVERALL_OVERLAP","keys","ontology","channelAttribuesList","channelName","verifyRes","channelConfig","CHANNEL_ERROR","error","text","isTranslationRequired","segmentConfig","ATTR_EMPTY","INDIVIDUAL","duration","setting","minLength","DURATION_ILLEGAL","maxLength","onSave","submit","params","_this$saverRef$curren","loading","jobProxy","loadError","Error","isSelectInstanceEnable","reviewError","disableLeaveCheck","initInstances","invalid","validityFlag","submitCheck","skipCheckForInvalidData","blockSubmitErrors","saveResult","saveReviews","type","_this$saverRef$curren2","hasSuspend","reviews","find","SUSPEND","getStatistics","statShapes","objects","total","approved","rejected","suspended","missed","correctWord","incorrectWord","actualCorrectWord","getReviewsForSave","r","APPROVE","instancesList","v","category","instanceId","REJECT","annotationWords","config","wordCountItems","translation","auditWords","distance","correctWordCount","Math","max","includes","Number","toFixed","shapes","handleSave","isPreview","annotationReadonly","isEnabled","success","e","handleUndo","undo","undoDisabled","item","before","updateStatus","handleRedo","redoDisabled","redo","after","curr","step","setUpdatedInstances","status","UNDOREDO","updateReviews","_store$jobProxy","resultLink","customCheck","scriptCheck","reviewFrom","readonly","Promise","all","flowData","resolve","setTimeout","handleScreenFull","screenfull","toggle","reload","window","location","loadAdvanceJobData","_e$result","needRender","init","_e$reviews","Array","isArray","setInitialData","updateTime","_this$channelsRef$cur","_this$channelsRef$cur2","waveformRef","setLocale","locale","componentDidMount","view","on","UPDATE_RESULT","renderComplete","dragList","nodeId","direct","border","defaultHeight","getAttributesPanelHeight","savedDataLoadError","confirm","title","okText","cancelText","autoFocusButton","onOk","_this$saverRef$curren3","setTempSaved","onCancel","componentWillUnmount","_this$dragResizeContr","off","destory","showSpectrogram","defaultWaveHeight","innerHeight","render","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","leaveCheck","data","storePointer","pointer","save","onContextMenu","preventDefault","tabs","key","count","content","warnings","initialized","Fragment","selectedInstance","selectedReview","isReviewMode","selectedInstanceId"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/index.tsx"],"sourcesContent":["import React from 'react';\nimport { makeObservable, toJS } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { Modal, notification } from 'antd';\nimport LayoutWrapper from '../common/layout/LayoutWrapper';\nimport AutoSaver from '../common/AutoSaver';\nimport Toolbar from './components/Toolbar';\nimport TabMenu from '../common/tabs-menu/TabMenu';\nimport Sidebar from './components/Sidebar';\nimport Validator from './components/Validator';\nimport Channels, { ChannelsComponent } from './components/Channels';\nimport InstanceLabel from './components/InstanceLabel';\nimport Attributes from './components/Attributes';\nimport Review from './components/Review';\nimport InfoPanel from './components/InfoPanel';\nimport bindKeyboardEvents from './keyboard-events';\nimport { Status } from './store/UndoStore';\nimport i18n from './locales';\nimport { Payload, UpdateType, ReviewResult, Instance, ValidationType } from './types';\nimport { OverlapMode, SegmentMode } from './components/Wave/types';\nimport { IWarning } from '../common/tabs-menu/Validator';\nimport store from './store/RootStore';\nimport { validate, verifyCurrentForm, verifyForm, loadInstancesFromResult, verifyChannelForm } from './utils';\nimport { SubmitToolParamsType } from '../../types';\nimport { getWords, minDistance } from '../../utils';\nimport advanceJob, { AdvanceMessage } from '../../libs/advanceJob';\nimport DragResizeControl from './components/DragResizeControl';\nimport './index.scss';\n\nconst EXTRA_HEIGHT = [\n  36, // toolbar\n  21, // timeline\n  29, // scroll\n  48, // controls\n].reduce((t, a) => t + a, 0);\n\nexport interface MultiChannelProps extends Payload {\n  renderComplete: () => Promise<void>;\n}\n\nexport class MultiChannel extends React.Component<MultiChannelProps> {\n  /**\n   * auto saver reference\n   */\n  saverRef = React.createRef<AutoSaver>();\n\n  /**\n   * channels reference\n   */\n  channelsRef = React.createRef<ChannelsComponent>();\n\n  dragResizeControl?: DragResizeControl;\n\n  store = store;\n\n  /**\n   * keyboard events\n   */\n  removeKeyboardEvents = () => {};\n\n  constructor(props: MultiChannelProps) {\n    super(props);\n    makeObservable(this, {});\n    // set props\n    store.jobProxy = this.props.jobProxy;\n    i18n.setLocale(props.locale);\n  }\n\n  async componentDidMount() {\n    (window as any).view = this;\n    this.removeKeyboardEvents = bindKeyboardEvents(this);\n\n    // advancejob listener\n    advanceJob.on(AdvanceMessage.UPDATE_RESULT, this.loadAdvanceJobData);\n\n    // init store\n    try {\n      await store.init(this.props);\n    } catch (e) {\n      notification.error({ message: i18n.translate('ANNOTATION_DATA_LOAD_ERROR') });\n      return;\n    }\n    // render completed\n    this.props.renderComplete();\n\n    this.dragResizeControl = new DragResizeControl({\n      dragList: [\n        { nodeId: 'multi-side-bar', direct: 'x', border: 'right' },\n        { nodeId: 'multi-handle-pannel', direct: 'y', border: 'top', defaultHeight: this.getAttributesPanelHeight() },\n      ]\n    });\n\n    // check temp saved data\n    if (this.props.jobProxy.savedDataLoadError) {\n      Modal.confirm({\n        title: i18n.translate('TEMP_SAVED_LOAD_ERROR'),\n        okText: i18n.translate('TEMP_SAVED_LOAD_ERROR_OK'),\n        cancelText: i18n.translate('TEMP_SAVED_LOAD_ERROR_CANCEL'),\n        autoFocusButton: null,\n        onOk: () => {\n          // set temp saved to true to disable leave check\n          this.saverRef.current?.setTempSaved(true);\n          window.location.reload();\n        },\n        onCancel: () => {\n          // set to false to enable result save\n          this.props.jobProxy.savedDataLoadError = false;\n        },\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeKeyboardEvents();\n    advanceJob.off(AdvanceMessage.UPDATE_RESULT);\n    advanceJob.destory();\n    this.dragResizeControl?.destory();\n  }\n\n  /**\n   * trigger validation, return passed or not\n   */\n  triggerValidation = async () => {\n    if (store.global.annotateDisabled) return true;\n    const { results, hasCustomError } = await this.getScriptResult();\n    const { emptys, durations, hasAttrError } = this.segmentAttrValidation();\n    const { emptyChannelAttrs, hasChannelAttrError } = this.channelAttrValidation();\n    const { overlaps, hasOverlapError } = this.overlapValidation();\n    const { globals, hasGlobalError } = this.globalValidation();\n    const hasError = hasCustomError || hasAttrError || hasOverlapError || hasGlobalError || hasChannelAttrError;\n    const errors = [...overlaps, ...emptys, ...durations, ...results, ...globals, ...emptyChannelAttrs];\n    store.review.setScriptResult({ results: errors, hasCustomError });\n    return !hasError && errors.length <= 0;\n  };\n\n  globalValidation = () => {\n    const result: { globals: IWarning[], hasGlobalError: boolean, } = {\n      globals: [],\n      hasGlobalError: false,\n    };\n    const globalVerify = verifyForm(store.global.globalConfig, store.global.attributes);\n    if (!globalVerify.result) {\n      result.hasGlobalError = true;\n      result.globals.push({\n        warningType: ValidationType.GLOBAL_ERROR,\n        id: '',\n        message: i18n.translate('VALIDATION_TYPE_ATTR_EMPTY'),\n        frames: [],\n        blockSubmit: true,\n      });\n    }\n    return result;\n  };\n\n  overlapValidation = () => {\n    const { waveform: { channelCount }, instance: { instances } } = store;\n    const result: { overlaps: IWarning[], hasOverlapError: boolean, } = {\n      overlaps: [],\n      hasOverlapError: false,\n    };\n    if (store.waveform.segmentMode === SegmentMode.CONTINUOUS) return result;\n    const createError = (channelIndex: number, id: string) => {\n      result.hasOverlapError = true;\n      const categoryInstances = store.instance.channelInstancesMap[channelIndex];\n      const index = categoryInstances.findIndex((instance) => instance.id === id);\n      result.overlaps.push({\n        warningType: ValidationType.OVERLAP,\n        id,\n        message: i18n.translate('ERROR_OVERLAP', {\n          values: {\n            channelIndex: channelIndex + 1,\n            index: index + 1,\n          }\n        }),\n        frames: [],\n        blockSubmit: true,\n      });\n    };\n    const newInstances = Object.values(toJS(instances)).sort((a, b) => a.start - b.start);\n    if (store.waveform.segmentOverlap === OverlapMode.DISABLED_CHANNEL_OVERLAP) {\n      for (let i = 0; i < channelCount; i += 1) {\n        let prev: Instance | undefined;\n        newInstances.filter((current) => current.channelIndex === i).forEach((current) => {\n          if (prev && current.start < prev.end) {\n            createError(current.channelIndex, current.id);\n          }\n          prev = current;\n        });\n      }\n    } else if (store.waveform.segmentOverlap === OverlapMode.DISABLED_OVERALL_OVERLAP) {\n      let prev: Instance | undefined;\n      Object.values(toJS(instances)).sort((a, b) => a.start - b.start).forEach((current) => {\n        if (prev && current.start < prev.end) {\n          createError(current.channelIndex, current.id);\n        }\n        prev = current;\n      });\n    }\n    return result;\n  };\n\n  channelAttrValidation = () => {\n    const result: { emptyChannelAttrs: IWarning[], hasChannelAttrError: boolean, } = {\n      hasChannelAttrError: false,\n      emptyChannelAttrs: [],\n    };\n    Object.keys(store.ontology.channelAttribuesList).forEach((channelName: string) => {\n      const attributes = store.ontology.channelAttribuesList[channelName];\n      const verifyRes = verifyChannelForm(store.ontology.channelConfig, attributes, channelName);\n      if (verifyRes.result === false) {\n        result.emptyChannelAttrs.push({\n          warningType: ValidationType.CHANNEL_ERROR,\n          id: channelName,\n          message: verifyRes.error || i18n.translate('ERROR_INCOMPLETE_CHANNEL_ATTR', {\n            values: {\n              channelName\n            }\n          }),\n          frames: [],\n          blockSubmit: true,\n        });\n      }\n    });\n\n    return result;\n  };\n\n  segmentAttrValidation = () => {\n    const newInstances: Instance[] = Object.values(toJS(store.instance.instances));\n    const result: { emptys: IWarning[], durations: IWarning[], hasAttrError: boolean, } = {\n      emptys: [],\n      durations: [],\n      hasAttrError: false,\n    };\n    for (let i = 0; i < newInstances.length; i += 1) {\n      const { id, channelIndex, start, end, text, isTranslationRequired } = newInstances[i];\n      const verifyRes = verifyCurrentForm(store.ontology.segmentConfig, newInstances[i], i);\n      if ((!text && isTranslationRequired) || verifyRes.result === false) {\n        result.hasAttrError = true;\n        const categoryInstances = store.instance.channelInstancesMap[channelIndex];\n        const index = categoryInstances.findIndex((instance) => instance.start === start);\n        result.emptys.push({\n          warningType: ValidationType.ATTR_EMPTY,\n          id,\n          message: verifyRes.error || i18n.translate('ERROR_INCOMPLETE', {\n            values: {\n              channelIndex: channelIndex + 1,\n              index: index + 1,\n            }\n          }),\n          frames: [],\n          blockSubmit: true,\n        });\n      }\n\n      if (store.waveform.segmentMode === SegmentMode.INDIVIDUAL) {\n        const duration = end - start;\n        if (duration < store.setting.minLength) {\n          result.hasAttrError = true;\n          result.durations.push({\n            warningType: ValidationType.DURATION_ILLEGAL,\n            id,\n            message: i18n.translate('ERROR_DURATION_MIN', {\n              values: { duration: store.setting.minLength }\n            }),\n            frames: [],\n            blockSubmit: true,\n          });\n        } else if (store.setting.maxLength && duration > store.setting.maxLength) {\n          result.hasAttrError = true;\n          result.durations.push({\n            warningType: ValidationType.DURATION_ILLEGAL,\n            id,\n            message: i18n.translate('ERROR_DURATION_MAX', {\n              values: { duration: store.setting.maxLength }\n            }),\n            frames: [],\n            blockSubmit: true,\n          });\n        }\n      }\n    }\n    return result;\n  };\n\n  onSave = async (submit = true, params?: SubmitToolParamsType) => {\n    if (store.setting.loading || !store.jobProxy) {\n      const loadError = i18n.translate('ERROR_DATA_LOAD');\n      notification.error({ message: loadError });\n      throw new Error(loadError);\n    }\n    if (!store.review.isSelectInstanceEnable) {\n      const reviewError = i18n.translate('QC_ERROR');\n      notification.error({ message: reviewError });\n      throw new Error(reviewError);\n    }\n    this.saverRef.current?.disableLeaveCheck();\n    const { duration, channelCount } = store.waveform;\n    store.instance.initInstances(duration, channelCount);\n\n    // validate before save\n    await this.triggerValidation();\n\n    if (submit) {\n      const invalid = params?.validityFlag === 'false';\n      if (\n        store.setting.submitCheck\n        && (!invalid || !store.setting.skipCheckForInvalidData)\n        && store.review.blockSubmitErrors.length > 0\n      ) {\n        throw new Error(i18n.translate('SUBMIT_CHECK_FAIL'));\n      }\n    }\n    return store.saveResult(submit);\n  };\n\n  saveResult = (params?: SubmitToolParamsType) => this.onSave(true, params);\n\n  saveReviews = (type = 'submit') => {\n    if (type === 'submit') {\n      const hasSuspend = store.review.reviews.find((review) => review.result === ReviewResult.SUSPEND);\n      if (hasSuspend) {\n        throw new Error(i18n.translate('QC_SUSPEND_ERROR'));\n      }\n    }\n    this.saverRef.current?.disableLeaveCheck();\n    return store.saveReviews(type === 'submit');\n  };\n\n  /**\n   * get review statistics\n   */\n  getStatistics = () => {\n    const statShapes: {\n      [shape: string]: { rejected: number; approved: number, suspended: number, missed: number, total: number };\n    } = {};\n    const objects = {\n      total: 0,\n      approved: 0,\n      rejected: 0,\n      suspended: 0,\n      missed: 0,\n      correctWord: 0,\n      incorrectWord: 0,\n      actualCorrectWord: 0,\n    };\n    const reviews = store.review.getReviewsForSave().filter((r) => r.result !== ReviewResult.APPROVE);\n    const instancesList = Object.values(store.instance.instances).filter((v) => !!v);\n    for (let i = 0; i < instancesList.length; i += 1) {\n      const { id, category, start, end, text } = instancesList[i];\n      if (!statShapes[category]) {\n        statShapes[category] = {\n          rejected: 0,\n          approved: 0,\n          suspended: 0,\n          missed: 0,\n          total: 0\n        };\n      }\n      const duration = (end - start) * 1000;\n      statShapes[category].total += duration;\n      objects.total += duration;\n      const review = reviews.find((r) => r.instanceId === id);\n      if (review?.result === ReviewResult.REJECT) {\n        statShapes[category].rejected += duration;\n        objects.rejected += duration;\n      } else if (review?.result === ReviewResult.SUSPEND) {\n        statShapes[category].suspended += duration;\n        objects.suspended += duration;\n      } else {\n        statShapes[category].approved += duration;\n        objects.approved += duration;\n      }\n\n      const annotationWords = getWords(text, store.config.wordCountItems);\n      if (review?.result === ReviewResult.REJECT && review.translation) {\n        const auditWords = getWords(review.translation, store.config.wordCountItems);\n        const distance = minDistance(annotationWords, auditWords);\n        const correctWordCount = (Math.max(annotationWords.length, auditWords.length) - distance);\n        objects.incorrectWord += distance;\n        objects.correctWord += correctWordCount;\n        objects.actualCorrectWord += correctWordCount;\n      } else {\n        if ([ReviewResult.REJECT, ReviewResult.APPROVE].includes(review?.result as ReviewResult)) {\n          objects.actualCorrectWord += annotationWords.length;\n        }\n        objects.correctWord += annotationWords.length;\n      }\n    }\n\n    return {\n      objects: {\n        ...objects,\n        total: Number(objects.total.toFixed(2)),\n        approved: Number(objects.approved.toFixed(2)),\n        rejected: Number(objects.rejected.toFixed(2)),\n        suspended: Number(objects.suspended.toFixed(2)),\n        missed: Number(objects.missed.toFixed(2)),\n      },\n      shapes: statShapes\n    };\n  };\n\n  handleSave = async () => {\n    if (store.isPreview) {\n      return;\n    }\n\n    try {\n      if (!store.annotationReadonly) {\n        await this.onSave(false);\n      }\n      if (store.review.isEnabled) {\n        await this.saveReviews('save');\n      }\n      notification.success({ message: i18n.translate('SAVE_SUCCESS') });\n    } catch (e) {\n      notification.error({ message: i18n.translate('SAVE_FAIL') });\n    }\n  };\n\n  handleUndo = () => {\n    if (!store.undo.undoDisabled) {\n      const item = store.undo.undo();\n      if (item && item.before) {\n        this.updateStatus(item.before);\n        notification.success({ message: 'Undo successfully.' });\n      }\n    }\n  };\n\n  handleRedo = () => {\n    if (!store.undo.redoDisabled) {\n      const item = store.undo.redo();\n      if (item && item.after) {\n        this.updateStatus(item.after);\n        notification.success({ message: 'Redo successfully.' });\n      }\n    }\n  };\n\n  updateStatus = (curr: Status[]) => {\n    curr.forEach((step) => {\n      if (step.type === 'instance') {\n        store.instance.setUpdatedInstances(step.status, UpdateType.UNDOREDO);\n      } else if (step.type === 'review') {\n        store.review.updateReviews(step.status);\n      }\n    });\n  };\n\n  getScriptResult = async () => {\n    let resultLink = '';\n    if (store.setting.customCheck.length > 0 || store.setting.scriptCheck) {\n      if (typeof store.jobProxy!.reviewFrom === 'string') {\n        resultLink = store.jobProxy!.reviewFrom;\n      }\n      if (!store.readonly) {\n        try {\n          resultLink = await store.saveResult(false);\n        } catch (e) {\n          resultLink = '';\n        }\n      }\n    }\n\n    const [result] = await Promise.all([\n      validate(store.setting.customCheck, {\n        resultLink,\n        flowData: store.jobProxy?.flowData,\n      }),\n      new Promise((resolve) => {\n        setTimeout(resolve, 300);\n      }),\n    ]);\n    return result || { results: [], hasCustomError: false };\n  };\n\n  handleScreenFull = () => {\n    if (store.setting.screenfull.isEnabled) {\n      store.setting.screenfull.toggle();\n    }\n  };\n\n  reload = () => {\n    window.location.reload();\n  };\n\n  /**\n   * load latest data of advance job\n   */\n  loadAdvanceJobData = (e: any) => {\n    let needRender = false;\n\n    // load instance\n    if (e.result?.instances) {\n      needRender = true;\n      store.instance.init(loadInstancesFromResult(e.result.instances, this.props.ontology));\n    }\n\n    // load reviews\n    if (typeof e.reviews === 'object') {\n      needRender = true;\n      if (Array.isArray(e.reviews)) {\n        store.review.setInitialData(e.reviews);\n      } else if (e.reviews?.updateTime) {\n        delete e.reviews.updateTime;\n        store.review.setInitialData(Object.values(e.reviews));\n      }\n    }\n\n    // render\n    if (needRender) {\n      this.channelsRef.current?.waveformRef.current?.init();\n    }\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  private getAttributesPanelHeight() {\n    const { channelCount } = store.waveform;\n    const { showSpectrogram } = store.config;\n    const defaultWaveHeight = channelCount * (showSpectrogram ? 2 : 1) * 80;\n    return Math.max(window.innerHeight - (defaultWaveHeight + EXTRA_HEIGHT), 200);\n  }\n\n  render() {\n    return (\n      <LayoutWrapper className=\"multi-channel-app\" loading={store.setting.loading}>\n        <AutoSaver\n          ref={this.saverRef}\n          leaveCheck\n          data={{ storePointer: store.undo.pointer }}\n          save={this.handleSave}\n        />\n        <Toolbar\n          readonly={store.setting.loading}\n          onSave={this.handleSave}\n          handleUndo={this.handleUndo}\n          handleRedo={this.handleRedo}\n          handleScreenFull={this.handleScreenFull}\n          reload={this.reload}\n        />\n        <div className=\"container\" onContextMenu={(e) => e.preventDefault()}>\n          <TabMenu\n            id=\"multi-side-bar\"\n            tabs={[\n              {\n                title: i18n.translate('MENU_SENTENCE'),\n                key: 'instance',\n                count: 0,\n                content: (\n                  <Sidebar />\n                )\n              },\n              {\n                title: i18n.translate('MENU_WARNING'),\n                key: 'validator',\n                count: store.review.warnings.length,\n                content: (\n                  <Validator triggerValidation={this.triggerValidation} />\n                )\n              }\n            ]}\n          />\n          {store.initialized && (\n            <>\n              <div className=\"channel-container\">\n                <Channels ref={this.channelsRef} />\n                <div id=\"multi-handle-pannel\" className=\"handle-pannel\">\n                  <InstanceLabel instance={store.instance.selectedInstance} />\n                  <div className=\"attributes-container\">\n                    {(store.instance.selectedInstance || store.review.selectedReview) ? (\n                      <>\n                        {(store.review.isReviewMode || store.review.selectedReview) && (\n                          <Review\n                            instanceId={store.instance.selectedInstanceId!}\n                            review={store.review.selectedReview}\n                          />\n                        )}\n                        {store.instance.selectedInstance && (\n                          <Attributes instance={store.instance.selectedInstance} />\n                        )}\n                      </>\n                    ) : (\n                      <div className=\"not-selected\">{i18n.translate('NOT_SELECTED')}</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <InfoPanel />\n            </>\n          )}\n        </div>\n      </LayoutWrapper>\n    );\n  }\n};\nexport default observer(MultiChannel);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}