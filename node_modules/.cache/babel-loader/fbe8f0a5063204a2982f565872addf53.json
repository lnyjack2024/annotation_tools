{"ast":null,"code":"import React,{useState,useRef,useMemo,useEffect,forwardRef,useImperativeHandle}from'react';import{Observer,useLocalObservable,useObserver}from'mobx-react';import{cloneDeep}from'lodash';import{notification}from'antd';import{v4 as uuid}from'uuid';import{toJS}from'mobx';import TabMenu from'../common/tabs-menu/TabMenu';import AutoSaver from'../common/AutoSaver';import Toolbar from'./components/Toolbar';import SideMenus from'./components/SideMenus';import Board from'./components/Board';import Canvas from'./components/Canvas';import FrameControl from'./components/FrameContorl';import Validator from'./components/Validator';import Attributes from'./components/Attributes';import QualityControl from'./components/QualityControl';import Information from'./components/Information';import FrameAttributes from'./components/FrameAttributes';import formatMessage,{i18n}from'./locales';import{LandmarkEditType,DELETETYPE,ReviewResult}from'./types';import{fetchResultByUrl}from'./request';import loader from'../../utils/image-preloader';import{isPreview,isAnnotationReadonly}from'../../utils/tool-mode';import{initInstances,loadInstancesFromResult,getFrameShapes,parseFramesByPaylod,getInstanceFrames}from'./utils';import'./index.scss';import rootStore from'./store/RootStore';import useAsyncState from'./useAsyncState';import Missing from'./components/QualityControl/Missing';notification.config({top:60});var CANVASSTATUS=/*#__PURE__*/function(CANVASSTATUS){CANVASSTATUS[\"INITIAL\"]=\"initial\";CANVASSTATUS[\"LANDMARK\"]=\"landmark\";return CANVASSTATUS;}(CANVASSTATUS||{});const LandmarkAnnotation=forwardRef((props,ref)=>{const store=useLocalObservable(()=>rootStore);const[readonly,setReadOnly]=useState(false);/**\n   * frame image urls\n   */const[frames,setFrames]=useState([]);/**\n   * current frame index\n   */const[currentFrame,setCurrentFrame]=useAsyncState(-1);/**\n   * frame control height (default is 48 + 30 = 78)\n   */const[frameControlHeight,setFrameControlHeight]=useState(78);const[selectedOntologyGroup,setSelectedOntologyGroup]=useState('');const[categoryPathShapes,setCategoryPathShapes]=useAsyncState({});const[updatedCategories,setUpdatedCategories]=useAsyncState([]);const[defaultInstances,setDefaultInstances]=useAsyncState({});const[instances,setInstances]=useAsyncState({});/**\n   * image preloader\n   */const[imagePreloader,setImagePreloader]=useState(null);/**\n   * selected shape info\n   */const[selectedShapeStatus,setSelectedShapeStatus]=useState({frameIndex:-1,category:'',instanceId:'',groupName:'',shapeType:undefined,id:undefined});const[loading,setLoading]=useState(false);const[formConfig,setFormConfig]=useState(null);const[formValues,setFormValues]=useState(null);const[imageSize,setImageSize]=useState({width:0,height:0});const[editFormObject,setEditFormObject]=useState(null);/**\n   * is review mode\n   */const[isReview,setIsReview]=useState(false);/**\n   * initial instances, used to review\n   */const[initialInstances,setInitialInstances]=useState({});/**\n   * category instances\n   */const[initialCategoryInstancesMap,setInitialCategoryInstancesMap]=useState({});const[initialCategoryPathShapes,setInitialCategoryPathShapes]=useState({});/**\n   * attributes reference\n   */const attributesRef=useRef(null);/**\n   * auto saver reference\n   */const saverRef=useRef(null);/**\n   * validator reference\n   */const validatorRef=useRef(null);const canvas=useRef(null);const isDrawMode=useMemo(()=>store.review.drawMode,[store.review.drawMode]);const displayedInstances=useMemo(()=>isReview?initialInstances:instances,[isReview,initialInstances,instances]);const instanceIds=useMemo(()=>Object.keys(displayedInstances),[displayedInstances]);const instanceList=useMemo(()=>Object.values(displayedInstances).filter(v=>!!v),[displayedInstances]);const selectedInstance=useMemo(()=>{if(selectedShapeStatus===null||selectedShapeStatus===void 0?void 0:selectedShapeStatus.instanceId){return displayedInstances[selectedShapeStatus.instanceId];}return undefined;},[selectedShapeStatus,displayedInstances]);/**\n   * category instances (used for sidebar render)\n   */const categoryInstancesMap=useMemo(()=>{const newCategoryInstancesMap={};instanceList.forEach(_ref=>{let{category,id,number}=_ref;if(!newCategoryInstancesMap[category]){newCategoryInstancesMap[category]={};}newCategoryInstancesMap[category][id]=number;});return newCategoryInstancesMap;},[isReview,initialInstances,instanceList]);const displayedCategoryInstancesMap=useMemo(()=>isReview?initialCategoryInstancesMap:categoryInstancesMap,[isReview,initialCategoryInstancesMap,categoryInstancesMap]);const displayedCategoryPathShapes=useMemo(()=>isReview?initialCategoryPathShapes:categoryPathShapes,[isReview,initialCategoryPathShapes,categoryPathShapes]);const selectedOntology=useObserver(()=>{const ontologyItem=store.ontology.ontology.find(category=>category.class_name===(selectedInstance===null||selectedInstance===void 0?void 0:selectedInstance.category));return ontologyItem;});const ontologyGroup=useObserver(()=>{const ontologyItem=store.ontology.ontology.find(category=>category.class_name===(selectedInstance===null||selectedInstance===void 0?void 0:selectedInstance.category));const groupItem=ontologyItem&&ontologyItem.children&&ontologyItem.children.find(group=>group.name===selectedOntologyGroup);return groupItem;});const categories=useMemo(()=>(ontologyGroup===null||ontologyGroup===void 0?void 0:ontologyGroup.categories)||[],[ontologyGroup]);const selectedCategoryIndex=useMemo(()=>{const id=selectedShapeStatus===null||selectedShapeStatus===void 0?void 0:selectedShapeStatus.id;return selectedShapeStatus.shapeType===LandmarkEditType.KEYPOINT?categories.findIndex(c=>c.range&&c.range.length===2&&id>=c.range[0]&&id<=c.range[1]):-1;},[selectedShapeStatus,categories]);const instancesFrames=useMemo(()=>{const items={};instanceList.forEach(instance=>{items[instance.id]=getInstanceFrames(instance);});return items;},[instanceList]);const shapes=useMemo(()=>{var _selectedInstance$chi;const group=selectedInstance===null||selectedInstance===void 0?void 0:(_selectedInstance$chi=selectedInstance.children.find(g=>g.name===selectedOntologyGroup))===null||_selectedInstance$chi===void 0?void 0:_selectedInstance$chi.frames[currentFrame];return group&&group.shapes||{};},[selectedInstance,selectedOntologyGroup,currentFrame]);const selectedShapeInfo=useMemo(()=>{let info=null;if(selectedShapeStatus){info={category:selectedShapeStatus.category,instanceId:selectedShapeStatus.instanceId,groupName:selectedShapeStatus.groupName,shapeType:(ontologyGroup===null||ontologyGroup===void 0?void 0:ontologyGroup.type)||undefined,displayColor:(selectedOntology===null||selectedOntology===void 0?void 0:selectedOntology.display_color)||''};if((ontologyGroup===null||ontologyGroup===void 0?void 0:ontologyGroup.type)===LandmarkEditType.KEYPOINT&&selectedCategoryIndex>=0){var _categories$selectedC;info={...info,pointCategory:(_categories$selectedC=categories[selectedCategoryIndex])===null||_categories$selectedC===void 0?void 0:_categories$selectedC.name,isKeyPoint:categories[selectedCategoryIndex].keys.includes(selectedShapeStatus.id)};}}return info;},[selectedShapeStatus,selectedCategoryIndex,ontologyGroup]);const annotatedPointOrShapeCount=useMemo(()=>Object.entries(shapes).filter(_ref2=>{let[,v]=_ref2;return v!==undefined;}).length,[shapes]);const totalPointCount=useMemo(()=>(ontologyGroup===null||ontologyGroup===void 0?void 0:ontologyGroup.count)||0,[ontologyGroup]);const instancesReviewsMap=useObserver(()=>{const map={};store.review.reviews.forEach(review=>{var _instances$instanceId;const{frameIndex,instanceId,groupName,shapeIds,result}=review;const category=(_instances$instanceId=instances[instanceId])===null||_instances$instanceId===void 0?void 0:_instances$instanceId.category;if(!category)return;if(!map[instanceId]){map[instanceId]={};}if(!map[instanceId][frameIndex]){map[instanceId][frameIndex]={approveCount:0,children:{}};}if(!map[instanceId][frameIndex].children[groupName]){map[instanceId][frameIndex].children[groupName]={approveCount:0};}if(result===ReviewResult.REJECT){map[instanceId][frameIndex].result=result;map[instanceId][frameIndex].children[groupName].result=result;}else if(result===ReviewResult.SUSPEND){if(map[instanceId][frameIndex].result!==ReviewResult.REJECT){map[instanceId][frameIndex].result=result;}if(map[instanceId][frameIndex].children[groupName].result!==ReviewResult.REJECT){map[instanceId][frameIndex].children[groupName].result=result;}}else if(result===ReviewResult.APPROVE){const len=shapeIds.length;map[instanceId][frameIndex].approveCount+=len;map[instanceId][frameIndex].children[groupName].approveCount+=len;const ontologyCount=store.ontology.ontologyMap[category];if(map[instanceId][frameIndex].approveCount===ontologyCount.count){map[instanceId][frameIndex].result=ReviewResult.APPROVE;}if(map[instanceId][frameIndex].children[groupName].approveCount===ontologyCount.children[groupName]){map[instanceId][frameIndex].children[groupName].result=ReviewResult.APPROVE;}}});return map;});useEffect(()=>{onLoad();},[]);useEffect(()=>{if(selectedShapeInfo===null||selectedShapeInfo===void 0?void 0:selectedShapeInfo.instanceId){store.review.setSelectedMissingReview();}},[selectedShapeInfo]);const getInstance=instanceId=>displayedInstances[instanceId];const getGroup=function(instanceId,groupName){var _instance$children$fi;let frameIndex=arguments.length>2&&arguments[2]!==undefined?arguments[2]:currentFrame;const instance=getInstance(instanceId);const group=instance===null||instance===void 0?void 0:(_instance$children$fi=instance.children.find(g=>g.name===groupName))===null||_instance$children$fi===void 0?void 0:_instance$children$fi.frames[frameIndex];return group;};const getShape=function(instanceId,groupName,id){let frameIndex=arguments.length>3&&arguments[3]!==undefined?arguments[3]:currentFrame;const group=getGroup(instanceId,groupName,frameIndex);return group&&group.shapes&&(typeof id==='number'?group.shapes[id]:group.shapes[id]);};const setInstance=(id,instance)=>{setInstances({...instances,[id]:instance});};const setShape=(frameIndex,instanceId,groupName,id,shapeType,shape)=>{const instance=instances[instanceId]?cloneDeep(instances[instanceId]):undefined;if(instance){var _group;let group=instance.children.find(g=>g.name===groupName);let currentGroup=(_group=group)===null||_group===void 0?void 0:_group.frames[frameIndex];if(!group){group={name:groupName,shapeType,count:0,frames:{[frameIndex]:{frameIndex,count:0,shapes:{}}}};instance.children.push(group);currentGroup=group.frames[frameIndex];}else if(!currentGroup){group.frames[frameIndex]={frameIndex,count:0,shapes:{}};currentGroup=group.frames[frameIndex];}if(currentGroup!==undefined&&!currentGroup.shapes){currentGroup.shapes={};}let oldShape;if(shapeType===LandmarkEditType.KEYPOINT){oldShape=currentGroup.shapes[id];}else if(shapeType===LandmarkEditType.RECTANGLE){oldShape=currentGroup.shapes[id];}if(!shape&&oldShape){group.count=group.count?group.count-1:0;currentGroup.count=currentGroup.count?currentGroup.count-1:0;instance.notEmpty=(instance.notEmpty||0)-1;if(shapeType===LandmarkEditType.KEYPOINT){delete currentGroup.shapes[id];}else{delete currentGroup.shapes[id];}}else if(shape){if(!oldShape){instance.notEmpty=(instance.notEmpty||0)+1;group.count=group.count?group.count+1:1;currentGroup.count=currentGroup.count?currentGroup.count+1:1;}currentGroup.shapes={...currentGroup.shapes,[id]:shape};}setInstance(instanceId,instance);const groupInfo=store.ontology.getGroupData(instance.category,groupName);if((groupInfo===null||groupInfo===void 0?void 0:groupInfo.label_config)&&currentGroup.count===groupInfo.count&&!currentGroup.attributes){handleFormConfig(groupInfo.label_config,{},{instanceId,category:instance.category,groupName});}}};const updateStatus=async(curr,prev)=>{let newUpdatedShapes=[];let newUpdatedCategories=[];let updatedHandles=[];const newCategoryPathShapes=cloneDeep(categoryPathShapes);for(let m=0;m<prev.length;m+=1){const item=prev[m];if(item.type==='shape'){const{frameIndex,instanceId,groupName,category,index,id,shapeType}=item.status;const frameGroup={frameIndex,instanceId,category,groupName};let keyObj;if(shapeType===LandmarkEditType.KEYPOINT&&index!==undefined){keyObj={index};}else if(shapeType===LandmarkEditType.RECTANGLE&&id!==undefined){keyObj={id};}if(keyObj){setShape(frameIndex,instanceId,groupName,Object.values(keyObj)[0],shapeType);newUpdatedShapes.push({...frameGroup,...keyObj,shapeType});}}else if(item.type==='pointCategory-path-shape'){if(item.status.shape){delete newCategoryPathShapes[item.status.pointCategory];}}else if(item.type==='instance'){const{id,instance}=item.status;if(instance){const{updateShapes}=getFrameShapes([instance],currentFrame,true);newUpdatedShapes=[...newUpdatedShapes,...updateShapes];const instanceIndex=instanceIds.findIndex(v=>v===id);if(instanceIndex>=0){setInstance(id);const selectedIndex=instanceIndex-1;const newInstance=instances[instanceIds[selectedIndex]];if(newInstance){selectGroup(newInstance.id,newInstance.children[0].name,false);}else{selectGroup('','',false);}}}}else if(item.type==='group'){const{instanceId,frameIndex,groupName,attributes}=item.status;if(attributes){const newInstance=instances[instanceId]?cloneDeep(instances[instanceId]):undefined;const newGroup=newInstance===null||newInstance===void 0?void 0:newInstance.children.find(v=>v.name===groupName);if(newInstance&&newGroup){newGroup.frames[frameIndex].attributes=undefined;setInstance(instanceId,newInstance);}}}else if(item.type==='reviews'){store.review.setInitialData(item.status);}};for(let n=0;n<curr.length;n+=1){const item=curr[n];if(item.type==='handle'){updatedHandles=item.status;}else if(item.type==='shape'){const{instanceId,groupName,category,index,id,shapeType,shape,frameIndex}=item.status;const frameGroup={frameIndex,instanceId,category,groupName};if(shape){if(shapeType===LandmarkEditType.KEYPOINT&&index!==undefined){const point=shape;const{pointCategory,isKeyPoint,visible,attributes}=point;setShape(frameIndex,instanceId,groupName,index,shapeType,point);const updateIndex=newUpdatedShapes.findIndex(p=>p.instanceId===instanceId&&p.groupName===groupName&&p.index===index);const updateShape={pointCategory,isKeyPoint,visible,...(point.position&&{position:{...point.position}}),attributes};if(updateIndex>=0){newUpdatedShapes[updateIndex].shape=updateShape;}else{newUpdatedShapes.push({...frameGroup,index,shape:updateShape,shapeType});}}else if(shapeType===LandmarkEditType.RECTANGLE&&id!==undefined){const rectangle=shape;const{displayColor,visible,x,y,width,height}=rectangle;setShape(frameIndex,instanceId,groupName,id,LandmarkEditType.RECTANGLE,rectangle);const updateRectangle={id,x,y,width,height,displayColor,visible};const updateIndex=newUpdatedShapes.findIndex(rect=>rect.instanceId===instanceId&&rect.groupName===groupName&&rect.id===id);if(updateIndex>=0){newUpdatedShapes[updateIndex].shape=updateRectangle;}else{newUpdatedShapes.push({...frameGroup,id,shape:updateRectangle,shapeType});}}}}else if(item.type==='pointCategory-path-shape'){const{frameIndex,pointCategory,shape}=item.status;const keys=pointCategory.split('_');newUpdatedCategories.push({frameIndex,instanceId:keys[1],groupName:keys[2],category:instances[keys[1]].category,pointCategory:keys[3]});if(shape){newCategoryPathShapes[pointCategory]=shape;}}else if(item.type==='instance'){const{id,instance}=item.status;if(instance){setInstance(id,instance);selectGroup(instance.id,instance.children[0].name,false);const{updateShapes,updatedCategories:newCategories}=getFrameShapes([instance],currentFrame);newUpdatedShapes=[...newUpdatedShapes,...updateShapes];newUpdatedCategories=[...newUpdatedCategories,...newCategories];}}else if(item.type==='group'){const{instanceId,groupName,attributes,frameIndex}=item.status;const newInstance=instances[instanceId]?cloneDeep(instances[instanceId]):undefined;const newGroup=newInstance===null||newInstance===void 0?void 0:newInstance.children.find(v=>v.name===groupName);if(newInstance&&newGroup){Object.keys(newGroup.frames[frameIndex].shapes).forEach(id=>{var _canvas$current;const attrLayer=(_canvas$current=canvas.current)===null||_canvas$current===void 0?void 0:_canvas$current.getAttrLabelByKey(instanceId,groupName,id);if(attrLayer){var _canvas$current2;(_canvas$current2=canvas.current)===null||_canvas$current2===void 0?void 0:_canvas$current2.updateAttributeLabel(instanceId,newInstance.category,groupName,id,attributes);}});newGroup.frames[frameIndex].attributes=attributes;setInstance(instanceId,newInstance);}}else if(item.type==='reviews'){store.review.setInitialData(item.status);}};await setCategoryPathShapes(newCategoryPathShapes);await setUpdatedCategories(newUpdatedCategories);store.shape.setUpdatedShapes(newUpdatedShapes);store.handle.setUpdatedHandles(updatedHandles);};const handleUndo=()=>{if(!store.undo.undoDisabled&&!isReview){const item=store.undo.undo();if(item&&item.before){updateStatus(item.before,item.after);notification.success({message:'Undo successfully.'});}}};const handleRedo=()=>{if(!store.undo.redoDisabled&&!isReview){const item=store.undo.redo();if(item&&item.after){updateStatus(item.after,item.before);notification.success({message:'Redo successfully.'});}}};const handleChangeDrawMode=mode=>{if(store.review.isEditable){var _canvas$current3;(_canvas$current3=canvas.current)===null||_canvas$current3===void 0?void 0:_canvas$current3.clearHits();if(mode){setNextEmptyShape();}else{const{instanceId,category,groupName}=selectedShapeStatus;setSelectedShape(undefined,{instanceId,category,groupName});}store.review.setDrawMode(mode);}};const loadInitialData=async()=>{let data;const{initial_result:initialResult}=props;if(initialResult){try{data=await fetchResultByUrl(initialResult);}catch(e){// eslint-disable-next-line no-console\nconsole.log(\"Fetch data from \".concat(initialResult,\" error:\"),e);}}return data;};const addInstance=async ontologyName=>{const ontologyItem=store.ontology.ontology.find(category=>category.class_name===ontologyName);if(ontologyItem){const id=uuid();const sameOntologyInstances=instanceList.filter(v=>v.category===ontologyName).reverse();const number=sameOntologyInstances.length?sameOntologyInstances[0].number+1:1;const children=ontologyItem.children.map(v=>({name:v.name,shapeType:v.type,count:0,frames:{[currentFrame]:{frameIndex:currentFrame,count:0,shapes:{}}}}));const instance={id,number,displayColor:ontologyItem.display_color,notEmpty:0,category:ontologyItem.class_name,children};setDefaultInstances({[id]:instance});await handleInstanceChange({[id]:instance});if(ontologyItem.children&&ontologyItem.children.length>0){selectGroup(id,ontologyItem.children[0].name,false,{category:ontologyName,shapeType:ontologyItem.children[0].type});}}};const addInstanceInFrame=(instanceId,groupName)=>{const newInstance=instances[instanceId]?cloneDeep(instances[instanceId]):undefined;if(newInstance){if(groupName){const groupIdx=newInstance.children.findIndex(group=>group.name===groupName);if(groupIdx>=0){let copyFrame;Object.keys(newInstance.children[groupIdx].frames).forEach(i=>{const index=Number(i);const frame={...newInstance.children[groupIdx].frames[index]};frame.shapes={...frame.shapes};if((frame===null||frame===void 0?void 0:frame.count)&&frame.count>0){if(index<currentFrame){copyFrame=frame;}else if(index>currentFrame&&copyFrame===undefined){copyFrame=frame;}}});if(copyFrame!==undefined){newInstance.children[groupIdx].frames[currentFrame]={...copyFrame,frameIndex:currentFrame};newInstance.children[groupIdx].count+=copyFrame.count;newInstance.notEmpty+=copyFrame.count;}}}else{let copyFrameIdx;Object.keys(instancesFrames[instanceId]).forEach(i=>{const index=Number(i);if(index<currentFrame){copyFrameIdx=index;}else if(index>currentFrame&&copyFrameIdx===undefined){copyFrameIdx=index;}});if(copyFrameIdx!==undefined){newInstance.children.forEach(group=>{const copyFrame={...group.frames[copyFrameIdx]};copyFrame.shapes={...copyFrame.shapes};if(copyFrame){group.count+=copyFrame.count;newInstance.notEmpty+=group.count;group.frames[currentFrame]={...copyFrame,frameIndex:currentFrame};}});}}const{updateShapes,updatedCategories:newUpdatedCategories}=getFrameShapes([newInstance],currentFrame);handleInstanceChange({[instanceId]:newInstance});setUpdatedCategories(newUpdatedCategories);store.shape.setUpdatedShapes(updateShapes);}};const removeInstanceFrames=(type,instance,name)=>{if(instance){let delShapes=[];const newInstance=cloneDeep(instance);const update=(updateInstance,frameIndex)=>{updateInstance.children.forEach(group=>{if(name&&name===group.name||!name){if(group.frames[frameIndex]!==undefined){group.count-=group.frames[frameIndex].count;delete group.frames[frameIndex];}}});};if(type===DELETETYPE.CURRENT){const{updateShapes}=getFrameShapes([instance],currentFrame,true);delShapes=updateShapes;update(newInstance,currentFrame);}else if(type===DELETETYPE.FOLLOW||type===DELETETYPE.ALL){const diffFrame=type===DELETETYPE.FOLLOW?currentFrame:0;Array.from({length:frames.length-diffFrame}).forEach((_,i)=>{const frameIndex=i+diffFrame;const{updateShapes}=getFrameShapes([instance],frameIndex,true);delShapes=[...delShapes,...updateShapes];update(newInstance,frameIndex);});}if(name){delShapes=delShapes.filter(v=>v.groupName===name);}newInstance.notEmpty-=delShapes.length;store.shape.setUpdatedShapes(delShapes);handleInstanceChange({[newInstance.id]:newInstance});}};const handleInstanceChange=async(newInstances,status)=>{const ids=Object.keys(newInstances);const before=status?status.before:[];const after=status?status.after:[];if(ids.length>0){ids.forEach(async id=>{const oldInstance=instances[id]?cloneDeep(instances[id]):undefined;let isRemove=true;newInstances[id].children.forEach(child=>{if(Object.keys(child.frames).length>0){isRemove=false;}});before.push({type:'instance',status:{frameIndex:currentFrame,id,instance:oldInstance}});after.push({type:'instance',status:{frameIndex:currentFrame,id,instance:isRemove?undefined:newInstances[id]}});setInstance(id,isRemove?undefined:newInstances[id]);});}store.undo.saveStatus(before,after);};const onLoad=async()=>{var _result,_saverRef$current;setLoading(true);setReadOnly(isPreview(props.jobProxy.toolMode));// i18n\ni18n.setLocale(props.locale);// init payload\nawait store.init(props);let result;let initialData;let initInstancesData;try{result=await props.jobProxy.loadResult();initialData=await loadInitialData();}catch(e){notification.error({message:formatMessage('ANNOTATION_DATA_LOAD_ERROR'),duration:null});return;}// parse frames\nconst framesData=await parseFramesByPaylod({frames:props.image,imageData:(_result=result)===null||_result===void 0?void 0:_result.images});// preload image\nsetImagePreloader(loader(framesData.map(v=>v.url)));// set frame images\nsetFrames(framesData);if(result){if(Array.isArray(result)){// legacy data\nif(result[0]&&result[0].position){initInstancesData=initInstances(result,framesData.length);}else{initInstancesData=result;}}if(result.auditId){props.jobProxy.setAuditId(result.auditId);}if(result.instances){initInstancesData=result.instances;}else if(result.points){initInstancesData=initInstances(result.points,framesData.length);}// if (Array.isArray(result.handles)) {\n//   store.handle.init(result.handles);\n// }\nif(result.categoryPathShapes){const newCategoryPathShapes={};result.categoryPathShapes.forEach(_ref3=>{let{pointCategory,shape}=_ref3;newCategoryPathShapes[pointCategory]=shape;});setCategoryPathShapes(newCategoryPathShapes);}setImageSize({width:result.width,height:result.height});}// load reviews\n// await loadReviews();\nif(initialData){if(initialData.categoryPathShapes){const initialCategoryPathShapesData={};initialData.categoryPathShapes.forEach(_ref4=>{let{pointCategory,shape}=_ref4;initialCategoryPathShapesData[pointCategory]=shape;});setInitialCategoryPathShapes(initialCategoryPathShapesData);}let initialInstancesData;if(initialData.instances){initialInstancesData=initialData.instances;}else if(initialData.points){initialInstancesData=initInstances(result.points,framesData.length);}const{newInstances,categoryInstancesMap:newCategoryInstancesMap}=loadInstancesFromResult(initialInstancesData);setInitialInstances(newInstances);setInitialCategoryInstancesMap(newCategoryInstancesMap);}let currentInstances={};if(Array.isArray(initInstancesData)&&initInstancesData.length>0){const{newInstances}=loadInstancesFromResult(initInstancesData);await setDefaultInstances(newInstances);await setInstances(newInstances);currentInstances=newInstances;}setLoading(false);setFrame(0,currentInstances);(_saverRef$current=saverRef.current)===null||_saverRef$current===void 0?void 0:_saverRef$current.setTempSaved(true);// render completed\nprops.renderComplete();};/**\n   * set current frame\n   * @param frame\n   */const setFrame=async function(frameIndex){var _canvas$current4,_canvas$current5;let currentInstances=arguments.length>1&&arguments[1]!==undefined?arguments[1]:instances;let type=arguments.length>2?arguments[2]:undefined;if(frameIndex===currentFrame&&type!==CANVASSTATUS.INITIAL){return;}store.review.cancelUnfinishMissingReview();const currentInstanceList=Object.values(currentInstances);(_canvas$current4=canvas.current)===null||_canvas$current4===void 0?void 0:_canvas$current4.cleanLayer();(_canvas$current5=canvas.current)===null||_canvas$current5===void 0?void 0:_canvas$current5.setMultiShapesUnselected();imagePreloader===null||imagePreloader===void 0?void 0:imagePreloader.preload(frameIndex);await setCurrentFrame(frameIndex);let currentShapeStatus={...selectedShapeStatus,frameIndex};if(!currentShapeStatus.groupName&&currentInstanceList.length>0){const{id,category,children:[{name}]}=currentInstanceList[0];const group=store.ontology.getGroupData(category,name);currentShapeStatus={...currentShapeStatus,instanceId:id,category,groupName:name,shapeType:group===null||group===void 0?void 0:group.type};setSelectedOntologyGroup(name);}setSelectedShapeStatus(currentShapeStatus);const{updateShapes,updatedCategories:updatedCategoriesData}=getFrameShapes(currentInstanceList,frameIndex);setUpdatedCategories(updatedCategoriesData);store.shape.setUpdatedShapes(updateShapes);store.handle.changeFrame(frameIndex);};/**\n   * set visible review data\n   */const setReview=async()=>{if(initialInstances&&Object.keys(initialInstances).length>0){const newIsReview=!isReview;const displayInstances=newIsReview?initialInstances:instances||{};await setDefaultInstances(displayInstances);setFrame(currentFrame,displayInstances,CANVASSTATUS.INITIAL);setIsReview(newIsReview);}};const onSave=async function(){var _saverRef$current2,_canvas$current6,_canvas$current6$imag,_canvas$current7,_canvas$current7$imag;let submit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;if(loading){const loadError=formatMessage('ERROR_DATA_LOAD');notification.error({message:loadError});throw new Error(loadError);}(_saverRef$current2=saverRef.current)===null||_saverRef$current2===void 0?void 0:_saverRef$current2.disableLeaveCheck();const checkMissingPoints=props.check_missing_points===true&&submit===true;const newInstances=instanceList.filter(v=>v&&v.notEmpty).map(instance=>{const{id,category,number,displayColor,children}=instance;const ontologyInfo=store.ontology.getOntologyInfo(category);return{id,category,number,displayColor,children:children.map(group=>{const{frames:groupFrames}=group;return{...group,frames:Object.values(groupFrames).filter(v=>!!v&&v.count>0).map(frameGroup=>{if(frameGroup){const{frameIndex,count,shapes:groupShapes}=frameGroup;const groupInfo=store.ontology.getGroupData(instance.category,group.name);const newShapes=[];if(groupShapes){Object.keys(groupShapes).forEach(key=>{if(group.shapeType===LandmarkEditType.KEYPOINT){const pointIndex=parseInt(key,10);const point=groupShapes&&groupShapes[pointIndex];if(point){point.index=pointIndex;newShapes.push(point);}}else if(group.shapeType===LandmarkEditType.RECTANGLE){const rectangle=groupShapes&&groupShapes[key];if(rectangle)newShapes.push(rectangle);}});}if(checkMissingPoints&&frames[frameIndex].valid!==false&&groupInfo&&newShapes.length<groupInfo.count){const errMsg=formatMessage('ERROR_INCOMPLETE',{values:{frameIndex:frameIndex+1,class_name:(ontologyInfo===null||ontologyInfo===void 0?void 0:ontologyInfo.display_name)||(ontologyInfo===null||ontologyInfo===void 0?void 0:ontologyInfo.class_name),index:\"\".concat(instance.number),name:group.name,annotated:\"\".concat(count),total:\"\".concat(groupInfo.count)}});notification.error({message:errMsg});throw new Error(errMsg);}return{...frameGroup,shapes:newShapes};}return undefined;})};})};});const statData=getInstanceStatistics();const statistics=await props.jobProxy.saveResultStat(statData);const handles=store.handle.getHandles();return props.jobProxy.saveResult({auditId:props.jobProxy.auditId,width:((_canvas$current6=canvas.current)===null||_canvas$current6===void 0?void 0:(_canvas$current6$imag=_canvas$current6.imageCanvas)===null||_canvas$current6$imag===void 0?void 0:_canvas$current6$imag.width)||(imageSize===null||imageSize===void 0?void 0:imageSize.width),height:((_canvas$current7=canvas.current)===null||_canvas$current7===void 0?void 0:(_canvas$current7$imag=_canvas$current7.imageCanvas)===null||_canvas$current7$imag===void 0?void 0:_canvas$current7$imag.height)||(imageSize===null||imageSize===void 0?void 0:imageSize.height),instances:newInstances,handles,categoryPathShapes:Object.keys(categoryPathShapes).map(pointCategory=>({pointCategory,shape:categoryPathShapes[pointCategory]})),images:frames,statistics},submit);};/**\n   * get review statistics\n   */const getStatistics=()=>{const statShapes={};const objects={total:0,approved:0,rejected:0,suspended:0,missed:0};const reviews=store.review.reviews.filter(r=>r.result!==ReviewResult.APPROVE);const instancesList=Object.values(instances).filter(v=>!!v);for(let i=0;i<instancesList.length;i+=1){const instance=instancesList[i];for(let j=0;j<instance.children.length;j+=1){const item=instance.children[j];const shape=item.shapeType;const itemFrames=Object.values(item.frames);for(let k=0;k<itemFrames.length;k+=1){const frame=itemFrames[k];if(!statShapes[shape]){statShapes[shape]={rejected:0,approved:0,suspended:0,missed:0,total:0};}const frameReviews=reviews.filter(r=>r.frameIndex===frame.frameIndex&&r.instanceId===instance.id&&r.groupName===item.name);const frameShapes=Object.keys(frame.shapes);for(let l=0;l<frameShapes.length;l+=1){statShapes[shape].total+=1;objects.total+=1;const shapeId=shape===LandmarkEditType.KEYPOINT?Number(frameShapes[l]):frameShapes[l];const review=frameReviews.find(r=>r.shapeIds.indexOf(shapeId)>=0);if((review===null||review===void 0?void 0:review.result)===ReviewResult.REJECT){statShapes[shape].rejected+=1;objects.rejected+=1;}else if((review===null||review===void 0?void 0:review.result)===ReviewResult.SUSPEND){statShapes[shape].suspended+=1;objects.suspended+=1;}else{statShapes[shape].approved+=1;objects.approved+=1;}}}}}return{objects,shapes:statShapes};};/**\n   * get instance statistics\n   */const getInstanceStatistics=()=>{const{ontology}=store.ontology;const data={elements:[],categories:ontology.map(_ref5=>{let{class_name:className}=_ref5;return className;}),shapes:new Set(),summary:{},frameCount:frames.length,annotatedFrames:new Set()};const instancesList=Object.values(instances).filter(v=>!!v);for(let i=0;i<instancesList.length;i+=1){const{id,category,children}=instancesList[i];for(let j=0;j<children.length;j+=1){const item=children[j];const itemFrames=Object.values(item.frames);for(let k=0;k<itemFrames.length;k+=1){const frame=itemFrames[k];const frameShapes=Object.values(frame.shapes);const shape=item.shapeType;data.shapes.add(shape);const key=\"\".concat(shape,\"_\").concat(category);if(!data.summary[key]){data.summary[key]={ids:[],category,shape,count:0,distinctCount:0};}const shapeCount=frameShapes.length;if(shapeCount>0){data.summary[key].count+=shapeCount;if(!data.summary[key].ids.includes(id)){data.summary[key].distinctCount+=shapeCount;data.summary[key].ids.push(id);}data.annotatedFrames.add(frame.frameIndex);data.elements.push(...frameShapes.map(s=>({instance:id,shape,frame:frame.frameIndex+1,category,id:s.id||s.index})));}}}}return{...data,shapes:Array.from(data.shapes),summary:Object.values(data.summary).map(_ref6=>{let{category,shape,count,distinctCount}=_ref6;return{category,shape,count,distinctCount};}),annotatedFrames:Array.from(data.annotatedFrames),annotatedFrameCount:data.annotatedFrames.size};};const loadReviews=async()=>{const reviews=await props.jobProxy.loadReviews();store.review.setInitialData(reviews);};const saveReviews=function(){var _saverRef$current3;let type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'submit';if(type==='submit'){const hasSuspend=store.review.reviews.find(review=>review.result===ReviewResult.SUSPEND);if(hasSuspend){throw new Error(formatMessage('QC_SUSPEND_ERROR'));}}(_saverRef$current3=saverRef.current)===null||_saverRef$current3===void 0?void 0:_saverRef$current3.disableLeaveCheck();const reviews=toJS(store.review.reviews).map(r=>{const{instanceId:id,groupName,shapeIds}=r;const instance=getInstance(id);const ontologyItem=store.ontology.getOntologyInfo(instance===null||instance===void 0?void 0:instance.category);const groupItem=ontologyItem&&ontologyItem.children&&ontologyItem.children.find(group=>group.name===groupName);const label=ontologyItem&&instance?\"\".concat(ontologyItem.display_name||'').concat(instance.number).concat(groupItem?\"-\".concat(groupItem.display_name):'').concat(shapeIds&&shapeIds.length&&typeof shapeIds[0]==='number'?\"[\".concat(shapeIds.join(','),\"]\"):''):'Deleted';return{...r,label};});const missingReviews=toJS(store.review.missingReviews).map(r=>({...r,label:'Missed'}));return props.jobProxy.saveReviews([...reviews,...missingReviews],type==='submit');};const handleSave=async()=>{const{toolMode}=props.jobProxy;if(isPreview(toolMode)){return;}try{if(!isAnnotationReadonly(toolMode)){await onSave(false);}if(store.review.isEnabled){await saveReviews('save');}notification.success({message:formatMessage('SAVE_SUCCESS')});}catch(e){notification.error({message:formatMessage('SAVE_FAIL')});}};const setSelectedShape=(id,groupData)=>{let newSelectedShapeStatus=cloneDeep(selectedShapeStatus);newSelectedShapeStatus.id=id;if(groupData){const{instanceId,category,groupName,shapeType}=groupData;if(instanceId!==(selectedInstance===null||selectedInstance===void 0?void 0:selectedInstance.id)){selectGroup(instanceId,groupName,false);}else if(groupName!==selectedOntologyGroup){setSelectedOntologyGroup(groupName);}newSelectedShapeStatus={...newSelectedShapeStatus,instanceId,category,shapeType:shapeType||(ontologyGroup===null||ontologyGroup===void 0?void 0:ontologyGroup.type)||undefined,groupName};}setSelectedShapeStatus(newSelectedShapeStatus);};const setNextEmptyShape=function(){let shapeStatus=arguments.length>0&&arguments[0]!==undefined?arguments[0]:selectedShapeStatus;if(shapeStatus){let{id}=shapeStatus;const{instanceId,groupName,shapeType}=shapeStatus;if(shapeType===LandmarkEditType.KEYPOINT){let categoryScannedCount=0;let categoryIndex=selectedCategoryIndex>=0?selectedCategoryIndex:0;id=shapeStatus.id;while(categories.length>0&&categoryScannedCount<=categories.length){const{range=[]}=categories[categoryIndex];if(id===undefined||id===-1){id=range[0]-1;}if(id!==range[1]){id+=1;}else{categoryIndex=categoryIndex<categories.length-1?categoryIndex+1:0;categoryScannedCount+=1;id=categories[categoryIndex].range[0]||0;}if(!instanceId||getShape(instanceId,groupName,id)===undefined){break;}}}else if(ontologyGroup){id=undefined;}setSelectedShapeStatus({...shapeStatus,id});}};const onCategoriesUpdated=()=>{setUpdatedCategories([]);};const handleShapesChange=(newShapes,groupsAttributes,status)=>{if(newShapes.length===0){return;}const before=status?status.before:[];const after=status?status.after:[];const{instanceId,groupName}=newShapes[0];const newInstance=instances[instanceId]?cloneDeep(instances[instanceId]):undefined;const groupInfo=store.ontology.getGroupData((newInstance===null||newInstance===void 0?void 0:newInstance.category)||'',groupName);newInstance===null||newInstance===void 0?void 0:newInstance.children.forEach(child=>{if(child.name===groupName){if(!child.frames[currentFrame]){child.frames[currentFrame]={frameIndex:currentFrame,count:0,shapes:{}};};const currentGroup=child.frames[currentFrame];for(let i=0;i<newShapes.length;i+=1){const{id,frameIndex,index,shape}=newShapes[i];let oldShape;if(child.shapeType===LandmarkEditType.KEYPOINT&&typeof index==='number'){oldShape=child.frames[frameIndex].shapes[index];child.frames[frameIndex].shapes[index]={...oldShape,...shape};}else if(child.shapeType===LandmarkEditType.RECTANGLE&&typeof id==='string'){oldShape=child.frames[frameIndex].shapes[id];child.frames[frameIndex].shapes[id]={...oldShape,...shape};}if(!shape&&oldShape){child.count=child.count?child.count-1:0;currentGroup.count=currentGroup.count?currentGroup.count-1:0;newInstance.notEmpty=(newInstance.notEmpty||0)-1;}else if(shape&&!oldShape){child.count=child.count?child.count+1:1;currentGroup.count=currentGroup.count?currentGroup.count+1:1;newInstance.notEmpty=(newInstance.notEmpty||0)+1;}};if((groupInfo===null||groupInfo===void 0?void 0:groupInfo.label_config)&&currentGroup.count===(groupInfo===null||groupInfo===void 0?void 0:groupInfo.count)&&!currentGroup.attributes){handleFormConfig(groupInfo.label_config,{},{instanceId,category:newInstance.category,groupName});}}});if(groupsAttributes&&groupsAttributes.length>0){groupsAttributes.forEach(_ref7=>{let{instanceId:id,name,category,attributes}=_ref7;const frameGroup={frameIndex:currentFrame,instanceId:id,category,groupName:name};before.push({type:'group',status:{...frameGroup}});after.push({type:'group',status:{...frameGroup,attributes}});});}if(newInstance){handleInstanceChange({[instanceId]:newInstance},{before,after});}else{store.undo.saveStatus(before,after);}};const handleShapesRemove=removeShapes=>{if(removeShapes.length===0){return;}const changeInstances={};const{instanceId,groupName}=removeShapes[0];const newInstance=instances[instanceId]?cloneDeep(instances[instanceId]):undefined;if(newInstance){newInstance===null||newInstance===void 0?void 0:newInstance.children.forEach(child=>{if(child.name===groupName){const currentGroup=child.frames[currentFrame];removeShapes.forEach(_ref8=>{let{id,frameIndex,index}=_ref8;if(child.shapeType===LandmarkEditType.KEYPOINT&&typeof index==='number'){delete child.frames[frameIndex].shapes[index];}else if(child.shapeType===LandmarkEditType.RECTANGLE&&typeof id==='string'){delete child.frames[frameIndex].shapes[id];}child.count=child.count?child.count-1:0;currentGroup.count=currentGroup.count?currentGroup.count-1:0;newInstance.notEmpty=(newInstance.notEmpty||0)-1;});}});changeInstances[instanceId]=newInstance;handleInstanceChange({[instanceId]:newInstance});}};const togglePointsVisibility=points=>{const list=[];points.forEach(_ref9=>{let{instanceId,category,groupName,index}=_ref9;const point=getShape(instanceId,groupName,index);if(point){list.push({frameIndex:selectedShapeStatus.frameIndex,instanceId,category,groupName,index,shapeType:LandmarkEditType.KEYPOINT,shape:{...point,visible:!point.visible}});}});handleShapesChange(list);};const setCategoryPathShape=(categoryKey,shapeType,_updatedShapes)=>{const before=[{type:'pointCategory-path-shape',status:{frameIndex:selectedShapeStatus.frameIndex,pointCategory:categoryKey,shape:categoryPathShapes[categoryKey]}}];const after=[{type:'pointCategory-path-shape',status:{frameIndex:selectedShapeStatus.frameIndex,pointCategory:categoryKey,shape:shapeType}}];const newCategoryPathShapes=cloneDeep(categoryPathShapes);if(shapeType&&_updatedShapes){newCategoryPathShapes[categoryKey]=shapeType;handleShapesChange(_updatedShapes,undefined,{before,after});}else{delete newCategoryPathShapes[categoryKey];store.undo.saveStatus(before,after);}setCategoryPathShapes(newCategoryPathShapes);};const selectGroup=function(id,groupName){let isFit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;let groupData=arguments.length>3?arguments[3]:undefined;const instance=isReview?initialInstances[id]:instances[id];const newSelectedShapeStatus={frameIndex:currentFrame,instanceId:id,category:(groupData===null||groupData===void 0?void 0:groupData.category)||selectedShapeStatus.category,groupName,shapeType:(groupData===null||groupData===void 0?void 0:groupData.shapeType)||undefined,id:undefined};if(instance){var _canvas$current8;const ontologyItem=store.ontology.ontology.find(v=>v.class_name===instance.category);const group=ontologyItem===null||ontologyItem===void 0?void 0:ontologyItem.children.find(v=>v.name===groupName);newSelectedShapeStatus.category=instance.category;newSelectedShapeStatus.shapeType=(group===null||group===void 0?void 0:group.type)||undefined;if(isDrawMode){if((group===null||group===void 0?void 0:group.type)===LandmarkEditType.KEYPOINT){const index=group.categories&&group.categories[0]&&group.categories[0].range[0]||0;// set selected to the empty\nnewSelectedShapeStatus.id=index;}else if((group===null||group===void 0?void 0:group.type)===LandmarkEditType.RECTANGLE){instance.children.forEach(child=>{var _child$frames$current;if(child.name===groupName&&((_child$frames$current=child.frames[currentFrame])===null||_child$frames$current===void 0?void 0:_child$frames$current.shapes)){const rectangles=child.frames[currentFrame].shapes;newSelectedShapeStatus.id=Object.keys(rectangles)[0];}});}}(_canvas$current8=canvas.current)===null||_canvas$current8===void 0?void 0:_canvas$current8.updateGroupBox(id,instance.category,groupName);if(isFit){var _canvas$current9;(_canvas$current9=canvas.current)===null||_canvas$current9===void 0?void 0:_canvas$current9.fitSelected(id,groupName);}}setSelectedShapeStatus(newSelectedShapeStatus);setSelectedOntologyGroup(groupName);};const editShapeForm=()=>{const{instanceId,groupName,shapeType,id,category}=selectedShapeStatus;if(shapeType===LandmarkEditType.KEYPOINT){const point=getShape(instanceId,groupName,id);const currentOntologyGroup=store.ontology.getGroupData(category,groupName);if(point&&(currentOntologyGroup===null||currentOntologyGroup===void 0?void 0:currentOntologyGroup.point_label_config)){handleFormConfig(currentOntologyGroup.point_label_config,point.attributes||{},{instanceId,category,groupName},id,point);}}};const editGroupForm=()=>{const{instanceId,groupName,category}=selectedShapeStatus;const group=getGroup(instanceId,groupName);const currentOntologyGroup=store.ontology.getGroupData(category,groupName);if(group&&(currentOntologyGroup===null||currentOntologyGroup===void 0?void 0:currentOntologyGroup.label_config)){handleFormConfig(currentOntologyGroup.label_config,group.attributes||{},{instanceId,category,groupName});}};const handleFormConfig=(config,values,group,index,point)=>{var _attributesRef$curren;setFormConfig(config);setFormValues(values);setEditFormObject({...group,index,point});let title=getShapeLabel(group.instanceId,group.category,group.groupName)||formatMessage('EDIT_ATTRIBUTES');if(index!==undefined){title=\"\".concat(title,\" [\").concat(index,\"]\");}(_attributesRef$curren=attributesRef.current)===null||_attributesRef$curren===void 0?void 0:_attributesRef$curren.showModal(title);};const getShapeLabel=(instanceId,category,groupName)=>{let title='';if(displayedInstances){const instance=instances[instanceId];const groupData=store.ontology.getGroupData(category,groupName);if(instance&&groupData){title=\"\".concat(formatMessage('VALIDATION_FRAME',{values:{frameIndex:currentFrame+1}})).concat(groupData.class_display_name||'').concat(instance.number||'',\"-\").concat(groupData.display_name||groupData.name);}}return title;};const setAttributes=values=>{if(editFormObject){const{instanceId,category,groupName,index,point}=editFormObject;const before=[];const after=[];const frameGroup={frameIndex:currentFrame,instanceId,category,groupName};if((index||index===0)&&point){var _canvas$current10;const oldPoint=getShape(instanceId,groupName,index);const newPoint={...oldPoint,...point,attributes:values};setShape(currentFrame,instanceId,groupName,index,LandmarkEditType.KEYPOINT,newPoint);before.push({type:'shape',status:{...frameGroup,index,shape:oldPoint,shapeType:LandmarkEditType.KEYPOINT}});after.push({type:'shape',status:{...frameGroup,index,shape:newPoint,shapeType:LandmarkEditType.KEYPOINT}});(_canvas$current10=canvas.current)===null||_canvas$current10===void 0?void 0:_canvas$current10.updateAttributeLabel(instanceId,category,groupName,index,values);}else{var _newInstance$children;const newInstance=instances[instanceId]?cloneDeep(instances[instanceId]):undefined;const newGroup=newInstance===null||newInstance===void 0?void 0:(_newInstance$children=newInstance.children.find(v=>v.name===groupName))===null||_newInstance$children===void 0?void 0:_newInstance$children.frames[currentFrame];const oldGroup=getGroup(instanceId,groupName);const ontologyChild=store.ontology.getGroupData(category,groupName);if(newInstance&&newGroup&&ontologyChild){const oldAttrs=oldGroup===null||oldGroup===void 0?void 0:oldGroup.attributes;newGroup.attributes=values;setInstance(instanceId,newInstance);before.push({type:'group',status:{...frameGroup,attributes:oldAttrs}});after.push({type:'group',status:{...frameGroup,attributes:values}});if(oldGroup===null||oldGroup===void 0?void 0:oldGroup.shapes){if(ontologyChild.type===LandmarkEditType.RECTANGLE){Object.keys(oldGroup.shapes).forEach(id=>{var _canvas$current11;(_canvas$current11=canvas.current)===null||_canvas$current11===void 0?void 0:_canvas$current11.updateAttributeLabel(instanceId,category,groupName,id,values,newInstance.number);});}}}}if(before.length>0){store.undo.saveStatus(before,after);}}setFormConfig(null);setFormValues(null);setEditFormObject(null);};/**\n   * set active attributes mode\n   * @param activeMode\n   * @param type point or object\n   */const onAttributesModeChanges=function(activeMode){var _canvas$current12;let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'object';(_canvas$current12=canvas.current)===null||_canvas$current12===void 0?void 0:_canvas$current12.updatelabelVisible(activeMode,type);};const onSizeChange=()=>{var _canvas$current13;(_canvas$current13=canvas.current)===null||_canvas$current13===void 0?void 0:_canvas$current13.resizeShapes();};const onFilterChange=()=>{var _canvas$current14;(_canvas$current14=canvas.current)===null||_canvas$current14===void 0?void 0:_canvas$current14.updateFilters();};const onLabelModeChange=()=>{var _canvas$current15;if((_canvas$current15=canvas.current)===null||_canvas$current15===void 0?void 0:_canvas$current15.labelLayer){canvas.current.labelLayer.visible=store.setting.labelMode;}};const onGridVisibleChange=()=>{var _canvas$current16;if((_canvas$current16=canvas.current)===null||_canvas$current16===void 0?void 0:_canvas$current16.gridLayer){canvas.current.gridLayer.visible=store.setting.isGridVisible;}};const setFrameValid=(frame,valid)=>{const newFramesData=cloneDeep(frames);newFramesData[frame].valid=valid;setFrames(newFramesData);};useImperativeHandle(ref,()=>({onSave,saveReviews,getStatistics}));return/*#__PURE__*/React.createElement(Observer,null,()=>{var _frames$currentFrame,_frames$currentFrame2;return/*#__PURE__*/React.createElement(\"div\",{className:\"landmark-annotation-app\"},/*#__PURE__*/React.createElement(AutoSaver,{ref:saverRef,leaveCheck:true,data:{instance:instances,reviews:store.review.qaWarnings},save:handleSave}),/*#__PURE__*/React.createElement(Toolbar,{readonly:readonly||loading||isReview,isReview:isReview,isPreview:readonly,initialDataLength:Object.keys(initialInstances).length,onAttributesModeChanges:onAttributesModeChanges,onSizeChange:onSizeChange,onFilterChange:onFilterChange,onLabelModeChange:onLabelModeChange,onGridVisibleChange:onGridVisibleChange,onSave:handleSave,handleUndo:handleUndo,handleRedo:handleRedo,setReview:setReview,handleChangeDrawMode:handleChangeDrawMode}),/*#__PURE__*/React.createElement(\"div\",{className:\"container\",style:{height:\"calc(100% - \".concat(frames.length>1&&currentFrame>=0?\"\".concat(frameControlHeight+35,\"px\"):'35px',\")\"),transition:'height 0.15s'}},/*#__PURE__*/React.createElement(TabMenu,{tabs:[{title:formatMessage('MENU_INSTANCE'),key:'instance',count:0,content:/*#__PURE__*/React.createElement(SideMenus,{canvas:canvas.current,readonly:readonly||loading||isReview||!isDrawMode,loading:loading,instances:instanceList,currentFrame:currentFrame,instancesFrames:instancesFrames,selectedInstance:selectedInstance,selectedOntologyGroup:selectedOntologyGroup,instancesReviewsMap:instancesReviewsMap,addInstance:addInstance,selectGroup:selectGroup,addInstanceInFrame:addInstanceInFrame,removeInstanceFrames:removeInstanceFrames})},{title:formatMessage('MENU_WARNING'),key:'validator',count:store.review.warnings.length,content:/*#__PURE__*/React.createElement(Validator,{canvas:canvas.current,ref:validatorRef,instances:instances,jobProxy:props.jobProxy,warnings:store.review.warnings||[],setFrame:setFrame,setSelectedShape:setSelectedShape,selectGroup:selectGroup,getInstance:getInstance,saveResult:()=>onSave(false)})}]}),selectedInstance&&ontologyGroup&&!isReview&&/*#__PURE__*/React.createElement(Board,{categories:categories,categoryPathShapes:displayedCategoryPathShapes,points:shapes,ontologyGroup:ontologyGroup,selectedShapeStatus:selectedShapeStatus,annotated:annotatedPointOrShapeCount,total:totalPointCount,drawMode:isDrawMode,setSelectedShape:id=>{const{instanceId,category,groupName}=selectedShapeStatus;setSelectedShape(id,{instanceId,category,groupName});},frameControlHeight:frameControlHeight,readonly:loading,instanceReviewsMap:store.review.frameReviewsMap[currentFrame]}),/*#__PURE__*/React.createElement(Canvas,{ref:canvas,readonly:readonly,loading:loading,isReview:isReview,currentFrame:currentFrame,image:(_frames$currentFrame=frames[currentFrame])===null||_frames$currentFrame===void 0?void 0:_frames$currentFrame.url,categories:categories,selectedInstance:selectedInstance,selectedGroupName:selectedOntologyGroup,ontologyGroup:ontologyGroup,annotatedPointOrShapeCount:annotatedPointOrShapeCount,updatedCategories:updatedCategories,defaultInstances:defaultInstances,selectedShapeStatus:selectedShapeStatus,selectedShapeInfo:selectedShapeInfo,changeLoading:setLoading,selectGroup:selectGroup,setSelectedShape:setSelectedShape,handleShapesChange:handleShapesChange,onCategoriesUpdated:onCategoriesUpdated,handleShapesRemove:handleShapesRemove,togglePointsVisibility:togglePointsVisibility,setNextEmptyShape:setNextEmptyShape,editShapeForm:editShapeForm,editGroupForm:editGroupForm,onSave:handleSave,getInstance:getInstance,categoryPathShapes:displayedCategoryPathShapes,setCategoryPathShape:setCategoryPathShape,handleUndo:handleUndo,handleRedo:handleRedo,setReview:setReview,handleChangeDrawMode:handleChangeDrawMode}),/*#__PURE__*/React.createElement(\"div\",{className:\"arributes-panel\"},selectedShapeStatus.groupName&&/*#__PURE__*/React.createElement(Information,{pointCategory:(categories[selectedCategoryIndex]||{}).name,point:selectedShapeStatus,annotated:annotatedPointOrShapeCount,total:totalPointCount}),((_frames$currentFrame2=frames[currentFrame])===null||_frames$currentFrame2===void 0?void 0:_frames$currentFrame2.url)&&/*#__PURE__*/React.createElement(FrameAttributes,{currentFrame:currentFrame,currentFrameValid:frames[currentFrame].valid,setFrameValid:setFrameValid})),/*#__PURE__*/React.createElement(Attributes,{ref:attributesRef,readonly:readonly||isReview||!isDrawMode,config:formConfig,values:formValues,onValuesChange:setAttributes})),frames.length>1&&currentFrame>=0&&/*#__PURE__*/React.createElement(FrameControl,{frames:frames,frameLoading:loading,currentFrame:currentFrame,categoryInstancesMap:displayedCategoryInstancesMap,instancesReviewsMap:instancesReviewsMap,instances:displayedInstances,selectedInstance:selectedInstance,selectedInstanceGroup:selectedOntologyGroup,selectGroup:selectGroup,setFrame:setFrame,onHeightChange:setFrameControlHeight}),store.review.selectedReview&&/*#__PURE__*/React.createElement(QualityControl,{review:store.review.selectedReview,readonly:readonly||isDrawMode,jobProxy:props.jobProxy,selectedShapeStatus:selectedShapeStatus,getShapeLabel:getShapeLabel}),/*#__PURE__*/React.createElement(Missing,{readonly:readonly||isDrawMode,jobProxy:props.jobProxy}));});});export default LandmarkAnnotation;","map":{"version":3,"names":["React","useState","useRef","useMemo","useEffect","forwardRef","useImperativeHandle","Observer","useLocalObservable","useObserver","cloneDeep","notification","v4","uuid","toJS","TabMenu","AutoSaver","Toolbar","SideMenus","Board","Canvas","FrameControl","Validator","Attributes","QualityControl","Information","FrameAttributes","formatMessage","i18n","LandmarkEditType","DELETETYPE","ReviewResult","fetchResultByUrl","loader","isPreview","isAnnotationReadonly","initInstances","loadInstancesFromResult","getFrameShapes","parseFramesByPaylod","getInstanceFrames","rootStore","useAsyncState","Missing","config","top","CANVASSTATUS","LandmarkAnnotation","props","ref","store","readonly","setReadOnly","frames","setFrames","currentFrame","setCurrentFrame","frameControlHeight","setFrameControlHeight","selectedOntologyGroup","setSelectedOntologyGroup","categoryPathShapes","setCategoryPathShapes","updatedCategories","setUpdatedCategories","defaultInstances","setDefaultInstances","instances","setInstances","imagePreloader","setImagePreloader","selectedShapeStatus","setSelectedShapeStatus","frameIndex","category","instanceId","groupName","shapeType","undefined","id","loading","setLoading","formConfig","setFormConfig","formValues","setFormValues","imageSize","setImageSize","width","height","editFormObject","setEditFormObject","isReview","setIsReview","initialInstances","setInitialInstances","initialCategoryInstancesMap","setInitialCategoryInstancesMap","initialCategoryPathShapes","setInitialCategoryPathShapes","attributesRef","saverRef","validatorRef","canvas","isDrawMode","review","drawMode","displayedInstances","instanceIds","Object","keys","instanceList","values","filter","v","selectedInstance","categoryInstancesMap","newCategoryInstancesMap","forEach","_ref","number","displayedCategoryInstancesMap","displayedCategoryPathShapes","selectedOntology","ontologyItem","ontology","find","class_name","ontologyGroup","groupItem","children","group","name","categories","selectedCategoryIndex","KEYPOINT","findIndex","c","range","length","instancesFrames","items","instance","shapes","_selectedInstance$chi","g","selectedShapeInfo","info","type","displayColor","display_color","_categories$selectedC","pointCategory","isKeyPoint","includes","annotatedPointOrShapeCount","entries","_ref2","totalPointCount","count","instancesReviewsMap","map","reviews","_instances$instanceId","shapeIds","result","approveCount","REJECT","SUSPEND","APPROVE","len","ontologyCount","ontologyMap","onLoad","setSelectedMissingReview","getInstance","getGroup","_instance$children$fi","arguments","getShape","setInstance","setShape","shape","_group","currentGroup","push","oldShape","RECTANGLE","notEmpty","groupInfo","getGroupData","label_config","attributes","handleFormConfig","updateStatus","curr","prev","newUpdatedShapes","newUpdatedCategories","updatedHandles","newCategoryPathShapes","m","item","index","status","frameGroup","keyObj","updateShapes","instanceIndex","selectedIndex","newInstance","selectGroup","newGroup","setInitialData","n","point","visible","updateIndex","p","updateShape","position","rectangle","x","y","updateRectangle","rect","split","newCategories","_canvas$current","attrLayer","current","getAttrLabelByKey","_canvas$current2","updateAttributeLabel","setUpdatedShapes","handle","setUpdatedHandles","handleUndo","undo","undoDisabled","before","after","success","message","handleRedo","redoDisabled","redo","handleChangeDrawMode","mode","isEditable","_canvas$current3","clearHits","setNextEmptyShape","setSelectedShape","setDrawMode","loadInitialData","data","initial_result","initialResult","e","console","log","concat","addInstance","ontologyName","sameOntologyInstances","reverse","handleInstanceChange","addInstanceInFrame","groupIdx","copyFrame","i","Number","frame","copyFrameIdx","removeInstanceFrames","delShapes","update","updateInstance","CURRENT","FOLLOW","ALL","diffFrame","Array","from","_","newInstances","ids","oldInstance","isRemove","child","saveStatus","_result","_saverRef$current","jobProxy","toolMode","setLocale","locale","init","initialData","initInstancesData","loadResult","error","duration","framesData","image","imageData","images","url","isArray","auditId","setAuditId","points","_ref3","initialCategoryPathShapesData","_ref4","initialInstancesData","currentInstances","setFrame","setTempSaved","renderComplete","_canvas$current4","_canvas$current5","INITIAL","cancelUnfinishMissingReview","currentInstanceList","cleanLayer","setMultiShapesUnselected","preload","currentShapeStatus","updatedCategoriesData","changeFrame","setReview","newIsReview","displayInstances","onSave","_saverRef$current2","_canvas$current6","_canvas$current6$imag","_canvas$current7","_canvas$current7$imag","submit","loadError","Error","disableLeaveCheck","checkMissingPoints","check_missing_points","ontologyInfo","getOntologyInfo","groupFrames","groupShapes","newShapes","key","pointIndex","parseInt","valid","errMsg","display_name","annotated","total","statData","getInstanceStatistics","statistics","saveResultStat","handles","getHandles","saveResult","imageCanvas","getStatistics","statShapes","objects","approved","rejected","suspended","missed","r","instancesList","j","itemFrames","k","frameReviews","frameShapes","l","shapeId","indexOf","elements","_ref5","className","Set","summary","frameCount","annotatedFrames","add","distinctCount","shapeCount","s","_ref6","annotatedFrameCount","size","loadReviews","saveReviews","_saverRef$current3","hasSuspend","label","join","missingReviews","handleSave","isEnabled","groupData","newSelectedShapeStatus","shapeStatus","categoryScannedCount","categoryIndex","onCategoriesUpdated","handleShapesChange","groupsAttributes","_ref7","handleShapesRemove","removeShapes","changeInstances","_ref8","togglePointsVisibility","list","_ref9","setCategoryPathShape","categoryKey","_updatedShapes","isFit","_canvas$current8","_child$frames$current","rectangles","updateGroupBox","_canvas$current9","fitSelected","editShapeForm","currentOntologyGroup","point_label_config","editGroupForm","_attributesRef$curren","title","getShapeLabel","showModal","class_display_name","setAttributes","_canvas$current10","oldPoint","newPoint","_newInstance$children","oldGroup","ontologyChild","oldAttrs","_canvas$current11","onAttributesModeChanges","activeMode","_canvas$current12","updatelabelVisible","onSizeChange","_canvas$current13","resizeShapes","onFilterChange","_canvas$current14","updateFilters","onLabelModeChange","_canvas$current15","labelLayer","setting","labelMode","onGridVisibleChange","_canvas$current16","gridLayer","isGridVisible","setFrameValid","newFramesData","createElement","_frames$currentFrame","_frames$currentFrame2","leaveCheck","qaWarnings","save","initialDataLength","style","transition","tabs","content","warnings","instanceReviewsMap","frameReviewsMap","selectedGroupName","changeLoading","currentFrameValid","onValuesChange","frameLoading","selectedInstanceGroup","onHeightChange","selectedReview"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/index.tsx"],"sourcesContent":["import React, { useState, useRef, useMemo, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { Observer, useLocalObservable, useObserver } from 'mobx-react';\nimport { cloneDeep } from 'lodash';\nimport { notification } from 'antd';\nimport { v4 as uuid } from 'uuid';\nimport { toJS } from 'mobx';\nimport TabMenu from '../common/tabs-menu/TabMenu';\nimport AutoSaver from '../common/AutoSaver';\nimport Toolbar from './components/Toolbar';\nimport SideMenus from './components/SideMenus';\nimport Board from './components/Board';\nimport Canvas from './components/Canvas';\nimport FrameControl from './components/FrameContorl';\nimport Validator from './components/Validator';\nimport Attributes, { AttributesHandle } from './components/Attributes';\nimport QualityControl from './components/QualityControl';\nimport Information from './components/Information';\nimport FrameAttributes from './components/FrameAttributes';\nimport formatMessage, { i18n } from './locales';\nimport { Status } from './store/UndoStore';\nimport { AttributesMode } from './store/SettingsStore';\nimport {\n  LandmarkEditType, InstanceListItem, CategoryPathShape, Point, PointListItem, PointStatus, FrameGroup,\n  ShapeInfo, PointInfo, Group, InstanceAct, Rectangle, GroupInfo, FormConfig, ObjectInfo, UpdatedShape,\n  Points, CurrentShapes, CategoryInstancesMap, KeypointCategoryProps, DELETETYPE, Frame, ReviewResult,\n  Payload, Statistic, Image, HandleStatus\n} from './types';\nimport { fetchResultByUrl } from './request';\nimport loader, { ImagePreloader } from '../../utils/image-preloader';\nimport { isPreview, isAnnotationReadonly } from '../../utils/tool-mode';\nimport {\n  initInstances,\n  loadInstancesFromResult,\n  getFrameShapes,\n  parseFramesByPaylod,\n  getInstanceFrames,\n} from './utils';\nimport './index.scss';\nimport rootStore from './store/RootStore';\nimport useAsyncState from './useAsyncState';\nimport Missing from './components/QualityControl/Missing';\n\nnotification.config({ top: 60 });\n\nenum CANVASSTATUS {\n  INITIAL = 'initial',\n  LANDMARK = 'landmark',\n}\n\nexport interface GroupReviewsMap {\n  [groupName: string]: {\n    approveCount: number;\n    result?: ReviewResult;\n  }\n}\n\nexport interface InstancesReviewsMap {\n  [instanceId: string]: {\n    [frameIndex: number]: {\n      approveCount: number;\n      result?: ReviewResult;\n      children: GroupReviewsMap\n    }\n  }\n}\n\nconst LandmarkAnnotation = forwardRef((props: Payload, ref) => {\n  const store = useLocalObservable(() => rootStore);\n\n  const [readonly, setReadOnly] = useState(false);\n  /**\n   * frame image urls\n   */\n  const [frames, setFrames] = useState<Image[]>([]);\n\n  /**\n   * current frame index\n   */\n  const [currentFrame, setCurrentFrame] = useAsyncState<number>(-1);\n\n  /**\n   * frame control height (default is 48 + 30 = 78)\n   */\n  const [frameControlHeight, setFrameControlHeight] = useState<number>(78);\n\n  const [selectedOntologyGroup, setSelectedOntologyGroup] = useState<string>('');\n\n  const [categoryPathShapes, setCategoryPathShapes] = useAsyncState<{ [categoryKey: string]: CategoryPathShape }>({});\n\n  const [updatedCategories, setUpdatedCategories] = useAsyncState<KeypointCategoryProps[]>([]);\n\n  const [defaultInstances, setDefaultInstances] = useAsyncState<{ [id: string]: InstanceAct }>({});\n\n  const [instances, setInstances] = useAsyncState<{ [id: string]: InstanceAct }>({});\n\n  /**\n   * image preloader\n   */\n  const [imagePreloader, setImagePreloader] = useState<ImagePreloader | null>(null);\n\n  /**\n   * selected shape info\n   */\n  const [selectedShapeStatus, setSelectedShapeStatus] = useState<ShapeInfo>({\n    frameIndex: -1,\n    category: '',\n    instanceId: '',\n    groupName: '',\n    shapeType: undefined,\n    id: undefined\n  });\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [formConfig, setFormConfig] = useState<FormConfig | null>(null);\n\n  const [formValues, setFormValues] = useState<{ [attr: string]: any; } | null>(null);\n\n  const [imageSize, setImageSize] = useState<{ width: number, height: number } | undefined>({ width: 0, height: 0 });\n\n  const [editFormObject, setEditFormObject] = useState<ObjectInfo | null>(null);\n\n  /**\n   * is review mode\n   */\n  const [isReview, setIsReview] = useState<boolean>(false);\n\n  /**\n   * initial instances, used to review\n   */\n  const [initialInstances, setInitialInstances] = useState<{ [id: string]: InstanceAct }>({});\n\n  /**\n   * category instances\n   */\n  const [initialCategoryInstancesMap, setInitialCategoryInstancesMap] = useState<CategoryInstancesMap>({});\n\n  const [initialCategoryPathShapes, setInitialCategoryPathShapes] = useState<{ [categoryKey: string]: CategoryPathShape }>({});\n\n  /**\n   * attributes reference\n   */\n  const attributesRef = useRef<AttributesHandle>(null);\n\n  /**\n   * auto saver reference\n   */\n  const saverRef = useRef<AutoSaver>(null);\n\n  /**\n   * validator reference\n   */\n  const validatorRef = useRef<Validator>(null);\n\n  const canvas = useRef<Canvas>(null);\n\n  const isDrawMode = useMemo(() => (\n    store.review.drawMode\n  ), [store.review.drawMode]);\n\n  const displayedInstances = useMemo(() => (\n    isReview ? initialInstances : instances\n  ), [isReview, initialInstances, instances]);\n\n  const instanceIds = useMemo(() => (\n    Object.keys(displayedInstances)\n  ), [displayedInstances]);\n\n  const instanceList = useMemo(() => (\n    Object.values(displayedInstances).filter((v) => !!v)\n  ), [displayedInstances]);\n\n  const selectedInstance = useMemo(() => {\n    if (selectedShapeStatus?.instanceId) {\n      return displayedInstances[selectedShapeStatus.instanceId];\n    }\n    return undefined;\n  }, [selectedShapeStatus, displayedInstances]);\n\n  /**\n   * category instances (used for sidebar render)\n   */\n  const categoryInstancesMap = useMemo(() => {\n    const newCategoryInstancesMap: CategoryInstancesMap = {};\n    instanceList.forEach(({ category, id, number }) => {\n      if (!newCategoryInstancesMap[category]) {\n        newCategoryInstancesMap[category] = {};\n      }\n      newCategoryInstancesMap[category][id] = number;\n    });\n\n    return newCategoryInstancesMap;\n  }, [isReview, initialInstances, instanceList]);\n\n  const displayedCategoryInstancesMap = useMemo(() => (\n    isReview ? initialCategoryInstancesMap : categoryInstancesMap\n  ), [isReview, initialCategoryInstancesMap, categoryInstancesMap]);\n\n  const displayedCategoryPathShapes = useMemo(() => (\n    isReview ? initialCategoryPathShapes : categoryPathShapes\n  ), [isReview, initialCategoryPathShapes, categoryPathShapes]);\n\n  const selectedOntology = useObserver(() => {\n    const ontologyItem = store.ontology.ontology.find((category) => category.class_name === selectedInstance?.category);\n    return ontologyItem;\n  });\n\n  const ontologyGroup = useObserver(() => {\n    const ontologyItem = store.ontology.ontology.find((category) => category.class_name === selectedInstance?.category);\n    const groupItem = ontologyItem && ontologyItem.children && ontologyItem.children.find((group) => group.name === selectedOntologyGroup);\n    return groupItem;\n  });\n\n  const categories = useMemo(() => (\n    ontologyGroup?.categories || []\n  ), [ontologyGroup]);\n\n  const selectedCategoryIndex = useMemo(() => {\n    const id = selectedShapeStatus?.id as number;\n    return selectedShapeStatus.shapeType === LandmarkEditType.KEYPOINT ?\n      categories.findIndex((c) => c.range && c.range.length === 2 && id >= c.range[0] && id <= c.range[1]) :\n      -1;\n  }, [selectedShapeStatus, categories]);\n\n  const instancesFrames = useMemo(() => {\n    const items: {\n      [id: string]: {\n        [frameIndex: number]: boolean;\n      }\n    } = {};\n    instanceList.forEach((instance) => {\n      items[instance.id] = getInstanceFrames(instance);\n    });\n    return items;\n  }, [instanceList]);\n\n  const shapes = useMemo(() => {\n    const group = selectedInstance?.children.find((g) => g.name === selectedOntologyGroup)?.frames[currentFrame];\n    return (group && group.shapes) || {};\n  }, [selectedInstance, selectedOntologyGroup, currentFrame]);\n\n  const selectedShapeInfo = useMemo(() => {\n    let info: PointInfo | GroupInfo | null = null;\n    if (selectedShapeStatus) {\n      info = {\n        category: selectedShapeStatus.category,\n        instanceId: selectedShapeStatus.instanceId,\n        groupName: selectedShapeStatus.groupName,\n        shapeType: ontologyGroup?.type || undefined,\n        displayColor: selectedOntology?.display_color || ''\n      };\n      if (ontologyGroup?.type === LandmarkEditType.KEYPOINT && selectedCategoryIndex >= 0) {\n        info = {\n          ...info,\n          pointCategory: categories[selectedCategoryIndex]?.name,\n          isKeyPoint: categories[selectedCategoryIndex].keys.includes(selectedShapeStatus.id as number)\n        };\n      }\n    }\n    return info;\n  }, [selectedShapeStatus, selectedCategoryIndex, ontologyGroup]);\n\n  const annotatedPointOrShapeCount = useMemo(() => (\n    Object.entries(shapes).filter(([, v]) => v !== undefined).length\n  ), [shapes]);\n\n  const totalPointCount = useMemo(() => (\n    ontologyGroup?.count || 0\n  ), [ontologyGroup]);\n\n  const instancesReviewsMap = useObserver(() => {\n    const map: InstancesReviewsMap = {};\n    store.review.reviews.forEach((review) => {\n      const { frameIndex, instanceId, groupName, shapeIds, result } = review;\n      const category = instances[instanceId]?.category;\n      if (!category) return;\n      if (!map[instanceId]) {\n        map[instanceId] = {};\n      }\n      if (!map[instanceId][frameIndex]) {\n        map[instanceId][frameIndex] = {\n          approveCount: 0,\n          children: {}\n        };\n      }\n      if (!map[instanceId][frameIndex].children[groupName]) {\n        map[instanceId][frameIndex].children[groupName] = {\n          approveCount: 0,\n        };\n      }\n\n      if (result === ReviewResult.REJECT) {\n        map[instanceId][frameIndex].result = result;\n        map[instanceId][frameIndex].children[groupName].result = result;\n      } else if (result === ReviewResult.SUSPEND) {\n        if (map[instanceId][frameIndex].result !== ReviewResult.REJECT) {\n          map[instanceId][frameIndex].result = result;\n        }\n        if (map[instanceId][frameIndex].children[groupName].result !== ReviewResult.REJECT) {\n          map[instanceId][frameIndex].children[groupName].result = result;\n        }\n      } else if (result === ReviewResult.APPROVE) {\n        const len = shapeIds.length;\n        map[instanceId][frameIndex].approveCount += len;\n        map[instanceId][frameIndex].children[groupName].approveCount += len;\n        const ontologyCount = store.ontology.ontologyMap[category];\n        if (map[instanceId][frameIndex].approveCount === ontologyCount.count) {\n          map[instanceId][frameIndex].result = ReviewResult.APPROVE;\n        }\n        if (map[instanceId][frameIndex].children[groupName].approveCount === ontologyCount.children[groupName]) {\n          map[instanceId][frameIndex].children[groupName].result = ReviewResult.APPROVE;\n        }\n      }\n    });\n    return map;\n  });\n\n  useEffect(() => {\n    onLoad();\n  }, []);\n\n  useEffect(() => {\n    if (selectedShapeInfo?.instanceId) {\n      store.review.setSelectedMissingReview();\n    }\n  }, [selectedShapeInfo]);\n\n  const getInstance = (instanceId: string) => displayedInstances[instanceId];\n\n  const getGroup = (instanceId: string, groupName: string, frameIndex: number = currentFrame) => {\n    const instance = getInstance(instanceId);\n    const group = instance?.children.find((g) => g.name === groupName)?.frames[frameIndex];\n    return group;\n  };\n\n  const getShape = (instanceId: string, groupName: string, id: string | number, frameIndex: number = currentFrame) => {\n    const group = getGroup(instanceId, groupName, frameIndex);\n    return group && group.shapes && (typeof id === 'number' ? (group.shapes as Points)[id] : (group.shapes as CurrentShapes)[id]);\n  };\n\n  const setInstance = (id: string, instance?: InstanceAct) => {\n    setInstances({\n      ...instances,\n      [id]: instance!\n    });\n  };\n\n  const setShape = (frameIndex: number, instanceId: string, groupName: string, id: number | string, shapeType: LandmarkEditType, shape?: Point | Rectangle) => {\n    const instance = instances[instanceId] ? cloneDeep(instances[instanceId]) : undefined;\n    if (instance) {\n      let group = instance.children.find((g) => g.name === groupName);\n      let currentGroup = group?.frames[frameIndex];\n      if (!group) {\n        group = {\n          name: groupName,\n          shapeType,\n          count: 0,\n          frames: {\n            [frameIndex]: {\n              frameIndex,\n              count: 0,\n              shapes: {}\n            }\n          }\n        };\n        instance.children.push(group);\n        currentGroup = group.frames[frameIndex];\n      } else if (!currentGroup) {\n        group.frames[frameIndex] = {\n          frameIndex,\n          count: 0,\n          shapes: {}\n        };\n        currentGroup = group.frames[frameIndex];\n      }\n      if (currentGroup !== undefined && !currentGroup.shapes) {\n        currentGroup.shapes = {};\n      }\n      let oldShape: Point | Rectangle | undefined;\n      if (shapeType === LandmarkEditType.KEYPOINT) {\n        oldShape = ((currentGroup as Frame).shapes as Points)[id as number];\n      } else if (shapeType === LandmarkEditType.RECTANGLE) {\n        oldShape = ((currentGroup as Frame).shapes as CurrentShapes)[id];\n      }\n\n      if (!shape && oldShape) {\n        group.count = group.count ? group.count - 1 : 0;\n        (currentGroup as Frame).count = (currentGroup as Frame).count ? (currentGroup as Frame).count - 1 : 0;\n        instance.notEmpty = (instance.notEmpty || 0) - 1;\n        if (shapeType === LandmarkEditType.KEYPOINT) {\n          delete ((currentGroup as Frame).shapes as Points)[id as number];\n        } else {\n          delete ((currentGroup as Frame).shapes as CurrentShapes)[id];\n        }\n      } else if (shape) {\n        if (!oldShape) {\n          instance.notEmpty = (instance.notEmpty || 0) + 1;\n          group.count = group.count ? group.count + 1 : 1;\n          (currentGroup as Frame).count = (currentGroup as Frame).count ? (currentGroup as Frame).count + 1 : 1;\n        }\n        (currentGroup as Frame).shapes = {\n          ...(currentGroup as Frame).shapes,\n          [id]: shape\n        };\n      }\n      setInstance(instanceId, instance);\n      const groupInfo = store.ontology.getGroupData(instance.category, groupName);\n      if (groupInfo?.label_config && (currentGroup as Frame).count === groupInfo.count && !(currentGroup as Frame).attributes) {\n        handleFormConfig(groupInfo.label_config, {}, { instanceId, category: instance.category, groupName });\n      }\n    }\n  };\n\n  const updateStatus = async (curr: Status[], prev: Status[]) => {\n    let newUpdatedShapes: UpdatedShape[] = [];\n    let newUpdatedCategories: KeypointCategoryProps[] = [];\n    let updatedHandles: HandleStatus[] = [];\n    const newCategoryPathShapes = cloneDeep(categoryPathShapes);\n    for (let m = 0; m < prev.length; m += 1) {\n      const item = prev[m];\n      if (item.type === 'shape') {\n        const { frameIndex, instanceId, groupName, category, index, id, shapeType } = item.status;\n        const frameGroup: FrameGroup = { frameIndex, instanceId, category, groupName };\n        let keyObj: { id: string } | { index: number } | undefined;\n        if (shapeType === LandmarkEditType.KEYPOINT && index !== undefined) {\n          keyObj = { index };\n        } else if (shapeType === LandmarkEditType.RECTANGLE && id !== undefined) {\n          keyObj = { id };\n        }\n        if (keyObj) {\n          setShape(frameIndex, instanceId, groupName, Object.values(keyObj)[0], shapeType);\n          newUpdatedShapes.push({ ...frameGroup, ...keyObj, shapeType });\n        }\n      } else if (item.type === 'pointCategory-path-shape') {\n        if (item.status.shape) {\n          delete newCategoryPathShapes[item.status.pointCategory];\n        }\n      } else if (item.type === 'instance') {\n        const { id, instance } = item.status;\n        if (instance) {\n          const { updateShapes } = getFrameShapes([instance], currentFrame, true);\n          newUpdatedShapes = [\n            ...newUpdatedShapes,\n            ...updateShapes\n          ];\n          const instanceIndex = instanceIds.findIndex((v) => v === id);\n          if (instanceIndex >= 0) {\n            setInstance(id);\n            const selectedIndex = instanceIndex - 1;\n            const newInstance = instances[instanceIds[selectedIndex]];\n            if (newInstance) {\n              selectGroup(newInstance.id, newInstance.children[0].name, false);\n            } else {\n              selectGroup('', '', false);\n            }\n          }\n        }\n      } else if (item.type === 'group') {\n        const { instanceId, frameIndex, groupName, attributes } = item.status;\n        if (attributes) {\n          const newInstance = instances[instanceId] ? cloneDeep(instances[instanceId]) : undefined;\n          const newGroup = newInstance?.children.find((v) => v.name === groupName);\n          if (newInstance && newGroup) {\n            (newGroup.frames[frameIndex] as Frame).attributes = undefined;\n            setInstance(instanceId, newInstance);\n          }\n        }\n      } else if (item.type === 'reviews') {\n        store.review.setInitialData(item.status);\n      }\n    };\n    for (let n = 0; n < curr.length; n += 1) {\n      const item = curr[n];\n      if (item.type === 'handle') {\n        updatedHandles = item.status;\n      } else if (item.type === 'shape') {\n        const { instanceId, groupName, category, index, id, shapeType, shape, frameIndex } = item.status;\n        const frameGroup: FrameGroup = { frameIndex, instanceId, category, groupName };\n        if (shape) {\n          if (shapeType === LandmarkEditType.KEYPOINT && index !== undefined) {\n            const point = shape as Point;\n            const { pointCategory, isKeyPoint, visible, attributes } = point;\n            setShape(frameIndex, instanceId, groupName, index, shapeType, point);\n            const updateIndex = newUpdatedShapes.findIndex((p) => p.instanceId === instanceId && p.groupName === groupName && p.index === index);\n            const updateShape: Point = {\n              pointCategory,\n              isKeyPoint,\n              visible,\n              ...(point.position && {\n                position: { ...point.position },\n              }),\n              attributes\n            };\n            if (updateIndex >= 0) {\n              newUpdatedShapes[updateIndex].shape = updateShape;\n            } else {\n              newUpdatedShapes.push({ ...frameGroup, index, shape: updateShape, shapeType });\n            }\n          } else if (shapeType === LandmarkEditType.RECTANGLE && id !== undefined) {\n            const rectangle = shape as Rectangle;\n            const { displayColor, visible, x, y, width, height } = rectangle;\n            setShape(frameIndex, instanceId, groupName, id, LandmarkEditType.RECTANGLE, rectangle);\n            const updateRectangle: Rectangle = {\n              id,\n              x,\n              y,\n              width,\n              height,\n              displayColor,\n              visible,\n            };\n            const updateIndex = newUpdatedShapes.findIndex((rect) => rect.instanceId === instanceId && rect.groupName === groupName && rect.id === id);\n            if (updateIndex >= 0) {\n              newUpdatedShapes[updateIndex].shape = updateRectangle;\n            } else {\n              newUpdatedShapes.push({ ...frameGroup, id, shape: updateRectangle, shapeType });\n            }\n          }\n        }\n      } else if (item.type === 'pointCategory-path-shape') {\n        const { frameIndex, pointCategory, shape } = item.status;\n        const keys = pointCategory.split('_');\n        newUpdatedCategories.push({\n          frameIndex,\n          instanceId: keys[1],\n          groupName: keys[2],\n          category: instances[keys[1]].category,\n          pointCategory: keys[3],\n        });\n        if (shape) {\n          newCategoryPathShapes[pointCategory] = shape;\n        }\n      } else if (item.type === 'instance') {\n        const { id, instance } = item.status;\n        if (instance) {\n          setInstance(id, instance);\n          selectGroup(instance.id, instance.children[0].name, false);\n          const { updateShapes, updatedCategories: newCategories } = getFrameShapes([instance], currentFrame);\n          newUpdatedShapes = [\n            ...newUpdatedShapes,\n            ...updateShapes\n          ];\n          newUpdatedCategories = [\n            ...newUpdatedCategories,\n            ...newCategories\n          ];\n        }\n      } else if (item.type === 'group') {\n        const { instanceId, groupName, attributes, frameIndex } = item.status;\n        const newInstance = instances[instanceId] ? cloneDeep(instances[instanceId]) : undefined;\n        const newGroup = newInstance?.children.find((v) => v.name === groupName);\n        if (newInstance && newGroup) {\n          Object.keys(newGroup.frames[frameIndex].shapes).forEach((id) => {\n            const attrLayer = canvas.current?.getAttrLabelByKey(instanceId, groupName, id);\n            if (attrLayer) {\n              canvas.current?.updateAttributeLabel(instanceId, newInstance.category, groupName, id, attributes);\n            }\n          });\n          (newGroup.frames[frameIndex] as Frame).attributes = attributes;\n          setInstance(instanceId, newInstance);\n        }\n      } else if (item.type === 'reviews') {\n        store.review.setInitialData(item.status);\n      }\n    };\n    await setCategoryPathShapes(newCategoryPathShapes);\n    await setUpdatedCategories(newUpdatedCategories);\n    store.shape.setUpdatedShapes(newUpdatedShapes);\n    store.handle.setUpdatedHandles(updatedHandles);\n  };\n\n  const handleUndo = () => {\n    if (!store.undo.undoDisabled && !isReview) {\n      const item = store.undo.undo();\n      if (item && item.before) {\n        updateStatus(item.before, item.after);\n        notification.success({ message: 'Undo successfully.' });\n      }\n    }\n  };\n\n  const handleRedo = () => {\n    if (!store.undo.redoDisabled && !isReview) {\n      const item = store.undo.redo();\n      if (item && item.after) {\n        updateStatus(item.after, item.before);\n        notification.success({ message: 'Redo successfully.' });\n      }\n    }\n  };\n\n  const handleChangeDrawMode = (mode: boolean) => {\n    if (store.review.isEditable) {\n      canvas.current?.clearHits();\n      if (mode) {\n        setNextEmptyShape();\n      } else {\n        const { instanceId, category, groupName } = selectedShapeStatus;\n        setSelectedShape(undefined, { instanceId, category, groupName });\n      }\n      store.review.setDrawMode(mode);\n    }\n  };\n\n  const loadInitialData = async () => {\n    let data;\n    const { initial_result: initialResult } = props;\n    if (initialResult) {\n      try {\n        data = await fetchResultByUrl(initialResult);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(`Fetch data from ${initialResult} error:`, e);\n      }\n    }\n    return data;\n  };\n\n  const addInstance = async (ontologyName: string) => {\n    const ontologyItem = store.ontology.ontology.find((category) => category.class_name === ontologyName);\n    if (ontologyItem) {\n      const id = uuid();\n      const sameOntologyInstances = instanceList.filter((v) => v.category === ontologyName).reverse();\n      const number = sameOntologyInstances.length ? sameOntologyInstances[0].number + 1 : 1;\n\n      const children = ontologyItem.children.map((v) => ({\n        name: v.name,\n        shapeType: v.type,\n        count: 0,\n        frames: {\n          [currentFrame]: {\n            frameIndex: currentFrame,\n            count: 0,\n            shapes: {}\n          }\n        }\n      }));\n      const instance = {\n        id,\n        number,\n        displayColor: ontologyItem.display_color,\n        notEmpty: 0,\n        category: ontologyItem.class_name,\n        children\n      };\n      setDefaultInstances({ [id]: instance });\n      await handleInstanceChange({ [id]: instance });\n      if (ontologyItem.children && ontologyItem.children.length > 0) {\n        selectGroup(id, ontologyItem.children[0].name, false, { category: ontologyName, shapeType: ontologyItem.children[0].type });\n      }\n    }\n  };\n\n  const addInstanceInFrame = (instanceId: string, groupName?: string) => {\n    const newInstance = instances[instanceId] ? cloneDeep(instances[instanceId]) : undefined;\n    if (newInstance) {\n      if (groupName) {\n        const groupIdx = newInstance.children.findIndex((group) => group.name === groupName);\n        if (groupIdx >= 0) {\n          let copyFrame: Frame | undefined;\n          Object.keys(newInstance.children[groupIdx].frames).forEach((i) => {\n            const index = Number(i);\n            const frame = { ...newInstance.children[groupIdx].frames[index] };\n            frame.shapes = { ...frame.shapes };\n            if (frame?.count && frame.count > 0) {\n              if (index < currentFrame) {\n                copyFrame = frame;\n              } else if (index > currentFrame && copyFrame === undefined) {\n                copyFrame = frame;\n              }\n            }\n          });\n          if (copyFrame !== undefined) {\n            newInstance.children[groupIdx].frames[currentFrame] = {\n              ...copyFrame,\n              frameIndex: currentFrame\n            };\n            newInstance.children[groupIdx].count += copyFrame.count;\n            newInstance.notEmpty += copyFrame.count;\n          }\n        }\n      } else {\n        let copyFrameIdx: number | undefined;\n        Object.keys(instancesFrames[instanceId]).forEach((i) => {\n          const index = Number(i);\n          if (index < currentFrame) {\n            copyFrameIdx = index;\n          } else if (index > currentFrame && copyFrameIdx === undefined) {\n            copyFrameIdx = index;\n          }\n        });\n        if (copyFrameIdx !== undefined) {\n          newInstance.children.forEach((group) => {\n            const copyFrame = { ...group.frames[copyFrameIdx as number] };\n            copyFrame.shapes = { ...copyFrame.shapes };\n            if (copyFrame) {\n              group.count += copyFrame.count;\n              newInstance.notEmpty += group.count;\n              group.frames[currentFrame] = {\n                ...copyFrame,\n                frameIndex: currentFrame\n              };\n            }\n          });\n        }\n      }\n      const { updateShapes, updatedCategories: newUpdatedCategories } = getFrameShapes([newInstance], currentFrame);\n      handleInstanceChange({ [instanceId]: newInstance });\n      setUpdatedCategories(newUpdatedCategories);\n      store.shape.setUpdatedShapes(updateShapes);\n    }\n  };\n\n  const removeInstanceFrames = (type: DELETETYPE, instance: InstanceAct, name?: string) => {\n    if (instance) {\n      let delShapes: UpdatedShape[] = [];\n      const newInstance = cloneDeep(instance);\n      const update = (updateInstance: InstanceAct, frameIndex: number) => {\n        updateInstance.children.forEach((group) => {\n          if ((name && name === group.name) || !name) {\n            if (group.frames[frameIndex] !== undefined) {\n              group.count -= (group.frames[frameIndex] as Frame).count;\n              delete group.frames[frameIndex];\n            }\n          }\n        });\n      };\n      if (type === DELETETYPE.CURRENT) {\n        const { updateShapes } = getFrameShapes([instance], currentFrame, true);\n        delShapes = updateShapes;\n        update(newInstance, currentFrame);\n      } else if (type === DELETETYPE.FOLLOW || type === DELETETYPE.ALL) {\n        const diffFrame = type === DELETETYPE.FOLLOW ? currentFrame : 0;\n        Array.from({ length: frames.length - diffFrame }).forEach((_, i) => {\n          const frameIndex = i + diffFrame;\n          const { updateShapes } = getFrameShapes([instance], frameIndex, true);\n          delShapes = [\n            ...delShapes,\n            ...updateShapes\n          ];\n          update(newInstance, frameIndex);\n        });\n      }\n      if (name) {\n        delShapes = delShapes.filter((v) => v.groupName === name);\n      }\n      newInstance.notEmpty -= delShapes.length;\n      store.shape.setUpdatedShapes(delShapes);\n      handleInstanceChange({ [newInstance.id]: newInstance });\n    }\n  };\n\n  const handleInstanceChange = async (\n    newInstances: { [id: string]: InstanceAct },\n    status?: { before: Status[], after: Status[] }\n  ) => {\n    const ids = Object.keys(newInstances);\n    const before: Status[] = status ? status.before : [];\n    const after: Status[] = status ? status.after : [];\n    if (ids.length > 0) {\n      ids.forEach(async (id) => {\n        const oldInstance = instances[id] ? cloneDeep(instances[id]) : undefined;\n        let isRemove = true;\n        newInstances[id].children.forEach((child) => {\n          if (Object.keys(child.frames).length > 0) {\n            isRemove = false;\n          }\n        });\n        before.push({\n          type: 'instance',\n          status: {\n            frameIndex: currentFrame,\n            id,\n            instance: oldInstance,\n          }\n        });\n        after.push({\n          type: 'instance',\n          status: {\n            frameIndex: currentFrame,\n            id,\n            instance: isRemove ? undefined : newInstances[id]\n          }\n        });\n        setInstance(id, isRemove ? undefined : newInstances[id]);\n      });\n    }\n    store.undo.saveStatus(before, after);\n  };\n\n  const onLoad = async () => {\n    setLoading(true);\n    setReadOnly(isPreview(props.jobProxy.toolMode));\n\n    // i18n\n    i18n.setLocale(props.locale);\n\n    // init payload\n    await store.init(props);\n\n    let result;\n    let initialData: any;\n    let initInstancesData;\n    try {\n      result = await props.jobProxy.loadResult();\n      initialData = await loadInitialData();\n    } catch (e) {\n      notification.error({ message: formatMessage('ANNOTATION_DATA_LOAD_ERROR'), duration: null });\n      return;\n    }\n\n    // parse frames\n    const framesData = await parseFramesByPaylod({ frames: props.image, imageData: result?.images as Image[] });\n    // preload image\n    setImagePreloader(loader(framesData.map((v) => v.url)));\n    // set frame images\n    setFrames(framesData);\n\n    if (result) {\n      if (Array.isArray(result)) {\n        // legacy data\n        if (result[0] && result[0].position) {\n          initInstancesData = initInstances(result, framesData.length);\n        } else {\n          initInstancesData = result;\n        }\n      }\n      if (result.auditId) {\n        props.jobProxy.setAuditId(result.auditId);\n      }\n      if (result.instances) {\n        initInstancesData = result.instances;\n      } else if (result.points) {\n        initInstancesData = initInstances(result.points, framesData.length);\n      }\n      // if (Array.isArray(result.handles)) {\n      //   store.handle.init(result.handles);\n      // }\n\n      if (result.categoryPathShapes) {\n        const newCategoryPathShapes: { [categoryKey: string]: CategoryPathShape } = {};\n        result.categoryPathShapes.forEach(({ pointCategory, shape }: { pointCategory: string; shape: CategoryPathShape }) => {\n          newCategoryPathShapes[pointCategory] = shape;\n        });\n        setCategoryPathShapes(newCategoryPathShapes);\n      }\n      setImageSize({\n        width: result.width,\n        height: result.height,\n      });\n    }\n\n    // load reviews\n    // await loadReviews();\n    if (initialData) {\n      if (initialData.categoryPathShapes) {\n        const initialCategoryPathShapesData: { [key: string]: CategoryPathShape } = {};\n        initialData.categoryPathShapes.forEach(({ pointCategory, shape }: { pointCategory: string; shape: CategoryPathShape }) => {\n          initialCategoryPathShapesData[pointCategory] = shape;\n        });\n        setInitialCategoryPathShapes(initialCategoryPathShapesData);\n      }\n      let initialInstancesData;\n      if (initialData.instances) {\n        initialInstancesData = initialData.instances;\n      } else if (initialData.points) {\n        initialInstancesData = initInstances(result.points, framesData.length);\n      }\n      const { newInstances, categoryInstancesMap: newCategoryInstancesMap } = loadInstancesFromResult(initialInstancesData);\n      setInitialInstances(newInstances);\n      setInitialCategoryInstancesMap(newCategoryInstancesMap);\n    }\n    let currentInstances: { [id: string]: InstanceAct } = {};\n    if (Array.isArray(initInstancesData) && initInstancesData.length > 0) {\n      const { newInstances } = loadInstancesFromResult(initInstancesData);\n      await setDefaultInstances(newInstances);\n      await setInstances(newInstances);\n      currentInstances = newInstances;\n    }\n    setLoading(false);\n    setFrame(0, currentInstances);\n    saverRef.current?.setTempSaved(true);\n    // render completed\n    props.renderComplete();\n  };\n\n  /**\n   * set current frame\n   * @param frame\n   */\n  const setFrame = async (frameIndex: number, currentInstances: { [id: string]: InstanceAct } | undefined = instances, type?: CANVASSTATUS) => {\n    if (frameIndex === currentFrame && type !== CANVASSTATUS.INITIAL) {\n      return;\n    }\n    store.review.cancelUnfinishMissingReview();\n    const currentInstanceList = Object.values(currentInstances);\n    canvas.current?.cleanLayer();\n    canvas.current?.setMultiShapesUnselected();\n    imagePreloader?.preload(frameIndex);\n    await setCurrentFrame(frameIndex);\n    let currentShapeStatus = {\n      ...selectedShapeStatus,\n      frameIndex,\n    };\n    if (!currentShapeStatus.groupName && currentInstanceList.length > 0) {\n      const { id, category, children: [{ name }] } = currentInstanceList[0];\n      const group = store.ontology.getGroupData(category, name);\n      currentShapeStatus = {\n        ...currentShapeStatus,\n        instanceId: id,\n        category,\n        groupName: name,\n        shapeType: group?.type,\n      };\n      setSelectedOntologyGroup(name);\n    }\n    setSelectedShapeStatus(currentShapeStatus);\n    const { updateShapes, updatedCategories: updatedCategoriesData } = getFrameShapes(currentInstanceList, frameIndex);\n    setUpdatedCategories(updatedCategoriesData);\n    store.shape.setUpdatedShapes(updateShapes);\n    store.handle.changeFrame(frameIndex);\n  };\n\n  /**\n   * set visible review data\n   */\n  const setReview = async () => {\n    if (initialInstances && Object.keys(initialInstances).length > 0) {\n      const newIsReview = !isReview;\n      const displayInstances = newIsReview ? initialInstances : instances || {};\n      await setDefaultInstances(displayInstances);\n      setFrame(currentFrame, displayInstances, CANVASSTATUS.INITIAL);\n      setIsReview(newIsReview);\n    }\n  };\n\n  const onSave = async (submit = true) => {\n    if (loading) {\n      const loadError = formatMessage('ERROR_DATA_LOAD');\n      notification.error({ message: loadError });\n      throw new Error(loadError);\n    }\n\n    saverRef.current?.disableLeaveCheck();\n\n    const checkMissingPoints = props.check_missing_points === true && submit === true;\n    const newInstances: InstanceListItem[] = instanceList.filter((v) => v && v.notEmpty).map((instance) => {\n      const { id, category, number, displayColor, children } = instance;\n      const ontologyInfo = store.ontology.getOntologyInfo(category);\n      return {\n        id,\n        category,\n        number,\n        displayColor,\n        children: children.map((group) => {\n          const { frames: groupFrames } = group;\n          return {\n            ...group,\n            frames: Object.values(groupFrames).filter((v) => !!v && v.count > 0).map((frameGroup) => {\n              if (frameGroup) {\n                const { frameIndex, count, shapes: groupShapes } = frameGroup;\n                const groupInfo = store.ontology.getGroupData(instance.category, group.name);\n                const newShapes: PointListItem[] | Rectangle[] = [];\n                if (groupShapes) {\n                  Object.keys(groupShapes).forEach((key) => {\n                    if (group.shapeType === LandmarkEditType.KEYPOINT) {\n                      const pointIndex = parseInt(key, 10);\n                      const point: PointListItem | undefined = groupShapes && (groupShapes as Points)[pointIndex];\n                      if (point) {\n                        point.index = pointIndex;\n                        (newShapes as PointListItem[]).push(point);\n                      }\n                    } else if (group.shapeType === LandmarkEditType.RECTANGLE) {\n                      const rectangle: Rectangle | undefined = groupShapes && (groupShapes as CurrentShapes)[key];\n                      if (rectangle) (newShapes as Rectangle[]).push(rectangle);\n                    }\n                  });\n                }\n                if (\n                  checkMissingPoints &&\n                  frames[frameIndex].valid !== false &&\n                  groupInfo &&\n                  newShapes.length < groupInfo.count\n                ) {\n                  const errMsg = formatMessage('ERROR_INCOMPLETE', {\n                    values: {\n                      frameIndex: frameIndex + 1,\n                      class_name: ontologyInfo?.display_name || ontologyInfo?.class_name,\n                      index: `${instance.number}`,\n                      name: group.name,\n                      annotated: `${count}`,\n                      total: `${groupInfo.count}`\n                    }\n                  });\n                  notification.error({ message: errMsg });\n                  throw new Error(errMsg);\n                }\n                return {\n                  ...frameGroup,\n                  shapes: newShapes\n                };\n              }\n              return undefined;\n            })\n          };\n        })\n      };\n    });\n    const statData = getInstanceStatistics();\n    const statistics = await props.jobProxy.saveResultStat(statData);\n    const handles = store.handle.getHandles();\n    return props.jobProxy.saveResult({\n      auditId: props.jobProxy.auditId,\n      width: canvas.current?.imageCanvas?.width || imageSize?.width,\n      height: canvas.current?.imageCanvas?.height || imageSize?.height,\n      instances: newInstances,\n      handles,\n      categoryPathShapes: Object.keys(categoryPathShapes).map((pointCategory) => ({\n        pointCategory,\n        shape: categoryPathShapes[pointCategory],\n      })),\n      images: frames,\n      statistics,\n    }, submit);\n  };\n\n  /**\n   * get review statistics\n   */\n  const getStatistics = () => {\n    const statShapes: {\n      [shape: string]: { rejected: number; approved: number, suspended: number, missed: number, total: number };\n    } = {};\n    const objects = {\n      total: 0,\n      approved: 0,\n      rejected: 0,\n      suspended: 0,\n      missed: 0,\n    };\n    const reviews = store.review.reviews.filter((r) => r.result !== ReviewResult.APPROVE);\n    const instancesList = Object.values(instances).filter((v) => !!v);\n    for (let i = 0; i < instancesList.length; i += 1) {\n      const instance = instancesList[i];\n      for (let j = 0; j < instance.children.length; j += 1) {\n        const item = instance.children[j];\n        const shape = item.shapeType;\n        const itemFrames = Object.values(item.frames);\n        for (let k = 0; k < itemFrames.length; k += 1) {\n          const frame = itemFrames[k];\n          if (!statShapes[shape]) {\n            statShapes[shape] = {\n              rejected: 0,\n              approved: 0,\n              suspended: 0,\n              missed: 0,\n              total: 0\n            };\n          }\n          const frameReviews = reviews.filter((r) => r.frameIndex === frame.frameIndex && r.instanceId === instance.id && r.groupName === item.name);\n          const frameShapes = Object.keys(frame.shapes);\n          for (let l = 0; l < frameShapes.length; l += 1) {\n            statShapes[shape].total += 1;\n            objects.total += 1;\n            const shapeId = shape === LandmarkEditType.KEYPOINT ? Number(frameShapes[l]) : frameShapes[l];\n            const review = frameReviews.find((r) => r.shapeIds.indexOf(shapeId) >= 0);\n            if (review?.result === ReviewResult.REJECT) {\n              statShapes[shape].rejected += 1;\n              objects.rejected += 1;\n            } else if (review?.result === ReviewResult.SUSPEND) {\n              statShapes[shape].suspended += 1;\n              objects.suspended += 1;\n            } else {\n              statShapes[shape].approved += 1;\n              objects.approved += 1;\n            }\n          }\n        }\n      }\n    }\n    return { objects, shapes: statShapes };\n  };\n\n  /**\n   * get instance statistics\n   */\n  const getInstanceStatistics = () => {\n    const { ontology } = store.ontology;\n    const data: Statistic = {\n      elements: [],\n      categories: ontology.map(({ class_name: className }) => className),\n      shapes: new Set(),\n      summary: {},\n      frameCount: frames.length,\n      annotatedFrames: new Set(),\n    };\n\n    const instancesList = Object.values(instances).filter((v) => !!v);\n    for (let i = 0; i < instancesList.length; i += 1) {\n      const { id, category, children } = instancesList[i];\n      for (let j = 0; j < children.length; j += 1) {\n        const item = children[j];\n        const itemFrames = Object.values(item.frames);\n        for (let k = 0; k < itemFrames.length; k += 1) {\n          const frame = itemFrames[k];\n          const frameShapes = Object.values(frame.shapes);\n          const shape = item.shapeType;\n          data.shapes.add(shape);\n          const key = `${shape}_${category}`;\n          if (!data.summary[key]) {\n            data.summary[key] = {\n              ids: [],\n              category,\n              shape,\n              count: 0,\n              distinctCount: 0,\n            };\n          }\n          const shapeCount = frameShapes.length;\n          if (shapeCount > 0) {\n            data.summary[key].count += shapeCount;\n            if (!data.summary[key].ids.includes(id)) {\n              data.summary[key].distinctCount += shapeCount;\n              data.summary[key].ids.push(id);\n            }\n            data.annotatedFrames.add(frame.frameIndex);\n            data.elements.push(\n              ...frameShapes.map((s) => ({\n                instance: id,\n                shape,\n                frame: frame.frameIndex + 1,\n                category,\n                id: s.id || s.index,\n              }))\n            );\n          }\n        }\n      }\n    }\n\n    return {\n      ...data,\n      shapes: Array.from(data.shapes),\n      summary: Object.values(data.summary).map(({ category, shape, count, distinctCount }) => ({\n        category,\n        shape,\n        count,\n        distinctCount,\n      })),\n      annotatedFrames: Array.from(data.annotatedFrames),\n      annotatedFrameCount: data.annotatedFrames.size,\n    };\n  };\n\n  const loadReviews = async () => {\n    const reviews = await props.jobProxy.loadReviews();\n    store.review.setInitialData(reviews);\n  };\n\n  const saveReviews = (type = 'submit') => {\n    if (type === 'submit') {\n      const hasSuspend = store.review.reviews.find((review) => review.result === ReviewResult.SUSPEND);\n      if (hasSuspend) {\n        throw new Error(formatMessage('QC_SUSPEND_ERROR'));\n      }\n    }\n    saverRef.current?.disableLeaveCheck();\n    const reviews = toJS(store.review.reviews).map((r) => {\n      const { instanceId: id, groupName, shapeIds } = r;\n      const instance = getInstance(id);\n      const ontologyItem = store.ontology.getOntologyInfo(instance?.category);\n      const groupItem = ontologyItem && ontologyItem.children && ontologyItem.children.find((group) => group.name === groupName);\n      const label = ontologyItem && instance ?\n        `${ontologyItem.display_name || ''}${instance.number}${groupItem ? `-${groupItem.display_name}` : ''}${shapeIds && shapeIds.length && (typeof shapeIds[0] === 'number') ? `[${shapeIds.join(',')}]` : ''}` :\n        'Deleted';\n      return { ...r, label };\n    });\n    const missingReviews = toJS(store.review.missingReviews).map((r) => ({\n      ...r,\n      label: 'Missed',\n    }));\n    return props.jobProxy.saveReviews([...reviews, ...missingReviews], type === 'submit');\n  };\n\n  const handleSave = async () => {\n    const { toolMode } = props.jobProxy;\n    if (isPreview(toolMode)) {\n      return;\n    }\n\n    try {\n      if (!isAnnotationReadonly(toolMode)) {\n        await onSave(false);\n      }\n      if (store.review.isEnabled) {\n        await saveReviews('save');\n      }\n      notification.success({ message: formatMessage('SAVE_SUCCESS') });\n    } catch (e) {\n      notification.error({ message: formatMessage('SAVE_FAIL') });\n    }\n  };\n\n  const setSelectedShape = (id?: number | string, groupData?: Group) => {\n    let newSelectedShapeStatus = cloneDeep(selectedShapeStatus);\n    newSelectedShapeStatus.id = id;\n    if (groupData) {\n      const { instanceId, category, groupName, shapeType } = groupData;\n      if (instanceId !== selectedInstance?.id) {\n        selectGroup(instanceId, groupName, false);\n      } else if (groupName !== selectedOntologyGroup) {\n        setSelectedOntologyGroup(groupName);\n      }\n      newSelectedShapeStatus = {\n        ...newSelectedShapeStatus,\n        instanceId,\n        category,\n        shapeType: shapeType || ontologyGroup?.type || undefined,\n        groupName,\n      };\n    }\n    setSelectedShapeStatus(newSelectedShapeStatus);\n  };\n\n  const setNextEmptyShape = (shapeStatus: ShapeInfo = selectedShapeStatus) => {\n    if (shapeStatus) {\n      let { id } = shapeStatus;\n      const { instanceId, groupName, shapeType } = shapeStatus;\n      if (shapeType === LandmarkEditType.KEYPOINT) {\n        let categoryScannedCount = 0;\n        let categoryIndex = selectedCategoryIndex >= 0 ? selectedCategoryIndex : 0;\n        id = shapeStatus.id;\n        while (categories.length > 0 && categoryScannedCount <= categories.length) {\n          const { range = [] } = categories[categoryIndex];\n          if (id === undefined || id === -1) {\n            id = range[0] - 1;\n          }\n          if (id !== range[1]) {\n            (id as number) += 1;\n          } else {\n            categoryIndex = categoryIndex < categories.length - 1 ? categoryIndex + 1 : 0;\n            categoryScannedCount += 1;\n            id = categories[categoryIndex].range[0] || 0;\n          }\n          if (!instanceId || getShape(instanceId, groupName, id!) === undefined) {\n            break;\n          }\n        }\n      } else if (ontologyGroup) {\n        id = undefined;\n      }\n      setSelectedShapeStatus({\n        ...shapeStatus,\n        id\n      });\n    }\n  };\n\n  const onCategoriesUpdated = () => {\n    setUpdatedCategories([]);\n  };\n\n  const handleShapesChange = (\n    newShapes: UpdatedShape[],\n    groupsAttributes?: { instanceId: string, category: string, name: string, attributes: any }[],\n    status?: { before: Status[], after: Status[] }\n  ) => {\n    if (newShapes.length === 0) {\n      return;\n    }\n    const before: Status[] = status ? status.before : [];\n    const after: Status[] = status ? status.after : [];\n    const { instanceId, groupName } = newShapes[0];\n    const newInstance = instances[instanceId] ? cloneDeep(instances[instanceId]) : undefined;\n    const groupInfo = store.ontology.getGroupData(newInstance?.category || '', groupName);\n    newInstance?.children.forEach((child) => {\n      if (child.name === groupName) {\n        if (!child.frames[currentFrame]) {\n          child.frames[currentFrame] = {\n            frameIndex: currentFrame,\n            count: 0,\n            shapes: {},\n          };\n        };\n        const currentGroup = child.frames[currentFrame];\n        for (let i = 0; i < newShapes.length; i += 1) {\n          const { id, frameIndex, index, shape } = newShapes[i];\n          let oldShape;\n\n          if (child.shapeType === LandmarkEditType.KEYPOINT && typeof index === 'number') {\n            oldShape = (child.frames[frameIndex].shapes as Points)[index];\n            (child.frames[frameIndex].shapes as Points)[index] = {\n              ...oldShape,\n              ...shape as Point\n            };\n          } else if (child.shapeType === LandmarkEditType.RECTANGLE && typeof id === 'string') {\n            oldShape = (child.frames[frameIndex].shapes as CurrentShapes)[id];\n            (child.frames[frameIndex].shapes as CurrentShapes)[id] = {\n              ...oldShape,\n              ...shape as Rectangle\n            };\n          }\n\n          if (!shape && oldShape) {\n            child.count = child.count ? child.count - 1 : 0;\n            currentGroup.count = currentGroup.count ? currentGroup.count - 1 : 0;\n            newInstance.notEmpty = (newInstance.notEmpty || 0) - 1;\n          } else if (shape && !oldShape) {\n            child.count = child.count ? child.count + 1 : 1;\n            currentGroup.count = currentGroup.count ? currentGroup.count + 1 : 1;\n            newInstance.notEmpty = (newInstance.notEmpty || 0) + 1;\n          }\n        };\n        if (groupInfo?.label_config && currentGroup.count === groupInfo?.count && !currentGroup.attributes) {\n          handleFormConfig(groupInfo.label_config, {}, { instanceId, category: newInstance.category, groupName });\n        }\n      }\n    });\n    if (groupsAttributes && groupsAttributes.length > 0) {\n      groupsAttributes.forEach(({ instanceId: id, name, category, attributes }) => {\n        const frameGroup: FrameGroup = { frameIndex: currentFrame, instanceId: id, category, groupName: name };\n        before.push({ type: 'group', status: { ...frameGroup } });\n        after.push({ type: 'group', status: { ...frameGroup, attributes } });\n      });\n    }\n    if (newInstance) {\n      handleInstanceChange({ [instanceId]: newInstance }, { before, after });\n    } else {\n      store.undo.saveStatus(before, after);\n    }\n  };\n\n  const handleShapesRemove = (removeShapes: UpdatedShape[]) => {\n    if (removeShapes.length === 0) {\n      return;\n    }\n\n    const changeInstances: { [id: string]: InstanceAct } = {};\n    const { instanceId, groupName } = removeShapes[0];\n    const newInstance = instances[instanceId] ? cloneDeep(instances[instanceId]) : undefined;\n    if (newInstance) {\n      newInstance?.children.forEach((child) => {\n        if (child.name === groupName) {\n          const currentGroup = child.frames[currentFrame];\n          removeShapes.forEach(({ id, frameIndex, index }) => {\n            if (child.shapeType === LandmarkEditType.KEYPOINT && typeof index === 'number') {\n              delete (child.frames[frameIndex].shapes as Points)[index];\n            } else if (child.shapeType === LandmarkEditType.RECTANGLE && typeof id === 'string') {\n              delete (child.frames[frameIndex].shapes as CurrentShapes)[id];\n            }\n            child.count = child.count ? child.count - 1 : 0;\n            currentGroup.count = currentGroup.count ? currentGroup.count - 1 : 0;\n            newInstance.notEmpty = (newInstance.notEmpty || 0) - 1;\n          });\n        }\n      });\n      changeInstances[instanceId] = newInstance;\n      handleInstanceChange({ [instanceId]: newInstance });\n    }\n  };\n\n  const togglePointsVisibility = (points: PointStatus[]) => {\n    const list: UpdatedShape[] = [];\n    points.forEach(({ instanceId, category, groupName, index }) => {\n      const point = getShape(instanceId, groupName, index);\n      if (point) {\n        list.push({\n          frameIndex: selectedShapeStatus.frameIndex,\n          instanceId,\n          category,\n          groupName,\n          index,\n          shapeType: LandmarkEditType.KEYPOINT,\n          shape: { ...point, visible: !point.visible }\n        });\n      }\n    });\n    handleShapesChange(list);\n  };\n\n  const setCategoryPathShape = (categoryKey: string, shapeType?: CategoryPathShape, _updatedShapes?: UpdatedShape[]) => {\n    const before: Status[] = [{\n      type: 'pointCategory-path-shape',\n      status: { frameIndex: selectedShapeStatus.frameIndex, pointCategory: categoryKey, shape: categoryPathShapes[categoryKey] },\n    }];\n    const after: Status[] = [{\n      type: 'pointCategory-path-shape',\n      status: { frameIndex: selectedShapeStatus.frameIndex, pointCategory: categoryKey, shape: shapeType },\n    }];\n    const newCategoryPathShapes = cloneDeep(categoryPathShapes);\n    if (shapeType && _updatedShapes) {\n      newCategoryPathShapes[categoryKey] = shapeType;\n      handleShapesChange(_updatedShapes, undefined, { before, after });\n    } else {\n      delete newCategoryPathShapes[categoryKey];\n      store.undo.saveStatus(before, after);\n    }\n    setCategoryPathShapes(newCategoryPathShapes);\n  };\n\n  const selectGroup = (id: string, groupName: string, isFit = true, groupData?: { category: string, shapeType: LandmarkEditType }) => {\n    const instance = isReview ? initialInstances[id] : instances[id];\n    const newSelectedShapeStatus: ShapeInfo = {\n      frameIndex: currentFrame,\n      instanceId: id,\n      category: groupData?.category || selectedShapeStatus.category,\n      groupName,\n      shapeType: groupData?.shapeType || undefined,\n      id: undefined\n    };\n    if (instance) {\n      const ontologyItem = store.ontology.ontology.find((v) => v.class_name === instance.category);\n      const group = ontologyItem?.children.find((v) => v.name === groupName);\n      newSelectedShapeStatus.category = instance.category;\n      newSelectedShapeStatus.shapeType = group?.type || undefined;\n      if (isDrawMode) {\n        if (group?.type === LandmarkEditType.KEYPOINT) {\n          const index = (group.categories && group.categories[0] && group.categories[0].range[0]) || 0;\n          // set selected to the empty\n          newSelectedShapeStatus.id = index;\n        } else if (group?.type === LandmarkEditType.RECTANGLE) {\n          instance.children.forEach((child) => {\n            if (child.name === groupName && child.frames[currentFrame]?.shapes) {\n              const rectangles = child.frames[currentFrame].shapes;\n              newSelectedShapeStatus.id = Object.keys(rectangles)[0];\n            }\n          });\n        }\n      }\n      canvas.current?.updateGroupBox(id, instance.category, groupName);\n      if (isFit) {\n        canvas.current?.fitSelected(id, groupName);\n      }\n    }\n    setSelectedShapeStatus(newSelectedShapeStatus);\n    setSelectedOntologyGroup(groupName);\n  };\n\n  const editShapeForm = () => {\n    const { instanceId, groupName, shapeType, id, category } = selectedShapeStatus;\n    if (shapeType === LandmarkEditType.KEYPOINT) {\n      const point = getShape(instanceId, groupName, (id as number));\n      const currentOntologyGroup = store.ontology.getGroupData(category, groupName);\n      if (point && currentOntologyGroup?.point_label_config) {\n        handleFormConfig(currentOntologyGroup.point_label_config, (point as Point).attributes || {}, { instanceId, category, groupName }, (id as number), point);\n      }\n    }\n  };\n\n  const editGroupForm = () => {\n    const { instanceId, groupName, category } = selectedShapeStatus;\n    const group = getGroup(instanceId, groupName);\n    const currentOntologyGroup = store.ontology.getGroupData(category, groupName);\n    if (group && currentOntologyGroup?.label_config) {\n      handleFormConfig(currentOntologyGroup.label_config, group.attributes || {}, { instanceId, category, groupName });\n    }\n  };\n\n  const handleFormConfig = (config: FormConfig, values: { [attr: string]: any; }, group: Group, index?: number, point?: Point) => {\n    setFormConfig(config);\n    setFormValues(values);\n    setEditFormObject({\n      ...group,\n      index,\n      point,\n    });\n    let title = getShapeLabel(group.instanceId, group.category, group.groupName) || formatMessage('EDIT_ATTRIBUTES');\n    if (index !== undefined) {\n      title = `${title} [${index}]`;\n    }\n    attributesRef.current?.showModal(title);\n  };\n\n  const getShapeLabel = (instanceId: string, category: string, groupName: string) => {\n    let title = '';\n    if (displayedInstances) {\n      const instance = instances[instanceId];\n      const groupData = store.ontology.getGroupData(category, groupName);\n      if (instance && groupData) {\n        title = `${formatMessage('VALIDATION_FRAME', { values: { frameIndex: currentFrame + 1 } })}${groupData.class_display_name || ''}${instance.number || ''}-${groupData.display_name || groupData.name}`;\n      }\n    }\n    return title;\n  };\n\n  const setAttributes = (values: any) => {\n    if (editFormObject) {\n      const { instanceId, category, groupName, index, point } = editFormObject;\n      const before: Status[] = [];\n      const after: Status[] = [];\n      const frameGroup: FrameGroup = { frameIndex: currentFrame, instanceId, category, groupName };\n      if ((index || index === 0) && point) {\n        const oldPoint = getShape(instanceId, groupName, index);\n        const newPoint = { ...oldPoint, ...point, attributes: values };\n        setShape(currentFrame, instanceId, groupName, index, LandmarkEditType.KEYPOINT, newPoint);\n        before.push({ type: 'shape', status: { ...frameGroup, index, shape: oldPoint, shapeType: LandmarkEditType.KEYPOINT } });\n        after.push({ type: 'shape', status: { ...frameGroup, index, shape: newPoint, shapeType: LandmarkEditType.KEYPOINT } });\n        canvas.current?.updateAttributeLabel(instanceId, category, groupName, index, values);\n      } else {\n        const newInstance = instances[instanceId] ? cloneDeep(instances[instanceId]) : undefined;\n        const newGroup = newInstance?.children.find((v) => v.name === groupName)?.frames[currentFrame];\n        const oldGroup = getGroup(instanceId, groupName);\n        const ontologyChild = store.ontology.getGroupData(category, groupName);\n        if (newInstance && newGroup && ontologyChild) {\n          const oldAttrs = oldGroup?.attributes;\n          newGroup.attributes = values;\n          setInstance(instanceId, newInstance);\n          before.push({ type: 'group', status: { ...frameGroup, attributes: oldAttrs } });\n          after.push({ type: 'group', status: { ...frameGroup, attributes: values } });\n          if (oldGroup?.shapes) {\n            if (ontologyChild.type === LandmarkEditType.RECTANGLE) {\n              Object.keys(oldGroup.shapes).forEach((id) => {\n                canvas.current?.updateAttributeLabel(instanceId, category, groupName, id, values, newInstance.number);\n              });\n            }\n          }\n        }\n      }\n      if (before.length > 0) {\n        store.undo.saveStatus(before, after);\n      }\n    }\n    setFormConfig(null);\n    setFormValues(null);\n    setEditFormObject(null);\n  };\n\n  /**\n   * set active attributes mode\n   * @param activeMode\n   * @param type point or object\n   */\n  const onAttributesModeChanges = (activeMode: AttributesMode, type = 'object') => {\n    canvas.current?.updatelabelVisible(activeMode, type);\n  };\n\n  const onSizeChange = () => {\n    canvas.current?.resizeShapes();\n  };\n\n  const onFilterChange = () => {\n    canvas.current?.updateFilters();\n  };\n\n  const onLabelModeChange = () => {\n    if (canvas.current?.labelLayer) {\n      canvas.current.labelLayer.visible = store.setting.labelMode;\n    }\n  };\n\n  const onGridVisibleChange = () => {\n    if (canvas.current?.gridLayer) {\n      canvas.current.gridLayer.visible = store.setting.isGridVisible;\n    }\n  };\n\n  const setFrameValid = (frame: number, valid: boolean) => {\n    const newFramesData = cloneDeep(frames);\n    newFramesData[frame].valid = valid;\n    setFrames(newFramesData);\n  };\n\n  useImperativeHandle(ref, () => ({\n    onSave,\n    saveReviews,\n    getStatistics,\n  }));\n\n  return (\n    <Observer>\n      {() => (\n        <div className=\"landmark-annotation-app\">\n          <AutoSaver\n            ref={saverRef}\n            leaveCheck\n            data={{ instance: instances, reviews: store.review.qaWarnings }}\n            save={handleSave}\n          />\n          <Toolbar\n            readonly={readonly || loading || isReview}\n            isReview={isReview}\n            isPreview={readonly}\n            initialDataLength={Object.keys(initialInstances).length}\n            onAttributesModeChanges={onAttributesModeChanges}\n            onSizeChange={onSizeChange}\n            onFilterChange={onFilterChange}\n            onLabelModeChange={onLabelModeChange}\n            onGridVisibleChange={onGridVisibleChange}\n            onSave={handleSave}\n            handleUndo={handleUndo}\n            handleRedo={handleRedo}\n            setReview={setReview}\n            handleChangeDrawMode={handleChangeDrawMode}\n          />\n          <div\n            className=\"container\"\n            style={{\n              height: `calc(100% - ${(frames.length > 1 && currentFrame >= 0) ? `${frameControlHeight + 35}px` : '35px'})`,\n              transition: 'height 0.15s',\n            }}\n          >\n            <TabMenu\n              tabs={[\n                {\n                  title: formatMessage('MENU_INSTANCE'),\n                  key: 'instance',\n                  count: 0,\n                  content: (\n                    <SideMenus\n                      canvas={canvas.current}\n                      readonly={readonly || loading || isReview || !isDrawMode}\n                      loading={loading}\n                      instances={instanceList}\n                      currentFrame={currentFrame}\n                      instancesFrames={instancesFrames}\n                      selectedInstance={selectedInstance}\n                      selectedOntologyGroup={selectedOntologyGroup}\n                      instancesReviewsMap={instancesReviewsMap}\n                      addInstance={addInstance}\n                      selectGroup={selectGroup}\n                      addInstanceInFrame={addInstanceInFrame}\n                      removeInstanceFrames={removeInstanceFrames}\n                    />\n                  )\n                },\n                {\n                  title: formatMessage('MENU_WARNING'),\n                  key: 'validator',\n                  count: store.review.warnings.length,\n                  content: (\n                    <Validator\n                      canvas={canvas.current}\n                      ref={validatorRef}\n                      instances={instances}\n                      jobProxy={props.jobProxy}\n                      warnings={store.review.warnings || []}\n                      setFrame={setFrame}\n                      setSelectedShape={setSelectedShape}\n                      selectGroup={selectGroup}\n                      getInstance={getInstance}\n                      saveResult={() => onSave(false)}\n                    />\n                  )\n                }\n              ]}\n            />\n            {selectedInstance && ontologyGroup && !isReview && (\n              <Board\n                categories={categories}\n                categoryPathShapes={displayedCategoryPathShapes}\n                points={shapes}\n                ontologyGroup={ontologyGroup}\n                selectedShapeStatus={selectedShapeStatus}\n                annotated={annotatedPointOrShapeCount}\n                total={totalPointCount}\n                drawMode={isDrawMode}\n                setSelectedShape={(id) => {\n                  const { instanceId, category, groupName } = selectedShapeStatus;\n                  setSelectedShape(id, { instanceId, category, groupName });\n                }}\n                frameControlHeight={frameControlHeight}\n                readonly={loading}\n                instanceReviewsMap={store.review.frameReviewsMap[currentFrame]}\n              />\n            )}\n            <Canvas\n              ref={canvas}\n              readonly={readonly}\n              loading={loading}\n              isReview={isReview}\n              currentFrame={currentFrame}\n              image={frames[currentFrame]?.url}\n              categories={categories}\n              selectedInstance={selectedInstance}\n              selectedGroupName={selectedOntologyGroup}\n              ontologyGroup={ontologyGroup}\n              annotatedPointOrShapeCount={annotatedPointOrShapeCount}\n              updatedCategories={updatedCategories}\n              defaultInstances={defaultInstances}\n              selectedShapeStatus={selectedShapeStatus}\n              selectedShapeInfo={selectedShapeInfo}\n              changeLoading={setLoading}\n              selectGroup={selectGroup}\n              setSelectedShape={setSelectedShape}\n              handleShapesChange={handleShapesChange}\n              onCategoriesUpdated={onCategoriesUpdated}\n              handleShapesRemove={handleShapesRemove}\n              togglePointsVisibility={togglePointsVisibility}\n              setNextEmptyShape={setNextEmptyShape}\n              editShapeForm={editShapeForm}\n              editGroupForm={editGroupForm}\n              onSave={handleSave}\n              getInstance={getInstance}\n              categoryPathShapes={displayedCategoryPathShapes}\n              setCategoryPathShape={setCategoryPathShape}\n              handleUndo={handleUndo}\n              handleRedo={handleRedo}\n              setReview={setReview}\n              handleChangeDrawMode={handleChangeDrawMode}\n            />\n            <div className=\"arributes-panel\">\n              {selectedShapeStatus.groupName && (\n                <Information\n                  pointCategory={(categories[selectedCategoryIndex] || {}).name}\n                  point={selectedShapeStatus}\n                  annotated={annotatedPointOrShapeCount}\n                  total={totalPointCount}\n                />\n              )}\n              {frames[currentFrame]?.url && (\n                <FrameAttributes\n                  currentFrame={currentFrame}\n                  currentFrameValid={frames[currentFrame].valid}\n                  setFrameValid={setFrameValid}\n                />\n              )}\n            </div>\n            <Attributes\n              ref={attributesRef}\n              readonly={readonly || isReview || !isDrawMode}\n              config={formConfig}\n              values={formValues}\n              onValuesChange={setAttributes}\n            />\n          </div>\n          {(frames.length > 1 && currentFrame >= 0) && (\n            <FrameControl\n              frames={frames}\n              frameLoading={loading}\n              currentFrame={currentFrame}\n              categoryInstancesMap={displayedCategoryInstancesMap}\n              instancesReviewsMap={instancesReviewsMap}\n              instances={displayedInstances}\n              selectedInstance={selectedInstance}\n              selectedInstanceGroup={selectedOntologyGroup}\n              selectGroup={selectGroup}\n              setFrame={setFrame}\n              onHeightChange={setFrameControlHeight}\n            />\n          )}\n          {store.review.selectedReview && (\n            <QualityControl\n              review={store.review.selectedReview}\n              readonly={readonly || isDrawMode}\n              jobProxy={props.jobProxy}\n              selectedShapeStatus={selectedShapeStatus}\n              getShapeLabel={getShapeLabel}\n            />\n          )}\n          <Missing\n            readonly={readonly || isDrawMode}\n            jobProxy={props.jobProxy}\n          />\n        </div>\n      )}\n    </Observer>\n  );\n});\n\nexport default LandmarkAnnotation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}