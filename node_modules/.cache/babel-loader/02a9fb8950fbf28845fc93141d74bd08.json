{"ast":null,"code":"/**\n * rotate point around center (based on canvas axis)\n * @param center\n * @param point\n * @param rotation\n * @returns\n */\nexport function computeRotatedPosition(center, point, rotation) {\n  const cos = Math.cos(-rotation);\n  const sin = Math.sin(-rotation);\n  const nx = cos * (point.x - center.x) + sin * (point.y - center.y) + center.x;\n  const ny = -sin * (point.x - center.x) + cos * (point.y - center.y) + center.y;\n  return {\n    x: nx,\n    y: ny\n  };\n}\n;\n\n/**\n * Calculate the angle of rotation\n */\nexport function computedAngle(center, first, second) {\n  if (first.x === second.x && first.y === second.y) {\n    return 0;\n  }\n  const fcx = first.x - center.x;\n  const fcy = first.y - center.y;\n  const scx = second.x - center.x;\n  const scy = second.y - center.y;\n  const cfVector = {\n    x: fcx,\n    y: fcy\n  };\n  const csVector = {\n    x: scx,\n    y: scy\n  };\n  const angle = Math.acos((cfVector.x * csVector.x + cfVector.y * csVector.y) / (Math.sqrt(cfVector.x ** 2 + cfVector.y ** 2) * Math.sqrt(csVector.x ** 2 + csVector.y ** 2)));\n  const direct = cfVector.x * csVector.y - cfVector.y * csVector.x;\n  return direct < 0 ? -angle : angle;\n}\n;\n\n/**\n * calc curve length\n * @param fromX\n * @param fromY\n * @param cpX\n * @param cpY\n * @param cpX2\n * @param cpY2\n * @param toX\n * @param toY\n */\nexport function curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY) {\n  const n = 10;\n  let result = 0;\n  let t = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let nt = 0;\n  let nt2 = 0;\n  let nt3 = 0;\n  let x = 0;\n  let y = 0;\n  let dx = 0;\n  let dy = 0;\n  let prevX = fromX;\n  let prevY = fromY;\n  for (let i = 1; i <= n; i += 1) {\n    t = i / n;\n    t2 = t * t;\n    t3 = t2 * t;\n    nt = 1 - t;\n    nt2 = nt * nt;\n    nt3 = nt2 * nt;\n    x = nt3 * fromX + 3 * nt2 * t * cpX + 3 * nt * t2 * cpX2 + t3 * toX;\n    y = nt3 * fromY + 3 * nt2 * t * cpY + 3 * nt * t2 * cpY2 + t3 * toY;\n    dx = prevX - x;\n    dy = prevY - y;\n    prevX = x;\n    prevY = y;\n    result += Math.sqrt(dx * dx + dy * dy);\n  }\n  return result;\n}\nexport function computePolygonAreaCenter(points) {\n  let sumX = 0;\n  let sumY = 0;\n  let sumArea = 0;\n  const p0 = points[0];\n  for (let i = 1; i < points.length - 1; i += 1) {\n    const p1 = points[i];\n    const p2 = points[i + 1];\n    const area = 0.5 * (p0.x * p1.y - p1.x * p0.y + (p1.x * p2.y - p2.x * p1.y) + (p2.x * p0.y - p0.x * p2.y));\n    sumArea += area;\n    sumX += (points[0].x + p1.x + p2.x) * area;\n    sumY += (points[0].y + p1.y + p2.y) * area;\n  }\n  const x = sumX / sumArea / 3;\n  const y = sumY / sumArea / 3;\n  return {\n    x,\n    y\n  };\n}","map":{"version":3,"names":["computeRotatedPosition","center","point","rotation","cos","Math","sin","nx","x","y","ny","computedAngle","first","second","fcx","fcy","scx","scy","cfVector","csVector","angle","acos","sqrt","direct","curveLength","fromX","fromY","cpX","cpY","cpX2","cpY2","toX","toY","n","result","t","t2","t3","nt","nt2","nt3","dx","dy","prevX","prevY","i","computePolygonAreaCenter","points","sumX","sumY","sumArea","p0","length","p1","p2","area"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/utils/math.ts"],"sourcesContent":["/**\n * rotate point around center (based on canvas axis)\n * @param center\n * @param point\n * @param rotation\n * @returns\n */\nexport function computeRotatedPosition(\n  center: { x: number; y: number },\n  point: { x: number; y: number },\n  rotation: number,\n) {\n  const cos = Math.cos(-rotation);\n  const sin = Math.sin(-rotation);\n  const nx = cos * (point.x - center.x) + sin * (point.y - center.y) + center.x;\n  const ny = -sin * (point.x - center.x) + cos * (point.y - center.y) + center.y;\n  return { x: nx, y: ny };\n};\n\n/**\n * Calculate the angle of rotation\n */\nexport function computedAngle(\n  center: { x: number; y: number },\n  first: { x: number; y: number },\n  second: { x: number; y: number },\n) {\n  if (first.x === second.x && first.y === second.y) {\n    return 0;\n  }\n  const fcx = first.x - center.x;\n  const fcy = first.y - center.y;\n  const scx = second.x - center.x;\n  const scy = second.y - center.y;\n  const cfVector = {\n    x: fcx,\n    y: fcy\n  };\n  const csVector = {\n    x: scx,\n    y: scy\n  };\n\n  const angle = Math.acos((cfVector.x * csVector.x + cfVector.y * csVector.y) / (Math.sqrt(cfVector.x ** 2 + cfVector.y ** 2) * Math.sqrt(csVector.x ** 2 + csVector.y ** 2)));\n  const direct = (cfVector.x * csVector.y) - (cfVector.y * csVector.x);\n\n  return direct < 0 ? -angle : angle;\n};\n\n/**\n * calc curve length\n * @param fromX\n * @param fromY\n * @param cpX\n * @param cpY\n * @param cpX2\n * @param cpY2\n * @param toX\n * @param toY\n */\nexport function curveLength(\n  fromX: number,\n  fromY: number,\n  cpX: number,\n  cpY: number,\n  cpX2: number,\n  cpY2: number,\n  toX: number,\n  toY: number,\n) {\n  const n = 10;\n  let result = 0;\n  let t = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let nt = 0;\n  let nt2 = 0;\n  let nt3 = 0;\n  let x = 0;\n  let y = 0;\n  let dx = 0;\n  let dy = 0;\n  let prevX = fromX;\n  let prevY = fromY;\n\n  for (let i = 1; i <= n; i += 1) {\n    t = i / n;\n    t2 = t * t;\n    t3 = t2 * t;\n    nt = (1 - t);\n    nt2 = nt * nt;\n    nt3 = nt2 * nt;\n\n    x = (nt3 * fromX) + (3 * nt2 * t * cpX) + (3 * nt * t2 * cpX2) + (t3 * toX);\n    y = (nt3 * fromY) + (3 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n    dx = prevX - x;\n    dy = prevY - y;\n    prevX = x;\n    prevY = y;\n\n    result += Math.sqrt((dx * dx) + (dy * dy));\n  }\n\n  return result;\n}\n\nexport function computePolygonAreaCenter(points: { x: number, y: number }[]) {\n  let sumX = 0;\n  let sumY = 0;\n  let sumArea = 0;\n  const p0 = points[0];\n  for (let i = 1; i < points.length - 1; i += 1) {\n    const p1 = points[i];\n    const p2 = points[i + 1];\n    const area = 0.5 * ((p0.x * p1.y - p1.x * p0.y) + (p1.x * p2.y - p2.x * p1.y) + (p2.x * p0.y - p0.x * p2.y));\n    sumArea += area;\n    sumX += (points[0].x + p1.x + p2.x) * area;\n    sumY += (points[0].y + p1.y + p2.y) * area;\n  }\n  const x = sumX / sumArea / 3;\n  const y = sumY / sumArea / 3;\n  return { x, y };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}