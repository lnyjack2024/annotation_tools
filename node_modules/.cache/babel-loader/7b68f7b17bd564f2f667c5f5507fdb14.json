{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\";\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer(baseComponent, options) {\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n  var realOptions = __assign({\n    forwardRef: false\n  }, options);\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n  var wrappedComponent = function (props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  };\n  wrappedComponent.displayName = baseComponentName;\n  // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n  var memoComponent;\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n    //    since it wouldn't be a callable function anymore\n    memoComponent = memo(forwardRef(wrappedComponent));\n  } else {\n    memoComponent = memo(wrappedComponent);\n  }\n  copyStaticProperties(baseComponent, memoComponent);\n  memoComponent.displayName = baseComponentName;\n  return memoComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true\n};\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}","map":{"version":3,"sources":["../src/observer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,SAAS,UAAU,EAAE,IAAI,QAAQ,OAAO;AAExC,SAAS,sBAAsB,QAAQ,mBAAmB;AAC1D,SAAS,WAAW,QAAQ,eAAe;AAmC3C;AACA,OAAM,SAAU,QAAQ,CACpB,aAAiF,EACjF,OAA0B,EAAA;EAE1B;EACA,IAAI,sBAAsB,CAAA,CAAE,EAAE;IAC1B,OAAO,aAAa;EACvB;EAED,IAAM,WAAW,GAAA,QAAA,CAAA;IACb,UAAU,EAAE;EAAK,CAAA,EACd,OAAO,CACb;EAED,IAAM,iBAAiB,GAAG,aAAa,CAAC,WAAW,IAAI,aAAa,CAAC,IAAI;EAEzE,IAAM,gBAAgB,GAAG,SAAA,CAAC,KAAQ,EAAE,GAAoB,EAAA;IACpD,OAAO,WAAW,CAAC,YAAA;MAAM,OAAA,aAAa,CAAC,KAAK,EAAE,GAAG,CAAC;IAAzB,CAAyB,EAAE,iBAAiB,CAAC;EAC1E,CAAC;EACD,gBAAgB,CAAC,WAAW,GAAG,iBAAiB;EAEhD;EACA;EACA;EACA,IAAI,aAAa;EACjB,IAAI,WAAW,CAAC,UAAU,EAAE;IACxB;IACA;IACA;IACA;IACA,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;GACrD,MAAM;IACH,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC;EACzC;EAED,oBAAoB,CAAC,aAAa,EAAE,aAAa,CAAC;EAClD,aAAa,CAAC,WAAW,GAAG,iBAAiB;EAE7C,OAAO,aAAa;AACxB;AAEA;AACA,IAAM,cAAc,GAAQ;EACxB,QAAQ,EAAE,IAAI;EACd,MAAM,EAAE,IAAI;EACZ,OAAO,EAAE,IAAI;EACb,IAAI,EAAE;CACT;AAED,SAAS,oBAAoB,CAAC,IAAS,EAAE,MAAW,EAAA;EAChD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAA;IACzB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;MACtB,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,wBAAwB,CAAC,IAAI,EAAE,GAAG,CAAE,CAAC;IAClF;EACL,CAAC,CAAC;AACN","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\";\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer(baseComponent, options) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent;\n    }\n    var realOptions = __assign({ forwardRef: false }, options);\n    var baseComponentName = baseComponent.displayName || baseComponent.name;\n    var wrappedComponent = function (props, ref) {\n        return useObserver(function () { return baseComponent(props, ref); }, baseComponentName);\n    };\n    wrappedComponent.displayName = baseComponentName;\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    var memoComponent;\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent));\n    }\n    else {\n        memoComponent = memo(wrappedComponent);\n    }\n    copyStaticProperties(baseComponent, memoComponent);\n    memoComponent.displayName = baseComponentName;\n    return memoComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n};\nfunction copyStaticProperties(base, target) {\n    Object.keys(base).forEach(function (key) {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n        }\n    });\n}\n//# sourceMappingURL=observer.js.map"]},"metadata":{},"sourceType":"module"}