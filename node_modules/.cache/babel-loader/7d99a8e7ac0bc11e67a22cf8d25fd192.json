{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./utils/printDebugValue\";\nimport { observerFinalizationRegistry } from \"./utils/observerFinalizationRegistry\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nfunction observerComponentNameFor(baseComponentName) {\n  return \"observer\".concat(baseComponentName);\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\nvar ObjectToBeRetainedByReact = /** @class */function () {\n  function ObjectToBeRetainedByReact() {}\n  return ObjectToBeRetainedByReact;\n}();\nfunction objectToBeRetainedByReactFactory() {\n  return new ObjectToBeRetainedByReact();\n}\nexport function useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n  var _a = __read(React.useState(objectToBeRetainedByReactFactory), 1),\n    objectRetainedByReact = _a[0];\n  // Force update, see #2982\n  var _b = __read(React.useState(), 2),\n    setState = _b[1];\n  var forceUpdate = function () {\n    return setState([]);\n  };\n  // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n  var admRef = React.useRef(null);\n  if (!admRef.current) {\n    // First render\n    admRef.current = {\n      reaction: null,\n      mounted: false,\n      changedBeforeMount: false\n    };\n  }\n  var adm = admRef.current;\n  if (!adm.reaction) {\n    // First render or component was not committed and reaction was disposed by registry\n    adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we're a component that hasn't yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don't want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (adm.mounted) {\n        // We have reached useEffect(), so we're mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n        // when (and if) useEffect() arrives.\n        adm.changedBeforeMount = true;\n      }\n    });\n    observerFinalizationRegistry.register(objectRetainedByReact, adm, adm);\n  }\n  React.useDebugValue(adm.reaction, printDebugValue);\n  React.useEffect(function () {\n    observerFinalizationRegistry.unregister(adm);\n    adm.mounted = true;\n    if (adm.reaction) {\n      if (adm.changedBeforeMount) {\n        // Got a change before mount, force an update\n        adm.changedBeforeMount = false;\n        forceUpdate();\n      }\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This can be due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up\n      // Re-create the reaction\n      adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n        // We've definitely already been mounted at this point\n        forceUpdate();\n      });\n      forceUpdate();\n    }\n    return function () {\n      adm.reaction.dispose();\n      adm.reaction = null;\n      adm.mounted = false;\n      adm.changedBeforeMount = false;\n    };\n  }, []);\n  // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n  var rendering;\n  var exception;\n  adm.reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n  return rendering;\n}","map":{"version":3,"sources":["../src/useObserver.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./utils/printDebugValue\";\nimport { observerFinalizationRegistry } from \"./utils/observerFinalizationRegistry\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nfunction observerComponentNameFor(baseComponentName) {\n    return \"observer\".concat(baseComponentName);\n}\n/**\n * We use class to make it easier to detect in heap snapshots by name\n */\nvar ObjectToBeRetainedByReact = /** @class */ (function () {\n    function ObjectToBeRetainedByReact() {\n    }\n    return ObjectToBeRetainedByReact;\n}());\nfunction objectToBeRetainedByReactFactory() {\n    return new ObjectToBeRetainedByReact();\n}\nexport function useObserver(fn, baseComponentName) {\n    if (baseComponentName === void 0) { baseComponentName = \"observed\"; }\n    if (isUsingStaticRendering()) {\n        return fn();\n    }\n    var _a = __read(React.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];\n    // Force update, see #2982\n    var _b = __read(React.useState(), 2), setState = _b[1];\n    var forceUpdate = function () { return setState([]); };\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    var admRef = React.useRef(null);\n    if (!admRef.current) {\n        // First render\n        admRef.current = {\n            reaction: null,\n            mounted: false,\n            changedBeforeMount: false\n        };\n    }\n    var adm = admRef.current;\n    if (!adm.reaction) {\n        // First render or component was not committed and reaction was disposed by registry\n        adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (adm.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate();\n            }\n            else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.\n                adm.changedBeforeMount = true;\n            }\n        });\n        observerFinalizationRegistry.register(objectRetainedByReact, adm, adm);\n    }\n    React.useDebugValue(adm.reaction, printDebugValue);\n    React.useEffect(function () {\n        observerFinalizationRegistry.unregister(adm);\n        adm.mounted = true;\n        if (adm.reaction) {\n            if (adm.changedBeforeMount) {\n                // Got a change before mount, force an update\n                adm.changedBeforeMount = false;\n                forceUpdate();\n            }\n        }\n        else {\n            // The reaction we set up in our render has been disposed.\n            // This can be due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up\n            // Re-create the reaction\n            adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n                // We've definitely already been mounted at this point\n                forceUpdate();\n            });\n            forceUpdate();\n        }\n        return function () {\n            adm.reaction.dispose();\n            adm.reaction = null;\n            adm.mounted = false;\n            adm.changedBeforeMount = false;\n        };\n    }, []);\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    var rendering;\n    var exception;\n    adm.reaction.track(function () {\n        try {\n            rendering = fn();\n        }\n        catch (e) {\n            exception = e;\n        }\n    });\n    if (exception) {\n        throw exception; // re-throw any exceptions caught during rendering\n    }\n    return rendering;\n}\n//# sourceMappingURL=useObserver.js.map"]},"metadata":{},"sourceType":"module"}