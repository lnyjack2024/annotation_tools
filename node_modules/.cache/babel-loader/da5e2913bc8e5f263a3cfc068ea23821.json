{"ast":null,"code":"import _applyDecoratedDescriptor from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nvar _class;\nimport { observable, computed, makeObservable, action, toJS } from 'mobx';\nimport { ReviewResult, ValidationType, UpdateType } from '../types';\nimport { ToolMode, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport i18n from '../locales';\n;\n;\n/**\n * reviews stores\n */\nlet ReviewsStore = (_class = class ReviewsStore {\n  /**\n   * selected review\n   */\n  get selectedReview() {\n    const {\n      selectedInstanceId\n    } = this.rootStore.instance;\n    const review = selectedInstanceId ? this.getReview(selectedInstanceId) : undefined;\n    return review;\n  }\n\n  /**\n   * qa qarnings\n   */\n  get qaWarnings() {\n    return this.reviewsResult.length ? this.reviewsResult.filter(review => review.result === ReviewResult.REJECT && review.type).map(review => ({\n      id: review.instanceId,\n      message: review.type.join(','),\n      comment: review.comment,\n      warningType: ValidationType.QUALITY\n    })) : [];\n  }\n\n  /**\n   * warnings\n   */\n  get warnings() {\n    return this.customWarnings.length || this.qaWarnings.length ? [...toJS(this.customWarnings), ...this.qaWarnings] : [];\n  }\n  get reviewsResult() {\n    return this.getReviewsForSave();\n  }\n  constructor(rootStore) {\n    this.rootStore = void 0;\n    /**\n     * current tool mode\n     */\n    this.toolMode = ToolMode.LABELING;\n    /**\n     * canvas draw\n     */\n    this.drawMode = true;\n    /**\n     * issue types\n     */\n    this.issueTypes = [];\n    /**\n     * all reviews\n     */\n    this.reviews = [];\n    /**\n     * custom warnings\n     */\n    this.customWarnings = [];\n    /**\n     * has custom error\n     */\n    this.hasCustomError = false;\n    /**\n     * blockSubmitErrors\n     */\n    this.blockSubmitErrors = [];\n    /**\n     * errors\n     */\n    this.errors = void 0;\n    /**\n     * updated reviews\n     */\n    this.updatedReviews = {};\n    /**\n     * delete review\n     * @param instanceId\n     * @param frameIndex\n     */\n    this.deleteReviewByInstance = (id, type = UpdateType.MODIFY) => {\n      if (this.isEnabled) {\n        const index = this.reviews.findIndex(review => review.instanceId === id);\n        if (index >= 0) {\n          this.reviews.splice(index, 1);\n          const changeReviews = {\n            [id]: undefined\n          };\n          const previewReviews = {\n            [id]: toJS(this.reviews[index])\n          };\n          if (type === UpdateType.MODIFY) {\n            this.changeUndo(changeReviews, previewReviews);\n            this.setUpdatedReviews({\n              [id]: undefined\n            });\n          }\n        }\n      }\n    };\n    /**\n     * update reviews\n     * @param reviews reviews\n     */\n    this.updateReviews = reviews => {\n      Object.keys(reviews).forEach(id => {\n        const review = reviews[id];\n        if (review) {\n          this.setReview(review, UpdateType.UNDOREDO);\n        } else {\n          this.deleteReviewByInstance(id, UpdateType.UNDOREDO);\n        }\n      });\n      this.setUpdatedReviews(reviews);\n    };\n    /**\n     * set updated reviews\n     * @param reviews\n     */\n    this.setUpdatedReviews = reviews => {\n      this.updatedReviews = reviews;\n    };\n    this.shortcutAction = result => {\n      var _this$selectedReview;\n      if (this.isEnabled && !this.drawMode && this.rootStore.instance.selectedInstanceId && ((_this$selectedReview = this.selectedReview) === null || _this$selectedReview === void 0 ? void 0 : _this$selectedReview.result) !== result) {\n        this.rootStore.setting.setReviewVisible(true);\n        this.setReview({\n          instanceId: this.rootStore.instance.selectedInstanceId,\n          result\n        });\n      }\n    };\n    makeObservable(this, {\n      reviews: observable,\n      errors: observable,\n      customWarnings: observable,\n      drawMode: observable,\n      toolMode: observable,\n      updatedReviews: observable,\n      setInitialData: action,\n      setReview: action,\n      deleteReviewByInstance: action,\n      setScriptResult: action,\n      setDrawMode: action,\n      setUpdatedReviews: action\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * review result types\n   */\n  get reviewResultTypes() {\n    return this.toolMode === ToolMode.AUDIT ? [ReviewResult.APPROVE, ReviewResult.REJECT, ReviewResult.SUSPEND] : [ReviewResult.APPROVE, ReviewResult.REJECT];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes && typeof issueTypes === 'string' ? issueTypes.split(',').map(i => i.trim()).filter(i => !!i) : [];\n    if (this.isEnabled || this.rootStore.isPreview) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(list) {\n    if (list && Array.isArray(list)) {\n      const reviews = [];\n      const updatedReviews = {};\n      list.filter(v => !this.isEnabled && v.result === ReviewResult.REJECT || this.isEnabled).forEach(({\n        instanceId,\n        result,\n        type,\n        comment\n      }) => {\n        if (instanceId !== undefined && result !== undefined) {\n          reviews.push({\n            instanceId,\n            result,\n            type,\n            comment\n          });\n          updatedReviews[instanceId] = {\n            instanceId,\n            result,\n            type,\n            comment\n          };\n        }\n      });\n      this.reviews = reviews;\n      this.setUpdatedReviews(updatedReviews);\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    const {\n      allInstances\n    } = this.rootStore.instance;\n    return this.reviews.map(review => {\n      const index = allInstances.findIndex(i => i.id === review.instanceId);\n      return {\n        ...review,\n        label: index < 0 ? 'Deleted' : `${index + 1}`\n      };\n    });\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(instanceId) {\n    return instanceId ? this.reviews.find(review => review.instanceId === instanceId) : undefined;\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(reviewData, handleType = UpdateType.MODIFY) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const {\n      instanceId,\n      result,\n      type,\n      comment\n    } = reviewData;\n    const index = this.reviews.findIndex(review => review.instanceId === instanceId);\n    const previewReviews = {};\n    const changeReviews = {};\n    if (index >= 0) {\n      const reviewItem = toJS(this.reviews[index]);\n      if (reviewItem.result !== result || reviewItem.type !== type || reviewItem.comment !== comment) {\n        previewReviews[instanceId] = {\n          ...reviewItem\n        };\n        this.reviews[index] = {\n          ...reviewItem,\n          result,\n          type,\n          comment\n        };\n        changeReviews[instanceId] = {\n          ...reviewData\n        };\n      }\n    } else {\n      this.reviews.push({\n        ...reviewData\n      });\n      previewReviews[instanceId] = undefined;\n      changeReviews[instanceId] = {\n        ...reviewData\n      };\n    }\n    if (Object.keys(changeReviews).length > 0 && handleType === UpdateType.MODIFY) {\n      this.changeUndo(changeReviews, previewReviews);\n      this.setUpdatedReviews({\n        [instanceId]: {\n          ...reviewData\n        }\n      });\n    }\n  }\n  changeUndo(changeReviews, previewReviews) {\n    const before = [];\n    const after = [];\n    before.push({\n      type: 'review',\n      status: previewReviews\n    });\n    after.push({\n      type: 'review',\n      status: changeReviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n  setScriptResult(result) {\n    if (result) {\n      const {\n        results,\n        hasCustomError\n      } = result;\n      this.customWarnings = results;\n      this.hasCustomError = hasCustomError;\n    } else {\n      this.customWarnings = [];\n      this.hasCustomError = false;\n    }\n    if (this.hasCustomError) {\n      this.errors = {\n        [ValidationType.CUSTOM]: this.hasCustomError ? i18n.translate('VALIDATION_CUSTOM_ERROR') : ''\n      };\n    }\n    this.blockSubmitErrors = this.customWarnings.filter(warning => warning.blockSubmit === true);\n    const updatedReviews = {};\n    this.reviews.forEach(({\n      instanceId,\n      result: rResult,\n      type,\n      comment\n    }) => {\n      if (instanceId !== undefined && result !== undefined) {\n        updatedReviews[instanceId] = {\n          instanceId,\n          result: rResult,\n          type,\n          comment\n        };\n      }\n    });\n    this.blockSubmitErrors.forEach(({\n      id,\n      message\n    }) => {\n      updatedReviews[id] = {\n        instanceId: id,\n        result: ReviewResult.REJECT,\n        comment: message,\n        validationType: ValidationType.CUSTOM\n      };\n    });\n    this.setUpdatedReviews(updatedReviews);\n  }\n\n  /**\n   * switch draw mode\n   * @param mode\n   */\n  setDrawMode(mode) {\n    if (this.isEditable) {\n      this.drawMode = mode;\n    }\n  }\n}, _applyDecoratedDescriptor(_class.prototype, \"selectedReview\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"selectedReview\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"qaWarnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"qaWarnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"warnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"warnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reviewsResult\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"reviewsResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEnabled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEnabled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEditable\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEditable\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reviewResultTypes\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"reviewResultTypes\"), _class.prototype), _class);\nexport default ReviewsStore;","map":{"version":3,"names":["observable","computed","makeObservable","action","toJS","ReviewResult","ValidationType","UpdateType","ToolMode","isReviewEditable","isAnnotationReadonly","i18n","ReviewsStore","_class","selectedReview","selectedInstanceId","rootStore","instance","review","getReview","undefined","qaWarnings","reviewsResult","length","filter","result","REJECT","type","map","id","instanceId","message","join","comment","warningType","QUALITY","warnings","customWarnings","getReviewsForSave","constructor","toolMode","LABELING","drawMode","issueTypes","reviews","hasCustomError","blockSubmitErrors","errors","updatedReviews","deleteReviewByInstance","MODIFY","isEnabled","index","findIndex","splice","changeReviews","previewReviews","changeUndo","setUpdatedReviews","updateReviews","Object","keys","forEach","setReview","UNDOREDO","shortcutAction","_this$selectedReview","setting","setReviewVisible","setInitialData","setScriptResult","setDrawMode","isEditable","reviewResultTypes","AUDIT","APPROVE","SUSPEND","init","split","i","trim","isPreview","list","Array","isArray","v","push","allInstances","label","find","reviewData","handleType","reviewItem","before","after","status","undo","saveStatus","results","CUSTOM","translate","warning","blockSubmit","rResult","validationType","mode","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/store/ReviewsStore.ts"],"sourcesContent":["import { observable, computed, makeObservable, action, toJS } from 'mobx';\nimport { RootStoreType } from './RootStore';\nimport { Status } from './UndoStore';\nimport { Review, ReviewResult, ValidationType, UpdateType } from '../types';\nimport { IWarning } from '../../common/tabs-menu/Validator';\nimport { ToolMode, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport i18n from '../locales';\n\nexport interface PointReviewResult {[id: number]: ReviewResult};\ninterface ShapeReviewResult {[id: string]: ReviewResult};\nexport interface GroupReviewsMap {\n  [groupName: string]: PointReviewResult | ShapeReviewResult;\n}\nexport interface InstanceReviewsMap {\n  [instanceId: string]: GroupReviewsMap\n}\n\nexport interface FrameReviewsMap {\n  [frameIndex: number]: InstanceReviewsMap\n}\n\n/**\n * reviews stores\n */\nclass ReviewsStore {\n  rootStore: RootStoreType;\n\n  /**\n   * current tool mode\n   */\n  toolMode: ToolMode = ToolMode.LABELING;\n\n  /**\n   * canvas draw\n   */\n  drawMode = true;\n\n  /**\n   * issue types\n   */\n  issueTypes: string[] = [];\n\n  /**\n   * all reviews\n   */\n  reviews: Review[] = [];\n\n  /**\n   * custom warnings\n   */\n  customWarnings: IWarning[] = [];\n\n  /**\n   * has custom error\n   */\n  hasCustomError = false;\n\n  /**\n   * blockSubmitErrors\n   */\n  blockSubmitErrors: IWarning[] = [];\n\n  /**\n   * errors\n   */\n  errors?: {\n    [type: string]: string;\n  };\n\n  /**\n   * updated reviews\n   */\n  updatedReviews: { [id: string]: Review | undefined } = {};\n\n  /**\n   * selected review\n   */\n  @computed get selectedReview() {\n    const { selectedInstanceId } = this.rootStore.instance;\n    const review = selectedInstanceId ? this.getReview(selectedInstanceId) : undefined;\n    return review;\n  }\n\n  /**\n   * qa qarnings\n   */\n  @computed get qaWarnings() {\n    return this.reviewsResult.length ? this.reviewsResult\n      .filter((review) => review.result === ReviewResult.REJECT && review.type).map((review) => ({\n        id: review.instanceId,\n        message: review.type!.join(','),\n        comment: review.comment,\n        warningType: ValidationType.QUALITY\n      })) : [];\n  }\n\n  /**\n   * warnings\n   */\n  @computed get warnings() {\n    return (this.customWarnings.length || this.qaWarnings.length) ? [...toJS(this.customWarnings), ...this.qaWarnings] : [];\n  }\n\n  @computed get reviewsResult() {\n    return this.getReviewsForSave();\n  }\n\n  constructor(rootStore: RootStoreType) {\n    makeObservable(this, {\n      reviews: observable,\n      errors: observable,\n      customWarnings: observable,\n      drawMode: observable,\n      toolMode: observable,\n      updatedReviews: observable,\n      setInitialData: action,\n      setReview: action,\n      deleteReviewByInstance: action,\n      setScriptResult: action,\n      setDrawMode: action,\n      setUpdatedReviews: action,\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  @computed get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  @computed get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * review result types\n   */\n  @computed get reviewResultTypes() {\n    return this.toolMode === ToolMode.AUDIT ? [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n      ReviewResult.SUSPEND,\n    ] : [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n    ];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode: ToolMode, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes && typeof issueTypes === 'string' ?\n      issueTypes.split(',').map((i) => i.trim()).filter((i) => !!i) :\n      [];\n    if (this.isEnabled || this.rootStore.isPreview) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(list: any) {\n    if (list && Array.isArray(list)) {\n      const reviews: Review[] = [];\n      const updatedReviews: { [id: string]: Review } = {};\n      list\n        .filter((v) => (!this.isEnabled && v.result === ReviewResult.REJECT) || this.isEnabled)\n        .forEach(({ instanceId, result, type, comment }: Review) => {\n          if (instanceId !== undefined && result !== undefined) {\n            reviews.push({ instanceId, result, type, comment });\n            updatedReviews[instanceId] = { instanceId, result, type, comment };\n          }\n        });\n      this.reviews = reviews;\n      this.setUpdatedReviews(updatedReviews);\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    const { allInstances } = this.rootStore.instance;\n    return this.reviews.map((review) => {\n      const index = allInstances.findIndex((i) => i.id === review.instanceId);\n      return { ...review, label: index < 0 ? 'Deleted' : `${index + 1}` };\n    });\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(instanceId?: string | null) {\n    return instanceId ? this.reviews.find((review) => review.instanceId === instanceId) : undefined;\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(reviewData: Review, handleType = UpdateType.MODIFY) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const { instanceId, result, type, comment } = reviewData;\n    const index = this.reviews.findIndex((review) => review.instanceId === instanceId);\n    const previewReviews: {[id:string]: Review | undefined} = {};\n    const changeReviews: {[id:string]: Review | undefined} = {};\n    if (index >= 0) {\n      const reviewItem = toJS(this.reviews[index]);\n      if (reviewItem.result !== result || reviewItem.type !== type || reviewItem.comment !== comment) {\n        previewReviews[instanceId] = { ...reviewItem };\n        this.reviews[index] = {\n          ...reviewItem,\n          result,\n          type,\n          comment,\n        };\n        changeReviews[instanceId] = { ...reviewData };\n      }\n    } else {\n      this.reviews.push({ ...reviewData });\n      previewReviews[instanceId] = undefined;\n      changeReviews[instanceId] = { ...reviewData };\n    }\n    if (Object.keys(changeReviews).length > 0 && handleType === UpdateType.MODIFY) {\n      this.changeUndo(changeReviews, previewReviews);\n      this.setUpdatedReviews({ [instanceId]: { ...reviewData } });\n    }\n  }\n\n  /**\n   * delete review\n   * @param instanceId\n   * @param frameIndex\n   */\n  deleteReviewByInstance = (id: string, type = UpdateType.MODIFY) => {\n    if (this.isEnabled) {\n      const index = this.reviews.findIndex((review) => review.instanceId === id);\n      if (index >= 0) {\n        this.reviews.splice(index, 1);\n        const changeReviews = { [id]: undefined };\n        const previewReviews = { [id]: toJS(this.reviews[index]) };\n        if (type === UpdateType.MODIFY) {\n          this.changeUndo(changeReviews, previewReviews);\n          this.setUpdatedReviews({ [id]: undefined });\n        }\n      }\n    }\n  };\n\n  changeUndo(\n    changeReviews: {[id:string]: Review | undefined},\n    previewReviews: {[id:string]: Review | undefined}\n  ) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    before.push({ type: 'review',\n      status: previewReviews\n    });\n    after.push({ type: 'review',\n      status: changeReviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n\n  setScriptResult(result?: {results: IWarning[]; hasCustomError: boolean}) {\n    if (result) {\n      const { results, hasCustomError } = result as {results: IWarning[]; hasCustomError: boolean};\n      this.customWarnings = results;\n      this.hasCustomError = hasCustomError;\n    } else {\n      this.customWarnings = [];\n      this.hasCustomError = false;\n    }\n    if (this.hasCustomError) {\n      this.errors = {\n        [ValidationType.CUSTOM]: this.hasCustomError ? i18n.translate('VALIDATION_CUSTOM_ERROR') : '',\n      };\n    }\n    this.blockSubmitErrors = this.customWarnings.filter((warning) => warning.blockSubmit === true);\n    const updatedReviews: { [id: string]: Review } = {};\n    this.reviews.forEach(({ instanceId, result: rResult, type, comment }: Review) => {\n      if (instanceId !== undefined && result !== undefined) {\n        updatedReviews[instanceId] = { instanceId, result: rResult, type, comment };\n      }\n    });\n    this.blockSubmitErrors.forEach(({ id, message }) => {\n      updatedReviews[id] = { instanceId: id, result: ReviewResult.REJECT, comment: message, validationType: ValidationType.CUSTOM };\n    });\n    this.setUpdatedReviews(updatedReviews);\n  }\n\n  /**\n   * switch draw mode\n   * @param mode\n   */\n  setDrawMode(mode: boolean) {\n    if (this.isEditable) {\n      this.drawMode = mode;\n    }\n  }\n\n  /**\n   * update reviews\n   * @param reviews reviews\n   */\n  updateReviews = (reviews: { [id:string]: Review | undefined }) => {\n    Object.keys(reviews).forEach((id) => {\n      const review = reviews[id];\n      if (review) {\n        this.setReview(review, UpdateType.UNDOREDO);\n      } else {\n        this.deleteReviewByInstance(id, UpdateType.UNDOREDO);\n      }\n    });\n    this.setUpdatedReviews(reviews);\n  };\n\n  /**\n   * set updated reviews\n   * @param reviews\n   */\n  setUpdatedReviews = (reviews: {[id: string]: Review | undefined}) => {\n    this.updatedReviews = reviews;\n  };\n\n  shortcutAction = (result: ReviewResult) => {\n    if (\n      this.isEnabled &&\n      !this.drawMode &&\n      this.rootStore.instance.selectedInstanceId &&\n      this.selectedReview?.result !== result\n    ) {\n      this.rootStore.setting.setReviewVisible(true);\n      this.setReview({\n        instanceId: this.rootStore.instance.selectedInstanceId,\n        result,\n      });\n    }\n  };\n}\n\nexport default ReviewsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}