{"ast":null,"code":"import { Point } from 'pixi.js';\nimport Flatten from '@flatten-js/core';\nimport Shape from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlBar from './controls/ControlBar';\nimport ControlRotation from './controls/ControlRotation';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nimport { computeRotatedPosition } from '../../../utils/math';\n/**\n * Rectangle shape\n * @class\n */\nexport default class Rectangle extends Shape {\n  /**\n   * get x\n   * @getter\n   */\n  get x() {\n    return this._x || 0;\n  }\n\n  /**\n   * set x\n   * @setter\n   */\n  set x(x) {\n    this._x = x;\n    this.normalize();\n  }\n\n  /**\n   * get y\n   * @getter\n   */\n  get y() {\n    return this._y || 0;\n  }\n\n  /**\n   * set y\n   * @setter\n   */\n  set y(y) {\n    this._y = y;\n    this.normalize();\n  }\n\n  /**\n   * get width\n   * @getter\n   */\n  get width() {\n    return this._width || 0;\n  }\n\n  /**\n   * set width\n   * @setter\n   */\n  set width(width) {\n    this._width = width;\n    this.normalize();\n  }\n\n  /**\n   * get height\n   * @getter\n   */\n  get height() {\n    return this._height || 0;\n  }\n\n  /**\n   * set height\n   * @setter\n   */\n  set height(height) {\n    this._height = height;\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point) {\n    if (this.x !== point.x || this.y !== point.y) {\n      this._x = precise(point.x);\n      this._y = precise(point.y);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get pivot\n   * @getter\n   */\n  get pivot() {\n    return new Point(this.x + this.width / 2, this.y + this.height / 2);\n  }\n\n  /**\n   * set pivot\n   * @setter\n   */\n  set pivot(point) {\n    const {\n      x: px,\n      y: py\n    } = this.pivot;\n    const shouldUpdate = point.x !== px || point.y !== py;\n    this._x = point.x - this.width / 2;\n    this._y = point.y - this.height / 2;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const rotatedPoints = this.getRotatedPoints();\n    const left = Math.min(...rotatedPoints.map(p => p.x));\n    const right = Math.max(...rotatedPoints.map(p => p.x));\n    const top = Math.min(...rotatedPoints.map(p => p.y));\n    const bottom = Math.max(...rotatedPoints.map(p => p.y));\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  /**\n   * shape area\n   * @getter\n   */\n  get area() {\n    return this.width * this.height;\n  }\n  constructor(options) {\n    super(options);\n    this.shapeType = ShapeType.RECTANGLE;\n    /**\n     * LT vertex position x\n     * @private\n     */\n    this._x = void 0;\n    /**\n     * LT vertex position y\n     * @private\n     */\n    this._y = void 0;\n    /**\n     * rectangle width\n     * @private\n     */\n    this._width = void 0;\n    /**\n     * rectangle height\n     * @private\n     */\n    this._height = void 0;\n    /**\n     * mouse move when creating\n     */\n    this.mouseMove = event => {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(point);\n      this._draw(localPoint);\n    };\n    /**\n     * mouse up when creating\n     */\n    this.mouseUp = () => {\n      this.normalize();\n      this._finish();\n      document.removeEventListener('mousemove', this.mouseMove, false);\n      document.removeEventListener('mouseup', this.mouseUp, false);\n    };\n    const {\n      x,\n      y,\n      width,\n      height\n    } = options;\n    if (x !== undefined && y !== undefined && width !== undefined && height !== undefined) {\n      this._x = x;\n      this._y = y;\n      this._width = width;\n      this._height = height;\n      this.normalize();\n    }\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._controlLine.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   */\n  _drawShapeFill() {\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawRect(this.x, this.y, this.width, this.height);\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape border\n   */\n  _drawShapeLine() {\n    const ctx = this.selected ? this._controlLine : this.instance;\n    const baseWidth = 1 / this.scale;\n    const color = this.displayBorderColor;\n    ctx.moveTo(this.x, this.y);\n    ctx.lineStyle(baseWidth, color);\n    ctx.drawLine(this.x + this.width, this.y, this.borderStyle, this.scale);\n    ctx.lineStyle(baseWidth, color);\n    ctx.drawLine(this.x + this.width, this.y + this.height, this.borderStyle, this.scale);\n    ctx.lineStyle(baseWidth, color);\n    ctx.drawLine(this.x, this.y + this.height, this.borderStyle, this.scale);\n    ctx.lineStyle(baseWidth, color);\n    ctx.drawLine(this.x, this.y, this.borderStyle, this.scale);\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    this._finished = false;\n    document.addEventListener('mousemove', this.mouseMove, false);\n    document.addEventListener('mouseup', this.mouseUp, false);\n  }\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return this.position;\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      rotation: this.rotation,\n      points: this.getRotatedPoints()\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const rotatedPoints = this.getRotatedPoints();\n    return [[rotatedPoints.map(p => [p.x, p.y])]];\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n    if (this.selected) {\n      const points = this.getPoints();\n      const edgePoints = points.map((point, index) => {\n        const nextPoint = points[index + 1 < 4 ? index + 1 : 0];\n        return {\n          x: (point.x + nextPoint.x) / 2,\n          y: (point.y + nextPoint.y) / 2\n        };\n      });\n      edgePoints.forEach((point, index) => {\n        const i = index + 4;\n        const size = index % 2 === 0 ? this.width : this.height;\n        if (!this._controls[i]) {\n          this._controls[i] = new ControlBar({\n            type: index % 2 === 0 ? 'horizonal' : 'vertical',\n            size,\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: this.getCursor(i),\n            onPositionChange: (x, y) => this._updateByBarPosition(index, x, y),\n            onFinish: () => this._finishResize()\n          });\n        } else {\n          this._controls[i].cursor = this.getCursor(i);\n          this._controls[i].position = point;\n          this._controls[i].size = size;\n        }\n        this._controls[i].add();\n      });\n      points.forEach((point, index) => {\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: this.getCursor(index),\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize()\n          });\n        } else {\n          // update\n          this._controls[index].cursor = this.getCursor(index);\n          this._controls[index].position = point;\n        }\n        this._controls[index].add();\n      });\n      if (this.rotatable) {\n        const size = this.pivot.y - Math.abs(this.height) / 2 - 50 / this.scale;\n        if (!this._rotateControl) {\n          this._rotateControl = new ControlRotation({\n            container: this.container,\n            position: this.pivot,\n            size,\n            rotation: this.shapeContainer.rotation,\n            scale: this.scale,\n            color: this.selectedColor,\n            onRotationChange: angle => {\n              if (this.rotation !== undefined) {\n                this.rotation += angle;\n                if (this.rotation >= Math.PI) {\n                  this.rotation -= 2 * Math.PI;\n                }\n                if (this.rotation <= -Math.PI) {\n                  this.rotation += 2 * Math.PI;\n                }\n              }\n            },\n            onFinish: () => {\n              this._changed();\n            }\n          });\n        }\n        this._rotateControl.rotation = this.shapeContainer.rotation;\n        this._rotateControl.position = this.pivot;\n        this._rotateControl.size = size;\n        this._rotateControl.add();\n      }\n    } else {\n      this.removeControls();\n    }\n  }\n\n  /**\n   * update rectangle x, y, width, height by dragging point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   * @param event\n   */\n  _updateByPointPosition(index, x, y) {\n    const position = new Point(x, y);\n    const points = this.getPoints();\n    const offsetX = position.x - points[index].x;\n    const offsetY = position.y - points[index].y;\n    if (this._x !== undefined && this._y !== undefined && this._width !== undefined && this._height !== undefined) {\n      switch (index) {\n        case 0:\n          this._x = position.x;\n          this._y = position.y;\n          this._width -= offsetX;\n          this._height -= offsetY;\n          break;\n        case 1:\n          this._y += position.y - this._y;\n          this._width += offsetX;\n          this._height -= offsetY;\n          break;\n        case 2:\n          this._width += offsetX;\n          this._height += offsetY;\n          break;\n        case 3:\n          this._x += position.x - this._x;\n          this._width -= offsetX;\n          this._height += offsetY;\n          break;\n        default:\n      }\n      this.drawShape();\n      this._updatePosition(true);\n      this._resizing();\n    }\n  }\n\n  /**\n   * update rectangle x, y, width, height by dragging edge\n   * @param index edge index, top -> right -> bottom -> left\n   * @param x new position x\n   * @param y new position y\n   * @param event\n   */\n  _updateByBarPosition(index, x, y) {\n    const position = new Point(x, y);\n    if (this._x !== undefined && this._y !== undefined && this._width !== undefined && this._height !== undefined) {\n      const offsetX = position.x - this._x;\n      const offsetY = position.y - this._y;\n      switch (index) {\n        case 0:\n          this._y = position.y;\n          this._height -= offsetY;\n          break;\n        case 1:\n          this._width = offsetX;\n          break;\n        case 2:\n          this._height = offsetY;\n          break;\n        case 3:\n          this._x = position.x;\n          this._width -= offsetX;\n          break;\n        default:\n      }\n      this.drawShape();\n      this._updatePosition(true);\n      this._resizing();\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * draw shape by the position\n   * @private\n   * @param point mouse position\n   */\n  _draw(point) {\n    const p = point;\n    if (this._x === undefined || this._y === undefined) {\n      this._x = p.x;\n      this._y = p.y;\n    } else {\n      this._width = p.x - this._x;\n      this._height = p.y - this._y;\n    }\n    this.drawShape();\n  }\n\n  /**\n   * normalize rectangle shape, remove it if necessary\n   */\n  normalize() {\n    if (this._x === undefined || this._y === undefined || !this._width || !this._height) {\n      this._remove();\n      return;\n    }\n    if (this._width < 0) {\n      this._x += this._width;\n      this._width = Math.abs(this._width);\n    }\n    if (this._height < 0) {\n      this._y += this._height;\n      this._height = Math.abs(this._height);\n    }\n    this._x = precise(this._x);\n    this._y = precise(this._y);\n    this._width = precise(this._width);\n    this._height = precise(this._height);\n    this.drawShape();\n  }\n\n  /**\n   * get control cursor\n   * @returns corsor\n   */\n  getCursor(index) {\n    const rotateMultiple = Math.round(this.rotation / (Math.PI / 4));\n    let cursor = Cursor.DEFAULT;\n    switch (rotateMultiple) {\n      case 0:\n      case 4:\n      case -4:\n        if (index < 4) {\n          cursor = index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE;\n        } else {\n          cursor = index % 2 === 0 ? Cursor.NS_RESIZE : Cursor.EW_RESIZE;\n        }\n        break;\n      case 2:\n      case -2:\n        if (index < 4) {\n          cursor = index % 2 === 0 ? Cursor.NESW_RESIZE : Cursor.NWSE_RESIZE;\n        } else {\n          cursor = index % 2 === 0 ? Cursor.EW_RESIZE : Cursor.NS_RESIZE;\n        }\n        break;\n      case 1:\n      case -3:\n        if (index < 4) {\n          cursor = index % 2 === 0 ? Cursor.NS_RESIZE : Cursor.EW_RESIZE;\n        } else {\n          cursor = index % 2 === 0 ? Cursor.NESW_RESIZE : Cursor.NWSE_RESIZE;\n        }\n        break;\n      case -1:\n      case 3:\n        if (index < 4) {\n          cursor = index % 2 === 0 ? Cursor.EW_RESIZE : Cursor.NS_RESIZE;\n        } else {\n          cursor = index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE;\n        }\n        break;\n      default:\n        break;\n    }\n    return cursor;\n  }\n\n  /**\n   * get 4 points based on the position and size\n   */\n  getPoints() {\n    const right = precise(this.x + this.width);\n    const bottom = precise(this.y + this.height);\n    return [{\n      x: this.x,\n      y: this.y\n    }, {\n      x: right,\n      y: this.y\n    }, {\n      x: right,\n      y: bottom\n    }, {\n      x: this.x,\n      y: bottom\n    }];\n  }\n\n  /**\n   * get actual 4 points position\n   */\n  getRotatedPoints() {\n    const points = this.getPoints();\n    if (this.rotation !== 0) {\n      points.forEach(p => {\n        const point = computeRotatedPosition(this.pivot, p, this.rotation);\n        p.x = precise(point.x);\n        p.y = precise(point.y);\n      });\n    }\n    return points;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const {\n      x,\n      y\n    } = point;\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n    const points = this.getRotatedPoints();\n    // points\n    let nearestPoint;\n    let d;\n    points.forEach(p => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    for (let i = 0; i < points.length; i += 1) {\n      const startPoint = new Flatten.Point(points[i].x, points[i].y);\n      const endPoint = new Flatten.Point(points[(i + 1) % 4].x, points[(i + 1) % 4].y);\n      const line = new Flatten.Segment(startPoint, endPoint);\n      const [distance, segment] = line.distanceTo(location);\n      if (distance < t) {\n        const {\n          ps,\n          pe\n        } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * shape destroy\n   */\n  destroy() {\n    document.removeEventListener('mousemove', this.mouseMove, false);\n    document.removeEventListener('mouseup', this.mouseUp, false);\n    // call parent\n    super.destroy();\n  }\n}","map":{"version":3,"names":["Point","Flatten","Shape","ShapeType","ControlPoint","ControlBar","ControlRotation","precise","Cursor","computeRotatedPosition","Rectangle","x","_x","normalize","y","_y","width","_width","height","_height","position","point","drawShape","pivot","px","py","shouldUpdate","shapeBounds","rotatedPoints","getRotatedPoints","left","Math","min","map","p","right","max","top","bottom","area","constructor","options","shapeType","RECTANGLE","mouseMove","event","_mapScreenToStagePosition","clientX","clientY","localPoint","_mapStageToLocalPosition","_draw","mouseUp","_finish","document","removeEventListener","undefined","instance","clear","_controlLine","_drawShapeFill","_drawShapeLine","_finished","drawShapeLabel","attachControlPoints","beginFill","color","alpha","drawRect","endFill","ctx","selected","baseWidth","scale","displayBorderColor","moveTo","lineStyle","drawLine","borderStyle","create","addEventListener","getLabelPosition","getData","rotation","points","getAreaAsGeoJSON","editable","removeControls","getPoints","edgePoints","index","nextPoint","forEach","i","size","_controls","type","container","controlsContainer","selectedColor","cursor","getCursor","onPositionChange","_updateByBarPosition","onFinish","_finishResize","add","_updateByPointPosition","rotatable","abs","_rotateControl","shapeContainer","onRotationChange","angle","PI","_changed","offsetX","offsetY","_updatePosition","_resizing","resizing","_remove","rotateMultiple","round","DEFAULT","NWSE_RESIZE","NESW_RESIZE","NS_RESIZE","EW_RESIZE","snapToPoint","tolerance","t","nearestPoint","d","pointDistance","sqrt","location","length","startPoint","endPoint","line","Segment","distance","segment","distanceTo","ps","pe","edgePoint","equalTo","destroy"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Rectangle.ts"],"sourcesContent":["import { Point } from 'pixi.js';\nimport Flatten from '@flatten-js/core';\nimport Shape, { ShapeOptions } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlBar from './controls/ControlBar';\nimport ControlRotation from './controls/ControlRotation';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nimport { computeRotatedPosition } from '../../../utils/math';\n\nexport interface RectangleData {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  points: {x: number, y: number}[];\n  rotation?: number;\n}\n\nexport interface RectangleOptions extends ShapeOptions {\n  x?: number;\n  y?: number;\n  width?: number;\n  height?: number;\n}\n\n/**\n * Rectangle shape\n * @class\n */\nexport default class Rectangle extends Shape<RectangleData> {\n  shapeType = ShapeType.RECTANGLE;\n\n  /**\n   * LT vertex position x\n   * @private\n   */\n  private _x: number | undefined;\n\n  /**\n   * LT vertex position y\n   * @private\n   */\n  private _y: number | undefined;\n\n  /**\n   * rectangle width\n   * @private\n   */\n  private _width: number | undefined;\n\n  /**\n   * rectangle height\n   * @private\n   */\n  private _height: number | undefined;\n\n  /**\n   * get x\n   * @getter\n   */\n  get x() {\n    return this._x || 0;\n  }\n\n  /**\n   * set x\n   * @setter\n   */\n  set x(x: number) {\n    this._x = x;\n    this.normalize();\n  }\n\n  /**\n   * get y\n   * @getter\n   */\n  get y() {\n    return this._y || 0;\n  }\n\n  /**\n   * set y\n   * @setter\n   */\n  set y(y: number) {\n    this._y = y;\n    this.normalize();\n  }\n\n  /**\n   * get width\n   * @getter\n   */\n  get width() {\n    return this._width || 0;\n  }\n\n  /**\n   * set width\n   * @setter\n   */\n  set width(width: number) {\n    this._width = width;\n    this.normalize();\n  }\n\n  /**\n   * get height\n   * @getter\n   */\n  get height() {\n    return this._height || 0;\n  }\n\n  /**\n   * set height\n   * @setter\n   */\n  set height(height: number) {\n    this._height = height;\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point: Point) {\n    if (this.x !== point.x || this.y !== point.y) {\n      this._x = precise(point.x);\n      this._y = precise(point.y);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get pivot\n   * @getter\n   */\n  get pivot() {\n    return new Point(this.x + this.width / 2, this.y + this.height / 2);\n  }\n\n  /**\n   * set pivot\n   * @setter\n   */\n  set pivot(point: Point) {\n    const { x: px, y: py } = this.pivot;\n    const shouldUpdate = point.x !== px || point.y !== py;\n    this._x = point.x - this.width / 2;\n    this._y = point.y - this.height / 2;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const rotatedPoints = this.getRotatedPoints();\n    const left = Math.min(...rotatedPoints.map((p) => p.x));\n    const right = Math.max(...rotatedPoints.map((p) => p.x));\n    const top = Math.min(...rotatedPoints.map((p) => p.y));\n    const bottom = Math.max(...rotatedPoints.map((p) => p.y));\n    return { left, top, right, bottom };\n  }\n\n  /**\n   * shape area\n   * @getter\n   */\n  get area() {\n    return this.width * this.height;\n  }\n\n  constructor(options: RectangleOptions) {\n    super(options);\n\n    const { x, y, width, height } = options;\n\n    if (x !== undefined && y !== undefined && width !== undefined && height !== undefined) {\n      this._x = x;\n      this._y = y;\n      this._width = width;\n      this._height = height;\n      this.normalize();\n    }\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._controlLine.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   */\n  private _drawShapeFill() {\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawRect(this.x, this.y, this.width, this.height);\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape border\n   */\n  private _drawShapeLine() {\n    const ctx = this.selected ? this._controlLine : this.instance;\n    const baseWidth = 1 / this.scale;\n    const color = this.displayBorderColor;\n    ctx.moveTo(this.x, this.y);\n    ctx.lineStyle(baseWidth, color);\n    ctx.drawLine(this.x + this.width, this.y, this.borderStyle, this.scale);\n    ctx.lineStyle(baseWidth, color);\n    ctx.drawLine(this.x + this.width, this.y + this.height, this.borderStyle, this.scale);\n    ctx.lineStyle(baseWidth, color);\n    ctx.drawLine(this.x, this.y + this.height, this.borderStyle, this.scale);\n    ctx.lineStyle(baseWidth, color);\n    ctx.drawLine(this.x, this.y, this.borderStyle, this.scale);\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    this._finished = false;\n    document.addEventListener('mousemove', this.mouseMove, false);\n    document.addEventListener('mouseup', this.mouseUp, false);\n  }\n\n  /**\n   * mouse move when creating\n   */\n  mouseMove = (event: MouseEvent) => {\n    const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n    const localPoint = this._mapStageToLocalPosition(point);\n    this._draw(localPoint);\n  };\n\n  /**\n   * mouse up when creating\n   */\n  mouseUp = () => {\n    this.normalize();\n    this._finish();\n    document.removeEventListener('mousemove', this.mouseMove, false);\n    document.removeEventListener('mouseup', this.mouseUp, false);\n  };\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return this.position;\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      rotation: this.rotation,\n      points: this.getRotatedPoints(),\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const rotatedPoints = this.getRotatedPoints();\n    return [[rotatedPoints.map((p) => [p.x, p.y] as [number, number])]];\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    if (this.selected) {\n      const points = this.getPoints();\n      const edgePoints = points.map((point, index) => {\n        const nextPoint = points[index + 1 < 4 ? index + 1 : 0];\n        return {\n          x: (point.x + nextPoint.x) / 2,\n          y: (point.y + nextPoint.y) / 2,\n        };\n      });\n\n      edgePoints.forEach((point, index) => {\n        const i = index + 4;\n        const size = index % 2 === 0 ? this.width : this.height;\n        if (!this._controls[i]) {\n          this._controls[i] = new ControlBar({\n            type: index % 2 === 0 ? 'horizonal' : 'vertical',\n            size,\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: this.getCursor(i),\n            onPositionChange: (x, y) => this._updateByBarPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n          });\n        } else {\n          this._controls[i].cursor = this.getCursor(i);\n          this._controls[i].position = point;\n          this._controls[i].size = size;\n        }\n        this._controls[i].add();\n      });\n\n      points.forEach((point, index) => {\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: this.getCursor(index),\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n          });\n        } else {\n          // update\n          this._controls[index].cursor = this.getCursor(index);\n          this._controls[index].position = point;\n        }\n        this._controls[index].add();\n      });\n\n      if (this.rotatable) {\n        const size = this.pivot.y - Math.abs(this.height) / 2 - 50 / this.scale;\n        if (!this._rotateControl) {\n          this._rotateControl = new ControlRotation({\n            container: this.container,\n            position: this.pivot,\n            size,\n            rotation: this.shapeContainer.rotation,\n            scale: this.scale,\n            color: this.selectedColor,\n            onRotationChange: (angle) => {\n              if (this.rotation !== undefined) {\n                this.rotation += angle;\n                if (this.rotation >= Math.PI) {\n                  this.rotation -= 2 * Math.PI;\n                }\n                if (this.rotation <= -Math.PI) {\n                  this.rotation += 2 * Math.PI;\n                }\n              }\n            },\n            onFinish: () => {\n              this._changed();\n            }\n          });\n        }\n        this._rotateControl.rotation = this.shapeContainer.rotation;\n        this._rotateControl.position = this.pivot;\n        this._rotateControl.size = size;\n        this._rotateControl.add();\n      }\n    } else {\n      this.removeControls();\n    }\n  }\n\n  /**\n   * update rectangle x, y, width, height by dragging point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   * @param event\n   */\n  private _updateByPointPosition(index: number, x: number, y: number) {\n    const position = new Point(x, y);\n    const points = this.getPoints();\n    const offsetX = position.x - points[index].x;\n    const offsetY = position.y - points[index].y;\n    if (this._x !== undefined && this._y !== undefined && this._width !== undefined && this._height !== undefined) {\n      switch (index) {\n        case 0:\n          this._x = position.x;\n          this._y = position.y;\n          this._width -= offsetX;\n          this._height -= offsetY;\n          break;\n        case 1:\n          this._y += position.y - this._y;\n          this._width += offsetX;\n          this._height -= offsetY;\n          break;\n        case 2:\n          this._width += offsetX;\n          this._height += offsetY;\n          break;\n        case 3:\n          this._x += position.x - this._x;\n          this._width -= offsetX;\n          this._height += offsetY;\n          break;\n        default:\n      }\n      this.drawShape();\n      this._updatePosition(true);\n      this._resizing();\n    }\n  }\n\n  /**\n   * update rectangle x, y, width, height by dragging edge\n   * @param index edge index, top -> right -> bottom -> left\n   * @param x new position x\n   * @param y new position y\n   * @param event\n   */\n  private _updateByBarPosition(index: number, x: number, y: number) {\n    const position = new Point(x, y);\n    if (this._x !== undefined && this._y !== undefined && this._width !== undefined && this._height !== undefined) {\n      const offsetX = position.x - this._x;\n      const offsetY = position.y - this._y;\n      switch (index) {\n        case 0:\n          this._y = position.y;\n          this._height -= offsetY;\n          break;\n        case 1:\n          this._width = offsetX;\n          break;\n        case 2:\n          this._height = offsetY;\n          break;\n        case 3:\n          this._x = position.x;\n          this._width -= offsetX;\n          break;\n        default:\n      }\n      this.drawShape();\n      this._updatePosition(true);\n      this._resizing();\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  private _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * draw shape by the position\n   * @private\n   * @param point mouse position\n   */\n  private _draw(point: Point) {\n    const p = point;\n    if (this._x === undefined || this._y === undefined) {\n      this._x = p.x;\n      this._y = p.y;\n    } else {\n      this._width = p.x - this._x;\n      this._height = p.y - this._y;\n    }\n    this.drawShape();\n  }\n\n  /**\n   * normalize rectangle shape, remove it if necessary\n   */\n  normalize() {\n    if (this._x === undefined || this._y === undefined || !this._width || !this._height) {\n      this._remove();\n      return;\n    }\n\n    if (this._width < 0) {\n      this._x += this._width;\n      this._width = Math.abs(this._width);\n    }\n    if (this._height < 0) {\n      this._y += this._height;\n      this._height = Math.abs(this._height);\n    }\n    this._x = precise(this._x);\n    this._y = precise(this._y);\n    this._width = precise(this._width);\n    this._height = precise(this._height);\n\n    this.drawShape();\n  }\n\n  /**\n   * get control cursor\n   * @returns corsor\n   */\n  getCursor(index: number):Cursor {\n    const rotateMultiple = Math.round(this.rotation / (Math.PI / 4));\n    let cursor = Cursor.DEFAULT;\n    switch (rotateMultiple) {\n      case 0:\n      case 4:\n      case -4:\n        if (index < 4) {\n          cursor = index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE;\n        } else {\n          cursor = index % 2 === 0 ? Cursor.NS_RESIZE : Cursor.EW_RESIZE;\n        }\n        break;\n      case 2:\n      case -2:\n        if (index < 4) {\n          cursor = index % 2 === 0 ? Cursor.NESW_RESIZE : Cursor.NWSE_RESIZE;\n        } else {\n          cursor = index % 2 === 0 ? Cursor.EW_RESIZE : Cursor.NS_RESIZE;\n        }\n        break;\n      case 1:\n      case -3:\n        if (index < 4) {\n          cursor = index % 2 === 0 ? Cursor.NS_RESIZE : Cursor.EW_RESIZE;\n        } else {\n          cursor = index % 2 === 0 ? Cursor.NESW_RESIZE : Cursor.NWSE_RESIZE;\n        }\n        break;\n      case -1:\n      case 3:\n        if (index < 4) {\n          cursor = index % 2 === 0 ? Cursor.EW_RESIZE : Cursor.NS_RESIZE;\n        } else {\n          cursor = index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE;\n        }\n        break;\n      default:\n        break;\n    }\n    return cursor;\n  }\n\n  /**\n   * get 4 points based on the position and size\n   */\n  getPoints() {\n    const right = precise(this.x + this.width);\n    const bottom = precise(this.y + this.height);\n    return [\n      { x: this.x, y: this.y },\n      { x: right, y: this.y },\n      { x: right, y: bottom },\n      { x: this.x, y: bottom },\n    ];\n  }\n\n  /**\n   * get actual 4 points position\n   */\n  getRotatedPoints() {\n    const points = this.getPoints();\n    if (this.rotation !== 0) {\n      points.forEach((p) => {\n        const point = computeRotatedPosition(this.pivot, p, this.rotation);\n        p.x = precise(point.x);\n        p.y = precise(point.y);\n      });\n    }\n    return points;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point: Point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const { x, y } = point;\n    const { left, right, top, bottom } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n\n    const points = this.getRotatedPoints();\n    // points\n    let nearestPoint: { x: number; y: number; } | undefined;\n    let d: number | undefined;\n    points.forEach((p) => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    for (let i = 0; i < points.length; i += 1) {\n      const startPoint = new Flatten.Point(points[i].x, points[i].y);\n      const endPoint = new Flatten.Point(points[(i + 1) % 4].x, points[(i + 1) % 4].y);\n      const line = new Flatten.Segment(startPoint, endPoint);\n      const [distance, segment] = line.distanceTo(location);\n      if (distance < t) {\n        const { ps, pe } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * shape destroy\n   */\n  destroy() {\n    document.removeEventListener('mousemove', this.mouseMove, false);\n    document.removeEventListener('mouseup', this.mouseUp, false);\n    // call parent\n    super.destroy();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}