{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/TextAnnotationApp.jsx\";\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable no-undef */\n/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport { Editor, EditorState, convertFromRaw, getDefaultKeyBinding } from 'draft-js';\nimport { notification, message } from 'antd';\nimport classnames from 'classnames';\nimport 'draft-js/dist/Draft.css';\nimport { uniq } from 'lodash';\nimport { substr, strlen } from 'fbjs/lib/UnicodeUtils';\nimport localMessage from './locale';\nimport { LabelTag, InsertionTag, ConnectionTag } from './components/tag';\nimport { isAnnotationReadonly, isRework, isReviewEditable, isPreview } from '../../utils/tool-mode';\nimport Toolbar from './components/toolBar';\nimport { genTagMap, renderTagMap } from './utils/tagMapUtil';\nimport ReviewForm from './components/reviewForm';\nimport './TextAnnotationApp.scss';\nimport saveSvg from \"./assert/save.svg\";\nimport undoSvg from \"./assert/undo.svg\";\nimport redoSvg from \"./assert/redo.svg\";\nimport { FOCUS_COLOR, DEFAULT_COLOR, FONT_COLOR, BASE_COLOR, HISTORY_SIZE, FONT_SIZE, TAG_HEIGHT, LINE_HEIGHT, EDITOR_PADDING, COMPOSITION, SELECTION, ACTION, KEY_COMMAND, RECALL_TYPE, MISSING_LABEL, HOVER_COLOR, FONT_FAMILY, FONT_SPACE, FOCUS_TYPE, HOVER_ALPHA, ACTIVE_ALPHA, DEFAULT_ALPHA } from './data/constant';\nimport { isArabic, convertArrayToColor, convertColorToArray, getSliceHead, setSelection, closeSelection, idManager, getTextByInsertion, getTargetWrapperDataSet } from './utils/helper';\nimport { TAG, isLabel, isInsertion, isConnection, toQA, isQATool } from './data/tag_mode';\nimport TagInfoMap from './utils/TagInfoMap';\nimport DataProxy from './data/dataProxy';\nexport default class TextAnnotationApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addHistory = (type, data) => {\n      let targetList;\n      if (this.undoLock) {\n        // Add history to redo list\n        targetList = this.redoList;\n      } else if (this.redoLock) {\n        // Add history back to undo list\n        targetList = this.undoList;\n        // Clear redo list\n      } else {\n        // Add history to redo list\n        targetList = this.undoList;\n        this.redoList = [];\n      }\n      let {\n        length\n      } = targetList;\n      if (length > HISTORY_SIZE) {\n        targetList.shift();\n        length -= 1;\n      }\n      if (type === ACTION.EDIT_SINGLE_ADD && length >= 1) {\n        const prev = targetList[length - 1];\n        if ((prev.type === ACTION.EDIT_DEFAULT || prev.type === ACTION.EDIT_SINGLE_ADD) && prev.data.prevSlice === '' && prev.data.end === data.prevStart) {\n          targetList.pop();\n          targetList.push({\n            type: ACTION.EDIT_DEFAULT,\n            data: {\n              prevSlice: '',\n              slice: prev.data.slice + data.slice,\n              prevStart: prev.data.prevStart,\n              prevEnd: prev.data.prevEnd,\n              start: data.start,\n              end: data.end\n            }\n          });\n        } else targetList.push({\n          type,\n          data\n        });\n      } else if (type === ACTION.EDIT_SINGLE_DEL && length >= 1) {\n        const prev = targetList[length - 1];\n        if ((prev.type === ACTION.EDIT_DEFAULT || prev.type === ACTION.EDIT_SINGLE_DEL) && prev.data.slice === '' && data.prevEnd === prev.data.start) {\n          targetList.pop();\n          targetList.push({\n            type: ACTION.EDIT_DEFAULT,\n            data: {\n              slice: '',\n              prevSlice: data.prevSlice + prev.data.prevSlice,\n              prevStart: data.end,\n              prevEnd: prev.data.prevEnd,\n              start: data.start,\n              end: data.end\n            }\n          });\n        } else targetList.push({\n          type,\n          data\n        });\n      } else targetList.push({\n        type,\n        data\n      });\n    };\n    this.executeHistory = recallType => {\n      // Execute history\n      let targetList;\n      if (recallType === RECALL_TYPE.UNDO) {\n        // Get from undo list\n        this.undoLock = true;\n        targetList = this.undoList;\n      } else if (recallType === RECALL_TYPE.REDO) {\n        // Get from redo list\n        this.redoLock = true;\n        targetList = this.redoList;\n      }\n      if (targetList.length === 0) {\n        this.undoLock = false;\n        this.redoLock = false;\n        return;\n      }\n      const item = targetList.pop();\n      const {\n        data\n      } = item;\n      let nextEditorState = this.state.editorState;\n      switch (item.type) {\n        case ACTION.EDIT_SINGLE_ADD:\n        case ACTION.EDIT_SINGLE_DEL:\n        case ACTION.EDIT_DEFAULT:\n          {\n            const newData = {\n              prevSlice: data.slice,\n              slice: data.prevSlice,\n              start: data.prevEnd,\n              end: data.prevEnd,\n              prevStart: data.prevStart,\n              prevEnd: data.end\n            };\n            // nextEditorState = this.onContentChange(nextEditorState, newData);\n            nextEditorState = setSelection(this.onContentChange(nextEditorState, newData), newData.start, newData.end);\n            break;\n          }\n        case ACTION.ADD_INSERTION:\n          {\n            const {\n              id\n            } = data.insertion;\n            nextEditorState = this.deleteTag(id);\n            break;\n          }\n        case ACTION.ADD_LABEL:\n          {\n            const {\n              id\n            } = data.label;\n            nextEditorState = this.deleteTag(id);\n            break;\n          }\n        case ACTION.ADD_CONNECTION:\n          {\n            const {\n              id\n            } = data;\n            nextEditorState = this.deleteTag(id);\n            break;\n          }\n        case ACTION.DEL_LABEL:\n          {\n            const {\n              relatedConnections,\n              label\n            } = data;\n            nextEditorState = this.addLabel(nextEditorState, label.start, label.end, label.value, label.id, relatedConnections);\n            break;\n          }\n        case ACTION.DEL_INSERTION:\n          {\n            const {\n              relatedConnections,\n              insertion\n            } = data;\n            nextEditorState = this.addInsertion(nextEditorState, insertion.at, insertion.value, insertion.id, relatedConnections);\n            break;\n          }\n        case ACTION.DEL_CONNECTION:\n          {\n            nextEditorState = this.addConnection(nextEditorState, data.from, data.to, data.value, data.id);\n            break;\n          }\n        default:\n          break;\n      }\n      this.renderAndSave(nextEditorState);\n      this.undoLock = false;\n      this.redoLock = false;\n    };\n    this.renderAndSave = (editorState, shouldRenderTags = true, shouldResetCurrentState = false, shouldSaveURL = false) => {\n      if (!editorState) editorState = this.state.editorState;\n      const {\n        hasFocus\n      } = editorState.getSelection();\n      const top = this.editorWrapper.scrollTop;\n      // window.ew = this.editorWrapper;\n      return new Promise(resolve => {\n        if (shouldResetCurrentState) {\n          this.resetCurrentFrom();\n        }\n        this.setState({\n          editorState\n        });\n        if (shouldSaveURL) {\n          this.exportResult();\n        }\n        resolve();\n      }).then(() => {\n        if (shouldRenderTags) {\n          const {\n            nextEditorState,\n            tagMap\n          } = this.measureTags(editorState);\n          return new Promise(resolve => {\n            this.setState({\n              editorState: nextEditorState\n            });\n            resolve(tagMap);\n          });\n        }\n      }).then(tagMap => {\n        if (shouldRenderTags) {\n          this.renderTags(tagMap);\n          return new Promise(resolve => {\n            this.setState({\n              editorWidth: this.editorWrapper.offsetWidth - EDITOR_PADDING * 2,\n              editorHeight: this.editorWrapper.scrollHeight - EDITOR_PADDING * 2,\n              tagMap\n            });\n            resolve();\n          });\n        }\n      }).then(() => {\n        if (hasFocus) {\n          // move back to current selection after composition end\n          if (this.compositionTop >= 0) {\n            this.editor.focus({\n              y: this.compositionTop\n            });\n            this.compositionTop = -1;\n          } else this.editor.focus({\n            y: top\n          });\n        }\n      });\n    };\n    this.updateEditorAndRender = options => {\n      let {\n        editorState\n      } = this.state;\n      // update rawDraftContentState, using new results\n      this.raw = this.renderTextArea();\n      // update editorState, using new rawDraftContentState\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      if (options && typeof options[Symbol.iterator] === 'function') {\n        return this.renderAndSave(editorState, ...options);\n      }\n      return this.renderAndSave(editorState);\n    };\n    this.onChange = editorState => {\n      // ignore composition operation\n      if (this.compositionFlag === COMPOSITION.ENABLED) return;\n      // get operation type ( handled operation not included )\n      const prevEditorState = this.state.editorState;\n      const prevText = this.text;\n      const text = editorState.getCurrentContent().getPlainText();\n      let prevStart = prevEditorState.getSelection().getStartOffset();\n      const prevEnd = prevEditorState.getSelection().getEndOffset();\n      const start = editorState.getSelection().getStartOffset();\n      const end = editorState.getSelection().getEndOffset();\n      const {\n        hasFocus\n      } = editorState.getSelection();\n      const {\n        hasFocus: prevFocus\n      } = prevEditorState.getSelection();\n      if (hasFocus !== prevFocus) {\n        // when focus change update new editor state and return without doing anything\n        const nextEditorState = EditorState.set(editorState, {\n          currentContent: convertFromRaw(this.raw)\n        });\n        this.renderAndSave(nextEditorState, null, false);\n        return;\n      }\n      if (this.inputFlag || this.pasteFlag || this.compositionFlag === COMPOSITION.PENDING || prevText !== text) {\n        /* text changed:\n         * 1. deleted by delete key\n         * 2. deleted by drag + delete key\n         * 3. deleted by drag + cut operation\n         * 4. insert/replace by (drag) + simply typing\n         * 5. insert/replace by (drag) + composition typing\n         * 6. insert/replace by (drag) + paste operation\n         * 7. redo && undo\n         */\n        if (prevStart === prevEnd && start === prevStart - 1) prevStart -= 1;\n        const prevSlice = prevText.slice(prevStart, prevEnd);\n        const slice = text.slice(prevStart, end);\n        const data = {\n          prevSlice,\n          slice,\n          prevStart,\n          prevEnd,\n          start,\n          end\n        };\n        const nextEditorState = this.onContentChange(editorState, data);\n        // reset flag\n        this.inputFlag = false;\n        this.pasteFlag = false;\n        this.compositionFlag = COMPOSITION.DISABLED;\n        this.renderAndSave(nextEditorState);\n      } else {\n        /* selection changed\n         * 1. simply select\n         * 2. click select: add insertion\n         * 3. drag select: add label\n         */\n        const data = {\n          start,\n          end\n        };\n        const {\n          nextEditorState,\n          type\n        } = this.onSelectionChange(editorState, data);\n        const shouldRender = type !== SELECTION.MOVE;\n        this.renderAndSave(nextEditorState, shouldRender, shouldRender);\n      }\n    };\n    this.renderTags = tagMap => {\n      const spanMap = this.getAnchorElementsByHeads();\n      const newTagMap = renderTagMap(tagMap, spanMap);\n      return newTagMap;\n    };\n    this.onSave = async () => {\n      if (isPreview(this.toolMode)) return;\n      try {\n        if (!isAnnotationReadonly(this.toolMode)) {\n          await this.exportResult();\n        }\n        if (isReviewEditable(this.toolMode)) {\n          await this.submitReviews();\n        }\n        message.success(localMessage('saveSuccess'));\n      } catch (e) {\n        message.warning(localMessage('saveFail'));\n      }\n    };\n    this.onSubmit = () => this.exportResult(true);\n    this.exportResult = (isSubmit = false) => {\n      var _this$props$jobProxy;\n      if (isAnnotationReadonly(this.toolMode)) return;\n      return (_this$props$jobProxy = this.props.jobProxy) === null || _this$props$jobProxy === void 0 ? void 0 : _this$props$jobProxy.saveResult({\n        content: this.text,\n        results: this.data.results,\n        auditId: this.props.jobProxy.auditId\n      }, isSubmit);\n    };\n    this.measureTags = editorState => {\n      const {\n        text,\n        raw,\n        configMap\n      } = this;\n      const {\n        labels,\n        insertions\n      } = this.data.getResults();\n      const spanMap = this.getAnchorElementsByHeads();\n      const offsetTops = uniq(labels.map(label => spanMap.get(label.start).offsetTop).concat(insertions.map(insertion => spanMap.get(insertion.at).offsetTop)));\n      const occupyMap = new Map();\n      offsetTops.forEach(offsetTop => {\n        occupyMap.set(offsetTop, []);\n      });\n\n      // get label offsets\n      const tagMap = genTagMap(this.data.getResults(), configMap, spanMap, occupyMap, text);\n      const ranges = raw.blocks[0].inlineStyleRanges;\n      const style = {\n        ...this.state.style\n      };\n      ranges.filter(item => item.style.slice(0, 6) === 'ANCHOR').forEach(item => {\n        const span = this.getAnchorElementByHead(item.offset);\n        const occupyList = occupyMap.get(span.offsetTop);\n        const lineHeight = occupyList.map(it => it.top > 0 ? it.top - FONT_SIZE + TAG_HEIGHT : -it.top).sort((a, b) => a - b).pop() * 2 + LINE_HEIGHT;\n        style[`LINEHEIGHT_${lineHeight}`] = {\n          lineHeight: `${lineHeight}px`\n        };\n        ranges.push({\n          offset: item.offset,\n          length: item.length,\n          style: `LINEHEIGHT_${lineHeight}`\n        });\n      });\n      const nextEditorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      this.setState({\n        style\n      });\n      return {\n        nextEditorState,\n        tagMap\n      };\n    };\n    this.onSelectionChange = (editorState, data) => {\n      const {\n        start,\n        end\n      } = data;\n      const {\n        currentBrush\n      } = this.state;\n      if (!this.mouseFlag) {\n        return {\n          nextEditorState: editorState,\n          type: SELECTION.MOVE\n        };\n      }\n      if (start === end && isInsertion(currentBrush === null || currentBrush === void 0 ? void 0 : currentBrush.type)) {\n        // console.log('click select', start, end);\n        const fbAt = strlen(this.text.slice(0, start));\n        const nextEditorState = this.addInsertion(editorState, fbAt, currentBrush.text);\n        return {\n          nextEditorState,\n          type: SELECTION.CLICK\n        };\n      }\n      if (start !== end && isLabel(currentBrush === null || currentBrush === void 0 ? void 0 : currentBrush.type)) {\n        // console.log('drag select', start, end, this.state.currentBrush);\n        const fbStart = strlen(this.text.slice(0, start));\n        const fbEnd = strlen(this.text.slice(0, end));\n        const nextEditorState = this.addLabel(editorState, fbStart, fbEnd, currentBrush.text);\n        return {\n          nextEditorState,\n          type: SELECTION.DRAG\n        };\n      }\n      return {\n        nextEditorState: editorState,\n        type: SELECTION.MOVE\n      };\n    };\n    this.deleteTag = id => {\n      const {\n        editorState\n      } = this.state;\n      if (isAnnotationReadonly(this.toolMode) && !isQATool(id)) return editorState;\n      const operation = this.data.deleteTag(id);\n      switch (true) {\n        case isLabel(id):\n          this.addHistory(ACTION.DEL_LABEL, operation);\n          break;\n        case isConnection(id):\n          this.addHistory(ACTION.DEL_CONNECTION, operation);\n          break;\n        case isInsertion(id):\n          this.addHistory(ACTION.DEL_INSERTION, operation);\n          break;\n        default:\n          break;\n      }\n      this.raw = this.renderTextArea();\n      return EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n    };\n    this.addInsertion = (editorState, at, value, id, relatedConnections = []) => {\n      const {\n        state: {\n          currentBrush\n        },\n        text,\n        idGenerator,\n        toolMode\n      } = this;\n      if (isAnnotationReadonly(this.toolMode)) return editorState;\n      if (at === strlen(text)) return editorState; // prevent insert to the end of content\n      // eslint-disable-next-line no-restricted-syntax\n      for (const item of this.data.results.insertions) {\n        if (item.at === at && item.value === currentBrush.text) return editorState;\n      }\n      if (!id) id = idGenerator.generateID(currentBrush.type);\n      const arabic = isArabic(substr(text, at));\n      if (arabic && at) at -= 1;\n      const newItem = {\n        at,\n        value,\n        id,\n        text: getTextByInsertion(this.text, {\n          at,\n          value\n        }),\n        isReview: isReviewEditable(toolMode)\n      };\n      this.addHistory(ACTION.ADD_INSERTION, {\n        insertion: newItem,\n        relatedConnections\n      });\n      this.data.addResultItem(id, newItem, relatedConnections);\n      this.raw = this.renderTextArea();\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      editorState = closeSelection(editorState);\n      return editorState;\n    };\n    this.addConnection = (editorState, from, to, value, id) => {\n      const {\n        state: {\n          currentBrush\n        },\n        idGenerator,\n        toolMode,\n        data\n      } = this;\n      if (isAnnotationReadonly(toolMode)) return editorState;\n      if (from === to) return editorState;\n      if (isQATool(from) || isQATool(to)) return editorState; // can't add connection for qa tool\n\n      if (data.results.connections.some(item => item.from === from && item.to === to && item.value === currentBrush.text)) return editorState;\n      if (!id) id = idGenerator.generateID(currentBrush.type);\n      const newItem = {\n        from,\n        to,\n        value,\n        id,\n        isReview: isReviewEditable(toolMode)\n      };\n      this.addHistory(ACTION.ADD_CONNECTION, newItem);\n      data.addResultItem(id, newItem);\n      this.raw = this.renderTextArea();\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      return editorState;\n    };\n    this.addLabel = (editorState, start, end, value, id, relatedConnections = []) => {\n      const {\n        state: {\n          currentBrush\n        },\n        text,\n        idGenerator,\n        toolMode,\n        data\n      } = this;\n      if (isAnnotationReadonly(this.toolMode) && !currentBrush.isQATool) return editorState;\n      if (currentBrush.isQATool && !isReviewEditable(this.toolMode)) return editorState; // qa mode can only use qa tool, work mode can only use normal tool\n\n      // slice should not begin with \\n\n      if (substr(text, start, 1) === '\\n') return editorState;\n      if (data.results.labels.some(item => item.start === start && item.end === end && item.value === currentBrush.text)) return editorState;\n\n      // generate new label\n      if (!id) id = idGenerator.generateID(currentBrush.type);\n      const newItem = {\n        start,\n        end,\n        value,\n        id,\n        text: substr(text, start, end - start),\n        isReview: isReviewEditable(toolMode)\n      };\n      if (currentBrush.isQATool) {\n        this.setState({\n          tagOpenReview: newItem\n        });\n      }\n      this.addHistory(ACTION.ADD_LABEL, {\n        label: newItem,\n        relatedConnections\n      });\n      data.addResultItem(id, newItem, relatedConnections);\n\n      // update rawDraftContentState, using new results\n      this.raw = this.renderTextArea();\n      // update editorState, using new rawDraftContentState\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      editorState = closeSelection(editorState);\n      return editorState;\n    };\n    // create new RawDraftContentState and update customeStyleMap\n    // update: raw, style, sliceMap\n    this.renderTextArea = () => {\n      const {\n        data,\n        text,\n        configMap\n      } = this;\n      const {\n        currentClick,\n        currentHover\n      } = this.state;\n      const style = {\n        ...this.state.style\n      };\n      const {\n        labels,\n        insertions\n      } = data.getResults();\n      // render missing labels as normal labels\n      // let labels = this.results.labels.concat(missing);\n\n      // slice text to segments\n      const slices = uniq(labels.map(label => label.start).concat(labels.map(label => label.end)).concat(insertions.map(insertion => insertion.at)).concat([0, text.length]).sort((a, b) => a - b));\n      const labelHeads = uniq(labels.map(label => label.start));\n      const insertionHeads = uniq(insertions.map(insertion => insertion.at));\n\n      // .concat(insertions.map((insertion) => insertion.at)));\n      const raw = {\n        blocks: [{\n          text,\n          key: 'span-wrapper',\n          type: 'unstyled',\n          depth: 0,\n          inlineStyleRanges: [{\n            offset: 0,\n            length: text.length,\n            style: 'DEFAULT_STYLE'\n          }],\n          children: [],\n          entityRanges: [],\n          data: {}\n        }],\n        entityMap: {}\n      };\n      // 对重叠的tag进行背景色叠加\n      const ranges = raw.blocks[0].inlineStyleRanges;\n      this.sliceMap = new Map();\n      let sliceCount = 0;\n      slices.forEach((anchor, index, array) => {\n        // set slice\n        if (!index) return;\n        const {\n          prev,\n          next\n        } = {\n          prev: array[index - 1],\n          next: anchor\n        };\n        const match = labels.filter(label => label.start <= prev && label.end > prev);\n        let currentRGB = [0, 0, 0];\n        let currentAlpha = 0;\n        let nextAlpha = DEFAULT_ALPHA;\n        let isCoverbyQa = false;\n        let keepRGB = null;\n        match.some(label => {\n          const tempRGB = convertColorToArray(configMap.get(label.value).color);\n          if (!keepRGB) isCoverbyQa = isQATool(label.id);\n          // render clicked tag in priority\n          if (currentClick.id === label.id || currentClick.from === label.id || currentClick.to === label.id) {\n            keepRGB = tempRGB.map((value, i) => value * ACTIVE_ALPHA);\n            isCoverbyQa = isQATool(label.id);\n            return true;\n          }\n          if (!keepRGB && currentHover.id === label.id || currentHover.from === label.id || currentHover.to === label.id) {\n            keepRGB = tempRGB.map(v => v * HOVER_ALPHA);\n          }\n          if (!keepRGB) {\n            currentRGB = currentRGB.map((value, i) => value + tempRGB[i] * nextAlpha);\n            currentAlpha += nextAlpha;\n            nextAlpha = DEFAULT_ALPHA * (1 - currentAlpha) * (1 - currentAlpha);\n          }\n          return false;\n        });\n        const baseRGB = convertColorToArray(BASE_COLOR);\n        currentRGB = keepRGB || currentRGB.map((value, i) => Math.min(255, value + baseRGB[i] * (1 - currentAlpha)));\n        const currentColor = convertArrayToColor(currentRGB);\n        if (!style[`BACKGROUND_${currentColor}`]) style[`BACKGROUND_${currentColor}`] = {\n          backgroundColor: currentColor\n        };\n        if (isCoverbyQa) ranges.push({\n          offset: prev,\n          length: next - prev,\n          style: 'MISSING_STYLE'\n        });\n        ranges.push({\n          offset: prev,\n          length: next - prev,\n          style: `BACKGROUND_${currentColor}`\n        });\n        ranges.push({\n          offset: prev,\n          length: next - prev,\n          style: `SLICE_${prev}_${next}`\n        });\n        // set slice head if for label/insertion slice\n        if (labelHeads.indexOf(prev) >= 0 || insertionHeads.indexOf(prev) >= 0) {\n          const slice = substr(this.text, prev, next - prev);\n          const head = getSliceHead(slice);\n          ranges.push({\n            offset: prev,\n            length: strlen(head),\n            style: `ANCHOR_${prev}`\n          });\n          // set sliceMap\n          this.sliceMap.set(prev, sliceCount);\n          if (head !== slice) sliceCount += 1;\n        }\n        sliceCount += 1;\n      });\n      // update new style\n      this.setState({\n        style\n      });\n      return raw;\n    };\n    this.onMouseMove = e => {\n      const box = this.svg.getBoundingClientRect();\n      this.setState({\n        currentMouse: {\n          left: e.clientX - box.x,\n          top: e.clientY - box.y\n        }\n      });\n    };\n    this.moveFocusToTag = tag => {\n      let currentClick = {\n        ...this.state.currentClick\n      };\n      const {\n        tagMap\n      } = this.state;\n      if (tag == null) return;\n      currentClick = {\n        id: tag.id,\n        from: tag.from,\n        to: tag.to\n      };\n      const {\n        top\n      } = tagMap.getItem(tag.id);\n      const {\n        clientHeight,\n        scrollTop\n      } = this.editorWrapper;\n      if (top < scrollTop || top > clientHeight + scrollTop) {\n        this.editor.focus({\n          y: top\n        });\n      }\n      this.setState({\n        currentClick\n      }, () => {\n        this.updateEditorAndRender();\n      });\n    };\n    this.onKeyDown = e => {\n      if (window.disableTextHotKeys) {\n        return;\n      }\n      const {\n        data\n      } = this;\n      const {\n        currentClick\n      } = this.state;\n      const {\n        keyCode,\n        ctrlKey,\n        altKey\n      } = e;\n      const config = [];\n      this.configMap.forEach(value => {\n        config.push(value);\n      });\n      if (ctrlKey) {\n        switch (true) {\n          case keyCode >= 48 && keyCode <= 57:\n            e.preventDefault();\n            const index = e.keyCode - 49;\n            if (index === -1) {\n              this.setState({\n                currentBrush: null\n              });\n            }\n            if (config[index]) {\n              this.setState({\n                currentBrush: config[index]\n              });\n            }\n            break;\n          case keyCode === 90:\n            e.preventDefault();\n            this.executeHistory(RECALL_TYPE.UNDO);\n            break;\n          case keyCode === 89:\n            e.preventDefault();\n            this.executeHistory(RECALL_TYPE.REDO);\n            break;\n          case keyCode === 83:\n            e.preventDefault();\n            this.onSave();\n            break;\n          case keyCode === 82:\n            e.preventDefault();\n            const nTag = this.data.moveToTagByStep(currentClick.id, 1, true);\n            this.moveFocusToTag(nTag);\n            break;\n          case keyCode === 81:\n            e.preventDefault();\n            if (currentClick.id == null) break;\n            let nxtTag;\n            if (altKey) {\n              nxtTag = data.stepToTag(currentClick.id, -1);\n            } else {\n              nxtTag = data.moveToTagByStep(currentClick.id, -1);\n            }\n            this.moveFocusToTag(nxtTag);\n            break;\n          case keyCode === 69:\n            e.preventDefault();\n            if (currentClick.id == null) break;\n            let nextTag;\n            if (altKey) {\n              nextTag = data.stepToTag(currentClick.id, 1);\n            } else {\n              nextTag = data.moveToTagByStep(currentClick.id, 1);\n            }\n            this.moveFocusToTag(nextTag);\n            break;\n          default:\n            break;\n        }\n      } else if ((currentClick === null || currentClick === void 0 ? void 0 : currentClick.id) !== null && isReviewEditable(this.toolMode) && !isQATool(currentClick.id)) {\n        const item = this.data.getItem(currentClick.id);\n        switch (keyCode) {\n          case 49:\n            e.preventDefault();\n            e.stopPropagation();\n            this.reviewOnConfirm(currentClick.id, {\n              result: 'pass'\n            });\n            break;\n          case 50:\n            e.preventDefault();\n            e.stopPropagation();\n            this.reviewOnConfirm(currentClick.id, {\n              result: 'reject'\n            });\n            this.setState({\n              tagOpenReview: item\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    // update text\n    this.onContentChange = (editorState, data) => {\n      const {\n        currentBrush,\n        editorState: preState\n      } = this.state;\n      if (isAnnotationReadonly(this.toolMode) || currentBrush || this.props.read_only) {\n        return preState;\n      }\n      const {\n        slice,\n        prevSlice\n      } = data;\n      let {\n        prevStart,\n        prevEnd\n      } = data;\n      if (prevSlice.length === 1 && slice.length === 0) this.addHistory(ACTION.EDIT_SINGLE_DEL, data);else if (prevSlice.length === 0 && slice.length === 1) this.addHistory(ACTION.EDIT_SINGLE_ADD, data);else this.addHistory(ACTION.EDIT_DEFAULT, data);\n      prevStart = strlen(this.text.slice(0, data.prevStart));\n      prevEnd = strlen(this.text.slice(0, data.prevEnd));\n      this.text = this.text.slice(0, data.prevStart) + data.slice + this.text.slice(data.prevEnd);\n      // update labels and insertions\n      const {\n        text\n      } = this;\n      const offset = slice.length - prevSlice.length;\n      this.data.tagMove(prevStart, prevEnd, offset, text);\n\n      // update rawDraftContentState, using new text and results\n      this.raw = this.renderTextArea();\n\n      // update editorState, using new rawDraftContentState\n      editorState = EditorState.set(editorState, {\n        currentContent: convertFromRaw(this.raw)\n      });\n      return editorState;\n    };\n    this.resetCurrentFocus = (attribute = 'currentClick', shouldUpdate) => new Promise(resolve => {\n      console.log(attribute);\n      this.setState({\n        [`${attribute}`]: {\n          id: null,\n          from: null,\n          to: null\n        }\n      }, () => resolve('state updated'));\n    }).then(() => {\n      if (shouldUpdate) {\n        return this.updateEditorAndRender();\n      }\n    });\n    this.resetCurrentFrom = () => {\n      this.setState({\n        currentFrom: {\n          type: null,\n          id: null,\n          offset: null\n        }\n      });\n    };\n    // to status for tag: connection mode and other mode\n    this.onTagClick = (e, id) => {\n      const {\n        currentFrom,\n        currentBrush,\n        editorState,\n        tagMap\n      } = this.state;\n      const offset = tagMap.getItem(id);\n      this.editor.blur();\n      if (!isConnection(currentBrush === null || currentBrush === void 0 ? void 0 : currentBrush.type)) return;\n\n      // connecting mode only applys to label and insertion\n      if (isLabel(id) || isInsertion(id)) {\n        // if there is no starting point, setup the starting point\n        if (!currentFrom.type) {\n          this.setState({\n            currentFrom: {\n              type: isLabel(id) ? TAG.LABEL : TAG.INSERTION,\n              id,\n              offset\n            }\n          });\n        } else {\n          const nextEditorState = this.addConnection(editorState, currentFrom.id, id, currentBrush.text);\n          this.renderAndSave(nextEditorState, true, true);\n        }\n      }\n    };\n    this.onTagDoubleClick = e => {\n      // only work in qa mode\n      // if (!isRework(this.toolMode) && !isReviewEditable(this.toolMode)) return;\n      const {\n        id\n      } = getTargetWrapperDataSet(e);\n      const item = this.data.getItem(id);\n      this.setState({\n        tagOpenReview: item\n      });\n      this.editor.blur();\n    };\n    // mouseEvent includes: mouse enter, mouse leave, mouse click, mouse context menu\n    this.TagMouseEvent = (e, id, focusType, active) => {\n      const {\n        currentClick: {\n          id: currId\n        }\n      } = this.state;\n      const tag = this.data.getItem(id);\n      let attribute = '';\n      if (focusType === FOCUS_TYPE.HOVER) {\n        if (currId === tag.id && active) return;\n        attribute = 'currentHover';\n      } else if (focusType === FOCUS_TYPE.CLICK) {\n        attribute = 'currentClick';\n        this.editor.blur();\n      }\n      const tagType = isLabel(id) ? TAG.LABEL : isInsertion(id) ? TAG.INSERTION : isConnection(id) ? TAG.CONNECTION : null;\n\n      // active status: mouse enter | mouse click\n      if (active) {\n        if (focusType === FOCUS_TYPE.CLICK) this.onTagClick(e, tag.id);\n        // ranges.push({ offset: label.start, length: label.end - label.start, style: `${focusType}_STYLE_${color}` });\n        this.setState({\n          [`${attribute}`]: {\n            id: tag.id,\n            from: tag === null || tag === void 0 ? void 0 : tag.from,\n            to: tag === null || tag === void 0 ? void 0 : tag.to\n          }\n        }, () => {\n          this.updateEditorAndRender();\n        });\n      } else {\n        // unactive status: mouse leave | mouse context menu\n        this.resetCurrentFocus(attribute, true).then(() => {\n          if (focusType === FOCUS_TYPE.CLICK) {\n            this.onContextMenu(e, tag.id, tagType);\n          }\n        });\n      }\n    };\n    this.onContextMenu = (e, id, type) => {\n      let nextEditorState;\n      switch (type) {\n        case TAG.LABEL:\n        case TAG.CONNECTION:\n        case TAG.INSERTION:\n          nextEditorState = this.deleteTag(id);\n          break;\n        default:\n          return;\n      }\n      this.renderAndSave(nextEditorState);\n    };\n    this.setCurrentBrush = item => {\n      this.setState({\n        currentBrush: item\n      });\n    };\n    this.setFormVisible = () => {\n      this.setState({\n        tagOpenReview: null\n      });\n    };\n    this.genKeyCommand = e => {\n      // console.log(e.keyCode, e.key, e.ctrlKey, e.altKey, e.metaKey);\n      if (e.metaKey || e.altKey) return KEY_COMMAND.INVALID_KEY;\n      switch (e.keyCode) {\n        case 90:\n          // prevent default undo\n          e.preventDefault();\n          if (e.ctrlKey) return KEY_COMMAND.HANDLE_UNDO;\n          return getDefaultKeyBinding(e);\n        case 89:\n          // prevent default redo\n          e.preventDefault();\n          if (e.ctrlKey) return KEY_COMMAND.HANDLE_REDO;\n          return getDefaultKeyBinding(e);\n        case 13:\n          e.preventDefault();\n          return KEY_COMMAND.HANDLE_RETURN;\n        default:\n          return getDefaultKeyBinding(e);\n      }\n    };\n    this.handleKeyCommand = command => {\n      const {\n        editorState\n      } = this.state;\n      switch (command) {\n        case KEY_COMMAND.INVALID_KEY:\n          return 'handled';\n        case KEY_COMMAND.HANDLE_RETURN:\n          {\n            const start = editorState.getSelection().getStartOffset();\n            const end = editorState.getSelection().getEndOffset();\n            const nextEditorState = setSelection(this.onContentChange(editorState, {\n              slice: '\\n',\n              prevSlice: this.text.slice(start, end),\n              prevStart: start,\n              prevEnd: end,\n              start: start + 1,\n              end: start + 1\n            }), start + 1, start + 1);\n            this.renderAndSave(nextEditorState);\n            return 'handled';\n          }\n        case KEY_COMMAND.HANDLE_UNDO:\n          return 'handled';\n        case KEY_COMMAND.HANDLE_REDO:\n          return 'handled';\n        default:\n          return 'not-handled';\n      }\n    };\n    // Get one anchor by slice head\n    this.getAnchorElementByHead = at => {\n      const {\n        sliceMap\n      } = this;\n      const wrapper = this.editorWrapper.querySelector('.public-DraftStyleDefault-block');\n      const id = `span-wrapper-0-${sliceMap.get(at)}`;\n      const span = wrapper.querySelector(`[data-offset-key='${id}']`);\n      return span;\n    };\n    // Get all anchors at one time\n    this.getAnchorElementsByHeads = () => {\n      const {\n        sliceMap\n      } = this;\n      const wrapper = this.editorWrapper.querySelector('.public-DraftStyleDefault-block');\n      const spanMap = new Map();\n      sliceMap.forEach((value, key) => {\n        const id = `span-wrapper-0-${sliceMap.get(key)}`;\n        const span = wrapper.querySelector(`[data-offset-key='${id}']`);\n        spanMap.set(key, span);\n      });\n      return spanMap;\n    };\n    this.onMouseDown = e => {\n      if (e.which === 1) {\n        this.mouseFlag = true;\n      }\n      const onMouseUp = () => {\n        this.mouseFlag = false;\n        window.removeEventListener('mouseup', onMouseUp);\n      };\n      window.addEventListener('mouseup', onMouseUp);\n    };\n    this.onCompositionEnd = () => {\n      this.compositionFlag = COMPOSITION.PENDING;\n    };\n    this.onCompositionStart = () => {\n      this.compositionFlag = COMPOSITION.ENABLED;\n      this.compositionTop = this.editorWrapper.scrollTop;\n    };\n    this.handleBeforeInput = () => {\n      this.inputFlag = true;\n      return 'not-handled';\n    };\n    this.handlePastedText = () => {\n      this.pasteFlag = true;\n      return 'not-handled';\n    };\n    this.idGenerator = idManager();\n    this.text = '';\n    this.raw = {\n      blocks: [],\n      entityMap: {}\n    };\n    this.configMap = new Map();\n    this.sliceMap = new Map();\n    this.data = new DataProxy();\n    this.state = {\n      style: {},\n      tagOpenReview: null,\n      editorState: EditorState.createEmpty(),\n      currentBrush: null,\n      editorHeight: null,\n      editorWidth: null,\n      tagMap: new TagInfoMap(),\n      currentClick: {\n        id: null,\n        from: null,\n        to: null\n      },\n      currentHover: {\n        id: '',\n        from: null,\n        to: null\n      },\n      currentFrom: {\n        type: null,\n        id: null,\n        offset: null\n      },\n      currentMouse: {\n        left: 0,\n        top: 0\n      }\n    };\n    this.compositionTop = -1;\n    this.compositionFlag = COMPOSITION.DISABLED;\n    this.inputFlag = false;\n    this.mouseFlag = false;\n    this.pasteFlag = false;\n    this.undoLock = false;\n    this.redoLock = false;\n    this.redoList = [];\n    this.undoList = [];\n\n    // user setting\n    this.fontColor = FONT_COLOR;\n    this.toolMode = this.props.jobProxy.toolMode || this.props.mode;\n  }\n  submitReviews() {\n    return this.props.jobProxy.saveReviews(this.data.reviews);\n  }\n  getReviews() {\n    return this.submitReviews();\n  }\n  async componentDidMount() {\n    const {\n      labels,\n      insertions,\n      connections\n    } = this.props;\n    this.toolMode = this.props.jobProxy.toolMode;\n    let {\n      content\n    } = this.props;\n    let results;\n\n    // initialize config\n    // insert qa tool's label\n    this.configMap.set(MISSING_LABEL.text, {\n      ...MISSING_LABEL,\n      type: toQA(TAG.LABEL)\n    });\n    labels.forEach(label => this.configMap.set(label.text, {\n      ...label,\n      type: TAG.LABEL\n    }));\n    insertions.forEach(insertion => this.configMap.set(insertion.text, {\n      ...insertion,\n      type: TAG.INSERTION\n    }));\n    connections.forEach(connection => this.configMap.set(connection.text, {\n      ...connection,\n      type: TAG.CONNECTION\n    }));\n    try {\n      await this.props.jobProxy.loadResult().then(res => {\n        if ((res === null || res === void 0 ? void 0 : res.results) && (res === null || res === void 0 ? void 0 : res.content)) {\n          content = res.content;\n          results = res.results;\n        } else if ((res === null || res === void 0 ? void 0 : res.labels) && (res === null || res === void 0 ? void 0 : res.connections) && (res === null || res === void 0 ? void 0 : res.insertions)) {\n          results = res;\n        }\n      });\n    } catch (e) {\n      notification.error({\n        message: localMessage('ANNOTATION_DATA_LOAD_ERROR'),\n        duration: null\n      });\n      return;\n    }\n\n    // initialize text\n    this.text = content || '';\n\n    // initialize results\n    this.data.parseResults(results, this.idGenerator, this.configMap, this.text);\n    await this.props.jobProxy.loadReviews().then(async res => {\n      if (res) {\n        this.data.parseReview(res, this.idGenerator, this.configMap, this.text);\n      } else if (this.props._reviews) {\n        await fetch(this.props._reviews).then(data => data.json()).then(data => {\n          // data: {data: {###: {} }, missing: { labels: []}}\n          this.data.parseReview(data, this.idGenerator, this.configMap, this.text);\n        });\n      }\n    });\n\n    // initialize raw\n    this.raw = this.renderTextArea();\n    // this.state.editorState = EditorState.createWithText(text);\n    // apply composition lock\n\n    this.editorWrapper.addEventListener('compositionstart', this.onCompositionStart);\n    this.editorWrapper.addEventListener('compositionend', this.onCompositionEnd);\n    this.editorWrapper.addEventListener('mousedown', this.onMouseDown);\n    this.editorWrapper.addEventListener('dragstart', e => e.preventDefault());\n    this.editorWrapper.addEventListener('contextmenu', e => {\n      e.preventDefault();\n      this.resetCurrentFrom();\n      this.resetCurrentFocus('currentClick', true);\n    });\n    this.editorWrapper.addEventListener('mousemove', this.onMouseMove);\n    // this.editorWrapper.addEventListener('wheel', this.onMouseScroll);\n\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('resize', () => this.renderAndSave(null, true, false, false));\n\n    // initialize customStyleMap\n    this.setState({\n      style: {\n        ...this.state.style,\n        DEFAULT_STYLE: {\n          color: this.fontColor,\n          fontSize: `${FONT_SIZE}px`,\n          lineHeight: `${LINE_HEIGHT}px`,\n          fontFamily: FONT_FAMILY,\n          letterSpacing: `${FONT_SPACE}px`\n        },\n        MISSING_STYLE: {\n          color: '#000000'\n        }\n      }\n    });\n    this.renderAndSave(EditorState.createWithContent(convertFromRaw(this.raw)), true, true, false);\n    // use url file backup to replace content, results, and reviews information\n    // use local storage backup to replace text, results, and reviews information\n    // save every 5 minutes\n    setInterval(() => {\n      this.onSave();\n    }, 1000 * 60 * 5);\n  }\n  reviewOnConfirm(id, data) {\n    this.data.setReview(id, data);\n    this.setState({}); // force to re-render since data is not in state\n  }\n  render() {\n    var _currentFrom$offset, _currentFrom$offset2;\n    const {\n      editorState,\n      style,\n      currentBrush,\n      editorWidth,\n      editorHeight,\n      currentClick,\n      currentHover,\n      currentMouse,\n      currentFrom,\n      tagMap,\n      tagOpenReview\n    } = this.state;\n    const {\n      data\n    } = this;\n    const config = [];\n    this.configMap.forEach(value => {\n      config.push(value);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topbar-wrapper\",\n      onClick: () => {\n        this.editorOnFocus = false;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.executeHistory(RECALL_TYPE.UNDO),\n      className: classnames('topbar-btn', 'topbar-btn--undo', {\n        'topbar-btn--disabled': this.undoList.length === 0\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: undoSvg,\n      alt: \"undo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: classnames('topbar-btn', 'topbar-btn--redo', {\n        'topbar-btn--disabled': this.redoList.length === 0\n      }),\n      onClick: () => this.executeHistory(RECALL_TYPE.REDO),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: redoSvg,\n      alt: \"redo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: classnames('topbar-btn', 'topbar-btn--save'),\n      onClick: this.onSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: saveSvg,\n      alt: \"save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Toolbar, {\n      showReview: isRework(this.toolMode) || isReviewEditable(this.toolMode),\n      onClick: () => {\n        this.editorOnFocus = false;\n      },\n      reviewList: data.reviews.data,\n      config: config,\n      currentBrush: currentBrush,\n      setCurrentBrush: this.setCurrentBrush.bind(this),\n      items: tagMap,\n      contentReadyOnly: this.props.read_only,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"editor-wrapper\",\n      ref: r => {\n        this.editorWrapper = r;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1048,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"svg-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      ref: r => {\n        this.svg = r;\n      },\n      style: {\n        height: `${editorHeight}px`,\n        width: `${editorWidth}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 13\n      }\n    }, Object.entries(tagMap.connections).map(([id, connect]) => /*#__PURE__*/React.createElement(\"g\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      d: connect.path,\n      stroke: currentHover.id === id ? HOVER_COLOR : currentClick.id === id ? FOCUS_COLOR : DEFAULT_COLOR,\n      fill: \"#00000000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 19\n      }\n    }))), currentFrom.type ? /*#__PURE__*/React.createElement(\"path\", {\n      d: `M ${(_currentFrom$offset = currentFrom.offset) === null || _currentFrom$offset === void 0 ? void 0 : _currentFrom$offset.left} ${(_currentFrom$offset2 = currentFrom.offset) === null || _currentFrom$offset2 === void 0 ? void 0 : _currentFrom$offset2.top} L ${currentMouse.left} ${currentMouse.top}`,\n      stroke: FOCUS_COLOR,\n      fill: \"#00000000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064,\n        columnNumber: 17\n      }\n    }) : null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tags-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tags-panel\",\n      style: {\n        height: `${editorHeight}px`,\n        width: `${editorWidth}px`\n      },\n      onDoubleClick: this.onTagDoubleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069,\n        columnNumber: 13\n      }\n    }, Object.entries(tagMap.labels).map(([id, label]) => {\n      var _data$getReview;\n      return /*#__PURE__*/React.createElement(LabelTag, {\n        key: id,\n        reviewResult: (_data$getReview = data.getReview(id)) === null || _data$getReview === void 0 ? void 0 : _data$getReview.result,\n        label: label,\n        isHover: currentHover.id === id || currentHover.from === id || currentHover.to === id,\n        isClick: currentClick.id === id || currentClick.from === id || currentClick.to === id,\n        labelMouseEvent: this.TagMouseEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1075,\n          columnNumber: 17\n        }\n      });\n    }), Object.entries(tagMap.insertions).map(([id, insertion]) => {\n      var _data$getReview2;\n      return /*#__PURE__*/React.createElement(InsertionTag, {\n        key: id,\n        reviewResult: (_data$getReview2 = data.getReview(id)) === null || _data$getReview2 === void 0 ? void 0 : _data$getReview2.result,\n        insertion: insertion,\n        isHover: currentHover.id === id || currentHover.from === id || currentHover.to === id,\n        isClick: currentClick.id === id || currentClick.from === id || currentClick.to === id,\n        insertionMouseEvent: this.TagMouseEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1093,\n          columnNumber: 17\n        }\n      });\n    }), Object.entries(tagMap.connections).map(([id, connection]) => {\n      var _data$getReview3;\n      return /*#__PURE__*/React.createElement(ConnectionTag, {\n        key: id,\n        reviewResult: (_data$getReview3 = data.getReview(id)) === null || _data$getReview3 === void 0 ? void 0 : _data$getReview3.result,\n        connection: connection,\n        isHover: currentHover.id === id,\n        isClick: currentClick.id === id,\n        connectionMouseEvent: this.TagMouseEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1111,\n          columnNumber: 17\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => {\n        this.editor.focus();\n        this.resetCurrentFocus('currentClick', true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      ref: r => {\n        this.editor = r;\n      },\n      editorState: editorState,\n      customStyleMap: style,\n      onChange: this.onChange,\n      handlePastedText: this.handlePastedText,\n      handleBeforeInput: this.handleBeforeInput,\n      handleKeyCommand: this.handleKeyCommand,\n      keyBindingFn: this.genKeyCommand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(ReviewForm, {\n      toolMode: this.toolMode,\n      tagReviewInfo: data.getReview(tagOpenReview === null || tagOpenReview === void 0 ? void 0 : tagOpenReview.id),\n      tagOpenReview: tagOpenReview,\n      issueTypes: this.props.issue_types,\n      setFormVisible: this.setFormVisible,\n      onConfirm: review => this.reviewOnConfirm(tagOpenReview === null || tagOpenReview === void 0 ? void 0 : tagOpenReview.id, review),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"names":["React","Editor","EditorState","convertFromRaw","getDefaultKeyBinding","notification","message","classnames","uniq","substr","strlen","localMessage","LabelTag","InsertionTag","ConnectionTag","isAnnotationReadonly","isRework","isReviewEditable","isPreview","Toolbar","genTagMap","renderTagMap","ReviewForm","saveSvg","undoSvg","redoSvg","FOCUS_COLOR","DEFAULT_COLOR","FONT_COLOR","BASE_COLOR","HISTORY_SIZE","FONT_SIZE","TAG_HEIGHT","LINE_HEIGHT","EDITOR_PADDING","COMPOSITION","SELECTION","ACTION","KEY_COMMAND","RECALL_TYPE","MISSING_LABEL","HOVER_COLOR","FONT_FAMILY","FONT_SPACE","FOCUS_TYPE","HOVER_ALPHA","ACTIVE_ALPHA","DEFAULT_ALPHA","isArabic","convertArrayToColor","convertColorToArray","getSliceHead","setSelection","closeSelection","idManager","getTextByInsertion","getTargetWrapperDataSet","TAG","isLabel","isInsertion","isConnection","toQA","isQATool","TagInfoMap","DataProxy","TextAnnotationApp","Component","constructor","props","addHistory","type","data","targetList","undoLock","redoList","redoLock","undoList","length","shift","EDIT_SINGLE_ADD","prev","EDIT_DEFAULT","prevSlice","end","prevStart","pop","push","slice","prevEnd","start","EDIT_SINGLE_DEL","executeHistory","recallType","UNDO","REDO","item","nextEditorState","state","editorState","newData","onContentChange","ADD_INSERTION","id","insertion","deleteTag","ADD_LABEL","label","ADD_CONNECTION","DEL_LABEL","relatedConnections","addLabel","value","DEL_INSERTION","addInsertion","at","DEL_CONNECTION","addConnection","from","to","renderAndSave","shouldRenderTags","shouldResetCurrentState","shouldSaveURL","hasFocus","getSelection","top","editorWrapper","scrollTop","Promise","resolve","resetCurrentFrom","setState","exportResult","then","tagMap","measureTags","renderTags","editorWidth","offsetWidth","editorHeight","scrollHeight","compositionTop","editor","focus","y","updateEditorAndRender","options","raw","renderTextArea","set","currentContent","Symbol","iterator","onChange","compositionFlag","ENABLED","prevEditorState","prevText","text","getCurrentContent","getPlainText","getStartOffset","getEndOffset","prevFocus","inputFlag","pasteFlag","PENDING","DISABLED","onSelectionChange","shouldRender","MOVE","spanMap","getAnchorElementsByHeads","newTagMap","onSave","toolMode","submitReviews","success","e","warning","onSubmit","isSubmit","_this$props$jobProxy","jobProxy","saveResult","content","results","auditId","configMap","labels","insertions","getResults","offsetTops","map","get","offsetTop","concat","occupyMap","Map","forEach","ranges","blocks","inlineStyleRanges","style","filter","span","getAnchorElementByHead","offset","occupyList","lineHeight","it","sort","a","b","currentBrush","mouseFlag","fbAt","CLICK","fbStart","fbEnd","DRAG","operation","idGenerator","generateID","arabic","newItem","isReview","addResultItem","connections","some","tagOpenReview","currentClick","currentHover","slices","labelHeads","insertionHeads","key","depth","children","entityRanges","entityMap","sliceMap","sliceCount","anchor","index","array","next","match","currentRGB","currentAlpha","nextAlpha","isCoverbyQa","keepRGB","tempRGB","color","i","v","baseRGB","Math","min","currentColor","backgroundColor","indexOf","head","onMouseMove","box","svg","getBoundingClientRect","currentMouse","left","clientX","x","clientY","moveFocusToTag","tag","getItem","clientHeight","onKeyDown","window","disableTextHotKeys","keyCode","ctrlKey","altKey","config","preventDefault","nTag","moveToTagByStep","nxtTag","stepToTag","nextTag","stopPropagation","reviewOnConfirm","result","preState","read_only","tagMove","resetCurrentFocus","attribute","shouldUpdate","console","log","currentFrom","onTagClick","blur","LABEL","INSERTION","onTagDoubleClick","TagMouseEvent","focusType","active","currId","HOVER","tagType","CONNECTION","onContextMenu","setCurrentBrush","setFormVisible","genKeyCommand","metaKey","INVALID_KEY","HANDLE_UNDO","HANDLE_REDO","HANDLE_RETURN","handleKeyCommand","command","wrapper","querySelector","onMouseDown","which","onMouseUp","removeEventListener","addEventListener","onCompositionEnd","onCompositionStart","handleBeforeInput","handlePastedText","createEmpty","fontColor","mode","saveReviews","reviews","getReviews","componentDidMount","connection","loadResult","res","error","duration","parseResults","loadReviews","parseReview","_reviews","fetch","json","DEFAULT_STYLE","fontSize","fontFamily","letterSpacing","MISSING_STYLE","createWithContent","setInterval","setReview","render","_currentFrom$offset","_currentFrom$offset2","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","editorOnFocus","src","alt","showReview","reviewList","bind","items","contentReadyOnly","ref","r","height","width","Object","entries","connect","d","path","stroke","fill","onDoubleClick","_data$getReview","reviewResult","getReview","isHover","isClick","labelMouseEvent","_data$getReview2","insertionMouseEvent","_data$getReview3","connectionMouseEvent","customStyleMap","keyBindingFn","tagReviewInfo","issueTypes","issue_types","onConfirm","review"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/TextAnnotationApp.jsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable no-undef */\n/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport { Editor, EditorState, convertFromRaw, getDefaultKeyBinding } from 'draft-js';\nimport { notification, message } from 'antd';\nimport classnames from 'classnames';\nimport 'draft-js/dist/Draft.css';\nimport { uniq } from 'lodash';\nimport { substr, strlen } from 'fbjs/lib/UnicodeUtils';\nimport localMessage from './locale';\nimport { LabelTag, InsertionTag, ConnectionTag } from './components/tag';\nimport { isAnnotationReadonly, isRework, isReviewEditable, isPreview } from '../../utils/tool-mode';\nimport Toolbar from './components/toolBar';\nimport { genTagMap, renderTagMap } from './utils/tagMapUtil';\nimport ReviewForm from './components/reviewForm';\nimport './TextAnnotationApp.scss';\nimport saveSvg from './assert/save.svg';\nimport undoSvg from './assert/undo.svg';\nimport redoSvg from './assert/redo.svg';\nimport {\n  FOCUS_COLOR, DEFAULT_COLOR,\n  FONT_COLOR, BASE_COLOR, HISTORY_SIZE,\n  FONT_SIZE, TAG_HEIGHT,\n  LINE_HEIGHT, EDITOR_PADDING,\n  COMPOSITION, SELECTION, ACTION, KEY_COMMAND,\n  RECALL_TYPE, MISSING_LABEL,\n  HOVER_COLOR, FONT_FAMILY,\n  FONT_SPACE, FOCUS_TYPE,\n  HOVER_ALPHA,\n  ACTIVE_ALPHA,\n  DEFAULT_ALPHA,\n} from './data/constant';\nimport {\n  isArabic,\n  convertArrayToColor,\n  convertColorToArray,\n  getSliceHead,\n  setSelection,\n  closeSelection,\n  idManager,\n  getTextByInsertion,\n  getTargetWrapperDataSet,\n} from './utils/helper';\nimport {\n  TAG,\n  isLabel,\n  isInsertion,\n  isConnection,\n  toQA,\n  isQATool,\n} from './data/tag_mode';\nimport TagInfoMap from './utils/TagInfoMap';\nimport DataProxy from './data/dataProxy';\n\nexport default class TextAnnotationApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.idGenerator = idManager();\n    this.text = '';\n    this.raw = { blocks: [], entityMap: {} };\n    this.configMap = new Map();\n    this.sliceMap = new Map();\n    this.data = new DataProxy();\n    this.state = {\n      style: {},\n      tagOpenReview: null,\n      editorState: EditorState.createEmpty(),\n      currentBrush: null,\n      editorHeight: null,\n      editorWidth: null,\n      tagMap: new TagInfoMap(),\n      currentClick: {\n        id: null,\n        from: null,\n        to: null,\n      },\n      currentHover: {\n        id: '',\n        from: null,\n        to: null,\n      },\n      currentFrom: {\n        type: null,\n        id: null,\n        offset: null,\n      },\n      currentMouse: {\n        left: 0,\n        top: 0,\n      }\n    };\n\n    this.compositionTop = -1;\n    this.compositionFlag = COMPOSITION.DISABLED;\n    this.inputFlag = false;\n    this.mouseFlag = false;\n    this.pasteFlag = false;\n    this.undoLock = false;\n    this.redoLock = false;\n    this.redoList = [];\n    this.undoList = [];\n\n    // user setting\n    this.fontColor = FONT_COLOR;\n    this.toolMode = this.props.jobProxy.toolMode || this.props.mode;\n  };\n\n  addHistory = (type, data) => {\n    let targetList;\n    if (this.undoLock) {\n      // Add history to redo list\n      targetList = this.redoList;\n    } else if (this.redoLock) {\n      // Add history back to undo list\n      targetList = this.undoList;\n      // Clear redo list\n    } else {\n      // Add history to redo list\n      targetList = this.undoList;\n      this.redoList = [];\n    }\n    let { length } = targetList;\n    if (length > HISTORY_SIZE) {\n      targetList.shift();\n      length -= 1;\n    }\n    if (type === ACTION.EDIT_SINGLE_ADD && length >= 1) {\n      const prev = targetList[length - 1];\n      if ((prev.type === ACTION.EDIT_DEFAULT || prev.type === ACTION.EDIT_SINGLE_ADD) && (prev.data.prevSlice === '' && prev.data.end === data.prevStart)) {\n        targetList.pop();\n        targetList.push({\n          type: ACTION.EDIT_DEFAULT,\n          data: {\n            prevSlice: '',\n            slice: prev.data.slice + data.slice,\n            prevStart: prev.data.prevStart,\n            prevEnd: prev.data.prevEnd,\n            start: data.start,\n            end: data.end,\n          }\n        });\n      } else targetList.push({ type, data });\n    } else if (type === ACTION.EDIT_SINGLE_DEL && length >= 1) {\n      const prev = targetList[length - 1];\n      if ((prev.type === ACTION.EDIT_DEFAULT || prev.type === ACTION.EDIT_SINGLE_DEL) && (prev.data.slice === '' && data.prevEnd === prev.data.start)) {\n        targetList.pop();\n        targetList.push({\n          type: ACTION.EDIT_DEFAULT,\n          data: {\n            slice: '',\n            prevSlice: data.prevSlice + prev.data.prevSlice,\n            prevStart: data.end,\n            prevEnd: prev.data.prevEnd,\n            start: data.start,\n            end: data.end,\n          }\n        });\n      } else targetList.push({ type, data });\n    } else targetList.push({ type, data });\n  };\n\n  executeHistory = (recallType) => {\n    // Execute history\n    let targetList;\n    if (recallType === RECALL_TYPE.UNDO) {\n      // Get from undo list\n      this.undoLock = true;\n      targetList = this.undoList;\n    } else if (recallType === RECALL_TYPE.REDO) {\n      // Get from redo list\n      this.redoLock = true;\n      targetList = this.redoList;\n    }\n    if (targetList.length === 0) {\n      this.undoLock = false;\n      this.redoLock = false;\n      return;\n    }\n    const item = targetList.pop();\n    const { data } = item;\n    let nextEditorState = this.state.editorState;\n    switch (item.type) {\n      case ACTION.EDIT_SINGLE_ADD:\n      case ACTION.EDIT_SINGLE_DEL:\n      case ACTION.EDIT_DEFAULT:\n      {\n        const newData = {\n          prevSlice: data.slice,\n          slice: data.prevSlice,\n          start: data.prevEnd,\n          end: data.prevEnd,\n          prevStart: data.prevStart,\n          prevEnd: data.end,\n        };\n        // nextEditorState = this.onContentChange(nextEditorState, newData);\n        nextEditorState = setSelection(this.onContentChange(nextEditorState, newData), newData.start, newData.end);\n        break;\n      }\n      case ACTION.ADD_INSERTION:\n      {\n        const { id } = data.insertion;\n        nextEditorState = this.deleteTag(id);\n        break;\n      }\n      case ACTION.ADD_LABEL:\n      {\n        const { id } = data.label;\n        nextEditorState = this.deleteTag(id);\n        break;\n      }\n      case ACTION.ADD_CONNECTION:\n      {\n        const { id } = data;\n        nextEditorState = this.deleteTag(id);\n        break;\n      }\n      case ACTION.DEL_LABEL:\n      {\n        const { relatedConnections, label } = data;\n        nextEditorState = this.addLabel(nextEditorState, label.start, label.end, label.value, label.id, relatedConnections);\n        break;\n      }\n      case ACTION.DEL_INSERTION:\n      {\n        const { relatedConnections, insertion } = data;\n        nextEditorState = this.addInsertion(nextEditorState, insertion.at, insertion.value, insertion.id, relatedConnections);\n        break;\n      }\n      case ACTION.DEL_CONNECTION:\n      {\n        nextEditorState = this.addConnection(nextEditorState, data.from, data.to, data.value, data.id);\n        break;\n      }\n      default:\n        break;\n    }\n    this.renderAndSave(nextEditorState);\n    this.undoLock = false;\n    this.redoLock = false;\n  };\n\n  renderAndSave = (\n    editorState,\n    shouldRenderTags = true,\n    shouldResetCurrentState = false,\n    shouldSaveURL = false,\n  ) => {\n    if (!editorState) editorState = this.state.editorState;\n    const { hasFocus } = editorState.getSelection();\n    const top = this.editorWrapper.scrollTop;\n    // window.ew = this.editorWrapper;\n    return new Promise((resolve) => {\n      if (shouldResetCurrentState) {\n        this.resetCurrentFrom();\n      }\n      this.setState({ editorState });\n      if (shouldSaveURL) {\n        this.exportResult();\n      }\n      resolve();\n    }).then(() => {\n      if (shouldRenderTags) {\n        const { nextEditorState, tagMap } = this.measureTags(editorState);\n        return new Promise((resolve) => {\n          this.setState({ editorState: nextEditorState });\n          resolve(tagMap);\n        });\n      }\n    }).then((tagMap) => {\n      if (shouldRenderTags) {\n        this.renderTags(tagMap);\n        return new Promise((resolve) => {\n          this.setState({\n            editorWidth: this.editorWrapper.offsetWidth - EDITOR_PADDING * 2,\n            editorHeight: this.editorWrapper.scrollHeight - EDITOR_PADDING * 2,\n            tagMap,\n          });\n          resolve();\n        });\n      }\n    }).then(() => {\n      if (hasFocus) {\n        // move back to current selection after composition end\n        if (this.compositionTop >= 0) {\n          this.editor.focus({ y: this.compositionTop });\n          this.compositionTop = -1;\n        } else this.editor.focus({ y: top });\n      }\n    });\n  };\n\n  updateEditorAndRender = (options) => {\n    let { editorState } = this.state;\n    // update rawDraftContentState, using new results\n    this.raw = this.renderTextArea();\n    // update editorState, using new rawDraftContentState\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    if (options && typeof options[Symbol.iterator] === 'function') {\n      return this.renderAndSave(editorState, ...options);\n    }\n\n    return this.renderAndSave(editorState);\n  };\n\n  onChange = (editorState) => {\n    // ignore composition operation\n    if (this.compositionFlag === COMPOSITION.ENABLED) return;\n    // get operation type ( handled operation not included )\n    const prevEditorState = this.state.editorState;\n    const prevText = this.text;\n    const text = editorState.getCurrentContent().getPlainText();\n    let prevStart = prevEditorState.getSelection().getStartOffset();\n    const prevEnd = prevEditorState.getSelection().getEndOffset();\n    const start = editorState.getSelection().getStartOffset();\n    const end = editorState.getSelection().getEndOffset();\n    const { hasFocus } = editorState.getSelection();\n    const { hasFocus: prevFocus } = prevEditorState.getSelection();\n\n    if (hasFocus !== prevFocus) { // when focus change update new editor state and return without doing anything\n      const nextEditorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n      this.renderAndSave(nextEditorState, null, false);\n      return;\n    }\n\n    if (this.inputFlag || this.pasteFlag || this.compositionFlag === COMPOSITION.PENDING || prevText !== text) {\n      /* text changed:\n       * 1. deleted by delete key\n       * 2. deleted by drag + delete key\n       * 3. deleted by drag + cut operation\n       * 4. insert/replace by (drag) + simply typing\n       * 5. insert/replace by (drag) + composition typing\n       * 6. insert/replace by (drag) + paste operation\n       * 7. redo && undo\n       */\n      if (prevStart === prevEnd && start === prevStart - 1) prevStart -= 1;\n      const prevSlice = prevText.slice(prevStart, prevEnd);\n      const slice = text.slice(prevStart, end);\n      const data = { prevSlice, slice, prevStart, prevEnd, start, end };\n      const nextEditorState = this.onContentChange(editorState, data);\n      // reset flag\n      this.inputFlag = false;\n      this.pasteFlag = false;\n      this.compositionFlag = COMPOSITION.DISABLED;\n      this.renderAndSave(nextEditorState);\n    } else {\n      /* selection changed\n       * 1. simply select\n       * 2. click select: add insertion\n       * 3. drag select: add label\n       */\n      const data = { start, end };\n      const { nextEditorState, type } = this.onSelectionChange(editorState, data);\n      const shouldRender = type !== SELECTION.MOVE;\n      this.renderAndSave(nextEditorState, shouldRender, shouldRender);\n    }\n  };\n\n  renderTags = (tagMap) => {\n    const spanMap = this.getAnchorElementsByHeads();\n    const newTagMap = renderTagMap(tagMap, spanMap);\n    return newTagMap;\n  };\n\n  onSave = async () => {\n    if (isPreview(this.toolMode)) return;\n    try {\n      if (!isAnnotationReadonly(this.toolMode)) {\n        await this.exportResult();\n      }\n      if (isReviewEditable(this.toolMode)) {\n        await this.submitReviews();\n      }\n      message.success(localMessage('saveSuccess'));\n    } catch (e) {\n      message.warning(localMessage('saveFail'));\n    }\n  };\n\n  onSubmit = () => this.exportResult(true);\n\n  exportResult = (isSubmit = false) => {\n    if (isAnnotationReadonly(this.toolMode)) return;\n    return this.props.jobProxy?.saveResult({\n      content: this.text,\n      results: this.data.results,\n      auditId: this.props.jobProxy.auditId,\n    }, isSubmit);\n  };\n\n  submitReviews() {\n    return this.props.jobProxy.saveReviews(this.data.reviews);\n  }\n\n  getReviews() {\n    return this.submitReviews();\n  }\n\n  measureTags = (editorState) => {\n    const { text, raw, configMap } = this;\n    const { labels, insertions } = this.data.getResults();\n\n    const spanMap = this.getAnchorElementsByHeads();\n    const offsetTops = uniq((labels.map((label) => spanMap.get(label.start).offsetTop))\n      .concat(insertions.map((insertion) => spanMap.get(insertion.at).offsetTop)));\n    const occupyMap = new Map();\n    offsetTops.forEach((offsetTop) => { occupyMap.set(offsetTop, []); });\n\n    // get label offsets\n    const tagMap = genTagMap(this.data.getResults(), configMap, spanMap, occupyMap, text);\n\n    const ranges = raw.blocks[0].inlineStyleRanges;\n    const style = { ...this.state.style };\n    ranges.filter((item) => item.style.slice(0, 6) === 'ANCHOR').forEach((item) => {\n      const span = this.getAnchorElementByHead(item.offset);\n      const occupyList = occupyMap.get(span.offsetTop);\n      const lineHeight = occupyList.map((it) => (it.top > 0 ? it.top - FONT_SIZE + TAG_HEIGHT : -it.top))\n        .sort((a, b) => (a - b)).pop() * 2 + LINE_HEIGHT;\n      style[`LINEHEIGHT_${lineHeight}`] = { lineHeight: `${lineHeight}px` };\n      ranges.push({ offset: item.offset, length: item.length, style: `LINEHEIGHT_${lineHeight}` });\n    });\n    const nextEditorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    this.setState({ style });\n    return { nextEditorState, tagMap };\n  };\n\n  onSelectionChange = (editorState, data) => {\n    const { start, end } = data;\n    const { currentBrush } = this.state;\n    if (!this.mouseFlag) {\n      return { nextEditorState: editorState, type: SELECTION.MOVE };\n    } if (start === end && isInsertion(currentBrush?.type)) {\n      // console.log('click select', start, end);\n      const fbAt = strlen(this.text.slice(0, start));\n      const nextEditorState = this.addInsertion(editorState, fbAt, currentBrush.text);\n      return { nextEditorState, type: SELECTION.CLICK };\n    } if (start !== end && isLabel(currentBrush?.type)) {\n      // console.log('drag select', start, end, this.state.currentBrush);\n      const fbStart = strlen(this.text.slice(0, start));\n      const fbEnd = strlen(this.text.slice(0, end));\n      const nextEditorState = this.addLabel(editorState, fbStart, fbEnd, currentBrush.text);\n      return { nextEditorState, type: SELECTION.DRAG };\n    }\n    return { nextEditorState: editorState, type: SELECTION.MOVE };\n  };\n\n  deleteTag = (id) => {\n    const { editorState } = this.state;\n    if (isAnnotationReadonly(this.toolMode) && !isQATool(id)) return editorState;\n\n    const operation = this.data.deleteTag(id);\n    switch (true) {\n      case (isLabel(id)): this.addHistory(ACTION.DEL_LABEL, operation); break;\n      case (isConnection(id)): this.addHistory(ACTION.DEL_CONNECTION, operation); break;\n      case (isInsertion(id)): this.addHistory(ACTION.DEL_INSERTION, operation); break;\n      default: break;\n    }\n    this.raw = this.renderTextArea();\n    return EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n  };\n\n  addInsertion = (editorState, at, value, id, relatedConnections = []) => {\n    const { state: { currentBrush }, text, idGenerator, toolMode } = this;\n    if (isAnnotationReadonly(this.toolMode)) return editorState;\n    if (at === strlen(text)) return editorState; // prevent insert to the end of content\n    // eslint-disable-next-line no-restricted-syntax\n    for (const item of this.data.results.insertions) {\n      if (item.at === at && item.value === currentBrush.text) return editorState;\n    }\n    if (!id) id = idGenerator.generateID(currentBrush.type);\n    const arabic = isArabic(substr(text, at));\n    if (arabic && at) at -= 1;\n    const newItem = {\n      at,\n      value,\n      id,\n      text: getTextByInsertion(this.text, { at, value }),\n      isReview: isReviewEditable(toolMode),\n    };\n\n    this.addHistory(ACTION.ADD_INSERTION, {\n      insertion: newItem,\n      relatedConnections,\n    });\n\n    this.data.addResultItem(id, newItem, relatedConnections);\n\n    this.raw = this.renderTextArea();\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    editorState = closeSelection(editorState);\n    return editorState;\n  };\n\n  addConnection = (editorState, from, to, value, id) => {\n    const { state: { currentBrush }, idGenerator, toolMode, data } = this;\n    if (isAnnotationReadonly(toolMode)) return editorState;\n    if (from === to) return editorState;\n    if (isQATool(from) || isQATool(to)) return editorState; // can't add connection for qa tool\n\n    if (data.results.connections.some((item) => item.from === from && item.to === to && item.value === currentBrush.text)) return editorState;\n\n    if (!id) id = idGenerator.generateID(currentBrush.type);\n    const newItem = {\n      from,\n      to,\n      value,\n      id,\n      isReview: isReviewEditable(toolMode),\n    };\n    this.addHistory(ACTION.ADD_CONNECTION, newItem);\n    data.addResultItem(id, newItem);\n\n    this.raw = this.renderTextArea();\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    return editorState;\n  };\n\n  addLabel = (editorState, start, end, value, id, relatedConnections = []) => {\n    const { state: { currentBrush }, text, idGenerator, toolMode, data } = this;\n\n    if (isAnnotationReadonly(this.toolMode) && !currentBrush.isQATool) return editorState;\n    if (currentBrush.isQATool && !isReviewEditable(this.toolMode)) return editorState; // qa mode can only use qa tool, work mode can only use normal tool\n\n    // slice should not begin with \\n\n    if (substr(text, start, 1) === '\\n') return editorState;\n\n    if (data.results.labels.some((item) => item.start === start && item.end === end && item.value === currentBrush.text)) return editorState;\n\n    // generate new label\n    if (!id) id = idGenerator.generateID(currentBrush.type);\n    const newItem = {\n      start,\n      end,\n      value,\n      id,\n      text: substr(text, start, end - start),\n      isReview: isReviewEditable(toolMode),\n    };\n\n    if (currentBrush.isQATool) {\n      this.setState({ tagOpenReview: newItem });\n    }\n\n    this.addHistory(ACTION.ADD_LABEL, {\n      label: newItem,\n      relatedConnections,\n    });\n\n    data.addResultItem(id, newItem, relatedConnections);\n\n    // update rawDraftContentState, using new results\n    this.raw = this.renderTextArea();\n    // update editorState, using new rawDraftContentState\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    editorState = closeSelection(editorState);\n    return editorState;\n  };\n\n  // create new RawDraftContentState and update customeStyleMap\n  // update: raw, style, sliceMap\n  renderTextArea = () => {\n    const { data, text, configMap } = this;\n    const { currentClick, currentHover } = this.state;\n    const style = { ...this.state.style };\n\n    const { labels, insertions } = data.getResults();\n    // render missing labels as normal labels\n    // let labels = this.results.labels.concat(missing);\n\n    // slice text to segments\n    const slices = uniq(\n      (labels.map((label) => label.start))\n        .concat(labels.map((label) => label.end))\n        .concat(insertions.map((insertion) => insertion.at))\n        .concat([0, text.length])\n        .sort((a, b) => a - b)\n    );\n    const labelHeads = uniq((labels.map((label) => label.start)));\n    const insertionHeads = uniq((insertions.map((insertion) => insertion.at)));\n\n    // .concat(insertions.map((insertion) => insertion.at)));\n    const raw = {\n      blocks: [{\n        text,\n        key: 'span-wrapper',\n        type: 'unstyled',\n        depth: 0,\n        inlineStyleRanges: [\n          { offset: 0, length: text.length, style: 'DEFAULT_STYLE' }],\n        children: [],\n        entityRanges: [],\n        data: {},\n      }],\n      entityMap: {}\n    };\n    // 对重叠的tag进行背景色叠加\n    const ranges = raw.blocks[0].inlineStyleRanges;\n    this.sliceMap = new Map();\n    let sliceCount = 0;\n    slices.forEach((anchor, index, array) => {\n      // set slice\n      if (!index) return;\n      const { prev, next } = { prev: array[index - 1], next: anchor };\n      const match = labels.filter((label) => (label.start <= prev && label.end > prev));\n      let currentRGB = [0, 0, 0];\n      let currentAlpha = 0;\n      let nextAlpha = DEFAULT_ALPHA;\n      let isCoverbyQa = false;\n      let keepRGB = null;\n      match.some((label) => {\n        const tempRGB = convertColorToArray(configMap.get(label.value).color);\n        if (!keepRGB) isCoverbyQa = isQATool(label.id);\n        // render clicked tag in priority\n        if (currentClick.id === label.id || currentClick.from === label.id || currentClick.to === label.id) {\n          keepRGB = tempRGB.map((value, i) => value * ACTIVE_ALPHA);\n          isCoverbyQa = isQATool(label.id);\n          return true;\n        }\n\n        if ((!keepRGB && currentHover.id === label.id) || currentHover.from === label.id || currentHover.to === label.id) {\n          keepRGB = tempRGB.map((v) => v * HOVER_ALPHA);\n        }\n\n        if (!keepRGB) {\n          currentRGB = currentRGB.map((value, i) => value + tempRGB[i] * nextAlpha);\n          currentAlpha += nextAlpha;\n          nextAlpha = DEFAULT_ALPHA * (1 - currentAlpha) * (1 - currentAlpha);\n        }\n        return false;\n      });\n      const baseRGB = convertColorToArray(BASE_COLOR);\n      currentRGB = keepRGB || currentRGB.map((value, i) => Math.min(255, value + baseRGB[i] * (1 - currentAlpha)));\n      const currentColor = convertArrayToColor(currentRGB);\n\n      if (!style[`BACKGROUND_${currentColor}`]) style[`BACKGROUND_${currentColor}`] = { backgroundColor: currentColor };\n\n      if (isCoverbyQa) ranges.push({ offset: prev, length: next - prev, style: 'MISSING_STYLE' });\n      ranges.push({ offset: prev, length: next - prev, style: `BACKGROUND_${currentColor}` });\n      ranges.push({ offset: prev, length: next - prev, style: `SLICE_${prev}_${next}` });\n      // set slice head if for label/insertion slice\n      if (labelHeads.indexOf(prev) >= 0 || insertionHeads.indexOf(prev) >= 0) {\n        const slice = substr(this.text, prev, next - prev);\n        const head = getSliceHead(slice);\n        ranges.push({ offset: prev, length: strlen(head), style: `ANCHOR_${prev}` });\n        // set sliceMap\n        this.sliceMap.set(prev, sliceCount);\n        if (head !== slice) sliceCount += 1;\n      }\n      sliceCount += 1;\n    });\n    // update new style\n    this.setState({ style });\n    return raw;\n  };\n\n  async componentDidMount() {\n    const { labels, insertions, connections } = this.props;\n    this.toolMode = this.props.jobProxy.toolMode;\n    let { content } = this.props;\n    let results;\n\n    // initialize config\n    // insert qa tool's label\n    this.configMap.set(MISSING_LABEL.text, { ...MISSING_LABEL, type: toQA(TAG.LABEL) });\n    labels.forEach((label) => this.configMap.set(label.text, { ...label, type: TAG.LABEL }));\n    insertions.forEach((insertion) => this.configMap.set(insertion.text, { ...insertion, type: TAG.INSERTION }));\n    connections.forEach((connection) => this.configMap.set(connection.text, { ...connection, type: TAG.CONNECTION }));\n    try {\n      await this.props.jobProxy.loadResult()\n        .then((res) => {\n          if (res?.results && res?.content) {\n            content = res.content;\n            results = res.results;\n          } else if (res?.labels && res?.connections && res?.insertions) {\n            results = res;\n          }\n        });\n    } catch (e) {\n      notification.error({ message: localMessage('ANNOTATION_DATA_LOAD_ERROR'), duration: null });\n      return;\n    }\n\n    // initialize text\n    this.text = content || '';\n\n    // initialize results\n    this.data.parseResults(results, this.idGenerator, this.configMap, this.text);\n\n    await this.props.jobProxy.loadReviews()\n      .then(async (res) => {\n        if (res) {\n          this.data.parseReview(res, this.idGenerator, this.configMap, this.text);\n        } else if (this.props._reviews) {\n          await fetch(this.props._reviews)\n            .then((data) => data.json())\n            .then((data) => { // data: {data: {###: {} }, missing: { labels: []}}\n              this.data.parseReview(data, this.idGenerator, this.configMap, this.text);\n            });\n        }\n      });\n\n    // initialize raw\n    this.raw = this.renderTextArea();\n    // this.state.editorState = EditorState.createWithText(text);\n    // apply composition lock\n\n    this.editorWrapper.addEventListener('compositionstart', this.onCompositionStart);\n    this.editorWrapper.addEventListener('compositionend', this.onCompositionEnd);\n\n    this.editorWrapper.addEventListener('mousedown', this.onMouseDown);\n    this.editorWrapper.addEventListener('dragstart', (e) => e.preventDefault());\n    this.editorWrapper.addEventListener('contextmenu', (e) => {\n      e.preventDefault();\n      this.resetCurrentFrom();\n      this.resetCurrentFocus('currentClick', true);\n    });\n    this.editorWrapper.addEventListener('mousemove', this.onMouseMove);\n    // this.editorWrapper.addEventListener('wheel', this.onMouseScroll);\n\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('resize', () => this.renderAndSave(null, true, false, false));\n\n    // initialize customStyleMap\n    this.setState({\n      style: {\n        ...this.state.style,\n        DEFAULT_STYLE: {\n          color: this.fontColor,\n          fontSize: `${FONT_SIZE}px`,\n          lineHeight: `${LINE_HEIGHT}px`,\n          fontFamily: FONT_FAMILY,\n          letterSpacing: `${FONT_SPACE}px`,\n        },\n        MISSING_STYLE: {\n          color: '#000000',\n        }\n      },\n    });\n    this.renderAndSave(EditorState.createWithContent(convertFromRaw(this.raw)), true, true, false);\n    // use url file backup to replace content, results, and reviews information\n    // use local storage backup to replace text, results, and reviews information\n    // save every 5 minutes\n    setInterval(() => {\n      this.onSave();\n    }, 1000 * 60 * 5);\n  }\n\n  onMouseMove = (e) => {\n    const box = this.svg.getBoundingClientRect();\n    this.setState({\n      currentMouse: {\n        left: e.clientX - box.x,\n        top: e.clientY - box.y,\n      }\n    });\n  };\n\n  moveFocusToTag = (tag) => {\n    let currentClick = { ...this.state.currentClick };\n    const { tagMap } = this.state;\n    if (tag == null) return;\n    currentClick = {\n      id: tag.id,\n      from: tag.from,\n      to: tag.to,\n    };\n    const { top } = tagMap.getItem(tag.id);\n    const { clientHeight, scrollTop } = this.editorWrapper;\n    if (top < scrollTop || top > clientHeight + scrollTop) {\n      this.editor.focus({ y: top });\n    }\n\n    this.setState({ currentClick }, () => {\n      this.updateEditorAndRender();\n    });\n  };\n\n  onKeyDown = (e) => {\n    if (window.disableTextHotKeys) {\n      return;\n    }\n    const { data } = this;\n    const { currentClick } = this.state;\n    const { keyCode, ctrlKey, altKey } = e;\n    const config = [];\n    this.configMap.forEach((value) => { config.push(value); });\n    if (ctrlKey) {\n      switch (true) {\n        case (keyCode >= 48 && keyCode <= 57):\n          e.preventDefault();\n          const index = e.keyCode - 49;\n          if (index === -1) {\n            this.setState({\n              currentBrush: null,\n            });\n          }\n          if (config[index]) {\n            this.setState({\n              currentBrush: config[index],\n            });\n          }\n          break;\n        case (keyCode === 90): e.preventDefault(); this.executeHistory(RECALL_TYPE.UNDO); break;\n        case (keyCode === 89): e.preventDefault(); this.executeHistory(RECALL_TYPE.REDO); break;\n        case (keyCode === 83): e.preventDefault(); this.onSave(); break;\n        case (keyCode === 82):\n          e.preventDefault();\n          const nTag = this.data.moveToTagByStep(currentClick.id, 1, true);\n          this.moveFocusToTag(nTag);\n          break;\n        case (keyCode === 81):\n          e.preventDefault();\n          if (currentClick.id == null) break;\n          let nxtTag;\n          if (altKey) {\n            nxtTag = data.stepToTag(currentClick.id, -1);\n          } else {\n            nxtTag = data.moveToTagByStep(currentClick.id, -1);\n          }\n          this.moveFocusToTag(nxtTag);\n          break;\n        case (keyCode === 69):\n          e.preventDefault();\n          if (currentClick.id == null) break;\n          let nextTag;\n          if (altKey) {\n            nextTag = data.stepToTag(currentClick.id, 1);\n          } else {\n            nextTag = data.moveToTagByStep(currentClick.id, 1);\n          }\n          this.moveFocusToTag(nextTag);\n          break;\n        default: break;\n      }\n    } else if (currentClick?.id !== null && isReviewEditable(this.toolMode) && !isQATool(currentClick.id)) {\n      const item = this.data.getItem(currentClick.id);\n      switch (keyCode) {\n        case 49:\n          e.preventDefault();\n          e.stopPropagation();\n          this.reviewOnConfirm(currentClick.id, {\n            result: 'pass',\n          });\n          break;\n        case 50:\n          e.preventDefault();\n          e.stopPropagation();\n          this.reviewOnConfirm(currentClick.id, {\n            result: 'reject',\n          });\n          this.setState({ tagOpenReview: item });\n          break;\n        default: break;\n      }\n    }\n  };\n\n  // update text\n  onContentChange = (editorState, data) => {\n    const { currentBrush, editorState: preState } = this.state;\n\n    if (isAnnotationReadonly(this.toolMode) || currentBrush || this.props.read_only) {\n      return preState;\n    }\n    const { slice, prevSlice } = data;\n    let { prevStart, prevEnd } = data;\n\n    if (prevSlice.length === 1 && slice.length === 0) this.addHistory(ACTION.EDIT_SINGLE_DEL, data);\n    else if (prevSlice.length === 0 && slice.length === 1) this.addHistory(ACTION.EDIT_SINGLE_ADD, data);\n    else this.addHistory(ACTION.EDIT_DEFAULT, data);\n\n    prevStart = strlen(this.text.slice(0, data.prevStart));\n    prevEnd = strlen(this.text.slice(0, data.prevEnd));\n    this.text = this.text.slice(0, data.prevStart) + data.slice + this.text.slice(data.prevEnd);\n    // update labels and insertions\n    const { text } = this;\n    const offset = slice.length - prevSlice.length;\n    this.data.tagMove(prevStart, prevEnd, offset, text);\n\n    // update rawDraftContentState, using new text and results\n    this.raw = this.renderTextArea();\n\n    // update editorState, using new rawDraftContentState\n    editorState = EditorState.set(editorState, { currentContent: convertFromRaw(this.raw) });\n    return editorState;\n  };\n\n  resetCurrentFocus = (attribute = 'currentClick', shouldUpdate) => new Promise((resolve) => {\n    console.log(attribute);\n    this.setState({\n      [`${attribute}`]: { id: null, from: null, to: null },\n    }, () => resolve('state updated'));\n  }).then(() => {\n    if (shouldUpdate) {\n      return this.updateEditorAndRender();\n    }\n  });\n\n  resetCurrentFrom = () => {\n    this.setState({\n      currentFrom: { type: null, id: null, offset: null },\n    });\n  };\n\n  // to status for tag: connection mode and other mode\n  onTagClick = (e, id) => {\n    const { currentFrom, currentBrush, editorState, tagMap } = this.state;\n    const offset = tagMap.getItem(id);\n    this.editor.blur();\n    if (!isConnection(currentBrush?.type)) return;\n\n    // connecting mode only applys to label and insertion\n    if (isLabel(id) || isInsertion(id)) {\n      // if there is no starting point, setup the starting point\n      if (!currentFrom.type) {\n        this.setState({\n          currentFrom: {\n            type: isLabel(id) ? TAG.LABEL : TAG.INSERTION,\n            id,\n            offset,\n          }\n        });\n      } else {\n        const nextEditorState = this.addConnection(editorState, currentFrom.id, id, currentBrush.text);\n        this.renderAndSave(nextEditorState, true, true);\n      }\n    }\n  };\n\n  onTagDoubleClick = (e) => {\n    // only work in qa mode\n    // if (!isRework(this.toolMode) && !isReviewEditable(this.toolMode)) return;\n    const { id } = getTargetWrapperDataSet(e);\n    const item = this.data.getItem(id);\n    this.setState({ tagOpenReview: item });\n    this.editor.blur();\n  };\n\n  // mouseEvent includes: mouse enter, mouse leave, mouse click, mouse context menu\n  TagMouseEvent = (e, id, focusType, active) => {\n    const { currentClick: { id: currId } } = this.state;\n    const tag = this.data.getItem(id);\n    let attribute = '';\n    if (focusType === FOCUS_TYPE.HOVER) {\n      if (currId === tag.id && active) return;\n      attribute = 'currentHover';\n    } else if (focusType === FOCUS_TYPE.CLICK) {\n      attribute = 'currentClick';\n      this.editor.blur();\n    }\n\n    const tagType = isLabel(id) ? TAG.LABEL : isInsertion(id) ? TAG.INSERTION : isConnection(id) ? TAG.CONNECTION : null;\n\n    // active status: mouse enter | mouse click\n    if (active) {\n      if (focusType === FOCUS_TYPE.CLICK) this.onTagClick(e, tag.id);\n      // ranges.push({ offset: label.start, length: label.end - label.start, style: `${focusType}_STYLE_${color}` });\n      this.setState({\n        [`${attribute}`]: {\n          id: tag.id,\n          from: tag?.from,\n          to: tag?.to,\n        }\n      }, () => {\n        this.updateEditorAndRender();\n      });\n    } else { // unactive status: mouse leave | mouse context menu\n      this.resetCurrentFocus(attribute, true).then(() => {\n        if (focusType === FOCUS_TYPE.CLICK) {\n          this.onContextMenu(e, tag.id, tagType);\n        }\n      });\n    }\n  };\n\n  onContextMenu = (e, id, type) => {\n    let nextEditorState;\n    switch (type) {\n      case TAG.LABEL:\n      case TAG.CONNECTION:\n      case TAG.INSERTION:\n        nextEditorState = this.deleteTag(id);\n        break;\n      default: return;\n    }\n    this.renderAndSave(nextEditorState);\n  };\n\n  reviewOnConfirm(id, data) {\n    this.data.setReview(id, data);\n    this.setState({}); // force to re-render since data is not in state\n  }\n\n  render() {\n    const {\n      editorState,\n      style,\n      currentBrush,\n      editorWidth,\n      editorHeight,\n      currentClick,\n      currentHover,\n      currentMouse,\n      currentFrom,\n      tagMap,\n      tagOpenReview,\n    } = this.state;\n    const { data } = this;\n    const config = [];\n    this.configMap.forEach((value) => { config.push(value); });\n    return (\n      <div className=\"app-wrapper\">\n        <div className=\"topbar-wrapper\" onClick={() => { this.editorOnFocus = false; }}>\n          <button\n            onClick={() => this.executeHistory(RECALL_TYPE.UNDO)}\n            className={classnames('topbar-btn', 'topbar-btn--undo', {\n              'topbar-btn--disabled': this.undoList.length === 0,\n            })}\n          >\n            <img src={undoSvg} alt=\"undo\" />\n          </button>\n          <button\n            className={classnames('topbar-btn', 'topbar-btn--redo', {\n              'topbar-btn--disabled': this.redoList.length === 0,\n            })}\n            onClick={() => this.executeHistory(RECALL_TYPE.REDO)}\n          >\n            <img src={redoSvg} alt=\"redo\" />\n          </button>\n          <button\n            className={classnames('topbar-btn', 'topbar-btn--save')}\n            onClick={this.onSave}\n          >\n            <img src={saveSvg} alt=\"save\" />\n          </button>\n        </div>\n        <Toolbar\n          showReview={isRework(this.toolMode) || isReviewEditable(this.toolMode)}\n          onClick={() => { this.editorOnFocus = false; }}\n          reviewList={data.reviews.data}\n          config={config}\n          currentBrush={currentBrush}\n          setCurrentBrush={this.setCurrentBrush.bind(this)}\n          items={tagMap}\n          contentReadyOnly={this.props.read_only}\n        />\n        <div\n          className=\"editor-wrapper\"\n          ref={(r) => { this.editorWrapper = r; }}\n        >\n          <div className=\"svg-wrapper\">\n            <svg ref={(r) => { this.svg = r; }} style={{ height: `${editorHeight}px`, width: `${editorWidth}px` }}>\n              {Object.entries(tagMap.connections).map(([id, connect]) => (\n                <g key={id}>\n                  <path\n                    d={connect.path}\n                    stroke={currentHover.id === id ? HOVER_COLOR : currentClick.id === id ? FOCUS_COLOR : DEFAULT_COLOR}\n                    fill=\"#00000000\"\n                  />\n                </g>\n              ))}\n              {currentFrom.type ?\n                <path d={`M ${currentFrom.offset?.left} ${currentFrom.offset?.top} L ${currentMouse.left} ${currentMouse.top}`} stroke={FOCUS_COLOR} fill=\"#00000000\" /> :\n                null}\n            </svg>\n          </div>\n          <div className=\"tags-wrapper\">\n            <div\n              className=\"tags-panel\"\n              style={{ height: `${editorHeight}px`, width: `${editorWidth}px` }}\n              onDoubleClick={this.onTagDoubleClick}\n            >\n              {Object.entries(tagMap.labels).map(([id, label]) => (\n                <LabelTag\n                  key={id}\n                  reviewResult={data.getReview(id)?.result}\n                  label={label}\n                  isHover={\n                    (currentHover.id === id) ||\n                    currentHover.from === id ||\n                    currentHover.to === id\n                  }\n                  isClick={\n                    (currentClick.id === id) ||\n                    currentClick.from === id ||\n                    currentClick.to === id\n                  }\n                  labelMouseEvent={this.TagMouseEvent}\n                />\n              ))}\n              {Object.entries(tagMap.insertions).map(([id, insertion]) => (\n                <InsertionTag\n                  key={id}\n                  reviewResult={data.getReview(id)?.result}\n                  insertion={insertion}\n                  isHover={\n                    (currentHover.id === id) ||\n                    currentHover.from === id ||\n                    currentHover.to === id\n                  }\n                  isClick={\n                    (currentClick.id === id) ||\n                    currentClick.from === id ||\n                    currentClick.to === id\n                  }\n                  insertionMouseEvent={this.TagMouseEvent}\n                />\n              ))}\n              {Object.entries(tagMap.connections).map(([id, connection]) => (\n                <ConnectionTag\n                  key={id}\n                  reviewResult={data.getReview(id)?.result}\n                  connection={connection}\n                  isHover={currentHover.id === id}\n                  isClick={currentClick.id === id}\n                  connectionMouseEvent={this.TagMouseEvent}\n                />\n              ))}\n            </div>\n          </div>\n          <div\n            onClick={() => {\n              this.editor.focus();\n              this.resetCurrentFocus('currentClick', true);\n            }}\n          >\n            <Editor\n              ref={(r) => { this.editor = r; }}\n              editorState={editorState}\n              customStyleMap={style}\n              onChange={this.onChange}\n              handlePastedText={this.handlePastedText}\n              handleBeforeInput={this.handleBeforeInput}\n              handleKeyCommand={this.handleKeyCommand}\n              keyBindingFn={this.genKeyCommand}\n            />\n          </div>\n        </div>\n        <ReviewForm\n          toolMode={this.toolMode}\n          tagReviewInfo={data.getReview(tagOpenReview?.id)}\n          tagOpenReview={tagOpenReview}\n          issueTypes={this.props.issue_types}\n          setFormVisible={this.setFormVisible}\n          onConfirm={(review) => this.reviewOnConfirm(tagOpenReview?.id, review)}\n        />\n      </div>\n    );\n  };\n\n  setCurrentBrush = (item) => { this.setState({ currentBrush: item }); };\n\n  setFormVisible = () => { this.setState({ tagOpenReview: null }); };\n\n  genKeyCommand = (e) => {\n    // console.log(e.keyCode, e.key, e.ctrlKey, e.altKey, e.metaKey);\n    if (e.metaKey || e.altKey) return KEY_COMMAND.INVALID_KEY;\n    switch (e.keyCode) {\n      case 90:\n        // prevent default undo\n        e.preventDefault();\n        if (e.ctrlKey) return KEY_COMMAND.HANDLE_UNDO;\n        return getDefaultKeyBinding(e);\n      case 89:\n        // prevent default redo\n        e.preventDefault();\n        if (e.ctrlKey) return KEY_COMMAND.HANDLE_REDO;\n        return getDefaultKeyBinding(e);\n      case 13:\n        e.preventDefault();\n        return KEY_COMMAND.HANDLE_RETURN;\n      default:\n        return getDefaultKeyBinding(e);\n    }\n  };\n\n  handleKeyCommand = (command) => {\n    const { editorState } = this.state;\n    switch (command) {\n      case KEY_COMMAND.INVALID_KEY: return 'handled';\n      case KEY_COMMAND.HANDLE_RETURN:\n      {\n        const start = editorState.getSelection().getStartOffset();\n        const end = editorState.getSelection().getEndOffset();\n        const nextEditorState = setSelection(this.onContentChange(editorState, {\n          slice: '\\n',\n          prevSlice: this.text.slice(start, end),\n          prevStart: start,\n          prevEnd: end,\n          start: start + 1,\n          end: start + 1,\n        }), start + 1, start + 1);\n        this.renderAndSave(nextEditorState);\n        return 'handled';\n      }\n      case KEY_COMMAND.HANDLE_UNDO: return 'handled';\n      case KEY_COMMAND.HANDLE_REDO: return 'handled';\n      default: return 'not-handled';\n    }\n  };\n\n  // Get one anchor by slice head\n  getAnchorElementByHead = (at) => {\n    const { sliceMap } = this;\n    const wrapper = this.editorWrapper.querySelector('.public-DraftStyleDefault-block');\n    const id = `span-wrapper-0-${sliceMap.get(at)}`;\n    const span = wrapper.querySelector(`[data-offset-key='${id}']`);\n    return span;\n  };\n\n  // Get all anchors at one time\n  getAnchorElementsByHeads = () => {\n    const { sliceMap } = this;\n    const wrapper = this.editorWrapper.querySelector('.public-DraftStyleDefault-block');\n    const spanMap = new Map();\n    sliceMap.forEach((value, key) => {\n      const id = `span-wrapper-0-${sliceMap.get(key)}`;\n      const span = wrapper.querySelector(`[data-offset-key='${id}']`);\n      spanMap.set(key, span);\n    });\n    return spanMap;\n  };\n\n  onMouseDown = (e) => {\n    if (e.which === 1) {\n      this.mouseFlag = true;\n    }\n    const onMouseUp = () => {\n      this.mouseFlag = false;\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n    window.addEventListener('mouseup', onMouseUp);\n  };\n\n  onCompositionEnd = () => {\n    this.compositionFlag = COMPOSITION.PENDING;\n  };\n\n  onCompositionStart = () => {\n    this.compositionFlag = COMPOSITION.ENABLED;\n    this.compositionTop = this.editorWrapper.scrollTop;\n  };\n\n  handleBeforeInput = () => { this.inputFlag = true; return 'not-handled'; };\n\n  handlePastedText = () => { this.pasteFlag = true; return 'not-handled'; };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}