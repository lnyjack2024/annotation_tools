{"ast":null,"code":"export const parseAlawPcmToAudioData = data => {\n  const dataView = new DataView(data);\n  const reader = createReader(dataView);\n  const read = reader.pcm16;\n  const length = data.byteLength / 2;\n  const audioBuffer = new AudioBuffer({\n    numberOfChannels: 1,\n    length,\n    sampleRate: 8000\n  });\n  const channelData = audioBuffer.getChannelData(0);\n  for (let i = 0; i < length; i += 1) {\n    channelData[i] = read();\n  }\n  return audioBuffer;\n};\nexport function createReader(dataView) {\n  let pos = 0;\n  return {\n    remain() {\n      return dataView.byteLength - pos;\n    },\n    skip(n) {\n      pos += n;\n    },\n    uint8() {\n      const data = dataView.getUint8(pos);\n      pos += 1;\n      return data;\n    },\n    int16() {\n      const data = dataView.getInt16(pos, true);\n      pos += 2;\n      return data;\n    },\n    uint16() {\n      const data = dataView.getUint16(pos, true);\n      pos += 2;\n      return data;\n    },\n    uint32() {\n      const data = dataView.getUint32(pos, true);\n      pos += 4;\n      return data;\n    },\n    string(n) {\n      let data = '';\n      for (let i = 0; i < n; i += 1) {\n        data += String.fromCharCode(this.uint8());\n      }\n      return data;\n    },\n    pcm8() {\n      const data = dataView.getUint8(pos) - 128;\n      pos += 1;\n      return data < 0 ? data / 128 : data / 127;\n    },\n    pcm8s() {\n      const data = dataView.getUint8(pos) - 127.5;\n      pos += 1;\n      return data / 127.5;\n    },\n    pcm16() {\n      const data = dataView.getInt16(pos, true);\n      pos += 2;\n      return data < 0 ? data / 32768 : data / 32767;\n    },\n    pcm16s() {\n      const data = dataView.getInt16(pos, true);\n      pos += 2;\n      return data / 32768;\n    },\n    pcm24() {\n      const x0 = dataView.getUint8(pos + 0);\n      const x1 = dataView.getUint8(pos + 1);\n      const x2 = dataView.getUint8(pos + 2);\n      const xx = x0 + x1 * 2 ** 8 + x2 * 2 ** 16;\n      const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n      pos += 3;\n      return data < 0 ? data / 8388608 : data / 8388607;\n    },\n    pcm24s() {\n      const x0 = dataView.getUint8(pos + 0);\n      const x1 = dataView.getUint8(pos + 1);\n      const x2 = dataView.getUint8(pos + 2);\n      const xx = x0 + x1 * 2 ** 8 + x2 * 2 ** 16;\n      const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n      pos += 3;\n      return data / 8388608;\n    },\n    pcm32() {\n      const data = dataView.getInt32(pos, true);\n      pos += 4;\n      return data < 0 ? data / 2147483648 : data / 2147483647;\n    },\n    pcm32s() {\n      const data = dataView.getInt32(pos, true);\n      pos += 4;\n      return data / 2147483648;\n    },\n    pcm32f() {\n      const data = dataView.getFloat32(pos, true);\n      pos += 4;\n      return data;\n    },\n    pcm64f() {\n      const data = dataView.getFloat64(pos, true);\n      pos += 8;\n      return data;\n    }\n  };\n}","map":{"version":3,"names":["parseAlawPcmToAudioData","data","dataView","DataView","reader","createReader","read","pcm16","length","byteLength","audioBuffer","AudioBuffer","numberOfChannels","sampleRate","channelData","getChannelData","i","pos","remain","skip","n","uint8","getUint8","int16","getInt16","uint16","getUint16","uint32","getUint32","string","String","fromCharCode","pcm8","pcm8s","pcm16s","pcm24","x0","x1","x2","xx","pcm24s","pcm32","getInt32","pcm32s","pcm32f","getFloat32","pcm64f","getFloat64"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/utils/pcm.ts"],"sourcesContent":["export const parseAlawPcmToAudioData = (data: ArrayBufferLike) => {\n  const dataView = new DataView(data);\n  const reader = createReader(dataView);\n  const read = reader.pcm16;\n\n  const length = data.byteLength / 2;\n\n  const audioBuffer = new AudioBuffer({\n    numberOfChannels: 1,\n    length,\n    sampleRate: 8000,\n  });\n\n  const channelData = audioBuffer.getChannelData(0);\n\n  for (let i = 0; i < length; i += 1) {\n    channelData[i] = read();\n  }\n\n  return audioBuffer;\n};\n\nexport function createReader(dataView: DataView) {\n  let pos = 0;\n\n  return {\n    remain() {\n      return dataView.byteLength - pos;\n    },\n    skip(n: number) {\n      pos += n;\n    },\n    uint8() {\n      const data = dataView.getUint8(pos);\n\n      pos += 1;\n\n      return data;\n    },\n    int16() {\n      const data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data;\n    },\n    uint16() {\n      const data = dataView.getUint16(pos, true);\n\n      pos += 2;\n\n      return data;\n    },\n    uint32() {\n      const data = dataView.getUint32(pos, true);\n\n      pos += 4;\n\n      return data;\n    },\n    string(n: number) {\n      let data = '';\n\n      for (let i = 0; i < n; i += 1) {\n        data += String.fromCharCode(this.uint8());\n      }\n\n      return data;\n    },\n    pcm8() {\n      const data = dataView.getUint8(pos) - 128;\n\n      pos += 1;\n\n      return data < 0 ? data / 128 : data / 127;\n    },\n    pcm8s() {\n      const data = dataView.getUint8(pos) - 127.5;\n\n      pos += 1;\n\n      return data / 127.5;\n    },\n    pcm16() {\n      const data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data < 0 ? data / 32768 : data / 32767;\n    },\n    pcm16s() {\n      const data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data / 32768;\n    },\n    pcm24() {\n      const x0 = dataView.getUint8(pos + 0);\n      const x1 = dataView.getUint8(pos + 1);\n      const x2 = dataView.getUint8(pos + 2);\n      const xx = (x0 + (x1 * 2 ** 8) + (x2 * 2 ** 16));\n      const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n\n      pos += 3;\n\n      return data < 0 ? data / 8388608 : data / 8388607;\n    },\n    pcm24s() {\n      const x0 = dataView.getUint8(pos + 0);\n      const x1 = dataView.getUint8(pos + 1);\n      const x2 = dataView.getUint8(pos + 2);\n      const xx = (x0 + (x1 * 2 ** 8) + (x2 * 2 ** 16));\n      const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n\n      pos += 3;\n\n      return data / 8388608;\n    },\n    pcm32() {\n      const data = dataView.getInt32(pos, true);\n\n      pos += 4;\n\n      return data < 0 ? data / 2147483648 : data / 2147483647;\n    },\n    pcm32s() {\n      const data = dataView.getInt32(pos, true);\n\n      pos += 4;\n\n      return data / 2147483648;\n    },\n    pcm32f() {\n      const data = dataView.getFloat32(pos, true);\n\n      pos += 4;\n\n      return data;\n    },\n    pcm64f() {\n      const data = dataView.getFloat64(pos, true);\n\n      pos += 8;\n\n      return data;\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}