{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\nimport { DEFAULT_CATEGORY_ITEM } from '../constants';\nimport { getShapeTypeByTool, parseLabelConfig, parseToolConfig, parseToolStyles } from '../utils';\nimport { Tool } from '../types';\nimport { ShapeType } from '../../common/shapes/types';\n\n/**\n * store for ontology\n * @class\n */\nexport default class OntologyStore {\n  /**\n   * selected category\n   * @getter\n   */\n  get selectedCategory() {\n    const currentCategory = this.getCategory(this.selectedCategoryName);\n    return currentCategory || this.categories[0];\n  }\n\n  /**\n   * selected category item\n   * @getter\n   */\n  get selectedCategoryItem() {\n    const {\n      children\n    } = this.selectedCategory;\n    const index = children.findIndex(c => c.name === this.selectedCategoryItemName);\n    return index >= 0 ? children[index] : children[0];\n  }\n\n  /**\n   * current tool\n   * @getter\n   */\n  get currentTool() {\n    if (this.currentToolItem) {\n      return this.currentToolItem.type;\n    }\n    return Tool.RECTANGLE;\n  }\n\n  /**\n   * current shapeType by currentTool\n   * @getter\n   */\n  get currentShapeType() {\n    return getShapeTypeByTool(this.currentTool) || ShapeType.RECTANGLE;\n  }\n\n  /**\n   * is curret tool is ocr tool\n   * @getter\n   */\n  get isOCRTool() {\n    return this.currentTool === Tool.OCR || this.currentTool === Tool.OCR_POLYGON;\n  }\n\n  /**\n   * is curret tool is formula tool\n   * @getter\n   */\n  get isFormulaTool() {\n    return this.currentTool === Tool.FORMULA_POLYGON;\n  }\n\n  /**\n   * is any point label config in category items\n   * @getter\n   */\n  get pointLabelConfigEnabled() {\n    return this.categories.some(({\n      children\n    }) => children.some(c => !!c.pointLabelConfig));\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * categories\n     */\n    this.categories = [];\n    /**\n     * selected category name\n     */\n    this.selectedCategoryName = '';\n    /**\n     * selected category item name\n     */\n    this.selectedCategoryItemName = '';\n    /**\n     * selected tool item\n     */\n    this.currentToolItem = null;\n    /**\n     * current tool options (used for shape creation)\n     */\n    this.currentOptions = {\n      cols: 5,\n      // grid tool default cols\n      rows: 5 // grid tool default rows\n    };\n    /**\n     * styles cache\n     */\n    this.toolStylesCache = {};\n    makeAutoObservable(this, {\n      rootStore: false,\n      currentOptions: false,\n      toolStylesCache: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload) {\n    var _this$categories$, _this$categories$2, _this$categories$2$ch, _this$categories$3, _this$categories$3$ch;\n    const categories = [];\n    const {\n      ontology = [],\n      tools: legacyTools,\n      label_config: legacyLabelConfig\n    } = payload;\n    ontology.forEach(o => {\n      const items = [];\n      if (!o.children || o.children.length === 0) {\n        // legacy data, add default item\n        items.push({\n          name: DEFAULT_CATEGORY_ITEM,\n          displayName: DEFAULT_CATEGORY_ITEM,\n          displayColor: o.display_color || '',\n          tools: (legacyTools || Object.values(Tool)).map(t => ({\n            type: t\n          })),\n          count: 1,\n          labelConfig: parseLabelConfig(legacyLabelConfig)\n        });\n      } else {\n        o.children.forEach(child => {\n          const {\n            name,\n            display_name,\n            display_color,\n            count,\n            min_count,\n            max_count,\n            label_config,\n            label_config_point,\n            label_config_groups,\n            label_config_point_groups,\n            type = '',\n            edges,\n            tools\n          } = child;\n\n          // parse tools\n          let allTools = [];\n          if (tools) {\n            tools.forEach(item => {\n              const tool = {\n                type: item.type || Tool.RECTANGLE\n              };\n              if (item.edges !== undefined && item.edges !== null) {\n                tool.edges = Number(item.edges);\n              }\n              allTools.push({\n                ...tool,\n                ...parseToolStyles(item),\n                ...parseToolConfig(tool.type, item.config)\n              });\n            });\n          } else {\n            // legacy config\n            let legacyEdges;\n            if (edges !== undefined && edges !== null) {\n              legacyEdges = Number(edges);\n            }\n            allTools = type.split(',').map(i => ({\n              type: i || Tool.RECTANGLE,\n              edges: legacyEdges\n            }));\n          }\n          const item = {\n            name,\n            displayName: display_name || name,\n            displayColor: display_color || o.display_color || '',\n            tools: allTools\n          };\n          if (count !== undefined && count !== null) {\n            item.count = Number(count);\n          }\n          if (min_count !== undefined && min_count !== null) {\n            item.minCount = Number(min_count);\n          }\n          if (max_count !== undefined && max_count !== null) {\n            item.maxCount = Number(max_count);\n          }\n          if (label_config) {\n            item.labelConfig = parseLabelConfig(label_config);\n          }\n          if (label_config_point) {\n            item.pointLabelConfig = parseLabelConfig(label_config_point);\n          }\n          if (Array.isArray(label_config_groups)) {\n            item.labelConfigGroups = label_config_groups.map(({\n              attributes,\n              ...styles\n            }) => ({\n              attributes,\n              ...parseToolStyles(styles)\n            }));\n          }\n          if (Array.isArray(label_config_point_groups)) {\n            item.pointLabelConfigGroups = label_config_point_groups.map(({\n              attributes,\n              ...styles\n            }) => ({\n              attributes,\n              ...parseToolStyles(styles)\n            }));\n          }\n          items.push(item);\n        });\n      }\n      let categoryColor = '';\n      if (items.length === 1 && items[0].count === 1) {\n        categoryColor = items[0].displayColor;\n      }\n      categories.push({\n        className: o.class_name,\n        displayName: o.display_name || o.class_name,\n        displayColor: categoryColor,\n        children: items,\n        labelConfig: parseLabelConfig(o.label_config)\n      });\n    });\n    this.categories = categories;\n    this.selectedCategoryName = (_this$categories$ = this.categories[0]) === null || _this$categories$ === void 0 ? void 0 : _this$categories$.className;\n    this.selectedCategoryItemName = (_this$categories$2 = this.categories[0]) === null || _this$categories$2 === void 0 ? void 0 : (_this$categories$2$ch = _this$categories$2.children[0]) === null || _this$categories$2$ch === void 0 ? void 0 : _this$categories$2$ch.name;\n    this.currentToolItem = (_this$categories$3 = this.categories[0]) === null || _this$categories$3 === void 0 ? void 0 : (_this$categories$3$ch = _this$categories$3.children[0]) === null || _this$categories$3$ch === void 0 ? void 0 : _this$categories$3$ch.tools[0];\n  }\n\n  /**\n   * get category object\n   * @param categoryName\n   */\n  getCategory(categoryName) {\n    return toJS(this.categories.find(o => o.className === categoryName));\n  }\n\n  /**\n   * get category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getCategoryItem(categoryName, categoryItemName) {\n    const category = this.getCategory(categoryName);\n    return toJS(((category === null || category === void 0 ? void 0 : category.children) || []).find(o => o.name === categoryItemName));\n  }\n\n  /**\n   * set selected category\n   * @param categoryName\n   */\n  selectCategory(categoryName) {\n    if (this.selectedCategoryName !== categoryName) {\n      // turn off the add mode\n      this.rootStore.config.setAddMode(false);\n      // category changes\n      this.selectedCategoryName = categoryName;\n      // update selected category name\n      this.selectCategoryItem(this.selectedCategory.children[0].name); // default select the first one\n      // unselect selected instance if needed\n      if (this.rootStore.instance.selectedInstances.findIndex(i => i.category === categoryName) < 0) {\n        this.rootStore.instance.selectInstance(null);\n      }\n    }\n  }\n\n  /**\n   * set selected category item\n   * @param categoryItemName\n   */\n  selectCategoryItem(categoryItemName) {\n    this.selectedCategoryItemName = categoryItemName;\n    this.currentToolItem = this.selectedCategoryItem.tools[0];\n  }\n\n  /**\n   * activate category item\n   * @param categoryItemName\n   * @param tool\n   */\n  activateCategoryItem(categoryItemName, tool) {\n    if (this.rootStore.shape.isDrawing) {\n      return;\n    }\n    this.selectCategoryItem(categoryItemName);\n    this.selectTool(tool);\n    this.rootStore.config.setAddMode(true);\n  }\n\n  /**\n   * activate category item by index\n   * @param index\n   */\n  activateCategoryItemByIndex(index) {\n    if (this.rootStore.shape.isDrawing) {\n      return;\n    }\n    const child = this.selectedCategory.children[index];\n    if (child) {\n      const tool = child.name === this.selectedCategoryItemName ? this.currentToolItem : child.tools[0];\n      this.activateCategoryItem(child.name, tool);\n    }\n  }\n\n  /**\n   * set current tool\n   * @param tool\n   */\n  selectTool(tool) {\n    if (this.currentToolItem !== tool) {\n      this.currentToolItem = tool;\n    }\n  }\n\n  /**\n   * get label config from category\n   * @param categoryName\n   */\n  getLabelConfigFromCategory(categoryName) {\n    const category = this.getCategory(categoryName);\n    return category === null || category === void 0 ? void 0 : category.labelConfig;\n  }\n\n  /**\n   * get label config from category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getLabelConfigFromCategoryItem(categoryName, categoryItemName) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    return categoryItem === null || categoryItem === void 0 ? void 0 : categoryItem.labelConfig;\n  }\n\n  /**\n   * get point label config from category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getPointLabelConfigFromCategoryItem(categoryName, categoryItemName) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    return categoryItem === null || categoryItem === void 0 ? void 0 : categoryItem.pointLabelConfig;\n  }\n\n  /**\n   * get configured styles from tool\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolStylesByCategoryItem(categoryName, categoryItemName) {\n    // has cache\n    if (this.toolStylesCache[categoryName] && this.toolStylesCache[categoryName][categoryItemName]) {\n      return this.toolStylesCache[categoryName][categoryItemName];\n    }\n    if (!this.toolStylesCache[categoryName]) {\n      this.toolStylesCache[categoryName] = {};\n    }\n    this.toolStylesCache[categoryName][categoryItemName] = {\n      pointsStyles: null,\n      edgesStyles: null\n    };\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    if (categoryItem) {\n      const tool = categoryItem.tools[0]; // simply use first one because only one tool can be configured\n      if (tool) {\n        const {\n          fillColor,\n          pointColor,\n          pointType,\n          edgeColor,\n          edgeType,\n          edgeBold,\n          pointsColor,\n          pointsType,\n          edgesColor,\n          edgesType,\n          edgesBold\n        } = tool;\n        if (fillColor) {\n          this.toolStylesCache[categoryName][categoryItemName].fillColor = fillColor;\n        }\n        if (pointColor || pointType || pointsColor || pointsType) {\n          this.toolStylesCache[categoryName][categoryItemName].pointsStyles = {\n            pointColor,\n            pointType,\n            pointsColor,\n            pointsType\n          };\n        }\n        if (edgeColor || edgeType || edgeBold !== undefined || edgesColor || edgesType || edgesBold) {\n          this.toolStylesCache[categoryName][categoryItemName].edgesStyles = {\n            edgeColor,\n            edgeType,\n            edgeBold,\n            edgesColor,\n            edgesType,\n            edgesBold\n          };\n        }\n      }\n    }\n    return this.toolStylesCache[categoryName][categoryItemName];\n  }\n\n  /**\n   * get configured points styles\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolPointsStylesByCategoryItem(categoryName, categoryItemName) {\n    return this.getToolStylesByCategoryItem(categoryName, categoryItemName).pointsStyles;\n  }\n\n  /**\n   * get configured edges styles\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolEdgesStylesByCategoryItem(categoryName, categoryItemName) {\n    return this.getToolStylesByCategoryItem(categoryName, categoryItemName).edgesStyles;\n  }\n\n  /**\n   * get fill color\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolFillByCategoryItem(categoryName, categoryItemName) {\n    return this.getToolStylesByCategoryItem(categoryName, categoryItemName).fillColor;\n  }\n\n  /**\n   * get tool config\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolConfigByCategoryItem(categoryName, categoryItemName) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    if (categoryItem) {\n      const tool = categoryItem.tools[0];\n      return tool === null || tool === void 0 ? void 0 : tool.config;\n    }\n    return undefined;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","toJS","DEFAULT_CATEGORY_ITEM","getShapeTypeByTool","parseLabelConfig","parseToolConfig","parseToolStyles","Tool","ShapeType","OntologyStore","selectedCategory","currentCategory","getCategory","selectedCategoryName","categories","selectedCategoryItem","children","index","findIndex","c","name","selectedCategoryItemName","currentTool","currentToolItem","type","RECTANGLE","currentShapeType","isOCRTool","OCR","OCR_POLYGON","isFormulaTool","FORMULA_POLYGON","pointLabelConfigEnabled","some","pointLabelConfig","constructor","rootStore","currentOptions","cols","rows","toolStylesCache","autoBind","init","payload","_this$categories$","_this$categories$2","_this$categories$2$ch","_this$categories$3","_this$categories$3$ch","ontology","tools","legacyTools","label_config","legacyLabelConfig","forEach","o","items","length","push","displayName","displayColor","display_color","Object","values","map","t","count","labelConfig","child","display_name","min_count","max_count","label_config_point","label_config_groups","label_config_point_groups","edges","allTools","item","tool","undefined","Number","config","legacyEdges","split","i","minCount","maxCount","Array","isArray","labelConfigGroups","attributes","styles","pointLabelConfigGroups","categoryColor","className","class_name","categoryName","find","getCategoryItem","categoryItemName","category","selectCategory","setAddMode","selectCategoryItem","instance","selectedInstances","selectInstance","activateCategoryItem","shape","isDrawing","selectTool","activateCategoryItemByIndex","getLabelConfigFromCategory","getLabelConfigFromCategoryItem","categoryItem","getPointLabelConfigFromCategoryItem","getToolStylesByCategoryItem","pointsStyles","edgesStyles","fillColor","pointColor","pointType","edgeColor","edgeType","edgeBold","pointsColor","pointsType","edgesColor","edgesType","edgesBold","getToolPointsStylesByCategoryItem","getToolEdgesStylesByCategoryItem","getToolFillByCategoryItem","getToolConfigByCategoryItem"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/OntologyStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport RootStore from './RootStore';\nimport { DEFAULT_CATEGORY_ITEM } from '../constants';\nimport { getShapeTypeByTool, parseLabelConfig, parseToolConfig, parseToolStyles } from '../utils';\nimport { Tool, Payload, Category, CategoryItem, ToolItem } from '../types';\nimport { ShapeType } from '../../common/shapes/types';\n\n/**\n * store for ontology\n * @class\n */\nexport default class OntologyStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * categories\n   */\n  categories: Category[] = [];\n\n  /**\n   * selected category name\n   */\n  selectedCategoryName = '';\n\n  /**\n   * selected category item name\n   */\n  selectedCategoryItemName = '';\n\n  /**\n   * selected tool item\n   */\n  currentToolItem: ToolItem | null = null;\n\n  /**\n   * current tool options (used for shape creation)\n   */\n  currentOptions: {\n    cols: number;\n    rows: number;\n  } = {\n    cols: 5, // grid tool default cols\n    rows: 5, // grid tool default rows\n  };\n\n  /**\n   * styles cache\n   */\n  toolStylesCache: {\n    [categoryName: string]: {\n      [categoryItemName: string]: {\n        fillColor?: string;\n        pointsStyles: {\n          pointColor?: string;\n          pointType?: string;\n          pointsColor?: string[];\n          pointsType?: string[];\n        } | null;\n        edgesStyles: {\n          edgeColor?: string;\n          edgeType?: string;\n          edgeBold?: boolean;\n          edgesColor?: string[];\n          edgesType?: string[];\n          edgesBold?: boolean[];\n        } | null;\n      }\n    }\n  } = {};\n\n  /**\n   * selected category\n   * @getter\n   */\n  get selectedCategory() {\n    const currentCategory = this.getCategory(this.selectedCategoryName);\n    return currentCategory || this.categories[0];\n  }\n\n  /**\n   * selected category item\n   * @getter\n   */\n  get selectedCategoryItem() {\n    const { children } = this.selectedCategory;\n    const index = children.findIndex((c) => c.name === this.selectedCategoryItemName);\n    return index >= 0 ? children[index] : children[0];\n  }\n\n  /**\n   * current tool\n   * @getter\n   */\n  get currentTool() {\n    if (this.currentToolItem) {\n      return this.currentToolItem.type;\n    }\n    return Tool.RECTANGLE;\n  }\n\n  /**\n   * current shapeType by currentTool\n   * @getter\n   */\n  get currentShapeType() {\n    return getShapeTypeByTool(this.currentTool) || ShapeType.RECTANGLE;\n  }\n\n  /**\n   * is curret tool is ocr tool\n   * @getter\n   */\n  get isOCRTool() {\n    return this.currentTool === Tool.OCR || this.currentTool === Tool.OCR_POLYGON;\n  }\n\n  /**\n   * is curret tool is formula tool\n   * @getter\n   */\n  get isFormulaTool() {\n    return this.currentTool === Tool.FORMULA_POLYGON;\n  }\n\n  /**\n   * is any point label config in category items\n   * @getter\n   */\n  get pointLabelConfigEnabled() {\n    return this.categories.some(({ children }) => children.some((c) => !!c.pointLabelConfig));\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      currentOptions: false,\n      toolStylesCache: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload: Payload) {\n    const categories: Category[] = [];\n\n    const { ontology = [], tools: legacyTools, label_config: legacyLabelConfig } = payload;\n    ontology.forEach((o) => {\n      const items: CategoryItem[] = [];\n      if (!o.children || o.children.length === 0) {\n        // legacy data, add default item\n        items.push({\n          name: DEFAULT_CATEGORY_ITEM,\n          displayName: DEFAULT_CATEGORY_ITEM,\n          displayColor: o.display_color || '',\n          tools: (legacyTools || Object.values(Tool)).map((t) => ({ type: t })),\n          count: 1,\n          labelConfig: parseLabelConfig(legacyLabelConfig),\n        });\n      } else {\n        o.children.forEach((child) => {\n          const {\n            name,\n            display_name,\n            display_color,\n            count,\n            min_count,\n            max_count,\n            label_config,\n            label_config_point,\n            label_config_groups,\n            label_config_point_groups,\n            type = '',\n            edges,\n            tools,\n          } = child;\n\n          // parse tools\n          let allTools: ToolItem[] = [];\n          if (tools) {\n            tools.forEach((item) => {\n              const tool: ToolItem = { type: item.type as Tool || Tool.RECTANGLE };\n              if (item.edges !== undefined && item.edges !== null) {\n                tool.edges = Number(item.edges);\n              }\n              allTools.push({\n                ...tool,\n                ...parseToolStyles(item),\n                ...parseToolConfig(tool.type, item.config),\n              });\n            });\n          } else {\n            // legacy config\n            let legacyEdges: number | undefined;\n            if (edges !== undefined && edges !== null) {\n              legacyEdges = Number(edges);\n            }\n            allTools = type.split(',').map((i) => ({ type: i as Tool || Tool.RECTANGLE, edges: legacyEdges }));\n          }\n\n          const item: CategoryItem = {\n            name,\n            displayName: display_name || name,\n            displayColor: display_color || o.display_color || '',\n            tools: allTools,\n          };\n          if (count !== undefined && count !== null) {\n            item.count = Number(count);\n          }\n          if (min_count !== undefined && min_count !== null) {\n            item.minCount = Number(min_count);\n          }\n          if (max_count !== undefined && max_count !== null) {\n            item.maxCount = Number(max_count);\n          }\n          if (label_config) {\n            item.labelConfig = parseLabelConfig(label_config);\n          }\n          if (label_config_point) {\n            item.pointLabelConfig = parseLabelConfig(label_config_point);\n          }\n          if (Array.isArray(label_config_groups)) {\n            item.labelConfigGroups = label_config_groups.map(({ attributes, ...styles }) => ({\n              attributes,\n              ...parseToolStyles(styles),\n            }));\n          }\n          if (Array.isArray(label_config_point_groups)) {\n            item.pointLabelConfigGroups = label_config_point_groups.map(({ attributes, ...styles }) => ({\n              attributes,\n              ...parseToolStyles(styles),\n            }));\n          }\n          items.push(item);\n        });\n      }\n\n      let categoryColor = '';\n      if (items.length === 1 && items[0].count === 1) {\n        categoryColor = items[0].displayColor;\n      }\n      categories.push({\n        className: o.class_name,\n        displayName: o.display_name || o.class_name,\n        displayColor: categoryColor,\n        children: items,\n        labelConfig: parseLabelConfig(o.label_config),\n      });\n    });\n    this.categories = categories;\n    this.selectedCategoryName = this.categories[0]?.className;\n    this.selectedCategoryItemName = this.categories[0]?.children[0]?.name;\n    this.currentToolItem = this.categories[0]?.children[0]?.tools[0];\n  }\n\n  /**\n   * get category object\n   * @param categoryName\n   */\n  getCategory(categoryName: string) {\n    return toJS(this.categories.find((o) => o.className === categoryName));\n  }\n\n  /**\n   * get category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getCategoryItem(categoryName: string, categoryItemName: string) {\n    const category = this.getCategory(categoryName);\n    return toJS((category?.children || []).find((o) => o.name === categoryItemName));\n  }\n\n  /**\n   * set selected category\n   * @param categoryName\n   */\n  selectCategory(categoryName: string) {\n    if (this.selectedCategoryName !== categoryName) {\n      // turn off the add mode\n      this.rootStore.config.setAddMode(false);\n      // category changes\n      this.selectedCategoryName = categoryName;\n      // update selected category name\n      this.selectCategoryItem(this.selectedCategory.children[0].name); // default select the first one\n      // unselect selected instance if needed\n      if (this.rootStore.instance.selectedInstances.findIndex((i) => i.category === categoryName) < 0) {\n        this.rootStore.instance.selectInstance(null);\n      }\n    }\n  }\n\n  /**\n   * set selected category item\n   * @param categoryItemName\n   */\n  selectCategoryItem(categoryItemName: string) {\n    this.selectedCategoryItemName = categoryItemName;\n    this.currentToolItem = this.selectedCategoryItem.tools[0];\n  }\n\n  /**\n   * activate category item\n   * @param categoryItemName\n   * @param tool\n   */\n  activateCategoryItem(categoryItemName: string, tool: ToolItem) {\n    if (this.rootStore.shape.isDrawing) {\n      return;\n    }\n    this.selectCategoryItem(categoryItemName);\n    this.selectTool(tool);\n    this.rootStore.config.setAddMode(true);\n  }\n\n  /**\n   * activate category item by index\n   * @param index\n   */\n  activateCategoryItemByIndex(index: number) {\n    if (this.rootStore.shape.isDrawing) {\n      return;\n    }\n    const child = this.selectedCategory.children[index];\n    if (child) {\n      const tool = child.name === this.selectedCategoryItemName ? this.currentToolItem! : child.tools[0];\n      this.activateCategoryItem(child.name, tool);\n    }\n  }\n\n  /**\n   * set current tool\n   * @param tool\n   */\n  selectTool(tool: ToolItem) {\n    if (this.currentToolItem !== tool) {\n      this.currentToolItem = tool;\n    }\n  }\n\n  /**\n   * get label config from category\n   * @param categoryName\n   */\n  getLabelConfigFromCategory(categoryName: string) {\n    const category = this.getCategory(categoryName);\n    return category?.labelConfig;\n  }\n\n  /**\n   * get label config from category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getLabelConfigFromCategoryItem(categoryName: string, categoryItemName: string) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    return categoryItem?.labelConfig;\n  }\n\n  /**\n   * get point label config from category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getPointLabelConfigFromCategoryItem(categoryName: string, categoryItemName: string) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    return categoryItem?.pointLabelConfig;\n  }\n\n  /**\n   * get configured styles from tool\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolStylesByCategoryItem(categoryName: string, categoryItemName: string) {\n    // has cache\n    if (this.toolStylesCache[categoryName] && this.toolStylesCache[categoryName][categoryItemName]) {\n      return this.toolStylesCache[categoryName][categoryItemName];\n    }\n\n    if (!this.toolStylesCache[categoryName]) {\n      this.toolStylesCache[categoryName] = {};\n    }\n    this.toolStylesCache[categoryName][categoryItemName] = {\n      pointsStyles: null,\n      edgesStyles: null,\n    };\n\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    if (categoryItem) {\n      const tool = categoryItem.tools[0]; // simply use first one because only one tool can be configured\n      if (tool) {\n        const {\n          fillColor,\n          pointColor,\n          pointType,\n          edgeColor,\n          edgeType,\n          edgeBold,\n          pointsColor,\n          pointsType,\n          edgesColor,\n          edgesType,\n          edgesBold,\n        } = tool;\n        if (fillColor) {\n          this.toolStylesCache[categoryName][categoryItemName].fillColor = fillColor;\n        }\n        if (pointColor || pointType || pointsColor || pointsType) {\n          this.toolStylesCache[categoryName][categoryItemName].pointsStyles = {\n            pointColor,\n            pointType,\n            pointsColor,\n            pointsType,\n          };\n        }\n        if (edgeColor || edgeType || edgeBold !== undefined || edgesColor || edgesType || edgesBold) {\n          this.toolStylesCache[categoryName][categoryItemName].edgesStyles = {\n            edgeColor,\n            edgeType,\n            edgeBold,\n            edgesColor,\n            edgesType,\n            edgesBold,\n          };\n        }\n      }\n    }\n\n    return this.toolStylesCache[categoryName][categoryItemName];\n  }\n\n  /**\n   * get configured points styles\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolPointsStylesByCategoryItem(categoryName: string, categoryItemName: string) {\n    return this.getToolStylesByCategoryItem(categoryName, categoryItemName).pointsStyles;\n  }\n\n  /**\n   * get configured edges styles\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolEdgesStylesByCategoryItem(categoryName: string, categoryItemName: string) {\n    return this.getToolStylesByCategoryItem(categoryName, categoryItemName).edgesStyles;\n  }\n\n  /**\n   * get fill color\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolFillByCategoryItem(categoryName: string, categoryItemName: string) {\n    return this.getToolStylesByCategoryItem(categoryName, categoryItemName).fillColor;\n  }\n\n  /**\n   * get tool config\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getToolConfigByCategoryItem(categoryName: string, categoryItemName: string) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    if (categoryItem) {\n      const tool = categoryItem.tools[0];\n      return tool?.config;\n    }\n    return undefined;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}