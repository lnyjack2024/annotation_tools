{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/assists/Assistant.tsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nconst Assistant = ({\n  element,\n  scale = 1,\n  crossline,\n  measurementBox,\n  mousePosition\n}) => {\n  const canvas = useRef(null);\n  const drawn = useRef(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const draw = () => {\n    if (!crossline && !measurementBox && !drawn.current) {\n      return;\n    }\n    if (canvas.current) {\n      const {\n        width,\n        height,\n        left,\n        top\n      } = canvas.current.getBoundingClientRect();\n      canvas.current.width = width * window.devicePixelRatio;\n      canvas.current.height = height * window.devicePixelRatio;\n      const ctx = canvas.current.getContext('2d');\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.current.width, canvas.current.height);\n        drawn.current = false;\n        const p = mousePosition || position;\n        const offsetX = (p.x - left) * window.devicePixelRatio;\n        const offsetY = (p.y - top) * window.devicePixelRatio;\n        if (crossline) {\n          ctx.save();\n          ctx.translate(-0.5, -0.5);\n          ctx.strokeStyle = '#FF0000';\n          ctx.lineWidth = 1 * window.devicePixelRatio;\n          ctx.beginPath();\n          ctx.moveTo(offsetX, 0);\n          ctx.lineTo(offsetX, canvas.current.height);\n          ctx.moveTo(0, offsetY);\n          ctx.lineTo(canvas.current.width, offsetY);\n          ctx.stroke();\n          ctx.restore();\n          drawn.current = true;\n        }\n        if (measurementBox) {\n          const w = measurementBox[0] * scale * window.devicePixelRatio;\n          const h = measurementBox[1] * scale * window.devicePixelRatio;\n          ctx.save();\n          ctx.beginPath();\n          ctx.strokeStyle = '#5CDEF0';\n          ctx.lineWidth = 1 * window.devicePixelRatio;\n          ctx.moveTo(offsetX, offsetY - h / 2);\n          ctx.lineTo(offsetX + w / 2, offsetY - h / 2);\n          ctx.lineTo(offsetX + w / 2, offsetY);\n          ctx.moveTo(offsetX - w / 2, offsetY);\n          ctx.lineTo(offsetX - w / 2, offsetY + h / 2);\n          ctx.lineTo(offsetX, offsetY + h / 2);\n          ctx.stroke();\n          ctx.restore();\n          drawn.current = true;\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    if (!mousePosition) {\n      // should track mouse position by selft\n      const mousemove = e => {\n        const {\n          clientX,\n          clientY\n        } = e;\n        setPosition({\n          x: clientX,\n          y: clientY\n        });\n      };\n      const mouseleave = () => setPosition({\n        x: 0,\n        y: 0\n      });\n      let ele = window;\n      if (element) {\n        const node = document.querySelector(element);\n        if (node) {\n          ele = node;\n        }\n      }\n      ele.addEventListener('mousemove', mousemove);\n      ele.addEventListener('mouseleave', mouseleave);\n      return () => {\n        ele.removeEventListener('mousemove', mousemove);\n        ele.removeEventListener('mouseleave', mouseleave);\n      };\n    }\n  }, []);\n  useEffect(() => {\n    draw();\n  }, [position, scale, crossline, measurementBox, mousePosition]);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvas,\n    style: {\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      pointerEvents: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  });\n};\nexport default Assistant;","map":{"version":3,"names":["React","useEffect","useRef","useState","Assistant","element","scale","crossline","measurementBox","mousePosition","canvas","drawn","position","setPosition","x","y","draw","current","width","height","left","top","getBoundingClientRect","window","devicePixelRatio","ctx","getContext","clearRect","p","offsetX","offsetY","save","translate","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","restore","w","h","mousemove","e","clientX","clientY","mouseleave","ele","node","document","querySelector","addEventListener","removeEventListener","createElement","ref","style","display","pointerEvents","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/assists/Assistant.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface AssistantProps {\n  element?: string;\n  scale?: number;\n  crossline?: boolean;\n  measurementBox?: number[];\n  mousePosition?: { x: number; y: number };\n}\n\nconst Assistant = ({ element, scale = 1, crossline, measurementBox, mousePosition }: AssistantProps) => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const drawn = useRef(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  const draw = () => {\n    if (!crossline && !measurementBox && !drawn.current) {\n      return;\n    }\n    if (canvas.current) {\n      const { width, height, left, top } = canvas.current.getBoundingClientRect();\n      canvas.current.width = width * window.devicePixelRatio;\n      canvas.current.height = height * window.devicePixelRatio;\n\n      const ctx = canvas.current.getContext('2d');\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.current.width, canvas.current.height);\n        drawn.current = false;\n\n        const p = mousePosition || position;\n        const offsetX = (p.x - left) * window.devicePixelRatio;\n        const offsetY = (p.y - top) * window.devicePixelRatio;\n\n        if (crossline) {\n          ctx.save();\n          ctx.translate(-0.5, -0.5);\n          ctx.strokeStyle = '#FF0000';\n          ctx.lineWidth = 1 * window.devicePixelRatio;\n          ctx.beginPath();\n          ctx.moveTo(offsetX, 0);\n          ctx.lineTo(offsetX, canvas.current.height);\n          ctx.moveTo(0, offsetY);\n          ctx.lineTo(canvas.current.width, offsetY);\n          ctx.stroke();\n          ctx.restore();\n          drawn.current = true;\n        }\n\n        if (measurementBox) {\n          const w = measurementBox[0] * scale * window.devicePixelRatio;\n          const h = measurementBox[1] * scale * window.devicePixelRatio;\n          ctx.save();\n          ctx.beginPath();\n          ctx.strokeStyle = '#5CDEF0';\n          ctx.lineWidth = 1 * window.devicePixelRatio;\n          ctx.moveTo(offsetX, offsetY - h / 2);\n          ctx.lineTo(offsetX + w / 2, offsetY - h / 2);\n          ctx.lineTo(offsetX + w / 2, offsetY);\n          ctx.moveTo(offsetX - w / 2, offsetY);\n          ctx.lineTo(offsetX - w / 2, offsetY + h / 2);\n          ctx.lineTo(offsetX, offsetY + h / 2);\n          ctx.stroke();\n          ctx.restore();\n          drawn.current = true;\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!mousePosition) {\n      // should track mouse position by selft\n      const mousemove = (e: Event) => {\n        const { clientX, clientY } = e as MouseEvent;\n        setPosition({ x: clientX, y: clientY });\n      };\n      const mouseleave = () => setPosition({ x: 0, y: 0 });\n      let ele: HTMLElement | Window = window;\n      if (element) {\n        const node = document.querySelector<HTMLElement>(element);\n        if (node) {\n          ele = node;\n        }\n      }\n      ele.addEventListener('mousemove', mousemove);\n      ele.addEventListener('mouseleave', mouseleave);\n      return () => {\n        ele.removeEventListener('mousemove', mousemove);\n        ele.removeEventListener('mouseleave', mouseleave);\n      };\n    }\n  }, []);\n\n  useEffect(() => {\n    draw();\n  }, [position, scale, crossline, measurementBox, mousePosition]);\n\n  return (\n    <canvas\n      ref={canvas}\n      style={{\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none',\n      }}\n    />\n  );\n};\n\nexport default Assistant;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}