{"ast":null,"code":"/* eslint-enable complexity, no-redeclare, no-var, one-var */\n\nimport FFT from './fft';\nimport Crunker from '../../../../multi-channel/utils/crunker';\nimport { setStyle, isPowerOfTwo } from '../utils';\nimport rootStore from '../../../store/RootStore';\nimport eventBus, { EventAction } from '../../../utils/event';\n\n/**\n * @typedef {Object} AnalysePluginParams\n * @property {string|HTMLElement} container Selector of element or element in\n * which to render\n * @property {?number} fftSamples=512 Number of samples to fetch to FFT. Must be\n * a power of 2.\n * @property {boolean} labels Set to true to display frequency labels.\n * @property {?number} noverlap Size of the overlapping window. Must be <\n * fftSamples. Auto deduced from canvas size by default.\n * @property {?string} windowFunc='hann' The window function to be used. One of\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\n * @property {?number} alpha Some window functions have this extra value.\n * (Between 0 and 1)\n * @property {?number} pixelRatio=wavesurfer.params.pixelRatio to control the\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('spectrogram')`\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\n * Each entry should contain a float between 0 and 1 and specify\n * r, g, b, and alpha.\n */\n\n/**\n * Render a spectrogram visualisation of the audio.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import AnalysePlugin from 'wavesurfer.spectrogram.js';\n *\n * // commonjs\n * var AnalysePlugin = require('wavesurfer.spectrogram.js');\n *\n * // if you are using <script> tags\n * var AnalysePlugin = window.Wave.spectrogram;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = Wave.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     AnalysePlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\n\nexport default class AnalysePlugin {\n  /**\n     * Spectrogram plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {AnalysePluginParams} params Parameters used to initialise the plugin\n     * @return {PluginDefinition} An object representing the plugin.\n     */\n  static create(params) {\n    return {\n      name: 'spectrogram',\n      deferInit: params && params.deferInit ? params.deferInit : false,\n      params,\n      staticProps: {\n        FFT\n      },\n      instance: AnalysePlugin\n    };\n  }\n  constructor(params) {\n    this.container = null;\n    this.wrapper = null;\n    this.labelsEl = null;\n    this.canvas = null;\n    this.spectrCc = null;\n    this.buffer = null;\n    this.params = void 0;\n    this.wavesurfer = null;\n    this.peaks = [];\n    // waveform data\n    this.amplitude = {\n      // peaks range\n      min: 0,\n      max: 0\n    };\n    this.frequenciesData = void 0;\n    // spectrogram data\n    this.pitchData = [];\n    // pitch data\n    this.intensityData = [];\n    // intensity data\n    this.formantData = [];\n    // formant data\n    this.channelData = void 0;\n    // audio channel data\n    this.drawer = void 0;\n    this.fftSamples = void 0;\n    this.sampleRate = void 0;\n    this.labels = void 0;\n    this.noverlap = void 0;\n    this.windowFunc = void 0;\n    this.alpha = void 0;\n    this.pixelRatio = 1;\n    this.deferInit = void 0;\n    this.colorMap = void 0;\n    this.width = 0;\n    this.height = 0;\n    this.spectrogramHeight = 0;\n    this.load = false;\n    this.intensityRangeY = [50, 100];\n    // y-axis/DB\n    this.pitchRangeY = [75, 500];\n    // y-axis/HZ\n    this.loadedAnalyseData = false;\n    this.isAmplitudeGeted = false;\n    this._onWrapperClick = e => {\n      this._wrapperClickHandler(e);\n    };\n    this._onReady = () => {\n      var _this$wavesurfer, _this$wavesurfer2;\n      const {\n        container,\n        colorMap,\n        pixelRatio,\n        fftSamples,\n        noverlap,\n        windowFunc,\n        alpha\n      } = this.params;\n      this.drawer = this.wavesurfer.drawer;\n      this.container = typeof container === 'string' ? document.querySelector(container) : container;\n      if (!this.container) {\n        throw Error('No container for Wave spectrogram');\n      }\n      if (colorMap) {\n        if (colorMap.length < 256) {\n          throw new Error('Colormap must contain 256 elements');\n        }\n        for (let i = 0; i < colorMap.length; i += 1) {\n          const cmEntry = colorMap[i];\n          if (cmEntry.length !== 4) {\n            throw new Error('ColorMap entries must contain 4 values');\n          }\n        }\n        this.colorMap = colorMap;\n      } else {\n        this.colorMap = [];\n        for (let i = 0; i < 256; i += 1) {\n          const val = (255 - i) / 256;\n          this.colorMap.push([val, val, val, 1]);\n        }\n      }\n      this.width = this.container.clientWidth;\n      this.height = this.params.height;\n      this.pixelRatio = pixelRatio || ((_this$wavesurfer = this.wavesurfer) === null || _this$wavesurfer === void 0 ? void 0 : _this$wavesurfer.params.pixelRatio) || 1;\n      this.fftSamples = fftSamples || 512;\n      this.noverlap = noverlap;\n      this.windowFunc = windowFunc;\n      this.alpha = alpha;\n      this.sampleRate = ((_this$wavesurfer2 = this.wavesurfer) === null || _this$wavesurfer2 === void 0 ? void 0 : _this$wavesurfer2.backend).ac.sampleRate;\n      this.setBuffer();\n      this.createWrapper();\n      this.createCanvas();\n      this.updateCanvasStyle();\n    };\n    this._onRender = () => {\n      this.render();\n    };\n    this.drawCanvas = (start, end) => {\n      const {\n        placement: {\n          duration\n        },\n        threshold\n      } = rootStore.analyse;\n      const displayDuration = (end - start) * duration;\n      if (displayDuration <= threshold) {\n        eventBus.emit(EventAction.ANALYSE_DRAW_START);\n        this.drawPraatAnalyse(start, end);\n      } else {\n        this.updateCanvasStyle();\n      }\n      eventBus.emit(EventAction.ANALYSE_DRAW_END);\n    };\n    this.drawPitch = (start, end, rateX) => {\n      if (this.pitchData.length > 0 && this.spectrCc) {\n        const pitchData = this.pitchData.slice(start, end);\n        this.spectrCc.lineWidth = this.pixelRatio;\n        this.spectrCc.strokeStyle = 'blue';\n        let linestart = true;\n        this.spectrCc.beginPath();\n        this.spectrCc.moveTo(0, 0);\n        const [startY, endY] = this.pitchRangeY;\n        const lenY = endY - startY;\n        for (let i = 0; i < pitchData.length; i += 1) {\n          const y = pitchData[i] ? (1 - (pitchData[i] - startY) / lenY) * (this.spectrogramHeight || this.height) * this.pixelRatio : undefined;\n          this.spectrCc.strokeStyle = 'blue';\n          if (!y) {\n            linestart = true;\n            this.spectrCc.stroke();\n          } else if (linestart) {\n            this.spectrCc.beginPath();\n            this.spectrCc.moveTo(i * rateX, y);\n            linestart = false;\n          } else {\n            this.spectrCc.lineTo(i * rateX, y);\n          }\n        }\n        this.spectrCc.stroke();\n      }\n    };\n    this.drawSpectrogram = (startPrecent, endPrecent) => {\n      const spectrCc = this.spectrCc;\n      const height = (this.spectrogramHeight || this.height) * this.pixelRatio;\n      const width = this.width * this.pixelRatio;\n      const start = Math.floor(this.frequenciesData.length * startPrecent);\n      const end = Math.floor(this.frequenciesData.length * endPrecent);\n      const frequenciesData = this.frequenciesData.slice(start, end);\n      if (spectrCc && frequenciesData.length) {\n        const {\n          pixels,\n          max\n        } = this.resample(frequenciesData);\n        const heightFactor = this.buffer ? 2 / this.buffer.numberOfChannels : 1;\n        const imageData = spectrCc.createImageData(width, height);\n        for (let i = 0; i < pixels.length; i += 1) {\n          for (let j = 0; j < pixels[i].length; j += 1) {\n            const color = 255 - pixels[i][j];\n            /* eslint-disable max-depth */\n            for (let k = 0; k < heightFactor; k += 1) {\n              let y = height - j * heightFactor;\n              if (heightFactor === 2 && k === 1) {\n                y -= 1;\n              }\n              const redIndex = y * (width * 4) + i * 4;\n              imageData.data[redIndex] = color;\n              imageData.data[redIndex + 1] = color;\n              imageData.data[redIndex + 2] = color;\n              imageData.data[redIndex + 3] = pixels[i][j] * (pixels[i][j] / max) * 2;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        this.updateCanvasStyle();\n        spectrCc.putImageData(imageData, 0, 0);\n      }\n    };\n    this.getCurrentfftSamples = (start, end) => {\n      let samples = Math.floor(this.fftSamples * (end - start));\n      if (samples < 512 && samples >= 256) {\n        samples = 256;\n      } else if (samples < 256 && samples >= 128) {\n        samples = 128;\n      } else if (samples < 128 && samples >= 64) {\n        samples = 64;\n      } else if (samples < 64 && samples >= 32) {\n        samples = 32;\n      } else if (samples < 32 && samples >= 16) {\n        samples = 16;\n      } else if (samples < 16 && samples >= 8) {\n        samples = 8;\n      } else if (samples < 8 && samples >= 4) {\n        samples = 4;\n      } else if (samples < 4) {\n        samples = 2;\n      }\n      ;\n      return samples;\n    };\n    this.setBuffer = () => {\n      var _this$wavesurfer3;\n      const waveBuffer = ((_this$wavesurfer3 = this.wavesurfer) === null || _this$wavesurfer3 === void 0 ? void 0 : _this$wavesurfer3.backend).buffer;\n      const buffers = [];\n      const {\n        numberOfChannels,\n        sampleRate,\n        length\n      } = waveBuffer;\n      if (numberOfChannels > 1) {\n        for (let i = 0; i < numberOfChannels; i += 1) {\n          const audioBuffer = new AudioBuffer({\n            numberOfChannels: 1,\n            sampleRate,\n            length\n          });\n          audioBuffer.copyToChannel(waveBuffer.getChannelData(i), 0);\n          buffers.push(audioBuffer);\n        }\n        const crunker = new Crunker({\n          sampleRate\n        });\n        this.buffer = crunker.mergeAudio(buffers);\n      } else {\n        this.buffer = waveBuffer;\n      }\n    };\n    this.params = params;\n    this.frequenciesData = [];\n    eventBus.on(EventAction.DRAW_ANALYSE, ({\n      start,\n      end\n    }) => {\n      this.drawCanvas(start, end);\n    });\n  }\n  init(wave) {\n    var _this$wavesurfer4, _this$wavesurfer6;\n    this.wavesurfer = wave;\n    // Check if wavesurfer is ready\n    if ((_this$wavesurfer4 = this.wavesurfer) === null || _this$wavesurfer4 === void 0 ? void 0 : _this$wavesurfer4.isReady) {\n      this._onReady();\n    } else {\n      var _this$wavesurfer5;\n      (_this$wavesurfer5 = this.wavesurfer) === null || _this$wavesurfer5 === void 0 ? void 0 : _this$wavesurfer5.on('ready', this._onReady);\n    }\n    (_this$wavesurfer6 = this.wavesurfer) === null || _this$wavesurfer6 === void 0 ? void 0 : _this$wavesurfer6.on('draw', this._onRender);\n  }\n  setHeight(height) {\n    this.height = height;\n  }\n  destroy() {\n    var _this$wavesurfer7;\n    (_this$wavesurfer7 = this.wavesurfer) === null || _this$wavesurfer7 === void 0 ? void 0 : _this$wavesurfer7.un('ready', this._onReady);\n    if (this.wrapper) {\n      var _this$wrapper$parentN;\n      this.wrapper.removeEventListener('click', this._onWrapperClick);\n      (_this$wrapper$parentN = this.wrapper.parentNode) === null || _this$wrapper$parentN === void 0 ? void 0 : _this$wrapper$parentN.removeChild(this.wrapper);\n      this.wrapper = null;\n    }\n    if (this.canvas) {\n      this.canvas.removeEventListener('contextmenu', this.preventDefault);\n    }\n  }\n  createWrapper() {\n    var _this$container, _this$container3;\n    const prevSpectrogram = (_this$container = this.container) === null || _this$container === void 0 ? void 0 : _this$container.querySelector('spectrogram');\n    if (prevSpectrogram) {\n      var _this$container2;\n      (_this$container2 = this.container) === null || _this$container2 === void 0 ? void 0 : _this$container2.removeChild(prevSpectrogram);\n    }\n    this.wrapper = document.createElement('spectrogram');\n    setStyle(this.wrapper, {\n      display: 'block',\n      position: 'relative',\n      userSelect: 'none',\n      webkitUserSelect: 'none',\n      height: `${this.height}px`\n    });\n    (_this$container3 = this.container) === null || _this$container3 === void 0 ? void 0 : _this$container3.appendChild(this.wrapper);\n    this.wrapper.addEventListener('click', this._onWrapperClick);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _wrapperClickHandler(event) {\n    event.preventDefault();\n    const relX = 'offsetX' in event ? event.offsetX : event.layerX;\n  }\n  createCanvas() {\n    this.canvas = this.wrapper.appendChild(document.createElement('canvas'));\n    this.canvas.addEventListener('contextmenu', this.preventDefault);\n    this.spectrCc = this.canvas.getContext('2d');\n    setStyle(this.canvas, {\n      position: 'absolute',\n      zIndex: '4'\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  preventDefault(e) {\n    e.preventDefault();\n  }\n  render() {\n    if (this.peaks.length === 0) {\n      var _this$wavesurfer8;\n      this.peaks = (((_this$wavesurfer8 = this.wavesurfer) === null || _this$wavesurfer8 === void 0 ? void 0 : _this$wavesurfer8.mergedPeaks) || []).map(v => v || 0);\n    }\n    if (!this.isAmplitudeGeted && this.peaks.length) {\n      this.isAmplitudeGeted = true;\n      const max = Math.max(Math.abs(Math.min(...this.peaks)), Math.abs(Math.max(...this.peaks)));\n      rootStore.analyse.setAmplitudeRange({\n        min: -max,\n        max\n      });\n      this.updateCanvasStyle();\n    }\n  }\n  updateCanvasStyle() {\n    if (this.container && this.height) {\n      this.width = this.container.clientWidth;\n      this.canvas.width = this.width * this.pixelRatio;\n      this.canvas.height = (this.spectrogramHeight || this.height) * this.pixelRatio;\n      this.canvas.style.width = `${this.width}px`;\n      this.canvas.style.height = `${this.height}px`;\n      if (this.wrapper) {\n        setStyle(this.wrapper, {\n          height: `${this.height}px`\n        });\n      }\n    }\n  }\n  drawPraatAnalyse(startPrecent, endPrecent) {\n    const len = Math.max(this.pitchData.length, this.intensityData.length, this.formantData.length);\n    const start = Math.floor(len * startPrecent);\n    const end = Math.floor(len * endPrecent);\n    const rateX = this.width * this.pixelRatio / (end - start);\n    const {\n      visible\n    } = rootStore.analyse;\n    if (visible.spectrogram) {\n      this.drawSpectrogram(startPrecent, endPrecent);\n    } else {\n      this.updateCanvasStyle();\n    }\n    if (visible.pitch) {\n      this.drawPitch(start, end, rateX);\n    }\n    if (visible.formant) {\n      this.drawFormant(start, end, rateX);\n    }\n    if (visible.intensity) {\n      this.drawIntensity(start, end, rateX);\n    }\n  }\n  drawIntensity(start, end, rateX) {\n    if (this.intensityData.length > 0 && this.spectrCc) {\n      const intensityData = this.intensityData.slice(start, end);\n      this.spectrCc.lineWidth = this.pixelRatio;\n      this.spectrCc.strokeStyle = 'yellow';\n      let linestart = true;\n      this.spectrCc.beginPath();\n      this.spectrCc.moveTo(0, 0);\n      const [startY, endY] = this.intensityRangeY;\n      const lenY = endY - startY;\n      for (let i = 0; i < intensityData.length; i += 1) {\n        const y = intensityData[i] ? (1 - (intensityData[i] - startY) / lenY) * (this.spectrogramHeight || this.height) * this.pixelRatio : undefined;\n        if (!y) {\n          linestart = true;\n          this.spectrCc.stroke();\n        } else if (linestart) {\n          this.spectrCc.beginPath();\n          this.spectrCc.moveTo(i * rateX, y);\n          linestart = false;\n        } else {\n          this.spectrCc.lineTo(i * rateX, y);\n        }\n      }\n      this.spectrCc.stroke();\n    }\n  }\n  drawFormant(start, end, rateX) {\n    if (this.formantData.length > 0 && this.spectrCc) {\n      const formantData = this.formantData.slice(start, end);\n      for (let i = 0; i < formantData.length; i += 1) {\n        const x = i * rateX;\n        for (let j = 0; j < formantData[i].length; j += 1) {\n          const formant = formantData[i][j];\n          const y = formant ? (1 - formant / (this.sampleRate / 2)) * (this.spectrogramHeight || this.height) * this.pixelRatio : undefined;\n          if (y) {\n            this.spectrCc.beginPath();\n            this.spectrCc.arc(x, y, 2 * this.pixelRatio, 0, 360, false);\n            this.spectrCc.fillStyle = j % 2 === 0 ? 'red' : '#f79e9e';\n            this.spectrCc.fill();\n            this.spectrCc.closePath();\n          }\n        }\n      }\n      this.spectrCc.stroke();\n    }\n  }\n  setAnalyseData(pitchData, intensityData, formantData, frequencies) {\n    this.pitchData = pitchData;\n    this.intensityData = intensityData;\n    this.formantData = formantData;\n    this.frequenciesData = frequencies;\n    this.spectrogramHeight = (isPowerOfTwo(frequencies[0].length) ? this.sampleRate / 8000 : 1) * frequencies[0].length;\n    this.loadedAnalyseData = true;\n    this.emitLoaded();\n  }\n  emitLoaded() {\n    if (this.loadedAnalyseData) {\n      eventBus.emit(EventAction.FREQUENCIES_DRAW);\n    }\n  }\n  // eslint-disable-next-line class-methods-use-this\n  freqType(freq) {\n    return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  unitType(freq) {\n    return freq >= 1000 ? 'KHz' : 'Hz';\n  }\n  resample(oldMatrix) {\n    const columnsNumber = this.width * this.pixelRatio;\n    const newMatrix = [];\n    let max = 0;\n    const oldPiece = 1 / oldMatrix.length;\n    const newPiece = 1 / columnsNumber;\n    for (let i = 0; i < columnsNumber; i += 1) {\n      const column = new Array(oldMatrix[0].length);\n      for (let j = 0; j < oldMatrix.length; j += 1) {\n        const oldStart = j * oldPiece;\n        const oldEnd = oldStart + oldPiece;\n        const newStart = i * newPiece;\n        const newEnd = newStart + newPiece;\n        const overlap = oldEnd <= newStart || newEnd <= oldStart ? 0 : Math.min(Math.max(oldEnd, newStart), Math.max(newEnd, oldStart)) - Math.max(Math.min(oldEnd, newStart), Math.min(newEnd, oldStart));\n        let k;\n        /* eslint-disable max-depth */\n        if (overlap > 0) {\n          for (k = 0; k < oldMatrix[0].length; k += 1) {\n            if (column[k] === undefined) {\n              column[k] = 0;\n            }\n            column[k] += overlap / newPiece * oldMatrix[j][k];\n          }\n        }\n        /* eslint-enable max-depth */\n      }\n      const intColumn = new Uint8Array(oldMatrix[0].length);\n      for (let m = 0; m < oldMatrix[0].length; m += 1) {\n        intColumn[m] = column[m];\n      }\n      max = Math.max(max, ...column);\n      newMatrix.push(intColumn);\n    }\n    return {\n      pixels: newMatrix,\n      max\n    };\n  }\n}","map":{"version":3,"names":["FFT","Crunker","setStyle","isPowerOfTwo","rootStore","eventBus","EventAction","AnalysePlugin","create","params","name","deferInit","staticProps","instance","constructor","container","wrapper","labelsEl","canvas","spectrCc","buffer","wavesurfer","peaks","amplitude","min","max","frequenciesData","pitchData","intensityData","formantData","channelData","drawer","fftSamples","sampleRate","labels","noverlap","windowFunc","alpha","pixelRatio","colorMap","width","height","spectrogramHeight","load","intensityRangeY","pitchRangeY","loadedAnalyseData","isAmplitudeGeted","_onWrapperClick","e","_wrapperClickHandler","_onReady","_this$wavesurfer","_this$wavesurfer2","document","querySelector","Error","length","i","cmEntry","val","push","clientWidth","backend","ac","setBuffer","createWrapper","createCanvas","updateCanvasStyle","_onRender","render","drawCanvas","start","end","placement","duration","threshold","analyse","displayDuration","emit","ANALYSE_DRAW_START","drawPraatAnalyse","ANALYSE_DRAW_END","drawPitch","rateX","slice","lineWidth","strokeStyle","linestart","beginPath","moveTo","startY","endY","lenY","y","undefined","stroke","lineTo","drawSpectrogram","startPrecent","endPrecent","Math","floor","pixels","resample","heightFactor","numberOfChannels","imageData","createImageData","j","color","k","redIndex","data","putImageData","getCurrentfftSamples","samples","_this$wavesurfer3","waveBuffer","buffers","audioBuffer","AudioBuffer","copyToChannel","getChannelData","crunker","mergeAudio","on","DRAW_ANALYSE","init","wave","_this$wavesurfer4","_this$wavesurfer6","isReady","_this$wavesurfer5","setHeight","destroy","_this$wavesurfer7","un","_this$wrapper$parentN","removeEventListener","parentNode","removeChild","preventDefault","_this$container","_this$container3","prevSpectrogram","_this$container2","createElement","display","position","userSelect","webkitUserSelect","appendChild","addEventListener","event","relX","offsetX","layerX","getContext","zIndex","_this$wavesurfer8","mergedPeaks","map","v","abs","setAmplitudeRange","style","len","visible","spectrogram","pitch","formant","drawFormant","intensity","drawIntensity","x","arc","fillStyle","fill","closePath","setAnalyseData","frequencies","emitLoaded","FREQUENCIES_DRAW","freqType","freq","toFixed","round","unitType","oldMatrix","columnsNumber","newMatrix","oldPiece","newPiece","column","Array","oldStart","oldEnd","newStart","newEnd","overlap","intColumn","Uint8Array","m"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/common/Wave/Analyse/index.ts"],"sourcesContent":["/* eslint-enable complexity, no-redeclare, no-var, one-var */\nimport Wave from '../index';\nimport FFT from './fft';\nimport Crunker from '../../../../multi-channel/utils/crunker';\nimport { setStyle, isPowerOfTwo } from '../utils';\nimport rootStore from '../../../store/RootStore';\nimport eventBus, { EventAction } from '../../../utils/event';\n\nexport interface AnalysePluginParams {\n  container: HTMLElement | 'string';\n  fftSamples?: number;\n  labels?: boolean;\n  noverlap?: number;\n  windowFunc?: string;\n  alpha?: number;\n  pixelRatio?: number;\n  deferInit?: boolean;\n  colorMap?: number[][];\n  height: number;\n}\n\n/**\n * @typedef {Object} AnalysePluginParams\n * @property {string|HTMLElement} container Selector of element or element in\n * which to render\n * @property {?number} fftSamples=512 Number of samples to fetch to FFT. Must be\n * a power of 2.\n * @property {boolean} labels Set to true to display frequency labels.\n * @property {?number} noverlap Size of the overlapping window. Must be <\n * fftSamples. Auto deduced from canvas size by default.\n * @property {?string} windowFunc='hann' The window function to be used. One of\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\n * @property {?number} alpha Some window functions have this extra value.\n * (Between 0 and 1)\n * @property {?number} pixelRatio=wavesurfer.params.pixelRatio to control the\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('spectrogram')`\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\n * Each entry should contain a float between 0 and 1 and specify\n * r, g, b, and alpha.\n */\n\n/**\n * Render a spectrogram visualisation of the audio.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import AnalysePlugin from 'wavesurfer.spectrogram.js';\n *\n * // commonjs\n * var AnalysePlugin = require('wavesurfer.spectrogram.js');\n *\n * // if you are using <script> tags\n * var AnalysePlugin = window.Wave.spectrogram;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = Wave.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     AnalysePlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport interface AnalyseOptions {\n  container: HTMLElement;\n  height: number;\n}\n\nexport default class AnalysePlugin {\n  /**\n     * Spectrogram plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {AnalysePluginParams} params Parameters used to initialise the plugin\n     * @return {PluginDefinition} An object representing the plugin.\n     */\n  static create(params: AnalysePluginParams) {\n    return {\n      name: 'spectrogram',\n      deferInit: params && params.deferInit ? params.deferInit : false,\n      params,\n      staticProps: {\n        FFT\n      },\n      instance: AnalysePlugin\n    };\n  }\n\n  container: HTMLElement | null = null;\n\n  wrapper: HTMLElement | null = null;\n\n  labelsEl: HTMLCanvasElement | null = null;\n\n  canvas: HTMLCanvasElement | null = null;\n\n  spectrCc: CanvasRenderingContext2D | null = null;\n\n  buffer: AudioBuffer | null = null;\n\n  params: AnalysePluginParams;\n\n  wavesurfer: Wave | null = null;\n\n  peaks: number[] = []; // waveform data\n\n  amplitude = { // peaks range\n    min: 0,\n    max: 0,\n  };\n\n  frequenciesData: Uint8Array[]; // spectrogram data\n\n  pitchData: number[] = []; // pitch data\n\n  intensityData: number[] = []; // intensity data\n\n  formantData: number[][] = []; // formant data\n\n  channelData?: Float32Array; // audio channel data\n\n  drawer: Wave['drawer'];\n\n  fftSamples?: number;\n\n  sampleRate?: number;\n\n  labels?: boolean;\n\n  noverlap?: number;\n\n  windowFunc?: string;\n\n  alpha?: number;\n\n  pixelRatio = 1;\n\n  deferInit?: boolean;\n\n  colorMap?: number[][];\n\n  width = 0;\n\n  height = 0;\n\n  spectrogramHeight = 0;\n\n  load = false;\n\n  intensityRangeY = [50, 100]; // y-axis/DB\n\n  pitchRangeY = [75, 500]; // y-axis/HZ\n\n  loadedAnalyseData = false;\n\n  isAmplitudeGeted = false;\n\n  constructor(params: AnalysePluginParams) {\n    this.params = params;\n    this.frequenciesData = [];\n    eventBus.on(EventAction.DRAW_ANALYSE, ({ start, end }: { start: number; end: number; }) => {\n      this.drawCanvas(start, end);\n    });\n  }\n\n  _onWrapperClick = (e: any) => {\n    this._wrapperClickHandler(e);\n  };\n\n  _onReady = () => {\n    const { container, colorMap, pixelRatio, fftSamples, noverlap, windowFunc, alpha } = this.params;\n    this.drawer = this.wavesurfer!.drawer;\n    this.container =\n              typeof container === 'string'\n                ? document.querySelector(container)\n                : container;\n\n    if (!this.container) {\n      throw Error('No container for Wave spectrogram');\n    }\n    if (colorMap) {\n      if (colorMap.length < 256) {\n        throw new Error('Colormap must contain 256 elements');\n      }\n      for (let i = 0; i < colorMap.length; i += 1) {\n        const cmEntry = colorMap[i];\n        if (cmEntry.length !== 4) {\n          throw new Error(\n            'ColorMap entries must contain 4 values'\n          );\n        }\n      }\n      this.colorMap = colorMap;\n    } else {\n      this.colorMap = [];\n      for (let i = 0; i < 256; i += 1) {\n        const val = (255 - i) / 256;\n        this.colorMap.push([val, val, val, 1]);\n      }\n    }\n    this.width = this.container.clientWidth;\n    this.height = this.params.height;\n    this.pixelRatio = pixelRatio || this.wavesurfer?.params.pixelRatio || 1;\n    this.fftSamples = fftSamples || 512;\n\n    this.noverlap = noverlap;\n    this.windowFunc = windowFunc;\n    this.alpha = alpha;\n    this.sampleRate = (this.wavesurfer?.backend as any).ac.sampleRate;\n\n    this.setBuffer();\n    this.createWrapper();\n    this.createCanvas();\n    this.updateCanvasStyle();\n  };\n\n  init(wave: Wave) {\n    this.wavesurfer = wave;\n    // Check if wavesurfer is ready\n    if (this.wavesurfer?.isReady) {\n      this._onReady();\n    } else {\n      this.wavesurfer?.on('ready', this._onReady);\n    }\n    this.wavesurfer?.on('draw', this._onRender);\n  }\n\n  _onRender = () => {\n    this.render();\n  };\n\n  setHeight(height: number) {\n    this.height = height;\n  };\n\n  destroy() {\n    this.wavesurfer?.un('ready', this._onReady);\n    if (this.wrapper) {\n      this.wrapper.removeEventListener('click', this._onWrapperClick);\n      this.wrapper.parentNode?.removeChild(this.wrapper);\n      this.wrapper = null;\n    }\n    if (this.canvas) {\n      this.canvas.removeEventListener('contextmenu', this.preventDefault);\n    }\n  }\n\n  createWrapper() {\n    const prevSpectrogram = this.container?.querySelector('spectrogram');\n    if (prevSpectrogram) {\n      this.container?.removeChild(prevSpectrogram);\n    }\n    this.wrapper = document.createElement('spectrogram');\n\n    setStyle(this.wrapper, {\n      display: 'block',\n      position: 'relative',\n      userSelect: 'none',\n      webkitUserSelect: 'none',\n      height: `${this.height}px`\n    });\n    this.container?.appendChild(this.wrapper);\n\n    this.wrapper.addEventListener('click', this._onWrapperClick);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _wrapperClickHandler(event: any) {\n    event.preventDefault();\n    const relX = 'offsetX' in event ? event.offsetX : event.layerX;\n  }\n\n  createCanvas() {\n    this.canvas = this.wrapper!.appendChild(\n      document.createElement('canvas')\n    );\n    this.canvas.addEventListener('contextmenu', this.preventDefault);\n    this.spectrCc = this.canvas.getContext('2d');\n    setStyle(this.canvas, {\n      position: 'absolute',\n      zIndex: '4'\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  preventDefault(e: MouseEvent) {\n    e.preventDefault();\n  }\n\n  render() {\n    if (this.peaks.length === 0) {\n      this.peaks = (this.wavesurfer?.mergedPeaks || []).map((v) => v || 0);\n    }\n    if (!this.isAmplitudeGeted && this.peaks.length) {\n      this.isAmplitudeGeted = true;\n      const max = Math.max(Math.abs(Math.min(...this.peaks)), Math.abs(Math.max(...this.peaks)));\n      rootStore.analyse.setAmplitudeRange({\n        min: -max,\n        max,\n      });\n      this.updateCanvasStyle();\n    }\n  }\n\n  updateCanvasStyle() {\n    if (this.container && this.height) {\n      this.width = this.container.clientWidth;\n      this.canvas!.width = this.width * this.pixelRatio;\n      this.canvas!.height = (this.spectrogramHeight || this.height) * this.pixelRatio;\n      this.canvas!.style.width = `${this.width}px`;\n      this.canvas!.style.height = `${this.height}px`;\n      if (this.wrapper) {\n        setStyle(this.wrapper, {\n          height: `${this.height}px`,\n        });\n      }\n    }\n  }\n\n  drawCanvas = (start: number, end: number) => {\n    const { placement: { duration }, threshold } = rootStore.analyse;\n    const displayDuration = (end - start) * duration;\n    if (displayDuration <= threshold) {\n      eventBus.emit(EventAction.ANALYSE_DRAW_START);\n      this.drawPraatAnalyse(start, end);\n    } else {\n      this.updateCanvasStyle();\n    }\n    eventBus.emit(EventAction.ANALYSE_DRAW_END);\n  };\n\n  drawPraatAnalyse(startPrecent: number, endPrecent: number) {\n    const len = Math.max(this.pitchData.length, this.intensityData.length, this.formantData.length);\n    const start = Math.floor(len * startPrecent);\n    const end = Math.floor(len * endPrecent);\n    const rateX = (this.width * this.pixelRatio) / (end - start);\n    const { visible } = rootStore.analyse;\n    if (visible.spectrogram) {\n      this.drawSpectrogram(startPrecent, endPrecent);\n    } else {\n      this.updateCanvasStyle();\n    }\n    if (visible.pitch) {\n      this.drawPitch(start, end, rateX);\n    }\n    if (visible.formant) {\n      this.drawFormant(start, end, rateX);\n    }\n    if (visible.intensity) {\n      this.drawIntensity(start, end, rateX);\n    }\n  }\n\n  drawPitch = (start: number, end: number, rateX: number) => {\n    if (this.pitchData.length > 0 && this.spectrCc) {\n      const pitchData = this.pitchData.slice(start, end);\n      this.spectrCc.lineWidth = this.pixelRatio;\n      this.spectrCc.strokeStyle = 'blue';\n      let linestart = true;\n      this.spectrCc.beginPath();\n      this.spectrCc.moveTo(0, 0);\n      const [startY, endY] = this.pitchRangeY;\n      const lenY = endY - startY;\n      for (let i = 0; i < pitchData.length; i += 1) {\n        const y = pitchData[i] ? (1 - (pitchData[i]! - startY) / lenY) * (this.spectrogramHeight || this.height) * this.pixelRatio : undefined;\n        this.spectrCc.strokeStyle = 'blue';\n        if (!y) {\n          linestart = true;\n          this.spectrCc.stroke();\n        } else if (linestart) {\n          this.spectrCc.beginPath();\n          this.spectrCc.moveTo(i * rateX, y);\n          linestart = false;\n        } else {\n          this.spectrCc.lineTo(i * rateX, y);\n        }\n      }\n      this.spectrCc.stroke();\n    }\n  };\n\n  drawIntensity(start: number, end: number, rateX: number) {\n    if (this.intensityData.length > 0 && this.spectrCc) {\n      const intensityData = this.intensityData.slice(start, end);\n      this.spectrCc.lineWidth = this.pixelRatio;\n      this.spectrCc.strokeStyle = 'yellow';\n      let linestart = true;\n      this.spectrCc.beginPath();\n      this.spectrCc.moveTo(0, 0);\n      const [startY, endY] = this.intensityRangeY;\n      const lenY = endY - startY;\n      for (let i = 0; i < intensityData.length; i += 1) {\n        const y = intensityData[i] ? (1 - (intensityData[i] - startY) / lenY) * (this.spectrogramHeight || this.height) * this.pixelRatio : undefined;\n        if (!y) {\n          linestart = true;\n          this.spectrCc.stroke();\n        } else if (linestart) {\n          this.spectrCc.beginPath();\n          this.spectrCc.moveTo(i * rateX, y);\n          linestart = false;\n        } else {\n          this.spectrCc.lineTo(i * rateX, y);\n        }\n      }\n      this.spectrCc.stroke();\n    }\n  }\n\n  drawFormant(start: number, end: number, rateX: number) {\n    if (this.formantData.length > 0 && this.spectrCc) {\n      const formantData = this.formantData.slice(start, end);\n      for (let i = 0; i < formantData.length; i += 1) {\n        const x = i * rateX;\n        for (let j = 0; j < formantData[i].length; j += 1) {\n          const formant = formantData[i][j];\n          const y = formant ? (1 - formant / (this.sampleRate! / 2)) * (this.spectrogramHeight || this.height) * this.pixelRatio : undefined;\n          if (y) {\n            this.spectrCc.beginPath();\n            this.spectrCc.arc(x, y, 2 * this.pixelRatio, 0, 360, false);\n            this.spectrCc.fillStyle = j % 2 === 0 ? 'red' : '#f79e9e';\n            this.spectrCc.fill();\n            this.spectrCc.closePath();\n          }\n        }\n      }\n      this.spectrCc.stroke();\n    }\n  }\n\n  setAnalyseData(pitchData: number[], intensityData: number[], formantData: number[][], frequencies: Uint8Array[]) {\n    this.pitchData = pitchData;\n    this.intensityData = intensityData;\n    this.formantData = formantData;\n    this.frequenciesData = frequencies;\n    this.spectrogramHeight = (isPowerOfTwo(frequencies[0].length) ? this.sampleRate! / 8000 : 1) * frequencies[0].length;\n    this.loadedAnalyseData = true;\n    this.emitLoaded();\n  }\n\n  emitLoaded() {\n    if (this.loadedAnalyseData) {\n      eventBus.emit(EventAction.FREQUENCIES_DRAW);\n    }\n  }\n\n  drawSpectrogram = (startPrecent: number, endPrecent: number) => {\n    const spectrCc = this.spectrCc;\n    const height = (this.spectrogramHeight || this.height) * this.pixelRatio;\n    const width = this.width * this.pixelRatio;\n    const start = Math.floor(this.frequenciesData.length * startPrecent);\n    const end = Math.floor(this.frequenciesData.length * endPrecent);\n    const frequenciesData = this.frequenciesData.slice(start, end);\n    if (spectrCc && frequenciesData.length) {\n      const { pixels, max } = this.resample(frequenciesData);\n      const heightFactor = this.buffer ? 2 / this.buffer.numberOfChannels : 1;\n      const imageData = spectrCc.createImageData(width, height);\n      for (let i = 0; i < pixels.length; i += 1) {\n        for (let j = 0; j < pixels[i].length; j += 1) {\n          const color = 255 - pixels[i][j];\n          /* eslint-disable max-depth */\n          for (let k = 0; k < heightFactor; k += 1) {\n            let y = height - j * heightFactor;\n            if (heightFactor === 2 && k === 1) {\n              y -= 1;\n            }\n            const redIndex = y * (width * 4) + i * 4;\n            imageData.data[redIndex] = color;\n            imageData.data[redIndex + 1] = color;\n            imageData.data[redIndex + 2] = color;\n            imageData.data[redIndex + 3] = pixels[i][j] * (pixels[i][j] / max) * 2;\n          }\n          /* eslint-enable max-depth */\n        }\n      }\n      this.updateCanvasStyle();\n      spectrCc.putImageData(imageData, 0, 0);\n    }\n  };\n\n  getCurrentfftSamples = (start: number, end: number) => {\n    let samples = Math.floor(this.fftSamples! * (end - start));\n    if (samples < 512 && samples >= 256) {\n      samples = 256;\n    } else if (samples < 256 && samples >= 128) {\n      samples = 128;\n    } else if (samples < 128 && samples >= 64) {\n      samples = 64;\n    } else if (samples < 64 && samples >= 32) {\n      samples = 32;\n    } else if (samples < 32 && samples >= 16) {\n      samples = 16;\n    } else if (samples < 16 && samples >= 8) {\n      samples = 8;\n    } else if (samples < 8 && samples >= 4) {\n      samples = 4;\n    } else if (samples < 4) {\n      samples = 2;\n    };\n    return samples;\n  };\n\n  setBuffer = () => {\n    const waveBuffer = (this.wavesurfer?.backend as any).buffer as AudioBuffer;\n    const buffers: AudioBuffer[] = [];\n    const { numberOfChannels, sampleRate, length } = waveBuffer;\n    if (numberOfChannels > 1) {\n      for (let i = 0; i < numberOfChannels; i += 1) {\n        const audioBuffer = new AudioBuffer({\n          numberOfChannels: 1,\n          sampleRate,\n          length,\n        });\n        audioBuffer.copyToChannel(waveBuffer.getChannelData(i), 0);\n        buffers.push(audioBuffer);\n      }\n      const crunker = new Crunker({ sampleRate });\n      this.buffer = crunker.mergeAudio(buffers);\n    } else {\n      this.buffer = waveBuffer;\n    }\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  freqType(freq: number) {\n    return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  unitType(freq: number) {\n    return freq >= 1000 ? 'KHz' : 'Hz';\n  }\n\n  resample(oldMatrix: Uint8Array[]) {\n    const columnsNumber = this.width * this.pixelRatio;\n    const newMatrix = [];\n    let max = 0;\n    const oldPiece = 1 / oldMatrix.length;\n    const newPiece = 1 / columnsNumber;\n    for (let i = 0; i < columnsNumber; i += 1) {\n      const column = new Array(oldMatrix[0].length);\n      for (let j = 0; j < oldMatrix.length; j += 1) {\n        const oldStart = j * oldPiece;\n        const oldEnd = oldStart + oldPiece;\n        const newStart = i * newPiece;\n        const newEnd = newStart + newPiece;\n\n        const overlap =\n          oldEnd <= newStart || newEnd <= oldStart\n            ? 0\n            : Math.min(\n              Math.max(oldEnd, newStart),\n              Math.max(newEnd, oldStart)\n            ) -\n              Math.max(\n                Math.min(oldEnd, newStart),\n                Math.min(newEnd, oldStart)\n              );\n        let k;\n        /* eslint-disable max-depth */\n        if (overlap > 0) {\n          for (k = 0; k < oldMatrix[0].length; k += 1) {\n            if (column[k] === undefined) {\n              column[k] = 0;\n            }\n            column[k] += (overlap / newPiece) * oldMatrix[j][k];\n          }\n        }\n        /* eslint-enable max-depth */\n      }\n\n      const intColumn = new Uint8Array(oldMatrix[0].length);\n      for (let m = 0; m < oldMatrix[0].length; m += 1) {\n        intColumn[m] = column[m];\n      }\n      max = Math.max(max, ...column);\n      newMatrix.push(intColumn);\n    }\n\n    return { pixels: newMatrix, max };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}