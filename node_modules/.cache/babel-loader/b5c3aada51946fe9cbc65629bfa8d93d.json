{"ast":null,"code":"import _initializerDefineProperty from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\nvar _class, _descriptor, _descriptor2, _descriptor3;\nimport { observable, action, toJS, makeObservable } from 'mobx';\nimport UndoStore from './UndoStore';\n\n/**\n * relationships store\n */\nlet RelationshipsStore = (_class = class RelationshipsStore {\n  constructor() {\n    /**\n     * relationship configuration\n     */\n    _initializerDefineProperty(this, \"relationships\", _descriptor, this);\n    /**\n     * all relationships\n     */\n    _initializerDefineProperty(this, \"frameRelationships\", _descriptor2, this);\n    /**\n    * temp relationship\n    */\n    _initializerDefineProperty(this, \"tempRelationship\", _descriptor3, this);\n    makeObservable(this);\n  }\n\n  /**\n   * init data\n   * @param frameCount\n   * @param config\n   */\n  init(frameCount, config) {\n    // init frame relationships\n    this.frameRelationships = Array.from({\n      length: frameCount\n    }).map(() => []);\n    // init configuration\n    if (config) {\n      const relationSet = new Set(config.split(',').map(i => i.trim()).filter(i => !!i));\n      if (relationSet.size > 0) {\n        this.relationships = Array.from(relationSet);\n      }\n    }\n  }\n\n  /**\n   * set initial frame relationships\n   * @param data\n   */\n  setInitialData(data, instances) {\n    const dataMap = {};\n    if (data && Array.isArray(data)) {\n      data.forEach(dataItem => {\n        const {\n          frameIndex,\n          items\n        } = dataItem || {};\n        if (frameIndex !== undefined && Array.isArray(items)) {\n          dataMap[frameIndex] = [];\n          items.forEach(item => {\n            const {\n              from,\n              to,\n              relation\n            } = item || {};\n            if (relation && instances[from] && instances[from].frames[frameIndex] && instances[to] && instances[to].frames[frameIndex]) {\n              dataMap[frameIndex].push({\n                from,\n                to,\n                relation\n              });\n            }\n          });\n        }\n      });\n    }\n    for (let i = 0; i < this.frameRelationships.length; i += 1) {\n      this.frameRelationships[i] = dataMap[i] || [];\n    }\n  }\n\n  /**\n   * is temp relationship has value\n   * @returns\n   */\n  isTempRelationshipActive() {\n    return !!this.tempRelationship;\n  }\n\n  /**\n   * get relationships configuration\n   * @returns\n   */\n  getConfig() {\n    return toJS(this.relationships);\n  }\n\n  /**\n   * get relationship by frame, from, to, relation\n   * @param frame\n   * @param from\n   * @param to\n   * @param relation\n   * @returns\n   */\n  getRelationship(frame, from, to, relation) {\n    return toJS(this.frameRelationships[frame]).find(r => r.from === from && r.to === to && r.relation === relation);\n  }\n\n  /**\n   * get relationships from frame\n   * @param frame\n   */\n  getRelationships(frame) {\n    return toJS(this.frameRelationships[frame]);\n  }\n\n  /**\n   * get relationships for save\n   */\n  getRelationshipsForSave() {\n    return toJS(this.frameRelationships).map((items, frameIndex) => ({\n      frameIndex,\n      items\n    })).filter(i => i.items.length > 0);\n  }\n\n  /**\n   * reset temp relationship to null\n   */\n  resetTempRelationship() {\n    this.tempRelationship = null;\n  }\n\n  /**\n   * set temp relationship\n   * @param from\n   * @param relation\n   */\n  setTempRelationship(from, relation) {\n    if (this.relationships && from) {\n      this.tempRelationship = {\n        from,\n        relation\n      };\n    }\n  }\n\n  /**\n   * add relationship to frame relationships\n   * @param to\n   * @param frame\n   */\n  addRelationship(to, frame) {\n    if (this.relationships && this.tempRelationship && to) {\n      const frameRelations = this.frameRelationships[frame];\n      const newRelation = {\n        ...this.tempRelationship,\n        to\n      };\n      this.resetTempRelationship();\n      if (this.getRelationship(frame, newRelation.from, newRelation.to, newRelation.relation)) {\n        throw new Error('Relationship already exists.');\n      } else {\n        const storeId = UndoStore.preserve({\n          relationships: this.getRelationshipsForSave()\n        });\n        frameRelations.push(newRelation);\n        UndoStore.save(storeId, {\n          relationships: this.getRelationshipsForSave()\n        });\n      }\n    }\n  }\n\n  /**\n   *\n   * @param relationship\n   * @param frames\n   */\n  addRelationshipToFrames(relationship, frames) {\n    if (this.relationships) {\n      const storeId = UndoStore.preserve({\n        relationships: this.getRelationshipsForSave()\n      });\n      frames.forEach(frame => {\n        this.frameRelationships[frame].push({\n          from: relationship.from,\n          to: relationship.to,\n          relation: relationship.relation\n        });\n      });\n      UndoStore.save(storeId, {\n        relationships: this.getRelationshipsForSave()\n      });\n    }\n  }\n\n  /**\n   * delete relationship\n   * @param relationship\n   * @param frame\n   */\n  deleteRelationship(relationship, frame) {\n    if (this.relationships) {\n      const frameRelations = this.frameRelationships[frame];\n      const index = frameRelations.findIndex(r => r.from === relationship.from && r.to === relationship.to && r.relation === relationship.relation);\n      if (index >= 0) {\n        const storeId = UndoStore.preserve({\n          relationships: this.getRelationshipsForSave()\n        });\n        frameRelations.splice(index, 1);\n        UndoStore.save(storeId, {\n          relationships: this.getRelationshipsForSave()\n        });\n      }\n    }\n  }\n\n  /**\n   * delete relationship from frame\n   * @param instanceId\n   * @param frame\n   */\n  deleteRelationshipByInstance(instanceId, frame) {\n    if (this.relationships && instanceId) {\n      const frameRelations = this.frameRelationships[frame];\n      const newFrameRelations = [];\n      for (let i = 0; i < frameRelations.length; i += 1) {\n        const relation = frameRelations[i];\n        if (relation.from !== instanceId && relation.to !== instanceId) {\n          newFrameRelations.push(relation);\n        }\n      }\n      this.frameRelationships[frame] = newFrameRelations;\n    }\n  }\n\n  /**\n   * switch instance id\n   * @param originId\n   * @param newId\n   * @param frame\n   */\n  switchRelationshipInstance(originId, newId, frame) {\n    if (this.relationships) {\n      const frameRelations = this.frameRelationships[frame];\n      const newFrameRelations = [];\n      for (let i = 0; i < frameRelations.length; i += 1) {\n        const relation = frameRelations[i];\n        if (relation.from === originId) {\n          relation.from = newId;\n        }\n        if (relation.to === originId) {\n          relation.to = newId;\n        }\n        if (relation.from !== relation.to) {\n          newFrameRelations.push(relation);\n        }\n      }\n      this.frameRelationships[frame] = newFrameRelations;\n    }\n  }\n}, _descriptor = _applyDecoratedDescriptor(_class.prototype, \"relationships\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"frameRelationships\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"tempRelationship\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"init\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"init\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setInitialData\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setInitialData\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"resetTempRelationship\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"resetTempRelationship\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setTempRelationship\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setTempRelationship\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addRelationship\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addRelationship\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addRelationshipToFrames\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addRelationshipToFrames\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"deleteRelationship\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"deleteRelationship\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"deleteRelationshipByInstance\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"deleteRelationshipByInstance\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"switchRelationshipInstance\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"switchRelationshipInstance\"), _class.prototype), _class);\nexport default new RelationshipsStore();","map":{"version":3,"names":["observable","action","toJS","makeObservable","UndoStore","RelationshipsStore","_class","constructor","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","init","frameCount","config","frameRelationships","Array","from","length","map","relationSet","Set","split","i","trim","filter","size","relationships","setInitialData","data","instances","dataMap","isArray","forEach","dataItem","frameIndex","items","undefined","item","to","relation","frames","push","isTempRelationshipActive","tempRelationship","getConfig","getRelationship","frame","find","r","getRelationships","getRelationshipsForSave","resetTempRelationship","setTempRelationship","addRelationship","frameRelations","newRelation","Error","storeId","preserve","save","addRelationshipToFrames","relationship","deleteRelationship","index","findIndex","splice","deleteRelationshipByInstance","instanceId","newFrameRelations","switchRelationshipInstance","originId","newId","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","Object","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking/store/RelationshipsStore.ts"],"sourcesContent":["import { observable, action, toJS, makeObservable } from 'mobx';\nimport { Relationship, Instance } from '../types';\nimport UndoStore from './UndoStore';\n\n/**\n * relationships store\n */\nclass RelationshipsStore {\n  /**\n   * relationship configuration\n   */\n  @observable relationships: string[] | null = null;\n\n  /**\n   * all relationships\n   */\n  @observable frameRelationships: Relationship[][] = [];\n\n  /**\n  * temp relationship\n  */\n  @observable tempRelationship: { from: string; relation: string } | null = null;\n\n  constructor() {\n    makeObservable(this);\n  }\n\n  /**\n   * init data\n   * @param frameCount\n   * @param config\n   */\n  @action\n  init(frameCount: number, config?: string) {\n    // init frame relationships\n    this.frameRelationships = Array.from({ length: frameCount }).map(() => []);\n    // init configuration\n    if (config) {\n      const relationSet = new Set((config).split(',').map((i) => i.trim()).filter((i) => !!i));\n      if (relationSet.size > 0) {\n        this.relationships = Array.from(relationSet);\n      }\n    }\n  }\n\n  /**\n   * set initial frame relationships\n   * @param data\n   */\n  @action\n  setInitialData(data: any, instances: {[instanceId: string]: Instance}) {\n    const dataMap: {[frameIndex: number]: Relationship[]} = {};\n    if (data && Array.isArray(data)) {\n      data.forEach((dataItem: any) => {\n        const { frameIndex, items } = dataItem || {};\n        if (frameIndex !== undefined && Array.isArray(items)) {\n          dataMap[frameIndex] = [];\n          items.forEach((item: any) => {\n            const { from, to, relation } = item || {};\n            if (relation && instances[from] && instances[from].frames[frameIndex] && instances[to] && instances[to].frames[frameIndex]) {\n              dataMap[frameIndex].push({ from, to, relation });\n            }\n          });\n        }\n      });\n    }\n    for (let i = 0; i < this.frameRelationships.length; i += 1) {\n      this.frameRelationships[i] = dataMap[i] || [];\n    }\n  }\n\n  /**\n   * is temp relationship has value\n   * @returns\n   */\n  isTempRelationshipActive() {\n    return !!this.tempRelationship;\n  }\n\n  /**\n   * get relationships configuration\n   * @returns\n   */\n  getConfig() {\n    return toJS(this.relationships);\n  }\n\n  /**\n   * get relationship by frame, from, to, relation\n   * @param frame\n   * @param from\n   * @param to\n   * @param relation\n   * @returns\n   */\n  getRelationship(frame: number, from: string, to: string, relation: string) {\n    return toJS(this.frameRelationships[frame]).find((r) => r.from === from && r.to === to && r.relation === relation);\n  }\n\n  /**\n   * get relationships from frame\n   * @param frame\n   */\n  getRelationships(frame: number) {\n    return toJS(this.frameRelationships[frame]);\n  }\n\n  /**\n   * get relationships for save\n   */\n  getRelationshipsForSave() {\n    return toJS(this.frameRelationships)\n      .map((items, frameIndex) => ({ frameIndex, items }))\n      .filter((i) => i.items.length > 0);\n  }\n\n  /**\n   * reset temp relationship to null\n   */\n  @action\n  resetTempRelationship() {\n    this.tempRelationship = null;\n  }\n\n  /**\n   * set temp relationship\n   * @param from\n   * @param relation\n   */\n  @action\n  setTempRelationship(from: string, relation: string) {\n    if (this.relationships && from) {\n      this.tempRelationship = { from, relation };\n    }\n  }\n\n  /**\n   * add relationship to frame relationships\n   * @param to\n   * @param frame\n   */\n  @action\n  addRelationship(to: string, frame: number) {\n    if (this.relationships && this.tempRelationship && to) {\n      const frameRelations = this.frameRelationships[frame];\n      const newRelation = { ...this.tempRelationship, to };\n      this.resetTempRelationship();\n      if (this.getRelationship(frame, newRelation.from, newRelation.to, newRelation.relation)) {\n        throw new Error('Relationship already exists.');\n      } else {\n        const storeId = UndoStore.preserve({\n          relationships: this.getRelationshipsForSave(),\n        });\n        frameRelations.push(newRelation);\n        UndoStore.save(storeId, {\n          relationships: this.getRelationshipsForSave(),\n        });\n      }\n    }\n  }\n\n  /**\n   *\n   * @param relationship\n   * @param frames\n   */\n  @action\n  addRelationshipToFrames(relationship: Relationship, frames: number[]) {\n    if (this.relationships) {\n      const storeId = UndoStore.preserve({\n        relationships: this.getRelationshipsForSave(),\n      });\n      frames.forEach((frame) => {\n        this.frameRelationships[frame].push({\n          from: relationship.from,\n          to: relationship.to,\n          relation: relationship.relation,\n        });\n      });\n      UndoStore.save(storeId, {\n        relationships: this.getRelationshipsForSave(),\n      });\n    }\n  }\n\n  /**\n   * delete relationship\n   * @param relationship\n   * @param frame\n   */\n  @action\n  deleteRelationship(relationship: Relationship, frame: number) {\n    if (this.relationships) {\n      const frameRelations = this.frameRelationships[frame];\n      const index = frameRelations.findIndex((r) => r.from === relationship.from && r.to === relationship.to && r.relation === relationship.relation);\n      if (index >= 0) {\n        const storeId = UndoStore.preserve({\n          relationships: this.getRelationshipsForSave(),\n        });\n        frameRelations.splice(index, 1);\n        UndoStore.save(storeId, {\n          relationships: this.getRelationshipsForSave(),\n        });\n      }\n    }\n  }\n\n  /**\n   * delete relationship from frame\n   * @param instanceId\n   * @param frame\n   */\n  @action\n  deleteRelationshipByInstance(instanceId: string, frame: number) {\n    if (this.relationships && instanceId) {\n      const frameRelations = this.frameRelationships[frame];\n      const newFrameRelations = [];\n      for (let i = 0; i < frameRelations.length; i += 1) {\n        const relation = frameRelations[i];\n        if (relation.from !== instanceId && relation.to !== instanceId) {\n          newFrameRelations.push(relation);\n        }\n      }\n      this.frameRelationships[frame] = newFrameRelations;\n    }\n  }\n\n  /**\n   * switch instance id\n   * @param originId\n   * @param newId\n   * @param frame\n   */\n  @action\n  switchRelationshipInstance(originId: string, newId: string, frame: number) {\n    if (this.relationships) {\n      const frameRelations = this.frameRelationships[frame];\n      const newFrameRelations = [];\n      for (let i = 0; i < frameRelations.length; i += 1) {\n        const relation = frameRelations[i];\n        if (relation.from === originId) {\n          relation.from = newId;\n        }\n        if (relation.to === originId) {\n          relation.to = newId;\n        }\n        if (relation.from !== relation.to) {\n          newFrameRelations.push(relation);\n        }\n      }\n      this.frameRelationships[frame] = newFrameRelations;\n    }\n  }\n}\n\nexport default new RelationshipsStore();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}