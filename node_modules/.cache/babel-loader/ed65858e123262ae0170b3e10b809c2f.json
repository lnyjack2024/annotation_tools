{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\nimport UndoStore from './UndoStore';\n/**\n * frame attributes store\n */\nclass FramesStore {\n  /**\n    * invalid frame indexes in summary\n    * @getter\n    */\n  get invalidFrames() {\n    const invalidFrames = new Set();\n    Object.keys(this.attributes).forEach(frameIndexStr => {\n      const frameIndex = Number(frameIndexStr);\n      if (this.attributes[frameIndex].valid === false) {\n        invalidFrames.add(frameIndex);\n      }\n    });\n    return Array.from(invalidFrames);\n  }\n  constructor() {\n    /**\n     * frame count\n     */\n    this.frameCount = 0;\n    /**\n     * frame attributes\n     */\n    this.attributes = {};\n    makeAutoObservable(this, {\n      frameCount: false\n    }, {\n      autoBind: true\n    });\n  }\n\n  /**\n   * init store\n   * @param frameCount\n   * @param initialAttributes\n   */\n  init(frameCount) {\n    this.frameCount = frameCount;\n  }\n\n  /**\n   * init attributes\n   * @param initialAttributes\n   */\n  setInitialData(initialAttributes) {\n    if (Array.isArray(initialAttributes)) {\n      const attributes = {};\n      initialAttributes.forEach((attr, frameIndex) => {\n        const {\n          valid\n        } = attr || {};\n        attributes[frameIndex] = {\n          frameIndex,\n          valid: valid !== false\n        };\n      });\n      this.attributes = attributes;\n    }\n  }\n\n  /**\n   * is frame valid\n   * @param frameIndex\n   */\n  isFrameValid(frameIndex) {\n    var _this$attributes$fram;\n    return ((_this$attributes$fram = this.attributes[frameIndex]) === null || _this$attributes$fram === void 0 ? void 0 : _this$attributes$fram.valid) !== false;\n  }\n\n  /**\n   * set frame valid\n   * @param frameIndex\n   * @param valid\n   */\n  setFrameValid(frameIndex, valid) {\n    const originFrameAttr = this.attributes[frameIndex];\n    const storeId = UndoStore.preserve({\n      frames: originFrameAttr ? [toJS(originFrameAttr)] : []\n    });\n    this.attributes[frameIndex] = {\n      frameIndex,\n      valid\n    };\n    UndoStore.save(storeId, {\n      frames: [toJS(this.attributes[frameIndex])]\n    });\n  }\n\n  /**\n   * get frames for save\n   */\n  getFramesForSave() {\n    return Array.from({\n      length: this.frameCount\n    }).map((_, frameIndex) => {\n      const frameAttr = this.attributes[frameIndex];\n      const valid = !frameAttr || frameAttr.valid === true;\n      return {\n        frameIndex,\n        valid\n      };\n    });\n  }\n}\nexport default new FramesStore();","map":{"version":3,"names":["makeAutoObservable","toJS","UndoStore","FramesStore","invalidFrames","Set","Object","keys","attributes","forEach","frameIndexStr","frameIndex","Number","valid","add","Array","from","constructor","frameCount","autoBind","init","setInitialData","initialAttributes","isArray","attr","isFrameValid","_this$attributes$fram","setFrameValid","originFrameAttr","storeId","preserve","frames","save","getFramesForSave","length","map","_","frameAttr"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking/store/FramesStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport UndoStore from './UndoStore';\nimport { FrameAttribute } from '../types';\n\n/**\n * frame attributes store\n */\nclass FramesStore {\n  /**\n   * frame count\n   */\n  frameCount = 0;\n\n  /**\n   * frame attributes\n   */\n  attributes: { [frameIndex: number]: FrameAttribute } = {};\n\n  /**\n    * invalid frame indexes in summary\n    * @getter\n    */\n  get invalidFrames() {\n    const invalidFrames = new Set<number>();\n    Object.keys(this.attributes).forEach((frameIndexStr) => {\n      const frameIndex = Number(frameIndexStr);\n      if (this.attributes[frameIndex].valid === false) {\n        invalidFrames.add(frameIndex);\n      }\n    });\n    return Array.from(invalidFrames);\n  }\n\n  constructor() {\n    makeAutoObservable(this, {\n      frameCount: false,\n    }, {\n      autoBind: true,\n    });\n  }\n\n  /**\n   * init store\n   * @param frameCount\n   * @param initialAttributes\n   */\n  init(frameCount: number) {\n    this.frameCount = frameCount;\n  }\n\n  /**\n   * init attributes\n   * @param initialAttributes\n   */\n  setInitialData(initialAttributes: any) {\n    if (Array.isArray(initialAttributes)) {\n      const attributes: { [frameIndex: number]: FrameAttribute } = {};\n      initialAttributes.forEach((attr, frameIndex) => {\n        const { valid } = attr || {};\n        attributes[frameIndex] = {\n          frameIndex,\n          valid: valid !== false,\n        };\n      });\n      this.attributes = attributes;\n    }\n  }\n\n  /**\n   * is frame valid\n   * @param frameIndex\n   */\n  isFrameValid(frameIndex: number) {\n    return this.attributes[frameIndex]?.valid !== false;\n  }\n\n  /**\n   * set frame valid\n   * @param frameIndex\n   * @param valid\n   */\n  setFrameValid(frameIndex: number, valid: boolean) {\n    const originFrameAttr = this.attributes[frameIndex];\n    const storeId = UndoStore.preserve({\n      frames: originFrameAttr ? [toJS(originFrameAttr)] : [],\n    });\n    this.attributes[frameIndex] = { frameIndex, valid };\n    UndoStore.save(storeId, {\n      frames: [toJS(this.attributes[frameIndex])],\n    });\n  }\n\n  /**\n   * get frames for save\n   */\n  getFramesForSave(): FrameAttribute[] {\n    return Array.from({ length: this.frameCount }).map((_, frameIndex) => {\n      const frameAttr = this.attributes[frameIndex];\n      const valid = !frameAttr || frameAttr.valid === true;\n      return { frameIndex, valid };\n    });\n  }\n}\n\nexport default new FramesStore();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}