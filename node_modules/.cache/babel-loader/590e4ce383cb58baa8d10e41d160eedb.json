{"ast":null,"code":"import{makeAutoObservable}from'mobx';import Instance from'../model/Instance';import InstanceItem from'../model/InstanceItem';import{getNextKeyFrames,preciseShapeByType}from'../utils';/**\n * store for instances\n * @class\n */export default class InstanceStore{/**\n   * category instances map\n   * @getter\n   */get categoryInstancesMap(){const map={};Object.values(this.instances).forEach(instance=>{if(!map[instance.category]){map[instance.category]=[];}map[instance.category].push(instance);});this.rootStore.ontology.categories.forEach(_ref=>{let{className}=_ref;if(!map[className]){map[className]=[];}else{map[className].sort((a,b)=>a.number-b.number);}});return map;}/**\n   * all instances sorted by timeline\n   * @getter\n   */get allInstances(){const{categories}=this.rootStore.ontology;return Object.values(this.instances).sort((a,b)=>{const instanceAFirstFrame=Number(Object.keys(a.frameStatus)[0]);const instanceBFirstFrame=Number(Object.keys(b.frameStatus)[0]);if(instanceAFirstFrame>instanceBFirstFrame){return 1;}if(instanceAFirstFrame<instanceBFirstFrame){return-1;}const instanceACategoryIndex=categories.findIndex(c=>c.className===a.category);const instanceBCategoryIndex=categories.findIndex(c=>c.className===b.category);if(instanceACategoryIndex>instanceBCategoryIndex){return 1;}if(instanceACategoryIndex<instanceBCategoryIndex){return-1;}return a.number>b.number?1:-1;});}/**\n   * multiple instance item selected\n   * @getter\n   */get isMultiSelected(){return this.selectedInstances.length>1||this.selectedInstanceItems.length>1;}/**\n   * single instance item selected\n   */get isSingleSelected(){return this.selectedInstances.length===1&&this.selectedInstanceItems.length===1;}/**\n   * does selected instance has label config to set attributes\n   * @getter\n   */get selectedInstanceAttributesEnabled(){if(this.isMultiSelected||this.selectedInstances.length<=0){return false;}const selectedInstance=this.selectedInstances[0];const selectedInstanceItem=this.selectedInstanceItems.length===1?this.selectedInstanceItems[0]:undefined;return this.isAttributesEnabled(selectedInstance,selectedInstanceItem);}constructor(rootStore){var _this=this;/**\n   * root store\n   */this.rootStore=void 0;/**\n   * all instances\n   */this.instances={};/**\n   * selected instances\n   */this.selectedInstances=[];/**\n   * selected instance items\n   */this.selectedInstanceItems=[];/**\n   * delete frames from instance item\n   * @param instanceItem\n   * @param frames\n   * @param camera\n   */this.deleteFramesFromInstanceItem=function(instanceItem,frames){let camera=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_this.rootStore.frame.currentCamera;const{currentCamera,currentFrame}=_this.rootStore.frame;const prevBasicInfo=instanceItem.instance.getBasicInfo();if(camera===currentCamera&&frames.includes(currentFrame)){// remove shape\n_this.rootStore.shape.deleteShapeByInstanceItem(instanceItem);}const{prevState,currState}=instanceItem.remove(camera,frames);const basicInfo=instanceItem.instance.getBasicInfo();_this.rootStore.undo.push({instances:prevState?[{...prevBasicInfo,children:[prevState]}]:[]},{instances:currState?[{...basicInfo,children:[currState]}]:[]});if(instanceItem.isEmpty){_this.deleteInstanceItem(instanceItem);}if(instanceItem.instance.isEmpty){_this.deleteInstance(instanceItem.instance);}};/**\n   * delete frames from instance items\n   * @param instanceItems\n   */this.deleteFramesFromInstanceItems=instanceItems=>{const{currentCamera,currentFrame}=this.rootStore.frame;const prevInstanceMap={};const currInstanceMap={};for(let i=0;i<instanceItems.length;i+=1){const{instanceItem,frames,camera=currentCamera}=instanceItems[i];const{instance}=instanceItem;const{id:instanceId}=instance;if(camera===currentCamera&&frames.includes(currentFrame)){// remove shape\nthis.rootStore.shape.deleteShapeByInstanceItem(instanceItem);}const prevInstanceBasicInfo=instance.getBasicInfo();const{prevState,currState}=instanceItem.remove(camera,frames);if(prevState){if(!prevInstanceMap[instanceId]){prevInstanceMap[instanceId]={...prevInstanceBasicInfo,children:[]};}prevInstanceMap[instanceId].children.push(prevState);}if(currState){if(!currInstanceMap[instanceId]){currInstanceMap[instanceId]={...instance.getBasicInfo(),children:[]};}currInstanceMap[instanceId].children.push(currState);}if(instanceItem.isEmpty){this.deleteInstanceItem(instanceItem);}if(instance.isEmpty){this.deleteInstance(instance);}}this.rootStore.undo.push({instances:Object.values(prevInstanceMap)},{instances:Object.values(currInstanceMap)});};this.deleteInstanceItemByFrame=function(instanceItem,frame){let camera=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_this.rootStore.frame.currentCamera;const{currentCamera,currentFrame}=_this.rootStore.frame;const prevInstanceBasicInfo=instanceItem.instance.getBasicInfo();if(camera===currentCamera&&frame===currentFrame){// remove shape\n_this.rootStore.shape.deleteShapeByInstanceItem(instanceItem);}const{prevState,currState}=instanceItem.remove(camera,[frame]);if(instanceItem.isEmpty){_this.deleteInstanceItem(instanceItem);}if(instanceItem.instance.isEmpty){_this.deleteInstance(instanceItem.instance);}return{prevState:{instances:prevState?[{...prevInstanceBasicInfo,children:[prevState]}]:[]},currState:{instances:currState?[{...instanceItem.instance.getBasicInfo(),children:[currState]}]:[]}};};/**\n   * delete frames from instance item by type\n   * @param instanceItem\n   * @param type\n   * @param camera\n   */this.deleteFramesFromInstanceItemByType=function(instanceItem){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'current';let camera=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_this.rootStore.frame.currentCamera;const{currentFrame}=_this.rootStore.frame;switch(type){case'current':_this.deleteFramesFromInstanceItem(instanceItem,[currentFrame]);break;case'key':{const nextKeyFrames=getNextKeyFrames(1,currentFrame,instanceItem.cameras[camera].frames);const nextKeyFrame=nextKeyFrames[0];if(nextKeyFrame){_this.deleteFramesFromInstanceItem(instanceItem,Array.from({length:nextKeyFrame-currentFrame}).map((_,index)=>currentFrame+index));}break;}case'following':{const allFrames=Object.keys(instanceItem.cameras[camera].frames).map(f=>parseInt(f,10));const index=allFrames.indexOf(currentFrame);_this.deleteFramesFromInstanceItem(instanceItem,allFrames.slice(index,allFrames.length));break;}case'all':{const allFrames=Object.keys(instanceItem.cameras[camera].frames).map(f=>parseInt(f,10));_this.deleteFramesFromInstanceItem(instanceItem,allFrames);break;}default:}};makeAutoObservable(this,{rootStore:false},{autoBind:true});this.rootStore=rootStore;}/**\n   * init instances\n   * @param instances\n   */async init(instances){const{getCategory}=this.rootStore.ontology;const{cameraNames,updateNextShapeOrder}=this.rootStore.frame;const categoryNumbers={};const numberDuplicatedInstances=[];instances.forEach(instance=>{const category=getCategory(instance.category);if(category){instance.children.forEach(instanceItem=>{const categoryItem=category.children.find(c=>c.name===instanceItem.name);if(categoryItem){instanceItem.cameras.forEach(cameraData=>{if(cameraNames.includes(cameraData.camera)){cameraData.frames.forEach(frameData=>{// fix shape data precision\npreciseShapeByType(frameData.shapeType,frameData.shape);// update next shape order\nif(typeof frameData.order==='number'&&frameData.order>=0){updateNextShapeOrder(frameData.order,frameData.frameIndex,cameraData.camera);}});}else{cameraData.frames=[];}});instanceItem.cameras=instanceItem.cameras.filter(c=>c.frames.length>0);// remove invalid camera data\n}else{instanceItem.cameras=[];}});instance.children=instance.children.filter(i=>i.cameras.length>0);// remove invalid instance item data\nif(instance.children.length>0){if(!categoryNumbers[category.className]){categoryNumbers[category.className]=[];}const checkNumbers=categoryNumbers[category.className];if(this.rootStore.annotatable&&checkNumbers.indexOf(instance.number)>=0){// number already exists, fix number later\nnumberDuplicatedInstances.push(instance);}else{categoryNumbers[category.className].push(instance.number);this.createInstanceFromData(instance);}}}});numberDuplicatedInstances.forEach(instance=>{const number=this.rootStore.instance.getNextInstanceNumber(instance.category);instance.number=number;this.createInstanceFromData(instance);});}/**\n   * create instance from structured instance data\n   * @param instance\n   */createInstanceFromData(instance){const category=this.rootStore.ontology.getCategory(instance.category);if(category){const newInstance=new Instance({id:instance.id,categoryRef:category,number:instance.number,attributes:instance.attributes,dynamicAttributes:instance.dynamicAttributes,items:instance.children,getNextShapeOrder:this.rootStore.frame.getNextShapeOrder});this.instances[newInstance.id]=newInstance;}}/**\n   * is instance dynamic attributes enable\n   * @param instance\n   */ // eslint-disable-next-line class-methods-use-this\nisInstanceDynamicAttributesEnabled(instance){// selected instance has label config setting\nreturn!!instance.categoryRef.labelConfigDynamic;}/**\n   * is instance item attributes enabled\n   * @param instanceItem\n   */isInstanceItemAttributesEnabled(instanceItem){const{currentCamera,currentFrame}=this.rootStore.frame;const cameraData=instanceItem.cameras[currentCamera];if(cameraData){const frameData=cameraData.frames[currentFrame];if(frameData){if(instanceItem.categoryItemRef.labelConfig){// instance item has label config setting\nreturn true;}}}return false;}/**\n   * is instance & instance item attributes enabled\n   * @param instance\n   * @param instanceItem\n   */isAttributesEnabled(instance,instanceItem){const instanceDynamicAttributesEnabled=this.isInstanceDynamicAttributesEnabled(instance);if(instanceDynamicAttributesEnabled){return true;}if(instanceItem){return this.isInstanceItemAttributesEnabled(instanceItem);}return Object.values(instance.items).some(item=>this.isInstanceItemAttributesEnabled(item));}/**\n   * get instance by id\n   * @param instanceId\n   */getInstanceById(instanceId){return this.instances[instanceId];}/**\n   * get next instance number\n   * @param categoryName\n   */getNextInstanceNumber(categoryName){const categoryInstanceNumbers=(this.categoryInstancesMap[categoryName]||[]).map(i=>i.number);return Math.max(...categoryInstanceNumbers,0)+1;}/**\n   * get next instance item number\n   * @param instanceId\n   * @param categoryItemName\n   * @param camera\n   */getNextInstanceItemNumber(instanceId,categoryItemName){let camera=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.rootStore.frame.currentCamera;const instance=this.instances[instanceId];const items=Object.values(instance.items).filter(i=>i.name===categoryItemName);const itemsInCamera=items.filter(i=>{const cameraData=i.cameras[camera];return cameraData&&!cameraData.isEmpty;});const itemNumbers=itemsInCamera.map(i=>i.number);return Math.max(...itemNumbers,0)+1;}/**\n   * update selected instance\n   * @param instance\n   */updateSelectedInstance(instance){const instances=Array.isArray(instance)?instance:[instance];this.selectedInstances.forEach(i=>{if(instances.indexOf(i)<0){i.setSelected(false);}});this.selectedInstances=[...instances];this.selectedInstances.forEach(i=>{i.setSelected(true);});}/**\n   * update selected instance item\n   * @param instanceItem\n   */updateSelectedInstanceItem(instanceItem){const instanceItems=Array.isArray(instanceItem)?instanceItem:[instanceItem];this.selectedInstanceItems.forEach(i=>{if(instanceItems.indexOf(i)<0){i.setSelected(false);}});this.selectedInstanceItems=[...instanceItems];this.selectedInstanceItems.forEach(i=>{i.setSelected(true);});}/**\n   * select instance\n   * @param instance\n   * @param autoFocus\n   */selectInstance(instance){let autoFocus=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const instances=Array.isArray(instance)?instance:[...(instance?[instance]:[])];this.updateSelectedInstance(instances);if(instances.length>0){// select category if needed\nconst allCategories=instances.map(i=>i.category);if(allCategories.indexOf(this.rootStore.ontology.selectedCategoryName)<0){this.rootStore.ontology.selectCategory(allCategories[0]);}// filter selected instance item\nconst instanceItems=this.selectedInstanceItems.filter(i=>instances.indexOf(i.instance)>=0);// if the instance is single, default select first instance item\nif(this.rootStore.frame.isSingleCamera){instances.forEach(i=>{if(i.isSingle&&Object.keys(i.items).length>0){const item=Object.values(i.items)[0];if(instanceItems.indexOf(item)<0){instanceItems.push(item);}}});}this.updateSelectedInstanceItem(instanceItems);}else{this.updateSelectedInstanceItem([]);}// update shape selection\nthis.rootStore.shape.selectShapeByInstanceItem(this.selectedInstanceItems);this.rootStore.shape.updateShapesInInstance(instances);if(autoFocus){this.rootStore.shape.fitShapes();}}/**\n   * select instance item\n   * @param instanceItem\n   * @param autoFocus\n   */selectInstanceItem(instanceItem){let autoFocus=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const instanceItems=Array.isArray(instanceItem)?instanceItem:[...(instanceItem?[instanceItem]:[])];this.updateSelectedInstanceItem(instanceItems);const instanceSet=new Set(instanceItems.map(i=>i.instance));const instances=Array.from(instanceSet);this.selectInstance(instances,autoFocus);}/**\n   * get current editing instance item\n   */getCurrentInstanceItem(){let currentCategoryName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.rootStore.ontology.selectedCategoryName;let currentCategoryItemName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.rootStore.ontology.selectedCategoryItemName;const selectedInstance=this.selectedInstances.find(i=>i.category===currentCategoryName)||this.selectedInstances[0];if(selectedInstance&&selectedInstance.category===currentCategoryName){const selectedInstanceItems=this.selectedInstanceItems.filter(i=>i.instance===selectedInstance);const selectedInstanceItem=selectedInstanceItems.find(i=>i.name===currentCategoryItemName)||selectedInstanceItems[0];if(selectedInstanceItem&&selectedInstanceItem.name===currentCategoryItemName){// has selected instance item\nconst{currentCamera,currentFrame}=this.rootStore.frame;const{frames}=selectedInstanceItem.cameras[currentCamera];if(!frames[currentFrame]){// not exist in current frame\nreturn selectedInstanceItem;}}const category=this.rootStore.ontology.getCategoryItem(currentCategoryName,currentCategoryItemName);if(category){const{currentCamera}=this.rootStore.frame;const{name,count}=category;// find items exist in current camera\nconst items=selectedInstance.getItemsByName(name).filter(i=>{const cameraData=i.cameras[currentCamera];return cameraData&&!cameraData.isEmpty;});if(count!==undefined&&items.length<count){return this.createInstanceItem(selectedInstance,currentCategoryItemName);}}}// return a new instance\nconst instance=this.createInstance(currentCategoryName);return this.createInstanceItem(instance,currentCategoryItemName);}/**\n   * create instance\n   * @param categoryName\n   */createInstance(){let categoryName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.rootStore.ontology.selectedCategory.className;const category=this.rootStore.ontology.getCategory(categoryName);if(category){const instance=new Instance({categoryRef:category,number:this.getNextInstanceNumber(categoryName),getNextShapeOrder:this.rootStore.frame.getNextShapeOrder});this.instances[instance.id]=instance;return instance;}return undefined;}/**\n   * create instance item\n   * @param instance\n   * @param categoryItem\n   */createInstanceItem(instance){let categoryItem=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.rootStore.ontology.selectedCategoryItem.name;const number=this.getNextInstanceItemNumber(instance.id,categoryItem);const existItem=instance.getItem(categoryItem,number);if(existItem){return existItem;}// create\nconst{children=[]}=instance.categoryRef;const item=children.find(c=>c.name===categoryItem);const instanceItem=new InstanceItem({instance,categoryItemRef:item||children[0],number});instance.items[instanceItem.id]=instanceItem;return instanceItem;}/**\n   * delete instance\n   * @param instance\n   */deleteInstance(instance){const instances=Array.isArray(instance)?instance:[instance];this.selectedInstances=this.selectedInstances.filter(i=>instances.indexOf(i)<0);this.selectedInstanceItems=this.selectedInstanceItems.filter(i=>instances.indexOf(i.instance)<0);instances.forEach(i=>{i.destroy();delete this.instances[i.id];});}/**\n   * delete instance item\n   * @param instanceItem\n   */deleteInstanceItem(instanceItem){const instanceItems=Array.isArray(instanceItem)?instanceItem:[instanceItem];this.selectedInstanceItems=this.selectedInstanceItems.filter(i=>instanceItems.indexOf(i)<0);instanceItems.forEach(_ref2=>{let{id,instance}=_ref2;instance.removeItem(id);});}/**\n   * update frame shape info for instance item\n   * @param instanceItem\n   * @param frameIndex\n   * @param shapeType\n   * @param shape\n   * @param order\n   * @param camera\n   */updateFrameShapeForInstanceItem(instanceItem,frameIndex,shapeType,shape,order){let camera=arguments.length>5&&arguments[5]!==undefined?arguments[5]:this.rootStore.frame.currentCamera;const prevBasicInfo=instanceItem.instance.getBasicInfo();const{prevState,currState}=instanceItem.updateShape(camera,frameIndex,true,shapeType,shape,order);const basicInfo=instanceItem.instance.getBasicInfo();const instanceState={[basicInfo.id]:{prev:{...prevBasicInfo,children:prevState?[prevState]:[]},curr:{...basicInfo,children:currState?[currState]:[]}}};this.rootStore.undo.push({instances:Object.values(instanceState).map(i=>i.prev)},{instances:Object.values(instanceState).map(i=>i.curr)});}/**\n   * update frame shape info for instance items list\n   * @param instanceItems\n   */updateFrameShapeForInstanceItems(instanceItems){const prevInstanceMap={};const currInstanceMap={};// const { currentCamera, currentFrame } = this.rootStore.frame;\nfor(let i=0;i<instanceItems.length;i+=1){const{instanceItem,frameIndex,shapeType,shape,order,camera=this.rootStore.frame.currentCamera}=instanceItems[i];let state;const prevBasicInfo=instanceItem.instance.getBasicInfo();if(shape){// update\nstate=instanceItem.updateShape(camera,frameIndex,true,shapeType,shape,order);}else{// delete\nthis.rootStore.shape.deleteShapeByInstanceItem(instanceItem);state=instanceItem.remove(camera,[frameIndex]);if(instanceItem.isEmpty){this.deleteInstanceItem(instanceItem);}if(instanceItem.instance.isEmpty){this.deleteInstance(instanceItem.instance);}}if(state){const{prevState,currState}=state;const{instance}=instanceItem;const{id:instanceId}=instance;if(prevState){if(!prevInstanceMap[instanceId]){prevInstanceMap[instanceId]={...prevBasicInfo,children:[]};}prevInstanceMap[instanceId].children.push(prevState);}if(currState){if(!currInstanceMap[instanceId]){currInstanceMap[instanceId]={...instance.getBasicInfo(),children:[]};}currInstanceMap[instanceId].children.push(currState);}}}this.rootStore.undo.push({instances:Object.values(prevInstanceMap)},{instances:Object.values(currInstanceMap)});}/**\n   * open attributes modal automatically for selected instance\n   */autoOpenAttributesModal(){var _selectedInstance$dyn,_selectedInstance$dyn2;if(this.isMultiSelected||this.selectedInstances.length<=0){return;}const{currentCamera,currentFrame}=this.rootStore.frame;const shouldOpen=instanceItem=>{var _instanceItem$cameras;const frameData=(_instanceItem$cameras=instanceItem.cameras[currentCamera])===null||_instanceItem$cameras===void 0?void 0:_instanceItem$cameras.frames[currentFrame];if(instanceItem.categoryItemRef.labelConfig&&!(frameData===null||frameData===void 0?void 0:frameData.attributes)){this.rootStore.config.setAttributesModalVisible(true);return true;}return false;};if(this.selectedInstanceItems.length===1){const selectedInstanceItem=this.selectedInstanceItems[0];const open=shouldOpen(selectedInstanceItem);if(open){this.rootStore.config.setAttributesModalVisible(true);return;}}const selectedInstance=this.selectedInstances[0];const{labelConfigDynamic}=selectedInstance.categoryRef;if(labelConfigDynamic&&(!selectedInstance.dynamicAttributes||!((_selectedInstance$dyn=selectedInstance.dynamicAttributes[currentCamera])===null||_selectedInstance$dyn===void 0?void 0:(_selectedInstance$dyn2=_selectedInstance$dyn[currentFrame])===null||_selectedInstance$dyn2===void 0?void 0:_selectedInstance$dyn2.attributes))){this.rootStore.config.setAttributesModalVisible(true);return true;}if(this.selectedInstanceItems.length<=0&&Object.values(selectedInstance.items).some(i=>shouldOpen(i))){// no instance item selected\nthis.rootStore.config.setAttributesModalVisible(true);}}/**\n   * get instances json data (for save)\n   */instancesJSON(){return Object.values(this.instances).map(instance=>instance.toJSON());}/**\n   * is current frame attributes\n   * @getter\n   */getCurrentDynamicAttributesByInstance(instance){var _instance$dynamicAttr,_instance$dynamicAttr2;const{currentCamera,currentFrame}=this.rootStore.frame;const{attributes={}}=((_instance$dynamicAttr=instance.dynamicAttributes)===null||_instance$dynamicAttr===void 0?void 0:(_instance$dynamicAttr2=_instance$dynamicAttr[currentCamera])===null||_instance$dynamicAttr2===void 0?void 0:_instance$dynamicAttr2[currentFrame])||{};return attributes;}}","map":{"version":3,"names":["makeAutoObservable","Instance","InstanceItem","getNextKeyFrames","preciseShapeByType","InstanceStore","categoryInstancesMap","map","Object","values","instances","forEach","instance","category","push","rootStore","ontology","categories","_ref","className","sort","a","b","number","allInstances","instanceAFirstFrame","Number","keys","frameStatus","instanceBFirstFrame","instanceACategoryIndex","findIndex","c","instanceBCategoryIndex","isMultiSelected","selectedInstances","length","selectedInstanceItems","isSingleSelected","selectedInstanceAttributesEnabled","selectedInstance","selectedInstanceItem","undefined","isAttributesEnabled","constructor","_this","deleteFramesFromInstanceItem","instanceItem","frames","camera","arguments","frame","currentCamera","currentFrame","prevBasicInfo","getBasicInfo","includes","shape","deleteShapeByInstanceItem","prevState","currState","remove","basicInfo","undo","children","isEmpty","deleteInstanceItem","deleteInstance","deleteFramesFromInstanceItems","instanceItems","prevInstanceMap","currInstanceMap","i","id","instanceId","prevInstanceBasicInfo","deleteInstanceItemByFrame","deleteFramesFromInstanceItemByType","type","nextKeyFrames","cameras","nextKeyFrame","Array","from","_","index","allFrames","f","parseInt","indexOf","slice","autoBind","init","getCategory","cameraNames","updateNextShapeOrder","categoryNumbers","numberDuplicatedInstances","categoryItem","find","name","cameraData","frameData","shapeType","order","frameIndex","filter","checkNumbers","annotatable","createInstanceFromData","getNextInstanceNumber","newInstance","categoryRef","attributes","dynamicAttributes","items","getNextShapeOrder","isInstanceDynamicAttributesEnabled","labelConfigDynamic","isInstanceItemAttributesEnabled","categoryItemRef","labelConfig","instanceDynamicAttributesEnabled","some","item","getInstanceById","categoryName","categoryInstanceNumbers","Math","max","getNextInstanceItemNumber","categoryItemName","itemsInCamera","itemNumbers","updateSelectedInstance","isArray","setSelected","updateSelectedInstanceItem","selectInstance","autoFocus","allCategories","selectedCategoryName","selectCategory","isSingleCamera","isSingle","selectShapeByInstanceItem","updateShapesInInstance","fitShapes","selectInstanceItem","instanceSet","Set","getCurrentInstanceItem","currentCategoryName","currentCategoryItemName","selectedCategoryItemName","getCategoryItem","count","getItemsByName","createInstanceItem","createInstance","selectedCategory","selectedCategoryItem","existItem","getItem","destroy","_ref2","removeItem","updateFrameShapeForInstanceItem","updateShape","instanceState","prev","curr","updateFrameShapeForInstanceItems","state","autoOpenAttributesModal","_selectedInstance$dyn","_selectedInstance$dyn2","shouldOpen","_instanceItem$cameras","config","setAttributesModalVisible","open","instancesJSON","toJSON","getCurrentDynamicAttributesByInstance","_instance$dynamicAttr","_instance$dynamicAttr2"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/InstanceStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport RootStore from './RootStore';\nimport Instance from '../model/Instance';\nimport InstanceItem from '../model/InstanceItem';\nimport { getNextKeyFrames, preciseShapeByType } from '../utils';\nimport { Instance as IInstance } from '../types';\nimport { ShapeData, ShapeType } from '../../common/shapes/types';\n\n/**\n * store for instances\n * @class\n */\nexport default class InstanceStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * all instances\n   */\n  instances: { [instanceId: string]: Instance } = {};\n\n  /**\n   * selected instances\n   */\n  selectedInstances: Instance[] = [];\n\n  /**\n   * selected instance items\n   */\n  selectedInstanceItems: InstanceItem[] = [];\n\n  /**\n   * category instances map\n   * @getter\n   */\n  get categoryInstancesMap() {\n    const map: { [categoryName: string]: Instance[] } = {};\n    Object.values(this.instances).forEach((instance) => {\n      if (!map[instance.category]) {\n        map[instance.category] = [];\n      }\n      map[instance.category].push(instance);\n    });\n    this.rootStore.ontology.categories.forEach(({ className }) => {\n      if (!map[className]) {\n        map[className] = [];\n      } else {\n        map[className].sort((a, b) => a.number - b.number);\n      }\n    });\n    return map;\n  };\n\n  /**\n   * all instances sorted by timeline\n   * @getter\n   */\n  get allInstances() {\n    const { categories } = this.rootStore.ontology;\n    return Object.values(this.instances)\n      .sort((a, b) => {\n        const instanceAFirstFrame = Number(Object.keys(a.frameStatus)[0]);\n        const instanceBFirstFrame = Number(Object.keys(b.frameStatus)[0]);\n        if (instanceAFirstFrame > instanceBFirstFrame) {\n          return 1;\n        }\n        if (instanceAFirstFrame < instanceBFirstFrame) {\n          return -1;\n        }\n        const instanceACategoryIndex = categories.findIndex((c) => c.className === a.category);\n        const instanceBCategoryIndex = categories.findIndex((c) => c.className === b.category);\n        if (instanceACategoryIndex > instanceBCategoryIndex) {\n          return 1;\n        }\n        if (instanceACategoryIndex < instanceBCategoryIndex) {\n          return -1;\n        }\n        return a.number > b.number ? 1 : -1;\n      });\n  }\n\n  /**\n   * multiple instance item selected\n   * @getter\n   */\n  get isMultiSelected() {\n    return this.selectedInstances.length > 1 || this.selectedInstanceItems.length > 1;\n  }\n\n  /**\n   * single instance item selected\n   */\n  get isSingleSelected() {\n    return this.selectedInstances.length === 1 && this.selectedInstanceItems.length === 1;\n  }\n\n  /**\n   * does selected instance has label config to set attributes\n   * @getter\n   */\n  get selectedInstanceAttributesEnabled() {\n    if (this.isMultiSelected || this.selectedInstances.length <= 0) {\n      return false;\n    }\n\n    const selectedInstance = this.selectedInstances[0];\n    const selectedInstanceItem = this.selectedInstanceItems.length === 1 ? this.selectedInstanceItems[0] : undefined;\n    return this.isAttributesEnabled(selectedInstance, selectedInstanceItem);\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init instances\n   * @param instances\n   */\n  async init(instances: IInstance[]) {\n    const { getCategory } = this.rootStore.ontology;\n    const { cameraNames, updateNextShapeOrder } = this.rootStore.frame;\n    const categoryNumbers: { [category: string]: number[] } = {};\n    const numberDuplicatedInstances: IInstance[] = [];\n    instances.forEach((instance) => {\n      const category = getCategory(instance.category);\n      if (category) {\n        instance.children.forEach((instanceItem) => {\n          const categoryItem = category.children.find((c) => c.name === instanceItem.name);\n          if (categoryItem) {\n            instanceItem.cameras.forEach((cameraData) => {\n              if (cameraNames.includes(cameraData.camera)) {\n                cameraData.frames.forEach((frameData) => {\n                  // fix shape data precision\n                  preciseShapeByType(frameData.shapeType, frameData.shape);\n                  // update next shape order\n                  if (typeof frameData.order === 'number' && frameData.order >= 0) {\n                    updateNextShapeOrder(frameData.order, frameData.frameIndex, cameraData.camera);\n                  }\n                });\n              } else {\n                cameraData.frames = [];\n              }\n            });\n            instanceItem.cameras = instanceItem.cameras.filter((c) => c.frames.length > 0); // remove invalid camera data\n          } else {\n            instanceItem.cameras = [];\n          }\n        });\n        instance.children = instance.children.filter((i) => i.cameras.length > 0); // remove invalid instance item data\n        if (instance.children.length > 0) {\n          if (!categoryNumbers[category.className]) {\n            categoryNumbers[category.className] = [];\n          }\n          const checkNumbers = categoryNumbers[category.className];\n          if (this.rootStore.annotatable && checkNumbers.indexOf(instance.number) >= 0) {\n            // number already exists, fix number later\n            numberDuplicatedInstances.push(instance);\n          } else {\n            categoryNumbers[category.className].push(instance.number);\n            this.createInstanceFromData(instance);\n          }\n        }\n      }\n    });\n    numberDuplicatedInstances.forEach((instance) => {\n      const number = this.rootStore.instance.getNextInstanceNumber(instance.category);\n      instance.number = number;\n      this.createInstanceFromData(instance);\n    });\n  }\n\n  /**\n   * create instance from structured instance data\n   * @param instance\n   */\n  createInstanceFromData(instance: IInstance) {\n    const category = this.rootStore.ontology.getCategory(instance.category);\n    if (category) {\n      const newInstance = new Instance({\n        id: instance.id,\n        categoryRef: category,\n        number: instance.number,\n        attributes: instance.attributes,\n        dynamicAttributes: instance.dynamicAttributes,\n        items: instance.children,\n        getNextShapeOrder: this.rootStore.frame.getNextShapeOrder,\n      });\n      this.instances[newInstance.id] = newInstance;\n    }\n  }\n\n  /**\n   * is instance dynamic attributes enable\n   * @param instance\n   */\n  // eslint-disable-next-line class-methods-use-this\n  isInstanceDynamicAttributesEnabled(instance: Instance) {\n    // selected instance has label config setting\n    return !!instance.categoryRef.labelConfigDynamic;\n  }\n\n  /**\n   * is instance item attributes enabled\n   * @param instanceItem\n   */\n  isInstanceItemAttributesEnabled(instanceItem: InstanceItem) {\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const cameraData = instanceItem.cameras[currentCamera];\n    if (cameraData) {\n      const frameData = cameraData.frames[currentFrame];\n      if (frameData) {\n        if (instanceItem.categoryItemRef.labelConfig) {\n          // instance item has label config setting\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * is instance & instance item attributes enabled\n   * @param instance\n   * @param instanceItem\n   */\n  isAttributesEnabled(instance: Instance, instanceItem?: InstanceItem) {\n    const instanceDynamicAttributesEnabled = this.isInstanceDynamicAttributesEnabled(instance);\n    if (instanceDynamicAttributesEnabled) {\n      return true;\n    }\n    if (instanceItem) {\n      return this.isInstanceItemAttributesEnabled(instanceItem);\n    }\n    return Object.values(instance.items).some((item) => this.isInstanceItemAttributesEnabled(item));\n  }\n\n  /**\n   * get instance by id\n   * @param instanceId\n   */\n  getInstanceById(instanceId: string) {\n    return this.instances[instanceId];\n  }\n\n  /**\n   * get next instance number\n   * @param categoryName\n   */\n  getNextInstanceNumber(categoryName: string) {\n    const categoryInstanceNumbers = (this.categoryInstancesMap[categoryName] || []).map((i) => i.number);\n    return Math.max(...categoryInstanceNumbers, 0) + 1;\n  }\n\n  /**\n   * get next instance item number\n   * @param instanceId\n   * @param categoryItemName\n   * @param camera\n   */\n  getNextInstanceItemNumber(instanceId: string, categoryItemName: string, camera = this.rootStore.frame.currentCamera) {\n    const instance = this.instances[instanceId];\n    const items = Object.values(instance.items).filter((i) => i.name === categoryItemName);\n    const itemsInCamera = items.filter((i) => {\n      const cameraData = i.cameras[camera];\n      return cameraData && !cameraData.isEmpty;\n    });\n    const itemNumbers = itemsInCamera.map((i) => i.number);\n    return Math.max(...itemNumbers, 0) + 1;\n  }\n\n  /**\n   * update selected instance\n   * @param instance\n   */\n  updateSelectedInstance(instance: Instance | Instance[]) {\n    const instances = Array.isArray(instance) ? instance : [instance];\n    this.selectedInstances.forEach((i) => {\n      if (instances.indexOf(i) < 0) {\n        i.setSelected(false);\n      }\n    });\n    this.selectedInstances = [...instances];\n    this.selectedInstances.forEach((i) => {\n      i.setSelected(true);\n    });\n  }\n\n  /**\n   * update selected instance item\n   * @param instanceItem\n   */\n  updateSelectedInstanceItem(instanceItem: InstanceItem | InstanceItem[]) {\n    const instanceItems = Array.isArray(instanceItem) ? instanceItem : [instanceItem];\n    this.selectedInstanceItems.forEach((i) => {\n      if (instanceItems.indexOf(i) < 0) {\n        i.setSelected(false);\n      }\n    });\n    this.selectedInstanceItems = [...instanceItems];\n    this.selectedInstanceItems.forEach((i) => {\n      i.setSelected(true);\n    });\n  }\n\n  /**\n   * select instance\n   * @param instance\n   * @param autoFocus\n   */\n  selectInstance(instance?: Instance | Instance[] | null, autoFocus = false) {\n    const instances = Array.isArray(instance) ? instance : [...instance ? [instance] : []];\n    this.updateSelectedInstance(instances);\n\n    if (instances.length > 0) {\n      // select category if needed\n      const allCategories = instances.map((i) => i.category);\n      if (allCategories.indexOf(this.rootStore.ontology.selectedCategoryName) < 0) {\n        this.rootStore.ontology.selectCategory(allCategories[0]);\n      }\n\n      // filter selected instance item\n      const instanceItems: InstanceItem[] = this.selectedInstanceItems.filter((i) => instances.indexOf(i.instance) >= 0);\n\n      // if the instance is single, default select first instance item\n      if (this.rootStore.frame.isSingleCamera) {\n        instances.forEach((i) => {\n          if (i.isSingle && Object.keys(i.items).length > 0) {\n            const item = Object.values(i.items)[0];\n            if (instanceItems.indexOf(item) < 0) {\n              instanceItems.push(item);\n            }\n          }\n        });\n      }\n      this.updateSelectedInstanceItem(instanceItems);\n    } else {\n      this.updateSelectedInstanceItem([]);\n    }\n\n    // update shape selection\n    this.rootStore.shape.selectShapeByInstanceItem(this.selectedInstanceItems);\n    this.rootStore.shape.updateShapesInInstance(instances);\n    if (autoFocus) {\n      this.rootStore.shape.fitShapes();\n    }\n  }\n\n  /**\n   * select instance item\n   * @param instanceItem\n   * @param autoFocus\n   */\n  selectInstanceItem(instanceItem?: InstanceItem | InstanceItem[] | null, autoFocus = false) {\n    const instanceItems = Array.isArray(instanceItem) ? instanceItem : [...instanceItem ? [instanceItem] : []];\n    this.updateSelectedInstanceItem(instanceItems);\n    const instanceSet = new Set(instanceItems.map((i) => i.instance));\n    const instances = Array.from(instanceSet);\n    this.selectInstance(instances, autoFocus);\n  }\n\n  /**\n   * get current editing instance item\n   */\n  getCurrentInstanceItem(\n    currentCategoryName = this.rootStore.ontology.selectedCategoryName,\n    currentCategoryItemName = this.rootStore.ontology.selectedCategoryItemName\n  ) {\n    const selectedInstance = this.selectedInstances.find((i) => i.category === currentCategoryName) || this.selectedInstances[0];\n    if (selectedInstance && selectedInstance.category === currentCategoryName) {\n      const selectedInstanceItems = this.selectedInstanceItems.filter((i) => i.instance === selectedInstance);\n      const selectedInstanceItem = selectedInstanceItems.find((i) => i.name === currentCategoryItemName) || selectedInstanceItems[0];\n      if (selectedInstanceItem && selectedInstanceItem.name === currentCategoryItemName) {\n        // has selected instance item\n        const { currentCamera, currentFrame } = this.rootStore.frame;\n        const { frames } = selectedInstanceItem.cameras[currentCamera];\n        if (!frames[currentFrame]) {\n          // not exist in current frame\n          return selectedInstanceItem;\n        }\n      }\n\n      const category = this.rootStore.ontology.getCategoryItem(currentCategoryName, currentCategoryItemName);\n      if (category) {\n        const { currentCamera } = this.rootStore.frame;\n        const { name, count } = category;\n        // find items exist in current camera\n        const items = selectedInstance.getItemsByName(name).filter((i) => {\n          const cameraData = i.cameras[currentCamera];\n          return cameraData && !cameraData.isEmpty;\n        });\n        if (count !== undefined && items.length < count) {\n          return this.createInstanceItem(selectedInstance, currentCategoryItemName);\n        }\n      }\n    }\n\n    // return a new instance\n    const instance = this.createInstance(currentCategoryName);\n    return this.createInstanceItem(instance!, currentCategoryItemName);\n  }\n\n  /**\n   * create instance\n   * @param categoryName\n   */\n  createInstance(categoryName = this.rootStore.ontology.selectedCategory.className) {\n    const category = this.rootStore.ontology.getCategory(categoryName);\n    if (category) {\n      const instance = new Instance({\n        categoryRef: category,\n        number: this.getNextInstanceNumber(categoryName),\n        getNextShapeOrder: this.rootStore.frame.getNextShapeOrder,\n      });\n      this.instances[instance.id] = instance;\n      return instance;\n    }\n    return undefined;\n  }\n\n  /**\n   * create instance item\n   * @param instance\n   * @param categoryItem\n   */\n  createInstanceItem(instance: Instance, categoryItem = this.rootStore.ontology.selectedCategoryItem.name) {\n    const number = this.getNextInstanceItemNumber(instance.id, categoryItem);\n    const existItem = instance.getItem(categoryItem, number);\n    if (existItem) {\n      return existItem;\n    }\n    // create\n    const { children = [] } = instance.categoryRef;\n    const item = children.find((c) => c.name === categoryItem);\n    const instanceItem = new InstanceItem({\n      instance,\n      categoryItemRef: item || children[0],\n      number,\n    });\n    instance.items[instanceItem.id] = instanceItem;\n    return instanceItem;\n  }\n\n  /**\n   * delete instance\n   * @param instance\n   */\n  deleteInstance(instance: Instance | Instance[]) {\n    const instances = Array.isArray(instance) ? instance : [instance];\n    this.selectedInstances = this.selectedInstances.filter((i) => instances.indexOf(i) < 0);\n    this.selectedInstanceItems = this.selectedInstanceItems.filter((i) => instances.indexOf(i.instance) < 0);\n    instances.forEach((i) => {\n      i.destroy();\n      delete this.instances[i.id];\n    });\n  }\n\n  /**\n   * delete instance item\n   * @param instanceItem\n   */\n  deleteInstanceItem(instanceItem: InstanceItem | InstanceItem[]) {\n    const instanceItems = Array.isArray(instanceItem) ? instanceItem : [instanceItem];\n    this.selectedInstanceItems = this.selectedInstanceItems.filter((i) => instanceItems.indexOf(i) < 0);\n    instanceItems.forEach(({ id, instance }) => {\n      instance.removeItem(id);\n    });\n  }\n\n  /**\n   * delete frames from instance item\n   * @param instanceItem\n   * @param frames\n   * @param camera\n   */\n  deleteFramesFromInstanceItem = (\n    instanceItem: InstanceItem,\n    frames: number[],\n    camera = this.rootStore.frame.currentCamera,\n  ) => {\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const prevBasicInfo = instanceItem.instance.getBasicInfo();\n    if (camera === currentCamera && frames.includes(currentFrame)) {\n      // remove shape\n      this.rootStore.shape.deleteShapeByInstanceItem(instanceItem);\n    }\n\n    const { prevState, currState } = instanceItem.remove(camera, frames);\n    const basicInfo = instanceItem.instance.getBasicInfo();\n    this.rootStore.undo.push({\n      instances: prevState ? [{ ...prevBasicInfo, children: [prevState] }] : [],\n    }, {\n      instances: currState ? [{ ...basicInfo, children: [currState] }] : [],\n    });\n\n    if (instanceItem.isEmpty) {\n      this.deleteInstanceItem(instanceItem);\n    }\n    if (instanceItem.instance.isEmpty) {\n      this.deleteInstance(instanceItem.instance);\n    }\n  };\n\n  /**\n   * delete frames from instance items\n   * @param instanceItems\n   */\n  deleteFramesFromInstanceItems = (instanceItems: { instanceItem: InstanceItem, frames: number[], camera?: string }[]) => {\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const prevInstanceMap: { [instanceId: string]: IInstance } = {};\n    const currInstanceMap: { [instanceId: string]: IInstance } = {};\n    for (let i = 0; i < instanceItems.length; i += 1) {\n      const { instanceItem, frames, camera = currentCamera } = instanceItems[i];\n      const { instance } = instanceItem;\n      const { id: instanceId } = instance;\n\n      if (camera === currentCamera && frames.includes(currentFrame)) {\n        // remove shape\n        this.rootStore.shape.deleteShapeByInstanceItem(instanceItem);\n      }\n      const prevInstanceBasicInfo = instance.getBasicInfo();\n      const { prevState, currState } = instanceItem.remove(camera, frames);\n      if (prevState) {\n        if (!prevInstanceMap[instanceId]) {\n          prevInstanceMap[instanceId] = {\n            ...prevInstanceBasicInfo,\n            children: [],\n          };\n        }\n        prevInstanceMap[instanceId].children.push(prevState);\n      }\n      if (currState) {\n        if (!currInstanceMap[instanceId]) {\n          currInstanceMap[instanceId] = {\n            ...instance.getBasicInfo(),\n            children: [],\n          };\n        }\n        currInstanceMap[instanceId].children.push(currState);\n      }\n\n      if (instanceItem.isEmpty) {\n        this.deleteInstanceItem(instanceItem);\n      }\n      if (instance.isEmpty) {\n        this.deleteInstance(instance);\n      }\n    }\n    this.rootStore.undo.push({\n      instances: Object.values(prevInstanceMap),\n    }, {\n      instances: Object.values(currInstanceMap),\n    });\n  };\n\n  deleteInstanceItemByFrame = (\n    instanceItem: InstanceItem,\n    frame: number,\n    camera = this.rootStore.frame.currentCamera,\n  ) => {\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const prevInstanceBasicInfo = instanceItem.instance.getBasicInfo();\n    if (camera === currentCamera && frame === currentFrame) {\n      // remove shape\n      this.rootStore.shape.deleteShapeByInstanceItem(instanceItem);\n    }\n\n    const { prevState, currState } = instanceItem.remove(camera, [frame]);\n\n    if (instanceItem.isEmpty) {\n      this.deleteInstanceItem(instanceItem);\n    }\n    if (instanceItem.instance.isEmpty) {\n      this.deleteInstance(instanceItem.instance);\n    }\n\n    return {\n      prevState: {\n        instances: prevState ? [{ ...prevInstanceBasicInfo, children: [prevState] }] : [],\n      },\n      currState: {\n        instances: currState ? [{ ...instanceItem.instance.getBasicInfo(), children: [currState] }] : [],\n      },\n    };\n  };\n\n  /**\n   * delete frames from instance item by type\n   * @param instanceItem\n   * @param type\n   * @param camera\n   */\n  deleteFramesFromInstanceItemByType = (\n    instanceItem: InstanceItem,\n    type: 'current' | 'key' | 'following' | 'all' = 'current',\n    camera = this.rootStore.frame.currentCamera,\n  ) => {\n    const { currentFrame } = this.rootStore.frame;\n    switch (type) {\n      case 'current':\n        this.deleteFramesFromInstanceItem(instanceItem, [currentFrame]);\n        break;\n      case 'key': {\n        const nextKeyFrames = getNextKeyFrames(1, currentFrame, instanceItem.cameras[camera].frames);\n        const nextKeyFrame = nextKeyFrames[0];\n        if (nextKeyFrame) {\n          this.deleteFramesFromInstanceItem(\n            instanceItem,\n            Array.from({ length: nextKeyFrame - currentFrame }).map((_, index) => currentFrame + index),\n          );\n        }\n        break;\n      }\n      case 'following': {\n        const allFrames = Object.keys(instanceItem.cameras[camera].frames).map((f) => parseInt(f, 10));\n        const index = allFrames.indexOf(currentFrame);\n        this.deleteFramesFromInstanceItem(\n          instanceItem,\n          allFrames.slice(index, allFrames.length),\n        );\n        break;\n      }\n      case 'all': {\n        const allFrames = Object.keys(instanceItem.cameras[camera].frames).map((f) => parseInt(f, 10));\n        this.deleteFramesFromInstanceItem(\n          instanceItem,\n          allFrames,\n        );\n        break;\n      }\n      default:\n    }\n  };\n\n  /**\n   * update frame shape info for instance item\n   * @param instanceItem\n   * @param frameIndex\n   * @param shapeType\n   * @param shape\n   * @param order\n   * @param camera\n   */\n  updateFrameShapeForInstanceItem(instanceItem: InstanceItem, frameIndex: number, shapeType: ShapeType, shape: ShapeData, order?: number, camera = this.rootStore.frame.currentCamera) {\n    const prevBasicInfo = instanceItem.instance.getBasicInfo();\n    const { prevState, currState } = instanceItem.updateShape(\n      camera,\n      frameIndex,\n      true,\n      shapeType,\n      shape,\n      order,\n    );\n    const basicInfo = instanceItem.instance.getBasicInfo();\n    const instanceState: Record<string, { prev: IInstance, curr: IInstance }> = {\n      [basicInfo.id]: {\n        prev: { ...prevBasicInfo, children: prevState ? [prevState] : [] },\n        curr: { ...basicInfo, children: currState ? [currState] : [] },\n      }\n    };\n\n    this.rootStore.undo.push({\n      instances: Object.values(instanceState).map((i) => i.prev),\n    }, {\n      instances: Object.values(instanceState).map((i) => i.curr),\n    });\n  }\n\n  /**\n   * update frame shape info for instance items list\n   * @param instanceItems\n   */\n  updateFrameShapeForInstanceItems(instanceItems: { instanceItem: InstanceItem, frameIndex: number, shapeType: ShapeType, shape?: ShapeData, order?: number, camera?: string }[]) {\n    const prevInstanceMap: { [instanceId: string]: IInstance } = {};\n    const currInstanceMap: { [instanceId: string]: IInstance } = {};\n    // const { currentCamera, currentFrame } = this.rootStore.frame;\n    for (let i = 0; i < instanceItems.length; i += 1) {\n      const { instanceItem, frameIndex, shapeType, shape, order, camera = this.rootStore.frame.currentCamera } = instanceItems[i];\n      let state;\n      const prevBasicInfo = instanceItem.instance.getBasicInfo();\n      if (shape) {\n        // update\n        state = instanceItem.updateShape(\n          camera,\n          frameIndex,\n          true,\n          shapeType,\n          shape,\n          order,\n        );\n      } else {\n        // delete\n        this.rootStore.shape.deleteShapeByInstanceItem(instanceItem);\n\n        state = instanceItem.remove(camera, [frameIndex]);\n        if (instanceItem.isEmpty) {\n          this.deleteInstanceItem(instanceItem);\n        }\n        if (instanceItem.instance.isEmpty) {\n          this.deleteInstance(instanceItem.instance);\n        }\n      }\n\n      if (state) {\n        const { prevState, currState } = state;\n        const { instance } = instanceItem;\n        const { id: instanceId } = instance;\n        if (prevState) {\n          if (!prevInstanceMap[instanceId]) {\n            prevInstanceMap[instanceId] = {\n              ...prevBasicInfo,\n              children: [],\n            };\n          }\n          prevInstanceMap[instanceId].children.push(prevState);\n        }\n        if (currState) {\n          if (!currInstanceMap[instanceId]) {\n            currInstanceMap[instanceId] = {\n              ...instance.getBasicInfo(),\n              children: [],\n            };\n          }\n          currInstanceMap[instanceId].children.push(currState);\n        }\n      }\n    }\n    this.rootStore.undo.push({\n      instances: Object.values(prevInstanceMap),\n    }, {\n      instances: Object.values(currInstanceMap),\n    });\n  }\n\n  /**\n   * open attributes modal automatically for selected instance\n   */\n  autoOpenAttributesModal() {\n    if (this.isMultiSelected || this.selectedInstances.length <= 0) {\n      return;\n    }\n\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const shouldOpen = (instanceItem: InstanceItem) => {\n      const frameData = instanceItem.cameras[currentCamera]?.frames[currentFrame];\n\n      if (\n        instanceItem.categoryItemRef.labelConfig &&\n        !frameData?.attributes\n      ) {\n        this.rootStore.config.setAttributesModalVisible(true);\n        return true;\n      }\n\n      return false;\n    };\n\n    if (this.selectedInstanceItems.length === 1) {\n      const selectedInstanceItem = this.selectedInstanceItems[0];\n      const open = shouldOpen(selectedInstanceItem);\n      if (open) {\n        this.rootStore.config.setAttributesModalVisible(true);\n        return;\n      }\n    }\n\n    const selectedInstance = this.selectedInstances[0];\n    const { labelConfigDynamic } = selectedInstance.categoryRef;\n    if (labelConfigDynamic && (!selectedInstance.dynamicAttributes || !selectedInstance.dynamicAttributes[currentCamera]?.[currentFrame]?.attributes)) {\n      this.rootStore.config.setAttributesModalVisible(true);\n      return true;\n    }\n\n    if (this.selectedInstanceItems.length <= 0 && Object.values(selectedInstance.items).some((i) => shouldOpen(i))) {\n      // no instance item selected\n      this.rootStore.config.setAttributesModalVisible(true);\n    }\n  }\n\n  /**\n   * get instances json data (for save)\n   */\n  instancesJSON(): IInstance[] {\n    return Object.values(this.instances).map((instance) => instance.toJSON());\n  }\n\n  /**\n   * is current frame attributes\n   * @getter\n   */\n  getCurrentDynamicAttributesByInstance(instance: Instance) {\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const { attributes = {} } = instance.dynamicAttributes?.[currentCamera]?.[currentFrame] || {};\n    return attributes;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}