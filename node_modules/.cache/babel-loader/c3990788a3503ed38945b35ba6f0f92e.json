{"ast":null,"code":"import _applyDecoratedDescriptor from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nvar _class;\nimport { observable, computed, makeObservable, action, toJS } from 'mobx';\nimport { ReviewResult, ValidationType } from '../types';\nimport { TOOL_MODE, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport formatMessage from '../locales';\n;\n;\n/**\n * reviews stores\n */\nlet ReviewsStore = (_class = class ReviewsStore {\n  /**\n   * qa qarnings\n   */\n  get qaWarnings() {\n    return this.reviews.length ? toJS(this.reviews).filter(review => review.result === ReviewResult.REJECT).map(review => ({\n      id: review.instanceId,\n      groupName: review.groupName,\n      shapeIds: review.shapeIds,\n      frames: [review.frameIndex],\n      message: review.type.join(','),\n      comment: review.comment,\n      warningType: ValidationType.QUALITY\n    })) : [];\n  }\n\n  /**\n   * warnings\n   */\n  get warnings() {\n    return this.customWarnings.length || this.qaWarnings.length ? [...toJS(this.customWarnings), ...this.qaWarnings] : [];\n  }\n\n  /**\n   * frame instance review mapping\n   */\n  get frameReviewsMap() {\n    const reviewsMap = {};\n    this.reviews.forEach(review => {\n      const {\n        frameIndex,\n        instanceId,\n        groupName,\n        shapeIds,\n        result\n      } = review;\n      const results = {};\n      shapeIds.forEach(id => {\n        if (typeof id === 'string') {\n          results[id] = result;\n        } else {\n          results[id] = result;\n        }\n      });\n      if (!reviewsMap[frameIndex]) {\n        reviewsMap[frameIndex] = {\n          [instanceId]: {\n            [groupName]: {}\n          }\n        };\n      }\n      if (!reviewsMap[frameIndex][instanceId]) {\n        reviewsMap[frameIndex][instanceId] = {\n          [groupName]: {}\n        };\n      }\n      if (!reviewsMap[frameIndex][instanceId][groupName]) {\n        reviewsMap[frameIndex][instanceId][groupName] = {};\n      }\n      reviewsMap[frameIndex][instanceId][groupName] = {\n        ...reviewsMap[frameIndex][instanceId][groupName],\n        ...results\n      };\n    });\n    return reviewsMap;\n  }\n  constructor(rootStore) {\n    this.rootStore = void 0;\n    /**\n     * current tool mode\n     */\n    this.toolMode = TOOL_MODE.LABELING;\n    /**\n     * canvas draw\n     */\n    this.drawMode = true;\n    /**\n     * issue types\n     */\n    this.issueTypes = [];\n    /**\n     * all reviews\n     */\n    this.reviews = [];\n    /**\n     * selected review\n     */\n    this.selectedReview = void 0;\n    /**\n     * custom warnings\n     */\n    this.customWarnings = [];\n    /**\n     * has custom error\n     */\n    this.hasCustomError = false;\n    /**\n     * blockSubmitErrors\n     */\n    this.blockSubmitErrors = [];\n    /**\n     * errors\n     */\n    this.errors = void 0;\n    /**\n     * delete review\n     * @param instanceId\n     * @param frameIndex\n     */\n    this.deleteReviewByInstance = (currentReview = this.selectedReview) => {\n      if (this.isEnabled && currentReview) {\n        const {\n          instanceId,\n          frameIndex,\n          groupName,\n          shapeIds\n        } = currentReview;\n        const prevReviews = [...this.reviews];\n        const index = this.reviews.findIndex(review => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n        if (index >= 0) {\n          this.reviews.splice(index, 1);\n          this.changeUndo(prevReviews);\n        }\n        this.setSelectedReview();\n      }\n    };\n    makeObservable(this, {\n      reviews: observable,\n      selectedReview: observable,\n      errors: observable,\n      customWarnings: observable,\n      drawMode: observable,\n      setInitialData: action,\n      setSelectedReview: action,\n      setReview: action,\n      deleteReviewByInstance: action,\n      setScriptResult: action,\n      setDrawMode: action\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * review result types\n   */\n  get reviewResultTypes() {\n    return this.toolMode === TOOL_MODE.AUDIT ? [ReviewResult.APPROVE, ReviewResult.REJECT, ReviewResult.SUSPEND] : [ReviewResult.APPROVE, ReviewResult.REJECT];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes.split(',').map(i => i.trim()).filter(i => !!i);\n    if (this.isEnabled) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(reviews) {\n    if (reviews && Array.isArray(reviews)) {\n      this.reviews = [];\n      reviews.filter(v => !this.isEnabled && v.result === ReviewResult.REJECT || this.isEnabled).forEach(({\n        instanceId,\n        frameIndex,\n        groupName,\n        shapeIds,\n        result,\n        type,\n        comment\n      }) => {\n        if (frameIndex !== undefined && instanceId !== undefined && groupName !== undefined && result !== undefined && Array.isArray(shapeIds) && shapeIds.length > 0) {\n          this.reviews.push({\n            instanceId,\n            groupName,\n            shapeIds,\n            frameIndex,\n            result,\n            type,\n            comment\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * select review\n   * @param instanceId\n   */\n  setSelectedReview(review) {\n    if (review) {\n      const {\n        frameIndex,\n        instanceId,\n        groupName,\n        shapeIds,\n        result\n      } = review;\n      const oldReview = this.getReview(frameIndex, instanceId, groupName, shapeIds);\n      if (this.isEnabled) {\n        this.selectedReview = oldReview ? {\n          ...oldReview,\n          result\n        } : review;\n      } else if (oldReview) {\n        this.selectedReview = oldReview;\n      }\n    } else {\n      this.selectedReview = undefined;\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    return this.reviews.map(review => ({\n      ...review\n    }));\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(frameIndex, instanceId, groupName, shapeIds) {\n    return this.reviews.find(review => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(results, selectedReview = toJS(this.selectedReview)) {\n    if (!selectedReview || !this.isEnabled) {\n      this.selectedReview = undefined;\n      return;\n    }\n    const {\n      frameIndex,\n      instanceId,\n      groupName,\n      shapeIds\n    } = selectedReview;\n    const prevReviews = toJS(this.reviews);\n    const index = prevReviews.findIndex(review => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n    if (index >= 0) {\n      const reviewItem = this.reviews[index];\n      if (reviewItem.result !== results.result || reviewItem.type !== results.type || reviewItem.comment !== results.comment) {\n        reviewItem.result = results.result;\n        reviewItem.type = results.type;\n        reviewItem.comment = results.comment;\n      }\n    } else if (this.isEnabled) {\n      const currentIds = [...toJS(shapeIds)];\n      shapeIds.forEach(shapeId => {\n        const itemIndex = this.reviews.findIndex(review => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && review.shapeIds.includes(shapeId));\n        const item = this.reviews[itemIndex];\n        if (item) {\n          if (item.result === results.result) {\n            const n = currentIds.findIndex(key => key === shapeId);\n            if (n >= 0) {\n              currentIds.splice(n, 1);\n            }\n          } else {\n            const n = item.shapeIds.findIndex(key => key === shapeId);\n            if (n >= 0) {\n              item.shapeIds.splice(n, 1);\n            }\n          }\n          if (item.shapeIds.length === 0) {\n            this.reviews.splice(itemIndex, 1);\n          }\n        }\n      });\n      if (currentIds.length) {\n        this.reviews.push({\n          instanceId,\n          groupName,\n          shapeIds: currentIds,\n          frameIndex,\n          result: results.result,\n          type: results.type,\n          comment: results.comment\n        });\n      }\n    }\n    this.selectedReview = undefined;\n    if (JSON.stringify(prevReviews) !== JSON.stringify(toJS(this.reviews))) {\n      this.changeUndo(prevReviews);\n    }\n  }\n  changeUndo(prevReviews) {\n    const before = [];\n    const after = [];\n    before.push({\n      type: 'reviews',\n      status: prevReviews\n    });\n    after.push({\n      type: 'reviews',\n      status: this.reviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n  setScriptResult(result) {\n    if (result) {\n      const {\n        results,\n        hasCustomError\n      } = result;\n      this.customWarnings = results;\n      this.hasCustomError = hasCustomError;\n    } else {\n      this.customWarnings = [];\n      this.hasCustomError = false;\n    }\n    if (this.hasCustomError) {\n      this.errors = {\n        [ValidationType.CUSTOM]: this.hasCustomError ? formatMessage('VALIDATION_CUSTOM_ERROR') : ''\n      };\n    }\n    this.blockSubmitErrors = this.customWarnings.filter(warning => warning.warningType === ValidationType.CUSTOM && warning.blockSubmit === true);\n  }\n  setDrawMode(mode) {\n    this.drawMode = mode;\n  }\n}, _applyDecoratedDescriptor(_class.prototype, \"qaWarnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"qaWarnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"warnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"warnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"frameReviewsMap\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"frameReviewsMap\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEnabled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEnabled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEditable\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEditable\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reviewResultTypes\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"reviewResultTypes\"), _class.prototype), _class);\nexport default ReviewsStore;","map":{"version":3,"names":["observable","computed","makeObservable","action","toJS","ReviewResult","ValidationType","TOOL_MODE","isReviewEditable","isAnnotationReadonly","formatMessage","ReviewsStore","_class","qaWarnings","reviews","length","filter","review","result","REJECT","map","id","instanceId","groupName","shapeIds","frames","frameIndex","message","type","join","comment","warningType","QUALITY","warnings","customWarnings","frameReviewsMap","reviewsMap","forEach","results","constructor","rootStore","toolMode","LABELING","drawMode","issueTypes","selectedReview","hasCustomError","blockSubmitErrors","errors","deleteReviewByInstance","currentReview","isEnabled","prevReviews","index","findIndex","JSON","stringify","splice","changeUndo","setSelectedReview","setInitialData","setReview","setScriptResult","setDrawMode","readonly","isEditable","reviewResultTypes","AUDIT","APPROVE","SUSPEND","init","split","i","trim","Array","isArray","v","undefined","push","oldReview","getReview","getReviewsForSave","find","reviewItem","currentIds","shapeId","itemIndex","includes","item","n","key","before","after","status","undo","saveStatus","CUSTOM","warning","blockSubmit","mode","_applyDecoratedDescriptor","prototype","Object","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/store/ReviewsStore.ts"],"sourcesContent":["import { observable, computed, makeObservable, action, toJS } from 'mobx';\nimport { RootStoreType } from './RootStore';\nimport { Status } from './UndoStore';\nimport { Review, ReviewResult, ReviewData, ValidationType } from '../types';\nimport { IWarning } from '../../common/tabs-menu/Validator';\nimport { TOOL_MODE, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport formatMessage from '../locales';\n\nexport interface PointReviewResult {[id: number]: ReviewResult};\ninterface ShapeReviewResult {[id: string]: ReviewResult};\nexport interface GroupReviewsMap {\n  [groupName: string]: PointReviewResult | ShapeReviewResult;\n}\nexport interface InstanceReviewsMap {\n  [instanceId: string]: GroupReviewsMap\n}\n\nexport interface FrameReviewsMap {\n  [frameIndex: number]: InstanceReviewsMap\n}\n\n/**\n * reviews stores\n */\nclass ReviewsStore {\n  rootStore: RootStoreType;\n\n  /**\n   * current tool mode\n   */\n  toolMode: TOOL_MODE = TOOL_MODE.LABELING;\n\n  /**\n   * canvas draw\n   */\n  drawMode = true;\n\n  /**\n   * issue types\n   */\n  issueTypes: string[] = [];\n\n  /**\n   * all reviews\n   */\n  reviews: Review[] = [];\n\n  /**\n   * selected review\n   */\n  selectedReview?: Review;\n\n  /**\n   * custom warnings\n   */\n  customWarnings: IWarning[] = [];\n\n  /**\n   * has custom error\n   */\n  hasCustomError = false;\n\n  /**\n   * blockSubmitErrors\n   */\n  blockSubmitErrors: IWarning[] = [];\n\n  /**\n   * errors\n   */\n  errors?: {\n    [type: string]: string;\n  };\n\n  /**\n   * qa qarnings\n   */\n  @computed get qaWarnings() {\n    return this.reviews.length ? toJS(this.reviews)\n      .filter((review) => review.result === ReviewResult.REJECT).map((review) => ({\n        id: review.instanceId,\n        groupName: review.groupName,\n        shapeIds: review.shapeIds,\n        frames: [review.frameIndex],\n        message: review.type!.join(','),\n        comment: review.comment,\n        warningType: ValidationType.QUALITY\n      })) : [];\n  }\n\n  /**\n   * warnings\n   */\n  @computed get warnings() {\n    return (this.customWarnings.length || this.qaWarnings.length) ? [...toJS(this.customWarnings), ...this.qaWarnings] : [];\n  }\n\n  /**\n   * frame instance review mapping\n   */\n  @computed get frameReviewsMap() {\n    const reviewsMap: FrameReviewsMap = {};\n    this.reviews.forEach((review) => {\n      const { frameIndex, instanceId, groupName, shapeIds, result } = review;\n      const results: PointReviewResult | ShapeReviewResult = {};\n      shapeIds.forEach((id) => {\n        if (typeof id === 'string') {\n          (results as ShapeReviewResult)[(id as string)] = result;\n        } else {\n          (results as PointReviewResult)[(id as number)] = result;\n        }\n      });\n      if (!reviewsMap[frameIndex]) {\n        reviewsMap[frameIndex] = {\n          [instanceId]: {\n            [groupName]: {}\n          }\n        };\n      }\n      if (!reviewsMap[frameIndex][instanceId]) {\n        reviewsMap[frameIndex][instanceId] = {\n          [groupName]: {}\n        };\n      }\n      if (!reviewsMap[frameIndex][instanceId][groupName]) {\n        reviewsMap[frameIndex][instanceId][groupName] = {};\n      }\n      reviewsMap[frameIndex][instanceId][groupName] = {\n        ...reviewsMap[frameIndex][instanceId][groupName],\n        ...results\n      };\n    });\n    return reviewsMap;\n  }\n\n  constructor(rootStore: RootStoreType) {\n    makeObservable(this, {\n      reviews: observable,\n      selectedReview: observable,\n      errors: observable,\n      customWarnings: observable,\n      drawMode: observable,\n      setInitialData: action,\n      setSelectedReview: action,\n      setReview: action,\n      deleteReviewByInstance: action,\n      setScriptResult: action,\n      setDrawMode: action,\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  @computed get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  @computed get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * review result types\n   */\n  @computed get reviewResultTypes() {\n    return this.toolMode === TOOL_MODE.AUDIT ? [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n      ReviewResult.SUSPEND,\n    ] : [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n    ];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode: TOOL_MODE, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes.split(',').map((i) => i.trim()).filter((i) => !!i);\n    if (this.isEnabled) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(reviews: any) {\n    if (reviews && Array.isArray(reviews)) {\n      this.reviews = [];\n      reviews\n        .filter((v) => (!this.isEnabled && v.result === ReviewResult.REJECT) || this.isEnabled)\n        .forEach(({ instanceId, frameIndex, groupName, shapeIds, result, type, comment }: any) => {\n          if (\n            frameIndex !== undefined &&\n            instanceId !== undefined &&\n            groupName !== undefined &&\n            result !== undefined &&\n            Array.isArray(shapeIds) &&\n            shapeIds.length > 0\n          ) {\n            this.reviews.push({ instanceId, groupName, shapeIds, frameIndex, result, type, comment });\n          }\n        });\n    }\n  }\n\n  /**\n   * select review\n   * @param instanceId\n   */\n  setSelectedReview(review?: Review) {\n    if (review) {\n      const { frameIndex, instanceId, groupName, shapeIds, result } = review;\n      const oldReview = this.getReview(frameIndex, instanceId, groupName, shapeIds);\n      if (this.isEnabled) {\n        this.selectedReview = oldReview ? { ...oldReview, result } : review;\n      } else if (oldReview) {\n        this.selectedReview = oldReview;\n      }\n    } else {\n      this.selectedReview = undefined;\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    return this.reviews.map((review) => ({ ...review }));\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(frameIndex: number, instanceId: string, groupName: string, shapeIds: (string | number)[]) {\n    return this.reviews.find((review) => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(results: ReviewData, selectedReview = toJS(this.selectedReview)) {\n    if (!selectedReview || !this.isEnabled) {\n      this.selectedReview = undefined;\n      return;\n    }\n    const { frameIndex, instanceId, groupName, shapeIds } = selectedReview;\n    const prevReviews = toJS(this.reviews);\n    const index = prevReviews.findIndex((review) => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n    if (index >= 0) {\n      const reviewItem = this.reviews[index];\n      if (reviewItem.result !== results.result || reviewItem.type !== results.type || reviewItem.comment !== results.comment) {\n        reviewItem.result = results.result;\n        reviewItem.type = results.type;\n        reviewItem.comment = results.comment;\n      }\n    } else if (this.isEnabled) {\n      const currentIds = [...toJS(shapeIds)];\n      shapeIds.forEach((shapeId) => {\n        const itemIndex = this.reviews.findIndex((review) => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && review.shapeIds.includes(shapeId));\n        const item = this.reviews[itemIndex];\n        if (item) {\n          if (item.result === results.result) {\n            const n = currentIds.findIndex((key) => key === shapeId);\n            if (n >= 0) {\n              currentIds.splice(n, 1);\n            }\n          } else {\n            const n = item.shapeIds.findIndex((key) => key === shapeId);\n            if (n >= 0) {\n              item.shapeIds.splice(n, 1);\n            }\n          }\n          if (item.shapeIds.length === 0) {\n            this.reviews.splice(itemIndex, 1);\n          }\n        }\n      });\n      if (currentIds.length) {\n        this.reviews.push({ instanceId, groupName, shapeIds: currentIds, frameIndex, result: results.result, type: results.type, comment: results.comment });\n      }\n    }\n    this.selectedReview = undefined;\n    if (JSON.stringify(prevReviews) !== JSON.stringify(toJS(this.reviews))) {\n      this.changeUndo(prevReviews);\n    }\n  }\n\n  /**\n   * delete review\n   * @param instanceId\n   * @param frameIndex\n   */\n  deleteReviewByInstance = (currentReview = this.selectedReview) => {\n    if (this.isEnabled && currentReview) {\n      const { instanceId, frameIndex, groupName, shapeIds } = currentReview;\n      const prevReviews = [...this.reviews];\n      const index = this.reviews.findIndex((review) => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n      if (index >= 0) {\n        this.reviews.splice(index, 1);\n        this.changeUndo(prevReviews);\n      }\n      this.setSelectedReview();\n    }\n  };\n\n  changeUndo(prevReviews: Review[]) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    before.push({ type: 'reviews',\n      status: prevReviews\n    });\n    after.push({ type: 'reviews',\n      status: this.reviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n\n  setScriptResult(result?: {results: IWarning[]; hasCustomError: boolean}) {\n    if (result) {\n      const { results, hasCustomError } = result as {results: IWarning[]; hasCustomError: boolean};\n      this.customWarnings = results;\n      this.hasCustomError = hasCustomError;\n    } else {\n      this.customWarnings = [];\n      this.hasCustomError = false;\n    }\n    if (this.hasCustomError) {\n      this.errors = {\n        [ValidationType.CUSTOM]: this.hasCustomError ? formatMessage('VALIDATION_CUSTOM_ERROR') : '',\n      };\n    }\n    this.blockSubmitErrors = this.customWarnings.filter((warning) => warning.warningType === ValidationType.CUSTOM && warning.blockSubmit === true);\n  }\n\n  setDrawMode(mode: boolean) {\n    this.drawMode = mode;\n  }\n}\n\nexport default ReviewsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}