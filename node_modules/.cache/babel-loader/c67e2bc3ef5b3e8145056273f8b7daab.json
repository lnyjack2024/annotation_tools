{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\n/**\n * store for ontology\n * @class\n */\nexport default class OntologyStore {\n  /**\n   * selected category\n   * @getter\n   */\n  get selectedCategory() {\n    const currentCategory = this.getCategory(this.selectedCategoryName);\n    return currentCategory || this.categories[0];\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * categories\n     */\n    this.categories = [];\n    /**\n     * selected category name\n     */\n    this.selectedCategoryName = '';\n    /**\n     * current tool options (used for shape creation)\n     */\n    this.currentOptions = {\n      cols: 5,\n      // grid tool default cols\n      rows: 5 // grid tool default rows\n    };\n    /**\n     * enable categories\n     */\n    this.enableCategories = {};\n    /**\n     * can add shape tiers\n     */\n    this.canAddTiers = {};\n    makeAutoObservable(this, {\n      rootStore: false,\n      currentOptions: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload) {\n    var _this$categories$;\n    const categories = [];\n    const enableCategories = {};\n    const {\n      ontology\n    } = payload;\n    ontology.forEach((o, i) => {\n      categories.push({\n        className: o.class_name,\n        displayName: o.display_name || o.class_name,\n        displayColor: o.display_color,\n        type: o.type\n      });\n      enableCategories[o.class_name] = {\n        index: i,\n        first: true,\n        second: true\n      };\n    });\n    this.categories = categories;\n    this.selectedCategoryName = (_this$categories$ = this.categories[0]) === null || _this$categories$ === void 0 ? void 0 : _this$categories$.className;\n    this.enableCategories = enableCategories;\n  }\n\n  /**\n   * get category object\n   * @param categoryName\n   */\n  getCategory(categoryName) {\n    return toJS(this.categories.find(o => o.className === categoryName));\n  }\n\n  /**\n   * set selected category\n   * @param categoryName\n   */\n  selectCategory(categoryName) {\n    if (this.selectedCategoryName !== categoryName) {\n      // category changes\n      this.selectedCategoryName = categoryName;\n    }\n  }\n\n  /**\n   * get label config from category\n   * @param categoryName\n   */\n  getLabelConfigFromCategory(categoryName) {\n    const category = this.getCategory(categoryName);\n    return category === null || category === void 0 ? void 0 : category.labelConfig;\n  }\n\n  /**\n   * set can add tiers\n   */\n  setCanAddTiers(tiers) {\n    this.canAddTiers = tiers;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","toJS","OntologyStore","selectedCategory","currentCategory","getCategory","selectedCategoryName","categories","constructor","rootStore","currentOptions","cols","rows","enableCategories","canAddTiers","autoBind","init","payload","_this$categories$","ontology","forEach","o","i","push","className","class_name","displayName","display_name","displayColor","display_color","type","index","first","second","categoryName","find","selectCategory","getLabelConfigFromCategory","category","labelConfig","setCanAddTiers","tiers"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/store/OntologyStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport RootStore from './RootStore';\nimport { Payload, Category } from '../types';\n\n/**\n * store for ontology\n * @class\n */\nexport default class OntologyStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * categories\n   */\n  categories: Category[] = [];\n\n  /**\n   * selected category name\n   */\n  selectedCategoryName = '';\n\n  /**\n   * current tool options (used for shape creation)\n   */\n  currentOptions: {\n    cols: number;\n    rows: number;\n  } = {\n    cols: 5, // grid tool default cols\n    rows: 5, // grid tool default rows\n  };\n\n  /**\n   * enable categories\n   */\n  enableCategories: {[category: string]: {\n    index: number;\n    first: boolean;\n    second: boolean;\n  }} = {};\n\n  /**\n   * can add shape tiers\n   */\n  canAddTiers: {[category: string]: {\n    index: number;\n    first: boolean;\n    second: boolean;\n  }} = {};\n\n  /**\n   * selected category\n   * @getter\n   */\n  get selectedCategory() {\n    const currentCategory = this.getCategory(this.selectedCategoryName);\n    return currentCategory || this.categories[0];\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      currentOptions: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload: Payload) {\n    const categories: Category[] = [];\n    const enableCategories: {[category: string]: {\n      index: number;\n      first: boolean;\n      second: boolean;\n    }} = {};\n    const { ontology } = payload;\n    ontology.forEach((o, i) => {\n      categories.push({\n        className: o.class_name,\n        displayName: o.display_name || o.class_name,\n        displayColor: o.display_color,\n        type: o.type,\n      });\n      enableCategories[o.class_name] = {\n        index: i,\n        first: true,\n        second: true,\n      };\n    });\n    this.categories = categories;\n    this.selectedCategoryName = this.categories[0]?.className;\n    this.enableCategories = enableCategories;\n  }\n\n  /**\n   * get category object\n   * @param categoryName\n   */\n  getCategory(categoryName: string) {\n    return toJS(this.categories.find((o) => o.className === categoryName));\n  }\n\n  /**\n   * set selected category\n   * @param categoryName\n   */\n  selectCategory(categoryName: string) {\n    if (this.selectedCategoryName !== categoryName) {\n      // category changes\n      this.selectedCategoryName = categoryName;\n    }\n  }\n\n  /**\n   * get label config from category\n   * @param categoryName\n   */\n  getLabelConfigFromCategory(categoryName: string) {\n    const category = this.getCategory(categoryName);\n    return category?.labelConfig;\n  }\n\n  /**\n   * set can add tiers\n   */\n  setCanAddTiers(tiers: { [category: string]: {\n    index: number;\n    first: boolean;\n    second: boolean;\n  } }) {\n    this.canAddTiers = tiers;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}