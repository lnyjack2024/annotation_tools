{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport ReviewItem from '../model/ReviewItem';\nimport { ReviewMode, ReviewResult } from '../types';\nimport { TOOLBAR_HEIGHT, SIDEBAR_WIDTH } from '../constants';\nimport { getToolTypeFromFrameData } from '../utils';\nimport { ToolMode } from '../../../utils/tool-mode';\nimport Anchor, { EventAction } from '../../common/shapes/anchors/Anchor';\nimport Cursor from '../../common/Cursor';\nimport ApproveIcon from '../images/approve.png';\nimport RejectIcon from '../images/reject.png';\nimport SuspendIcon from '../images/suspend.png';\nimport ApproveSelectedIcon from '../images/approve_selected.png';\nimport RejectSelectedIcon from '../images/reject_selected.png';\nimport SuspendSelectedIcon from '../images/suspend_selected.png';\nfunction getIconByReviewResultType(type) {\n  switch (type) {\n    case ReviewResult.APPROVE:\n      return {\n        icon: ApproveIcon,\n        selectedIcon: ApproveSelectedIcon\n      };\n    case ReviewResult.REJECT:\n      return {\n        icon: RejectIcon,\n        selectedIcon: RejectSelectedIcon\n      };\n    case ReviewResult.SUSPEND:\n      return {\n        icon: SuspendIcon,\n        selectedIcon: SuspendSelectedIcon\n      };\n    default:\n  }\n  return {};\n}\nfunction getReviewResultSummary(reviews) {\n  const allResults = new Set(reviews.map(r => r.result));\n  if (allResults.has(ReviewResult.REJECT)) {\n    return ReviewResult.REJECT;\n  }\n  if (allResults.has(ReviewResult.SUSPEND)) {\n    return ReviewResult.SUSPEND;\n  }\n  if (allResults.has(ReviewResult.APPROVE)) {\n    return ReviewResult.APPROVE;\n  }\n  return undefined;\n}\n\n/**\n * store for reviews\n * @class\n */\nexport default class ReviewsStore {\n  /**\n   * review result types based on tool mode\n   * @getter\n   */\n  get reviewResultTypes() {\n    return this.rootStore.jobProxy.toolMode === ToolMode.AUDIT ? [ReviewResult.APPROVE, ReviewResult.REJECT, ReviewResult.SUSPEND] : [ReviewResult.APPROVE, ReviewResult.REJECT];\n  }\n\n  /**\n   * all reviews\n   * @getter\n   */\n  get allReviews() {\n    return Object.values(this.reviews).flatMap(frameReviews => frameReviews);\n  }\n\n  /**\n   * warnings count\n   * @getter\n   */\n  get warningCount() {\n    const reviews = this.rootStore.review.allReviews.filter(r => r.result === ReviewResult.REJECT);\n    return reviews.length;\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * issue types\n     */\n    this.issueTypes = [];\n    /**\n     * all reviews\n     */\n    this.reviews = {};\n    /**\n     * layer for reviews\n     */\n    this.reviewLayer = void 0;\n    /**\n     * review layer offset (according to document body)\n     */\n    this.reviewLayerOffset = {\n      x: SIDEBAR_WIDTH,\n      y: TOOLBAR_HEIGHT * 2\n    };\n    /**\n     * review anchors\n     */\n    this.anchors = {};\n    /**\n     * selected review id\n     */\n    this.selectedReviewId = '';\n    /**\n     * selected anchor\n     */\n    this.selectedAnchor = null;\n    /**\n     * selected review result type (default is approve)\n     */\n    this.selectedReviewResultType = ReviewResult.APPROVE;\n    /**\n     * is adding review anchor\n     */\n    this.addMode = false;\n    /**\n     * current editing review instance\n     */\n    this.editingReview = null;\n    /**\n     * current hovered review instance\n     */\n    this.hoveredReview = null;\n    /**\n     * hovered anchor\n     */\n    this.hoveredAnchor = null;\n    /**\n     * store id preserved before review edit\n     */\n    this.reviewStoreId = '';\n    makeAutoObservable(this, {\n      rootStore: false,\n      reviewLayer: false,\n      reviewLayerOffset: false,\n      anchors: false,\n      selectedReviewId: false,\n      selectedAnchor: false,\n      reviewStoreId: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   * @param initialReviews\n   */\n  init(payload, initialReviews) {\n    if (typeof payload.issue_types === 'string') {\n      this.issueTypes = payload.issue_types.split(',').map(i => i.trim()).filter(i => !!i);\n    }\n    if (!this.rootStore.isLabeling && initialReviews && Array.isArray(initialReviews)) {\n      const reviews = {};\n      initialReviews.forEach(review => {\n        const {\n          frameIndex\n        } = review;\n        if (!reviews[frameIndex]) {\n          reviews[frameIndex] = [];\n        }\n        const reviewItem = new ReviewItem(review);\n        reviews[frameIndex].push(reviewItem);\n      });\n      this.reviews = reviews;\n    }\n  }\n\n  /**\n   * get review in current frame by instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewForInstanceItem(instanceItem, camera = this.rootStore.frame.currentCamera, frameIndex = this.rootStore.frame.currentFrame) {\n    if (instanceItem) {\n      if (this.reviews[frameIndex]) {\n        const reviews = this.reviews[frameIndex].filter(r => r.camera === camera && r.instanceItemId === instanceItem.id);\n        return getReviewResultSummary(reviews);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * get total review result for instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewResultForInstanceItem(instanceItem, camera = this.rootStore.frame.currentCamera) {\n    const reviews = this.allReviews.filter(r => r.camera === camera && r.instanceItemId === instanceItem.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get total review result for instance\n   * @param instance\n   */\n  getReviewResultForInstance(instance) {\n    const reviews = this.allReviews.filter(r => r.instanceId === instance.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get instances json data (for save)\n   */\n  reviewsJSON() {\n    return Object.values(this.reviews).flatMap(reviews => reviews.map(r => r.toJSON()));\n  }\n\n  /**\n   * get review statistics\n   */\n  getReviewStatistics() {\n    const approvedFrameSet = new Set();\n    const rejectedFrameSet = new Set();\n    const rejectedElements = new Set();\n    const issueMap = {};\n    const approvedEleMap = {};\n    const rejectedEleMap = {};\n    const {\n      instances\n    } = this.rootStore.instance;\n    Object.values(this.reviews).forEach(reviews => {\n      reviews.forEach(review => {\n        const {\n          result,\n          type,\n          instanceId,\n          instanceItemId,\n          camera,\n          frameIndex\n        } = review;\n        if (result === ReviewResult.REJECT) {\n          // reject\n          let eleKey = '';\n          if (instanceId && instanceItemId) {\n            var _instances$instanceId, _instances$instanceId2, _instances$instanceId3;\n            if ((_instances$instanceId = instances[instanceId]) === null || _instances$instanceId === void 0 ? void 0 : (_instances$instanceId2 = _instances$instanceId.items[instanceItemId]) === null || _instances$instanceId2 === void 0 ? void 0 : (_instances$instanceId3 = _instances$instanceId2.cameras[camera]) === null || _instances$instanceId3 === void 0 ? void 0 : _instances$instanceId3.frames[frameIndex]) {\n              // shape exists\n              eleKey = `${instanceId}-${instanceItemId}-${camera}-${frameIndex}`;\n            }\n          }\n          rejectedFrameSet.add(frameIndex);\n          if (eleKey) {\n            rejectedElements.add(eleKey);\n          }\n          type === null || type === void 0 ? void 0 : type.forEach(t => {\n            if (!issueMap[t]) {\n              issueMap[t] = {\n                count: 0,\n                eleSet: new Set()\n              };\n            }\n            issueMap[t].count += 1;\n            if (eleKey) {\n              issueMap[t].eleSet.add(eleKey);\n            }\n          });\n        } else {\n          // approve, or suspend\n          approvedFrameSet.add(frameIndex);\n        }\n      });\n    });\n\n    // filter out rejected frames\n    new Set(approvedFrameSet).forEach(frame => {\n      if (rejectedFrameSet.has(frame)) {\n        approvedFrameSet.delete(frame);\n      }\n    });\n    const allInstances = Object.values(instances);\n    for (let i = 0; i < allInstances.length; i += 1) {\n      const instance = allInstances[i];\n      const items = Object.values(instance.items);\n      for (let j = 0; j < items.length; j += 1) {\n        const item = items[j];\n        const cameras = Object.values(item.cameras);\n        for (let k = 0; k < cameras.length; k += 1) {\n          const camera = cameras[k];\n          const frames = Object.values(camera.frames);\n          for (let l = 0; l < frames.length; l += 1) {\n            const frame = frames[l];\n            const shape = getToolTypeFromFrameData(frame);\n            if (shape) {\n              const {\n                frameIndex\n              } = frame;\n              const eleKey = `${instance.id}-${item.id}-${camera.camera}-${frameIndex}`;\n              if (rejectedElements.has(eleKey)) {\n                // shape rejected\n                if (!rejectedEleMap[shape]) {\n                  rejectedEleMap[shape] = 0;\n                }\n                rejectedEleMap[shape] += 1;\n              } else if (approvedFrameSet.has(frameIndex) || rejectedFrameSet.has(frameIndex)) {\n                // shape approved\n                // or not reviewed but in frames with review status\n                if (!approvedEleMap[shape]) {\n                  approvedEleMap[shape] = 0;\n                }\n                approvedEleMap[shape] += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n    return {\n      issues: Object.keys(issueMap).reduce((acc, curr) => {\n        const {\n          count,\n          eleSet\n        } = issueMap[curr];\n        acc[curr] = {\n          count,\n          elements: eleSet.size\n        };\n        return acc;\n      }, {}),\n      frames: {\n        approved: approvedFrameSet.size,\n        rejected: rejectedFrameSet.size\n      },\n      elements: {\n        approved: {\n          ...approvedEleMap\n        },\n        rejected: {\n          ...rejectedEleMap\n        }\n      }\n    };\n  }\n\n  /**\n   * set layer for review anchors\n   * @param layer\n   */\n  setReviewLayer(layer) {\n    this.reviewLayer = layer;\n  }\n\n  /**\n   * set layer offset\n   * @param x\n   * @param y\n   */\n  setReviewLayerOffset(x, y) {\n    this.reviewLayerOffset.x = x;\n    this.reviewLayerOffset.y = y;\n  }\n\n  /**\n   * setup anchors in current frame & current camera\n   */\n  setupReviewAnchors() {\n    this.clearAnchors();\n    const {\n      cameraViews,\n      currentFrame\n    } = this.rootStore.frame;\n    (this.reviews[currentFrame] || []).forEach(review => {\n      const {\n        id,\n        camera,\n        result,\n        x,\n        y\n      } = review;\n      if (!this.rootStore.isRework || result === ReviewResult.REJECT) {\n        // only show reject anchors when rework\n        const cameraView = cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.createReviewAnchor(result, x, y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.anchors[id] = {\n              anchor,\n              camera\n            };\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * create anchor instance\n   * @param type\n   * @param x\n   * @param y\n   * @param container\n   * @param viewScale\n   */\n  createReviewAnchor(type, x, y, container = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (container) {\n      const {\n        icon,\n        selectedIcon\n      } = getIconByReviewResultType(type);\n      if (icon && selectedIcon) {\n        const anchor = new Anchor({\n          container,\n          scale: viewScale,\n          x,\n          y,\n          img: icon,\n          selectedImg: selectedIcon\n        });\n        this.addAnchorListeners(anchor);\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * get review instance by anchor instance\n   * @param anchor\n   */\n  getReviewByAnchor(anchor) {\n    const reviewId = Object.keys(this.anchors).find(id => this.anchors[id].anchor === anchor);\n    if (reviewId) {\n      return this.reviews[this.rootStore.frame.currentFrame].find(r => r.id === reviewId);\n    }\n    return undefined;\n  }\n\n  /**\n   * add listeners for anchor\n   * @param anchor\n   */\n  addAnchorListeners(anchor) {\n    anchor.on(EventAction.SELECTED, a => {\n      if (this.addMode) {\n        return;\n      }\n      const review = this.getReviewByAnchor(a);\n      if (review) {\n        this.selectReview(review, a);\n\n        // select related instance\n        let instance;\n        let instanceItem;\n        if (review.instanceId) {\n          instance = this.rootStore.instance.getInstanceById(review.instanceId);\n          if (instance && review.instanceItemId) {\n            instanceItem = instance.items[review.instanceItemId];\n          }\n        }\n        if (instanceItem) {\n          this.rootStore.instance.selectInstanceItem(instanceItem);\n        } else if (instance) {\n          this.rootStore.instance.selectInstance(instance);\n        }\n\n        // open modal in review mode\n        if (this.rootStore.config.reviewMode === ReviewMode.REVIEW) {\n          this.reviewStoreId = this.rootStore.undo.preserve({\n            reviews: [review.toJSON()]\n          });\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OVER, a => {\n      if (this.rootStore.config.reviewMode === ReviewMode.LABELING) {\n        // only show comment in labeling mode\n        const review = this.getReviewByAnchor(a);\n        if (review) {\n          this.setHoveredReview(review, a);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OUT, () => {\n      this.setHoveredReview(null, null);\n    });\n  }\n\n  /**\n   * set editing review\n   * @param review\n   */\n  setEditingReview(review) {\n    this.editingReview = review;\n  }\n\n  /**\n   * set hovered review\n   * @param review\n   */\n  setHoveredReview(review, anchor) {\n    this.hoveredReview = review;\n    this.hoveredAnchor = anchor;\n  }\n\n  /**\n   * select review\n   * @param review\n   * @param anchor\n   */\n  selectReview(review, anchor) {\n    if (this.selectedAnchor && this.selectedAnchor !== anchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = review.id;\n    this.selectedAnchor = anchor;\n    this.selectedAnchor.selected = true;\n  }\n\n  /**\n   * unselect review\n   */\n  unselectReview() {\n    if (this.selectedAnchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n  }\n\n  /**\n   * clear all anchors\n   */\n  clearAnchors() {\n    Object.values(this.anchors).forEach(({\n      anchor\n    }) => {\n      anchor.destroy();\n    });\n    this.anchors = {};\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n    this.setEditingReview(null);\n    this.setHoveredReview(null, null);\n    this.reviewStoreId = '';\n  }\n\n  /**\n   * get anchors for camera\n   * @param camera\n   */\n  getAnchorsForCamera(camera = this.rootStore.frame.currentCamera) {\n    return Object.values(this.anchors).filter(i => i.camera === camera);\n  }\n\n  /**\n   * update anchors' scale\n   * @param scale\n   */\n  updateAnchorsScale(scale) {\n    this.getAnchorsForCamera().forEach(({\n      anchor\n    }) => {\n      anchor.setScale(scale);\n    });\n  }\n\n  /**\n   * update anchors' interactive\n   * @param interactive\n   */\n  updateAnchorsInteractive(interactive) {\n    Object.values(this.anchors).forEach(({\n      anchor\n    }) => {\n      anchor.interactive = interactive;\n    });\n  }\n  /**\n   * activate review tool\n   * @param type\n   */\n  activateReview(type) {\n    this.selectedReviewResultType = type;\n    this.setAddMode(true);\n  }\n\n  /**\n   * activate review tool by hotkey\n   * @param hotkey\n   */\n  activateReviewByHotkey(hotkey) {\n    if (hotkey === 1) {\n      // approve\n      this.activateReview(ReviewResult.APPROVE);\n    } else if (hotkey === 2) {\n      // reject\n      this.activateReview(ReviewResult.REJECT);\n    } else if (hotkey === 3) {\n      // suspend\n      this.activateReview(ReviewResult.SUSPEND);\n    }\n  }\n\n  /**\n   * set review add mode\n   * @param addMode\n   */\n  setAddMode(addMode) {\n    this.addMode = addMode;\n    this.rootStore.config.cursor = addMode ? Cursor.POINTER : Cursor.DEFAULT;\n    this.updateAnchorsInteractive(!addMode);\n  }\n\n  /**\n   * add review when click canvas\n   * @param point\n   * @param layer\n   * @param viewScale\n   */\n  addReview(point, layer = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (this.addMode) {\n      let instanceId;\n      let instanceItemId;\n      const {\n        isSingleSelected,\n        selectedInstances,\n        selectedInstanceItems\n      } = this.rootStore.instance;\n      if (isSingleSelected) {\n        // link to the shape\n        instanceItemId = selectedInstanceItems[0].id;\n        instanceId = selectedInstances[0].id;\n      }\n      const anchor = this.createReviewAnchor(this.selectedReviewResultType, point.x, point.y, layer, viewScale);\n      if (anchor) {\n        const {\n          currentCamera,\n          currentFrame\n        } = this.rootStore.frame;\n        const review = new ReviewItem({\n          camera: currentCamera,\n          frameIndex: currentFrame,\n          result: this.selectedReviewResultType,\n          instanceId,\n          instanceItemId,\n          position: {\n            x: point.x,\n            y: point.y\n          }\n        });\n        this.anchors[review.id] = {\n          anchor,\n          camera: currentCamera\n        };\n        this.selectReview(review, anchor);\n        this.setAddMode(false);\n        if (review.result === ReviewResult.REJECT) {\n          // open modal\n          this.reviewStoreId = this.rootStore.undo.preserve();\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        } else {\n          // save directly\n          this.insertReview(review);\n          this.unselectReview();\n        }\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * insert review\n   * @param review\n   */\n  insertReview(review) {\n    const storeId = this.rootStore.undo.preserve();\n    const {\n      frameIndex\n    } = review;\n    if (!this.reviews[frameIndex]) {\n      this.reviews[frameIndex] = [];\n    }\n    this.reviews[frameIndex].push(review);\n    this.rootStore.undo.save(storeId, {\n      reviews: [review.toJSON()]\n    });\n  }\n\n  /**\n   * update review\n   * @param review\n   */\n  updateReview(review) {\n    if (this.reviewStoreId) {\n      const {\n        frameIndex\n      } = review;\n      if (!this.reviews[frameIndex]) {\n        this.reviews[frameIndex] = [];\n      }\n      if (this.reviews[frameIndex].indexOf(review) < 0) {\n        this.reviews[frameIndex].push(review);\n      }\n      this.rootStore.undo.save(this.reviewStoreId, {\n        reviews: [review.toJSON()]\n      });\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete review\n   * @param review\n   * @param anchor\n   */\n  deleteReview(review, anchor) {\n    const {\n      id,\n      frameIndex\n    } = review;\n    const frameReviews = this.reviews[frameIndex] || [];\n    const index = frameReviews.findIndex(r => r.id === id);\n    let existed = false;\n    if (index >= 0) {\n      existed = true;\n      frameReviews.splice(index, 1);\n    }\n    anchor.destroy();\n    if (this.anchors[id]) {\n      delete this.anchors[id];\n    }\n    if (existed && this.reviewStoreId) {\n      this.rootStore.undo.save(this.reviewStoreId);\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete reviews by reviewIds\n   * @param reviewResObj\n   */\n  deleteReviews(reviewResObj) {\n    const reviewStoreId = this.rootStore.undo.preserve({\n      reviews: this.reviewsJSON()\n    });\n    const reviewIds = Object.keys(reviewResObj);\n    for (let index = 0; index < reviewIds.length; index += 1) {\n      const reviewItemId = reviewIds[index];\n      const review = reviewResObj[reviewItemId];\n      const {\n        frameIndex\n      } = review;\n      const frameReviews = this.reviews[frameIndex] || [];\n      const frameReviewIndex = frameReviews.findIndex(r => r.id === reviewItemId);\n      if (frameReviewIndex >= 0) {\n        frameReviews.splice(frameReviewIndex, 1);\n      }\n      if (this.anchors[reviewItemId]) {\n        const anchor = this.anchors[reviewItemId].anchor;\n        anchor.destroy();\n        delete this.anchors[reviewItemId];\n      }\n    }\n    if (reviewStoreId) {\n      this.rootStore.undo.save(reviewStoreId, {\n        reviews: this.reviewsJSON()\n      });\n    }\n  }\n\n  /**\n   * clear all reviews and anchors\n   */\n  clearReviewsAndAnchors() {\n    const reviewStoreId = this.rootStore.undo.preserve({\n      reviews: this.reviewsJSON()\n    });\n    this.reviews = {};\n    this.clearAnchors();\n    if (reviewStoreId) {\n      this.rootStore.undo.save(reviewStoreId, {\n        reviews: []\n      });\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewResult(review, result, anchor) {\n    if (review.result !== result) {\n      review.result = result;\n      if (result === ReviewResult.APPROVE) {\n        review.type = [];\n        review.comment = '';\n      }\n      // update anchor\n      const {\n        icon,\n        selectedIcon\n      } = getIconByReviewResultType(result);\n      if (icon && selectedIcon) {\n        anchor.setImage(icon, selectedIcon);\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewInfo(review, {\n    type,\n    comment,\n    x,\n    y\n  }) {\n    if (type !== undefined) {\n      review.type = [...type];\n    }\n    if (comment !== undefined) {\n      review.comment = comment;\n    }\n    if (x !== undefined) {\n      review.x = x;\n    }\n    if (y !== undefined) {\n      review.y = y;\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","ReviewItem","ReviewMode","ReviewResult","TOOLBAR_HEIGHT","SIDEBAR_WIDTH","getToolTypeFromFrameData","ToolMode","Anchor","EventAction","Cursor","ApproveIcon","RejectIcon","SuspendIcon","ApproveSelectedIcon","RejectSelectedIcon","SuspendSelectedIcon","getIconByReviewResultType","type","APPROVE","icon","selectedIcon","REJECT","SUSPEND","getReviewResultSummary","reviews","allResults","Set","map","r","result","has","undefined","ReviewsStore","reviewResultTypes","rootStore","jobProxy","toolMode","AUDIT","allReviews","Object","values","flatMap","frameReviews","warningCount","review","filter","length","constructor","issueTypes","reviewLayer","reviewLayerOffset","x","y","anchors","selectedReviewId","selectedAnchor","selectedReviewResultType","addMode","editingReview","hoveredReview","hoveredAnchor","reviewStoreId","autoBind","init","payload","initialReviews","issue_types","split","i","trim","isLabeling","Array","isArray","forEach","frameIndex","reviewItem","push","getReviewForInstanceItem","instanceItem","camera","frame","currentCamera","currentFrame","instanceItemId","id","getReviewResultForInstanceItem","getReviewResultForInstance","instance","instanceId","reviewsJSON","toJSON","getReviewStatistics","approvedFrameSet","rejectedFrameSet","rejectedElements","issueMap","approvedEleMap","rejectedEleMap","instances","eleKey","_instances$instanceId","_instances$instanceId2","_instances$instanceId3","items","cameras","frames","add","t","count","eleSet","delete","allInstances","j","item","k","l","shape","issues","keys","reduce","acc","curr","elements","size","approved","rejected","setReviewLayer","layer","setReviewLayerOffset","setupReviewAnchors","clearAnchors","cameraViews","isRework","cameraView","anchor","createReviewAnchor","viewScale","container","config","scale","img","selectedImg","addAnchorListeners","getReviewByAnchor","reviewId","find","on","SELECTED","a","selectReview","getInstanceById","selectInstanceItem","selectInstance","reviewMode","REVIEW","undo","preserve","setEditingReview","setReviewModalVisible","POINTER_OVER","LABELING","setHoveredReview","POINTER_OUT","selected","unselectReview","destroy","getAnchorsForCamera","updateAnchorsScale","setScale","updateAnchorsInteractive","interactive","activateReview","setAddMode","activateReviewByHotkey","hotkey","cursor","POINTER","DEFAULT","addReview","point","isSingleSelected","selectedInstances","selectedInstanceItems","position","insertReview","storeId","save","updateReview","indexOf","deleteReview","index","findIndex","existed","splice","deleteReviews","reviewResObj","reviewIds","reviewItemId","frameReviewIndex","clearReviewsAndAnchors","updateReviewResult","comment","setImage","updateReviewInfo"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/ReviewStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { Container, Point } from 'pixi.js';\nimport RootStore from './RootStore';\nimport ReviewItem from '../model/ReviewItem';\nimport Instance from '../model/Instance';\nimport InstanceItem from '../model/InstanceItem';\nimport { Payload, Review, ReviewMode, ReviewResult } from '../types';\nimport { TOOLBAR_HEIGHT, SIDEBAR_WIDTH } from '../constants';\nimport { getToolTypeFromFrameData } from '../utils';\nimport { ToolMode } from '../../../utils/tool-mode';\nimport Anchor, { EventAction } from '../../common/shapes/anchors/Anchor';\nimport Cursor from '../../common/Cursor';\nimport ApproveIcon from '../images/approve.png';\nimport RejectIcon from '../images/reject.png';\nimport SuspendIcon from '../images/suspend.png';\nimport ApproveSelectedIcon from '../images/approve_selected.png';\nimport RejectSelectedIcon from '../images/reject_selected.png';\nimport SuspendSelectedIcon from '../images/suspend_selected.png';\n\nfunction getIconByReviewResultType(type: ReviewResult) {\n  switch (type) {\n    case ReviewResult.APPROVE:\n      return { icon: ApproveIcon, selectedIcon: ApproveSelectedIcon };\n    case ReviewResult.REJECT:\n      return { icon: RejectIcon, selectedIcon: RejectSelectedIcon };\n    case ReviewResult.SUSPEND:\n      return { icon: SuspendIcon, selectedIcon: SuspendSelectedIcon };\n    default:\n  }\n  return {};\n}\n\nfunction getReviewResultSummary(reviews: ReviewItem[]) {\n  const allResults = new Set(reviews.map((r) => r.result));\n  if (allResults.has(ReviewResult.REJECT)) {\n    return ReviewResult.REJECT;\n  }\n  if (allResults.has(ReviewResult.SUSPEND)) {\n    return ReviewResult.SUSPEND;\n  }\n  if (allResults.has(ReviewResult.APPROVE)) {\n    return ReviewResult.APPROVE;\n  }\n  return undefined;\n}\n\n/**\n * store for reviews\n * @class\n */\nexport default class ReviewsStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * issue types\n   */\n  issueTypes: string[] = [];\n\n  /**\n   * all reviews\n   */\n  reviews: { [frameIndex: number]: ReviewItem[] } = {};\n\n  /**\n   * layer for reviews\n   */\n  reviewLayer?: Container;\n\n  /**\n   * review layer offset (according to document body)\n   */\n  reviewLayerOffset = { x: SIDEBAR_WIDTH, y: TOOLBAR_HEIGHT * 2 };\n\n  /**\n   * review anchors\n   */\n  anchors: {\n    [reviewId: string]: {\n      anchor: Anchor;\n      camera: string;\n    };\n  } = {};\n\n  /**\n   * selected review id\n   */\n  selectedReviewId = '';\n\n  /**\n   * selected anchor\n   */\n  selectedAnchor: Anchor | null = null;\n\n  /**\n   * selected review result type (default is approve)\n   */\n  selectedReviewResultType: ReviewResult = ReviewResult.APPROVE;\n\n  /**\n   * is adding review anchor\n   */\n  addMode = false;\n\n  /**\n   * current editing review instance\n   */\n  editingReview: ReviewItem | null = null;\n\n  /**\n   * current hovered review instance\n   */\n  hoveredReview: ReviewItem | null = null;\n\n  /**\n   * hovered anchor\n   */\n  hoveredAnchor: Anchor | null = null;\n\n  /**\n   * store id preserved before review edit\n   */\n  reviewStoreId = '';\n\n  /**\n   * review result types based on tool mode\n   * @getter\n   */\n  get reviewResultTypes() {\n    return this.rootStore.jobProxy!.toolMode === ToolMode.AUDIT ? [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n      ReviewResult.SUSPEND,\n    ] : [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n    ];\n  }\n\n  /**\n   * all reviews\n   * @getter\n   */\n  get allReviews() {\n    return Object.values(this.reviews).flatMap((frameReviews) => frameReviews);\n  }\n\n  /**\n   * warnings count\n   * @getter\n   */\n  get warningCount() {\n    const reviews = this.rootStore.review.allReviews.filter((r) => r.result === ReviewResult.REJECT);\n    return reviews.length;\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      reviewLayer: false,\n      reviewLayerOffset: false,\n      anchors: false,\n      selectedReviewId: false,\n      selectedAnchor: false,\n      reviewStoreId: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   * @param initialReviews\n   */\n  init(payload: Payload, initialReviews?: Review[]) {\n    if (typeof payload.issue_types === 'string') {\n      this.issueTypes = payload.issue_types.split(',').map((i) => i.trim()).filter((i) => !!i);\n    }\n    if (!this.rootStore.isLabeling && initialReviews && Array.isArray(initialReviews)) {\n      const reviews: { [frameIndex: number]: ReviewItem[] } = {};\n      initialReviews.forEach((review) => {\n        const { frameIndex } = review;\n        if (!reviews[frameIndex]) {\n          reviews[frameIndex] = [];\n        }\n        const reviewItem = new ReviewItem(review);\n        reviews[frameIndex].push(reviewItem);\n      });\n      this.reviews = reviews;\n    }\n  }\n\n  /**\n   * get review in current frame by instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewForInstanceItem(\n    instanceItem?: InstanceItem | null,\n    camera = this.rootStore.frame.currentCamera,\n    frameIndex = this.rootStore.frame.currentFrame,\n  ) {\n    if (instanceItem) {\n      if (this.reviews[frameIndex]) {\n        const reviews = this.reviews[frameIndex].filter((r) => r.camera === camera && r.instanceItemId === instanceItem.id);\n        return getReviewResultSummary(reviews);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * get total review result for instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewResultForInstanceItem(\n    instanceItem: InstanceItem,\n    camera = this.rootStore.frame.currentCamera,\n  ) {\n    const reviews = this.allReviews.filter((r) => r.camera === camera && r.instanceItemId === instanceItem.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get total review result for instance\n   * @param instance\n   */\n  getReviewResultForInstance(instance: Instance) {\n    const reviews = this.allReviews.filter((r) => r.instanceId === instance.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get instances json data (for save)\n   */\n  reviewsJSON() {\n    return Object.values(this.reviews).flatMap((reviews) => reviews.map((r) => r.toJSON()));\n  }\n\n  /**\n   * get review statistics\n   */\n  getReviewStatistics() {\n    const approvedFrameSet = new Set<number>();\n    const rejectedFrameSet = new Set<number>();\n    const rejectedElements = new Set<string>();\n    const issueMap: {\n      [type: string]: {\n        count: number;\n        eleSet: Set<string>;\n      }\n    } = {};\n    const approvedEleMap: {\n      [type: string]: number;\n    } = {};\n    const rejectedEleMap: {\n      [type: string]: number;\n    } = {};\n\n    const { instances } = this.rootStore.instance;\n    Object.values(this.reviews).forEach((reviews) => {\n      reviews.forEach((review) => {\n        const { result, type, instanceId, instanceItemId, camera, frameIndex } = review;\n        if (result === ReviewResult.REJECT) {\n          // reject\n          let eleKey = '';\n          if (instanceId && instanceItemId) {\n            if (instances[instanceId]?.items[instanceItemId]?.cameras[camera]?.frames[frameIndex]) {\n              // shape exists\n              eleKey = `${instanceId}-${instanceItemId}-${camera}-${frameIndex}`;\n            }\n          }\n          rejectedFrameSet.add(frameIndex);\n          if (eleKey) {\n            rejectedElements.add(eleKey);\n          }\n          type?.forEach((t) => {\n            if (!issueMap[t]) {\n              issueMap[t] = {\n                count: 0,\n                eleSet: new Set(),\n              };\n            }\n            issueMap[t].count += 1;\n            if (eleKey) {\n              issueMap[t].eleSet.add(eleKey);\n            }\n          });\n        } else {\n          // approve, or suspend\n          approvedFrameSet.add(frameIndex);\n        }\n      });\n    });\n\n    // filter out rejected frames\n    new Set(approvedFrameSet).forEach((frame) => {\n      if (rejectedFrameSet.has(frame)) {\n        approvedFrameSet.delete(frame);\n      }\n    });\n\n    const allInstances = Object.values(instances);\n    for (let i = 0; i < allInstances.length; i += 1) {\n      const instance = allInstances[i];\n      const items = Object.values(instance.items);\n      for (let j = 0; j < items.length; j += 1) {\n        const item = items[j];\n        const cameras = Object.values(item.cameras);\n        for (let k = 0; k < cameras.length; k += 1) {\n          const camera = cameras[k];\n          const frames = Object.values(camera.frames);\n          for (let l = 0; l < frames.length; l += 1) {\n            const frame = frames[l];\n            const shape = getToolTypeFromFrameData(frame);\n            if (shape) {\n              const { frameIndex } = frame;\n              const eleKey = `${instance.id}-${item.id}-${camera.camera}-${frameIndex}`;\n              if (rejectedElements.has(eleKey)) {\n                // shape rejected\n                if (!rejectedEleMap[shape]) {\n                  rejectedEleMap[shape] = 0;\n                }\n                rejectedEleMap[shape] += 1;\n              } else if (approvedFrameSet.has(frameIndex) || rejectedFrameSet.has(frameIndex)) {\n                // shape approved\n                // or not reviewed but in frames with review status\n                if (!approvedEleMap[shape]) {\n                  approvedEleMap[shape] = 0;\n                }\n                approvedEleMap[shape] += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      issues: Object.keys(issueMap).reduce((acc, curr) => {\n        const { count, eleSet } = issueMap[curr];\n        acc[curr] = {\n          count,\n          elements: eleSet.size,\n        };\n        return acc;\n      }, {} as {[type: string]: { count: number; elements: number }}),\n      frames: {\n        approved: approvedFrameSet.size,\n        rejected: rejectedFrameSet.size,\n      },\n      elements: {\n        approved: { ...approvedEleMap },\n        rejected: { ...rejectedEleMap },\n      },\n    };\n  }\n\n  /**\n   * set layer for review anchors\n   * @param layer\n   */\n  setReviewLayer(layer: Container) {\n    this.reviewLayer = layer;\n  }\n\n  /**\n   * set layer offset\n   * @param x\n   * @param y\n   */\n  setReviewLayerOffset(x: number, y: number) {\n    this.reviewLayerOffset.x = x;\n    this.reviewLayerOffset.y = y;\n  }\n\n  /**\n   * setup anchors in current frame & current camera\n   */\n  setupReviewAnchors() {\n    this.clearAnchors();\n    const { cameraViews, currentFrame } = this.rootStore.frame;\n    (this.reviews[currentFrame] || []).forEach((review) => {\n      const { id, camera, result, x, y } = review;\n      if (!this.rootStore.isRework || result === ReviewResult.REJECT) {\n        // only show reject anchors when rework\n        const cameraView = cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.createReviewAnchor(result, x, y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.anchors[id] = {\n              anchor,\n              camera,\n            };\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * create anchor instance\n   * @param type\n   * @param x\n   * @param y\n   * @param container\n   * @param viewScale\n   */\n  createReviewAnchor(type: ReviewResult, x: number, y: number, container = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (container) {\n      const { icon, selectedIcon } = getIconByReviewResultType(type);\n      if (icon && selectedIcon) {\n        const anchor = new Anchor({\n          container,\n          scale: viewScale,\n          x,\n          y,\n          img: icon,\n          selectedImg: selectedIcon,\n        });\n        this.addAnchorListeners(anchor);\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * get review instance by anchor instance\n   * @param anchor\n   */\n  getReviewByAnchor(anchor: Anchor) {\n    const reviewId = Object.keys(this.anchors).find((id) => this.anchors[id].anchor === anchor);\n    if (reviewId) {\n      return this.reviews[this.rootStore.frame.currentFrame].find((r) => r.id === reviewId);\n    }\n    return undefined;\n  }\n\n  /**\n   * add listeners for anchor\n   * @param anchor\n   */\n  addAnchorListeners(anchor: Anchor) {\n    anchor.on(EventAction.SELECTED, (a) => {\n      if (this.addMode) {\n        return;\n      }\n      const review = this.getReviewByAnchor(a);\n      if (review) {\n        this.selectReview(review, a);\n\n        // select related instance\n        let instance;\n        let instanceItem;\n        if (review.instanceId) {\n          instance = this.rootStore.instance.getInstanceById(review.instanceId);\n          if (instance && review.instanceItemId) {\n            instanceItem = instance.items[review.instanceItemId];\n          }\n        }\n        if (instanceItem) {\n          this.rootStore.instance.selectInstanceItem(instanceItem);\n        } else if (instance) {\n          this.rootStore.instance.selectInstance(instance);\n        }\n\n        // open modal in review mode\n        if (this.rootStore.config.reviewMode === ReviewMode.REVIEW) {\n          this.reviewStoreId = this.rootStore.undo.preserve({ reviews: [review.toJSON()] });\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OVER, (a) => {\n      if (this.rootStore.config.reviewMode === ReviewMode.LABELING) { // only show comment in labeling mode\n        const review = this.getReviewByAnchor(a);\n        if (review) {\n          this.setHoveredReview(review, a);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OUT, () => {\n      this.setHoveredReview(null, null);\n    });\n  }\n\n  /**\n   * set editing review\n   * @param review\n   */\n  setEditingReview(review: ReviewItem | null) {\n    this.editingReview = review;\n  }\n\n  /**\n   * set hovered review\n   * @param review\n   */\n  setHoveredReview(review: ReviewItem | null, anchor: Anchor | null) {\n    this.hoveredReview = review;\n    this.hoveredAnchor = anchor;\n  }\n\n  /**\n   * select review\n   * @param review\n   * @param anchor\n   */\n  selectReview(review: ReviewItem, anchor: Anchor) {\n    if (this.selectedAnchor && this.selectedAnchor !== anchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = review.id;\n    this.selectedAnchor = anchor;\n    this.selectedAnchor.selected = true;\n  }\n\n  /**\n   * unselect review\n   */\n  unselectReview() {\n    if (this.selectedAnchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n  }\n\n  /**\n   * clear all anchors\n   */\n  clearAnchors() {\n    Object.values(this.anchors).forEach(({ anchor }) => {\n      anchor.destroy();\n    });\n    this.anchors = {};\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n    this.setEditingReview(null);\n    this.setHoveredReview(null, null);\n    this.reviewStoreId = '';\n  }\n\n  /**\n   * get anchors for camera\n   * @param camera\n   */\n  getAnchorsForCamera(camera = this.rootStore.frame.currentCamera) {\n    return Object.values(this.anchors).filter((i) => i.camera === camera);\n  }\n\n  /**\n   * update anchors' scale\n   * @param scale\n   */\n  updateAnchorsScale(scale: number) {\n    this.getAnchorsForCamera().forEach(({ anchor }) => {\n      anchor.setScale(scale);\n    });\n  }\n\n  /**\n   * update anchors' interactive\n   * @param interactive\n   */\n  updateAnchorsInteractive(interactive: boolean) {\n    Object.values(this.anchors).forEach(({ anchor }) => {\n      anchor.interactive = interactive;\n    });\n  };\n\n  /**\n   * activate review tool\n   * @param type\n   */\n  activateReview(type: ReviewResult) {\n    this.selectedReviewResultType = type;\n    this.setAddMode(true);\n  }\n\n  /**\n   * activate review tool by hotkey\n   * @param hotkey\n   */\n  activateReviewByHotkey(hotkey: number) {\n    if (hotkey === 1) {\n      // approve\n      this.activateReview(ReviewResult.APPROVE);\n    } else if (hotkey === 2) {\n      // reject\n      this.activateReview(ReviewResult.REJECT);\n    } else if (hotkey === 3) {\n      // suspend\n      this.activateReview(ReviewResult.SUSPEND);\n    }\n  }\n\n  /**\n   * set review add mode\n   * @param addMode\n   */\n  setAddMode(addMode: boolean) {\n    this.addMode = addMode;\n    this.rootStore.config.cursor = addMode ? Cursor.POINTER : Cursor.DEFAULT;\n    this.updateAnchorsInteractive(!addMode);\n  }\n\n  /**\n   * add review when click canvas\n   * @param point\n   * @param layer\n   * @param viewScale\n   */\n  addReview(point: Point, layer = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (this.addMode) {\n      let instanceId;\n      let instanceItemId;\n      const { isSingleSelected, selectedInstances, selectedInstanceItems } = this.rootStore.instance;\n      if (isSingleSelected) {\n        // link to the shape\n        instanceItemId = selectedInstanceItems[0].id;\n        instanceId = selectedInstances[0].id;\n      }\n      const anchor = this.createReviewAnchor(this.selectedReviewResultType, point.x, point.y, layer, viewScale);\n      if (anchor) {\n        const { currentCamera, currentFrame } = this.rootStore.frame;\n        const review = new ReviewItem({\n          camera: currentCamera,\n          frameIndex: currentFrame,\n          result: this.selectedReviewResultType,\n          instanceId,\n          instanceItemId,\n          position: { x: point.x, y: point.y },\n        });\n        this.anchors[review.id] = {\n          anchor,\n          camera: currentCamera,\n        };\n        this.selectReview(review, anchor);\n        this.setAddMode(false);\n        if (review.result === ReviewResult.REJECT) {\n          // open modal\n          this.reviewStoreId = this.rootStore.undo.preserve();\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        } else {\n          // save directly\n          this.insertReview(review);\n          this.unselectReview();\n        }\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * insert review\n   * @param review\n   */\n  insertReview(review: ReviewItem) {\n    const storeId = this.rootStore.undo.preserve();\n    const { frameIndex } = review;\n    if (!this.reviews[frameIndex]) {\n      this.reviews[frameIndex] = [];\n    }\n    this.reviews[frameIndex].push(review);\n    this.rootStore.undo.save(storeId, { reviews: [review.toJSON()] });\n  }\n\n  /**\n   * update review\n   * @param review\n   */\n  updateReview(review: ReviewItem) {\n    if (this.reviewStoreId) {\n      const { frameIndex } = review;\n      if (!this.reviews[frameIndex]) {\n        this.reviews[frameIndex] = [];\n      }\n      if (this.reviews[frameIndex].indexOf(review) < 0) {\n        this.reviews[frameIndex].push(review);\n      }\n      this.rootStore.undo.save(this.reviewStoreId, { reviews: [review.toJSON()] });\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete review\n   * @param review\n   * @param anchor\n   */\n  deleteReview(review: ReviewItem, anchor: Anchor) {\n    const { id, frameIndex } = review;\n    const frameReviews = this.reviews[frameIndex] || [];\n    const index = frameReviews.findIndex((r) => r.id === id);\n    let existed = false;\n    if (index >= 0) {\n      existed = true;\n      frameReviews.splice(index, 1);\n    }\n    anchor.destroy();\n    if (this.anchors[id]) {\n      delete this.anchors[id];\n    }\n    if (existed && this.reviewStoreId) {\n      this.rootStore.undo.save(this.reviewStoreId);\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete reviews by reviewIds\n   * @param reviewResObj\n   */\n  deleteReviews(reviewResObj: { [key: string]: ReviewItem }) {\n    const reviewStoreId = this.rootStore.undo.preserve({ reviews: this.reviewsJSON() });\n    const reviewIds = Object.keys(reviewResObj);\n    for (let index = 0; index < reviewIds.length; index += 1) {\n      const reviewItemId = reviewIds[index];\n      const review = reviewResObj[reviewItemId];\n      const { frameIndex } = review;\n      const frameReviews = this.reviews[frameIndex] || [];\n      const frameReviewIndex = frameReviews.findIndex((r) => r.id === reviewItemId);\n      if (frameReviewIndex >= 0) {\n        frameReviews.splice(frameReviewIndex, 1);\n      }\n      if (this.anchors[reviewItemId]) {\n        const anchor = this.anchors[reviewItemId].anchor;\n        anchor.destroy();\n        delete this.anchors[reviewItemId];\n      }\n    }\n    if (reviewStoreId) {\n      this.rootStore.undo.save(reviewStoreId, { reviews: this.reviewsJSON() });\n    }\n  }\n\n  /**\n   * clear all reviews and anchors\n   */\n  clearReviewsAndAnchors() {\n    const reviewStoreId = this.rootStore.undo.preserve({ reviews: this.reviewsJSON() });\n    this.reviews = {};\n    this.clearAnchors();\n    if (reviewStoreId) {\n      this.rootStore.undo.save(reviewStoreId, { reviews: [] });\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewResult(review: ReviewItem, result: ReviewResult, anchor: Anchor) {\n    if (review.result !== result) {\n      review.result = result;\n      if (result === ReviewResult.APPROVE) {\n        review.type = [];\n        review.comment = '';\n      }\n      // update anchor\n      const { icon, selectedIcon } = getIconByReviewResultType(result);\n      if (icon && selectedIcon) {\n        anchor.setImage(icon, selectedIcon);\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewInfo(review: ReviewItem, { type, comment, x, y }: { type?: string[], comment?: string, x?: number, y?: number }) {\n    if (type !== undefined) {\n      review.type = [...type];\n    }\n    if (comment !== undefined) {\n      review.comment = comment;\n    }\n    if (x !== undefined) {\n      review.x = x;\n    }\n    if (y !== undefined) {\n      review.y = y;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}