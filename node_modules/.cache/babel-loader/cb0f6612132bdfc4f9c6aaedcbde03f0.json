{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\nimport { parseLabelConfig } from '../utils';\n/**\n * store for ontology\n * @class\n */\nexport default class OntologyStore {\n  /**\n   * selected category\n   * @getter\n   */\n  get selectedCategory() {\n    const currentCategory = this.getCategory(this.selectedCategoryName);\n    return currentCategory || this.categories[0];\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * categories\n     */\n    this.categories = [];\n    /**\n     * selected category name\n     */\n    this.selectedCategoryName = '';\n    /**\n     * current tool options (used for shape creation)\n     */\n    this.currentOptions = {\n      cols: 5,\n      // grid tool default cols\n      rows: 5 // grid tool default rows\n    };\n    this.segmentConfig = {\n      fields: []\n    };\n    makeAutoObservable(this, {\n      rootStore: false,\n      currentOptions: false,\n      segmentConfig: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload) {\n    var _this$categories$;\n    const categories = [];\n    const {\n      ontology\n    } = payload;\n    (Array.isArray(ontology) ? ontology : []).forEach(o => {\n      categories.push({\n        className: o.class_name,\n        displayName: o.display_name || o.class_name,\n        displayColor: o.display_color\n      });\n    });\n    this.categories = categories;\n    this.selectedCategoryName = (_this$categories$ = this.categories[0]) === null || _this$categories$ === void 0 ? void 0 : _this$categories$.className;\n    if (payload.label_config_segment) {\n      this.segmentConfig = parseLabelConfig(payload.label_config_segment) || {\n        fields: []\n      };\n    }\n  }\n\n  /**\n   * get category object\n   * @param categoryName\n   */\n  getCategory(categoryName) {\n    return toJS(this.categories.find(o => o.className === categoryName));\n  }\n\n  /**\n   * get category by index\n   */\n  getCategoryByIndex(index) {\n    return this.categories[index];\n  }\n}","map":{"version":3,"names":["makeAutoObservable","toJS","parseLabelConfig","OntologyStore","selectedCategory","currentCategory","getCategory","selectedCategoryName","categories","constructor","rootStore","currentOptions","cols","rows","segmentConfig","fields","autoBind","init","payload","_this$categories$","ontology","Array","isArray","forEach","o","push","className","class_name","displayName","display_name","displayColor","display_color","label_config_segment","categoryName","find","getCategoryByIndex","index"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/store/OntologyStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport RootStore from './RootStore';\nimport { parseLabelConfig } from '../utils';\nimport { Payload, Category, FormConfig } from '../types';\n\n/**\n * store for ontology\n * @class\n */\nexport default class OntologyStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * categories\n   */\n  categories: Category[] = [];\n\n  /**\n   * selected category name\n   */\n  selectedCategoryName = '';\n\n  /**\n   * current tool options (used for shape creation)\n   */\n  currentOptions: {\n    cols: number;\n    rows: number;\n  } = {\n    cols: 5, // grid tool default cols\n    rows: 5, // grid tool default rows\n  };\n\n  segmentConfig: FormConfig = { fields: [] };\n\n  /**\n   * selected category\n   * @getter\n   */\n  get selectedCategory() {\n    const currentCategory = this.getCategory(this.selectedCategoryName);\n    return currentCategory || this.categories[0];\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      currentOptions: false,\n      segmentConfig: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload: Payload) {\n    const categories: Category[] = [];\n    const { ontology } = payload;\n    (Array.isArray(ontology) ? ontology : []).forEach((o) => {\n      categories.push({\n        className: o.class_name,\n        displayName: o.display_name || o.class_name,\n        displayColor: o.display_color,\n      });\n    });\n    this.categories = categories;\n    this.selectedCategoryName = this.categories[0]?.className;\n    if (payload.label_config_segment) {\n      this.segmentConfig = parseLabelConfig(payload.label_config_segment) || { fields: [] };\n    }\n  }\n\n  /**\n   * get category object\n   * @param categoryName\n   */\n  getCategory(categoryName: string) {\n    return toJS(this.categories.find((o) => o.className === categoryName));\n  }\n\n  /**\n   * get category by index\n   */\n  getCategoryByIndex(index: number) {\n    return this.categories[index];\n  }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,IAAI,QAAQ,MAAM;AAE/C,SAASC,gBAAgB,QAAQ,UAAU;AAG3C;AACA;AACA;AACA;AACA,eAAe,MAAMC,aAAa,CAAC;EA6BjC;AACF;AACA;AACA;EACE,IAAIC,gBAAgBA,CAAA,EAAG;IACrB,MAAMC,eAAe,GAAG,IAAI,CAACC,WAAW,CAAC,IAAI,CAACC,oBAAoB,CAAC;IACnE,OAAOF,eAAe,IAAI,IAAI,CAACG,UAAU,CAAC,CAAC,CAAC;EAC9C;EAEAC,WAAWA,CAACC,SAA2B,EAAE;IArCzC;AACF;AACA;IAFE,KAGAA,SAAS;IAET;AACF;AACA;IAFE,KAGAF,UAAU,GAAe,EAAE;IAE3B;AACF;AACA;IAFE,KAGAD,oBAAoB,GAAG,EAAE;IAEzB;AACF;AACA;IAFE,KAGAI,cAAc,GAGV;MACFC,IAAI,EAAE,CAAC;MAAE;MACTC,IAAI,EAAE,CAAC,CAAE;IACX,CAAC;IAAA,KAEDC,aAAa,GAAe;MAAEC,MAAM,EAAE;IAAG,CAAC;IAYxCf,kBAAkB,CAAC,IAAI,EAAE;MACvBU,SAAS,EAAE,KAAK;MAChBC,cAAc,EAAE,KAAK;MACrBG,aAAa,EAAE;IACjB,CAAC,EAAE;MACDE,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,IAAI,CAACN,SAAS,GAAGA,SAAS;EAC5B;;EAEA;AACF;AACA;AACA;EACEO,IAAIA,CAACC,OAAgB,EAAE;IAAA,IAAAC,iBAAA;IACrB,MAAMX,UAAsB,GAAG,EAAE;IACjC,MAAM;MAAEY;IAAS,CAAC,GAAGF,OAAO;IAC5B,CAACG,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,GAAGA,QAAQ,GAAG,EAAE,EAAEG,OAAO,CAAEC,CAAC,IAAK;MACvDhB,UAAU,CAACiB,IAAI,CAAC;QACdC,SAAS,EAAEF,CAAC,CAACG,UAAU;QACvBC,WAAW,EAAEJ,CAAC,CAACK,YAAY,IAAIL,CAAC,CAACG,UAAU;QAC3CG,YAAY,EAAEN,CAAC,CAACO;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,IAAI,CAACvB,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACD,oBAAoB,IAAAY,iBAAA,GAAG,IAAI,CAACX,UAAU,CAAC,CAAC,CAAC,cAAAW,iBAAA,uBAAlBA,iBAAA,CAAoBO,SAAS;IACzD,IAAIR,OAAO,CAACc,oBAAoB,EAAE;MAChC,IAAI,CAAClB,aAAa,GAAGZ,gBAAgB,CAACgB,OAAO,CAACc,oBAAoB,CAAC,IAAI;QAAEjB,MAAM,EAAE;MAAG,CAAC;IACvF;EACF;;EAEA;AACF;AACA;AACA;EACET,WAAWA,CAAC2B,YAAoB,EAAE;IAChC,OAAOhC,IAAI,CAAC,IAAI,CAACO,UAAU,CAAC0B,IAAI,CAAEV,CAAC,IAAKA,CAAC,CAACE,SAAS,KAAKO,YAAY,CAAC,CAAC;EACxE;;EAEA;AACF;AACA;EACEE,kBAAkBA,CAACC,KAAa,EAAE;IAChC,OAAO,IAAI,CAAC5B,UAAU,CAAC4B,KAAK,CAAC;EAC/B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}