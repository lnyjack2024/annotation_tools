{"ast":null,"code":"import { Graphics, Point } from 'pixi.js';\nimport Cursor from '../../Cursor';\n/**\n * Control base\n * @class\n */\nexport default class Control {\n  /**\n   * get color\n   * @getter\n   */\n  get color() {\n    return this._color;\n  }\n\n  /**\n   * set color\n   * @setter\n   */\n  set color(color) {\n    const shouldUpdate = this._color !== color;\n    this._color = color;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * get scale\n   * @getter\n   */\n  get scale() {\n    return this._scale;\n  }\n\n  /**\n   * set scale\n   * @setter\n   */\n  set scale(scale) {\n    const shouldUpdate = this._scale !== scale;\n    this._scale = scale;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * get size\n   * @getter\n   */\n  get size() {\n    return this._size;\n  }\n\n  /**\n   * set size\n   * @setter\n   */\n  set size(size) {\n    const shouldUpdate = this._size !== size;\n    this._size = size;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * get selected\n   * @getter\n   */\n  get selected() {\n    return this._selected;\n  }\n\n  /**\n   * set selected\n   * @setter\n   */\n  set selected(selected) {\n    const shouldUpdate = this._selected !== selected;\n    this._selected = selected;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return {\n      x: this.control.x,\n      y: this.control.y\n    };\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position({\n    x,\n    y\n  }) {\n    this.control.x = x;\n    this.control.y = y;\n  }\n\n  /**\n   * when control posistion change\n   */\n\n  constructor({\n    position,\n    container,\n    scale,\n    size,\n    color,\n    cursor,\n    onPositionChange,\n    onFinish,\n    onClick\n  }) {\n    /**\n     * control instance\n     * @member {PIXI.Graphics}\n     */\n    this.control = new Graphics();\n    /**\n     * control\n     */\n    this.cursor = Cursor.DEFAULT;\n    /**\n     * control container\n     * @member {PIXI.Container}\n     */\n    this.container = void 0;\n    /**\n     * control color\n     * @private {number}\n     */\n    this._color = 0xFFFF00;\n    /**\n     * scale factor\n     * @private {number}\n     */\n    this._scale = 1;\n    /**\n     * control size\n     * @private {number}\n     */\n    this._size = 4;\n    /**\n     * is selected\n     * @private {boolean}\n     */\n    this._selected = false;\n    /**\n     * control position when mouse down\n     * @private {PIXI.Point}\n     */\n    this._downPoint = null;\n    /**\n     * control position when mouse down\n     * @private {PIXI.Point}\n     */\n    this._mousePoint = null;\n    /**\n     * is control dragged\n     * @private {boolean}\n     */\n    this._dragged = false;\n    this.onPositionChange = void 0;\n    /**\n     * when control dragging ends\n     */\n    this.onFinish = void 0;\n    /**\n     * when control is clicked\n     */\n    this.onClick = void 0;\n    /**\n     * control pointer down\n     * @private\n     * @param event\n     */\n    this._handlePointerDown = event => {\n      event.stopPropagation();\n      this._dragged = false;\n      const point = event.data.getLocalPosition(this.container);\n      this._mousePoint = point;\n      this._downPoint = new Point(this.control.x, this.control.y);\n      if (this.onClick) {\n        this.onClick();\n      }\n    };\n    /**\n     * control pointer move\n     * @private\n     * @param event\n     */\n    this._handlePointerMove = event => {\n      if (this._downPoint || this._mousePoint) {\n        this._dragged = true;\n        const point = event.data.getLocalPosition(this.container);\n        this.move(point);\n        if (this.onPositionChange) {\n          this.onPositionChange(this.control.x, this.control.y, event);\n        }\n      }\n    };\n    /**\n     * control pointer up\n     * @private\n     * @param event\n     */\n    this._handlePointerUp = event => {\n      this._downPoint = null;\n      this._mousePoint = null;\n      if (this._dragged) {\n        if (this.onPositionChange) {\n          this.onPositionChange(this.control.x, this.control.y, event);\n        }\n        if (this.onFinish) {\n          this.onFinish();\n        }\n        this._dragged = false;\n      }\n    };\n    // setup\n    this.container = container;\n    this.scale = scale || this.container.scale.x;\n    if (size !== undefined) {\n      this._size = size;\n    }\n    if (color !== undefined) {\n      this._color = color;\n    }\n    this.onPositionChange = onPositionChange;\n    this.onFinish = onFinish;\n    this.onClick = onClick;\n    this.control.x = position.x;\n    this.control.y = position.y;\n    this.control.interactive = true;\n    // FIXME: use 9999 as max z-index\n    this.control.zIndex = 9999;\n    // setup control listeners\n    this.control.on('pointerdown', this._handlePointerDown);\n    this.control.on('pointerup', this._handlePointerUp);\n    this.control.on('pointerupoutside', this._handlePointerUp);\n    this.control.on('pointermove', this._handlePointerMove);\n    if (cursor) {\n      this.cursor = cursor;\n      this.control.on('pointerover', () => {\n        this.control.cursor = this.cursor;\n      });\n      this.control.on('pointerout', () => {\n        this.control.cursor = Cursor.DEFAULT;\n      });\n    }\n    this.container.addChild(this.control);\n  }\n\n  /**\n   * draw control\n   */\n\n  /**\n   * move control\n   * @param point new position\n   */\n\n  /**\n   * add and redraw\n   */\n  add() {\n    this.container.addChild(this.control);\n    this.drawControl();\n  }\n\n  /**\n   * remove\n   */\n  remove() {\n    this.container.removeChild(this.control);\n  }\n\n  /**\n   * destroy\n   */\n  destroy() {\n    this.container.removeChild(this.control);\n    this.control.destroy({\n      children: true,\n      texture: true,\n      baseTexture: true\n    });\n  }\n}","map":{"version":3,"names":["Graphics","Point","Cursor","Control","color","_color","shouldUpdate","drawControl","scale","_scale","size","_size","selected","_selected","position","x","control","y","constructor","container","cursor","onPositionChange","onFinish","onClick","DEFAULT","_downPoint","_mousePoint","_dragged","_handlePointerDown","event","stopPropagation","point","data","getLocalPosition","_handlePointerMove","move","_handlePointerUp","undefined","interactive","zIndex","on","addChild","add","remove","removeChild","destroy","children","texture","baseTexture"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/controls/Control.ts"],"sourcesContent":["import { Container, Graphics, Point, InteractionEvent } from 'pixi.js';\nimport Cursor from '../../Cursor';\n\nexport interface ControlOptions {\n  position: {\n    x: number;\n    y: number;\n  };\n  container: Container;\n  scale?: number;\n  size?: number;\n  color?: number;\n  cursor?: Cursor;\n  onPositionChange?: (x: number, y: number, event: InteractionEvent) => void;\n  onFinish?: () => void;\n  onClick?: () => void;\n}\n\n/**\n * Control base\n * @class\n */\nexport default abstract class Control {\n  /**\n   * control instance\n   * @member {PIXI.Graphics}\n   */\n  control = new Graphics();\n\n  /**\n   * control\n   */\n  cursor = Cursor.DEFAULT;\n\n  /**\n   * control container\n   * @member {PIXI.Container}\n   */\n  container: Container;\n\n  /**\n   * control color\n   * @private {number}\n   */\n  private _color = 0xFFFF00;\n\n  /**\n   * scale factor\n   * @private {number}\n   */\n  private _scale = 1;\n\n  /**\n   * control size\n   * @private {number}\n   */\n  private _size = 4;\n\n  /**\n   * is selected\n   * @private {boolean}\n   */\n  private _selected = false;\n\n  /**\n   * control position when mouse down\n   * @private {PIXI.Point}\n   */\n  private _downPoint: Point | null = null;\n\n  /**\n   * control position when mouse down\n   * @private {PIXI.Point}\n   */\n  protected _mousePoint: Point | null = null;\n\n  /**\n   * is control dragged\n   * @private {boolean}\n   */\n  private _dragged = false;\n\n  /**\n   * get color\n   * @getter\n   */\n  get color() {\n    return this._color;\n  }\n\n  /**\n   * set color\n   * @setter\n   */\n  set color(color: number) {\n    const shouldUpdate = this._color !== color;\n    this._color = color;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * get scale\n   * @getter\n   */\n  get scale() {\n    return this._scale;\n  }\n\n  /**\n   * set scale\n   * @setter\n   */\n  set scale(scale: number) {\n    const shouldUpdate = this._scale !== scale;\n    this._scale = scale;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * get size\n   * @getter\n   */\n  get size() {\n    return this._size;\n  }\n\n  /**\n   * set size\n   * @setter\n   */\n  set size(size: number) {\n    const shouldUpdate = this._size !== size;\n    this._size = size;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * get selected\n   * @getter\n   */\n  get selected() {\n    return this._selected;\n  }\n\n  /**\n   * set selected\n   * @setter\n   */\n  set selected(selected: boolean) {\n    const shouldUpdate = this._selected !== selected;\n    this._selected = selected;\n    if (shouldUpdate) {\n      this.drawControl();\n    }\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return {\n      x: this.control.x,\n      y: this.control.y,\n    };\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position({ x, y }: { x: number; y: number; }) {\n    this.control.x = x;\n    this.control.y = y;\n  }\n\n  /**\n   * when control posistion change\n   */\n  onPositionChange?: (x: number, y: number, event: InteractionEvent) => void;\n\n  /**\n   * when control dragging ends\n   */\n  onFinish?: () => void;\n\n  /**\n   * when control is clicked\n   */\n  onClick?: () => void;\n\n  constructor({ position, container, scale, size, color, cursor, onPositionChange, onFinish, onClick }: ControlOptions) {\n    // setup\n    this.container = container;\n    this.scale = scale || this.container.scale.x;\n    if (size !== undefined) {\n      this._size = size;\n    }\n    if (color !== undefined) {\n      this._color = color;\n    }\n    this.onPositionChange = onPositionChange;\n    this.onFinish = onFinish;\n    this.onClick = onClick;\n    this.control.x = position.x;\n    this.control.y = position.y;\n    this.control.interactive = true;\n    // FIXME: use 9999 as max z-index\n    this.control.zIndex = 9999;\n    // setup control listeners\n    this.control.on('pointerdown', this._handlePointerDown);\n    this.control.on('pointerup', this._handlePointerUp);\n    this.control.on('pointerupoutside', this._handlePointerUp);\n    this.control.on('pointermove', this._handlePointerMove);\n    if (cursor) {\n      this.cursor = cursor;\n      this.control.on('pointerover', () => {\n        this.control.cursor = this.cursor;\n      });\n      this.control.on('pointerout', () => {\n        this.control.cursor = Cursor.DEFAULT;\n      });\n    }\n    this.container.addChild(this.control);\n  }\n\n  /**\n   * draw control\n   */\n  abstract drawControl(): void;\n\n  /**\n   * move control\n   * @param point new position\n   */\n  abstract move(point: Point): void;\n\n  /**\n   * add and redraw\n   */\n  add() {\n    this.container.addChild(this.control);\n    this.drawControl();\n  }\n\n  /**\n   * remove\n   */\n  remove() {\n    this.container.removeChild(this.control);\n  }\n\n  /**\n   * destroy\n   */\n  destroy() {\n    this.container.removeChild(this.control);\n    this.control.destroy({\n      children: true,\n      texture: true,\n      baseTexture: true,\n    });\n  }\n\n  /**\n   * control pointer down\n   * @private\n   * @param event\n   */\n  private _handlePointerDown = (event: InteractionEvent) => {\n    event.stopPropagation();\n    this._dragged = false;\n    const point = event.data.getLocalPosition(this.container);\n    this._mousePoint = point;\n    this._downPoint = new Point(this.control.x, this.control.y);\n    if (this.onClick) {\n      this.onClick();\n    }\n  };\n\n  /**\n   * control pointer move\n   * @private\n   * @param event\n   */\n  private _handlePointerMove = (event: InteractionEvent) => {\n    if (this._downPoint || this._mousePoint) {\n      this._dragged = true;\n      const point = event.data.getLocalPosition(this.container);\n      this.move(point);\n      if (this.onPositionChange) {\n        this.onPositionChange(this.control.x, this.control.y, event);\n      }\n    }\n  };\n\n  /**\n   * control pointer up\n   * @private\n   * @param event\n   */\n  private _handlePointerUp = (event: InteractionEvent) => {\n    this._downPoint = null;\n    this._mousePoint = null;\n    if (this._dragged) {\n      if (this.onPositionChange) {\n        this.onPositionChange(this.control.x, this.control.y, event);\n      }\n      if (this.onFinish) {\n        this.onFinish();\n      }\n      this._dragged = false;\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}