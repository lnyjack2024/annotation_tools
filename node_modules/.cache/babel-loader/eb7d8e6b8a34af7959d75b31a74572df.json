{"ast":null,"code":"/*!\n * @pixi/mesh-extras - v6.2.2\n * Compiled Wed, 26 Jan 2022 16:23:27 UTC\n *\n * @pixi/mesh-extras is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { MeshGeometry, Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * @memberof PIXI\n */\nvar PlaneGeometry = /** @class */function (_super) {\n  __extends(PlaneGeometry, _super);\n  /**\n   * @param width - The width of the plane.\n   * @param height - The height of the plane.\n   * @param segWidth - Number of horizontal segments.\n   * @param segHeight - Number of vertical segments.\n   */\n  function PlaneGeometry(width, height, segWidth, segHeight) {\n    if (width === void 0) {\n      width = 100;\n    }\n    if (height === void 0) {\n      height = 100;\n    }\n    if (segWidth === void 0) {\n      segWidth = 10;\n    }\n    if (segHeight === void 0) {\n      segHeight = 10;\n    }\n    var _this = _super.call(this) || this;\n    _this.segWidth = segWidth;\n    _this.segHeight = segHeight;\n    _this.width = width;\n    _this.height = height;\n    _this.build();\n    return _this;\n  }\n  /**\n   * Refreshes plane coordinates\n   * @private\n   */\n  PlaneGeometry.prototype.build = function () {\n    var total = this.segWidth * this.segHeight;\n    var verts = [];\n    var uvs = [];\n    var indices = [];\n    var segmentsX = this.segWidth - 1;\n    var segmentsY = this.segHeight - 1;\n    var sizeX = this.width / segmentsX;\n    var sizeY = this.height / segmentsY;\n    for (var i = 0; i < total; i++) {\n      var x = i % this.segWidth;\n      var y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n    var totalSub = segmentsX * segmentsY;\n    for (var i = 0; i < totalSub; i++) {\n      var xpos = i % segmentsX;\n      var ypos = i / segmentsX | 0;\n      var value = ypos * this.segWidth + xpos;\n      var value2 = ypos * this.segWidth + xpos + 1;\n      var value3 = (ypos + 1) * this.segWidth + xpos;\n      var value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint16Array(indices);\n    // ensure that the changes are uploaded\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  };\n  return PlaneGeometry;\n}(MeshGeometry);\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\nvar RopeGeometry = /** @class */function (_super) {\n  __extends(RopeGeometry, _super);\n  /**\n   * @param {number} [width=200] - The width (i.e., thickness) of the rope.\n   * @param {PIXI.Point[]} [points] - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param {number} [textureScale=0] - By default the rope texture will be stretched to match\n   *     rope length. If textureScale is positive this value will be treated as a scaling\n   *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n   *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n   *     then set textureScale=1 to keep the original texture pixel size.\n   *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n   *     i.e. set textureScale=0.5 to scale it down twice.\n   */\n  function RopeGeometry(width, points, textureScale) {\n    if (width === void 0) {\n      width = 200;\n    }\n    if (textureScale === void 0) {\n      textureScale = 0;\n    }\n    var _this = _super.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6)) || this;\n    /**\n     * An array of points that determine the rope\n     * @member {PIXI.Point[]}\n     */\n    _this.points = points;\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @member {number}\n     * @readOnly\n     */\n    _this._width = width;\n    /**\n     * Rope texture scale, if zero then the rope texture is stretched.\n     * @member {number}\n     * @readOnly\n     */\n    _this.textureScale = textureScale;\n    _this.build();\n    return _this;\n  }\n  Object.defineProperty(RopeGeometry.prototype, \"width\", {\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @member {number}\n     * @readOnly\n     */\n    get: function () {\n      return this._width;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Refreshes Rope indices and uvs\n   * @private\n   */\n  RopeGeometry.prototype.build = function () {\n    var points = this.points;\n    if (!points) {\n      return;\n    }\n    var vertexBuffer = this.getBuffer('aVertexPosition');\n    var uvBuffer = this.getBuffer('aTextureCoord');\n    var indexBuffer = this.getIndex();\n    // if too little points, or texture hasn't got UVs set yet just move on.\n    if (points.length < 1) {\n      return;\n    }\n    // if the number of points has changed we will need to recreate the arraybuffers\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n    var uvs = uvBuffer.data;\n    var indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    var amount = 0;\n    var prev = points[0];\n    var textureWidth = this._width * this.textureScale;\n    var total = points.length; // - 1;\n    for (var i = 0; i < total; i++) {\n      // time to do some smart drawing!\n      var index = i * 4;\n      if (this.textureScale > 0) {\n        // calculate pixel distance from previous point\n        var dx = prev.x - points[i].x;\n        var dy = prev.y - points[i].y;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        // stretch texture\n        amount = i / (total - 1);\n      }\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n    var indexCount = 0;\n    for (var i = 0; i < total - 1; i++) {\n      var index = i * 2;\n      indices[indexCount++] = index;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 3;\n    }\n    // ensure that the changes are uploaded\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  };\n  /**\n   * refreshes vertices of Rope mesh\n   */\n  RopeGeometry.prototype.updateVertices = function () {\n    var points = this.points;\n    if (points.length < 1) {\n      return;\n    }\n    var lastPoint = points[0];\n    var nextPoint;\n    var perpX = 0;\n    var perpY = 0;\n    var vertices = this.buffers[0].data;\n    var total = points.length;\n    for (var i = 0; i < total; i++) {\n      var point = points[i];\n      var index = i * 4;\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      var perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      var num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n      perpX /= perpLength;\n      perpY /= perpLength;\n      perpX *= num;\n      perpY *= num;\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n    this.buffers[0].update();\n  };\n  RopeGeometry.prototype.update = function () {\n    if (this.textureScale > 0) {\n      this.build(); // we need to update UVs\n    } else {\n      this.updateVertices();\n    }\n  };\n  return RopeGeometry;\n}(MeshGeometry);\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\nvar SimpleRope = /** @class */function (_super) {\n  __extends(SimpleRope, _super);\n  /**\n   * @param texture - The texture to use on the rope.\n   * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param {number} textureScale - Optional. Positive values scale rope texture\n   * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n   * and downsampling here. If set to zero, texture will be stretched instead.\n   */\n  function SimpleRope(texture, points, textureScale) {\n    if (textureScale === void 0) {\n      textureScale = 0;\n    }\n    var _this = this;\n    var ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n    var meshMaterial = new MeshMaterial(texture);\n    if (textureScale > 0) {\n      // attempt to set UV wrapping, will fail on non-power of two textures\n      texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n    }\n    _this = _super.call(this, ropeGeometry, meshMaterial) || this;\n    /**\n     * re-calculate vertices by rope points each frame\n     *\n     * @member {boolean}\n     */\n    _this.autoUpdate = true;\n    return _this;\n  }\n  SimpleRope.prototype._render = function (renderer) {\n    var geometry = this.geometry;\n    if (this.autoUpdate || geometry._width !== this.shader.texture.height) {\n      geometry._width = this.shader.texture.height;\n      geometry.update();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  return SimpleRope;\n}(Mesh);\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\nvar SimplePlane = /** @class */function (_super) {\n  __extends(SimplePlane, _super);\n  /**\n   * @param texture - The texture to use on the SimplePlane.\n   * @param verticesX - The number of vertices in the x-axis\n   * @param verticesY - The number of vertices in the y-axis\n   */\n  function SimplePlane(texture, verticesX, verticesY) {\n    var _this = this;\n    var planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    var meshMaterial = new MeshMaterial(Texture.WHITE);\n    _this = _super.call(this, planeGeometry, meshMaterial) || this;\n    // lets call the setter to ensure all necessary updates are performed\n    _this.texture = texture;\n    _this.autoResize = true;\n    return _this;\n  }\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n  SimplePlane.prototype.textureUpdated = function () {\n    this._textureID = this.shader.texture._updateID;\n    var geometry = this.geometry;\n    var _a = this.shader.texture,\n      width = _a.width,\n      height = _a.height;\n    if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {\n      geometry.width = this.shader.texture.width;\n      geometry.height = this.shader.texture.height;\n      geometry.build();\n    }\n  };\n  Object.defineProperty(SimplePlane.prototype, \"texture\", {\n    get: function () {\n      return this.shader.texture;\n    },\n    set: function (value) {\n      // Track texture same way sprite does.\n      // For generated meshes like NineSlicePlane it can change the geometry.\n      // Unfortunately, this method might not work if you directly change texture in material.\n      if (this.shader.texture === value) {\n        return;\n      }\n      this.shader.texture = value;\n      this._textureID = -1;\n      if (value.baseTexture.valid) {\n        this.textureUpdated();\n      } else {\n        value.once('update', this.textureUpdated, this);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SimplePlane.prototype._render = function (renderer) {\n    if (this._textureID !== this.shader.texture._updateID) {\n      this.textureUpdated();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  SimplePlane.prototype.destroy = function (options) {\n    this.shader.texture.off('update', this.textureUpdated, this);\n    _super.prototype.destroy.call(this, options);\n  };\n  return SimplePlane;\n}(Mesh);\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @memberof PIXI\n */\nvar SimpleMesh = /** @class */function (_super) {\n  __extends(SimpleMesh, _super);\n  /**\n   * @param texture - The texture to use\n   * @param {Float32Array} [vertices] - if you want to specify the vertices\n   * @param {Float32Array} [uvs] - if you want to specify the uvs\n   * @param {Uint16Array} [indices] - if you want to specify the indices\n   * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n   */\n  function SimpleMesh(texture, vertices, uvs, indices, drawMode) {\n    if (texture === void 0) {\n      texture = Texture.EMPTY;\n    }\n    var _this = this;\n    var geometry = new MeshGeometry(vertices, uvs, indices);\n    geometry.getBuffer('aVertexPosition').static = false;\n    var meshMaterial = new MeshMaterial(texture);\n    _this = _super.call(this, geometry, meshMaterial, null, drawMode) || this;\n    _this.autoUpdate = true;\n    return _this;\n  }\n  Object.defineProperty(SimpleMesh.prototype, \"vertices\", {\n    /**\n     * Collection of vertices data.\n     * @type {Float32Array}\n     */\n    get: function () {\n      return this.geometry.getBuffer('aVertexPosition').data;\n    },\n    set: function (value) {\n      this.geometry.getBuffer('aVertexPosition').data = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SimpleMesh.prototype._render = function (renderer) {\n    if (this.autoUpdate) {\n      this.geometry.getBuffer('aVertexPosition').update();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  return SimpleMesh;\n}(Mesh);\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @memberof PIXI\n */\nvar NineSlicePlane = /** @class */function (_super) {\n  __extends(NineSlicePlane, _super);\n  /**\n   * @param texture - The texture to use on the NineSlicePlane.\n   * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n   * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n   * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n   * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n   */\n  function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    if (leftWidth === void 0) {\n      leftWidth = DEFAULT_BORDER_SIZE;\n    }\n    if (topHeight === void 0) {\n      topHeight = DEFAULT_BORDER_SIZE;\n    }\n    if (rightWidth === void 0) {\n      rightWidth = DEFAULT_BORDER_SIZE;\n    }\n    if (bottomHeight === void 0) {\n      bottomHeight = DEFAULT_BORDER_SIZE;\n    }\n    var _this = _super.call(this, Texture.WHITE, 4, 4) || this;\n    _this._origWidth = texture.orig.width;\n    _this._origHeight = texture.orig.height;\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    _this._width = _this._origWidth;\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    _this._height = _this._origHeight;\n    _this._leftWidth = leftWidth;\n    _this._rightWidth = rightWidth;\n    _this._topHeight = topHeight;\n    _this._bottomHeight = bottomHeight;\n    // lets call the setter to ensure all necessary updates are performed\n    _this.texture = texture;\n    return _this;\n  }\n  NineSlicePlane.prototype.textureUpdated = function () {\n    this._textureID = this.shader.texture._updateID;\n    this._refresh();\n  };\n  Object.defineProperty(NineSlicePlane.prototype, \"vertices\", {\n    get: function () {\n      return this.geometry.getBuffer('aVertexPosition').data;\n    },\n    set: function (value) {\n      this.geometry.getBuffer('aVertexPosition').data = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Updates the horizontal vertices. */\n  NineSlicePlane.prototype.updateHorizontalVertices = function () {\n    var vertices = this.vertices;\n    var scale = this._getMinScale();\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  };\n  /** Updates the vertical vertices. */\n  NineSlicePlane.prototype.updateVerticalVertices = function () {\n    var vertices = this.vertices;\n    var scale = this._getMinScale();\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  };\n  /**\n   * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n   *\n   * @return Smaller number of vertical and horizontal scale.\n   */\n  NineSlicePlane.prototype._getMinScale = function () {\n    var w = this._leftWidth + this._rightWidth;\n    var scaleW = this._width > w ? 1.0 : this._width / w;\n    var h = this._topHeight + this._bottomHeight;\n    var scaleH = this._height > h ? 1.0 : this._height / h;\n    var scale = Math.min(scaleW, scaleH);\n    return scale;\n  };\n  Object.defineProperty(NineSlicePlane.prototype, \"width\", {\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"height\", {\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"leftWidth\", {\n    /** The width of the left column. */\n    get: function () {\n      return this._leftWidth;\n    },\n    set: function (value) {\n      this._leftWidth = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"rightWidth\", {\n    /** The width of the right column. */\n    get: function () {\n      return this._rightWidth;\n    },\n    set: function (value) {\n      this._rightWidth = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"topHeight\", {\n    /** The height of the top row. */\n    get: function () {\n      return this._topHeight;\n    },\n    set: function (value) {\n      this._topHeight = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"bottomHeight\", {\n    /** The height of the bottom row. */\n    get: function () {\n      return this._bottomHeight;\n    },\n    set: function (value) {\n      this._bottomHeight = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Refreshes NineSlicePlane coords. All of them. */\n  NineSlicePlane.prototype._refresh = function () {\n    var texture = this.texture;\n    var uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n    var _uvw = 1.0 / this._origWidth;\n    var _uvh = 1.0 / this._origHeight;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.geometry.buffers[0].update();\n    this.geometry.buffers[1].update();\n  };\n  return NineSlicePlane;\n}(SimplePlane);\nexport { NineSlicePlane, PlaneGeometry, RopeGeometry, SimpleMesh, SimplePlane, SimpleRope };","map":{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/geometry/PlaneGeometry.ts","../../src/geometry/RopeGeometry.ts","../../src/SimpleRope.ts","../../src/SimplePlane.ts","../../src/SimpleMesh.ts","../../src/NineSlicePlane.ts"],"names":[],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { MeshGeometry } from '@pixi/mesh';\n\n/**\n * @memberof PIXI\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public segWidth: number;\n    public segHeight: number;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param width - The width of the plane.\n     * @param height - The height of the plane.\n     * @param segWidth - Number of horizontal segments.\n     * @param segHeight - Number of vertical segments.\n     */\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build(): void\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { MeshGeometry } from '@pixi/mesh';\nimport type { IPoint } from '@pixi/math';\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    public points: IPoint[];\n    public readonly textureScale: number;\n    _width: number;\n\n    /**\n     * @param {number} [width=200] - The width (i.e., thickness) of the rope.\n     * @param {PIXI.Point[]} [points] - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    constructor(width = 200, points: IPoint[], textureScale = 0)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        /**\n         * An array of points that determine the rope\n         * @member {PIXI.Point[]}\n         */\n        this.points = points;\n\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number}\n         * @readOnly\n         */\n        this._width = width;\n\n        /**\n         * Rope texture scale, if zero then the rope texture is stretched.\n         * @member {number}\n         * @readOnly\n         */\n        this.textureScale = textureScale;\n\n        this.build();\n    }\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @member {number}\n     * @readOnly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * Refreshes Rope indices and uvs\n     * @private\n     */\n    private build(): void\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this._width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /**\n     * refreshes vertices of Rope mesh\n     */\n    public updateVertices(): void\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n            const num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n\n            perpX /= perpLength;\n            perpY /= perpLength;\n\n            perpX *= num;\n            perpY *= num;\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    public update(): void\n    {\n        if (this.textureScale > 0)\n        {\n            this.build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n","import { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { RopeGeometry } from './geometry/RopeGeometry';\n\nimport type { Texture, Renderer } from '@pixi/core';\nimport type { IPoint } from '@pixi/math';\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\nexport class SimpleRope extends Mesh\n{\n    public autoUpdate: boolean;\n\n    /**\n     * @param texture - The texture to use on the rope.\n     * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} textureScale - Optional. Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be stretched instead.\n     */\n    constructor(texture: Texture, points: IPoint[], textureScale = 0)\n    {\n        const ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n        const meshMaterial = new MeshMaterial(texture);\n\n        if (textureScale > 0)\n        {\n            // attempt to set UV wrapping, will fail on non-power of two textures\n            texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n        }\n        super(ropeGeometry, meshMaterial);\n\n        /**\n         * re-calculate vertices by rope points each frame\n         *\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        const geometry: RopeGeometry = this.geometry as any;\n\n        if (this.autoUpdate || geometry._width !== this.shader.texture.height)\n        {\n            geometry._width = this.shader.texture.height;\n            geometry.update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { PlaneGeometry } from './geometry/PlaneGeometry';\n\nimport type{ Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\nexport class SimplePlane extends Mesh\n{\n    /** The geometry is automatically updated when the texture size changes. */\n    public autoResize: boolean;\n\n    protected _textureID: number;\n\n    /**\n     * @param texture - The texture to use on the SimplePlane.\n     * @param verticesX - The number of vertices in the x-axis\n     * @param verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture: Texture, verticesX: number, verticesY: number)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n        this.autoResize = true;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        const geometry: PlaneGeometry = this.geometry as any;\n        const { width, height } = this.shader.texture;\n\n        if (this.autoResize && (geometry.width !== width || geometry.height !== height))\n        {\n            geometry.width = this.shader.texture.width;\n            geometry.height = this.shader.texture.height;\n            geometry.build();\n        }\n    }\n\n    set texture(value: Texture)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture(): Texture\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        this.shader.texture.off('update', this.textureUpdated, this);\n        super.destroy(options);\n    }\n}\n","import { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { Texture } from '@pixi/core';\n\nimport type { ITypedArray, IArrayBuffer, Renderer } from '@pixi/core';\nimport type { DRAW_MODES } from '@pixi/constants';\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @memberof PIXI\n */\nexport class SimpleMesh extends Mesh\n{\n    /** Upload vertices buffer each frame. */\n    public autoUpdate: boolean;\n\n    /**\n     * @param texture - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(\n        texture: Texture = Texture.EMPTY,\n        vertices?: IArrayBuffer,\n        uvs?: IArrayBuffer,\n        indices?: IArrayBuffer,\n        drawMode?: DRAW_MODES\n    )\n    {\n        const geometry = new MeshGeometry(vertices, uvs, indices);\n\n        geometry.getBuffer('aVertexPosition').static = false;\n\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(geometry, meshMaterial, null, drawMode);\n\n        this.autoUpdate = true;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @type {Float32Array}\n     */\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nimport type { ITypedArray } from '@pixi/core';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NineSlicePlane extends GlobalMixins.NineSlicePlane {}\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @memberof PIXI\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    private _origWidth: number;\n    private _origHeight: number;\n\n    /**\n     * The width of the left column (a).\n     *\n     * @private\n     */\n    _leftWidth: number;\n\n    /**\n     * The width of the right column (b)\n     *\n     * @private\n     */\n    _rightWidth: number;\n\n    /**\n     * The height of the top row (c)\n     *\n     * @private\n     */\n    _topHeight: number;\n\n    /**\n     * The height of the bottom row (d)\n     *\n     * @private\n     */\n    _bottomHeight: number;\n\n    /**\n     * @param texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n     * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n     */\n    constructor(\n        texture: Texture,\n        leftWidth = DEFAULT_BORDER_SIZE,\n        topHeight = DEFAULT_BORDER_SIZE,\n        rightWidth = DEFAULT_BORDER_SIZE,\n        bottomHeight = DEFAULT_BORDER_SIZE\n    )\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._width = this._origWidth;\n\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._height = this._origHeight;\n\n        this._leftWidth = leftWidth;\n        this._rightWidth = rightWidth;\n        this._topHeight = topHeight;\n        this._bottomHeight = bottomHeight;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /** Updates the horizontal vertices. */\n    public updateHorizontalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /** Updates the vertical vertices. */\n    public updateVerticalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     *\n     * @return Smaller number of vertical and horizontal scale.\n     */\n    private _getMinScale(): number\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /** The width of the left column. */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /** The width of the right column. */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /** The height of the top row. */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /** The height of the bottom row. */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /** Refreshes NineSlicePlane coords. All of them. */\n    private _refresh(): void\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}