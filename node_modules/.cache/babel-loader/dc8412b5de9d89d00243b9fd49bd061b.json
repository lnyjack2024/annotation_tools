{"ast":null,"code":"// decorator class copied from\n// https://github.com/facebookarchive/draft-js/blob/main/src/model/decorators/CompositeDraftDecorator.js\n\nimport { CompositeDecorator } from 'draft-js';\nimport Prism from 'prismjs';\nimport { List } from 'immutable';\nimport Decoration from './Decoration';\nimport { CODE_BLOCK_TYPE } from '../constants';\nimport normalizeTokens from '../../../code/normalizeTokens';\n\n// load language essentials\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-tsx';\nimport 'prismjs/components/prism-markdown';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-java';\nconst DELIMITER = '.';\n\n/**\n * Determine whether we can occupy the specified slice of the decorations\n * array.\n */\nfunction canOccupySlice(decorations, start, end) {\n  for (let ii = start; ii < end; ii += 1) {\n    if (decorations[ii] != null) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Splice the specified component into our decoration array at the desired\n * range.\n */\nfunction occupySlice(targetArr, start, end, componentKey) {\n  for (let ii = start; ii < end; ii += 1) {\n    targetArr[ii] = componentKey;\n  }\n}\nclass ExtendedDecorator extends CompositeDecorator {\n  constructor(decorators) {\n    super(decorators);\n    this._decorators = [];\n    this._props = {};\n    this._decorators = decorators.slice();\n    this._props = {};\n  }\n  getDecorations(block, contentState) {\n    const decorations = Array(block.getText().length).fill(null);\n    this._decorators.forEach((decorator, ii) => {\n      let counter = 0;\n      const strategy = decorator.strategy;\n      const getDecorationsChecker = (start, end, props) => {\n        if (canOccupySlice(decorations, start, end)) {\n          const key = ii + DELIMITER + counter + DELIMITER + block.getKey();\n          occupySlice(decorations, start, end, key);\n          this._props[key] = {\n            ...props\n          };\n          counter += 1;\n        }\n      };\n      strategy(block, getDecorationsChecker, contentState);\n    });\n    return List(decorations);\n  }\n  getPropsForKey(key) {\n    const componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return {\n      ...this._decorators[componentKey].props,\n      ...this._props[key]\n    };\n  }\n}\nexport default new ExtendedDecorator([{\n  strategy: (contentBlock, callback) => {\n    if (contentBlock.getType() === CODE_BLOCK_TYPE) {\n      const language = contentBlock.getData().get('language');\n      if (language) {\n        const tokens = Prism.tokenize(contentBlock.getText(), Prism.languages[language]);\n        const normalizedTokens = normalizeTokens(tokens);\n        for (let i = 0; i < normalizedTokens.length; i += 1) {\n          const lineTokens = normalizedTokens[i];\n          let start = 0;\n          for (let j = 0; j < lineTokens.length; j += 1) {\n            const token = lineTokens[j];\n            const end = start + token.content.length;\n            callback(start, end, {\n              types: token.types\n            });\n            start = end;\n          }\n        }\n      }\n    }\n  },\n  component: Decoration\n}]);","map":{"version":3,"names":["CompositeDecorator","Prism","List","Decoration","CODE_BLOCK_TYPE","normalizeTokens","DELIMITER","canOccupySlice","decorations","start","end","ii","occupySlice","targetArr","componentKey","ExtendedDecorator","constructor","decorators","_decorators","_props","slice","getDecorations","block","contentState","Array","getText","length","fill","forEach","decorator","counter","strategy","getDecorationsChecker","props","key","getKey","getPropsForKey","parseInt","split","contentBlock","callback","getType","language","getData","get","tokens","tokenize","languages","normalizedTokens","i","lineTokens","j","token","content","types","component"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/llm/input/decorators/prism-decorator.ts"],"sourcesContent":["// decorator class copied from\n// https://github.com/facebookarchive/draft-js/blob/main/src/model/decorators/CompositeDraftDecorator.js\n\nimport { CompositeDecorator, ContentBlock, ContentState, DraftDecorator } from 'draft-js';\nimport Prism from 'prismjs';\nimport { List } from 'immutable';\nimport Decoration from './Decoration';\nimport { CODE_BLOCK_TYPE } from '../constants';\nimport normalizeTokens from '../../../code/normalizeTokens';\n\n// load language essentials\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-tsx';\nimport 'prismjs/components/prism-markdown';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-java';\n\nconst DELIMITER = '.';\n\n/**\n * Determine whether we can occupy the specified slice of the decorations\n * array.\n */\nfunction canOccupySlice(\n  decorations: (string | null)[],\n  start: number,\n  end: number,\n): boolean {\n  for (let ii = start; ii < end; ii += 1) {\n    if (decorations[ii] != null) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Splice the specified component into our decoration array at the desired\n * range.\n */\nfunction occupySlice(\n  targetArr: (string | null)[],\n  start: number,\n  end: number,\n  componentKey: string,\n): void {\n  for (let ii = start; ii < end; ii += 1) {\n    targetArr[ii] = componentKey;\n  }\n}\n\ninterface ExtendedDraftDecorator extends DraftDecorator {\n  strategy: (\n    block: ContentBlock,\n    callback: (start: number, end: number, props: any) => void,\n    contentState: ContentState,\n  ) => void;\n}\n\nclass ExtendedDecorator extends CompositeDecorator {\n  _decorators: ExtendedDraftDecorator[] = [];\n\n  _props: Record<string, any> = {};\n\n  constructor(decorators: ExtendedDraftDecorator[]) {\n    super(decorators);\n    this._decorators = decorators.slice();\n    this._props = {};\n  }\n\n  getDecorations(block: ContentBlock, contentState: ContentState) {\n    const decorations = Array(block.getText().length).fill(null);\n\n    this._decorators.forEach((decorator: ExtendedDraftDecorator, ii: number) => {\n      let counter = 0;\n      const strategy = decorator.strategy;\n      const getDecorationsChecker = (start: number, end: number, props: any) => {\n        if (canOccupySlice(decorations, start, end)) {\n          const key = ii + DELIMITER + counter + DELIMITER + block.getKey();\n          occupySlice(decorations, start, end, key);\n          this._props[key] = { ...props };\n          counter += 1;\n        }\n      };\n      strategy(block, getDecorationsChecker, contentState);\n    });\n\n    return List(decorations);\n  }\n\n  getPropsForKey(key: string) {\n    const componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return {\n      ...this._decorators[componentKey].props,\n      ...this._props[key],\n    };\n  }\n}\n\nexport default new ExtendedDecorator([{\n  strategy: (contentBlock, callback) => {\n    if (contentBlock.getType() === CODE_BLOCK_TYPE) {\n      const language = contentBlock.getData().get('language');\n      if (language) {\n        const tokens = Prism.tokenize(contentBlock.getText(), Prism.languages[language]);\n        const normalizedTokens = normalizeTokens(tokens);\n        for (let i = 0; i < normalizedTokens.length; i += 1) {\n          const lineTokens = normalizedTokens[i];\n\n          let start = 0;\n          for (let j = 0; j < lineTokens.length; j += 1) {\n            const token = lineTokens[j];\n            const end = start + token.content.length;\n            callback(start, end, {\n              types: token.types,\n            });\n            start = end;\n          }\n        }\n      }\n    }\n  },\n  component: Decoration,\n}]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}