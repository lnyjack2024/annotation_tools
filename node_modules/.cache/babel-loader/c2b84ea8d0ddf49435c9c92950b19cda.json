{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { isReviewEditable } from 'src/utils/tool-mode';\nimport { ReviewMode } from '../types';\n/**\n * store for config\n * @class\n */\nexport default class ConfigStore {\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * readonly from payload only control text editable\n     */\n    this.contentReadyOnly = false;\n    /**\n     * review mode\n     */\n    this.reviewMode = ReviewMode.LABELING;\n    /**\n    * add mode, true means adding active\n    */\n    this.addMode = false;\n    /**\n     * validation config\n     */\n    this.validationConfig = {\n      script: false\n    };\n    /**\n     * submit check\n     */\n    this.submitCheck = false;\n    /**\n      * skip submit check for invalid data\n      */\n    this.skipCheckForInvalidData = false;\n    makeAutoObservable(this, {\n      rootStore: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload) {\n    // set default review mode\n    this.reviewMode = isReviewEditable(payload.jobProxy.toolMode) ? ReviewMode.REVIEW : ReviewMode.LABELING;\n\n    // parse skip check for invalid data\n    this.skipCheckForInvalidData = payload.skip_check_for_invalid_data === 'true' || payload.skip_check_for_invalid_data === true;\n\n    // read_only\n    this.contentReadyOnly = payload.read_only === 'true' || payload.read_only === true;\n  }\n\n  /**\n  * set review mode\n  * @param reviewMode\n  */\n  setReviewMode(reviewMode) {\n    if (this.reviewMode !== reviewMode) {\n      this.setAddMode(false);\n      this.reviewMode = reviewMode;\n    }\n  }\n\n  /**\n  * set add mode\n  * @param addMode\n  * @param shouldPredict\n  */\n  setAddMode(addMode) {\n    if (this.rootStore.readonly) {\n      return;\n    }\n    this.addMode = addMode;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","isReviewEditable","ReviewMode","ConfigStore","constructor","rootStore","contentReadyOnly","reviewMode","LABELING","addMode","validationConfig","script","submitCheck","skipCheckForInvalidData","autoBind","init","payload","jobProxy","toolMode","REVIEW","skip_check_for_invalid_data","read_only","setReviewMode","setAddMode","readonly"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/store/ConfigStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { isReviewEditable } from 'src/utils/tool-mode';\nimport RootStore from './RootStore';\nimport { Payload, ReviewMode } from '../types';\n/**\n * store for config\n * @class\n */\nexport default class ConfigStore {\n  /**\n   * root store\n   */\n  rootStore;\n\n  /**\n   * readonly from payload only control text editable\n   */\n  contentReadyOnly = false;\n\n  /**\n   * review mode\n   */\n  reviewMode = ReviewMode.LABELING;\n\n  /**\n * add mode, true means adding active\n */\n  addMode = false;\n\n  /**\n   * validation config\n   */\n  validationConfig = { script: false };\n\n  /**\n   * submit check\n   */\n  submitCheck = false;\n\n  /**\n    * skip submit check for invalid data\n    */\n  skipCheckForInvalidData = false;\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload: Payload) {\n    // set default review mode\n    this.reviewMode = isReviewEditable(payload.jobProxy.toolMode) ? ReviewMode.REVIEW : ReviewMode.LABELING;\n\n\n    // parse skip check for invalid data\n    this.skipCheckForInvalidData = payload.skip_check_for_invalid_data === 'true' || payload.skip_check_for_invalid_data === true;\n\n    // read_only\n    this.contentReadyOnly = payload.read_only === 'true' || payload.read_only === true;\n  }\n\n  /**\n * set review mode\n * @param reviewMode\n */\n  setReviewMode(reviewMode: ReviewMode) {\n    if (this.reviewMode !== reviewMode) {\n      this.setAddMode(false);\n      this.reviewMode = reviewMode;\n    }\n  }\n\n  /**\n * set add mode\n * @param addMode\n * @param shouldPredict\n */\n  setAddMode(addMode: boolean) {\n    if (this.rootStore.readonly) {\n      return;\n    }\n\n    this.addMode = addMode;\n  };\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SAASC,gBAAgB,QAAQ,qBAAqB;AAEtD,SAAkBC,UAAU,QAAQ,UAAU;AAC9C;AACA;AACA;AACA;AACA,eAAe,MAAMC,WAAW,CAAC;EAoC/BC,WAAWA,CAACC,SAA2B,EAAE;IAnCzC;AACF;AACA;IAFE,KAGAA,SAAS;IAET;AACF;AACA;IAFE,KAGAC,gBAAgB,GAAG,KAAK;IAExB;AACF;AACA;IAFE,KAGAC,UAAU,GAAGL,UAAU,CAACM,QAAQ;IAEhC;AACF;AACA;IAFE,KAGAC,OAAO,GAAG,KAAK;IAEf;AACF;AACA;IAFE,KAGAC,gBAAgB,GAAG;MAAEC,MAAM,EAAE;IAAM,CAAC;IAEpC;AACF;AACA;IAFE,KAGAC,WAAW,GAAG,KAAK;IAEnB;AACF;AACA;IAFE,KAGAC,uBAAuB,GAAG,KAAK;IAG7Bb,kBAAkB,CAAC,IAAI,EAAE;MACvBK,SAAS,EAAE;IACb,CAAC,EAAE;MACDS,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,IAAI,CAACT,SAAS,GAAGA,SAAS;EAC5B;;EAEA;AACF;AACA;AACA;EACEU,IAAIA,CAACC,OAAgB,EAAE;IACrB;IACA,IAAI,CAACT,UAAU,GAAGN,gBAAgB,CAACe,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAAC,GAAGhB,UAAU,CAACiB,MAAM,GAAGjB,UAAU,CAACM,QAAQ;;IAGvG;IACA,IAAI,CAACK,uBAAuB,GAAGG,OAAO,CAACI,2BAA2B,KAAK,MAAM,IAAIJ,OAAO,CAACI,2BAA2B,KAAK,IAAI;;IAE7H;IACA,IAAI,CAACd,gBAAgB,GAAGU,OAAO,CAACK,SAAS,KAAK,MAAM,IAAIL,OAAO,CAACK,SAAS,KAAK,IAAI;EACpF;;EAEA;AACF;AACA;AACA;EACEC,aAAaA,CAACf,UAAsB,EAAE;IACpC,IAAI,IAAI,CAACA,UAAU,KAAKA,UAAU,EAAE;MAClC,IAAI,CAACgB,UAAU,CAAC,KAAK,CAAC;MACtB,IAAI,CAAChB,UAAU,GAAGA,UAAU;IAC9B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEgB,UAAUA,CAACd,OAAgB,EAAE;IAC3B,IAAI,IAAI,CAACJ,SAAS,CAACmB,QAAQ,EAAE;MAC3B;IACF;IAEA,IAAI,CAACf,OAAO,GAAGA,OAAO;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}