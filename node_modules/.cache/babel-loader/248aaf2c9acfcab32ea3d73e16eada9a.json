{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\nimport { isEqual } from 'lodash';\n;\n/**\n * store for handle\n * @class\n */\nexport default class HandleStore {\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    this.handleMap = {};\n    this.updatedHandles = {};\n    makeAutoObservable(this, {\n      rootStore: false,\n      handleMap: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n  init(handles) {\n    const handleMap = {};\n    handles.forEach(h => {\n      const {\n        frameIndex,\n        pathId,\n        pointIndex\n      } = h;\n      if (!handleMap[frameIndex]) {\n        handleMap[frameIndex] = {};\n      }\n      if (!handleMap[frameIndex][pathId]) {\n        handleMap[frameIndex][pathId] = {};\n      }\n      handleMap[frameIndex][pathId][pointIndex] = h;\n    });\n    this.setHandleMap(handleMap);\n  }\n  setHandleMap(handleMap) {\n    this.handleMap = handleMap;\n  }\n  saveHandles(handles) {\n    if (this.rootStore.shape.updatedShapes.length !== 0) return;\n    const handleMap = {\n      ...this.handleMap\n    };\n    handles.forEach(handle => {\n      const {\n        pathId,\n        pointIndex: index,\n        frameIndex\n      } = handle;\n      if (!handleMap[frameIndex]) {\n        handleMap[frameIndex] = {};\n      }\n      if (!handleMap[frameIndex][pathId]) {\n        handleMap[frameIndex][pathId] = {};\n      }\n      handleMap[frameIndex][pathId][index] = handle;\n    });\n    this.setHandleMap(handleMap);\n  }\n  updateHandle(handle, initialHandle) {\n    var _this$handleMap$frame, _this$handleMap$frame2;\n    const {\n      pathId,\n      pointIndex,\n      frameIndex\n    } = handle;\n    const prevHandle = ((_this$handleMap$frame = this.handleMap[frameIndex]) === null || _this$handleMap$frame === void 0 ? void 0 : (_this$handleMap$frame2 = _this$handleMap$frame[pathId]) === null || _this$handleMap$frame2 === void 0 ? void 0 : _this$handleMap$frame2[pointIndex]) || null;\n    const handleMap = {\n      ...this.handleMap\n    };\n    if (!handleMap[frameIndex]) {\n      handleMap[frameIndex] = {};\n    }\n    if (!handleMap[frameIndex][pathId]) {\n      handleMap[frameIndex][pathId] = {};\n    }\n    handleMap[frameIndex][pathId][pointIndex] = handle;\n    this.setHandleMap(handleMap);\n    this.changeHandleUndo([{\n      frameIndex,\n      pathId,\n      pointIndex,\n      handle: prevHandle || initialHandle\n    }], [{\n      frameIndex,\n      pathId,\n      pointIndex,\n      handle\n    }]);\n  }\n  removeHandles(points) {\n    const handleMap = {\n      ...this.handleMap\n    };\n    const prevHandles = [];\n    const updatedHandles = [];\n    points.forEach(({\n      frameIndex,\n      instanceId,\n      groupName,\n      pointCategory,\n      index\n    }) => {\n      var _handleMap$frameIndex, _handleMap$frameIndex2;\n      const pathId = `${frameIndex}_${instanceId}_${groupName}_${pointCategory}`;\n      const handle = (_handleMap$frameIndex = handleMap[frameIndex]) === null || _handleMap$frameIndex === void 0 ? void 0 : (_handleMap$frameIndex2 = _handleMap$frameIndex[pathId]) === null || _handleMap$frameIndex2 === void 0 ? void 0 : _handleMap$frameIndex2[index];\n      if (handle) {\n        prevHandles.push({\n          frameIndex,\n          pathId: handle.pathId,\n          pointIndex: handle.pointIndex,\n          handle: {\n            ...handle\n          }\n        });\n        updatedHandles.push({\n          frameIndex,\n          pathId: handle.pathId,\n          pointIndex: handle.pointIndex,\n          handle: null\n        });\n        delete handleMap[frameIndex][pathId][index];\n        this.setHandleMap(handleMap);\n        this.changeHandleUndo(prevHandles, updatedHandles, true);\n      }\n    });\n  }\n  changeHandleUndo(prevHandles, updatedHandles, insertPrev = false) {\n    const before = [];\n    const after = [];\n    before.push({\n      type: 'handle',\n      status: [...prevHandles]\n    });\n    after.push({\n      type: 'handle',\n      status: [...updatedHandles]\n    });\n    this.rootStore.undo.saveStatus(before, after, insertPrev);\n  }\n  changeFrame(frameIndex) {\n    const currentFrameHandles = toJS(this.handleMap[frameIndex]);\n    if (currentFrameHandles) {\n      this.updatedHandles = {\n        [frameIndex]: currentFrameHandles\n      };\n    }\n  }\n  setUpdatedHandles(handles) {\n    const updatedHandles = {};\n    const handleMap = {\n      ...this.handleMap\n    };\n    handles.forEach(({\n      frameIndex,\n      pathId,\n      pointIndex: index,\n      handle\n    }) => {\n      if (handle) {\n        if (!handleMap[frameIndex]) {\n          handleMap[frameIndex] = {};\n        }\n        if (!handleMap[frameIndex][pathId]) {\n          handleMap[frameIndex][pathId] = {};\n        }\n        handleMap[frameIndex][pathId][index] = handle;\n        if (!updatedHandles[frameIndex]) {\n          updatedHandles[frameIndex] = {};\n        }\n        if (!updatedHandles[frameIndex][pathId]) {\n          updatedHandles[frameIndex][pathId] = handleMap[frameIndex][pathId];\n        }\n      } else {\n        var _handleMap$frameIndex3, _handleMap$frameIndex4;\n        (_handleMap$frameIndex3 = handleMap[frameIndex]) === null || _handleMap$frameIndex3 === void 0 ? true : (_handleMap$frameIndex4 = _handleMap$frameIndex3[pathId]) === null || _handleMap$frameIndex4 === void 0 ? true : delete _handleMap$frameIndex4[index];\n      }\n    });\n    if (!isEqual(updatedHandles, this.updatedHandles)) {\n      this.setHandleMap(handleMap);\n      this.updatedHandles = toJS(updatedHandles);\n    }\n  }\n  setPathHandles(frameIndex, pathId, handles) {\n    const handleMap = {\n      ...this.handleMap\n    };\n    handleMap[frameIndex] = {\n      ...handleMap[frameIndex],\n      [pathId]: handles\n    };\n    this.setHandleMap(handleMap);\n  }\n  getPathHandles(frame, pId) {\n    var _this$handleMap$frame3;\n    return Object.values(((_this$handleMap$frame3 = this.handleMap[frame]) === null || _this$handleMap$frame3 === void 0 ? void 0 : _this$handleMap$frame3[pId]) || {}).sort((a, b) => a.pointIndex - b.pointIndex);\n  }\n  getHandles() {\n    const handles = [];\n    Object.values(toJS(this.handleMap)).forEach(frameHandles => {\n      Object.values(frameHandles).forEach(hs => {\n        Object.values(hs).forEach(h => {\n          handles.push(h);\n        });\n      });\n    });\n    return handles;\n  }\n}\n;","map":{"version":3,"names":["makeAutoObservable","toJS","isEqual","HandleStore","constructor","rootStore","handleMap","updatedHandles","autoBind","init","handles","forEach","h","frameIndex","pathId","pointIndex","setHandleMap","saveHandles","shape","updatedShapes","length","handle","index","updateHandle","initialHandle","_this$handleMap$frame","_this$handleMap$frame2","prevHandle","changeHandleUndo","removeHandles","points","prevHandles","instanceId","groupName","pointCategory","_handleMap$frameIndex","_handleMap$frameIndex2","push","insertPrev","before","after","type","status","undo","saveStatus","changeFrame","currentFrameHandles","setUpdatedHandles","_handleMap$frameIndex3","_handleMap$frameIndex4","setPathHandles","getPathHandles","frame","pId","_this$handleMap$frame3","Object","values","sort","a","b","getHandles","frameHandles","hs"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/store/HandleStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport { isEqual } from 'lodash';\nimport RootStore from './RootStore';\nimport { Status } from './UndoStore';\nimport { Handle, HandleStatus, UpdatedShape } from '../types';\n\nexport interface FrameHandleMap {\n  [pathId: string]: {\n    [pointIndex: number]: Handle;\n  };\n};\n\nexport interface HandleMap {\n  [frameIndex: number]: FrameHandleMap;\n}\n\n/**\n * store for handle\n * @class\n */\nexport default class HandleStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  handleMap: HandleMap = {};\n\n  updatedHandles: HandleMap = {};\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      handleMap: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  init(handles: Handle[]) {\n    const handleMap: {\n      [frameIndex: number]: {\n        [pathId: string]: {\n          [index: number]: Handle;\n        }\n      }\n    } = {};\n    handles.forEach((h) => {\n      const { frameIndex, pathId, pointIndex } = h;\n      if (!handleMap[frameIndex]) {\n        handleMap[frameIndex] = {};\n      }\n      if (!handleMap[frameIndex][pathId]) {\n        handleMap[frameIndex][pathId] = {};\n      }\n      handleMap[frameIndex][pathId][pointIndex] = h;\n    });\n    this.setHandleMap(handleMap);\n  }\n\n  setHandleMap(handleMap: HandleMap) {\n    this.handleMap = handleMap;\n  }\n\n  saveHandles(handles: Handle[]) {\n    if (this.rootStore.shape.updatedShapes.length !== 0) return;\n    const handleMap = { ...this.handleMap };\n    handles.forEach((handle) => {\n      const { pathId, pointIndex: index, frameIndex } = handle;\n      if (!handleMap[frameIndex]) {\n        handleMap[frameIndex] = {};\n      }\n      if (!handleMap[frameIndex][pathId]) {\n        handleMap[frameIndex][pathId] = {};\n      }\n      handleMap[frameIndex][pathId][index] = handle;\n    });\n    this.setHandleMap(handleMap);\n  }\n\n  updateHandle(handle: Handle, initialHandle: Handle) {\n    const { pathId, pointIndex, frameIndex } = handle;\n    const prevHandle = this.handleMap[frameIndex]?.[pathId]?.[pointIndex] || null;\n    const handleMap = { ...this.handleMap };\n    if (!handleMap[frameIndex]) {\n      handleMap[frameIndex] = {};\n    }\n    if (!handleMap[frameIndex][pathId]) {\n      handleMap[frameIndex][pathId] = {};\n    }\n    handleMap[frameIndex][pathId][pointIndex] = handle;\n    this.setHandleMap(handleMap);\n    this.changeHandleUndo(\n      [\n        { frameIndex, pathId, pointIndex, handle: prevHandle || initialHandle }\n      ],\n      [\n        { frameIndex, pathId, pointIndex, handle }\n      ],\n    );\n  }\n\n  removeHandles(points: UpdatedShape[]) {\n    const handleMap = { ...this.handleMap };\n    const prevHandles: HandleStatus[] = [];\n    const updatedHandles: HandleStatus[] = [];\n    points.forEach(({ frameIndex, instanceId, groupName, pointCategory, index }) => {\n      const pathId = `${frameIndex}_${instanceId}_${groupName}_${pointCategory}`;\n      const handle = handleMap[frameIndex]?.[pathId]?.[index as number];\n      if (handle) {\n        prevHandles.push({\n          frameIndex,\n          pathId: handle.pathId,\n          pointIndex: handle.pointIndex,\n          handle: { ...handle }\n        });\n        updatedHandles.push({\n          frameIndex,\n          pathId: handle.pathId,\n          pointIndex: handle.pointIndex,\n          handle: null\n        });\n        delete handleMap[frameIndex][pathId][index as number];\n        this.setHandleMap(handleMap);\n        this.changeHandleUndo(prevHandles, updatedHandles, true);\n      }\n    });\n  }\n\n  changeHandleUndo(\n    prevHandles: HandleStatus[],\n    updatedHandles: HandleStatus[],\n    insertPrev = false\n  ) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    before.push({ type: 'handle',\n      status: [\n        ...prevHandles,\n      ]\n    });\n    after.push({ type: 'handle',\n      status: [\n        ...updatedHandles,\n      ]\n    });\n    this.rootStore.undo.saveStatus(before, after, insertPrev);\n  }\n\n  changeFrame(frameIndex: number) {\n    const currentFrameHandles = toJS(this.handleMap[frameIndex]);\n    if (currentFrameHandles) {\n      this.updatedHandles = { [frameIndex]: currentFrameHandles };\n    }\n  }\n\n  setUpdatedHandles(handles: HandleStatus[]) {\n    const updatedHandles: HandleMap = {};\n    const handleMap = { ...this.handleMap };\n    handles.forEach(({ frameIndex, pathId, pointIndex: index, handle }) => {\n      if (handle) {\n        if (!handleMap[frameIndex]) {\n          handleMap[frameIndex] = {};\n        }\n        if (!handleMap[frameIndex][pathId]) {\n          handleMap[frameIndex][pathId] = {};\n        }\n        handleMap[frameIndex][pathId][index] = handle;\n\n        if (!updatedHandles[frameIndex]) {\n          updatedHandles[frameIndex] = {};\n        }\n        if (!updatedHandles[frameIndex][pathId]) {\n          updatedHandles[frameIndex][pathId] = handleMap[frameIndex][pathId];\n        }\n      } else {\n        delete handleMap[frameIndex]?.[pathId]?.[index];\n      }\n    });\n    if (!isEqual(updatedHandles, this.updatedHandles)) {\n      this.setHandleMap(handleMap);\n      this.updatedHandles = toJS(updatedHandles);\n    }\n  };\n\n  setPathHandles(frameIndex: number, pathId: number, handles: { [pointIndex: number]: Handle }) {\n    const handleMap = { ...this.handleMap };\n    handleMap[frameIndex] = {\n      ...handleMap[frameIndex],\n      [pathId]: handles,\n    };\n    this.setHandleMap(handleMap);\n  }\n\n  getPathHandles(frame: number, pId: string) {\n    return Object.values(this.handleMap[frame]?.[pId] || {}).sort((a, b) => a.pointIndex - b.pointIndex);\n  }\n\n  getHandles() {\n    const handles: Handle[] = [];\n    Object.values(toJS(this.handleMap)).forEach((frameHandles: FrameHandleMap) => {\n      Object.values(frameHandles).forEach((hs) => {\n        Object.values(hs).forEach((h) => {\n          handles.push(h);\n        });\n      });\n    });\n    return handles;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}