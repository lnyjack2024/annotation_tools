{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/components/InfoPanel/GlobalAttributes/index.tsx\";\nimport React from 'react';\nimport { reaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport cx from 'classnames';\nimport EasyForm, { utils as formUtils } from '@appen/easy-form';\nimport { FieldControlType } from '@appen/easy-form/es/types';\nimport store from '../../../store/RootStore';\nimport i18n from '../../../locales';\nimport { DownArrow, Edit, LabelMode } from '../../../../common/icons';\nexport class GlobalAttributes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unfold: true,\n      editing: true,\n      fieldsMap: {},\n      isSimple: false\n    };\n    this.toggleFold = () => {\n      if (this.props.unfoldEnabled) {\n        this.setState(prev => ({\n          unfold: !prev.unfold\n        }));\n      }\n    };\n    this.initEdit = () => {\n      const {\n        global: {\n          attributes\n        }\n      } = store;\n      if ((!store.review.drawMode || Object.values(attributes || {}).length > 0) && this.state.editing) {\n        this.toggleEdit();\n      }\n    };\n    this.toggleEdit = () => {\n      this.setState(prev => ({\n        editing: !prev.editing\n      }));\n    };\n    this.toggleSimple = () => {\n      this.setState(prev => ({\n        isSimple: !prev.isSimple\n      }));\n    };\n    this.handleChange = values => {\n      store.global.setAttributes(values);\n    };\n    reaction(() => store.review.drawMode, () => {\n      this.initEdit();\n    });\n  }\n  componentDidMount() {\n    this.updateFiledsMap();\n    this.initEdit();\n  }\n  updateFiledsMap() {\n    const {\n      fields = []\n    } = store.global.globalConfig || {};\n    const map = {};\n    fields.forEach(field => {\n      const {\n        name,\n        label,\n        type,\n        valueType,\n        options = []\n      } = field;\n      const newField = {\n        name,\n        type,\n        label\n      };\n      if (type === FieldControlType.RADIO || type === FieldControlType.SELECT || type === FieldControlType.CHECKBOX) {\n        // has options\n        newField.options = formUtils.parseOptions(options, valueType);\n      }\n      map[name] = newField;\n    });\n    this.setState({\n      fieldsMap: map\n    });\n  }\n  renderAttrs(attributes) {\n    const allValues = [];\n    Object.keys(attributes).forEach(fieldName => {\n      const field = this.state.fieldsMap[fieldName];\n      const fieldValue = attributes[fieldName];\n      const label = (field === null || field === void 0 ? void 0 : field.label) || fieldName;\n      if (fieldValue !== undefined && fieldValue !== '') {\n        let val = fieldValue.toString();\n        if (field === null || field === void 0 ? void 0 : field.options) {\n          const getOptionLabel = value => {\n            const option = field.options.find(o => o.value === value);\n            return option && option.label ? option.label : value.toString();\n          };\n          const displayValue = Array.isArray(fieldValue) ? fieldValue.map(getOptionLabel).toString() : getOptionLabel(fieldValue);\n          val = displayValue;\n        }\n        val = this.state.isSimple ? val : `${label}: ${val}`;\n        allValues.push(val);\n      }\n    });\n    return allValues.join('; ');\n  }\n  render() {\n    const {\n      unfold,\n      editing,\n      isSimple\n    } = this.state;\n    const {\n      global: {\n        globalConfig,\n        attributes,\n        lackGlobalAttributes\n      }\n    } = store;\n    if (!globalConfig || !globalConfig.fields || globalConfig.fields.length === 0) {\n      // no global config\n      return null;\n    }\n    const fields = globalConfig.fields.map(f => ({\n      ...f,\n      ...(attributes[f.name] !== undefined && {\n        defaultValue: attributes[f.name]\n      })\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"global-attributes attributes-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-panel-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, this.props.unfoldEnabled && /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('unfold-icon', {\n        fold: !unfold\n      }),\n      onClick: this.toggleFold,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(DownArrow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, i18n.translate('INFO_PANEL_GLOBAL_TITLE')), !editing && /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('action-icon', {\n        active: !isSimple\n      }),\n      onClick: this.toggleSimple,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(LabelMode, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right\",\n      onClick: this.toggleEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, !lackGlobalAttributes && store.review.drawMode && /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('action-icon', {\n        active: editing\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Edit, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('attributes-panel-content', {\n        fold: !unfold && this.props.unfoldEnabled\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, lackGlobalAttributes && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, i18n.translate('INFO_PANEL_GLOBAL_WARNING')), editing ? /*#__PURE__*/React.createElement(EasyForm, {\n      theme: \"dark\",\n      autoFocus: false,\n      fields: fields,\n      conditions: globalConfig.conditions,\n      effects: globalConfig.effects,\n      rules: globalConfig.rules,\n      onChange: this.handleChange,\n      onSubmit: this.toggleEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }) : this.renderAttrs(attributes)));\n  }\n}\nexport default observer(GlobalAttributes);","map":{"version":3,"names":["React","reaction","observer","cx","EasyForm","utils","formUtils","FieldControlType","store","i18n","DownArrow","Edit","LabelMode","GlobalAttributes","Component","constructor","props","state","unfold","editing","fieldsMap","isSimple","toggleFold","unfoldEnabled","setState","prev","initEdit","global","attributes","review","drawMode","Object","values","length","toggleEdit","toggleSimple","handleChange","setAttributes","componentDidMount","updateFiledsMap","fields","globalConfig","map","forEach","field","name","label","type","valueType","options","newField","RADIO","SELECT","CHECKBOX","parseOptions","renderAttrs","allValues","keys","fieldName","fieldValue","undefined","val","toString","getOptionLabel","value","option","find","o","displayValue","Array","isArray","push","join","render","lackGlobalAttributes","f","defaultValue","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","fold","onClick","translate","active","theme","autoFocus","conditions","effects","rules","onChange","onSubmit"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/multi-channel/components/InfoPanel/GlobalAttributes/index.tsx"],"sourcesContent":["import React from 'react';\nimport { reaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport cx from 'classnames';\nimport EasyForm, { utils as formUtils } from '@appen/easy-form';\nimport { FieldControlType, FieldOption } from '@appen/easy-form/es/types';\nimport store from '../../../store/RootStore';\nimport i18n from '../../../locales';\nimport { DownArrow, Edit, LabelMode } from '../../../../common/icons';\n\ninterface Feild {\n  name: string;\n  type: FieldControlType;\n  label?: string;\n  options?: FieldOption[];\n}\n\ninterface GlobalAttributesProps {\n  unfoldEnabled: boolean;\n}\n\ninterface GlobalAttributesState {\n  unfold: boolean;\n  editing: boolean;\n  fieldsMap: {[key: string]: Feild};\n  isSimple: boolean;\n}\n\nexport class GlobalAttributes extends React.Component<GlobalAttributesProps, GlobalAttributesState> {\n  state = {\n    unfold: true,\n    editing: true,\n    fieldsMap: {},\n    isSimple: false,\n  };\n\n  constructor(props: GlobalAttributesProps) {\n    super(props);\n    reaction(\n      () => store.review.drawMode,\n      () => {\n        this.initEdit();\n      },\n    );\n  }\n\n  componentDidMount() {\n    this.updateFiledsMap();\n    this.initEdit();\n  }\n\n  toggleFold = () => {\n    if (this.props.unfoldEnabled) {\n      this.setState((prev) => ({ unfold: !prev.unfold }));\n    }\n  };\n\n  initEdit = () => {\n    const { global: { attributes } } = store;\n    if ((!store.review.drawMode || Object.values(attributes || {}).length > 0) && this.state.editing) {\n      this.toggleEdit();\n    }\n  };\n\n  toggleEdit = () => {\n    this.setState((prev) => ({ editing: !prev.editing }));\n  };\n\n  toggleSimple = () => {\n    this.setState((prev) => ({ isSimple: !prev.isSimple }));\n  };\n\n  handleChange = (values: any) => {\n    store.global.setAttributes(values);\n  };\n\n  updateFiledsMap() {\n    const { fields = [] } = store.global.globalConfig || {};\n    const map: { [key: string]: Feild } = {};\n    fields.forEach((field) => {\n      const { name, label, type, valueType, options = [] } = field;\n      const newField: Feild = { name, type, label };\n      if (type === FieldControlType.RADIO || type === FieldControlType.SELECT || type === FieldControlType.CHECKBOX) {\n        // has options\n        newField.options = formUtils.parseOptions(options, valueType);\n      }\n      map[name] = newField;\n    });\n    this.setState({ fieldsMap: map });\n  }\n\n  renderAttrs(attributes: any) {\n    const allValues: string[] = [];\n    Object.keys(attributes).forEach((fieldName) => {\n      const field = (this.state.fieldsMap as {[key: string]: Feild})[fieldName];\n      const fieldValue = attributes[fieldName];\n      const label = field?.label || fieldName;\n      if (fieldValue !== undefined && fieldValue !== '') {\n        let val = fieldValue.toString();\n        if (field?.options) {\n          const getOptionLabel = (value: any) => {\n            const option = field.options!.find((o) => o.value === value);\n            return (option && option.label) ? option.label : value.toString();\n          };\n          const displayValue = Array.isArray(fieldValue) ? fieldValue.map(getOptionLabel).toString() : getOptionLabel(fieldValue);\n          val = displayValue;\n        }\n        val = this.state.isSimple ? val : `${label}: ${val}`;\n        allValues.push(val);\n      }\n    });\n    return allValues.join('; ');\n  }\n\n  render() {\n    const { unfold, editing, isSimple } = this.state;\n    const { global: { globalConfig, attributes, lackGlobalAttributes } } = store;\n\n    if (!globalConfig || !globalConfig.fields || globalConfig.fields.length === 0) {\n      // no global config\n      return null;\n    }\n\n    const fields = globalConfig.fields.map((f) => ({\n      ...f,\n      ...attributes[f.name] !== undefined && {\n        defaultValue: attributes[f.name],\n      },\n    }));\n\n    return (\n      <div className=\"global-attributes attributes-panel\">\n        <div className=\"attributes-panel-title\">\n          <div className=\"left\">\n            {this.props.unfoldEnabled && (\n              <div className={cx('unfold-icon', { fold: !unfold })} onClick={this.toggleFold}>\n                <DownArrow />\n              </div>\n            )}\n            <div className=\"title\">{i18n.translate('INFO_PANEL_GLOBAL_TITLE')}</div>\n            {!editing && (\n              <div className={cx('action-icon', { active: !isSimple })} onClick={this.toggleSimple}>\n                <LabelMode />\n              </div>\n            )}\n          </div>\n          <div className=\"right\" onClick={this.toggleEdit}>\n            {(!lackGlobalAttributes && store.review.drawMode) && (\n              <div className={cx('action-icon', { active: editing })}>\n                <Edit />\n              </div>\n            )}\n          </div>\n        </div>\n        <div className={cx('attributes-panel-content', {\n          fold: !unfold && this.props.unfoldEnabled\n        })}\n        >\n          {lackGlobalAttributes && (\n            <div className=\"warning\">{i18n.translate('INFO_PANEL_GLOBAL_WARNING')}</div>\n          )}\n          {editing ? (\n            <EasyForm\n              theme=\"dark\"\n              autoFocus={false}\n              fields={fields}\n              conditions={globalConfig.conditions}\n              effects={globalConfig.effects}\n              rules={globalConfig.rules}\n              onChange={this.handleChange}\n              onSubmit={this.toggleEdit}\n            />\n          ) : this.renderAttrs(attributes)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default observer(GlobalAttributes);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}