{"ast":null,"code":"import TierContainer from './TierContainer';\nimport AddBar from '../controls/AddBar';\nimport Segment from './Segment';\nimport TimingShape from './Timing';\nexport let ShapeType = /*#__PURE__*/function (ShapeType) {\n  ShapeType[\"TIER_CONTAINER\"] = \"tier_container\";\n  ShapeType[\"ADD_BAR\"] = \"add_bar\";\n  ShapeType[\"SEGMENT\"] = \"segment\";\n  ShapeType[\"TIMING\"] = \"timing\";\n  return ShapeType;\n}({});\nexport default class ShapeFactory {\n  static getShape(shapeType, options) {\n    switch (shapeType) {\n      case ShapeType.TIER_CONTAINER:\n        return new TierContainer(options);\n      case ShapeType.ADD_BAR:\n        return new AddBar(options);\n      case ShapeType.SEGMENT:\n        return new Segment(options);\n      case ShapeType.TIMING:\n        return new TimingShape(options);\n      default:\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["TierContainer","AddBar","Segment","TimingShape","ShapeType","ShapeFactory","getShape","shapeType","options","TIER_CONTAINER","ADD_BAR","SEGMENT","TIMING"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/common/shapes/ShapeFactory.ts"],"sourcesContent":["import TierContainer, { TierContainerOptions } from './TierContainer';\nimport AddBar, { AddBarOptions } from '../controls/AddBar';\nimport Segment, { SegmentOptions } from './Segment';\nimport TimingShape, { TimingOptions } from './Timing';\n\nexport enum ShapeType {\n  TIER_CONTAINER = 'tier_container',\n  ADD_BAR = 'add_bar',\n  SEGMENT = 'segment',\n  TIMING = 'timing',\n}\n\nexport type Shape = TierContainer | AddBar | Segment | TimingShape;\ntype Options = TierContainerOptions | AddBarOptions | SegmentOptions | TimingOptions;\n\nexport default class ShapeFactory {\n  static getShape(shapeType: ShapeType, options: Options): Shape | null {\n    switch (shapeType) {\n      case ShapeType.TIER_CONTAINER:\n        return new TierContainer(options as TierContainerOptions);\n      case ShapeType.ADD_BAR:\n        return new AddBar(options as AddBarOptions);\n      case ShapeType.SEGMENT:\n        return new Segment(options as SegmentOptions);\n      case ShapeType.TIMING:\n        return new TimingShape(options as TimingOptions);\n      default:\n    }\n    return null;\n  }\n}\n"],"mappings":"AAAA,OAAOA,aAAa,MAAgC,iBAAiB;AACrE,OAAOC,MAAM,MAAyB,oBAAoB;AAC1D,OAAOC,OAAO,MAA0B,WAAW;AACnD,OAAOC,WAAW,MAAyB,UAAU;AAErD,WAAYC,SAAS,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAUrB,eAAe,MAAMC,YAAY,CAAC;EAChC,OAAOC,QAAQA,CAACC,SAAoB,EAAEC,OAAgB,EAAgB;IACpE,QAAQD,SAAS;MACf,KAAKH,SAAS,CAACK,cAAc;QAC3B,OAAO,IAAIT,aAAa,CAACQ,OAA+B,CAAC;MAC3D,KAAKJ,SAAS,CAACM,OAAO;QACpB,OAAO,IAAIT,MAAM,CAACO,OAAwB,CAAC;MAC7C,KAAKJ,SAAS,CAACO,OAAO;QACpB,OAAO,IAAIT,OAAO,CAACM,OAAyB,CAAC;MAC/C,KAAKJ,SAAS,CAACQ,MAAM;QACnB,OAAO,IAAIT,WAAW,CAACK,OAAwB,CAAC;MAClD;IACF;IACA,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}