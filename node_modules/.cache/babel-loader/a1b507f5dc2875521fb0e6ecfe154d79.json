{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/long-audio/components/SegmentDetail/LineRoleRadio/LineRoleRadio.jsx\";\nimport React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport cx from 'classnames';\nimport { Radio } from 'antd';\nimport { setLineRole } from '../../../redux/action';\nimport { translate } from '../../../constants';\nimport { isAnnotationReadonly } from '../../../../../utils/tool-mode';\nimport './LineRoleRadio.scss';\nimport { Down } from '../../../../common/icons';\nconst LineRoleRadio = props => {\n  const {\n    index,\n    role,\n    currentRoles,\n    annotateDisabled,\n    ontology\n  } = props;\n  const foldable = ontology.size > 7;\n  const [fold, setFold] = useState(foldable);\n  const allRoles = useMemo(() => {\n    const roles = [];\n    [...ontology].forEach(([key, value], i) => {\n      if (fold && role === key && i >= 7) {\n        roles.unshift({\n          class_name: key,\n          display_color: value\n        });\n      } else {\n        roles.push({\n          class_name: key,\n          display_color: value\n        });\n      }\n      if (fold) {\n        roles.splice(7);\n      }\n    });\n    return roles;\n  }, [ontology, fold, role]);\n  const handleRadioChange = e => {\n    props.setLineRole({\n      lineIndex: index,\n      role: e.target.value\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"line-role-radio-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, allRoles.length === 1 && allRoles[0].class_name === 'none' ? null : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"line-role-radio-title\",\n    htmlFor: \"role\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, `${translate('role')}${props.index + 1}${props.index === 0 ? `(${translate('primary')})` : ''}: `), /*#__PURE__*/React.createElement(Radio.Group, {\n    value: role,\n    buttonStyle: \"solid\",\n    className: \"line-role-radio-group\",\n    onChange: e => handleRadioChange(e),\n    disabled: isAnnotationReadonly(props.toolMode) || annotateDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, allRoles.map((value, index2) => /*#__PURE__*/React.createElement(Radio.Button, {\n    // eslint-disable-next-line react/no-array-index-key\n    key: `line-role-radio-button-${index2}`,\n    className: \"line-role-radio-button\",\n    value: value.class_name,\n    disabled: currentRoles.indexOf(value.class_name) >= 0 && role !== value.class_name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"line-role-radio-color\",\n    style: {\n      backgroundColor: value.display_color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), value.class_name)), foldable && /*#__PURE__*/React.createElement(\"div\", {\n    className: cx('line-role-radio-button fold', {\n      active: !fold\n    }),\n    onClick: () => {\n      setFold(!fold);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Down, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 39\n    }\n  }))))));\n};\nLineRoleRadio.propTypes = {\n  setLineRole: PropTypes.func\n};\nconst mapStateToProps = state => ({\n  ontology: state.ontology,\n  toolMode: state.toolMode,\n  annotateDisabled: state.annotateDisabled\n});\nconst mapDispatchToProps = {\n  setLineRole\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LineRoleRadio);","map":{"version":3,"names":["React","useMemo","useState","PropTypes","connect","cx","Radio","setLineRole","translate","isAnnotationReadonly","Down","LineRoleRadio","props","index","role","currentRoles","annotateDisabled","ontology","foldable","size","fold","setFold","allRoles","roles","forEach","key","value","i","unshift","class_name","display_color","push","splice","handleRadioChange","e","lineIndex","target","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","length","Fragment","htmlFor","Group","buttonStyle","onChange","disabled","toolMode","map","index2","Button","indexOf","style","backgroundColor","active","onClick","propTypes","func","mapStateToProps","state","mapDispatchToProps"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/long-audio/components/SegmentDetail/LineRoleRadio/LineRoleRadio.jsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport cx from 'classnames';\nimport { Radio } from 'antd';\nimport { setLineRole } from '../../../redux/action';\nimport { translate } from '../../../constants';\nimport { isAnnotationReadonly } from '../../../../../utils/tool-mode';\nimport './LineRoleRadio.scss';\nimport { Down } from '../../../../common/icons';\n\nconst LineRoleRadio = (props) => {\n  const { index, role, currentRoles, annotateDisabled, ontology } = props;\n  const foldable = ontology.size > 7;\n  const [fold, setFold] = useState(foldable);\n  const allRoles = useMemo(() => {\n    const roles = [];\n    [...ontology].forEach(([key, value], i) => {\n      if (fold && role === key && i >= 7) {\n        roles.unshift({ class_name: key, display_color: value });\n      } else {\n        roles.push({ class_name: key, display_color: value });\n      }\n      if (fold) {\n        roles.splice(7);\n      }\n    });\n    return roles;\n  }, [ontology, fold, role]);\n  const handleRadioChange = (e) => {\n    props.setLineRole({\n      lineIndex: index,\n      role: e.target.value,\n    });\n  };\n  return (\n    <div className=\"line-role-radio-container\">\n      {allRoles.length === 1 && allRoles[0].class_name === 'none' ? null : (\n        <>\n          <label className=\"line-role-radio-title\" htmlFor=\"role\">{`${translate('role')}${props.index + 1}${props.index === 0 ? `(${translate('primary')})` : ''}: `}</label>\n          <Radio.Group\n            value={role}\n            buttonStyle=\"solid\"\n            className=\"line-role-radio-group\"\n            onChange={(e) => handleRadioChange(e)}\n            disabled={isAnnotationReadonly(props.toolMode) || annotateDisabled}\n          >\n            {allRoles.map((value, index2) => (\n              <Radio.Button\n                // eslint-disable-next-line react/no-array-index-key\n                key={`line-role-radio-button-${index2}`}\n                className=\"line-role-radio-button\"\n                value={value.class_name}\n                disabled={currentRoles.indexOf(value.class_name) >= 0 && role !== value.class_name}\n              >\n                <div\n                  className=\"line-role-radio-color\"\n                  style={{ backgroundColor: value.display_color }}\n                />\n                {value.class_name}\n              </Radio.Button>\n            ))}\n            {foldable && (\n              <div\n                className={cx('line-role-radio-button fold', { active: !fold })}\n                onClick={() => { setFold(!fold); }}\n              >\n                <div className=\"icon\"><Down /></div>\n              </div>\n            )}\n          </Radio.Group>\n        </>\n      )}\n    </div>\n  );\n};\n\nLineRoleRadio.propTypes = {\n  setLineRole: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  ontology: state.ontology,\n  toolMode: state.toolMode,\n  annotateDisabled: state.annotateDisabled,\n});\nconst mapDispatchToProps = {\n  setLineRole,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LineRoleRadio);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}