{"ast":null,"code":"import { Point } from 'pixi.js';\nimport { union } from 'polygon-clipping';\nimport Flatten from '@flatten-js/core';\nimport Shape, { BorderStyle } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlBar from './controls/ControlBar';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nconst DEFAULT_OFFSET = 50;\nexport default class LShape extends Shape {\n  /**\n   * get front face x\n   * @getter\n   */\n  get x() {\n    return this._x || 0;\n  }\n\n  /**\n   * set front face x\n   * @setter\n   */\n  set x(x) {\n    this._x = x;\n    this.normalize();\n  }\n\n  /**\n   * get front face y\n   * @getter\n   */\n  get y() {\n    return this._y || 0;\n  }\n\n  /**\n   * set front face y\n   * @setter\n   */\n  set y(y) {\n    this._y = y;\n    this.normalize();\n  }\n\n  /**\n   * get front face width\n   * @getter\n   */\n  get w() {\n    return this._w || 0;\n  }\n\n  /**\n   * set front face width\n   * @setter\n   */\n  set w(w) {\n    this._w = w;\n    this.normalize();\n  }\n\n  /**\n   * get front face height\n   * @getter\n   */\n  get h() {\n    return this._h || 0;\n  }\n\n  /**\n   * set front face height\n   * @setter\n   */\n  set h(h) {\n    this._h = h;\n    this.normalize();\n  }\n\n  /**\n   * get side point 1 x\n   * @getter\n   */\n  get sx1() {\n    return this._sx1 || 0;\n  }\n\n  /**\n   * set side point 1 x\n   * @setter\n   */\n  set sx1(sx1) {\n    this._sx1 = sx1;\n    this._sx2 = sx1;\n    this.normalize();\n  }\n\n  /**\n   * get side point 1 y\n   * @getter\n   */\n  get sy1() {\n    return this._sy1 || 0;\n  }\n\n  /**\n   * set side point 1 y\n   * @setter\n   */\n  set sy1(sy1) {\n    this._sy1 = sy1;\n    this.normalize();\n  }\n\n  /**\n   * get side point 2 x\n   * @getter\n   */\n  get sx2() {\n    return this._sx2 || 0;\n  }\n\n  /**\n   * set side point 2 x\n   * @setter\n   */\n  set sx2(sx2) {\n    this._sx2 = sx2;\n    this._sx1 = sx2;\n    this.normalize();\n  }\n\n  /**\n   * get side point 2 y\n   * @getter\n   */\n  get sy2() {\n    return this._sy2 || 0;\n  }\n\n  /**\n   * set side point 2 y\n   * @setter\n   */\n  set sy2(sy2) {\n    this._sy2 = sy2;\n    this.normalize();\n  }\n\n  /**\n   * get center\n   * @getter\n   */\n  get center() {\n    return this._center || 0;\n  }\n\n  /**\n   * set center\n   * @setter\n   */\n  set center(center) {\n    this._center = center;\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point) {\n    if (this.x !== point.x || this.y !== point.y) {\n      const offsetX = point.x - this.x;\n      const offsetY = point.y - this.y;\n      this._x = precise(point.x);\n      this._y = precise(point.y);\n      this._sx1 = precise(this.sx1 + offsetX);\n      this._sy1 = precise(this.sy1 + offsetY);\n      this._sx2 = precise(this.sx2 + offsetX);\n      this._sy2 = precise(this.sy2 + offsetY);\n      this._center = precise(this.center + offsetX);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const shapePoints = this.getPoints();\n    const left = Math.min(...shapePoints.map(p => p.x));\n    const right = Math.max(...shapePoints.map(p => p.x));\n    const top = Math.min(...shapePoints.map(p => p.y));\n    const bottom = Math.max(...shapePoints.map(p => p.y));\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  constructor(options) {\n    super(options);\n    this.shapeType = ShapeType.LSHAPE;\n    /**\n     * front face x\n     * @private\n     */\n    this._x = void 0;\n    /**\n     * front face y\n     * @private\n     */\n    this._y = void 0;\n    /**\n     * front face width\n     * @private\n     */\n    this._w = void 0;\n    /**\n     * front face height\n     * @private\n     */\n    this._h = void 0;\n    /**\n     * side point 1 x\n     * @private\n     */\n    this._sx1 = void 0;\n    /**\n     * side point 1 y\n     * @private\n     */\n    this._sy1 = void 0;\n    /**\n     * side point 1 x\n     * @private\n     */\n    this._sx2 = void 0;\n    /**\n     * side point 1 y\n     * @private\n     */\n    this._sy2 = void 0;\n    /**\n     * center line position x\n     * @private\n     */\n    this._center = void 0;\n    const {\n      front,\n      sidePoints,\n      center\n    } = options;\n    const {\n      x,\n      y,\n      width,\n      height\n    } = front || {};\n    const [p1, p2] = sidePoints || [];\n    if (x !== undefined && y !== undefined && width !== undefined && height !== undefined) {\n      this._x = x;\n      this._y = y;\n      this._w = width;\n      this._h = height;\n      if (p1 !== undefined && p1.x !== undefined && p1.y !== undefined) {\n        this._sx1 = p1.x;\n        this._sy1 = p1.y;\n      }\n      if (p2 !== undefined && p2.x !== undefined && p2.y !== undefined) {\n        this._sx2 = p2.x;\n        this._sy2 = p2.y;\n      }\n      if (this._sx1 === undefined) {\n        this._sx1 = this._sx2 || x + DEFAULT_OFFSET / this.scale;\n        this._sy1 = y - DEFAULT_OFFSET / this.scale;\n      }\n      if (this._sx2 === undefined) {\n        this._sx2 = this._sx1 || x + DEFAULT_OFFSET / this.scale;\n        this._sy2 = y + height - DEFAULT_OFFSET / this.scale;\n      }\n      this._center = center !== undefined ? center : x + width / 2;\n      this.normalize();\n    }\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    const mouseMove = event => {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(point);\n      this._draw(localPoint);\n    };\n    const mouseUp = () => {\n      this.normalize();\n      this._finish();\n      document.removeEventListener('mousemove', mouseMove, false);\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n    document.addEventListener('mousemove', mouseMove, false);\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   * @private\n   */\n  _drawShapeFill() {\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawRect(this.x, this.y, this.w, this.h);\n    this.instance.drawPolygon(this.getSidePoints().map(p => new Point(p.x, p.y)));\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape line\n   * @private\n   */\n  _drawShapeLine() {\n    const lineTo = (x, y) => {\n      if (this.borderStyle === BorderStyle.DASHED) {\n        this.instance.dashLineTo(x, y);\n      } else {\n        this.instance.lineTo(x, y);\n      }\n    };\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this.instance.moveTo(this.x, this.y);\n    lineTo(this.x + this.w, this.y);\n    lineTo(this.x + this.w, this.y + this.h);\n    lineTo(this.x, this.y + this.h);\n    lineTo(this.x, this.y);\n    this.instance.closePath();\n    const [p1, p2, p3, p4] = this.getSidePoints();\n    this.instance.moveTo(p1.x, p1.y);\n    lineTo(p4.x, p4.y);\n    lineTo(p3.x, p3.y);\n    lineTo(p2.x, p2.y);\n    this.instance.closePath();\n    this.instance.moveTo(this.center, this.y);\n    lineTo(this.center, this.y + this.h);\n  }\n\n  /**\n   * draw shape by the position\n   * @private\n   * @param point mouse position\n   */\n  _draw(point) {\n    const p = this._keepPointInBounds(point);\n    if (this._x === undefined || this._y === undefined) {\n      this._x = p.x;\n      this._y = p.y;\n    } else {\n      this._w = p.x - this._x;\n      this._h = p.y - this._y;\n      const sx1 = this._x + this._w + DEFAULT_OFFSET / this.scale;\n      const sy1 = this._y - DEFAULT_OFFSET / this.scale;\n      const sx2 = sx1;\n      const sy2 = sy1 + this._h;\n      const sp1 = this._keepPointInBounds(new Point(sx1, sy1));\n      const sp2 = this._keepPointInBounds(new Point(sx2, sy2));\n      this._sx1 = sp1.x;\n      this._sy1 = sp1.y;\n      this._sx2 = sp2.x;\n      this._sy2 = sp2.y;\n      this._center = this._x + this._w / 2;\n    }\n    this.drawShape();\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n    const points = this.getPoints();\n    const frontPoints = points.slice(0, 4);\n    const edgePoints = frontPoints.map((point, index) => {\n      const nextIndex = (index + 1) % 4;\n      const nextPoint = points[nextIndex];\n      return {\n        x: (point.x + nextPoint.x) / 2,\n        y: (point.y + nextPoint.y) / 2\n      };\n    });\n    [...edgePoints, {\n      x: this.sx1,\n      y: (this.sy1 + this.sy2) / 2\n    },\n    // side border\n    {\n      x: this.center,\n      y: this.y + this.h / 2\n    } // center border\n    ].forEach((point, index) => {\n      const i = index + 6;\n      if (this.selected) {\n        const isHorizontal = index % 2 === 0 && index < 4;\n        let size = isHorizontal ? this.w : this.h;\n        if (index === 4) {\n          size = Math.abs(this.sy1 - this.sy2);\n        }\n        if (!this._controls[i]) {\n          this._controls[i] = new ControlBar({\n            type: isHorizontal ? 'horizonal' : 'vertical',\n            size,\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: isHorizontal ? Cursor.NS_RESIZE : Cursor.EW_RESIZE,\n            onPositionChange: (x, y) => this._updateByBarPosition(index, x, y),\n            onFinish: () => this._finishResize()\n          });\n        }\n        this._controls[i].position = point;\n        this._controls[i].size = size;\n        this._controls[i].add();\n      } else if (this._controls[i]) {\n        this._controls[i].remove();\n      }\n    });\n    [...frontPoints, {\n      x: this.sx1,\n      y: this.sy1\n    },\n    // side points\n    {\n      x: this.sx2,\n      y: this.sy2\n    }].forEach((point, index) => {\n      if (this.selected) {\n        if (!this._controls[index]) {\n          let cursor = Cursor.POINTER;\n          if (index < 4) {\n            cursor = index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE;\n          }\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize()\n          });\n        }\n\n        // update\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].remove();\n      }\n    });\n  }\n\n  /**\n   * update LShape by dragging front face edge\n   * @param index edge index, top -> right -> bottom -> left\n   * @param x new position x\n   * @param y new position y\n   */\n  _updateByBarPosition(index, x, y) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const offsetX = position.x - this.x;\n    const offsetY = position.y - this.y;\n    switch (index) {\n      case 0:\n        this._y = position.y;\n        this._h = this.h - offsetY;\n        break;\n      case 1:\n        this._w = offsetX;\n        break;\n      case 2:\n        this._h = offsetY;\n        break;\n      case 3:\n        this._x = position.x;\n        this._w = this.w - offsetX;\n        break;\n      case 4:\n        this._sx1 = position.x;\n        this._sx2 = position.x;\n        break;\n      case 5:\n        this._center = Math.min(Math.max(x, this.x), this.x + this.w);\n        break;\n      default:\n    }\n    this._normalizeCenterLine();\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * update LShape by dragging point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  _updateByPointPosition(index, x, y) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const points = this.getPoints();\n    switch (index) {\n      case 0:\n        this._x = position.x;\n        this._y = position.y;\n        this._w = this.w - (position.x - points[index].x);\n        this._h = this.h - (position.y - points[index].y);\n        break;\n      case 1:\n        this._y = position.y;\n        this._w = this.w + (position.x - points[index].x);\n        this._h = this.h - (position.y - points[index].y);\n        break;\n      case 2:\n        this._w = this.w + (position.x - points[index].x);\n        this._h = this.h + (position.y - points[index].y);\n        break;\n      case 3:\n        this._x = position.x;\n        this._w = this.w - (position.x - points[index].x);\n        this._h = this.h + (position.y - points[index].y);\n        break;\n      case 4:\n        this._sx1 = position.x;\n        this._sy1 = position.y;\n        this._sx2 = this._sx1;\n        break;\n      case 5:\n        this._sx2 = position.x;\n        this._sy2 = position.y;\n        this._sx1 = this._sx2;\n        break;\n      default:\n    }\n    this._normalizeCenterLine();\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * when finish resize\n   */\n  _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    const sidePoints = this.sy1 <= this.sy2 ? [{\n      x: this.sx1,\n      y: this.sy1\n    }, {\n      x: this.sx2,\n      y: this.sy2\n    }] : [{\n      x: this.sx2,\n      y: this.sy2\n    }, {\n      x: this.sx1,\n      y: this.sy1\n    }];\n    return {\n      front: {\n        x: this.x,\n        y: this.y,\n        width: this.w,\n        height: this.h\n      },\n      sidePoints,\n      center: this.center\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const allPoints = this.getPoints();\n    const side1 = [allPoints.slice(0, 4).map(p => [p.x, p.y])];\n    const side2 = [allPoints.slice(4).map(p => [p.x, p.y])];\n    return union(side1, side2);\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * normalize center line position\n   * @private\n   */\n  _normalizeCenterLine() {\n    if (this.center < this.x) {\n      this._center = this.x;\n    } else if (this.center > this.x + this.w) {\n      this._center = this.x + this.w;\n    }\n    if (this._center !== undefined) {\n      this._center = precise(this._center);\n    }\n  }\n\n  /**\n   * normalize L shape, remove it if necessary\n   */\n  normalize() {\n    if (this._x === undefined || this._y === undefined || !this._w || !this._h) {\n      this._remove();\n      return;\n    }\n    if (this._w < 0) {\n      this._x += this._w;\n      this._w = Math.abs(this._w);\n    }\n    if (this._h < 0) {\n      this._y += this._h;\n      this._h = Math.abs(this._h);\n    }\n    this._x = precise(this._x);\n    this._y = precise(this._y);\n    this._w = precise(this._w);\n    this._h = precise(this._h);\n    if (this._sx1 !== undefined) {\n      this._sx1 = precise(this._sx1);\n    }\n    if (this._sy1 !== undefined) {\n      this._sy1 = precise(this._sy1);\n    }\n    if (this._sx2 !== undefined) {\n      this._sx2 = precise(this._sx2);\n    }\n    if (this._sy2 !== undefined) {\n      this._sy2 = precise(this._sy2);\n    }\n    this._normalizeCenterLine();\n    this.drawShape();\n  }\n\n  /**\n   * 8 points (2 points are duplicated)\n   */\n  getPoints() {\n    return [{\n      x: this.x,\n      y: this.y\n    }, {\n      x: this.x + this.w,\n      y: this.y\n    }, {\n      x: this.x + this.w,\n      y: this.y + this.h\n    }, {\n      x: this.x,\n      y: this.y + this.h\n    }, ...this.getSidePoints()];\n  }\n\n  /**\n   * get 4 points in side face\n   */\n  getSidePoints() {\n    let baseX;\n    if (Math.abs(this.sx1 - this.x) < Math.abs(this.sx1 - this.x - this.w)) {\n      // use left border\n      baseX = this.x;\n    } else {\n      // use right border\n      baseX = this.x + this.w;\n    }\n    const points = [];\n    if (this.h >= 0) {\n      points.push({\n        x: baseX,\n        y: this.y\n      });\n      points.push({\n        x: baseX,\n        y: this.y + this.h\n      });\n    } else {\n      points.push({\n        x: baseX,\n        y: this.y + this.h\n      });\n      points.push({\n        x: baseX,\n        y: this.y\n      });\n    }\n    if (this.sy1 > this.sy2) {\n      points.push({\n        x: this.sx1,\n        y: this.sy1\n      });\n      points.push({\n        x: this.sx2,\n        y: this.sy2\n      });\n    } else {\n      points.push({\n        x: this.sx2,\n        y: this.sy2\n      });\n      points.push({\n        x: this.sx1,\n        y: this.sy1\n      });\n    }\n    return points;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const {\n      x,\n      y\n    } = point;\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n    const [p1, p2, p3, p4, p5, p6, p7, p8] = this.getPoints();\n    // points\n    let nearestPoint;\n    let d;\n    [p1, p2, p3, p4, p7, p8].forEach(p => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    const lines = [[p1, p2], [p2, p3], [p3, p4], [p4, p1], [p6, p7], [p7, p8], [p8, p5]];\n    for (let i = 0; i < lines.length; i += 1) {\n      const startPoint = new Flatten.Point(lines[i][0].x, lines[i][0].y);\n      const endPoint = new Flatten.Point(lines[i][1].x, lines[i][1].y);\n      const line = new Flatten.Segment(startPoint, endPoint);\n      const [distance, segment] = line.distanceTo(location);\n      if (distance < t) {\n        const {\n          ps,\n          pe\n        } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["Point","union","Flatten","Shape","BorderStyle","ShapeType","ControlPoint","ControlBar","precise","Cursor","DEFAULT_OFFSET","LShape","x","_x","normalize","y","_y","w","_w","h","_h","sx1","_sx1","_sx2","sy1","_sy1","sx2","sy2","_sy2","center","_center","position","point","offsetX","offsetY","drawShape","shapeBounds","shapePoints","getPoints","left","Math","min","map","p","right","max","top","bottom","constructor","options","shapeType","LSHAPE","front","sidePoints","width","height","p1","p2","undefined","scale","create","mouseMove","event","_mapScreenToStagePosition","clientX","clientY","localPoint","_mapStageToLocalPosition","_draw","mouseUp","_finish","document","removeEventListener","addEventListener","_finished","instance","clear","_drawShapeFill","_drawShapeLine","drawShapeLabel","attachControlPoints","beginFill","color","alpha","drawRect","drawPolygon","getSidePoints","endFill","lineTo","borderStyle","DASHED","dashLineTo","lineStyle","borderWidth","displayBorderColor","borderAlpha","moveTo","closePath","p3","p4","_keepPointInBounds","sp1","sp2","editable","removeControls","points","frontPoints","slice","edgePoints","index","nextIndex","nextPoint","forEach","i","selected","isHorizontal","size","abs","_controls","type","container","controlsContainer","selectedColor","cursor","NS_RESIZE","EW_RESIZE","onPositionChange","_updateByBarPosition","onFinish","_finishResize","add","remove","POINTER","NWSE_RESIZE","NESW_RESIZE","_updateByPointPosition","_normalizeCenterLine","_resizing","resizing","_changed","getData","getAreaAsGeoJSON","allPoints","side1","side2","getLabelPosition","_remove","baseX","push","snapToPoint","tolerance","t","p5","p6","p7","p8","nearestPoint","d","pointDistance","sqrt","location","lines","length","startPoint","endPoint","line","Segment","distance","segment","distanceTo","ps","pe","edgePoint","equalTo"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/LShape.ts"],"sourcesContent":["import { Point } from 'pixi.js';\nimport { Polygon, union } from 'polygon-clipping';\nimport Flatten from '@flatten-js/core';\nimport Shape, { ShapeOptions, BorderStyle } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlBar from './controls/ControlBar';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\n\nconst DEFAULT_OFFSET = 50;\n\ninterface Face {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\ninterface IPoint {\n  x: number;\n  y: number;\n}\n\nexport interface LShapeData {\n  front: Face;\n  sidePoints: IPoint[];\n  center: number;\n}\n\nexport interface LShapeOptions extends ShapeOptions {\n  front?: Face;\n  sidePoints?: IPoint[];\n  center?: number;\n}\n\nexport default class LShape extends Shape<LShapeData> {\n  shapeType = ShapeType.LSHAPE;\n\n  /**\n   * front face x\n   * @private\n   */\n  private _x: number | undefined;\n\n  /**\n   * front face y\n   * @private\n   */\n  private _y: number | undefined;\n\n  /**\n   * front face width\n   * @private\n   */\n  private _w: number | undefined;\n\n  /**\n   * front face height\n   * @private\n   */\n  private _h: number | undefined;\n\n  /**\n   * side point 1 x\n   * @private\n   */\n  private _sx1: number | undefined;\n\n  /**\n   * side point 1 y\n   * @private\n   */\n  private _sy1: number | undefined;\n\n  /**\n   * side point 1 x\n   * @private\n   */\n  private _sx2: number | undefined;\n\n  /**\n   * side point 1 y\n   * @private\n   */\n  private _sy2: number | undefined;\n\n  /**\n   * center line position x\n   * @private\n   */\n  private _center: number | undefined;\n\n  /**\n   * get front face x\n   * @getter\n   */\n  get x() {\n    return this._x || 0;\n  }\n\n  /**\n   * set front face x\n   * @setter\n   */\n  set x(x: number) {\n    this._x = x;\n    this.normalize();\n  }\n\n  /**\n   * get front face y\n   * @getter\n   */\n  get y() {\n    return this._y || 0;\n  }\n\n  /**\n   * set front face y\n   * @setter\n   */\n  set y(y: number) {\n    this._y = y;\n    this.normalize();\n  }\n\n  /**\n   * get front face width\n   * @getter\n   */\n  get w() {\n    return this._w || 0;\n  }\n\n  /**\n   * set front face width\n   * @setter\n   */\n  set w(w: number) {\n    this._w = w;\n    this.normalize();\n  }\n\n  /**\n   * get front face height\n   * @getter\n   */\n  get h() {\n    return this._h || 0;\n  }\n\n  /**\n   * set front face height\n   * @setter\n   */\n  set h(h: number) {\n    this._h = h;\n    this.normalize();\n  }\n\n  /**\n   * get side point 1 x\n   * @getter\n   */\n  get sx1() {\n    return this._sx1 || 0;\n  }\n\n  /**\n   * set side point 1 x\n   * @setter\n   */\n  set sx1(sx1: number) {\n    this._sx1 = sx1;\n    this._sx2 = sx1;\n    this.normalize();\n  }\n\n  /**\n   * get side point 1 y\n   * @getter\n   */\n  get sy1() {\n    return this._sy1 || 0;\n  }\n\n  /**\n   * set side point 1 y\n   * @setter\n   */\n  set sy1(sy1: number) {\n    this._sy1 = sy1;\n    this.normalize();\n  }\n\n  /**\n   * get side point 2 x\n   * @getter\n   */\n  get sx2() {\n    return this._sx2 || 0;\n  }\n\n  /**\n   * set side point 2 x\n   * @setter\n   */\n  set sx2(sx2: number) {\n    this._sx2 = sx2;\n    this._sx1 = sx2;\n    this.normalize();\n  }\n\n  /**\n   * get side point 2 y\n   * @getter\n   */\n  get sy2() {\n    return this._sy2 || 0;\n  }\n\n  /**\n   * set side point 2 y\n   * @setter\n   */\n  set sy2(sy2: number) {\n    this._sy2 = sy2;\n    this.normalize();\n  }\n\n  /**\n   * get center\n   * @getter\n   */\n  get center() {\n    return this._center || 0;\n  }\n\n  /**\n   * set center\n   * @setter\n   */\n  set center(center: number) {\n    this._center = center;\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point: Point) {\n    if (this.x !== point.x || this.y !== point.y) {\n      const offsetX = point.x - this.x;\n      const offsetY = point.y - this.y;\n      this._x = precise(point.x);\n      this._y = precise(point.y);\n      this._sx1 = precise(this.sx1 + offsetX);\n      this._sy1 = precise(this.sy1 + offsetY);\n      this._sx2 = precise(this.sx2 + offsetX);\n      this._sy2 = precise(this.sy2 + offsetY);\n      this._center = precise(this.center + offsetX);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const shapePoints = this.getPoints();\n    const left = Math.min(...shapePoints.map((p) => p.x));\n    const right = Math.max(...shapePoints.map((p) => p.x));\n    const top = Math.min(...shapePoints.map((p) => p.y));\n    const bottom = Math.max(...shapePoints.map((p) => p.y));\n    return { left, top, right, bottom };\n  }\n\n  constructor(options: LShapeOptions) {\n    super(options);\n\n    const { front, sidePoints, center } = options;\n    const { x, y, width, height } = front || {};\n    const [p1, p2] = sidePoints || [];\n    if (x !== undefined && y !== undefined && width !== undefined && height !== undefined) {\n      this._x = x;\n      this._y = y;\n      this._w = width;\n      this._h = height;\n      if (p1 !== undefined && p1.x !== undefined && p1.y !== undefined) {\n        this._sx1 = p1.x;\n        this._sy1 = p1.y;\n      }\n      if (p2 !== undefined && p2.x !== undefined && p2.y !== undefined) {\n        this._sx2 = p2.x;\n        this._sy2 = p2.y;\n      }\n      if (this._sx1 === undefined) {\n        this._sx1 = this._sx2 || x + DEFAULT_OFFSET / this.scale;\n        this._sy1 = y - DEFAULT_OFFSET / this.scale;\n      }\n      if (this._sx2 === undefined) {\n        this._sx2 = this._sx1 || x + DEFAULT_OFFSET / this.scale;\n        this._sy2 = y + height - DEFAULT_OFFSET / this.scale;\n      }\n      this._center = center !== undefined ? center : x + width / 2;\n      this.normalize();\n    }\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    const mouseMove = (event: MouseEvent) => {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(point);\n      this._draw(localPoint);\n    };\n    const mouseUp = () => {\n      this.normalize();\n      this._finish();\n\n      document.removeEventListener('mousemove', mouseMove, false);\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n\n    document.addEventListener('mousemove', mouseMove, false);\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   * @private\n   */\n  private _drawShapeFill() {\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawRect(this.x, this.y, this.w, this.h);\n    this.instance.drawPolygon(this.getSidePoints().map((p) => new Point(p.x, p.y)));\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape line\n   * @private\n   */\n  private _drawShapeLine() {\n    const lineTo = (x: number, y: number) => {\n      if (this.borderStyle === BorderStyle.DASHED) {\n        this.instance.dashLineTo(x, y);\n      } else {\n        this.instance.lineTo(x, y);\n      }\n    };\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this.instance.moveTo(this.x, this.y);\n    lineTo(this.x + this.w, this.y);\n    lineTo(this.x + this.w, this.y + this.h);\n    lineTo(this.x, this.y + this.h);\n    lineTo(this.x, this.y);\n    this.instance.closePath();\n    const [p1, p2, p3, p4] = this.getSidePoints();\n    this.instance.moveTo(p1.x, p1.y);\n    lineTo(p4.x, p4.y);\n    lineTo(p3.x, p3.y);\n    lineTo(p2.x, p2.y);\n    this.instance.closePath();\n    this.instance.moveTo(this.center, this.y);\n    lineTo(this.center, this.y + this.h);\n  }\n\n  /**\n   * draw shape by the position\n   * @private\n   * @param point mouse position\n   */\n  private _draw(point: Point) {\n    const p = this._keepPointInBounds(point);\n    if (this._x === undefined || this._y === undefined) {\n      this._x = p.x;\n      this._y = p.y;\n    } else {\n      this._w = p.x - this._x;\n      this._h = p.y - this._y;\n      const sx1 = this._x + this._w + DEFAULT_OFFSET / this.scale;\n      const sy1 = this._y - DEFAULT_OFFSET / this.scale;\n      const sx2 = sx1;\n      const sy2 = sy1 + this._h;\n      const sp1 = this._keepPointInBounds(new Point(sx1, sy1));\n      const sp2 = this._keepPointInBounds(new Point(sx2, sy2));\n      this._sx1 = sp1.x;\n      this._sy1 = sp1.y;\n      this._sx2 = sp2.x;\n      this._sy2 = sp2.y;\n      this._center = this._x + this._w / 2;\n    }\n    this.drawShape();\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    const points = this.getPoints();\n    const frontPoints = points.slice(0, 4);\n    const edgePoints = frontPoints.map((point, index) => {\n      const nextIndex = (index + 1) % 4;\n      const nextPoint = points[nextIndex];\n      return {\n        x: (point.x + nextPoint.x) / 2,\n        y: (point.y + nextPoint.y) / 2,\n      };\n    });\n\n    [\n      ...edgePoints,\n      { x: this.sx1, y: (this.sy1 + this.sy2) / 2 }, // side border\n      { x: this.center, y: this.y + this.h / 2 }, // center border\n    ].forEach((point, index) => {\n      const i = index + 6;\n      if (this.selected) {\n        const isHorizontal = index % 2 === 0 && index < 4;\n        let size = isHorizontal ? this.w : this.h;\n        if (index === 4) {\n          size = Math.abs(this.sy1 - this.sy2);\n        }\n        if (!this._controls[i]) {\n          this._controls[i] = new ControlBar({\n            type: isHorizontal ? 'horizonal' : 'vertical',\n            size,\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: isHorizontal ? Cursor.NS_RESIZE : Cursor.EW_RESIZE,\n            onPositionChange: (x, y) => this._updateByBarPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n          });\n        }\n\n        this._controls[i].position = point;\n        this._controls[i].size = size;\n        this._controls[i].add();\n      } else if (this._controls[i]) {\n        this._controls[i].remove();\n      }\n    });\n\n    [\n      ...frontPoints,\n      { x: this.sx1, y: this.sy1 }, // side points\n      { x: this.sx2, y: this.sy2 },\n    ].forEach((point, index) => {\n      if (this.selected) {\n        if (!this._controls[index]) {\n          let cursor = Cursor.POINTER;\n          if (index < 4) {\n            cursor = index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE;\n          }\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n          });\n        }\n\n        // update\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].remove();\n      }\n    });\n  }\n\n  /**\n   * update LShape by dragging front face edge\n   * @param index edge index, top -> right -> bottom -> left\n   * @param x new position x\n   * @param y new position y\n   */\n  private _updateByBarPosition(index: number, x: number, y: number) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const offsetX = position.x - this.x;\n    const offsetY = position.y - this.y;\n    switch (index) {\n      case 0:\n        this._y = position.y;\n        this._h = this.h - offsetY;\n        break;\n      case 1:\n        this._w = offsetX;\n        break;\n      case 2:\n        this._h = offsetY;\n        break;\n      case 3:\n        this._x = position.x;\n        this._w = this.w - offsetX;\n        break;\n      case 4:\n        this._sx1 = position.x;\n        this._sx2 = position.x;\n        break;\n      case 5:\n        this._center = Math.min(Math.max(x, this.x), this.x + this.w);\n        break;\n      default:\n    }\n    this._normalizeCenterLine();\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * update LShape by dragging point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  private _updateByPointPosition(index: number, x: number, y: number) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const points = this.getPoints();\n    switch (index) {\n      case 0:\n        this._x = position.x;\n        this._y = position.y;\n        this._w = this.w - (position.x - points[index].x);\n        this._h = this.h - (position.y - points[index].y);\n        break;\n      case 1:\n        this._y = position.y;\n        this._w = this.w + (position.x - points[index].x);\n        this._h = this.h - (position.y - points[index].y);\n        break;\n      case 2:\n        this._w = this.w + (position.x - points[index].x);\n        this._h = this.h + (position.y - points[index].y);\n        break;\n      case 3:\n        this._x = position.x;\n        this._w = this.w - (position.x - points[index].x);\n        this._h = this.h + (position.y - points[index].y);\n        break;\n      case 4:\n        this._sx1 = position.x;\n        this._sy1 = position.y;\n        this._sx2 = this._sx1;\n        break;\n      case 5:\n        this._sx2 = position.x;\n        this._sy2 = position.y;\n        this._sx1 = this._sx2;\n        break;\n      default:\n    }\n    this._normalizeCenterLine();\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * when finish resize\n   */\n  private _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    const sidePoints = this.sy1 <= this.sy2 ? [\n      { x: this.sx1, y: this.sy1 },\n      { x: this.sx2, y: this.sy2 }\n    ] : [\n      { x: this.sx2, y: this.sy2 },\n      { x: this.sx1, y: this.sy1 },\n    ];\n    return {\n      front: { x: this.x, y: this.y, width: this.w, height: this.h },\n      sidePoints,\n      center: this.center,\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const allPoints = this.getPoints();\n    const side1: Polygon = [allPoints.slice(0, 4).map((p) => [p.x, p.y])];\n    const side2: Polygon = [allPoints.slice(4).map((p) => [p.x, p.y])];\n    return union(side1, side2);\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * normalize center line position\n   * @private\n   */\n  private _normalizeCenterLine() {\n    if (this.center < this.x) {\n      this._center = this.x;\n    } else if (this.center > this.x + this.w) {\n      this._center = this.x + this.w;\n    }\n    if (this._center !== undefined) {\n      this._center = precise(this._center);\n    }\n  }\n\n  /**\n   * normalize L shape, remove it if necessary\n   */\n  normalize() {\n    if (this._x === undefined || this._y === undefined || !this._w || !this._h) {\n      this._remove();\n      return;\n    }\n\n    if (this._w < 0) {\n      this._x += this._w;\n      this._w = Math.abs(this._w);\n    }\n    if (this._h < 0) {\n      this._y += this._h;\n      this._h = Math.abs(this._h);\n    }\n\n    this._x = precise(this._x);\n    this._y = precise(this._y);\n    this._w = precise(this._w);\n    this._h = precise(this._h);\n    if (this._sx1 !== undefined) {\n      this._sx1 = precise(this._sx1);\n    }\n    if (this._sy1 !== undefined) {\n      this._sy1 = precise(this._sy1);\n    }\n    if (this._sx2 !== undefined) {\n      this._sx2 = precise(this._sx2);\n    }\n    if (this._sy2 !== undefined) {\n      this._sy2 = precise(this._sy2);\n    }\n\n    this._normalizeCenterLine();\n    this.drawShape();\n  }\n\n  /**\n   * 8 points (2 points are duplicated)\n   */\n  getPoints() {\n    return [\n      { x: this.x, y: this.y },\n      { x: this.x + this.w, y: this.y },\n      { x: this.x + this.w, y: this.y + this.h },\n      { x: this.x, y: this.y + this.h },\n      ...this.getSidePoints(),\n    ];\n  }\n\n  /**\n   * get 4 points in side face\n   */\n  getSidePoints() {\n    let baseX;\n    if (Math.abs(this.sx1 - this.x) < Math.abs(this.sx1 - this.x - this.w)) {\n      // use left border\n      baseX = this.x;\n    } else {\n      // use right border\n      baseX = this.x + this.w;\n    }\n\n    const points: IPoint[] = [];\n    if (this.h >= 0) {\n      points.push({ x: baseX, y: this.y });\n      points.push({ x: baseX, y: this.y + this.h });\n    } else {\n      points.push({ x: baseX, y: this.y + this.h });\n      points.push({ x: baseX, y: this.y });\n    }\n    if (this.sy1 > this.sy2) {\n      points.push({ x: this.sx1, y: this.sy1 });\n      points.push({ x: this.sx2, y: this.sy2 });\n    } else {\n      points.push({ x: this.sx2, y: this.sy2 });\n      points.push({ x: this.sx1, y: this.sy1 });\n    }\n    return points;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point: Point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const { x, y } = point;\n    const { left, right, top, bottom } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n\n    const [p1, p2, p3, p4, p5, p6, p7, p8] = this.getPoints();\n    // points\n    let nearestPoint: { x: number; y: number; } | undefined;\n    let d: number | undefined;\n    [p1, p2, p3, p4, p7, p8].forEach((p) => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    const lines = [\n      [p1, p2],\n      [p2, p3],\n      [p3, p4],\n      [p4, p1],\n      [p6, p7],\n      [p7, p8],\n      [p8, p5],\n    ];\n    for (let i = 0; i < lines.length; i += 1) {\n      const startPoint = new Flatten.Point(lines[i][0].x, lines[i][0].y);\n      const endPoint = new Flatten.Point(lines[i][1].x, lines[i][1].y);\n      const line = new Flatten.Segment(startPoint, endPoint);\n      const [distance, segment] = line.distanceTo(location);\n      if (distance < t) {\n        const { ps, pe } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}