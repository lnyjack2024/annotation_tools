{"ast":null,"code":"import { makeAutoObservable, runInAction, toJS } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Modal, message } from 'antd';\nimport { cloneDeep, findLastIndex } from 'lodash';\nimport { validate as validateForm } from '@appen-china/easy-form/es/utils';\nimport { Base64 } from 'js-base64';\nimport i18n from './locales';\nimport MDialogueItem from './models/DialogueItem';\nimport ValidationStore from './validationStore';\nimport { ReviewMode } from './types';\nimport { ChatItemType } from '../common/llm/chat/ChatItem';\nimport { InputType } from '../common/llm/input/InputWrapper';\nimport { contentToPlainText, isContentEmpty, parseContent } from '../common/llm/helper';\nimport { LLMModel, RankingType } from '../common/llm/types';\nimport { ToolMode, isAnnotationReadonly, isPreview, isReviewEditable, isRework, isTemplatePreview } from '../../utils/tool-mode';\nclass Store {\n  get hasError() {\n    return this._hasError || this.hasRankError || this.hasItemAttrError;\n  }\n  set hasError(val) {\n    this._hasError = val;\n    if (!val) {\n      this.hasRankError = val;\n      this.hasItemAttrError = val;\n    }\n  }\n\n  /**\n   * item rank has error\n   */\n\n  /**\n   * next dialogue item type\n   */\n  get nextDialogueItemType() {\n    if (this.dialogue.length === 0) {\n      return ChatItemType.Q;\n    }\n    const last = this.dialogue[this.dialogue.length - 1];\n    return last.type === ChatItemType.A ? ChatItemType.Q : ChatItemType.A;\n  }\n\n  /**\n   * can add dialogue item\n   */\n  get canAddDialogueItem() {\n    if (this.readonly || !this.addible) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * current editor types\n   */\n  get currentEditorTypes() {\n    var _this$selectedDialogu;\n    const type = this.isAdding ? this.nextDialogueItemType : (_this$selectedDialogu = this.selectedDialogueItem) === null || _this$selectedDialogu === void 0 ? void 0 : _this$selectedDialogu.type;\n    return type === ChatItemType.A ? this.editorTypes.A : this.editorTypes.Q;\n  }\n\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.jobProxy.toolMode) || this.reviewMode === ReviewMode.REVIEW;\n  }\n\n  /**\n   * is tool annotate allowed\n   */\n  get annotatable() {\n    return !isAnnotationReadonly(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool review enabled\n   */\n  get reviewable() {\n    return isReviewEditable(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool in labeling mode or template preview mode\n   */\n  get isLabeling() {\n    return this.jobProxy.toolMode === ToolMode.LABELING || this.isTemplatePreview;\n  }\n\n  /**\n   * is tool in rework mode\n   */\n  get isRework() {\n    return isRework(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool in preview mode\n   */\n  get isPreview() {\n    return isPreview(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool in template preview mode\n   */\n  get isTemplatePreview() {\n    return isTemplatePreview(this.jobProxy.toolMode);\n  }\n  isOriginalDialogue(val, forceToolModeCheck = false) {\n    if (forceToolModeCheck && this.isLabeling) {\n      return true;\n    }\n    return typeof val === 'boolean' ? val : this.isLabeling;\n  }\n  constructor() {\n    /**\n     * job proxy\n     */\n    this.jobProxy = void 0;\n    /**\n     * is tool initialized\n     */\n    this.initialized = false;\n    /**\n     * labeling or review mode\n     */\n    this.reviewMode = ReviewMode.LABELING;\n    /**\n     * instruction\n     */\n    this.instruction = [];\n    /**\n     * dialogue\n     */\n    this.dialogue = [];\n    /**\n     * subject\n     */\n    this.subject = void 0;\n    /**\n     * [config] global rank\n     */\n    this.attributes = void 0;\n    /**\n     * [config] global rank config\n     */\n    this.attributesConfig = '';\n    /**\n     * [config] item attributes  config\n     */\n    this.itemAttributesConfig = void 0;\n    /**\n     * current selected dialogue item\n     */\n    this.selectedDialogueItem = void 0;\n    /**\n     * is editing\n     */\n    this.isEditing = false;\n    /**\n     * is adding\n     */\n    this.isAdding = false;\n    /**\n     * is ranking\n     */\n    this.isRanking = false;\n    /**\n     * is attributes editing\n     */\n    this.isItemAttributesEditing = false;\n    /**\n     * has error\n     */\n    this._hasError = false;\n    this.hasRankError = false;\n    /**\n     * item attributes has error\n     */\n    this.hasItemAttrError = false;\n    /**\n     * [config] options for subject selection\n     */\n    this.subjectOptions = [];\n    /**\n     * [config] dialogue rank\n     */\n    this.ranking = false;\n    /**\n     * [config] ranking type (score / mark)\n     */\n    this.rankingType = RankingType.SCORE;\n    /**\n     * [config] options for ranking\n     */\n    this.rankingOptions = [];\n    /**\n     * [config] dialogue editable (only control original answers)\n     */\n    this.editable = false;\n    /**\n     * [config] can add new dialogue\n     */\n    this.addible = false;\n    /**\n     * [config] model used when add dialogue item\n     */\n    this.addModel = LLMModel.NONUSE;\n    /**\n     * validation\n     */\n    this.validation = void 0;\n    /**\n    * validation config\n    */\n    this.validationConfig = {\n      script: false\n    };\n    /**\n     * submit check\n     */\n    this.submitCheck = false;\n    /**\n     * editor types\n     */\n    this.editorTypes = {\n      Q: [InputType.DEFAULT],\n      A: [InputType.DEFAULT]\n    };\n    this.validateResult = () => {\n      // 1) check dialogue item value\n      // 2) check dialogue item rank\n      // 3) check dialogue item attributes\n      // 4) check dialogue limit\n      let newlyAddedRoundsCount = 0;\n      this.dialogue.forEach(dialogueItem => {\n        if (!dialogueItem.original) {\n          if (isContentEmpty(dialogueItem.value)) {\n            this.selectedDialogueItem = dialogueItem;\n            this.isEditing = true;\n            this.hasError = true;\n            throw new Error(i18n.translate('CHAT_ITEM_EMPTY_ERROR'));\n          }\n          if (dialogueItem.type === ChatItemType.A) {\n            newlyAddedRoundsCount += 1;\n          }\n        }\n        if (dialogueItem.type === ChatItemType.A) {\n          if (this.ranking && this.rankingType === RankingType.SCORE && this.rankingOptions.some(o => {\n            var _dialogueItem$rank, _dialogueItem$rank$sc;\n            return ((_dialogueItem$rank = dialogueItem.rank) === null || _dialogueItem$rank === void 0 ? void 0 : (_dialogueItem$rank$sc = _dialogueItem$rank.scores) === null || _dialogueItem$rank$sc === void 0 ? void 0 : _dialogueItem$rank$sc[o]) === undefined;\n          })) {\n            this.selectedDialogueItem = dialogueItem;\n            this.isRanking = true;\n            this.hasRankError = true;\n            throw new Error(i18n.translate('CHAT_ITEM_RANK_EMPTY_ERROR'));\n          }\n          if (this.itemAttributesConfig) {\n            const {\n              attributes\n            } = dialogueItem;\n            if (attributes) {\n              const validateRes = validateForm(this.itemAttributesConfig, attributes);\n              if (!validateRes) {\n                this.selectedDialogueItem = dialogueItem;\n                this.isItemAttributesEditing = true;\n                this.hasItemAttrError = true;\n                throw new Error(i18n.translate('CHAT_ITEM_ATTR_EMPTY_ERROR'));\n              }\n            }\n          }\n        }\n      });\n    };\n    this.setSubject = subject => {\n      this.subject = subject;\n    };\n    this.setAttributesConfig = attributes => {\n      this.attributes = attributes;\n    };\n    this.validate = () => {\n      var _this$selectedDialogu2;\n      if (this.isAdding) {\n        this.catchSaveError();\n        throw new Error('should finish adding');\n      }\n      if (((_this$selectedDialogu2 = this.selectedDialogueItem) === null || _this$selectedDialogu2 === void 0 ? void 0 : _this$selectedDialogu2.type) === ChatItemType.A) {\n        if (this.isRanking && this.rankingType === RankingType.SCORE && this.rankingOptions.some(o => {\n          var _this$selectedDialogu3, _this$selectedDialogu4, _this$selectedDialogu5;\n          return ((_this$selectedDialogu3 = this.selectedDialogueItem) === null || _this$selectedDialogu3 === void 0 ? void 0 : (_this$selectedDialogu4 = _this$selectedDialogu3.rank) === null || _this$selectedDialogu4 === void 0 ? void 0 : (_this$selectedDialogu5 = _this$selectedDialogu4.scores) === null || _this$selectedDialogu5 === void 0 ? void 0 : _this$selectedDialogu5[o]) === undefined;\n        })) {\n          this.catchRankError();\n          throw new Error('should finish ranking');\n        }\n        if (this.isItemAttributesEditing && this.itemAttributesConfig) {\n          const {\n            attributes\n          } = this.selectedDialogueItem;\n          if (attributes) {\n            const validateRes = validateForm(this.itemAttributesConfig, attributes);\n            if (!validateRes) {\n              this.catchItemAttributesError();\n              throw new Error('should finish the item attributes form');\n            }\n          }\n        }\n      }\n    };\n    this.validateItem = () => {\n      try {\n        this.validate();\n        this.hasError = false;\n        this.isRanking = false;\n        this.isItemAttributesEditing = false;\n      } catch (e) {\n        // validate failed\n      }\n    };\n    this.selectDialogueItem = dialogueItem => {\n      var _this$selectedDialogu6;\n      if (((_this$selectedDialogu6 = this.selectedDialogueItem) === null || _this$selectedDialogu6 === void 0 ? void 0 : _this$selectedDialogu6.id) === dialogueItem.id) {\n        return;\n      }\n      try {\n        this.validate();\n        this.hasError = false;\n        this.selectedDialogueItem = dialogueItem;\n        this.isEditing = false;\n        this.isRanking = false;\n        this.isItemAttributesEditing = false;\n      } catch (e) {\n        // validate failed\n      }\n    };\n    this.addDialogueItem = () => {\n      if (this.readonly || !this.canAddDialogueItem) {\n        return;\n      }\n      try {\n        this.validate();\n        this.hasError = false;\n        this.selectedDialogueItem = undefined;\n        this.isEditing = false;\n        this.isRanking = false;\n        this.isItemAttributesEditing = false;\n        this.isAdding = true;\n      } catch (e) {\n        // validate failed\n      }\n    };\n    this.getDialogueItemContent = () => {\n      const currentDialogue = [...this.dialogue];\n      const lastQuestionItem = currentDialogue.reverse().find(item => item.type === ChatItemType.Q);\n      if (lastQuestionItem) {\n        const content = contentToPlainText(lastQuestionItem.value);\n        return [{\n          role: 'user',\n          content\n        }];\n      }\n      return null;\n    };\n    this.editDialogueItem = dialogueItem => {\n      var _this$selectedDialogu7;\n      if (this.readonly || dialogueItem.original && !this.editable) {\n        return;\n      }\n      if (((_this$selectedDialogu7 = this.selectedDialogueItem) === null || _this$selectedDialogu7 === void 0 ? void 0 : _this$selectedDialogu7.id) === dialogueItem.id) {\n        this.isEditing = true;\n        return;\n      }\n      try {\n        this.validate();\n        this.hasError = false;\n        this.selectedDialogueItem = dialogueItem;\n        this.isRanking = false;\n        this.isItemAttributesEditing = false;\n        this.isEditing = true;\n      } catch (e) {\n        // validate failed\n      }\n    };\n    this.saveDialogueItem = value => {\n      if (this.readonly) {\n        return;\n      }\n      if (this.isAdding) {\n        // add new dialogue item\n        const newItem = new MDialogueItem({\n          id: uuidv4(),\n          type: this.nextDialogueItemType,\n          original: false,\n          value\n        });\n        this.dialogue.push(newItem);\n        this.selectedDialogueItem = newItem;\n        if (!this.readonly && this.ranking && newItem.type === ChatItemType.A) {\n          this.isRanking = true;\n        }\n      } else if (this.isEditing && this.selectedDialogueItem) {\n        // update dialogue item\n        this.selectedDialogueItem.value = value;\n      }\n      this.cancelSaveDialogueItem();\n    };\n    this.updateDialogueItem = (dialogueItem, value) => {\n      if (this.readonly || this.isAdding || this.isEditing) {\n        return;\n      }\n      dialogueItem.value = value;\n    };\n    this.cancelSaveDialogueItem = () => {\n      this.isEditing = false;\n      this.isAdding = false;\n    };\n    this.catchSaveError = msg => {\n      this.hasError = true;\n      message.error(msg || i18n.translate('CHAT_ITEM_EMPTY_ERROR'));\n    };\n    this.rankDialogueItem = dialogueItem => {\n      if (this.readonly || !this.ranking || dialogueItem.type === ChatItemType.Q) {\n        return;\n      }\n      try {\n        var _this$selectedDialogu8;\n        this.validate();\n        this.hasError = false;\n        if (((_this$selectedDialogu8 = this.selectedDialogueItem) === null || _this$selectedDialogu8 === void 0 ? void 0 : _this$selectedDialogu8.id) !== dialogueItem.id) {\n          this.isItemAttributesEditing = false;\n        }\n        this.selectedDialogueItem = dialogueItem;\n        this.isEditing = false;\n        this.isRanking = true;\n      } catch (e) {\n        // validate failed\n      }\n    };\n    this.saveRank = (dialogueItem, rank) => {\n      var _this$selectedDialogu9;\n      if (this.readonly) {\n        return;\n      }\n      if (((_this$selectedDialogu9 = this.selectedDialogueItem) === null || _this$selectedDialogu9 === void 0 ? void 0 : _this$selectedDialogu9.id) !== dialogueItem.id) {\n        try {\n          this.validate();\n          this.hasError = false;\n          this.isItemAttributesEditing = false;\n        } catch (e) {\n          // validate failed\n          return;\n        }\n      }\n      this.isRanking = true;\n      this.selectedDialogueItem = dialogueItem;\n      this.selectedDialogueItem.rank = rank;\n    };\n    this.onItemAttributesEdit = dialogueItem => {\n      var _this$selectedDialogu10;\n      if (this.readonly || !this.itemAttributesConfig || dialogueItem.type === ChatItemType.Q) {\n        return;\n      }\n      try {\n        this.validate();\n        this.hasError = false;\n      } catch (e) {\n        // validate failed\n        return;\n      }\n      if (((_this$selectedDialogu10 = this.selectedDialogueItem) === null || _this$selectedDialogu10 === void 0 ? void 0 : _this$selectedDialogu10.id) !== dialogueItem.id) {\n        this.isRanking = false;\n      }\n      this.selectedDialogueItem = dialogueItem;\n      this.isEditing = false;\n      this.isItemAttributesEditing = true;\n    };\n    this.setItemAttributes = (dialogueItem, attributes) => {\n      var _this$selectedDialogu11;\n      if (this.readonly) {\n        return;\n      }\n      if (((_this$selectedDialogu11 = this.selectedDialogueItem) === null || _this$selectedDialogu11 === void 0 ? void 0 : _this$selectedDialogu11.id) !== dialogueItem.id) {\n        try {\n          this.validate();\n          this.hasError = false;\n        } catch (e) {\n          // validate failed\n          return;\n        }\n      }\n      this.selectedDialogueItem = dialogueItem;\n      this.selectedDialogueItem.attributes = attributes;\n    };\n    this.deleteItemAttributes = dialogueItem => {\n      Modal.confirm({\n        title: i18n.translate('CHAT_ITEM_DEL_TITLE'),\n        okText: i18n.translate('CHAT_ITEM_DEL_OK'),\n        cancelText: i18n.translate('CHAT_ITEM_DEL_CANCEL'),\n        onOk: () => {\n          this.setItemAttributes(dialogueItem, undefined);\n          this.isItemAttributesEditing = false;\n        }\n      });\n    };\n    this.saveItemAttributes = (dialogueItem, attributes) => {\n      this.setItemAttributes(dialogueItem, attributes);\n      this.isItemAttributesEditing = true;\n    };\n    this.catchRankError = msg => {\n      this.hasRankError = true;\n      message.error(msg || i18n.translate('CHAT_ITEM_RANK_EMPTY_ERROR'));\n    };\n    this.catchItemAttributesError = msg => {\n      this.hasItemAttrError = true;\n      message.error(msg || i18n.translate('CHAT_ITEM_ATTR_EMPTY_ERROR'));\n    };\n    makeAutoObservable(this, {\n      jobProxy: false\n    });\n  }\n  async init(payload) {\n    this.initConfig(payload);\n    this.initValidate();\n    try {\n      await this.loadResult();\n    } catch (e) {\n      // load error\n    }\n    runInAction(() => {\n      this.initialized = true;\n    });\n  }\n  initConfig(payload) {\n    // subject\n    if (typeof payload.subjects === 'string') {\n      const subjectsSplits = payload.subjects.split(',').map(i => i.trim()).filter(i => !!i);\n      if (subjectsSplits.length > 0) {\n        this.subjectOptions = Array.from(new Set(subjectsSplits));\n      }\n    }\n    // attributes_config\n    if (typeof payload.attributes_config === 'string') {\n      this.attributesConfig = payload.attributes_config;\n    }\n\n    // item_attributes_config\n    if (typeof payload.item_attributes_config === 'string') {\n      const configStr = Base64.decode(payload.item_attributes_config || '');\n      if (configStr) {\n        try {\n          const parsedConfig = JSON.parse(configStr);\n          this.itemAttributesConfig = parsedConfig;\n        } catch (error) {\n          // parse error\n        }\n      }\n    }\n\n    // ranking\n    this.ranking = payload.ranking === true || payload.ranking === 'true';\n    if (this.ranking) {\n      if (Object.values(RankingType).includes(payload.ranking_type)) {\n        this.rankingType = payload.ranking_type;\n      }\n      if (typeof payload.ranking_options === 'string') {\n        const optionsSplits = payload.ranking_options.split(',').map(i => i.trim()).filter(i => !!i);\n        if (optionsSplits.length > 0) {\n          this.rankingOptions = [...optionsSplits];\n        }\n      }\n    }\n\n    // editable\n    this.editable = payload.editable === true || payload.editable === 'true';\n\n    // addible\n    this.addible = payload.addible === true || payload.addible === 'true';\n    if (this.addible) {\n      if (Object.values(LLMModel).includes(payload.add_model)) {\n        this.addModel = payload.add_model;\n      }\n    }\n  }\n  initValidate() {\n    this.validation = new ValidationStore(this);\n  }\n  async loadResult() {\n    const savedResult = await this.jobProxy.loadSavedResult();\n    const reviewFromResult = await this.jobProxy.loadReviewFrom();\n    const result = savedResult || reviewFromResult;\n    if (!result) {\n      return;\n    }\n    if (result.auditId) {\n      this.jobProxy.setAuditId(result.auditId);\n    }\n    const {\n      desc,\n      dialogue,\n      chat,\n      attributes,\n      instruction\n    } = result;\n    if (typeof desc === 'string' && desc) {\n      this.subject = desc;\n    }\n    if (attributes) {\n      this.attributes = attributes;\n    }\n    this.instruction = parseContent(instruction);\n    this.parseDialogue(dialogue, chat, !savedResult);\n  }\n  async saveResult(submit = false) {\n    if (submit && this.annotatable) {\n      this.validateResult();\n    }\n    return this.jobProxy.saveResult({\n      instruction: toJS(this.instruction),\n      attributes: toJS(this.attributes),\n      desc: this.subject,\n      dialogue: this.dialogue.map(dialogueItem => dialogueItem.toJSON()),\n      modelInput: this.generateModelInput(),\n      auditId: this.jobProxy.auditId,\n      templateConfig: this.jobProxy.templateConfig\n    }, submit);\n  }\n  saveReviews(submit = false) {\n    // TODO:\n  }\n  parseDialogue(dialogue, chat, isFromReviewFrom = false) {\n    const list = [];\n    if (Array.isArray(dialogue) && dialogue.length > 0) {\n      let lastItemType = ChatItemType.A;\n      dialogue.forEach(item => {\n        let {\n          type\n        } = item;\n        if (Object.values(ChatItemType).indexOf(type) < 0) {\n          type = lastItemType === ChatItemType.A ? ChatItemType.Q : ChatItemType.A;\n        }\n        const original = this.isOriginalDialogue(item.original, isFromReviewFrom);\n        const value = parseContent(item.value);\n        let originalValue;\n        if (item.originalValue) {\n          originalValue = parseContent(item.originalValue);\n        } else if (original) {\n          originalValue = value;\n        }\n        if (type === lastItemType) {\n          // merge value to last item if same type with last item\n          const lastItem = list[list.length - 1];\n          if (lastItem) {\n            lastItem.value.push(...value);\n            if (originalValue) {\n              if (lastItem.originalValue) {\n                lastItem.originalValue.push(...originalValue);\n              } else {\n                lastItem.originalValue = originalValue;\n              }\n            }\n          }\n        } else {\n          list.push(new MDialogueItem({\n            id: item.id || uuidv4(),\n            type,\n            original,\n            value,\n            originalValue,\n            rank: item.rank,\n            model: item.model,\n            attributes: item.attributes\n          }));\n        }\n        lastItemType = type;\n      });\n      const lastOriginalIndex = findLastIndex(list, i => i.original);\n      let i = 0;\n      while (i < lastOriginalIndex) {\n        // fix original value\n        list[i].original = true;\n        if (!list[i].originalValue) {\n          // miss original value\n          list[i].originalValue = cloneDeep(list[i].value);\n        }\n        i += 1;\n      }\n    } else if (Array.isArray(chat) && chat.length > 0) {\n      chat.forEach(item => {\n        const {\n          input,\n          output\n        } = item;\n        if (input !== undefined && output !== undefined) {\n          const inputContent = parseContent(input);\n          list.push(new MDialogueItem({\n            id: uuidv4(),\n            type: ChatItemType.Q,\n            original: this.isLabeling,\n            value: inputContent,\n            ...(this.isLabeling && {\n              originalValue: inputContent\n            })\n          }));\n          const ouputContent = parseContent(output);\n          list.push(new MDialogueItem({\n            id: uuidv4(),\n            type: ChatItemType.A,\n            original: this.isLabeling,\n            value: ouputContent,\n            ...(this.isLabeling && {\n              originalValue: ouputContent\n            })\n          }));\n        }\n      });\n    }\n    this.dialogue = list;\n  }\n  generateModelInput() {\n    const chat = [];\n    const start = this.dialogue.findIndex(i => i.type === ChatItemType.Q);\n    for (let i = start; i < this.dialogue.length; i += 2) {\n      const q = this.dialogue[i];\n      const a = this.dialogue[i + 1];\n      if (q && a) {\n        chat.push({\n          input: contentToPlainText(q.value),\n          output: contentToPlainText(a.value),\n          rank: toJS(a.rank),\n          attributes: toJS(a.attributes)\n        });\n      }\n    }\n    return {\n      desc: this.subject,\n      attributes: toJS(this.attributes),\n      chat\n    };\n  }\n}\nexport default new Store();","map":{"version":3,"names":["makeAutoObservable","runInAction","toJS","v4","uuidv4","Modal","message","cloneDeep","findLastIndex","validate","validateForm","Base64","i18n","MDialogueItem","ValidationStore","ReviewMode","ChatItemType","InputType","contentToPlainText","isContentEmpty","parseContent","LLMModel","RankingType","ToolMode","isAnnotationReadonly","isPreview","isReviewEditable","isRework","isTemplatePreview","Store","hasError","_hasError","hasRankError","hasItemAttrError","val","nextDialogueItemType","dialogue","length","Q","last","type","A","canAddDialogueItem","readonly","addible","currentEditorTypes","_this$selectedDialogu","isAdding","selectedDialogueItem","editorTypes","jobProxy","toolMode","reviewMode","REVIEW","annotatable","reviewable","isLabeling","LABELING","isOriginalDialogue","forceToolModeCheck","constructor","initialized","instruction","subject","attributes","attributesConfig","itemAttributesConfig","isEditing","isRanking","isItemAttributesEditing","subjectOptions","ranking","rankingType","SCORE","rankingOptions","editable","addModel","NONUSE","validation","validationConfig","script","submitCheck","DEFAULT","validateResult","newlyAddedRoundsCount","forEach","dialogueItem","original","value","Error","translate","some","o","_dialogueItem$rank","_dialogueItem$rank$sc","rank","scores","undefined","validateRes","setSubject","setAttributesConfig","_this$selectedDialogu2","catchSaveError","_this$selectedDialogu3","_this$selectedDialogu4","_this$selectedDialogu5","catchRankError","catchItemAttributesError","validateItem","e","selectDialogueItem","_this$selectedDialogu6","id","addDialogueItem","getDialogueItemContent","currentDialogue","lastQuestionItem","reverse","find","item","content","role","editDialogueItem","_this$selectedDialogu7","saveDialogueItem","newItem","push","cancelSaveDialogueItem","updateDialogueItem","msg","error","rankDialogueItem","_this$selectedDialogu8","saveRank","_this$selectedDialogu9","onItemAttributesEdit","_this$selectedDialogu10","setItemAttributes","_this$selectedDialogu11","deleteItemAttributes","confirm","title","okText","cancelText","onOk","saveItemAttributes","init","payload","initConfig","initValidate","loadResult","subjects","subjectsSplits","split","map","i","trim","filter","Array","from","Set","attributes_config","item_attributes_config","configStr","decode","parsedConfig","JSON","parse","Object","values","includes","ranking_type","ranking_options","optionsSplits","add_model","savedResult","loadSavedResult","reviewFromResult","loadReviewFrom","result","auditId","setAuditId","desc","chat","parseDialogue","saveResult","submit","toJSON","modelInput","generateModelInput","templateConfig","saveReviews","isFromReviewFrom","list","isArray","lastItemType","indexOf","originalValue","lastItem","model","lastOriginalIndex","input","output","inputContent","ouputContent","start","findIndex","q","a"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/dialogue/store.ts"],"sourcesContent":["import { makeAutoObservable, runInAction, toJS } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Modal, message } from 'antd';\nimport { cloneDeep, findLastIndex } from 'lodash';\nimport { validate as validateForm } from '@appen-china/easy-form/es/utils';\nimport { FormConfig } from '@appen-china/easy-form/es/types';\nimport { Base64 } from 'js-base64';\nimport i18n from './locales';\nimport MDialogueItem from './models/DialogueItem';\nimport ValidationStore from './validationStore';\nimport { Chat, Payload, ReviewMode } from './types';\nimport { ChatItemType } from '../common/llm/chat/ChatItem';\nimport { InputType } from '../common/llm/input/InputWrapper';\nimport { contentToPlainText, isContentEmpty, parseContent } from '../common/llm/helper';\nimport { Content, LLMModel, Rank, RankingType } from '../common/llm/types';\nimport JobProxy from '../../libs/JobProxy';\nimport { ToolMode, isAnnotationReadonly, isPreview, isReviewEditable, isRework, isTemplatePreview } from '../../utils/tool-mode';\n\nclass Store {\n  /**\n   * job proxy\n   */\n  jobProxy?: JobProxy;\n\n  /**\n   * is tool initialized\n   */\n  initialized = false;\n\n  /**\n   * labeling or review mode\n   */\n  reviewMode = ReviewMode.LABELING;\n\n  /**\n   * instruction\n   */\n  instruction: Content = [];\n\n  /**\n   * dialogue\n   */\n  dialogue: MDialogueItem[] = [];\n\n  /**\n   * subject\n   */\n  subject?: string;\n\n  /**\n   * [config] global rank\n   */\n  attributes: { [key: string]: any; } | undefined;\n\n  /**\n   * [config] global rank config\n   */\n  attributesConfig = '';\n\n  /**\n   * [config] item attributes  config\n   */\n  itemAttributesConfig?: FormConfig;\n\n  /**\n   * current selected dialogue item\n   */\n  selectedDialogueItem?: MDialogueItem;\n\n  /**\n   * is editing\n   */\n  isEditing = false;\n\n  /**\n   * is adding\n   */\n  isAdding = false;\n\n  /**\n   * is ranking\n   */\n  isRanking = false;\n\n  /**\n   * is attributes editing\n   */\n  isItemAttributesEditing = false;\n\n  /**\n   * has error\n   */\n  _hasError = false;\n\n  get hasError() {\n    return this._hasError || this.hasRankError || this.hasItemAttrError;\n  }\n\n  set hasError(val: boolean) {\n    this._hasError = val;\n    if (!val) {\n      this.hasRankError = val;\n      this.hasItemAttrError = val;\n    }\n  }\n\n  /**\n   * item rank has error\n   */\n  hasRankError = false;\n\n  /**\n   * item attributes has error\n   */\n  hasItemAttrError = false;\n\n  /**\n   * [config] options for subject selection\n   */\n  subjectOptions: string[] = [];\n\n  /**\n   * [config] dialogue rank\n   */\n  ranking = false;\n\n  /**\n   * [config] ranking type (score / mark)\n   */\n  rankingType = RankingType.SCORE;\n\n  /**\n   * [config] options for ranking\n   */\n  rankingOptions: string[] = [];\n\n  /**\n   * [config] dialogue editable (only control original answers)\n   */\n  editable = false;\n\n  /**\n   * [config] can add new dialogue\n   */\n  addible = false;\n\n  /**\n   * [config] model used when add dialogue item\n   */\n  addModel = LLMModel.NONUSE;\n\n  /**\n   * validation\n   */\n  validation: ValidationStore | undefined;\n\n  /**\n * validation config\n */\n  validationConfig = { script: false };\n\n  /**\n   * submit check\n   */\n  submitCheck = false;\n\n  /**\n   * editor types\n   */\n  editorTypes = {\n    Q: [InputType.DEFAULT],\n    A: [InputType.DEFAULT],\n  };\n\n  /**\n   * next dialogue item type\n   */\n  get nextDialogueItemType() {\n    if (this.dialogue.length === 0) {\n      return ChatItemType.Q;\n    }\n    const last = this.dialogue[this.dialogue.length - 1];\n    return last.type === ChatItemType.A ? ChatItemType.Q : ChatItemType.A;\n  }\n\n  /**\n   * can add dialogue item\n   */\n  get canAddDialogueItem() {\n    if (this.readonly || !this.addible) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * current editor types\n   */\n  get currentEditorTypes() {\n    const type = this.isAdding ? this.nextDialogueItemType : this.selectedDialogueItem?.type;\n    return type === ChatItemType.A ? this.editorTypes.A : this.editorTypes.Q;\n  }\n\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.jobProxy!.toolMode) || this.reviewMode === ReviewMode.REVIEW;\n  }\n\n  /**\n   * is tool annotate allowed\n   */\n  get annotatable() {\n    return !isAnnotationReadonly(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool review enabled\n   */\n  get reviewable() {\n    return isReviewEditable(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool in labeling mode or template preview mode\n   */\n  get isLabeling() {\n    return this.jobProxy!.toolMode === ToolMode.LABELING || this.isTemplatePreview;\n  }\n\n  /**\n   * is tool in rework mode\n   */\n  get isRework() {\n    return isRework(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool in preview mode\n   */\n  get isPreview() {\n    return isPreview(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool in template preview mode\n   */\n  get isTemplatePreview() {\n    return isTemplatePreview(this.jobProxy!.toolMode);\n  }\n\n  isOriginalDialogue(val: unknown, forceToolModeCheck = false) {\n    if (forceToolModeCheck && this.isLabeling) {\n      return true;\n    }\n    return typeof val === 'boolean' ? val : this.isLabeling;\n  }\n\n  constructor() {\n    makeAutoObservable(this, {\n      jobProxy: false,\n    });\n  }\n\n  async init(payload: Payload) {\n    this.initConfig(payload);\n    this.initValidate();\n\n    try {\n      await this.loadResult();\n    } catch (e) {\n      // load error\n    }\n\n    runInAction(() => {\n      this.initialized = true;\n    });\n  }\n\n  initConfig(payload: Payload) {\n    // subject\n    if (typeof payload.subjects === 'string') {\n      const subjectsSplits = payload.subjects.split(',').map((i) => i.trim()).filter((i) => !!i);\n      if (subjectsSplits.length > 0) {\n        this.subjectOptions = Array.from(new Set(subjectsSplits));\n      }\n    }\n    // attributes_config\n    if (typeof payload.attributes_config === 'string') {\n      this.attributesConfig = payload.attributes_config;\n    }\n\n    // item_attributes_config\n    if (typeof payload.item_attributes_config === 'string') {\n      const configStr = Base64.decode(payload.item_attributes_config || '');\n      if (configStr) {\n        try {\n          const parsedConfig = JSON.parse(configStr);\n          this.itemAttributesConfig = parsedConfig;\n        } catch (error) {\n          // parse error\n        }\n      }\n    }\n\n    // ranking\n    this.ranking = payload.ranking === true || payload.ranking === 'true';\n    if (this.ranking) {\n      if (Object.values(RankingType).includes(payload.ranking_type as RankingType)) {\n        this.rankingType = payload.ranking_type as RankingType;\n      }\n      if (typeof payload.ranking_options === 'string') {\n        const optionsSplits = payload.ranking_options.split(',').map((i) => i.trim()).filter((i) => !!i);\n        if (optionsSplits.length > 0) {\n          this.rankingOptions = [...optionsSplits];\n        }\n      }\n    }\n\n    // editable\n    this.editable = payload.editable === true || payload.editable === 'true';\n\n    // addible\n    this.addible = payload.addible === true || payload.addible === 'true';\n    if (this.addible) {\n      if (Object.values(LLMModel).includes(payload.add_model as LLMModel)) {\n        this.addModel = payload.add_model as LLMModel;\n      }\n    }\n  }\n\n  initValidate() {\n    this.validation = new ValidationStore(this);\n  }\n\n  async loadResult() {\n    const savedResult = await this.jobProxy!.loadSavedResult();\n    const reviewFromResult = await this.jobProxy!.loadReviewFrom();\n\n    const result = savedResult || reviewFromResult;\n    if (!result) {\n      return;\n    }\n    if (result.auditId) {\n      this.jobProxy!.setAuditId(result.auditId);\n    }\n\n    const { desc, dialogue, chat, attributes, instruction } = result;\n    if (typeof desc === 'string' && desc) {\n      this.subject = desc;\n    }\n\n    if (attributes) {\n      this.attributes = attributes;\n    }\n    this.instruction = parseContent(instruction);\n    this.parseDialogue(dialogue, chat, !savedResult);\n  }\n\n  async saveResult(submit = false) {\n    if (submit && this.annotatable) {\n      this.validateResult();\n    }\n\n    return this.jobProxy!.saveResult({\n      instruction: toJS(this.instruction),\n      attributes: toJS(this.attributes),\n      desc: this.subject,\n      dialogue: this.dialogue.map((dialogueItem) => dialogueItem.toJSON()),\n      modelInput: this.generateModelInput(),\n      auditId: this.jobProxy!.auditId,\n      templateConfig: this.jobProxy!.templateConfig,\n    }, submit);\n  }\n\n  saveReviews(submit = false) {\n    // TODO:\n  }\n\n  parseDialogue(dialogue: unknown, chat: unknown, isFromReviewFrom = false) {\n    const list: MDialogueItem[] = [];\n    if (Array.isArray(dialogue) && dialogue.length > 0) {\n      let lastItemType = ChatItemType.A;\n      dialogue.forEach((item) => {\n        let { type } = item;\n        if (Object.values(ChatItemType).indexOf(type) < 0) {\n          type = lastItemType === ChatItemType.A ? ChatItemType.Q : ChatItemType.A;\n        }\n        const original = this.isOriginalDialogue(item.original, isFromReviewFrom);\n        const value = parseContent(item.value);\n        let originalValue;\n        if (item.originalValue) {\n          originalValue = parseContent(item.originalValue);\n        } else if (original) {\n          originalValue = value;\n        }\n        if (type === lastItemType) {\n          // merge value to last item if same type with last item\n          const lastItem = list[list.length - 1];\n          if (lastItem) {\n            lastItem.value.push(...value);\n            if (originalValue) {\n              if (lastItem.originalValue) {\n                lastItem.originalValue.push(...originalValue);\n              } else {\n                lastItem.originalValue = originalValue;\n              }\n            }\n          }\n        } else {\n          list.push(new MDialogueItem({\n            id: item.id || uuidv4(),\n            type,\n            original,\n            value,\n            originalValue,\n            rank: item.rank,\n            model: item.model,\n            attributes: item.attributes,\n          }));\n        }\n        lastItemType = type;\n      });\n      const lastOriginalIndex = findLastIndex(list, (i) => i.original);\n      let i = 0;\n      while (i < lastOriginalIndex) {\n        // fix original value\n        list[i].original = true;\n        if (!list[i].originalValue) {\n          // miss original value\n          list[i].originalValue = cloneDeep(list[i].value);\n        }\n        i += 1;\n      }\n    } else if (Array.isArray(chat) && chat.length > 0) {\n      chat.forEach((item) => {\n        const { input, output } = item;\n        if (input !== undefined && output !== undefined) {\n          const inputContent = parseContent(input);\n          list.push(new MDialogueItem({\n            id: uuidv4(),\n            type: ChatItemType.Q,\n            original: this.isLabeling,\n            value: inputContent,\n            ...this.isLabeling && {\n              originalValue: inputContent,\n            },\n          }));\n\n          const ouputContent = parseContent(output);\n          list.push(new MDialogueItem({\n            id: uuidv4(),\n            type: ChatItemType.A,\n            original: this.isLabeling,\n            value: ouputContent,\n            ...this.isLabeling && {\n              originalValue: ouputContent,\n            },\n          }));\n        }\n      });\n    }\n    this.dialogue = list;\n  }\n\n  generateModelInput() {\n    const chat: Chat = [];\n    const start = this.dialogue.findIndex((i) => i.type === ChatItemType.Q);\n    for (let i = start; i < this.dialogue.length; i += 2) {\n      const q = this.dialogue[i];\n      const a = this.dialogue[i + 1];\n      if (q && a) {\n        chat.push({\n          input: contentToPlainText(q.value),\n          output: contentToPlainText(a.value),\n          rank: toJS(a.rank),\n          attributes: toJS(a.attributes),\n        });\n      }\n    }\n    return {\n      desc: this.subject,\n      attributes: toJS(this.attributes),\n      chat,\n    };\n  }\n\n  validateResult = () => {\n    // 1) check dialogue item value\n    // 2) check dialogue item rank\n    // 3) check dialogue item attributes\n    // 4) check dialogue limit\n    let newlyAddedRoundsCount = 0;\n    this.dialogue.forEach((dialogueItem) => {\n      if (!dialogueItem.original) {\n        if (isContentEmpty(dialogueItem.value)) {\n          this.selectedDialogueItem = dialogueItem;\n          this.isEditing = true;\n          this.hasError = true;\n          throw new Error(i18n.translate('CHAT_ITEM_EMPTY_ERROR'));\n        }\n        if (dialogueItem.type === ChatItemType.A) {\n          newlyAddedRoundsCount += 1;\n        }\n      }\n      if (dialogueItem.type === ChatItemType.A) {\n        if (this.ranking && this.rankingType === RankingType.SCORE\n          && this.rankingOptions.some((o) => dialogueItem.rank?.scores?.[o] === undefined)) {\n          this.selectedDialogueItem = dialogueItem;\n          this.isRanking = true;\n          this.hasRankError = true;\n          throw new Error(i18n.translate('CHAT_ITEM_RANK_EMPTY_ERROR'));\n        }\n        if (this.itemAttributesConfig) {\n          const { attributes } = dialogueItem;\n          if (attributes) {\n            const validateRes = validateForm(this.itemAttributesConfig, attributes);\n            if (!validateRes) {\n              this.selectedDialogueItem = dialogueItem;\n              this.isItemAttributesEditing = true;\n              this.hasItemAttrError = true;\n              throw new Error(i18n.translate('CHAT_ITEM_ATTR_EMPTY_ERROR'));\n            }\n          }\n        }\n      }\n    });\n  };\n\n  setSubject = (subject: string) => {\n    this.subject = subject;\n  };\n\n  setAttributesConfig = (attributes: any) => {\n    this.attributes = attributes;\n  };\n\n  validate = () => {\n    if (this.isAdding) {\n      this.catchSaveError();\n      throw new Error('should finish adding');\n    }\n    if (this.selectedDialogueItem?.type === ChatItemType.A) {\n      if (this.isRanking && this.rankingType === RankingType.SCORE\n        && this.rankingOptions.some((o) => this.selectedDialogueItem?.rank?.scores?.[o] === undefined)) {\n        this.catchRankError();\n        throw new Error('should finish ranking');\n      }\n      if (this.isItemAttributesEditing && this.itemAttributesConfig) {\n        const { attributes } = this.selectedDialogueItem;\n        if (attributes) {\n          const validateRes = validateForm(this.itemAttributesConfig, attributes);\n          if (!validateRes) {\n            this.catchItemAttributesError();\n            throw new Error('should finish the item attributes form');\n          }\n        }\n      }\n    }\n  };\n\n  validateItem = () => {\n    try {\n      this.validate();\n      this.hasError = false;\n      this.isRanking = false;\n      this.isItemAttributesEditing = false;\n    } catch (e) {\n      // validate failed\n    }\n  };\n\n  selectDialogueItem = (dialogueItem: MDialogueItem) => {\n    if (this.selectedDialogueItem?.id === dialogueItem.id) {\n      return;\n    }\n    try {\n      this.validate();\n      this.hasError = false;\n      this.selectedDialogueItem = dialogueItem;\n      this.isEditing = false;\n      this.isRanking = false;\n      this.isItemAttributesEditing = false;\n    } catch (e) {\n      // validate failed\n    }\n  };\n\n  addDialogueItem = () => {\n    if (this.readonly || !this.canAddDialogueItem) {\n      return;\n    }\n    try {\n      this.validate();\n      this.hasError = false;\n      this.selectedDialogueItem = undefined;\n      this.isEditing = false;\n      this.isRanking = false;\n      this.isItemAttributesEditing = false;\n      this.isAdding = true;\n    } catch (e) {\n      // validate failed\n    }\n  };\n\n  getDialogueItemContent = () => {\n    const currentDialogue = [...this.dialogue];\n    const lastQuestionItem = currentDialogue.reverse().find((item) => item.type === ChatItemType.Q);\n    if (lastQuestionItem) {\n      const content = contentToPlainText(lastQuestionItem.value);\n      return [\n        {\n          role: 'user',\n          content,\n        }\n      ];\n    }\n    return null;\n  };\n\n  editDialogueItem = (dialogueItem: MDialogueItem) => {\n    if (this.readonly || (dialogueItem.original && !this.editable)) {\n      return;\n    }\n    if (this.selectedDialogueItem?.id === dialogueItem.id) {\n      this.isEditing = true;\n      return;\n    }\n    try {\n      this.validate();\n      this.hasError = false;\n      this.selectedDialogueItem = dialogueItem;\n      this.isRanking = false;\n      this.isItemAttributesEditing = false;\n      this.isEditing = true;\n    } catch (e) {\n      // validate failed\n    }\n  };\n\n  saveDialogueItem = (value: Content) => {\n    if (this.readonly) {\n      return;\n    }\n    if (this.isAdding) {\n      // add new dialogue item\n      const newItem = new MDialogueItem({\n        id: uuidv4(),\n        type: this.nextDialogueItemType,\n        original: false,\n        value,\n      });\n      this.dialogue.push(newItem);\n      this.selectedDialogueItem = newItem;\n      if (!this.readonly && this.ranking && newItem.type === ChatItemType.A) {\n        this.isRanking = true;\n      }\n    } else if (this.isEditing && this.selectedDialogueItem) {\n      // update dialogue item\n      this.selectedDialogueItem.value = value;\n    }\n    this.cancelSaveDialogueItem();\n  };\n\n  updateDialogueItem = (dialogueItem: MDialogueItem, value: Content) => {\n    if (this.readonly || this.isAdding || this.isEditing) {\n      return;\n    }\n    dialogueItem.value = value;\n  };\n\n  cancelSaveDialogueItem = () => {\n    this.isEditing = false;\n    this.isAdding = false;\n  };\n\n  catchSaveError = (msg?: string) => {\n    this.hasError = true;\n    message.error(msg || i18n.translate('CHAT_ITEM_EMPTY_ERROR'));\n  };\n\n  rankDialogueItem = (dialogueItem: MDialogueItem) => {\n    if (this.readonly || !this.ranking || dialogueItem.type === ChatItemType.Q) {\n      return;\n    }\n    try {\n      this.validate();\n      this.hasError = false;\n      if (this.selectedDialogueItem?.id !== dialogueItem.id) {\n        this.isItemAttributesEditing = false;\n      }\n      this.selectedDialogueItem = dialogueItem;\n      this.isEditing = false;\n      this.isRanking = true;\n    } catch (e) {\n      // validate failed\n    }\n  };\n\n  saveRank = (dialogueItem: MDialogueItem, rank: Rank) => {\n    if (this.readonly) {\n      return;\n    }\n    if (this.selectedDialogueItem?.id !== dialogueItem.id) {\n      try {\n        this.validate();\n        this.hasError = false;\n        this.isItemAttributesEditing = false;\n      } catch (e) {\n        // validate failed\n        return;\n      }\n    }\n    this.isRanking = true;\n    this.selectedDialogueItem = dialogueItem;\n    this.selectedDialogueItem.rank = rank;\n  };\n\n  onItemAttributesEdit = (dialogueItem: MDialogueItem) => {\n    if (this.readonly || !this.itemAttributesConfig || dialogueItem.type === ChatItemType.Q) {\n      return;\n    }\n    try {\n      this.validate();\n      this.hasError = false;\n    } catch (e) {\n      // validate failed\n      return;\n    }\n    if (this.selectedDialogueItem?.id !== dialogueItem.id) {\n      this.isRanking = false;\n    }\n    this.selectedDialogueItem = dialogueItem;\n    this.isEditing = false;\n    this.isItemAttributesEditing = true;\n  };\n\n  setItemAttributes = (dialogueItem: MDialogueItem, attributes: any) => {\n    if (this.readonly) {\n      return;\n    }\n    if (this.selectedDialogueItem?.id !== dialogueItem.id) {\n      try {\n        this.validate();\n        this.hasError = false;\n      } catch (e) {\n        // validate failed\n        return;\n      }\n    }\n    this.selectedDialogueItem = dialogueItem;\n    this.selectedDialogueItem.attributes = attributes;\n  };\n\n  deleteItemAttributes = (dialogueItem: MDialogueItem) => {\n    Modal.confirm({\n      title: i18n.translate('CHAT_ITEM_DEL_TITLE'),\n      okText: i18n.translate('CHAT_ITEM_DEL_OK'),\n      cancelText: i18n.translate('CHAT_ITEM_DEL_CANCEL'),\n      onOk: () => {\n        this.setItemAttributes(dialogueItem, undefined);\n        this.isItemAttributesEditing = false;\n      }\n    });\n  };\n\n  saveItemAttributes = (dialogueItem: MDialogueItem, attributes: any) => {\n    this.setItemAttributes(dialogueItem, attributes);\n    this.isItemAttributesEditing = true;\n  };\n\n  catchRankError = (msg?: string) => {\n    this.hasRankError = true;\n    message.error(msg || i18n.translate('CHAT_ITEM_RANK_EMPTY_ERROR'));\n  };\n\n  catchItemAttributesError = (msg?: string) => {\n    this.hasItemAttrError = true;\n    message.error(msg || i18n.translate('CHAT_ITEM_ATTR_EMPTY_ERROR'));\n  };\n}\n\nexport default new Store();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}