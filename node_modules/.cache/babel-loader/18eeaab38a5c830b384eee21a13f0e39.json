{"ast":null,"code":"import { Language } from '../../../utils/constants';\nimport { getLocale } from '../../../utils';\nimport CN from './zh-CN';\nimport US from './en-US';\nimport JP from './ja-JP';\nimport KR from './ko-KR';\nclass Internationalization {\n  constructor() {\n    this.locale = Language.EN_US;\n    this.setLocale = locale => {\n      this.locale = getLocale(locale);\n    };\n  }\n  translate(key, options) {\n    let message;\n    switch (this.locale) {\n      case Language.ZH_CN:\n        message = CN[key];\n        break;\n      case Language.JA_JP:\n        message = JP[key];\n        break;\n      case Language.KO_KR:\n        message = KR[key];\n        break;\n      default:\n        message = US[key];\n        break;\n    }\n    if (message) {\n      let msg = message;\n      if (options && options.values) {\n        Object.keys(options.values).forEach(k => {\n          msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n        });\n      }\n      return msg;\n    }\n    return key;\n  }\n}\nexport default new Internationalization();","map":{"version":3,"names":["Language","getLocale","CN","US","JP","KR","Internationalization","constructor","locale","EN_US","setLocale","translate","key","options","message","ZH_CN","JA_JP","KO_KR","msg","values","Object","keys","forEach","k","replace","RegExp"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/locales/index.ts"],"sourcesContent":["import { Language } from '../../../utils/constants';\nimport { getLocale } from '../../../utils';\nimport CN from './zh-CN';\nimport US from './en-US';\nimport JP from './ja-JP';\nimport KR from './ko-KR';\n\nclass Internationalization {\n  locale = Language.EN_US;\n\n  setLocale = (locale?: string) => {\n    this.locale = getLocale(locale);\n  };\n\n  translate(key: string, options?: any) {\n    let message;\n    switch (this.locale) {\n      case Language.ZH_CN:\n        message = CN[key];\n        break;\n      case Language.JA_JP:\n        message = JP[key];\n        break;\n      case Language.KO_KR:\n        message = KR[key];\n        break;\n      default:\n        message = US[key];\n        break;\n    }\n    if (message) {\n      let msg = message;\n      if (options && options.values) {\n        Object.keys(options.values).forEach((k) => {\n          msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n        });\n      }\n      return msg;\n    }\n    return key;\n  }\n}\n\nexport default new Internationalization();\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,OAAOC,EAAE,MAAM,SAAS;AACxB,OAAOC,EAAE,MAAM,SAAS;AACxB,OAAOC,EAAE,MAAM,SAAS;AACxB,OAAOC,EAAE,MAAM,SAAS;AAExB,MAAMC,oBAAoB,CAAC;EAAAC,YAAA;IAAA,KACzBC,MAAM,GAAGR,QAAQ,CAACS,KAAK;IAAA,KAEvBC,SAAS,GAAIF,MAAe,IAAK;MAC/B,IAAI,CAACA,MAAM,GAAGP,SAAS,CAACO,MAAM,CAAC;IACjC,CAAC;EAAA;EAEDG,SAASA,CAACC,GAAW,EAAEC,OAAa,EAAE;IACpC,IAAIC,OAAO;IACX,QAAQ,IAAI,CAACN,MAAM;MACjB,KAAKR,QAAQ,CAACe,KAAK;QACjBD,OAAO,GAAGZ,EAAE,CAACU,GAAG,CAAC;QACjB;MACF,KAAKZ,QAAQ,CAACgB,KAAK;QACjBF,OAAO,GAAGV,EAAE,CAACQ,GAAG,CAAC;QACjB;MACF,KAAKZ,QAAQ,CAACiB,KAAK;QACjBH,OAAO,GAAGT,EAAE,CAACO,GAAG,CAAC;QACjB;MACF;QACEE,OAAO,GAAGX,EAAE,CAACS,GAAG,CAAC;QACjB;IACJ;IACA,IAAIE,OAAO,EAAE;MACX,IAAII,GAAG,GAAGJ,OAAO;MACjB,IAAID,OAAO,IAAIA,OAAO,CAACM,MAAM,EAAE;QAC7BC,MAAM,CAACC,IAAI,CAACR,OAAO,CAACM,MAAM,CAAC,CAACG,OAAO,CAAEC,CAAC,IAAK;UACzCL,GAAG,GAAGA,GAAG,CAACM,OAAO,CAAC,IAAIC,MAAM,CAAC,IAAIF,CAAC,GAAG,EAAE,GAAG,CAAC,EAAEV,OAAO,CAACM,MAAM,CAACI,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC;MACJ;MACA,OAAOL,GAAG;IACZ;IACA,OAAON,GAAG;EACZ;AACF;AAEA,eAAe,IAAIN,oBAAoB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}