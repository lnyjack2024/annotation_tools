{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/attributes/AttributesModal.tsx\";\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { makeObservable, observable, reaction } from 'mobx';\nimport { Button, ConfigProvider } from 'antd';\nimport EasyForm from '@appen-china/easy-form';\nimport { cloneDeep } from 'lodash';\nimport Modal from '../../../common/modal/Modal';\nimport InstanceItemAttributesForm from './InstanceItemAttributesForm';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { setInitialValues } from '../../utils';\nimport './AttributesModal.scss';\nclass AttributesModal extends React.Component {\n  constructor(props) {\n    super(props);\n    /**\n     * form container\n     */\n    this.ref = React.createRef();\n    /**\n    * reaction disposer\n    */\n    this.reactionDisposer = void 0;\n    /**\n     * forms count that to be submitted\n     */\n    this.submitCount = 0;\n    this.dynamicInstanceFields = [];\n    /**\n     * instance state\n     */\n    this.instanceState = void 0;\n    /**\n     * items state\n     */\n    this.itemStates = [];\n    /**\n     * when instance item values submit (with OCR text)\n     * @param instanceItem\n     * @param values\n     * @param fieldFramesMap\n     */\n    this.onItemValuesSubmit = (instanceItem, values, fieldFramesMap) => {\n      const {\n        currentCamera,\n        currentFrame\n      } = store.frame;\n      const frames = Object.values(fieldFramesMap)[0] || [currentFrame];\n      const {\n        prevState,\n        currState\n      } = instanceItem.setAttributes(currentCamera, frames, values);\n      this.itemStates.push({\n        prevState,\n        currState\n      });\n      this.checkFinished();\n    };\n    /**\n     * when instance values submit\n     * @param values\n     */\n    this.onInstanceValuesSubmit = (values, type) => {\n      const {\n        selectedInstances\n      } = store.instance;\n      if (selectedInstances.length === 1) {\n        const selectedInstance = selectedInstances[0];\n        const prevBasicInfo = selectedInstance.getBasicInfo();\n        let prevDynamicAttributes;\n        switch (type) {\n          case 'dynamic':\n            {\n              var _attributesCurrentCam;\n              prevDynamicAttributes = cloneDeep(prevBasicInfo.dynamicAttributes);\n              const {\n                currentFrame,\n                currentCamera\n              } = store.frame;\n              const updatedFrameAttributes = [];\n              const {\n                dynamicAttributes = {}\n              } = selectedInstance;\n              const attributesCurrentCamera = dynamicAttributes[currentCamera];\n              updatedFrameAttributes.push({\n                frameIndex: currentFrame,\n                attributes: {\n                  ...(attributesCurrentCamera === null || attributesCurrentCamera === void 0 ? void 0 : (_attributesCurrentCam = attributesCurrentCamera[currentFrame]) === null || _attributesCurrentCam === void 0 ? void 0 : _attributesCurrentCam.attributes),\n                  ...values\n                }\n              });\n              selectedInstance.setDynamicAttributesByCamera(currentCamera, updatedFrameAttributes);\n              break;\n            }\n          default:\n            break;\n        }\n        if (!this.instanceState) {\n          this.instanceState = {\n            prevState: {\n              ...prevBasicInfo,\n              children: []\n            },\n            currState: {\n              ...selectedInstance.getBasicInfo(),\n              children: []\n            }\n          };\n        } else {\n          this.instanceState = {\n            prevState: {\n              ...this.instanceState.prevState,\n              ...(prevDynamicAttributes && {\n                dynamicAttributes: prevDynamicAttributes\n              })\n            },\n            currState: {\n              ...selectedInstance.getBasicInfo(),\n              children: []\n            }\n          };\n        }\n      }\n      this.checkFinished();\n    };\n    /**\n     * submit button click\n     */\n    this.submit = () => {\n      var _this$ref$current;\n      this.submitCount = 0;\n      this.itemStates = [];\n      const buttons = (_this$ref$current = this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.querySelectorAll('button.easyform-btn.form-btn-submit');\n      buttons === null || buttons === void 0 ? void 0 : buttons.forEach(btn => {\n        this.submitCount += 1;\n        btn.click();\n      });\n    };\n    makeObservable(this, {\n      dynamicInstanceFields: observable\n    });\n    this.reactionDisposer = reaction(() => store.config.attributesModalVisible, () => {\n      if (store.config.attributesModalVisible) {\n        // init instance fields\n        const selectedInstance = store.instance.selectedInstances[0];\n        if (selectedInstance) {\n          const {\n            labelConfigDynamic: dynamicInstanceConfig\n          } = selectedInstance.categoryRef;\n          if (dynamicInstanceConfig) {\n            const attrs = store.instance.getCurrentDynamicAttributesByInstance(selectedInstance);\n            this.dynamicInstanceFields = setInitialValues(dynamicInstanceConfig.fields, attrs);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * check if all forms has been submitted\n   */\n  checkFinished() {\n    this.submitCount -= 1;\n    if (this.submitCount === 0) {\n      // finish\n      const basicInfo = store.instance.selectedInstances[0].getBasicInfo();\n      const prevInstance = {\n        ...basicInfo,\n        children: []\n      };\n      const currInstance = {\n        ...basicInfo,\n        children: []\n      };\n      this.itemStates.forEach(({\n        prevState,\n        currState\n      }) => {\n        if (prevState) {\n          prevInstance.children.push(prevState);\n        }\n        if (currState) {\n          currInstance.children.push(currState);\n        }\n      });\n      store.undo.push({\n        instances: [prevInstance]\n      }, {\n        instances: [currInstance]\n      });\n      store.config.setAttributesModalVisible(false);\n    }\n  }\n  render() {\n    const {\n      attributesModalVisible\n    } = store.config;\n    const {\n      isMultiSelected,\n      selectedInstances,\n      selectedInstanceItems\n    } = store.instance;\n    if (!attributesModalVisible || isMultiSelected || selectedInstances.length <= 0) {\n      return null;\n    }\n    const selectedInstance = selectedInstances[0];\n    const {\n      labelConfigDynamic: dynamicInstanceConfig\n    } = selectedInstance.categoryRef;\n    const displayItems = selectedInstanceItems.length === 1 ? [selectedInstanceItems[0]] : Object.values(selectedInstance.items);\n    const hasInstanceDynamicAttrCfg = dynamicInstanceConfig && this.dynamicInstanceFields;\n    return /*#__PURE__*/React.createElement(Modal, {\n      visible: true,\n      draggable: true,\n      closable: false,\n      dragId: \"video-tracking-attributes\",\n      className: \"attributes-form\",\n      title: i18n.translate('INSTANCE_ATTRIBUTES'),\n      onClose: () => store.config.setAttributesModalVisible(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.ref,\n      className: \"attributes-form-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, hasInstanceDynamicAttrCfg && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-section__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }\n    }, (selectedInstance === null || selectedInstance === void 0 ? void 0 : selectedInstance.label) && i18n.translate('ATTRIBUTES_MODE_INSPECT_LABEL_DYNAMIC', {\n      values: {\n        prefix: selectedInstance.label\n      }\n    })), /*#__PURE__*/React.createElement(EasyForm, {\n      autoFocus: true,\n      theme: \"dark\",\n      fields: this.dynamicInstanceFields,\n      conditions: dynamicInstanceConfig.conditions,\n      effects: dynamicInstanceConfig.effects,\n      rules: dynamicInstanceConfig.rules,\n      onSubmit: val => this.onInstanceValuesSubmit(val, 'dynamic'),\n      renderLabel: (label, field) => /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 19\n        }\n      }, label),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }\n    })), displayItems.map(item => /*#__PURE__*/React.createElement(InstanceItemAttributesForm, {\n      key: item.id,\n      instanceItem: item,\n      onSubmit: (values, fieldFramesMap) => this.onItemValuesSubmit(item, values, fieldFramesMap),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ConfigProvider, {\n      prefixCls: \"easyform\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.submit,\n      style: {\n        marginRight: 16\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, i18n.translate('COMMON_SUBMIT')))));\n  }\n}\nexport default observer(AttributesModal);","map":{"version":3,"names":["React","observer","makeObservable","observable","reaction","Button","ConfigProvider","EasyForm","cloneDeep","Modal","InstanceItemAttributesForm","store","i18n","setInitialValues","AttributesModal","Component","constructor","props","ref","createRef","reactionDisposer","submitCount","dynamicInstanceFields","instanceState","itemStates","onItemValuesSubmit","instanceItem","values","fieldFramesMap","currentCamera","currentFrame","frame","frames","Object","prevState","currState","setAttributes","push","checkFinished","onInstanceValuesSubmit","type","selectedInstances","instance","length","selectedInstance","prevBasicInfo","getBasicInfo","prevDynamicAttributes","_attributesCurrentCam","dynamicAttributes","updatedFrameAttributes","attributesCurrentCamera","frameIndex","attributes","setDynamicAttributesByCamera","children","submit","_this$ref$current","buttons","current","querySelectorAll","forEach","btn","click","config","attributesModalVisible","labelConfigDynamic","dynamicInstanceConfig","categoryRef","attrs","getCurrentDynamicAttributesByInstance","fields","basicInfo","prevInstance","currInstance","undo","instances","setAttributesModalVisible","render","isMultiSelected","selectedInstanceItems","displayItems","items","hasInstanceDynamicAttrCfg","createElement","visible","draggable","closable","dragId","className","title","translate","onClose","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","label","prefix","autoFocus","theme","conditions","effects","rules","onSubmit","val","renderLabel","field","style","display","justifyContent","map","item","key","id","prefixCls","onClick","marginRight"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/attributes/AttributesModal.tsx"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { makeObservable, observable, action, reaction, IReactionDisposer } from 'mobx';\nimport { Button, ConfigProvider } from 'antd';\nimport EasyForm from '@appen-china/easy-form';\nimport { cloneDeep } from 'lodash';\nimport Modal from '../../../common/modal/Modal';\nimport InstanceItemAttributesForm from './InstanceItemAttributesForm';\nimport InstanceItem from '../../model/InstanceItem';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { setInitialValues } from '../../utils';\n\nimport { Instance as IInstance, InstanceItem as IInstanceItem, DynamicAttributes } from '../../types';\nimport './AttributesModal.scss';\n\nclass AttributesModal extends React.Component {\n  /**\n   * form container\n   */\n  ref = React.createRef<HTMLDivElement>();\n\n  /**\n * reaction disposer\n */\n  reactionDisposer: IReactionDisposer;\n\n  /**\n   * forms count that to be submitted\n   */\n  submitCount = 0;\n\n  dynamicInstanceFields: any = [];\n\n  /**\n   * instance state\n   */\n  instanceState?: {\n    prevState: IInstance;\n    currState: IInstance;\n  };\n\n  /**\n   * items state\n   */\n  itemStates: {\n    prevState?: IInstanceItem;\n    currState?: IInstanceItem;\n  }[] = [];\n\n  constructor(props: any) {\n    super(props);\n    makeObservable(this, {\n      dynamicInstanceFields: observable,\n\n    });\n\n    this.reactionDisposer = reaction(\n      () => store.config.attributesModalVisible,\n      () => {\n        if (store.config.attributesModalVisible) {\n          // init instance fields\n          const selectedInstance = store.instance.selectedInstances[0];\n          if (selectedInstance) {\n            const { labelConfigDynamic: dynamicInstanceConfig } = selectedInstance.categoryRef;\n\n            if (dynamicInstanceConfig) {\n              const attrs = store.instance.getCurrentDynamicAttributesByInstance(selectedInstance);\n\n              this.dynamicInstanceFields = setInitialValues(dynamicInstanceConfig.fields, attrs);\n            }\n          }\n        }\n      },\n    );\n  }\n\n  /**\n   * when instance item values submit (with OCR text)\n   * @param instanceItem\n   * @param values\n   * @param fieldFramesMap\n   */\n  onItemValuesSubmit = (instanceItem: InstanceItem, values: { attributes?: any }, fieldFramesMap: { [field: string]: number[] }) => {\n    const { currentCamera, currentFrame } = store.frame;\n    const frames = Object.values(fieldFramesMap)[0] || [currentFrame];\n    const { prevState, currState } = instanceItem.setAttributes(currentCamera, frames, values);\n    this.itemStates.push({ prevState, currState });\n    this.checkFinished();\n  };\n\n  /**\n   * when instance values submit\n   * @param values\n   */\n  onInstanceValuesSubmit = (values: any, type: string) => {\n    const { selectedInstances } = store.instance;\n    if (selectedInstances.length === 1) {\n      const selectedInstance = selectedInstances[0];\n      const prevBasicInfo = selectedInstance.getBasicInfo();\n      let prevDynamicAttributes;\n      switch (type) {\n        case 'dynamic': {\n          prevDynamicAttributes = cloneDeep(prevBasicInfo.dynamicAttributes);\n          const { currentFrame, currentCamera } = store.frame;\n          const updatedFrameAttributes: DynamicAttributes[] = [];\n          const { dynamicAttributes = {} } = selectedInstance;\n          const attributesCurrentCamera = dynamicAttributes[currentCamera];\n\n          updatedFrameAttributes.push({\n            frameIndex: currentFrame,\n            attributes: { ...attributesCurrentCamera?.[currentFrame]?.attributes, ...values },\n          });\n          selectedInstance.setDynamicAttributesByCamera(currentCamera, updatedFrameAttributes);\n          break;\n        }\n        default:\n          break;\n      }\n      if (!this.instanceState) {\n        this.instanceState = {\n          prevState: { ...prevBasicInfo, children: [] },\n          currState: { ...selectedInstance.getBasicInfo(), children: [] },\n        };\n      } else {\n        this.instanceState = {\n          prevState: {\n            ...this.instanceState.prevState,\n            ...prevDynamicAttributes && { dynamicAttributes: prevDynamicAttributes }\n          },\n          currState: { ...selectedInstance.getBasicInfo(), children: [] },\n        };\n      }\n    }\n    this.checkFinished();\n  };\n\n  /**\n   * check if all forms has been submitted\n   */\n  checkFinished() {\n    this.submitCount -= 1;\n    if (this.submitCount === 0) {\n      // finish\n      const basicInfo = store.instance.selectedInstances[0]!.getBasicInfo();\n      const prevInstance: IInstance = {\n        ...basicInfo,\n        children: [],\n      };\n      const currInstance: IInstance = {\n        ...basicInfo,\n        children: [],\n      };\n      this.itemStates.forEach(({ prevState, currState }) => {\n        if (prevState) {\n          prevInstance.children.push(prevState);\n        }\n        if (currState) {\n          currInstance.children.push(currState);\n        }\n      });\n      store.undo.push({ instances: [prevInstance] }, { instances: [currInstance] });\n      store.config.setAttributesModalVisible(false);\n    }\n  }\n\n  /**\n   * submit button click\n   */\n  submit = () => {\n    this.submitCount = 0;\n    this.itemStates = [];\n\n    const buttons = this.ref.current?.querySelectorAll('button.easyform-btn.form-btn-submit');\n    buttons?.forEach((btn) => {\n      this.submitCount += 1;\n      (btn as HTMLButtonElement).click();\n    });\n  };\n\n  render() {\n    const { attributesModalVisible } = store.config;\n\n    const { isMultiSelected, selectedInstances, selectedInstanceItems } = store.instance;\n    if (!attributesModalVisible || isMultiSelected || selectedInstances.length <= 0) {\n      return null;\n    }\n\n    const selectedInstance = selectedInstances[0];\n\n    const { labelConfigDynamic: dynamicInstanceConfig } = selectedInstance.categoryRef;\n    const displayItems = selectedInstanceItems.length === 1 ? [selectedInstanceItems[0]] : Object.values(selectedInstance.items);\n\n    const hasInstanceDynamicAttrCfg = dynamicInstanceConfig && this.dynamicInstanceFields;\n    return (\n      <Modal\n        visible\n        draggable\n        closable={false}\n        dragId=\"video-tracking-attributes\"\n        className=\"attributes-form\"\n        title={i18n.translate('INSTANCE_ATTRIBUTES')}\n        onClose={() => store.config.setAttributesModalVisible(false)}\n      >\n        <div ref={this.ref} className=\"attributes-form-content\">\n          {hasInstanceDynamicAttrCfg && (\n            <div className=\"attributes-form-section\">\n              <div className=\"attributes-form-section__title\">\n                {selectedInstance?.label && i18n.translate('ATTRIBUTES_MODE_INSPECT_LABEL_DYNAMIC', { values: { prefix: selectedInstance.label } })}\n              </div>\n              <EasyForm\n                autoFocus\n                theme=\"dark\"\n                fields={this.dynamicInstanceFields}\n                conditions={dynamicInstanceConfig.conditions}\n                effects={dynamicInstanceConfig.effects}\n                rules={dynamicInstanceConfig.rules}\n                onSubmit={(val) => this.onInstanceValuesSubmit(val, 'dynamic')}\n                renderLabel={(label, field) => (\n                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                    {label}\n                  </div>\n                )}\n              />\n            </div>\n          )}\n          {displayItems.map((item) => (\n            <InstanceItemAttributesForm\n              key={item.id}\n              instanceItem={item}\n              onSubmit={(values, fieldFramesMap) => this.onItemValuesSubmit(item, values, fieldFramesMap)}\n            />\n          ))}\n        </div>\n        <div className=\"attributes-form-footer\">\n          <ConfigProvider prefixCls=\"easyform\">\n            <Button type=\"primary\" onClick={this.submit} style={{ marginRight: 16 }}>\n              {i18n.translate('COMMON_SUBMIT')}\n            </Button>\n          </ConfigProvider>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default observer(AttributesModal);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}