{"ast":null,"code":"import{BACKWARD_CURRENT_VIDEO,DEBUG,FORWARD_CURRENT_VIDEO,GET_AUDIO_CONTAINRE,GET_VIDEO_CONTAINER,GET_WAVESURFERS,INIT_PAYLOAD,MERGE_SEGMENT_BACKWARD,PAUSE_CURRENT_VIDEO,PLAY_CURRENT_VIDEO,PUSH_LINE,SET_CURRENT_SEGMENT,SET_CURRENT_VIDEO,SET_LINE_CATEGORY,SET_LINE_ATTRIBUTES,SET_LINE_ROLE,SET_LINE_TEXT,SET_PLAY_MODE,SET_PLAYING_STATE,SET_SEGMENT_CATEGORY,SET_SEGMENT_ATTRIBUTES,SET_SEGMENT_TIMESTAMP,SET_SEGMENT_TYPE,SET_VIDEO_SPEED,SET_VIDEO_ZOOM,SPLIT_SEGMENT_FORWARD,DELETE_LINE,TOPPING_LINE,SET_VIDEO_LOADED,SET_VIDEO_VALID,SET_VIDEO_ATTR,SHOW_HIDE_GUIDE,SET_SEGMENT_QASTATE,SET_SEGMENT_QACOMMENT,SET_SEGMENT_QAREASON,REMOVE_SEGMENT,PARSE_SEGMENTS,SET_ERROR_MESSAGE,SET_AUDIO_ERROR_MESSAGE,MOVE_SEGMENT_IN_BATCH,SET_WORD_TIMESTAMPS,APPEND_SEGMENT,UPDATE_SEGMENT,DELETE_SEGMENT,SET_SEGMENTS,UPDATE_LINE_ROLE,SET_SEGMENT_START_END,SET_MEASUREMENT,UPDATE_VIDEO_INFO,SET_LOADING,SET_ATTRIBUTE_FOCUS_INFO,SET_LOAD_REVIEW_ENABLED,SET_RESULT}from'./action';import{initPayloadState,parseSegments,saveData,setVideoLoaded,setVideoValid,setVideoAttributes,setWordTimestamps,setLoading,setAttributeFocusInfo,setLoadReviewEnabled,setResults}from'./reducer/connectController';import{getVideoContainer,getAudioContainer,setLineText,setSegmentType,setSegmentCategory,setLineRole,setLineCategory,setLineAttributes,setSegmentAttributes,mergeSegmentBackward,setSegmentTimestamp,splitSegmentForward,pushLine,toppingLine,deleteLine,setSegmentQAState,setSegmentQAComment,removeSegment,setSegmentQAReason,moveSegmentInBatch,appendSegment,updateSegment,deleteSegment,setSegments,updateLineRole,setSegmentStartEnd}from'./reducer/segmentController';import{setPlayMode,setCurrentVideo,playCurrentVideo,pauseCurrentVideo,forwardCurrentVideo,backwardCurrentVideo,setCurrentSegment,debug,getWavesurfers,setPlayingState,setVideoZoom,setVideoSpeed,showHideGuider,setErrorMsg,setAudioErrorMsg,setMeasurement,updateVideoInfo}from'./reducer/settingController';import{SegmentMode}from'../constants';const initState={videos:[],results:[],ontology:[],globalConfig:null,invalidAnnotatable:true,annotateDisabled:false,segmentConfig:[],lineConfig:[],reviews:null,/* job setting */unitId:null,toolMode:null,issueTypes:[],/* user setting */currentPlayMode:'regionPlay',currentVideo:0,currentSegment:0,isPlaying:false,isGuiding:false,/* constant setting */minSegmentLength:0.05,navigationSize:1,/* wavesurfer component */wavesurfers:null,errorMsg:'',audioErrorMsg:undefined,tagGroup:[],segmentMode:SegmentMode.continuous,spaceLine:0,measurements:[],selectedMeasurement:-1,segmentOverlap:true,adjustmentStep:0.1,isLoadedAlaw:false,loading:true,focusAttribute:{},loadReviewEnabled:false};export default(function(){let state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initState;let action=arguments.length>1?arguments[1]:undefined;let newState=initState;switch(action.type){case DEBUG:newState=debug(state,action.data);break;case GET_WAVESURFERS:newState=getWavesurfers(state,action.data);break;case SET_VIDEO_VALID:newState=setVideoValid(state,action.data);break;case SET_VIDEO_ATTR:newState=setVideoAttributes(state,action.data);break;case INIT_PAYLOAD:newState=initPayloadState(initState,action.data);break;case SET_WORD_TIMESTAMPS:newState=setWordTimestamps(state,action.data);break;case GET_VIDEO_CONTAINER:newState=getVideoContainer(state,action.data);break;case GET_AUDIO_CONTAINRE:newState=getAudioContainer(state,action.data);break;case SET_LINE_TEXT:newState=setLineText(state,action.data);break;case SET_PLAY_MODE:newState=setPlayMode(state,action.data);break;case SET_CURRENT_VIDEO:newState=setCurrentVideo(state,action.data);break;case PLAY_CURRENT_VIDEO:newState=playCurrentVideo(state);break;case PAUSE_CURRENT_VIDEO:newState=pauseCurrentVideo(state);break;case FORWARD_CURRENT_VIDEO:newState=forwardCurrentVideo(state);break;case BACKWARD_CURRENT_VIDEO:newState=backwardCurrentVideo(state);break;case SET_CURRENT_SEGMENT:newState=setCurrentSegment(state,action.data);break;case SET_SEGMENT_TYPE:newState=setSegmentType(state,action.data);break;case SET_SEGMENT_CATEGORY:newState=setSegmentCategory(state,action.data);break;case SET_LINE_ROLE:newState=setLineRole(state,action.data);break;case SET_LINE_CATEGORY:newState=setLineCategory(state,action.data);break;case SET_LINE_ATTRIBUTES:newState=setLineAttributes(state,action.data);break;case SET_PLAYING_STATE:newState=setPlayingState(state,action.data);break;case MERGE_SEGMENT_BACKWARD:newState=mergeSegmentBackward(state,action.data);break;case SET_SEGMENT_TIMESTAMP:newState=setSegmentTimestamp(state,action.data);break;case SPLIT_SEGMENT_FORWARD:newState=splitSegmentForward(state,action.data);break;case PUSH_LINE:newState=pushLine(state,action.data);break;case SET_VIDEO_ZOOM:newState=setVideoZoom(state,action.data);break;case SET_VIDEO_SPEED:newState=setVideoSpeed(state,action.data);break;case DELETE_LINE:newState=deleteLine(state,action.data);break;case TOPPING_LINE:newState=toppingLine(state,action.data);break;case SHOW_HIDE_GUIDE:newState=showHideGuider(state,action.data);break;case SET_SEGMENT_QASTATE:newState=setSegmentQAState(state,action.data);break;case SET_SEGMENT_QACOMMENT:newState=setSegmentQAComment(state,action.data);break;case SET_SEGMENT_QAREASON:newState=setSegmentQAReason(state,action.data);break;case MOVE_SEGMENT_IN_BATCH:newState=moveSegmentInBatch(state,action.data);break;case REMOVE_SEGMENT:newState=removeSegment(state,action.data);break;case PARSE_SEGMENTS:newState=parseSegments(state,action.data);break;case SET_ERROR_MESSAGE:newState=setErrorMsg(state,action.data);break;case SET_AUDIO_ERROR_MESSAGE:newState=setAudioErrorMsg(state,action.data);break;case APPEND_SEGMENT:newState=appendSegment(state,action.data);break;case UPDATE_SEGMENT:newState=updateSegment(state,action.data);break;case DELETE_SEGMENT:newState=deleteSegment(state,action.data);break;case SET_SEGMENTS:newState=setSegments(state,action.data);break;case UPDATE_LINE_ROLE:newState=updateLineRole(state,action.data);break;case SET_SEGMENT_START_END:newState=setSegmentStartEnd(state,action.data);break;case SET_MEASUREMENT:newState=setMeasurement(state,action.data);break;case UPDATE_VIDEO_INFO:newState=updateVideoInfo(state,action.data);break;case SET_VIDEO_LOADED:newState=setVideoLoaded(state,action.data);break;case SET_LOADING:newState=setLoading(state,action.data);break;case SET_ATTRIBUTE_FOCUS_INFO:newState=setAttributeFocusInfo(state,action.data);break;case SET_SEGMENT_ATTRIBUTES:newState=setSegmentAttributes(state,action.data);break;case SET_LOAD_REVIEW_ENABLED:newState=setLoadReviewEnabled(state,action.data);break;case SET_RESULT:newState=setResults(state,action.data);break;default:return newState;}// saveData(newState, action.type);\nreturn newState;});","map":{"version":3,"names":["BACKWARD_CURRENT_VIDEO","DEBUG","FORWARD_CURRENT_VIDEO","GET_AUDIO_CONTAINRE","GET_VIDEO_CONTAINER","GET_WAVESURFERS","INIT_PAYLOAD","MERGE_SEGMENT_BACKWARD","PAUSE_CURRENT_VIDEO","PLAY_CURRENT_VIDEO","PUSH_LINE","SET_CURRENT_SEGMENT","SET_CURRENT_VIDEO","SET_LINE_CATEGORY","SET_LINE_ATTRIBUTES","SET_LINE_ROLE","SET_LINE_TEXT","SET_PLAY_MODE","SET_PLAYING_STATE","SET_SEGMENT_CATEGORY","SET_SEGMENT_ATTRIBUTES","SET_SEGMENT_TIMESTAMP","SET_SEGMENT_TYPE","SET_VIDEO_SPEED","SET_VIDEO_ZOOM","SPLIT_SEGMENT_FORWARD","DELETE_LINE","TOPPING_LINE","SET_VIDEO_LOADED","SET_VIDEO_VALID","SET_VIDEO_ATTR","SHOW_HIDE_GUIDE","SET_SEGMENT_QASTATE","SET_SEGMENT_QACOMMENT","SET_SEGMENT_QAREASON","REMOVE_SEGMENT","PARSE_SEGMENTS","SET_ERROR_MESSAGE","SET_AUDIO_ERROR_MESSAGE","MOVE_SEGMENT_IN_BATCH","SET_WORD_TIMESTAMPS","APPEND_SEGMENT","UPDATE_SEGMENT","DELETE_SEGMENT","SET_SEGMENTS","UPDATE_LINE_ROLE","SET_SEGMENT_START_END","SET_MEASUREMENT","UPDATE_VIDEO_INFO","SET_LOADING","SET_ATTRIBUTE_FOCUS_INFO","SET_LOAD_REVIEW_ENABLED","SET_RESULT","initPayloadState","parseSegments","saveData","setVideoLoaded","setVideoValid","setVideoAttributes","setWordTimestamps","setLoading","setAttributeFocusInfo","setLoadReviewEnabled","setResults","getVideoContainer","getAudioContainer","setLineText","setSegmentType","setSegmentCategory","setLineRole","setLineCategory","setLineAttributes","setSegmentAttributes","mergeSegmentBackward","setSegmentTimestamp","splitSegmentForward","pushLine","toppingLine","deleteLine","setSegmentQAState","setSegmentQAComment","removeSegment","setSegmentQAReason","moveSegmentInBatch","appendSegment","updateSegment","deleteSegment","setSegments","updateLineRole","setSegmentStartEnd","setPlayMode","setCurrentVideo","playCurrentVideo","pauseCurrentVideo","forwardCurrentVideo","backwardCurrentVideo","setCurrentSegment","debug","getWavesurfers","setPlayingState","setVideoZoom","setVideoSpeed","showHideGuider","setErrorMsg","setAudioErrorMsg","setMeasurement","updateVideoInfo","SegmentMode","initState","videos","results","ontology","globalConfig","invalidAnnotatable","annotateDisabled","segmentConfig","lineConfig","reviews","unitId","toolMode","issueTypes","currentPlayMode","currentVideo","currentSegment","isPlaying","isGuiding","minSegmentLength","navigationSize","wavesurfers","errorMsg","audioErrorMsg","undefined","tagGroup","segmentMode","continuous","spaceLine","measurements","selectedMeasurement","segmentOverlap","adjustmentStep","isLoadedAlaw","loading","focusAttribute","loadReviewEnabled","state","arguments","length","action","newState","type","data"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/long-audio/redux/reducer.js"],"sourcesContent":["import {\n  BACKWARD_CURRENT_VIDEO,\n  DEBUG,\n  FORWARD_CURRENT_VIDEO,\n  GET_AUDIO_CONTAINRE,\n  GET_VIDEO_CONTAINER,\n  GET_WAVESURFERS,\n  INIT_PAYLOAD,\n  MERGE_SEGMENT_BACKWARD,\n  PAUSE_CURRENT_VIDEO,\n  PLAY_CURRENT_VIDEO,\n  PUSH_LINE,\n  SET_CURRENT_SEGMENT,\n  SET_CURRENT_VIDEO,\n  SET_LINE_CATEGORY,\n  SET_LINE_ATTRIBUTES,\n  SET_LINE_ROLE,\n  SET_LINE_TEXT,\n  SET_PLAY_MODE,\n  SET_PLAYING_STATE,\n  SET_SEGMENT_CATEGORY,\n  SET_SEGMENT_ATTRIBUTES,\n  SET_SEGMENT_TIMESTAMP,\n  SET_SEGMENT_TYPE,\n  SET_VIDEO_SPEED,\n  SET_VIDEO_ZOOM,\n  SPLIT_SEGMENT_FORWARD,\n  DELETE_LINE,\n  TOPPING_LINE,\n  SET_VIDEO_LOADED,\n  SET_VIDEO_VALID,\n  SET_VIDEO_ATTR,\n  SHOW_HIDE_GUIDE,\n  SET_SEGMENT_QASTATE,\n  SET_SEGMENT_QACOMMENT,\n  SET_SEGMENT_QAREASON,\n  REMOVE_SEGMENT,\n  PARSE_SEGMENTS,\n  SET_ERROR_MESSAGE,\n  SET_AUDIO_ERROR_MESSAGE,\n  MOVE_SEGMENT_IN_BATCH,\n  SET_WORD_TIMESTAMPS,\n  APPEND_SEGMENT,\n  UPDATE_SEGMENT,\n  DELETE_SEGMENT,\n  SET_SEGMENTS,\n  UPDATE_LINE_ROLE,\n  SET_SEGMENT_START_END,\n  SET_MEASUREMENT,\n  UPDATE_VIDEO_INFO,\n  SET_LOADING,\n  SET_ATTRIBUTE_FOCUS_INFO,\n  SET_LOAD_REVIEW_ENABLED,\n  SET_RESULT,\n} from './action';\nimport {\n  initPayloadState,\n  parseSegments,\n  saveData,\n  setVideoLoaded,\n  setVideoValid,\n  setVideoAttributes,\n  setWordTimestamps,\n  setLoading,\n  setAttributeFocusInfo,\n  setLoadReviewEnabled,\n  setResults,\n} from './reducer/connectController';\nimport {\n  getVideoContainer,\n  getAudioContainer,\n  setLineText,\n  setSegmentType,\n  setSegmentCategory,\n  setLineRole,\n  setLineCategory,\n  setLineAttributes,\n  setSegmentAttributes,\n  mergeSegmentBackward,\n  setSegmentTimestamp, splitSegmentForward, pushLine,\n  toppingLine, deleteLine,\n  setSegmentQAState,\n  setSegmentQAComment,\n  removeSegment,\n  setSegmentQAReason,\n  moveSegmentInBatch,\n  appendSegment,\n  updateSegment,\n  deleteSegment,\n  setSegments,\n  updateLineRole,\n  setSegmentStartEnd,\n} from './reducer/segmentController';\nimport {\n  setPlayMode,\n  setCurrentVideo,\n  playCurrentVideo,\n  pauseCurrentVideo,\n  forwardCurrentVideo,\n  backwardCurrentVideo,\n  setCurrentSegment,\n  debug,\n  getWavesurfers,\n  setPlayingState,\n  setVideoZoom,\n  setVideoSpeed,\n  showHideGuider,\n  setErrorMsg,\n  setAudioErrorMsg,\n  setMeasurement,\n  updateVideoInfo,\n} from './reducer/settingController';\nimport { SegmentMode } from '../constants';\n\nconst initState = {\n  videos: [],\n  results: [],\n  ontology: [],\n  globalConfig: null,\n  invalidAnnotatable: true,\n  annotateDisabled: false,\n  segmentConfig: [],\n  lineConfig: [],\n  reviews: null,\n  /* job setting */\n  unitId: null,\n  toolMode: null,\n  issueTypes: [],\n  /* user setting */\n  currentPlayMode: 'regionPlay',\n  currentVideo: 0,\n  currentSegment: 0,\n  isPlaying: false,\n  isGuiding: false,\n  /* constant setting */\n  minSegmentLength: 0.05,\n  navigationSize: 1,\n  /* wavesurfer component */\n  wavesurfers: null,\n  errorMsg: '',\n  audioErrorMsg: undefined,\n  tagGroup: [],\n  segmentMode: SegmentMode.continuous,\n  spaceLine: 0,\n  measurements: [],\n  selectedMeasurement: -1,\n  segmentOverlap: true,\n  adjustmentStep: 0.1,\n  isLoadedAlaw: false,\n  loading: true,\n  focusAttribute: {},\n  loadReviewEnabled: false,\n};\n\nexport default (state = initState, action) => {\n  let newState = initState;\n  switch (action.type) {\n    case DEBUG:\n      newState = debug(state, action.data);\n      break;\n    case GET_WAVESURFERS:\n      newState = getWavesurfers(state, action.data);\n      break;\n    case SET_VIDEO_VALID:\n      newState = setVideoValid(state, action.data);\n      break;\n    case SET_VIDEO_ATTR:\n      newState = setVideoAttributes(state, action.data);\n      break;\n    case INIT_PAYLOAD:\n      newState = initPayloadState(initState, action.data);\n      break;\n    case SET_WORD_TIMESTAMPS:\n      newState = setWordTimestamps(state, action.data);\n      break;\n    case GET_VIDEO_CONTAINER:\n      newState = getVideoContainer(state, action.data);\n      break;\n    case GET_AUDIO_CONTAINRE:\n      newState = getAudioContainer(state, action.data);\n      break;\n    case SET_LINE_TEXT:\n      newState = setLineText(state, action.data);\n      break;\n    case SET_PLAY_MODE:\n      newState = setPlayMode(state, action.data);\n      break;\n    case SET_CURRENT_VIDEO:\n      newState = setCurrentVideo(state, action.data);\n      break;\n    case PLAY_CURRENT_VIDEO:\n      newState = playCurrentVideo(state);\n      break;\n    case PAUSE_CURRENT_VIDEO:\n      newState = pauseCurrentVideo(state);\n      break;\n    case FORWARD_CURRENT_VIDEO:\n      newState = forwardCurrentVideo(state);\n      break;\n    case BACKWARD_CURRENT_VIDEO:\n      newState = backwardCurrentVideo(state);\n      break;\n    case SET_CURRENT_SEGMENT:\n      newState = setCurrentSegment(state, action.data);\n      break;\n    case SET_SEGMENT_TYPE:\n      newState = setSegmentType(state, action.data);\n      break;\n    case SET_SEGMENT_CATEGORY:\n      newState = setSegmentCategory(state, action.data);\n      break;\n    case SET_LINE_ROLE:\n      newState = setLineRole(state, action.data);\n      break;\n    case SET_LINE_CATEGORY:\n      newState = setLineCategory(state, action.data);\n      break;\n    case SET_LINE_ATTRIBUTES:\n      newState = setLineAttributes(state, action.data);\n      break;\n    case SET_PLAYING_STATE:\n      newState = setPlayingState(state, action.data);\n      break;\n    case MERGE_SEGMENT_BACKWARD:\n      newState = mergeSegmentBackward(state, action.data);\n      break;\n    case SET_SEGMENT_TIMESTAMP:\n      newState = setSegmentTimestamp(state, action.data);\n      break;\n    case SPLIT_SEGMENT_FORWARD:\n      newState = splitSegmentForward(state, action.data);\n      break;\n    case PUSH_LINE:\n      newState = pushLine(state, action.data);\n      break;\n    case SET_VIDEO_ZOOM:\n      newState = setVideoZoom(state, action.data);\n      break;\n    case SET_VIDEO_SPEED:\n      newState = setVideoSpeed(state, action.data);\n      break;\n    case DELETE_LINE:\n      newState = deleteLine(state, action.data);\n      break;\n    case TOPPING_LINE:\n      newState = toppingLine(state, action.data);\n      break;\n    case SHOW_HIDE_GUIDE:\n      newState = showHideGuider(state, action.data);\n      break;\n    case SET_SEGMENT_QASTATE:\n      newState = setSegmentQAState(state, action.data);\n      break;\n    case SET_SEGMENT_QACOMMENT:\n      newState = setSegmentQAComment(state, action.data);\n      break;\n    case SET_SEGMENT_QAREASON:\n      newState = setSegmentQAReason(state, action.data);\n      break;\n    case MOVE_SEGMENT_IN_BATCH:\n      newState = moveSegmentInBatch(state, action.data);\n      break;\n    case REMOVE_SEGMENT:\n      newState = removeSegment(state, action.data);\n      break;\n    case PARSE_SEGMENTS:\n      newState = parseSegments(state, action.data);\n      break;\n    case SET_ERROR_MESSAGE:\n      newState = setErrorMsg(state, action.data);\n      break;\n    case SET_AUDIO_ERROR_MESSAGE:\n      newState = setAudioErrorMsg(state, action.data);\n      break;\n    case APPEND_SEGMENT:\n      newState = appendSegment(state, action.data);\n      break;\n    case UPDATE_SEGMENT:\n      newState = updateSegment(state, action.data);\n      break;\n    case DELETE_SEGMENT:\n      newState = deleteSegment(state, action.data);\n      break;\n    case SET_SEGMENTS:\n      newState = setSegments(state, action.data);\n      break;\n    case UPDATE_LINE_ROLE:\n      newState = updateLineRole(state, action.data);\n      break;\n    case SET_SEGMENT_START_END:\n      newState = setSegmentStartEnd(state, action.data);\n      break;\n    case SET_MEASUREMENT:\n      newState = setMeasurement(state, action.data);\n      break;\n    case UPDATE_VIDEO_INFO:\n      newState = updateVideoInfo(state, action.data);\n      break;\n    case SET_VIDEO_LOADED:\n      newState = setVideoLoaded(state, action.data);\n      break;\n    case SET_LOADING:\n      newState = setLoading(state, action.data);\n      break;\n    case SET_ATTRIBUTE_FOCUS_INFO:\n      newState = setAttributeFocusInfo(state, action.data);\n      break;\n    case SET_SEGMENT_ATTRIBUTES:\n      newState = setSegmentAttributes(state, action.data);\n      break;\n    case SET_LOAD_REVIEW_ENABLED:\n      newState = setLoadReviewEnabled(state, action.data);\n      break;\n    case SET_RESULT:\n      newState = setResults(state, action.data);\n      break;\n    default:\n      return newState;\n  }\n  // saveData(newState, action.type);\n  return newState;\n};\n"],"mappings":"AAAA,OACEA,sBAAsB,CACtBC,KAAK,CACLC,qBAAqB,CACrBC,mBAAmB,CACnBC,mBAAmB,CACnBC,eAAe,CACfC,YAAY,CACZC,sBAAsB,CACtBC,mBAAmB,CACnBC,kBAAkB,CAClBC,SAAS,CACTC,mBAAmB,CACnBC,iBAAiB,CACjBC,iBAAiB,CACjBC,mBAAmB,CACnBC,aAAa,CACbC,aAAa,CACbC,aAAa,CACbC,iBAAiB,CACjBC,oBAAoB,CACpBC,sBAAsB,CACtBC,qBAAqB,CACrBC,gBAAgB,CAChBC,eAAe,CACfC,cAAc,CACdC,qBAAqB,CACrBC,WAAW,CACXC,YAAY,CACZC,gBAAgB,CAChBC,eAAe,CACfC,cAAc,CACdC,eAAe,CACfC,mBAAmB,CACnBC,qBAAqB,CACrBC,oBAAoB,CACpBC,cAAc,CACdC,cAAc,CACdC,iBAAiB,CACjBC,uBAAuB,CACvBC,qBAAqB,CACrBC,mBAAmB,CACnBC,cAAc,CACdC,cAAc,CACdC,cAAc,CACdC,YAAY,CACZC,gBAAgB,CAChBC,qBAAqB,CACrBC,eAAe,CACfC,iBAAiB,CACjBC,WAAW,CACXC,wBAAwB,CACxBC,uBAAuB,CACvBC,UAAU,KACL,UAAU,CACjB,OACEC,gBAAgB,CAChBC,aAAa,CACbC,QAAQ,CACRC,cAAc,CACdC,aAAa,CACbC,kBAAkB,CAClBC,iBAAiB,CACjBC,UAAU,CACVC,qBAAqB,CACrBC,oBAAoB,CACpBC,UAAU,KACL,6BAA6B,CACpC,OACEC,iBAAiB,CACjBC,iBAAiB,CACjBC,WAAW,CACXC,cAAc,CACdC,kBAAkB,CAClBC,WAAW,CACXC,eAAe,CACfC,iBAAiB,CACjBC,oBAAoB,CACpBC,oBAAoB,CACpBC,mBAAmB,CAAEC,mBAAmB,CAAEC,QAAQ,CAClDC,WAAW,CAAEC,UAAU,CACvBC,iBAAiB,CACjBC,mBAAmB,CACnBC,aAAa,CACbC,kBAAkB,CAClBC,kBAAkB,CAClBC,aAAa,CACbC,aAAa,CACbC,aAAa,CACbC,WAAW,CACXC,cAAc,CACdC,kBAAkB,KACb,6BAA6B,CACpC,OACEC,WAAW,CACXC,eAAe,CACfC,gBAAgB,CAChBC,iBAAiB,CACjBC,mBAAmB,CACnBC,oBAAoB,CACpBC,iBAAiB,CACjBC,KAAK,CACLC,cAAc,CACdC,eAAe,CACfC,YAAY,CACZC,aAAa,CACbC,cAAc,CACdC,WAAW,CACXC,gBAAgB,CAChBC,cAAc,CACdC,eAAe,KACV,6BAA6B,CACpC,OAASC,WAAW,KAAQ,cAAc,CAE1C,KAAM,CAAAC,SAAS,CAAG,CAChBC,MAAM,CAAE,EAAE,CACVC,OAAO,CAAE,EAAE,CACXC,QAAQ,CAAE,EAAE,CACZC,YAAY,CAAE,IAAI,CAClBC,kBAAkB,CAAE,IAAI,CACxBC,gBAAgB,CAAE,KAAK,CACvBC,aAAa,CAAE,EAAE,CACjBC,UAAU,CAAE,EAAE,CACdC,OAAO,CAAE,IAAI,CACb,iBACAC,MAAM,CAAE,IAAI,CACZC,QAAQ,CAAE,IAAI,CACdC,UAAU,CAAE,EAAE,CACd,kBACAC,eAAe,CAAE,YAAY,CAC7BC,YAAY,CAAE,CAAC,CACfC,cAAc,CAAE,CAAC,CACjBC,SAAS,CAAE,KAAK,CAChBC,SAAS,CAAE,KAAK,CAChB,sBACAC,gBAAgB,CAAE,IAAI,CACtBC,cAAc,CAAE,CAAC,CACjB,0BACAC,WAAW,CAAE,IAAI,CACjBC,QAAQ,CAAE,EAAE,CACZC,aAAa,CAAEC,SAAS,CACxBC,QAAQ,CAAE,EAAE,CACZC,WAAW,CAAE1B,WAAW,CAAC2B,UAAU,CACnCC,SAAS,CAAE,CAAC,CACZC,YAAY,CAAE,EAAE,CAChBC,mBAAmB,CAAE,CAAC,CAAC,CACvBC,cAAc,CAAE,IAAI,CACpBC,cAAc,CAAE,GAAG,CACnBC,YAAY,CAAE,KAAK,CACnBC,OAAO,CAAE,IAAI,CACbC,cAAc,CAAE,CAAC,CAAC,CAClBC,iBAAiB,CAAE,KACrB,CAAC,CAED,eAAe,UAA+B,IAA9B,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAd,SAAA,CAAAc,SAAA,IAAGrC,SAAS,IAAE,CAAAuC,MAAM,CAAAF,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAd,SAAA,CACvC,GAAI,CAAAiB,QAAQ,CAAGxC,SAAS,CACxB,OAAQuC,MAAM,CAACE,IAAI,EACjB,IAAK,CAAApJ,KAAK,CACRmJ,QAAQ,CAAGnD,KAAK,CAAC+C,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACpC,MACF,IAAK,CAAAjJ,eAAe,CAClB+I,QAAQ,CAAGlD,cAAc,CAAC8C,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC7C,MACF,IAAK,CAAAzH,eAAe,CAClBuH,QAAQ,CAAG3F,aAAa,CAACuF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC5C,MACF,IAAK,CAAAxH,cAAc,CACjBsH,QAAQ,CAAG1F,kBAAkB,CAACsF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACjD,MACF,IAAK,CAAAhJ,YAAY,CACf8I,QAAQ,CAAG/F,gBAAgB,CAACuD,SAAS,CAAEuC,MAAM,CAACG,IAAI,CAAC,CACnD,MACF,IAAK,CAAA9G,mBAAmB,CACtB4G,QAAQ,CAAGzF,iBAAiB,CAACqF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAChD,MACF,IAAK,CAAAlJ,mBAAmB,CACtBgJ,QAAQ,CAAGpF,iBAAiB,CAACgF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAChD,MACF,IAAK,CAAAnJ,mBAAmB,CACtBiJ,QAAQ,CAAGnF,iBAAiB,CAAC+E,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAChD,MACF,IAAK,CAAAtI,aAAa,CAChBoI,QAAQ,CAAGlF,WAAW,CAAC8E,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC1C,MACF,IAAK,CAAArI,aAAa,CAChBmI,QAAQ,CAAG1D,WAAW,CAACsD,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC1C,MACF,IAAK,CAAA1I,iBAAiB,CACpBwI,QAAQ,CAAGzD,eAAe,CAACqD,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC9C,MACF,IAAK,CAAA7I,kBAAkB,CACrB2I,QAAQ,CAAGxD,gBAAgB,CAACoD,KAAK,CAAC,CAClC,MACF,IAAK,CAAAxI,mBAAmB,CACtB4I,QAAQ,CAAGvD,iBAAiB,CAACmD,KAAK,CAAC,CACnC,MACF,IAAK,CAAA9I,qBAAqB,CACxBkJ,QAAQ,CAAGtD,mBAAmB,CAACkD,KAAK,CAAC,CACrC,MACF,IAAK,CAAAhJ,sBAAsB,CACzBoJ,QAAQ,CAAGrD,oBAAoB,CAACiD,KAAK,CAAC,CACtC,MACF,IAAK,CAAArI,mBAAmB,CACtByI,QAAQ,CAAGpD,iBAAiB,CAACgD,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAChD,MACF,IAAK,CAAAhI,gBAAgB,CACnB8H,QAAQ,CAAGjF,cAAc,CAAC6E,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC7C,MACF,IAAK,CAAAnI,oBAAoB,CACvBiI,QAAQ,CAAGhF,kBAAkB,CAAC4E,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACjD,MACF,IAAK,CAAAvI,aAAa,CAChBqI,QAAQ,CAAG/E,WAAW,CAAC2E,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC1C,MACF,IAAK,CAAAzI,iBAAiB,CACpBuI,QAAQ,CAAG9E,eAAe,CAAC0E,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC9C,MACF,IAAK,CAAAxI,mBAAmB,CACtBsI,QAAQ,CAAG7E,iBAAiB,CAACyE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAChD,MACF,IAAK,CAAApI,iBAAiB,CACpBkI,QAAQ,CAAGjD,eAAe,CAAC6C,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC9C,MACF,IAAK,CAAA/I,sBAAsB,CACzB6I,QAAQ,CAAG3E,oBAAoB,CAACuE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACnD,MACF,IAAK,CAAAjI,qBAAqB,CACxB+H,QAAQ,CAAG1E,mBAAmB,CAACsE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAClD,MACF,IAAK,CAAA7H,qBAAqB,CACxB2H,QAAQ,CAAGzE,mBAAmB,CAACqE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAClD,MACF,IAAK,CAAA5I,SAAS,CACZ0I,QAAQ,CAAGxE,QAAQ,CAACoE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACvC,MACF,IAAK,CAAA9H,cAAc,CACjB4H,QAAQ,CAAGhD,YAAY,CAAC4C,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC3C,MACF,IAAK,CAAA/H,eAAe,CAClB6H,QAAQ,CAAG/C,aAAa,CAAC2C,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC5C,MACF,IAAK,CAAA5H,WAAW,CACd0H,QAAQ,CAAGtE,UAAU,CAACkE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACzC,MACF,IAAK,CAAA3H,YAAY,CACfyH,QAAQ,CAAGvE,WAAW,CAACmE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC1C,MACF,IAAK,CAAAvH,eAAe,CAClBqH,QAAQ,CAAG9C,cAAc,CAAC0C,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC7C,MACF,IAAK,CAAAtH,mBAAmB,CACtBoH,QAAQ,CAAGrE,iBAAiB,CAACiE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAChD,MACF,IAAK,CAAArH,qBAAqB,CACxBmH,QAAQ,CAAGpE,mBAAmB,CAACgE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAClD,MACF,IAAK,CAAApH,oBAAoB,CACvBkH,QAAQ,CAAGlE,kBAAkB,CAAC8D,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACjD,MACF,IAAK,CAAA/G,qBAAqB,CACxB6G,QAAQ,CAAGjE,kBAAkB,CAAC6D,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACjD,MACF,IAAK,CAAAnH,cAAc,CACjBiH,QAAQ,CAAGnE,aAAa,CAAC+D,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC5C,MACF,IAAK,CAAAlH,cAAc,CACjBgH,QAAQ,CAAG9F,aAAa,CAAC0F,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC5C,MACF,IAAK,CAAAjH,iBAAiB,CACpB+G,QAAQ,CAAG7C,WAAW,CAACyC,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC1C,MACF,IAAK,CAAAhH,uBAAuB,CAC1B8G,QAAQ,CAAG5C,gBAAgB,CAACwC,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC/C,MACF,IAAK,CAAA7G,cAAc,CACjB2G,QAAQ,CAAGhE,aAAa,CAAC4D,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC5C,MACF,IAAK,CAAA5G,cAAc,CACjB0G,QAAQ,CAAG/D,aAAa,CAAC2D,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC5C,MACF,IAAK,CAAA3G,cAAc,CACjByG,QAAQ,CAAG9D,aAAa,CAAC0D,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC5C,MACF,IAAK,CAAA1G,YAAY,CACfwG,QAAQ,CAAG7D,WAAW,CAACyD,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC1C,MACF,IAAK,CAAAzG,gBAAgB,CACnBuG,QAAQ,CAAG5D,cAAc,CAACwD,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC7C,MACF,IAAK,CAAAxG,qBAAqB,CACxBsG,QAAQ,CAAG3D,kBAAkB,CAACuD,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACjD,MACF,IAAK,CAAAvG,eAAe,CAClBqG,QAAQ,CAAG3C,cAAc,CAACuC,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC7C,MACF,IAAK,CAAAtG,iBAAiB,CACpBoG,QAAQ,CAAG1C,eAAe,CAACsC,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC9C,MACF,IAAK,CAAA1H,gBAAgB,CACnBwH,QAAQ,CAAG5F,cAAc,CAACwF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CAC7C,MACF,IAAK,CAAArG,WAAW,CACdmG,QAAQ,CAAGxF,UAAU,CAACoF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACzC,MACF,IAAK,CAAApG,wBAAwB,CAC3BkG,QAAQ,CAAGvF,qBAAqB,CAACmF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACpD,MACF,IAAK,CAAAlI,sBAAsB,CACzBgI,QAAQ,CAAG5E,oBAAoB,CAACwE,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACnD,MACF,IAAK,CAAAnG,uBAAuB,CAC1BiG,QAAQ,CAAGtF,oBAAoB,CAACkF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACnD,MACF,IAAK,CAAAlG,UAAU,CACbgG,QAAQ,CAAGrF,UAAU,CAACiF,KAAK,CAAEG,MAAM,CAACG,IAAI,CAAC,CACzC,MACF,QACE,MAAO,CAAAF,QAAQ,CACnB,CACA;AACA,MAAO,CAAAA,QAAQ,CACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}