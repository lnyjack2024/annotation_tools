{"ast":null,"code":"import { ContentItemType } from './types';\nexport function contentToPlainText(content) {\n  if (!content) {\n    return '';\n  }\n  let result = '';\n  content.forEach(item => {\n    if (item.type === ContentItemType.UNSTYLED) {\n      result += `${item.content}\\n`;\n    }\n  });\n  if (result.endsWith('\\n')) {\n    return result.replace(/\\n$/, '');\n  }\n  return result;\n}\nexport function parseContent(content) {\n  if (content === undefined || content === null) {\n    // no content\n    return [];\n  }\n  if (typeof content === 'string') {\n    // content is string\n    // parse to one content item\n    return [{\n      type: ContentItemType.UNSTYLED,\n      content\n    }];\n  }\n  if (!Array.isArray(content)) {\n    // not valid content\n    // set to empty\n    return [];\n  }\n\n  // parse from legacy data if needed\n  const allTypes = Object.values(ContentItemType);\n  const parsedContent = [];\n  for (let i = 0; i < content.length; i += 1) {\n    const item = content[i];\n    if (item === null || item === void 0 ? void 0 : item.insert) {\n      // legacy data\n      // should be removed later\n      if (typeof item.insert === 'string') {\n        parsedContent.push({\n          type: ContentItemType.UNSTYLED,\n          content: item.insert\n        });\n      }\n    } else if (allTypes.includes(item === null || item === void 0 ? void 0 : item.type) && typeof item.content === 'string') {\n      parsedContent.push(item);\n    }\n  }\n  return parsedContent;\n}\nexport function isContentEmpty(content) {\n  return content.length === 0 || content.length === 1 && content[0].type === ContentItemType.UNSTYLED && content[0].content === '';\n}","map":{"version":3,"names":["ContentItemType","contentToPlainText","content","result","forEach","item","type","UNSTYLED","endsWith","replace","parseContent","undefined","Array","isArray","allTypes","Object","values","parsedContent","i","length","insert","push","includes","isContentEmpty"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/llm/helper.ts"],"sourcesContent":["import { Content, ContentItemType } from './types';\n\nexport function contentToPlainText(content?: Content) {\n  if (!content) {\n    return '';\n  }\n  let result = '';\n  content.forEach((item) => {\n    if (item.type === ContentItemType.UNSTYLED) {\n      result += `${item.content}\\n`;\n    }\n  });\n  if (result.endsWith('\\n')) {\n    return result.replace(/\\n$/, '');\n  }\n  return result;\n}\n\nexport function parseContent(content: unknown): Content {\n  if (content === undefined || content === null) {\n    // no content\n    return [];\n  }\n\n  if (typeof content === 'string') {\n    // content is string\n    // parse to one content item\n    return [{\n      type: ContentItemType.UNSTYLED,\n      content,\n    }];\n  }\n\n  if (!Array.isArray(content)) {\n    // not valid content\n    // set to empty\n    return [];\n  }\n\n  // parse from legacy data if needed\n  const allTypes = Object.values(ContentItemType);\n  const parsedContent: Content = [];\n  for (let i = 0; i < content.length; i += 1) {\n    const item = content[i];\n    if (item?.insert) {\n      // legacy data\n      // should be removed later\n      if (typeof item.insert === 'string') {\n        parsedContent.push({\n          type: ContentItemType.UNSTYLED,\n          content: item.insert,\n        });\n      }\n    } else if (allTypes.includes(item?.type)\n      && typeof item.content === 'string') {\n      parsedContent.push(item);\n    }\n  }\n  return parsedContent;\n}\n\nexport function isContentEmpty(content: Content) {\n  return content.length === 0 || (\n    content.length === 1 &&\n    content[0].type === ContentItemType.UNSTYLED &&\n    content[0].content === ''\n  );\n}\n"],"mappings":"AAAA,SAAkBA,eAAe,QAAQ,SAAS;AAElD,OAAO,SAASC,kBAAkBA,CAACC,OAAiB,EAAE;EACpD,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO,EAAE;EACX;EACA,IAAIC,MAAM,GAAG,EAAE;EACfD,OAAO,CAACE,OAAO,CAAEC,IAAI,IAAK;IACxB,IAAIA,IAAI,CAACC,IAAI,KAAKN,eAAe,CAACO,QAAQ,EAAE;MAC1CJ,MAAM,IAAK,GAAEE,IAAI,CAACH,OAAQ,IAAG;IAC/B;EACF,CAAC,CAAC;EACF,IAAIC,MAAM,CAACK,QAAQ,CAAC,IAAI,CAAC,EAAE;IACzB,OAAOL,MAAM,CAACM,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAClC;EACA,OAAON,MAAM;AACf;AAEA,OAAO,SAASO,YAAYA,CAACR,OAAgB,EAAW;EACtD,IAAIA,OAAO,KAAKS,SAAS,IAAIT,OAAO,KAAK,IAAI,EAAE;IAC7C;IACA,OAAO,EAAE;EACX;EAEA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B;IACA;IACA,OAAO,CAAC;MACNI,IAAI,EAAEN,eAAe,CAACO,QAAQ;MAC9BL;IACF,CAAC,CAAC;EACJ;EAEA,IAAI,CAACU,KAAK,CAACC,OAAO,CAACX,OAAO,CAAC,EAAE;IAC3B;IACA;IACA,OAAO,EAAE;EACX;;EAEA;EACA,MAAMY,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAChB,eAAe,CAAC;EAC/C,MAAMiB,aAAsB,GAAG,EAAE;EACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,OAAO,CAACiB,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC1C,MAAMb,IAAI,GAAGH,OAAO,CAACgB,CAAC,CAAC;IACvB,IAAIb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEe,MAAM,EAAE;MAChB;MACA;MACA,IAAI,OAAOf,IAAI,CAACe,MAAM,KAAK,QAAQ,EAAE;QACnCH,aAAa,CAACI,IAAI,CAAC;UACjBf,IAAI,EAAEN,eAAe,CAACO,QAAQ;UAC9BL,OAAO,EAAEG,IAAI,CAACe;QAChB,CAAC,CAAC;MACJ;IACF,CAAC,MAAM,IAAIN,QAAQ,CAACQ,QAAQ,CAACjB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,IAAI,CAAC,IACnC,OAAOD,IAAI,CAACH,OAAO,KAAK,QAAQ,EAAE;MACrCe,aAAa,CAACI,IAAI,CAAChB,IAAI,CAAC;IAC1B;EACF;EACA,OAAOY,aAAa;AACtB;AAEA,OAAO,SAASM,cAAcA,CAACrB,OAAgB,EAAE;EAC/C,OAAOA,OAAO,CAACiB,MAAM,KAAK,CAAC,IACzBjB,OAAO,CAACiB,MAAM,KAAK,CAAC,IACpBjB,OAAO,CAAC,CAAC,CAAC,CAACI,IAAI,KAAKN,eAAe,CAACO,QAAQ,IAC5CL,OAAO,CAAC,CAAC,CAAC,CAACA,OAAO,KAAK,EACxB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}