{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\nimport { getShapeTypeByTool, parseLabelConfig } from '../utils';\nimport { Tool } from '../types';\nimport { ShapeType } from '../../common/shapes/types';\n\n/**\n * store for ontology\n * @class\n */\nexport default class OntologyStore {\n  /**\n   * selected category\n   * @getter\n   */\n  get selectedCategory() {\n    const currentCategory = this.getCategory(this.selectedCategoryName);\n    return currentCategory || this.categories[0];\n  }\n\n  /**\n   * selected category item\n   * @getter\n   */\n  get selectedCategoryItem() {\n    const {\n      children\n    } = this.selectedCategory;\n    const index = children.findIndex(c => c.name === this.selectedCategoryItemName);\n    return index >= 0 ? children[index] : children[0];\n  }\n\n  /**\n   * current tool\n   * @getter\n   */\n  get currentTool() {\n    if (this.currentToolItem) {\n      return this.currentToolItem.type;\n    }\n    return Tool.RECTANGLE;\n  }\n\n  /**\n   * current shapeType by currentTool\n   * @getter\n   */\n  get currentShapeType() {\n    return getShapeTypeByTool(this.currentTool) || ShapeType.RECTANGLE;\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * categories\n     */\n    this.categories = [];\n    /**\n     * selected category name\n     */\n    this.selectedCategoryName = '';\n    /**\n     * selected category item name\n     */\n    this.selectedCategoryItemName = '';\n    /**\n     * selected tool item\n     */\n    this.currentToolItem = null;\n    makeAutoObservable(this, {\n      rootStore: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload) {\n    var _this$categories$, _this$categories$2, _this$categories$2$ch, _this$categories$3, _this$categories$3$ch;\n    const categories = [];\n    const {\n      ontology = []\n    } = payload;\n    ontology.forEach(o => {\n      var _o$children;\n      const items = [];\n      (_o$children = o.children) === null || _o$children === void 0 ? void 0 : _o$children.forEach(child => {\n        const {\n          name,\n          display_name,\n          display_color,\n          count,\n          label_config,\n          label_config_point,\n          type = '',\n          tools\n        } = child;\n\n        // parse tools\n        let allTools = [];\n        if (tools) {\n          tools.forEach(item => {\n            const itemType = [Tool.RECTANGLE, Tool.POLYGON, Tool.LINE, Tool.DOT].includes(item.type) ? item.type : Tool.RECTANGLE;\n            const tool = {\n              type: itemType\n            };\n            allTools.push(tool);\n          });\n        } else {\n          // legacy config\n          let legacyEdges;\n          allTools = type.split(',').map(i => ({\n            type: i || Tool.RECTANGLE,\n            edges: legacyEdges\n          }));\n        }\n        const item = {\n          name,\n          displayName: display_name || name,\n          displayColor: display_color || o.display_color || '',\n          tools: allTools\n        };\n        if (count !== undefined && count !== null) {\n          item.count = Number(count);\n        }\n        if (label_config) {\n          item.labelConfig = parseLabelConfig(label_config);\n        }\n        if (label_config_point) {\n          item.pointLabelConfig = parseLabelConfig(label_config_point);\n        }\n        items.push(item);\n      });\n      let categoryColor = '';\n      if (items.length === 1 && items[0].count === 1) {\n        categoryColor = items[0].displayColor;\n      }\n      categories.push({\n        className: o.class_name,\n        displayName: o.display_name || o.class_name,\n        displayColor: categoryColor,\n        labelConfigDynamic: parseLabelConfig(o.label_config_dynamic),\n        children: items\n      });\n    });\n    this.categories = categories;\n    this.selectedCategoryName = (_this$categories$ = this.categories[0]) === null || _this$categories$ === void 0 ? void 0 : _this$categories$.className;\n    this.selectedCategoryItemName = (_this$categories$2 = this.categories[0]) === null || _this$categories$2 === void 0 ? void 0 : (_this$categories$2$ch = _this$categories$2.children[0]) === null || _this$categories$2$ch === void 0 ? void 0 : _this$categories$2$ch.name;\n    this.currentToolItem = (_this$categories$3 = this.categories[0]) === null || _this$categories$3 === void 0 ? void 0 : (_this$categories$3$ch = _this$categories$3.children[0]) === null || _this$categories$3$ch === void 0 ? void 0 : _this$categories$3$ch.tools[0];\n  }\n\n  /**\n   * get category object\n   * @param categoryName\n   */\n  getCategory(categoryName) {\n    return toJS(this.categories.find(o => o.className === categoryName));\n  }\n\n  /**\n   * get category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getCategoryItem(categoryName, categoryItemName) {\n    const category = this.getCategory(categoryName);\n    return toJS(((category === null || category === void 0 ? void 0 : category.children) || []).find(o => o.name === categoryItemName));\n  }\n\n  /**\n   * set selected category\n   * @param categoryName\n   */\n  selectCategory(categoryName) {\n    if (this.selectedCategoryName !== categoryName) {\n      // turn off the add mode\n      this.rootStore.config.setAddMode(false);\n      // category changes\n      this.selectedCategoryName = categoryName;\n      // update selected category name\n      this.selectCategoryItem(this.selectedCategory.children[0].name); // default select the first one\n      // unselect selected instance if needed\n      if (this.rootStore.instance.selectedInstances.findIndex(i => i.category === categoryName) < 0) {\n        this.rootStore.instance.selectInstance(null);\n      }\n    }\n  }\n\n  /**\n   * set selected category item\n   * @param categoryItemName\n   */\n  selectCategoryItem(categoryItemName) {\n    this.selectedCategoryItemName = categoryItemName;\n    this.currentToolItem = this.selectedCategoryItem.tools[0];\n  }\n\n  /**\n   * activate category item\n   * @param categoryItemName\n   * @param tool\n   */\n  activateCategoryItem(categoryItemName, tool) {\n    if (this.rootStore.shape.isDrawing) {\n      return;\n    }\n    this.selectCategoryItem(categoryItemName);\n    this.selectTool(tool);\n    this.rootStore.config.setAddMode(true);\n  }\n\n  /**\n   * activate category item by index\n   * @param index\n   */\n  activateCategoryItemByIndex(index) {\n    if (this.rootStore.shape.isDrawing) {\n      return;\n    }\n    const child = this.selectedCategory.children[index];\n    if (child) {\n      const tool = child.name === this.selectedCategoryItemName ? this.currentToolItem : child.tools[0];\n      this.activateCategoryItem(child.name, tool);\n    }\n  }\n\n  /**\n   * set current tool\n   * @param tool\n   */\n  selectTool(tool) {\n    if (this.currentToolItem !== tool) {\n      this.currentToolItem = tool;\n    }\n  }\n\n  /**\n  * get dynamic label config from category\n  * @param categoryName\n  */\n  getDynamicLabelConfigFromCategory(categoryName) {\n    const category = this.getCategory(categoryName);\n    return category === null || category === void 0 ? void 0 : category.labelConfigDynamic;\n  }\n\n  /**\n   * get label config from category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getLabelConfigFromCategoryItem(categoryName, categoryItemName) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    return categoryItem === null || categoryItem === void 0 ? void 0 : categoryItem.labelConfig;\n  }\n\n  /**\n   * get point label config from category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getPointLabelConfigFromCategoryItem(categoryName, categoryItemName) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    return categoryItem === null || categoryItem === void 0 ? void 0 : categoryItem.pointLabelConfig;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","toJS","getShapeTypeByTool","parseLabelConfig","Tool","ShapeType","OntologyStore","selectedCategory","currentCategory","getCategory","selectedCategoryName","categories","selectedCategoryItem","children","index","findIndex","c","name","selectedCategoryItemName","currentTool","currentToolItem","type","RECTANGLE","currentShapeType","constructor","rootStore","autoBind","init","payload","_this$categories$","_this$categories$2","_this$categories$2$ch","_this$categories$3","_this$categories$3$ch","ontology","forEach","o","_o$children","items","child","display_name","display_color","count","label_config","label_config_point","tools","allTools","item","itemType","POLYGON","LINE","DOT","includes","tool","push","legacyEdges","split","map","i","edges","displayName","displayColor","undefined","Number","labelConfig","pointLabelConfig","categoryColor","length","className","class_name","labelConfigDynamic","label_config_dynamic","categoryName","find","getCategoryItem","categoryItemName","category","selectCategory","config","setAddMode","selectCategoryItem","instance","selectedInstances","selectInstance","activateCategoryItem","shape","isDrawing","selectTool","activateCategoryItemByIndex","getDynamicLabelConfigFromCategory","getLabelConfigFromCategoryItem","categoryItem","getPointLabelConfigFromCategoryItem"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/OntologyStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport RootStore from './RootStore';\nimport { getShapeTypeByTool, parseLabelConfig } from '../utils';\nimport { Tool, Payload, Category, CategoryItem, ToolItem } from '../types';\nimport { ShapeType } from '../../common/shapes/types';\n\n/**\n * store for ontology\n * @class\n */\nexport default class OntologyStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * categories\n   */\n  categories: Category[] = [];\n\n  /**\n   * selected category name\n   */\n  selectedCategoryName = '';\n\n  /**\n   * selected category item name\n   */\n  selectedCategoryItemName = '';\n\n  /**\n   * selected tool item\n   */\n  currentToolItem: ToolItem | null = null;\n\n  /**\n   * selected category\n   * @getter\n   */\n  get selectedCategory() {\n    const currentCategory = this.getCategory(this.selectedCategoryName);\n    return currentCategory || this.categories[0];\n  }\n\n  /**\n   * selected category item\n   * @getter\n   */\n  get selectedCategoryItem() {\n    const { children } = this.selectedCategory;\n    const index = children.findIndex((c) => c.name === this.selectedCategoryItemName);\n    return index >= 0 ? children[index] : children[0];\n  }\n\n  /**\n   * current tool\n   * @getter\n   */\n  get currentTool() {\n    if (this.currentToolItem) {\n      return this.currentToolItem.type;\n    }\n    return Tool.RECTANGLE;\n  }\n\n  /**\n   * current shapeType by currentTool\n   * @getter\n   */\n  get currentShapeType() {\n    return getShapeTypeByTool(this.currentTool) || ShapeType.RECTANGLE;\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload: Payload) {\n    const categories: Category[] = [];\n\n    const { ontology = [] } = payload;\n    ontology.forEach((o) => {\n      const items: CategoryItem[] = [];\n      o.children?.forEach((child) => {\n        const {\n          name,\n          display_name,\n          display_color,\n          count,\n          label_config,\n          label_config_point,\n          type = '',\n          tools,\n        } = child;\n\n        // parse tools\n        let allTools: ToolItem[] = [];\n        if (tools) {\n          tools.forEach((item) => {\n            const itemType: Tool = [Tool.RECTANGLE, Tool.POLYGON, Tool.LINE, Tool.DOT].includes(item.type as Tool) ? item.type as Tool : Tool.RECTANGLE;\n            const tool: ToolItem = { type: itemType };\n            allTools.push(tool);\n          });\n        } else {\n          // legacy config\n          let legacyEdges: number | undefined;\n          allTools = type.split(',').map((i) => ({ type: i as Tool || Tool.RECTANGLE, edges: legacyEdges }));\n        }\n\n        const item: CategoryItem = {\n          name,\n          displayName: display_name || name,\n          displayColor: display_color || o.display_color || '',\n          tools: allTools,\n        };\n        if (count !== undefined && count !== null) {\n          item.count = Number(count);\n        }\n        if (label_config) {\n          item.labelConfig = parseLabelConfig(label_config);\n        }\n        if (label_config_point) {\n          item.pointLabelConfig = parseLabelConfig(label_config_point);\n        }\n        items.push(item);\n      });\n\n      let categoryColor = '';\n      if (items.length === 1 && items[0].count === 1) {\n        categoryColor = items[0].displayColor;\n      }\n      categories.push({\n        className: o.class_name,\n        displayName: o.display_name || o.class_name,\n        displayColor: categoryColor,\n        labelConfigDynamic: parseLabelConfig(o.label_config_dynamic),\n        children: items,\n      });\n    });\n    this.categories = categories;\n    this.selectedCategoryName = this.categories[0]?.className;\n    this.selectedCategoryItemName = this.categories[0]?.children[0]?.name;\n    this.currentToolItem = this.categories[0]?.children[0]?.tools[0];\n  }\n\n  /**\n   * get category object\n   * @param categoryName\n   */\n  getCategory(categoryName: string) {\n    return toJS(this.categories.find((o) => o.className === categoryName));\n  }\n\n  /**\n   * get category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getCategoryItem(categoryName: string, categoryItemName: string) {\n    const category = this.getCategory(categoryName);\n    return toJS((category?.children || []).find((o) => o.name === categoryItemName));\n  }\n\n  /**\n   * set selected category\n   * @param categoryName\n   */\n  selectCategory(categoryName: string) {\n    if (this.selectedCategoryName !== categoryName) {\n      // turn off the add mode\n      this.rootStore.config.setAddMode(false);\n      // category changes\n      this.selectedCategoryName = categoryName;\n      // update selected category name\n      this.selectCategoryItem(this.selectedCategory.children[0].name); // default select the first one\n      // unselect selected instance if needed\n      if (this.rootStore.instance.selectedInstances.findIndex((i) => i.category === categoryName) < 0) {\n        this.rootStore.instance.selectInstance(null);\n      }\n    }\n  }\n\n  /**\n   * set selected category item\n   * @param categoryItemName\n   */\n  selectCategoryItem(categoryItemName: string) {\n    this.selectedCategoryItemName = categoryItemName;\n    this.currentToolItem = this.selectedCategoryItem.tools[0];\n  }\n\n  /**\n   * activate category item\n   * @param categoryItemName\n   * @param tool\n   */\n  activateCategoryItem(categoryItemName: string, tool: ToolItem) {\n    if (this.rootStore.shape.isDrawing) {\n      return;\n    }\n    this.selectCategoryItem(categoryItemName);\n    this.selectTool(tool);\n    this.rootStore.config.setAddMode(true);\n  }\n\n  /**\n   * activate category item by index\n   * @param index\n   */\n  activateCategoryItemByIndex(index: number) {\n    if (this.rootStore.shape.isDrawing) {\n      return;\n    }\n    const child = this.selectedCategory.children[index];\n    if (child) {\n      const tool = child.name === this.selectedCategoryItemName ? this.currentToolItem! : child.tools[0];\n      this.activateCategoryItem(child.name, tool);\n    }\n  }\n\n  /**\n   * set current tool\n   * @param tool\n   */\n  selectTool(tool: ToolItem) {\n    if (this.currentToolItem !== tool) {\n      this.currentToolItem = tool;\n    }\n  }\n\n  /**\n * get dynamic label config from category\n * @param categoryName\n */\n  getDynamicLabelConfigFromCategory(categoryName: string) {\n    const category = this.getCategory(categoryName);\n    return category?.labelConfigDynamic;\n  }\n\n  /**\n   * get label config from category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getLabelConfigFromCategoryItem(categoryName: string, categoryItemName: string) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    return categoryItem?.labelConfig;\n  }\n\n  /**\n   * get point label config from category item\n   * @param categoryName\n   * @param categoryItemName\n   */\n  getPointLabelConfigFromCategoryItem(categoryName: string, categoryItemName: string) {\n    const categoryItem = this.getCategoryItem(categoryName, categoryItemName);\n    return categoryItem?.pointLabelConfig;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}