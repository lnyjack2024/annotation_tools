{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global[\"'typed'\"] = factory());\n})(this, function () {\n  'use strict';\n\n  function ok() {\n    return true;\n  }\n  function notOk() {\n    return false;\n  }\n  function undef() {\n    return undefined;\n  }\n  const NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function,\n   *   test: function,\n   *   implementation: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   hasAny: boolean,\n   *   hasConversion: boolean,\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   isAny: boolean,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean,\n   *   isAny?: boolean\n   * }} TypeDef\n   */\n\n  /**\n   * @returns {() => function}\n   */\n  function create() {\n    // data type tests\n\n    /**\n     * Returns true if the argument is a non-null \"plain\" object\n     */\n    function isPlainObject(x) {\n      return typeof x === 'object' && x !== null && x.constructor === Object;\n    }\n    const _types = [{\n      name: 'number',\n      test: function (x) {\n        return typeof x === 'number';\n      }\n    }, {\n      name: 'string',\n      test: function (x) {\n        return typeof x === 'string';\n      }\n    }, {\n      name: 'boolean',\n      test: function (x) {\n        return typeof x === 'boolean';\n      }\n    }, {\n      name: 'Function',\n      test: function (x) {\n        return typeof x === 'function';\n      }\n    }, {\n      name: 'Array',\n      test: Array.isArray\n    }, {\n      name: 'Date',\n      test: function (x) {\n        return x instanceof Date;\n      }\n    }, {\n      name: 'RegExp',\n      test: function (x) {\n        return x instanceof RegExp;\n      }\n    }, {\n      name: 'Object',\n      test: isPlainObject\n    }, {\n      name: 'null',\n      test: function (x) {\n        return x === null;\n      }\n    }, {\n      name: 'undefined',\n      test: function (x) {\n        return x === undefined;\n      }\n    }];\n    const anyType = {\n      name: 'any',\n      test: ok,\n      isAny: true\n    };\n\n    // Data structures to track the types. As these are local variables in\n    // create(), each typed universe will get its own copy, but the variables\n    // will only be accessible through the (closures of the) functions supplied\n    // as properties of the typed object, not directly.\n    // These will be initialized in clear() below\n    let typeMap; // primary store of all types\n    let typeList; // Array of just type names, for the sake of ordering\n\n    // And similar data structures for the type conversions:\n    let nConversions = 0;\n    // the actual conversions are stored on a property of the destination types\n\n    // This is a temporary object, will be replaced with a function at the end\n    let typed = {\n      createCount: 0\n    };\n\n    /**\n     * Takes a type name and returns the corresponding official type object\n     * for that type.\n     *\n     * @param {string} typeName\n     * @returns {TypeDef} type\n     */\n    function findType(typeName) {\n      const type = typeMap.get(typeName);\n      if (type) {\n        return type;\n      }\n      // Remainder is error handling\n      let message = 'Unknown type \"' + typeName + '\"';\n      const name = typeName.toLowerCase();\n      let otherName;\n      for (otherName of typeList) {\n        if (otherName.toLowerCase() === name) {\n          message += '. Did you mean \"' + otherName + '\" ?';\n          break;\n        }\n      }\n      throw new TypeError(message);\n    }\n\n    /**\n     * Adds an array `types` of type definitions to this typed instance.\n     * Each type definition should be an object with properties:\n     * 'name' - a string giving the name of the type; 'test' - function\n     * returning a boolean that tests membership in the type; and optionally\n     * 'isAny' - true only for the 'any' type.\n     *\n     * The second optional argument, `before`, gives the name of a type that\n     * these types should be added before. The new types are added in the\n     * order specified.\n     * @param {TypeDef[]} types\n     * @param {string | boolean} [beforeSpec='any'] before\n     */\n    function addTypes(types) {\n      let beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n      const beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n      const newTypes = [];\n      for (let i = 0; i < types.length; ++i) {\n        if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n          throw new TypeError('Object with properties {name: string, test: function} expected');\n        }\n        const typeName = types[i].name;\n        if (typeMap.has(typeName)) {\n          throw new TypeError('Duplicate type name \"' + typeName + '\"');\n        }\n        newTypes.push(typeName);\n        typeMap.set(typeName, {\n          name: typeName,\n          test: types[i].test,\n          isAny: types[i].isAny,\n          index: beforeIndex + i,\n          conversionsTo: [] // Newly added type can't have any conversions to it\n        });\n      }\n      // update the typeList\n      const affectedTypes = typeList.slice(beforeIndex);\n      typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes);\n      // Fix the indices\n      for (let i = beforeIndex + newTypes.length; i < typeList.length; ++i) {\n        typeMap.get(typeList[i]).index = i;\n      }\n    }\n\n    /**\n     * Removes all types and conversions from this typed instance.\n     * May cause previously constructed typed-functions to throw\n     * strange errors when they are called with types that do not\n     * match any of their signatures.\n     */\n    function clear() {\n      typeMap = new Map();\n      typeList = [];\n      nConversions = 0;\n      addTypes([anyType], false);\n    }\n\n    // initialize the types to the default list\n    clear();\n    addTypes(_types);\n\n    /**\n     * Removes all conversions, leaving the types alone.\n     */\n    function clearConversions() {\n      let typeName;\n      for (typeName of typeList) {\n        typeMap.get(typeName).conversionsTo = [];\n      }\n      nConversions = 0;\n    }\n\n    /**\n     * Find the type names that match a value.\n     * @param {*} value\n     * @return {string[]} Array of names of types for which\n     *                  the type test matches the value.\n     */\n    function findTypeNames(value) {\n      const matches = typeList.filter(name => {\n        const type = typeMap.get(name);\n        return !type.isAny && type.test(value);\n      });\n      if (matches.length) {\n        return matches;\n      }\n      return ['any'];\n    }\n\n    /**\n     * Check if an entity is a typed function created by any instance\n     * @param {any} entity\n     * @returns {boolean}\n     */\n    function isTypedFunction(entity) {\n      return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n    }\n\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.findSignature(fn, ['number', 'string'])\n     *   typed.findSignature(fn, 'number, string')\n     *   typed.findSignature(fn, 'number,string', {exact: true})\n     *\n     * This function findSignature will by default return the best match to\n     * the given signature, possibly employing type conversions.\n     *\n     * The (optional) third argument is a plain object giving options\n     * controlling the signature search. Currently the only implemented\n     * option is `exact`: if specified as true (default is false), only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Note that a (possibly different) type matching\n     * `any`, or one or more instances of TYPE matching `...TYPE` are\n     * considered exact matches in this regard, as no conversions are used.\n     *\n     * This function returns a \"signature\" object, as does `typed.resolve()`,\n     * which is a plain object with four keys: `params` (the array of parameters\n     * for this signature), `fn` (the originally supplied function for this\n     * signature), `test` (a generated function that determines if an argument\n     * list matches this signature, and `implementation` (the function to call\n     * on a matching argument list, that performs conversions if necessary and\n     * then calls the originally supplied function).\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature search as documented\n     * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n     *     Returns the matching signature, or throws an error when no signature\n     *     is found.\n     */\n    function findSignature(fn, signature, options) {\n      if (!isTypedFunction(fn)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      }\n\n      // Canonicalize input\n      const exact = options && options.exact;\n      const stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n      const params = parseSignature(stringSignature);\n      const canonicalSignature = stringifyParams(params);\n\n      // First hope we get lucky and exactly match a signature\n      if (!exact || canonicalSignature in fn.signatures) {\n        // OK, we can check the internal signatures\n        const match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n        if (match) {\n          return match;\n        }\n      }\n\n      // Oh well, we did not; so we have to go back and check the parameters\n      // one by one, in order to catch things like `any` and rest params.\n      // Note here we can assume there is at least one parameter, because\n      // the empty signature would have matched successfully above.\n      const nParams = params.length;\n      let remainingSignatures;\n      if (exact) {\n        remainingSignatures = [];\n        let name;\n        for (name in fn.signatures) {\n          remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n        }\n      } else {\n        remainingSignatures = fn._typedFunctionData.signatures;\n      }\n      for (let i = 0; i < nParams; ++i) {\n        const want = params[i];\n        const filteredSignatures = [];\n        let possibility;\n        for (possibility of remainingSignatures) {\n          const have = getParamAtIndex(possibility.params, i);\n          if (!have || want.restParam && !have.restParam) {\n            continue;\n          }\n          if (!have.hasAny) {\n            // have to check all of the wanted types are available\n            const haveTypes = paramTypeSet(have);\n            if (want.types.some(wtype => !haveTypes.has(wtype.name))) {\n              continue;\n            }\n          }\n          // OK, this looks good\n          filteredSignatures.push(possibility);\n        }\n        remainingSignatures = filteredSignatures;\n        if (remainingSignatures.length === 0) break;\n      }\n      // Return the first remaining signature that was totally matched:\n      let candidate;\n      for (candidate of remainingSignatures) {\n        if (candidate.params.length <= nParams) {\n          return candidate;\n        }\n      }\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n    }\n\n    /**\n     * Find the proper function to call for a specific signature from\n     * a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *   typed.find(fn, 'number,string', {exact: true})\n     *\n     * This function find will by default return the best match to\n     * the given signature, possibly employing type conversions (and returning\n     * a function that will perform those conversions as needed). The\n     * (optional) third argument is a plain object giving options contolling\n     * the signature search. Currently only the option `exact` is implemented,\n     * which defaults to \"false\". If `exact` is specified as true, then only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Uses of `any` and `...TYPE` are considered exact if\n     * no conversions are necessary to apply the corresponding function.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature match as documented\n     * @return {function}\n     *     Returns the function to call for the given signature, or throws an\n     *     error if no match is found.\n     */\n    function find(fn, signature, options) {\n      return findSignature(fn, signature, options).implementation;\n    }\n\n    /**\n     * Convert a given value to another data type, specified by type name.\n     *\n     * @param {*} value\n     * @param {string} typeName\n     */\n    function convert(value, typeName) {\n      // check conversion is needed\n      const type = findType(typeName);\n      if (type.test(value)) {\n        return value;\n      }\n      const conversions = type.conversionsTo;\n      if (conversions.length === 0) {\n        throw new Error('There are no conversions to ' + typeName + ' defined.');\n      }\n      for (let i = 0; i < conversions.length; i++) {\n        const fromType = findType(conversions[i].from);\n        if (fromType.test(value)) {\n          return conversions[i].convert(value);\n        }\n      }\n      throw new Error('Cannot convert ' + value + ' to ' + typeName);\n    }\n\n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @param {string} [','] separator\n     * @return {string}\n     */\n    function stringifyParams(params) {\n      let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n      return params.map(p => p.name).join(separator);\n    }\n\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @return {Param} param\n     */\n    function parseParam(param) {\n      const restParam = param.indexOf('...') === 0;\n      const types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n      const typeDefs = types.split('|').map(s => findType(s.trim()));\n      let hasAny = false;\n      let paramName = restParam ? '...' : '';\n      const exactTypes = typeDefs.map(function (type) {\n        hasAny = type.isAny || hasAny;\n        paramName += type.name + '|';\n        return {\n          name: type.name,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n      return {\n        types: exactTypes,\n        name: paramName.slice(0, -1),\n        // remove trailing '|' from above\n        hasAny,\n        hasConversion: false,\n        restParam\n      };\n    }\n\n    /**\n     * Expands a parsed parameter with the types available from currently\n     * defined conversions.\n     * @param {Param} param\n     * @return {Param} param\n     */\n    function expandParam(param) {\n      const typeNames = param.types.map(t => t.name);\n      const matchingConversions = availableConversions(typeNames);\n      let hasAny = param.hasAny;\n      let newName = param.name;\n      const convertibleTypes = matchingConversions.map(function (conversion) {\n        const type = findType(conversion.from);\n        hasAny = type.isAny || hasAny;\n        newName += '|' + conversion.from;\n        return {\n          name: conversion.from,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion,\n          conversionIndex: conversion.index\n        };\n      });\n      return {\n        types: param.types.concat(convertibleTypes),\n        name: newName,\n        hasAny,\n        hasConversion: convertibleTypes.length > 0,\n        restParam: param.restParam\n      };\n    }\n\n    /**\n     * Return the set of type names in a parameter.\n     * Caches the result for efficiency\n     *\n     * @param {Param} param\n     * @return {Set<string>} typenames\n     */\n    function paramTypeSet(param) {\n      if (!param.typeSet) {\n        param.typeSet = new Set();\n        param.types.forEach(type => param.typeSet.add(type.name));\n      }\n      return param.typeSet;\n    }\n\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     *\n     * @param {string} signature\n     * @return {Param[]} params\n     */\n    function parseSignature(rawSignature) {\n      const params = [];\n      if (typeof rawSignature !== 'string') {\n        throw new TypeError('Signatures must be strings');\n      }\n      const signature = rawSignature.trim();\n      if (signature === '') {\n        return params;\n      }\n      const rawParams = signature.split(',');\n      for (let i = 0; i < rawParams.length; ++i) {\n        const parsedParam = parseParam(rawParams[i].trim());\n        if (parsedParam.restParam && i !== rawParams.length - 1) {\n          throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n        }\n        // if invalid, short-circuit (all the types may have been filtered)\n        if (parsedParam.types.length === 0) {\n          return null;\n        }\n        params.push(parsedParam);\n      }\n      return params;\n    }\n\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n    function hasRestParam(params) {\n      const param = last(params);\n      return param ? param.restParam : false;\n    }\n\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      } else if (param.types.length === 1) {\n        return findType(param.types[0].name).test;\n      } else if (param.types.length === 2) {\n        const test0 = findType(param.types[0].name).test;\n        const test1 = findType(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        };\n      } else {\n        // param.types.length > 2\n        const tests = param.types.map(function (type) {\n          return findType(type.name).test;\n        });\n        return function or(x) {\n          for (let i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n          return false;\n        };\n      }\n    }\n\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n    function compileTests(params) {\n      let tests, test0, test1;\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        const varIndex = tests.length;\n        const lastTest = compileTest(last(params));\n        const testRestParam = function (args) {\n          for (let i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n          return true;\n        };\n        return function testArgs(args) {\n          for (let i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n          return testRestParam(args) && args.length >= varIndex + 1;\n        };\n      } else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        } else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        } else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        } else {\n          // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (let i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n\n    /**\n     * Find the parameter at a specific index of a Params list.\n     * Handles rest parameters.\n     * @param {Param[]} params\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n    function getParamAtIndex(params, index) {\n      return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n    }\n\n    /**\n     * Get all type names of a parameter\n     * @param {Params[]} params\n     * @param {number} index\n     * @return {string[]} Returns an array with type names\n     */\n    function getTypeSetAtIndex(params, index) {\n      const param = getParamAtIndex(params, index);\n      if (!param) {\n        return new Set();\n      }\n      return paramTypeSet(param);\n    }\n\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n    function mergeExpectedParams(signatures, index) {\n      const typeSet = new Set();\n      signatures.forEach(signature => {\n        const paramSet = getTypeSetAtIndex(signature.params, index);\n        let name;\n        for (name of paramSet) {\n          typeSet.add(name);\n        }\n      });\n      return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n    }\n\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n    function createError(name, args, signatures) {\n      let err, expected;\n      const _name = name || 'unnamed';\n\n      // test for wrong type at some index\n      let matchingSignatures = signatures;\n      let index;\n      for (index = 0; index < args.length; index++) {\n        const nextMatchingDefs = [];\n        matchingSignatures.forEach(signature => {\n          const param = getParamAtIndex(signature.params, index);\n          const test = compileTest(param);\n          if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n            nextMatchingDefs.push(signature);\n          }\n        });\n        if (nextMatchingDefs.length === 0) {\n          // no matching signatures anymore, throw error \"wrong type\"\n          expected = mergeExpectedParams(matchingSignatures, index);\n          if (expected.length > 0) {\n            const actualTypes = findTypeNames(args[index]);\n            err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n            err.data = {\n              category: 'wrongType',\n              fn: _name,\n              index,\n              actual: actualTypes,\n              expected\n            };\n            return err;\n          }\n        } else {\n          matchingSignatures = nextMatchingDefs;\n        }\n      }\n\n      // test for too few arguments\n      const lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params) ? Infinity : signature.params.length;\n      });\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected\n        };\n        return err;\n      }\n\n      // test for too many arguments\n      const maxLength = Math.max.apply(null, lengths);\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        };\n        return err;\n      }\n\n      // Generic error\n      const argTypes = [];\n      for (let i = 0; i < args.length; ++i) {\n        argTypes.push(findTypeNames(args[i]).join('|'));\n      }\n      err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: argTypes\n      };\n      return err;\n    }\n\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n    function getLowestTypeIndex(param) {\n      let min = typeList.length + 1;\n      for (let i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n      return min;\n    }\n\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n    function getLowestConversionIndex(param) {\n      let min = nConversions + 1;\n      for (let i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n      return min;\n    }\n\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns -1 when param1 must get a lower\n     *                  index than param2, 1 when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareParams(param1, param2) {\n      // We compare a number of metrics on a param in turn:\n      // 1) 'any' parameters are the least preferred\n      if (param1.hasAny) {\n        if (!param2.hasAny) {\n          return 1;\n        }\n      } else if (param2.hasAny) {\n        return -1;\n      }\n\n      // 2) Prefer non-rest to rest parameters\n      if (param1.restParam) {\n        if (!param2.restParam) {\n          return 1;\n        }\n      } else if (param2.restParam) {\n        return -1;\n      }\n\n      // 3) Prefer exact type match to conversions\n      if (param1.hasConversion) {\n        if (!param2.hasConversion) {\n          return 1;\n        }\n      } else if (param2.hasConversion) {\n        return -1;\n      }\n\n      // 4) Prefer lower type index:\n      const typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n      if (typeDiff < 0) {\n        return -1;\n      }\n      if (typeDiff > 0) {\n        return 1;\n      }\n\n      // 5) Prefer lower conversion index\n      const convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n      if (convDiff < 0) {\n        return -1;\n      }\n      if (convDiff > 0) {\n        return 1;\n      }\n\n      // Don't have a basis for preference\n      return 0;\n    }\n\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n    function compareSignatures(signature1, signature2) {\n      const pars1 = signature1.params;\n      const pars2 = signature2.params;\n      const last1 = last(pars1);\n      const last2 = last(pars2);\n      const hasRest1 = hasRestParam(pars1);\n      const hasRest2 = hasRestParam(pars2);\n      // We compare a number of metrics on signatures in turn:\n      // 1) An \"any rest param\" is least preferred\n      if (hasRest1 && last1.hasAny) {\n        if (!hasRest2 || !last2.hasAny) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasAny) {\n        return -1;\n      }\n\n      // 2) Minimize the number of 'any' parameters\n      let any1 = 0;\n      let conv1 = 0;\n      let par;\n      for (par of pars1) {\n        if (par.hasAny) ++any1;\n        if (par.hasConversion) ++conv1;\n      }\n      let any2 = 0;\n      let conv2 = 0;\n      for (par of pars2) {\n        if (par.hasAny) ++any2;\n        if (par.hasConversion) ++conv2;\n      }\n      if (any1 !== any2) {\n        return any1 - any2;\n      }\n\n      // 3) A conversion rest param is less preferred\n      if (hasRest1 && last1.hasConversion) {\n        if (!hasRest2 || !last2.hasConversion) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasConversion) {\n        return -1;\n      }\n\n      // 4) Minimize the number of conversions\n      if (conv1 !== conv2) {\n        return conv1 - conv2;\n      }\n\n      // 5) Prefer no rest param\n      if (hasRest1) {\n        if (!hasRest2) {\n          return 1;\n        }\n      } else if (hasRest2) {\n        return -1;\n      }\n\n      // 6) Prefer shorter with rest param, longer without\n      const lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n      if (lengthCriterion !== 0) {\n        return lengthCriterion;\n      }\n\n      // Signatures are identical in each of the above metrics.\n      // In particular, they are the same length.\n      // We can therefore compare the parameters one by one.\n      // First we count which signature has more preferred parameters.\n      const comparisons = [];\n      let tc = 0;\n      for (let i = 0; i < pars1.length; ++i) {\n        const thisComparison = compareParams(pars1[i], pars2[i]);\n        comparisons.push(thisComparison);\n        tc += thisComparison;\n      }\n      if (tc !== 0) {\n        return tc;\n      }\n\n      // They have the same number of preferred parameters, so go by the\n      // earliest parameter in which we have a preference.\n      // In other words, dispatch is driven somewhat more by earlier\n      // parameters than later ones.\n      let c;\n      for (c of comparisons) {\n        if (c !== 0) {\n          return c;\n        }\n      }\n\n      // It's a tossup:\n      return 0;\n    }\n\n    /**\n     * Produce a list of all conversions from distinct types to one of\n     * the given types.\n     *\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        resulting in any given type (if any)\n     */\n    function availableConversions(typeNames) {\n      if (typeNames.length === 0) {\n        return [];\n      }\n      const types = typeNames.map(findType);\n      if (typeNames.length > 1) {\n        types.sort((t1, t2) => t1.index - t2.index);\n      }\n      let matches = types[0].conversionsTo;\n      if (typeNames.length === 1) {\n        return matches;\n      }\n      matches = matches.concat([]); // shallow copy the matches\n      // Since the types are now in index order, we just want the first\n      // occurrence of any from type:\n      const knownTypes = new Set(typeNames);\n      for (let i = 1; i < types.length; ++i) {\n        let newMatch;\n        for (newMatch of types[i].conversionsTo) {\n          if (!knownTypes.has(newMatch.from)) {\n            matches.push(newMatch);\n            knownTypes.add(newMatch.from);\n          }\n        }\n      }\n      return matches;\n    }\n\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n    function compileArgsPreprocessing(params, fn) {\n      let fnConvert = fn;\n\n      // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(p => p.hasConversion)) {\n        const restParam = hasRestParam(params);\n        const compiledConversions = params.map(compileArgConversion);\n        fnConvert = function convertArgs() {\n          const args = [];\n          const last = restParam ? arguments.length - 1 : arguments.length;\n          for (let i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n          return fn.apply(this, args);\n        };\n      }\n      let fnPreprocess = fnConvert;\n      if (hasRestParam(params)) {\n        const offset = params.length - 1;\n        fnPreprocess = function preprocessRestParams() {\n          return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        };\n      }\n      return fnPreprocess;\n    }\n\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n    function compileArgConversion(param) {\n      let test0, test1, conversion0, conversion1;\n      const tests = [];\n      const conversions = [];\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findType(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      });\n\n      // create optimized conversion functions depending on the number of conversions\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          };\n        case 1:\n          test0 = tests[0];\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n            return arg;\n          };\n        case 2:\n          test0 = tests[0];\n          test1 = tests[1];\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n            if (test1(arg)) {\n              return conversion1(arg);\n            }\n            return arg;\n          };\n        default:\n          return function convertArg(arg) {\n            for (let i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n            return arg;\n          };\n      }\n    }\n\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @return {Param[]}\n     */\n    function splitParams(params) {\n      function _splitParams(params, index, paramsSoFar) {\n        if (index < params.length) {\n          const param = params[index];\n          let resultingParams = [];\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            const exactTypes = param.types.filter(isExactType);\n            if (exactTypes.length < param.types.length) {\n              resultingParams.push({\n                types: exactTypes,\n                name: '...' + exactTypes.map(t => t.name).join('|'),\n                hasAny: exactTypes.some(t => t.isAny),\n                hasConversion: false,\n                restParam: true\n              });\n            }\n            resultingParams.push(param);\n          } else {\n            // split all the types of a regular parameter into one type per param\n            resultingParams = param.types.map(function (type) {\n              return {\n                types: [type],\n                name: type.name,\n                hasAny: type.isAny,\n                hasConversion: type.conversion,\n                restParam: false\n              };\n            });\n          }\n\n          // recurse over the groups with types\n          return flatMap(resultingParams, function (nextParam) {\n            return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n          });\n        } else {\n          // we've reached the end of the parameters.\n          return [paramsSoFar];\n        }\n      }\n      return _splitParams(params, 0, []);\n    }\n\n    /**\n     * Test whether two param lists represent conflicting signatures\n     * @param {Param[]} params1\n     * @param {Param[]} params2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n    function conflicting(params1, params2) {\n      const ii = Math.max(params1.length, params2.length);\n      for (let i = 0; i < ii; i++) {\n        const typeSet1 = getTypeSetAtIndex(params1, i);\n        const typeSet2 = getTypeSetAtIndex(params2, i);\n        let overlap = false;\n        let name;\n        for (name of typeSet2) {\n          if (typeSet1.has(name)) {\n            overlap = true;\n            break;\n          }\n        }\n        if (!overlap) {\n          return false;\n        }\n      }\n      const len1 = params1.length;\n      const len2 = params2.length;\n      const restParam1 = hasRestParam(params1);\n      const restParam2 = hasRestParam(params2);\n      return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n    }\n\n    /**\n     * Helper function for `resolveReferences` that returns a copy of\n     * functionList wihe any prior resolutions cleared out, in case we are\n     * recycling signatures from a prior typed function construction.\n     *\n     * @param {Array.<function|typed-reference>} functionList\n     * @return {Array.<function|typed-reference>}\n     */\n    function clearResolutions(functionList) {\n      return functionList.map(fn => {\n        if (isReferToSelf(fn)) {\n          return referToSelf(fn.referToSelf.callback);\n        }\n        if (isReferTo(fn)) {\n          return makeReferTo(fn.referTo.references, fn.referTo.callback);\n        }\n        return fn;\n      });\n    }\n\n    /**\n     * Take a list of references, a list of functions functionList, and a\n     * signatureMap indexing signatures into functionList, and return\n     * the list of resolutions, or a false-y value if they don't all\n     * resolve in a valid way (yet).\n     *\n     * @param {string[]} references\n     * @param {Array<function|typed-reference} functionList\n     * @param {Object.<string, integer>} signatureMap\n     * @return {function[] | false} resolutions\n     */\n    function collectResolutions(references, functionList, signatureMap) {\n      const resolvedReferences = [];\n      let reference;\n      for (reference of references) {\n        let resolution = signatureMap[reference];\n        if (typeof resolution !== 'number') {\n          throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n        }\n        resolution = functionList[resolution];\n        if (typeof resolution !== 'function') {\n          return false;\n        }\n        resolvedReferences.push(resolution);\n      }\n      return resolvedReferences;\n    }\n\n    /**\n     * Resolve any references in the functionList for the typed function\n     * itself. The signatureMap tells which index in the functionList a\n     * given signature should be mapped to (for use in resolving typed.referTo)\n     * and self provides the destions of a typed.referToSelf.\n     *\n     * @param {Array<function | typed-reference-object>} functionList\n     * @param {Object.<string, function>} signatureMap\n     * @param {function} self  The typed-function itself\n     * @return {Array<function>} The list of resolved functions\n     */\n    function resolveReferences(functionList, signatureMap, self) {\n      const resolvedFunctions = clearResolutions(functionList);\n      const isResolved = new Array(resolvedFunctions.length).fill(false);\n      let leftUnresolved = true;\n      while (leftUnresolved) {\n        leftUnresolved = false;\n        let nothingResolved = true;\n        for (let i = 0; i < resolvedFunctions.length; ++i) {\n          if (isResolved[i]) continue;\n          const fn = resolvedFunctions[i];\n          if (isReferToSelf(fn)) {\n            resolvedFunctions[i] = fn.referToSelf.callback(self);\n            // Preserve reference in case signature is reused someday:\n            resolvedFunctions[i].referToSelf = fn.referToSelf;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else if (isReferTo(fn)) {\n            const resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n            if (resolvedReferences) {\n              resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences);\n              // Preserve reference in case signature is reused someday:\n              resolvedFunctions[i].referTo = fn.referTo;\n              isResolved[i] = true;\n              nothingResolved = false;\n            } else {\n              leftUnresolved = true;\n            }\n          }\n        }\n        if (nothingResolved && leftUnresolved) {\n          throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n        }\n      }\n      return resolvedFunctions;\n    }\n\n    /**\n     * Validate whether any of the function bodies contains a self-reference\n     * usage like `this(...)` or `this.signatures`. This self-referencing is\n     * deprecated since typed-function v3. It has been replaced with\n     * the functions typed.referTo and typed.referToSelf.\n     * @param {Object.<string, function>} signaturesMap\n     */\n    function validateDeprecatedThis(signaturesMap) {\n      // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n\n      // match occurrences like 'this(' and 'this.signatures'\n      const deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n      Object.keys(signaturesMap).forEach(signature => {\n        const fn = signaturesMap[signature];\n        if (deprecatedThisRegex.test(fn.toString())) {\n          throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n        }\n      });\n    }\n\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} rawSignaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n    function createTypedFunction(name, rawSignaturesMap) {\n      typed.createCount++;\n      if (Object.keys(rawSignaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n      if (typed.warnAgainstDeprecatedThis) {\n        validateDeprecatedThis(rawSignaturesMap);\n      }\n\n      // Main processing loop for signatures\n      const parsedParams = [];\n      const originalFunctions = [];\n      const signaturesMap = {};\n      const preliminarySignatures = []; // may have duplicates from conversions\n      let signature;\n      for (signature in rawSignaturesMap) {\n        // A) Protect against polluted Object prototype:\n        if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n          continue;\n        }\n        // B) Parse the signature\n        const params = parseSignature(signature);\n        if (!params) continue;\n        // C) Check for conflicts\n        parsedParams.forEach(function (pp) {\n          if (conflicting(pp, params)) {\n            throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n          }\n        });\n        parsedParams.push(params);\n        // D) Store the provided function and add conversions\n        const functionIndex = originalFunctions.length;\n        originalFunctions.push(rawSignaturesMap[signature]);\n        const conversionParams = params.map(expandParam);\n        // E) Split the signatures and collect them up\n        let sp;\n        for (sp of splitParams(conversionParams)) {\n          const spName = stringifyParams(sp);\n          preliminarySignatures.push({\n            params: sp,\n            name: spName,\n            fn: functionIndex\n          });\n          if (sp.every(p => !p.hasConversion)) {\n            signaturesMap[spName] = functionIndex;\n          }\n        }\n      }\n      preliminarySignatures.sort(compareSignatures);\n\n      // Note the forward reference to theTypedFn\n      const resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn);\n\n      // Fill in the proper function for each signature\n      let s;\n      for (s in signaturesMap) {\n        if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n          signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n        }\n      }\n      const signatures = [];\n      const internalSignatureMap = new Map(); // benchmarks faster than object\n      for (s of preliminarySignatures) {\n        // Note it's only safe to eliminate duplicates like this\n        // _after_ the signature sorting step above; otherwise we might\n        // remove the wrong one.\n        if (!internalSignatureMap.has(s.name)) {\n          s.fn = resolvedFunctions[s.fn];\n          signatures.push(s);\n          internalSignatureMap.set(s.name, s);\n        }\n      }\n\n      // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n      const ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      const ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      const ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      const ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      const ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      const ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      const allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;\n\n      // compile the tests\n      for (let i = 0; i < signatures.length; ++i) {\n        signatures[i].test = compileTests(signatures[i].params);\n      }\n      const test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      const test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      const test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      const test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      const test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      const test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n      const test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      const test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      const test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      const test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      const test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      const test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;\n\n      // compile the functions\n      for (let i = 0; i < signatures.length; ++i) {\n        signatures[i].implementation = compileArgsPreprocessing(signatures[i].params, signatures[i].fn);\n      }\n      const fn0 = ok0 ? signatures[0].implementation : undef;\n      const fn1 = ok1 ? signatures[1].implementation : undef;\n      const fn2 = ok2 ? signatures[2].implementation : undef;\n      const fn3 = ok3 ? signatures[3].implementation : undef;\n      const fn4 = ok4 ? signatures[4].implementation : undef;\n      const fn5 = ok5 ? signatures[5].implementation : undef;\n      const len0 = ok0 ? signatures[0].params.length : -1;\n      const len1 = ok1 ? signatures[1].params.length : -1;\n      const len2 = ok2 ? signatures[2].params.length : -1;\n      const len3 = ok3 ? signatures[3].params.length : -1;\n      const len4 = ok4 ? signatures[4].params.length : -1;\n      const len5 = ok5 ? signatures[5].params.length : -1;\n\n      // simple and generic, but also slow\n      const iStart = allOk ? 6 : 0;\n      const iEnd = signatures.length;\n      // de-reference ahead for execution speed:\n      const tests = signatures.map(s => s.test);\n      const fns = signatures.map(s => s.implementation);\n      const generic = function generic() {\n        for (let i = iStart; i < iEnd; i++) {\n          if (tests[i](arguments)) {\n            return fns[i].apply(this, arguments);\n          }\n        }\n        return typed.onMismatch(name, arguments, signatures);\n      };\n\n      // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n      function theTypedFn(arg0, arg1) {\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n          return fn0.apply(this, arguments);\n        }\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n          return fn1.apply(this, arguments);\n        }\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n          return fn2.apply(this, arguments);\n        }\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n          return fn3.apply(this, arguments);\n        }\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n          return fn4.apply(this, arguments);\n        }\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n          return fn5.apply(this, arguments);\n        }\n        return generic.apply(this, arguments);\n      }\n\n      // attach name the typed function\n      try {\n        Object.defineProperty(theTypedFn, 'name', {\n          value: name\n        });\n      } catch (err) {\n        // old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      }\n\n      // attach signatures to the function.\n      // This property is close to the original collection of signatures\n      // used to create the typed-function, just with unions split:\n      theTypedFn.signatures = signaturesMap;\n\n      // Store internal data for functions like resolve, find, etc.\n      // Also serves as the flag that this is a typed-function\n      theTypedFn._typedFunctionData = {\n        signatures,\n        signatureMap: internalSignatureMap\n      };\n      return theTypedFn;\n    }\n\n    /**\n     * Action to take on mismatch\n     * @param {string} name      Name of function that was attempted to be called\n     * @param {Array} args       Actual arguments to the call\n     * @param {Array} signatures Known signatures of the named typed-function\n     */\n    function _onMismatch(name, args, signatures) {\n      throw createError(name, args, signatures);\n    }\n\n    /**\n     * Return all but the last items of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {Array}\n     */\n    function initial(arr) {\n      return slice(arr, 0, arr.length - 1);\n    }\n\n    /**\n     * return the last item of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {*}\n     */\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n    function findInArray(arr, test) {\n      for (let i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n\n    /**\n     * Create a reference callback to one or multiple signatures\n     *\n     * Syntax:\n     *\n     *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n     *       // ...\n     *     })\n     *\n     * @returns {{referTo: {references: string[], callback}}}\n     */\n    function referTo() {\n      const references = initial(arguments).map(s => stringifyParams(parseSignature(s)));\n      const callback = last(arguments);\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as last argument');\n      }\n      return makeReferTo(references, callback);\n    }\n    function makeReferTo(references, callback) {\n      return {\n        referTo: {\n          references,\n          callback\n        }\n      };\n    }\n\n    /**\n     * Create a reference callback to the typed-function itself\n     *\n     * @param {(self: function) => function} callback\n     * @returns {{referToSelf: { callback: function }}}\n     */\n    function referToSelf(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as first argument');\n      }\n      return {\n        referToSelf: {\n          callback\n        }\n      };\n    }\n\n    /**\n     * Test whether something is a referTo object, holding a list with reference\n     * signatures and a callback.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n    function isReferTo(objectOrFn) {\n      return objectOrFn && typeof objectOrFn.referTo === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n    }\n\n    /**\n     * Test whether something is a referToSelf object, holding a callback where\n     * to pass `self`.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n    function isReferToSelf(objectOrFn) {\n      return objectOrFn && typeof objectOrFn.referToSelf === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n    }\n\n    /**\n     * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n     * an error in case (C).\n     *\n     * @param { string | undefined } nameSoFar\n     * @param { string | undefined } newName\n     * @returns { string } updated name\n     */\n    function checkName(nameSoFar, newName) {\n      if (!nameSoFar) {\n        return newName;\n      }\n      if (newName && newName !== nameSoFar) {\n        const err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n        err.data = {\n          actual: newName,\n          expected: nameSoFar\n        };\n        throw err;\n      }\n      return nameSoFar;\n    }\n\n    /**\n     * Retrieve the implied name from an object with signature keys\n     * and function values, checking whether all value names match\n     *\n     * @param { {string: function} } obj\n     */\n    function getObjectName(obj) {\n      let name;\n      for (const key in obj) {\n        // Only pay attention to own properties, and only if their values\n        // are typed functions or functions with a signature property\n        if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n          name = checkName(name, obj[key].name);\n        }\n      }\n      return name;\n    }\n\n    /**\n     * Copy all of the signatures from the second argument into the first,\n     * which is modified by side effect, checking for conflicts\n     *\n     * @param {Object.<string, function|typed-reference>} dest\n     * @param {Object.<string, function|typed-reference>} source\n     */\n    function mergeSignatures(dest, source) {\n      let key;\n      for (key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          if (key in dest) {\n            if (source[key] !== dest[key]) {\n              const err = new Error('Signature \"' + key + '\" is defined twice');\n              err.data = {\n                signature: key,\n                sourceFunction: source[key],\n                destFunction: dest[key]\n              };\n              throw err;\n            }\n            // else: both signatures point to the same function, that's fine\n          }\n          dest[key] = source[key];\n        }\n      }\n    }\n    const saveTyped = typed;\n\n    /**\n     * Originally the main function was a typed function itself, but then\n     * it might not be able to generate error messages if the client\n     * replaced the type system with different names.\n     *\n     * Main entry: typed([name], functions/objects with signatures...)\n     *\n     * Assembles and returns a new typed-function from the given items\n     * that provide signatures and implementations, each of which may be\n     * * a plain object mapping (string) signatures to implementing functions,\n     * * a previously constructed typed function, or\n     * * any other single function with a string-valued property `signature`.\n      * The name of the resulting typed-function will be given by the\n     * string-valued name argument if present, or if not, by the name\n     * of any of the arguments that have one, as long as any that do are\n     * consistent with each other. If no name is specified, the name will be\n     * an empty string.\n     *\n     * @param {string} maybeName [optional]\n     * @param {(function|object)[]} signature providers\n     * @returns {typed-function}\n     */\n    typed = function (maybeName) {\n      const named = typeof maybeName === 'string';\n      const start = named ? 1 : 0;\n      let name = named ? maybeName : '';\n      const allSignatures = {};\n      for (let i = start; i < arguments.length; ++i) {\n        const item = arguments[i];\n        let theseSignatures = {};\n        let thisName;\n        if (typeof item === 'function') {\n          thisName = item.name;\n          if (typeof item.signature === 'string') {\n            // Case 1: Ordinary function with a string 'signature' property\n            theseSignatures[item.signature] = item;\n          } else if (isTypedFunction(item)) {\n            // Case 2: Existing typed function\n            theseSignatures = item.signatures;\n          }\n        } else if (isPlainObject(item)) {\n          // Case 3: Plain object, assume keys = signatures, values = functions\n          theseSignatures = item;\n          if (!named) {\n            thisName = getObjectName(item);\n          }\n        }\n        if (Object.keys(theseSignatures).length === 0) {\n          const err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n          err.data = {\n            index: i,\n            argument: item\n          };\n          throw err;\n        }\n        if (!named) {\n          name = checkName(name, thisName);\n        }\n        mergeSignatures(allSignatures, theseSignatures);\n      }\n      return createTypedFunction(name || '', allSignatures);\n    };\n    typed.create = create;\n    typed.createCount = saveTyped.createCount;\n    typed.onMismatch = _onMismatch;\n    typed.throwMismatchError = _onMismatch;\n    typed.createError = createError;\n    typed.clear = clear;\n    typed.clearConversions = clearConversions;\n    typed.addTypes = addTypes;\n    typed._findType = findType; // For unit testing only\n    typed.referTo = referTo;\n    typed.referToSelf = referToSelf;\n    typed.convert = convert;\n    typed.findSignature = findSignature;\n    typed.find = find;\n    typed.isTypedFunction = isTypedFunction;\n    typed.warnAgainstDeprecatedThis = true;\n\n    /**\n     * add a type (convenience wrapper for typed.addTypes)\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n    typed.addType = function (type, beforeObjectTest) {\n      let before = 'any';\n      if (beforeObjectTest !== false && typeMap.has('Object')) {\n        before = 'Object';\n      }\n      typed.addTypes([type], before);\n    };\n\n    /**\n     * Verify that the ConversionDef conversion has a valid format.\n     *\n     * @param {conversionDef} conversion\n     * @return {void}\n     * @throws {TypeError|SyntaxError}\n     */\n    function _validateConversion(conversion) {\n      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n      if (conversion.to === conversion.from) {\n        throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n      }\n    }\n\n    /**\n     * Add a conversion\n     *\n     * @param {ConversionDef} conversion\n     * @param {{override: boolean}} [options]\n     * @returns {void}\n     * @throws {TypeError}\n     */\n    typed.addConversion = function (conversion) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        override: false\n      };\n      _validateConversion(conversion);\n      const to = findType(conversion.to);\n      const existing = to.conversionsTo.find(other => other.from === conversion.from);\n      if (existing) {\n        if (options && options.override) {\n          typed.removeConversion({\n            from: existing.from,\n            to: conversion.to,\n            convert: existing.convert\n          });\n        } else {\n          throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n        }\n      }\n      to.conversionsTo.push({\n        from: conversion.from,\n        convert: conversion.convert,\n        index: nConversions++\n      });\n    };\n\n    /**\n     * Convenience wrapper to call addConversion on each conversion in a list.\n     *\n     * @param {ConversionDef[]} conversions\n     * @param {{override: boolean}} [options]\n     * @returns {void}\n     * @throws {TypeError}\n     */\n    typed.addConversions = function (conversions, options) {\n      conversions.forEach(conversion => typed.addConversion(conversion, options));\n    };\n\n    /**\n     * Remove the specified conversion. The format is the same as for\n     * addConversion, and the convert function must match or an error\n     * is thrown.\n     *\n     * @param {{from: string, to: string, convert: function}} conversion\n     * @returns {void}\n     * @throws {TypeError|SyntaxError|Error}\n     */\n    typed.removeConversion = function (conversion) {\n      _validateConversion(conversion);\n      const to = findType(conversion.to);\n      const existingConversion = findInArray(to.conversionsTo, c => c.from === conversion.from);\n      if (!existingConversion) {\n        throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n      }\n      if (existingConversion.convert !== conversion.convert) {\n        throw new Error('Conversion to remove does not match existing conversion');\n      }\n      const index = to.conversionsTo.indexOf(existingConversion);\n      to.conversionsTo.splice(index, 1);\n    };\n\n    /**\n     * Produce the specific signature that a typed function\n     * will execute on the given arguments. Here, a \"signature\" is an\n     * object with properties 'params', 'test', 'fn', and 'implementation'.\n     * This last property is a function that converts params as necessary\n     * and then calls 'fn'. Returns null if there is no matching signature.\n     * @param {typed-function} tf\n     * @param {any[]} argList\n     * @returns {{params: string, test: function, fn: function, implementation: function}}\n     */\n    typed.resolve = function (tf, argList) {\n      if (!isTypedFunction(tf)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      }\n      const sigs = tf._typedFunctionData.signatures;\n      for (let i = 0; i < sigs.length; ++i) {\n        if (sigs[i].test(argList)) {\n          return sigs[i];\n        }\n      }\n      return null;\n    };\n    return typed;\n  }\n  var typedFunction = create();\n  return typedFunction;\n});","map":{"version":3,"sources":["../esm/typed-function.mjs"],"names":[],"mappings":"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","sourcesContent":["function ok() {\n  return true;\n}\nfunction notOk() {\n  return false;\n}\nfunction undef() {\n  return undefined;\n}\nconst NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n\n/**\n * @typedef {{\n *   params: Param[],\n *   fn: function,\n *   test: function,\n *   implementation: function\n * }} Signature\n *\n * @typedef {{\n *   types: Type[],\n *   hasAny: boolean,\n *   hasConversion: boolean,\n *   restParam: boolean\n * }} Param\n *\n * @typedef {{\n *   name: string,\n *   typeIndex: number,\n *   test: function,\n *   isAny: boolean,\n *   conversion?: ConversionDef,\n *   conversionIndex: number,\n * }} Type\n *\n * @typedef {{\n *   from: string,\n *   to: string,\n *   convert: function (*) : *\n * }} ConversionDef\n *\n * @typedef {{\n *   name: string,\n *   test: function(*) : boolean,\n *   isAny?: boolean\n * }} TypeDef\n */\n\n/**\n * @returns {() => function}\n */\nfunction create() {\n  // data type tests\n\n  /**\n   * Returns true if the argument is a non-null \"plain\" object\n   */\n  function isPlainObject(x) {\n    return typeof x === 'object' && x !== null && x.constructor === Object;\n  }\n  const _types = [{\n    name: 'number',\n    test: function (x) {\n      return typeof x === 'number';\n    }\n  }, {\n    name: 'string',\n    test: function (x) {\n      return typeof x === 'string';\n    }\n  }, {\n    name: 'boolean',\n    test: function (x) {\n      return typeof x === 'boolean';\n    }\n  }, {\n    name: 'Function',\n    test: function (x) {\n      return typeof x === 'function';\n    }\n  }, {\n    name: 'Array',\n    test: Array.isArray\n  }, {\n    name: 'Date',\n    test: function (x) {\n      return x instanceof Date;\n    }\n  }, {\n    name: 'RegExp',\n    test: function (x) {\n      return x instanceof RegExp;\n    }\n  }, {\n    name: 'Object',\n    test: isPlainObject\n  }, {\n    name: 'null',\n    test: function (x) {\n      return x === null;\n    }\n  }, {\n    name: 'undefined',\n    test: function (x) {\n      return x === undefined;\n    }\n  }];\n  const anyType = {\n    name: 'any',\n    test: ok,\n    isAny: true\n  };\n\n  // Data structures to track the types. As these are local variables in\n  // create(), each typed universe will get its own copy, but the variables\n  // will only be accessible through the (closures of the) functions supplied\n  // as properties of the typed object, not directly.\n  // These will be initialized in clear() below\n  let typeMap; // primary store of all types\n  let typeList; // Array of just type names, for the sake of ordering\n\n  // And similar data structures for the type conversions:\n  let nConversions = 0;\n  // the actual conversions are stored on a property of the destination types\n\n  // This is a temporary object, will be replaced with a function at the end\n  let typed = {\n    createCount: 0\n  };\n\n  /**\n   * Takes a type name and returns the corresponding official type object\n   * for that type.\n   *\n   * @param {string} typeName\n   * @returns {TypeDef} type\n   */\n  function findType(typeName) {\n    const type = typeMap.get(typeName);\n    if (type) {\n      return type;\n    }\n    // Remainder is error handling\n    let message = 'Unknown type \"' + typeName + '\"';\n    const name = typeName.toLowerCase();\n    let otherName;\n    for (otherName of typeList) {\n      if (otherName.toLowerCase() === name) {\n        message += '. Did you mean \"' + otherName + '\" ?';\n        break;\n      }\n    }\n    throw new TypeError(message);\n  }\n\n  /**\n   * Adds an array `types` of type definitions to this typed instance.\n   * Each type definition should be an object with properties:\n   * 'name' - a string giving the name of the type; 'test' - function\n   * returning a boolean that tests membership in the type; and optionally\n   * 'isAny' - true only for the 'any' type.\n   *\n   * The second optional argument, `before`, gives the name of a type that\n   * these types should be added before. The new types are added in the\n   * order specified.\n   * @param {TypeDef[]} types\n   * @param {string | boolean} [beforeSpec='any'] before\n   */\n  function addTypes(types) {\n    let beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n    const beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n    const newTypes = [];\n    for (let i = 0; i < types.length; ++i) {\n      if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n      const typeName = types[i].name;\n      if (typeMap.has(typeName)) {\n        throw new TypeError('Duplicate type name \"' + typeName + '\"');\n      }\n      newTypes.push(typeName);\n      typeMap.set(typeName, {\n        name: typeName,\n        test: types[i].test,\n        isAny: types[i].isAny,\n        index: beforeIndex + i,\n        conversionsTo: [] // Newly added type can't have any conversions to it\n      });\n    }\n    // update the typeList\n    const affectedTypes = typeList.slice(beforeIndex);\n    typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes);\n    // Fix the indices\n    for (let i = beforeIndex + newTypes.length; i < typeList.length; ++i) {\n      typeMap.get(typeList[i]).index = i;\n    }\n  }\n\n  /**\n   * Removes all types and conversions from this typed instance.\n   * May cause previously constructed typed-functions to throw\n   * strange errors when they are called with types that do not\n   * match any of their signatures.\n   */\n  function clear() {\n    typeMap = new Map();\n    typeList = [];\n    nConversions = 0;\n    addTypes([anyType], false);\n  }\n\n  // initialize the types to the default list\n  clear();\n  addTypes(_types);\n\n  /**\n   * Removes all conversions, leaving the types alone.\n   */\n  function clearConversions() {\n    let typeName;\n    for (typeName of typeList) {\n      typeMap.get(typeName).conversionsTo = [];\n    }\n    nConversions = 0;\n  }\n\n  /**\n   * Find the type names that match a value.\n   * @param {*} value\n   * @return {string[]} Array of names of types for which\n   *                  the type test matches the value.\n   */\n  function findTypeNames(value) {\n    const matches = typeList.filter(name => {\n      const type = typeMap.get(name);\n      return !type.isAny && type.test(value);\n    });\n    if (matches.length) {\n      return matches;\n    }\n    return ['any'];\n  }\n\n  /**\n   * Check if an entity is a typed function created by any instance\n   * @param {any} entity\n   * @returns {boolean}\n   */\n  function isTypedFunction(entity) {\n    return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n  }\n\n  /**\n   * Find a specific signature from a (composed) typed function, for example:\n   *\n   *   typed.findSignature(fn, ['number', 'string'])\n   *   typed.findSignature(fn, 'number, string')\n   *   typed.findSignature(fn, 'number,string', {exact: true})\n   *\n   * This function findSignature will by default return the best match to\n   * the given signature, possibly employing type conversions.\n   *\n   * The (optional) third argument is a plain object giving options\n   * controlling the signature search. Currently the only implemented\n   * option is `exact`: if specified as true (default is false), only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Note that a (possibly different) type matching\n   * `any`, or one or more instances of TYPE matching `...TYPE` are\n   * considered exact matches in this regard, as no conversions are used.\n   *\n   * This function returns a \"signature\" object, as does `typed.resolve()`,\n   * which is a plain object with four keys: `params` (the array of parameters\n   * for this signature), `fn` (the originally supplied function for this\n   * signature), `test` (a generated function that determines if an argument\n   * list matches this signature, and `implementation` (the function to call\n   * on a matching argument list, that performs conversions if necessary and\n   * then calls the originally supplied function).\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature search as documented\n   * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n   *     Returns the matching signature, or throws an error when no signature\n   *     is found.\n   */\n  function findSignature(fn, signature, options) {\n    if (!isTypedFunction(fn)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n\n    // Canonicalize input\n    const exact = options && options.exact;\n    const stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n    const params = parseSignature(stringSignature);\n    const canonicalSignature = stringifyParams(params);\n\n    // First hope we get lucky and exactly match a signature\n    if (!exact || canonicalSignature in fn.signatures) {\n      // OK, we can check the internal signatures\n      const match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n      if (match) {\n        return match;\n      }\n    }\n\n    // Oh well, we did not; so we have to go back and check the parameters\n    // one by one, in order to catch things like `any` and rest params.\n    // Note here we can assume there is at least one parameter, because\n    // the empty signature would have matched successfully above.\n    const nParams = params.length;\n    let remainingSignatures;\n    if (exact) {\n      remainingSignatures = [];\n      let name;\n      for (name in fn.signatures) {\n        remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n      }\n    } else {\n      remainingSignatures = fn._typedFunctionData.signatures;\n    }\n    for (let i = 0; i < nParams; ++i) {\n      const want = params[i];\n      const filteredSignatures = [];\n      let possibility;\n      for (possibility of remainingSignatures) {\n        const have = getParamAtIndex(possibility.params, i);\n        if (!have || want.restParam && !have.restParam) {\n          continue;\n        }\n        if (!have.hasAny) {\n          // have to check all of the wanted types are available\n          const haveTypes = paramTypeSet(have);\n          if (want.types.some(wtype => !haveTypes.has(wtype.name))) {\n            continue;\n          }\n        }\n        // OK, this looks good\n        filteredSignatures.push(possibility);\n      }\n      remainingSignatures = filteredSignatures;\n      if (remainingSignatures.length === 0) break;\n    }\n    // Return the first remaining signature that was totally matched:\n    let candidate;\n    for (candidate of remainingSignatures) {\n      if (candidate.params.length <= nParams) {\n        return candidate;\n      }\n    }\n    throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n  }\n\n  /**\n   * Find the proper function to call for a specific signature from\n   * a (composed) typed function, for example:\n   *\n   *   typed.find(fn, ['number', 'string'])\n   *   typed.find(fn, 'number, string')\n   *   typed.find(fn, 'number,string', {exact: true})\n   *\n   * This function find will by default return the best match to\n   * the given signature, possibly employing type conversions (and returning\n   * a function that will perform those conversions as needed). The\n   * (optional) third argument is a plain object giving options contolling\n   * the signature search. Currently only the option `exact` is implemented,\n   * which defaults to \"false\". If `exact` is specified as true, then only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Uses of `any` and `...TYPE` are considered exact if\n   * no conversions are necessary to apply the corresponding function.\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature match as documented\n   * @return {function}\n   *     Returns the function to call for the given signature, or throws an\n   *     error if no match is found.\n   */\n  function find(fn, signature, options) {\n    return findSignature(fn, signature, options).implementation;\n  }\n\n  /**\n   * Convert a given value to another data type, specified by type name.\n   *\n   * @param {*} value\n   * @param {string} typeName\n   */\n  function convert(value, typeName) {\n    // check conversion is needed\n    const type = findType(typeName);\n    if (type.test(value)) {\n      return value;\n    }\n    const conversions = type.conversionsTo;\n    if (conversions.length === 0) {\n      throw new Error('There are no conversions to ' + typeName + ' defined.');\n    }\n    for (let i = 0; i < conversions.length; i++) {\n      const fromType = findType(conversions[i].from);\n      if (fromType.test(value)) {\n        return conversions[i].convert(value);\n      }\n    }\n    throw new Error('Cannot convert ' + value + ' to ' + typeName);\n  }\n\n  /**\n   * Stringify parameters in a normalized way\n   * @param {Param[]} params\n   * @param {string} [','] separator\n   * @return {string}\n   */\n  function stringifyParams(params) {\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    return params.map(p => p.name).join(separator);\n  }\n\n  /**\n   * Parse a parameter, like \"...number | boolean\"\n   * @param {string} param\n   * @return {Param} param\n   */\n  function parseParam(param) {\n    const restParam = param.indexOf('...') === 0;\n    const types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n    const typeDefs = types.split('|').map(s => findType(s.trim()));\n    let hasAny = false;\n    let paramName = restParam ? '...' : '';\n    const exactTypes = typeDefs.map(function (type) {\n      hasAny = type.isAny || hasAny;\n      paramName += type.name + '|';\n      return {\n        name: type.name,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: null,\n        conversionIndex: -1\n      };\n    });\n    return {\n      types: exactTypes,\n      name: paramName.slice(0, -1),\n      // remove trailing '|' from above\n      hasAny,\n      hasConversion: false,\n      restParam\n    };\n  }\n\n  /**\n   * Expands a parsed parameter with the types available from currently\n   * defined conversions.\n   * @param {Param} param\n   * @return {Param} param\n   */\n  function expandParam(param) {\n    const typeNames = param.types.map(t => t.name);\n    const matchingConversions = availableConversions(typeNames);\n    let hasAny = param.hasAny;\n    let newName = param.name;\n    const convertibleTypes = matchingConversions.map(function (conversion) {\n      const type = findType(conversion.from);\n      hasAny = type.isAny || hasAny;\n      newName += '|' + conversion.from;\n      return {\n        name: conversion.from,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion,\n        conversionIndex: conversion.index\n      };\n    });\n    return {\n      types: param.types.concat(convertibleTypes),\n      name: newName,\n      hasAny,\n      hasConversion: convertibleTypes.length > 0,\n      restParam: param.restParam\n    };\n  }\n\n  /**\n   * Return the set of type names in a parameter.\n   * Caches the result for efficiency\n   *\n   * @param {Param} param\n   * @return {Set<string>} typenames\n   */\n  function paramTypeSet(param) {\n    if (!param.typeSet) {\n      param.typeSet = new Set();\n      param.types.forEach(type => param.typeSet.add(type.name));\n    }\n    return param.typeSet;\n  }\n\n  /**\n   * Parse a signature with comma separated parameters,\n   * like \"number | boolean, ...string\"\n   *\n   * @param {string} signature\n   * @return {Param[]} params\n   */\n  function parseSignature(rawSignature) {\n    const params = [];\n    if (typeof rawSignature !== 'string') {\n      throw new TypeError('Signatures must be strings');\n    }\n    const signature = rawSignature.trim();\n    if (signature === '') {\n      return params;\n    }\n    const rawParams = signature.split(',');\n    for (let i = 0; i < rawParams.length; ++i) {\n      const parsedParam = parseParam(rawParams[i].trim());\n      if (parsedParam.restParam && i !== rawParams.length - 1) {\n        throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n      }\n      // if invalid, short-circuit (all the types may have been filtered)\n      if (parsedParam.types.length === 0) {\n        return null;\n      }\n      params.push(parsedParam);\n    }\n    return params;\n  }\n\n  /**\n   * Test whether a set of params contains a restParam\n   * @param {Param[]} params\n   * @return {boolean} Returns true when the last parameter is a restParam\n   */\n  function hasRestParam(params) {\n    const param = last(params);\n    return param ? param.restParam : false;\n  }\n\n  /**\n   * Create a type test for a single parameter, which can have one or multiple\n   * types.\n   * @param {Param} param\n   * @return {function(x: *) : boolean} Returns a test function\n   */\n  function compileTest(param) {\n    if (!param || param.types.length === 0) {\n      // nothing to do\n      return ok;\n    } else if (param.types.length === 1) {\n      return findType(param.types[0].name).test;\n    } else if (param.types.length === 2) {\n      const test0 = findType(param.types[0].name).test;\n      const test1 = findType(param.types[1].name).test;\n      return function or(x) {\n        return test0(x) || test1(x);\n      };\n    } else {\n      // param.types.length > 2\n      const tests = param.types.map(function (type) {\n        return findType(type.name).test;\n      });\n      return function or(x) {\n        for (let i = 0; i < tests.length; i++) {\n          if (tests[i](x)) {\n            return true;\n          }\n        }\n        return false;\n      };\n    }\n  }\n\n  /**\n   * Create a test for all parameters of a signature\n   * @param {Param[]} params\n   * @return {function(args: Array<*>) : boolean}\n   */\n  function compileTests(params) {\n    let tests, test0, test1;\n    if (hasRestParam(params)) {\n      // variable arguments like '...number'\n      tests = initial(params).map(compileTest);\n      const varIndex = tests.length;\n      const lastTest = compileTest(last(params));\n      const testRestParam = function (args) {\n        for (let i = varIndex; i < args.length; i++) {\n          if (!lastTest(args[i])) {\n            return false;\n          }\n        }\n        return true;\n      };\n      return function testArgs(args) {\n        for (let i = 0; i < tests.length; i++) {\n          if (!tests[i](args[i])) {\n            return false;\n          }\n        }\n        return testRestParam(args) && args.length >= varIndex + 1;\n      };\n    } else {\n      // no variable arguments\n      if (params.length === 0) {\n        return function testArgs(args) {\n          return args.length === 0;\n        };\n      } else if (params.length === 1) {\n        test0 = compileTest(params[0]);\n        return function testArgs(args) {\n          return test0(args[0]) && args.length === 1;\n        };\n      } else if (params.length === 2) {\n        test0 = compileTest(params[0]);\n        test1 = compileTest(params[1]);\n        return function testArgs(args) {\n          return test0(args[0]) && test1(args[1]) && args.length === 2;\n        };\n      } else {\n        // arguments.length > 2\n        tests = params.map(compileTest);\n        return function testArgs(args) {\n          for (let i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n          return args.length === tests.length;\n        };\n      }\n    }\n  }\n\n  /**\n   * Find the parameter at a specific index of a Params list.\n   * Handles rest parameters.\n   * @param {Param[]} params\n   * @param {number} index\n   * @return {Param | null} Returns the matching parameter when found,\n   *                        null otherwise.\n   */\n  function getParamAtIndex(params, index) {\n    return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n  }\n\n  /**\n   * Get all type names of a parameter\n   * @param {Params[]} params\n   * @param {number} index\n   * @return {string[]} Returns an array with type names\n   */\n  function getTypeSetAtIndex(params, index) {\n    const param = getParamAtIndex(params, index);\n    if (!param) {\n      return new Set();\n    }\n    return paramTypeSet(param);\n  }\n\n  /**\n   * Test whether a type is an exact type or conversion\n   * @param {Type} type\n   * @return {boolean} Returns true when\n   */\n  function isExactType(type) {\n    return type.conversion === null || type.conversion === undefined;\n  }\n\n  /**\n   * Helper function for creating error messages: create an array with\n   * all available types on a specific argument index.\n   * @param {Signature[]} signatures\n   * @param {number} index\n   * @return {string[]} Returns an array with available types\n   */\n  function mergeExpectedParams(signatures, index) {\n    const typeSet = new Set();\n    signatures.forEach(signature => {\n      const paramSet = getTypeSetAtIndex(signature.params, index);\n      let name;\n      for (name of paramSet) {\n        typeSet.add(name);\n      }\n    });\n    return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n  }\n\n  /**\n   * Create\n   * @param {string} name             The name of the function\n   * @param {array.<*>} args          The actual arguments passed to the function\n   * @param {Signature[]} signatures  A list with available signatures\n   * @return {TypeError} Returns a type error with additional data\n   *                     attached to it in the property `data`\n   */\n  function createError(name, args, signatures) {\n    let err, expected;\n    const _name = name || 'unnamed';\n\n    // test for wrong type at some index\n    let matchingSignatures = signatures;\n    let index;\n    for (index = 0; index < args.length; index++) {\n      const nextMatchingDefs = [];\n      matchingSignatures.forEach(signature => {\n        const param = getParamAtIndex(signature.params, index);\n        const test = compileTest(param);\n        if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n          nextMatchingDefs.push(signature);\n        }\n      });\n      if (nextMatchingDefs.length === 0) {\n        // no matching signatures anymore, throw error \"wrong type\"\n        expected = mergeExpectedParams(matchingSignatures, index);\n        if (expected.length > 0) {\n          const actualTypes = findTypeNames(args[index]);\n          err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n          err.data = {\n            category: 'wrongType',\n            fn: _name,\n            index,\n            actual: actualTypes,\n            expected\n          };\n          return err;\n        }\n      } else {\n        matchingSignatures = nextMatchingDefs;\n      }\n    }\n\n    // test for too few arguments\n    const lengths = matchingSignatures.map(function (signature) {\n      return hasRestParam(signature.params) ? Infinity : signature.params.length;\n    });\n    if (args.length < Math.min.apply(null, lengths)) {\n      expected = mergeExpectedParams(matchingSignatures, index);\n      err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n      err.data = {\n        category: 'tooFewArgs',\n        fn: _name,\n        index: args.length,\n        expected\n      };\n      return err;\n    }\n\n    // test for too many arguments\n    const maxLength = Math.max.apply(null, lengths);\n    if (args.length > maxLength) {\n      err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n      err.data = {\n        category: 'tooManyArgs',\n        fn: _name,\n        index: args.length,\n        expectedLength: maxLength\n      };\n      return err;\n    }\n\n    // Generic error\n    const argTypes = [];\n    for (let i = 0; i < args.length; ++i) {\n      argTypes.push(findTypeNames(args[i]).join('|'));\n    }\n    err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n    err.data = {\n      category: 'mismatch',\n      actual: argTypes\n    };\n    return err;\n  }\n\n  /**\n   * Find the lowest index of all exact types of a parameter (no conversions)\n   * @param {Param} param\n   * @return {number} Returns the index of the lowest type in typed.types\n   */\n  function getLowestTypeIndex(param) {\n    let min = typeList.length + 1;\n    for (let i = 0; i < param.types.length; i++) {\n      if (isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].typeIndex);\n      }\n    }\n    return min;\n  }\n\n  /**\n   * Find the lowest index of the conversion of all types of the parameter\n   * having a conversion\n   * @param {Param} param\n   * @return {number} Returns the lowest index of the conversions of this type\n   */\n  function getLowestConversionIndex(param) {\n    let min = nConversions + 1;\n    for (let i = 0; i < param.types.length; i++) {\n      if (!isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].conversionIndex);\n      }\n    }\n    return min;\n  }\n\n  /**\n   * Compare two params\n   * @param {Param} param1\n   * @param {Param} param2\n   * @return {number} returns -1 when param1 must get a lower\n   *                  index than param2, 1 when the opposite,\n   *                  or zero when both are equal\n   */\n  function compareParams(param1, param2) {\n    // We compare a number of metrics on a param in turn:\n    // 1) 'any' parameters are the least preferred\n    if (param1.hasAny) {\n      if (!param2.hasAny) {\n        return 1;\n      }\n    } else if (param2.hasAny) {\n      return -1;\n    }\n\n    // 2) Prefer non-rest to rest parameters\n    if (param1.restParam) {\n      if (!param2.restParam) {\n        return 1;\n      }\n    } else if (param2.restParam) {\n      return -1;\n    }\n\n    // 3) Prefer exact type match to conversions\n    if (param1.hasConversion) {\n      if (!param2.hasConversion) {\n        return 1;\n      }\n    } else if (param2.hasConversion) {\n      return -1;\n    }\n\n    // 4) Prefer lower type index:\n    const typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n    if (typeDiff < 0) {\n      return -1;\n    }\n    if (typeDiff > 0) {\n      return 1;\n    }\n\n    // 5) Prefer lower conversion index\n    const convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n    if (convDiff < 0) {\n      return -1;\n    }\n    if (convDiff > 0) {\n      return 1;\n    }\n\n    // Don't have a basis for preference\n    return 0;\n  }\n\n  /**\n   * Compare two signatures\n   * @param {Signature} signature1\n   * @param {Signature} signature2\n   * @return {number} returns a negative number when param1 must get a lower\n   *                  index than param2, a positive number when the opposite,\n   *                  or zero when both are equal\n   */\n  function compareSignatures(signature1, signature2) {\n    const pars1 = signature1.params;\n    const pars2 = signature2.params;\n    const last1 = last(pars1);\n    const last2 = last(pars2);\n    const hasRest1 = hasRestParam(pars1);\n    const hasRest2 = hasRestParam(pars2);\n    // We compare a number of metrics on signatures in turn:\n    // 1) An \"any rest param\" is least preferred\n    if (hasRest1 && last1.hasAny) {\n      if (!hasRest2 || !last2.hasAny) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasAny) {\n      return -1;\n    }\n\n    // 2) Minimize the number of 'any' parameters\n    let any1 = 0;\n    let conv1 = 0;\n    let par;\n    for (par of pars1) {\n      if (par.hasAny) ++any1;\n      if (par.hasConversion) ++conv1;\n    }\n    let any2 = 0;\n    let conv2 = 0;\n    for (par of pars2) {\n      if (par.hasAny) ++any2;\n      if (par.hasConversion) ++conv2;\n    }\n    if (any1 !== any2) {\n      return any1 - any2;\n    }\n\n    // 3) A conversion rest param is less preferred\n    if (hasRest1 && last1.hasConversion) {\n      if (!hasRest2 || !last2.hasConversion) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasConversion) {\n      return -1;\n    }\n\n    // 4) Minimize the number of conversions\n    if (conv1 !== conv2) {\n      return conv1 - conv2;\n    }\n\n    // 5) Prefer no rest param\n    if (hasRest1) {\n      if (!hasRest2) {\n        return 1;\n      }\n    } else if (hasRest2) {\n      return -1;\n    }\n\n    // 6) Prefer shorter with rest param, longer without\n    const lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n    if (lengthCriterion !== 0) {\n      return lengthCriterion;\n    }\n\n    // Signatures are identical in each of the above metrics.\n    // In particular, they are the same length.\n    // We can therefore compare the parameters one by one.\n    // First we count which signature has more preferred parameters.\n    const comparisons = [];\n    let tc = 0;\n    for (let i = 0; i < pars1.length; ++i) {\n      const thisComparison = compareParams(pars1[i], pars2[i]);\n      comparisons.push(thisComparison);\n      tc += thisComparison;\n    }\n    if (tc !== 0) {\n      return tc;\n    }\n\n    // They have the same number of preferred parameters, so go by the\n    // earliest parameter in which we have a preference.\n    // In other words, dispatch is driven somewhat more by earlier\n    // parameters than later ones.\n    let c;\n    for (c of comparisons) {\n      if (c !== 0) {\n        return c;\n      }\n    }\n\n    // It's a tossup:\n    return 0;\n  }\n\n  /**\n   * Produce a list of all conversions from distinct types to one of\n   * the given types.\n   *\n   * @param {string[]} typeNames\n   * @return {ConversionDef[]} Returns the conversions that are available\n   *                        resulting in any given type (if any)\n   */\n  function availableConversions(typeNames) {\n    if (typeNames.length === 0) {\n      return [];\n    }\n    const types = typeNames.map(findType);\n    if (typeNames.length > 1) {\n      types.sort((t1, t2) => t1.index - t2.index);\n    }\n    let matches = types[0].conversionsTo;\n    if (typeNames.length === 1) {\n      return matches;\n    }\n    matches = matches.concat([]); // shallow copy the matches\n    // Since the types are now in index order, we just want the first\n    // occurrence of any from type:\n    const knownTypes = new Set(typeNames);\n    for (let i = 1; i < types.length; ++i) {\n      let newMatch;\n      for (newMatch of types[i].conversionsTo) {\n        if (!knownTypes.has(newMatch.from)) {\n          matches.push(newMatch);\n          knownTypes.add(newMatch.from);\n        }\n      }\n    }\n    return matches;\n  }\n\n  /**\n   * Preprocess arguments before calling the original function:\n   * - if needed convert the parameters\n   * - in case of rest parameters, move the rest parameters into an Array\n   * @param {Param[]} params\n   * @param {function} fn\n   * @return {function} Returns a wrapped function\n   */\n  function compileArgsPreprocessing(params, fn) {\n    let fnConvert = fn;\n\n    // TODO: can we make this wrapper function smarter/simpler?\n\n    if (params.some(p => p.hasConversion)) {\n      const restParam = hasRestParam(params);\n      const compiledConversions = params.map(compileArgConversion);\n      fnConvert = function convertArgs() {\n        const args = [];\n        const last = restParam ? arguments.length - 1 : arguments.length;\n        for (let i = 0; i < last; i++) {\n          args[i] = compiledConversions[i](arguments[i]);\n        }\n        if (restParam) {\n          args[last] = arguments[last].map(compiledConversions[last]);\n        }\n        return fn.apply(this, args);\n      };\n    }\n    let fnPreprocess = fnConvert;\n    if (hasRestParam(params)) {\n      const offset = params.length - 1;\n      fnPreprocess = function preprocessRestParams() {\n        return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n      };\n    }\n    return fnPreprocess;\n  }\n\n  /**\n   * Compile conversion for a parameter to the right type\n   * @param {Param} param\n   * @return {function} Returns the wrapped function that will convert arguments\n   *\n   */\n  function compileArgConversion(param) {\n    let test0, test1, conversion0, conversion1;\n    const tests = [];\n    const conversions = [];\n    param.types.forEach(function (type) {\n      if (type.conversion) {\n        tests.push(findType(type.conversion.from).test);\n        conversions.push(type.conversion.convert);\n      }\n    });\n\n    // create optimized conversion functions depending on the number of conversions\n    switch (conversions.length) {\n      case 0:\n        return function convertArg(arg) {\n          return arg;\n        };\n      case 1:\n        test0 = tests[0];\n        conversion0 = conversions[0];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n          return arg;\n        };\n      case 2:\n        test0 = tests[0];\n        test1 = tests[1];\n        conversion0 = conversions[0];\n        conversion1 = conversions[1];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n          if (test1(arg)) {\n            return conversion1(arg);\n          }\n          return arg;\n        };\n      default:\n        return function convertArg(arg) {\n          for (let i = 0; i < conversions.length; i++) {\n            if (tests[i](arg)) {\n              return conversions[i](arg);\n            }\n          }\n          return arg;\n        };\n    }\n  }\n\n  /**\n   * Split params with union types in to separate params.\n   *\n   * For example:\n   *\n   *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n   *     // returns:\n   *     // [\n   *     //   ['Array', 'string'],\n   *     //   ['Array', 'RegExp'],\n   *     //   ['Object', 'string'],\n   *     //   ['Object', 'RegExp']\n   *     // ]\n   *\n   * @param {Param[]} params\n   * @return {Param[]}\n   */\n  function splitParams(params) {\n    function _splitParams(params, index, paramsSoFar) {\n      if (index < params.length) {\n        const param = params[index];\n        let resultingParams = [];\n        if (param.restParam) {\n          // split the types of a rest parameter in two:\n          // one with only exact types, and one with exact types and conversions\n          const exactTypes = param.types.filter(isExactType);\n          if (exactTypes.length < param.types.length) {\n            resultingParams.push({\n              types: exactTypes,\n              name: '...' + exactTypes.map(t => t.name).join('|'),\n              hasAny: exactTypes.some(t => t.isAny),\n              hasConversion: false,\n              restParam: true\n            });\n          }\n          resultingParams.push(param);\n        } else {\n          // split all the types of a regular parameter into one type per param\n          resultingParams = param.types.map(function (type) {\n            return {\n              types: [type],\n              name: type.name,\n              hasAny: type.isAny,\n              hasConversion: type.conversion,\n              restParam: false\n            };\n          });\n        }\n\n        // recurse over the groups with types\n        return flatMap(resultingParams, function (nextParam) {\n          return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n        });\n      } else {\n        // we've reached the end of the parameters.\n        return [paramsSoFar];\n      }\n    }\n    return _splitParams(params, 0, []);\n  }\n\n  /**\n   * Test whether two param lists represent conflicting signatures\n   * @param {Param[]} params1\n   * @param {Param[]} params2\n   * @return {boolean} Returns true when the signatures conflict, false otherwise.\n   */\n  function conflicting(params1, params2) {\n    const ii = Math.max(params1.length, params2.length);\n    for (let i = 0; i < ii; i++) {\n      const typeSet1 = getTypeSetAtIndex(params1, i);\n      const typeSet2 = getTypeSetAtIndex(params2, i);\n      let overlap = false;\n      let name;\n      for (name of typeSet2) {\n        if (typeSet1.has(name)) {\n          overlap = true;\n          break;\n        }\n      }\n      if (!overlap) {\n        return false;\n      }\n    }\n    const len1 = params1.length;\n    const len2 = params2.length;\n    const restParam1 = hasRestParam(params1);\n    const restParam2 = hasRestParam(params2);\n    return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n  }\n\n  /**\n   * Helper function for `resolveReferences` that returns a copy of\n   * functionList wihe any prior resolutions cleared out, in case we are\n   * recycling signatures from a prior typed function construction.\n   *\n   * @param {Array.<function|typed-reference>} functionList\n   * @return {Array.<function|typed-reference>}\n   */\n  function clearResolutions(functionList) {\n    return functionList.map(fn => {\n      if (isReferToSelf(fn)) {\n        return referToSelf(fn.referToSelf.callback);\n      }\n      if (isReferTo(fn)) {\n        return makeReferTo(fn.referTo.references, fn.referTo.callback);\n      }\n      return fn;\n    });\n  }\n\n  /**\n   * Take a list of references, a list of functions functionList, and a\n   * signatureMap indexing signatures into functionList, and return\n   * the list of resolutions, or a false-y value if they don't all\n   * resolve in a valid way (yet).\n   *\n   * @param {string[]} references\n   * @param {Array<function|typed-reference} functionList\n   * @param {Object.<string, integer>} signatureMap\n   * @return {function[] | false} resolutions\n   */\n  function collectResolutions(references, functionList, signatureMap) {\n    const resolvedReferences = [];\n    let reference;\n    for (reference of references) {\n      let resolution = signatureMap[reference];\n      if (typeof resolution !== 'number') {\n        throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n      }\n      resolution = functionList[resolution];\n      if (typeof resolution !== 'function') {\n        return false;\n      }\n      resolvedReferences.push(resolution);\n    }\n    return resolvedReferences;\n  }\n\n  /**\n   * Resolve any references in the functionList for the typed function\n   * itself. The signatureMap tells which index in the functionList a\n   * given signature should be mapped to (for use in resolving typed.referTo)\n   * and self provides the destions of a typed.referToSelf.\n   *\n   * @param {Array<function | typed-reference-object>} functionList\n   * @param {Object.<string, function>} signatureMap\n   * @param {function} self  The typed-function itself\n   * @return {Array<function>} The list of resolved functions\n   */\n  function resolveReferences(functionList, signatureMap, self) {\n    const resolvedFunctions = clearResolutions(functionList);\n    const isResolved = new Array(resolvedFunctions.length).fill(false);\n    let leftUnresolved = true;\n    while (leftUnresolved) {\n      leftUnresolved = false;\n      let nothingResolved = true;\n      for (let i = 0; i < resolvedFunctions.length; ++i) {\n        if (isResolved[i]) continue;\n        const fn = resolvedFunctions[i];\n        if (isReferToSelf(fn)) {\n          resolvedFunctions[i] = fn.referToSelf.callback(self);\n          // Preserve reference in case signature is reused someday:\n          resolvedFunctions[i].referToSelf = fn.referToSelf;\n          isResolved[i] = true;\n          nothingResolved = false;\n        } else if (isReferTo(fn)) {\n          const resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n          if (resolvedReferences) {\n            resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences);\n            // Preserve reference in case signature is reused someday:\n            resolvedFunctions[i].referTo = fn.referTo;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else {\n            leftUnresolved = true;\n          }\n        }\n      }\n      if (nothingResolved && leftUnresolved) {\n        throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n      }\n    }\n    return resolvedFunctions;\n  }\n\n  /**\n   * Validate whether any of the function bodies contains a self-reference\n   * usage like `this(...)` or `this.signatures`. This self-referencing is\n   * deprecated since typed-function v3. It has been replaced with\n   * the functions typed.referTo and typed.referToSelf.\n   * @param {Object.<string, function>} signaturesMap\n   */\n  function validateDeprecatedThis(signaturesMap) {\n    // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n\n    // match occurrences like 'this(' and 'this.signatures'\n    const deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n    Object.keys(signaturesMap).forEach(signature => {\n      const fn = signaturesMap[signature];\n      if (deprecatedThisRegex.test(fn.toString())) {\n        throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n      }\n    });\n  }\n\n  /**\n   * Create a typed function\n   * @param {String} name               The name for the typed function\n   * @param {Object.<string, function>} rawSignaturesMap\n   *                                    An object with one or\n   *                                    multiple signatures as key, and the\n   *                                    function corresponding to the\n   *                                    signature as value.\n   * @return {function}  Returns the created typed function.\n   */\n  function createTypedFunction(name, rawSignaturesMap) {\n    typed.createCount++;\n    if (Object.keys(rawSignaturesMap).length === 0) {\n      throw new SyntaxError('No signatures provided');\n    }\n    if (typed.warnAgainstDeprecatedThis) {\n      validateDeprecatedThis(rawSignaturesMap);\n    }\n\n    // Main processing loop for signatures\n    const parsedParams = [];\n    const originalFunctions = [];\n    const signaturesMap = {};\n    const preliminarySignatures = []; // may have duplicates from conversions\n    let signature;\n    for (signature in rawSignaturesMap) {\n      // A) Protect against polluted Object prototype:\n      if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n        continue;\n      }\n      // B) Parse the signature\n      const params = parseSignature(signature);\n      if (!params) continue;\n      // C) Check for conflicts\n      parsedParams.forEach(function (pp) {\n        if (conflicting(pp, params)) {\n          throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n        }\n      });\n      parsedParams.push(params);\n      // D) Store the provided function and add conversions\n      const functionIndex = originalFunctions.length;\n      originalFunctions.push(rawSignaturesMap[signature]);\n      const conversionParams = params.map(expandParam);\n      // E) Split the signatures and collect them up\n      let sp;\n      for (sp of splitParams(conversionParams)) {\n        const spName = stringifyParams(sp);\n        preliminarySignatures.push({\n          params: sp,\n          name: spName,\n          fn: functionIndex\n        });\n        if (sp.every(p => !p.hasConversion)) {\n          signaturesMap[spName] = functionIndex;\n        }\n      }\n    }\n    preliminarySignatures.sort(compareSignatures);\n\n    // Note the forward reference to theTypedFn\n    const resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn);\n\n    // Fill in the proper function for each signature\n    let s;\n    for (s in signaturesMap) {\n      if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n        signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n      }\n    }\n    const signatures = [];\n    const internalSignatureMap = new Map(); // benchmarks faster than object\n    for (s of preliminarySignatures) {\n      // Note it's only safe to eliminate duplicates like this\n      // _after_ the signature sorting step above; otherwise we might\n      // remove the wrong one.\n      if (!internalSignatureMap.has(s.name)) {\n        s.fn = resolvedFunctions[s.fn];\n        signatures.push(s);\n        internalSignatureMap.set(s.name, s);\n      }\n    }\n\n    // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n    const ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n    const ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n    const ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n    const ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n    const ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n    const ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n    const allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;\n\n    // compile the tests\n    for (let i = 0; i < signatures.length; ++i) {\n      signatures[i].test = compileTests(signatures[i].params);\n    }\n    const test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n    const test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n    const test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n    const test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n    const test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n    const test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n    const test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n    const test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n    const test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n    const test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n    const test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n    const test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;\n\n    // compile the functions\n    for (let i = 0; i < signatures.length; ++i) {\n      signatures[i].implementation = compileArgsPreprocessing(signatures[i].params, signatures[i].fn);\n    }\n    const fn0 = ok0 ? signatures[0].implementation : undef;\n    const fn1 = ok1 ? signatures[1].implementation : undef;\n    const fn2 = ok2 ? signatures[2].implementation : undef;\n    const fn3 = ok3 ? signatures[3].implementation : undef;\n    const fn4 = ok4 ? signatures[4].implementation : undef;\n    const fn5 = ok5 ? signatures[5].implementation : undef;\n    const len0 = ok0 ? signatures[0].params.length : -1;\n    const len1 = ok1 ? signatures[1].params.length : -1;\n    const len2 = ok2 ? signatures[2].params.length : -1;\n    const len3 = ok3 ? signatures[3].params.length : -1;\n    const len4 = ok4 ? signatures[4].params.length : -1;\n    const len5 = ok5 ? signatures[5].params.length : -1;\n\n    // simple and generic, but also slow\n    const iStart = allOk ? 6 : 0;\n    const iEnd = signatures.length;\n    // de-reference ahead for execution speed:\n    const tests = signatures.map(s => s.test);\n    const fns = signatures.map(s => s.implementation);\n    const generic = function generic() {\n      'use strict';\n\n      for (let i = iStart; i < iEnd; i++) {\n        if (tests[i](arguments)) {\n          return fns[i].apply(this, arguments);\n        }\n      }\n      return typed.onMismatch(name, arguments, signatures);\n    };\n\n    // create the typed function\n    // fast, specialized version. Falls back to the slower, generic one if needed\n    function theTypedFn(arg0, arg1) {\n      'use strict';\n\n      if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n        return fn0.apply(this, arguments);\n      }\n      if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n        return fn1.apply(this, arguments);\n      }\n      if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n        return fn2.apply(this, arguments);\n      }\n      if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n        return fn3.apply(this, arguments);\n      }\n      if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n        return fn4.apply(this, arguments);\n      }\n      if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n        return fn5.apply(this, arguments);\n      }\n      return generic.apply(this, arguments);\n    }\n\n    // attach name the typed function\n    try {\n      Object.defineProperty(theTypedFn, 'name', {\n        value: name\n      });\n    } catch (err) {\n      // old browsers do not support Object.defineProperty and some don't support setting the name property\n      // the function name is not essential for the functioning, it's mostly useful for debugging,\n      // so it's fine to have unnamed functions.\n    }\n\n    // attach signatures to the function.\n    // This property is close to the original collection of signatures\n    // used to create the typed-function, just with unions split:\n    theTypedFn.signatures = signaturesMap;\n\n    // Store internal data for functions like resolve, find, etc.\n    // Also serves as the flag that this is a typed-function\n    theTypedFn._typedFunctionData = {\n      signatures,\n      signatureMap: internalSignatureMap\n    };\n    return theTypedFn;\n  }\n\n  /**\n   * Action to take on mismatch\n   * @param {string} name      Name of function that was attempted to be called\n   * @param {Array} args       Actual arguments to the call\n   * @param {Array} signatures Known signatures of the named typed-function\n   */\n  function _onMismatch(name, args, signatures) {\n    throw createError(name, args, signatures);\n  }\n\n  /**\n   * Return all but the last items of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {Array}\n   */\n  function initial(arr) {\n    return slice(arr, 0, arr.length - 1);\n  }\n\n  /**\n   * return the last item of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {*}\n   */\n  function last(arr) {\n    return arr[arr.length - 1];\n  }\n\n  /**\n   * Slice an array or function Arguments\n   * @param {Array | Arguments | IArguments} arr\n   * @param {number} start\n   * @param {number} [end]\n   * @return {Array}\n   */\n  function slice(arr, start, end) {\n    return Array.prototype.slice.call(arr, start, end);\n  }\n\n  /**\n   * Return the first item from an array for which test(arr[i]) returns true\n   * @param {Array} arr\n   * @param {function} test\n   * @return {* | undefined} Returns the first matching item\n   *                         or undefined when there is no match\n   */\n  function findInArray(arr, test) {\n    for (let i = 0; i < arr.length; i++) {\n      if (test(arr[i])) {\n        return arr[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Flat map the result invoking a callback for every item in an array.\n   * https://gist.github.com/samgiles/762ee337dff48623e729\n   * @param {Array} arr\n   * @param {function} callback\n   * @return {Array}\n   */\n  function flatMap(arr, callback) {\n    return Array.prototype.concat.apply([], arr.map(callback));\n  }\n\n  /**\n   * Create a reference callback to one or multiple signatures\n   *\n   * Syntax:\n   *\n   *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n   *       // ...\n   *     })\n   *\n   * @returns {{referTo: {references: string[], callback}}}\n   */\n  function referTo() {\n    const references = initial(arguments).map(s => stringifyParams(parseSignature(s)));\n    const callback = last(arguments);\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as last argument');\n    }\n    return makeReferTo(references, callback);\n  }\n  function makeReferTo(references, callback) {\n    return {\n      referTo: {\n        references,\n        callback\n      }\n    };\n  }\n\n  /**\n   * Create a reference callback to the typed-function itself\n   *\n   * @param {(self: function) => function} callback\n   * @returns {{referToSelf: { callback: function }}}\n   */\n  function referToSelf(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as first argument');\n    }\n    return {\n      referToSelf: {\n        callback\n      }\n    };\n  }\n\n  /**\n   * Test whether something is a referTo object, holding a list with reference\n   * signatures and a callback.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n  function isReferTo(objectOrFn) {\n    return objectOrFn && typeof objectOrFn.referTo === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n  }\n\n  /**\n   * Test whether something is a referToSelf object, holding a callback where\n   * to pass `self`.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n  function isReferToSelf(objectOrFn) {\n    return objectOrFn && typeof objectOrFn.referToSelf === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n  }\n\n  /**\n   * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n   * an error in case (C).\n   *\n   * @param { string | undefined } nameSoFar\n   * @param { string | undefined } newName\n   * @returns { string } updated name\n   */\n  function checkName(nameSoFar, newName) {\n    if (!nameSoFar) {\n      return newName;\n    }\n    if (newName && newName !== nameSoFar) {\n      const err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n      err.data = {\n        actual: newName,\n        expected: nameSoFar\n      };\n      throw err;\n    }\n    return nameSoFar;\n  }\n\n  /**\n   * Retrieve the implied name from an object with signature keys\n   * and function values, checking whether all value names match\n   *\n   * @param { {string: function} } obj\n   */\n  function getObjectName(obj) {\n    let name;\n    for (const key in obj) {\n      // Only pay attention to own properties, and only if their values\n      // are typed functions or functions with a signature property\n      if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n        name = checkName(name, obj[key].name);\n      }\n    }\n    return name;\n  }\n\n  /**\n   * Copy all of the signatures from the second argument into the first,\n   * which is modified by side effect, checking for conflicts\n   *\n   * @param {Object.<string, function|typed-reference>} dest\n   * @param {Object.<string, function|typed-reference>} source\n   */\n  function mergeSignatures(dest, source) {\n    let key;\n    for (key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (key in dest) {\n          if (source[key] !== dest[key]) {\n            const err = new Error('Signature \"' + key + '\" is defined twice');\n            err.data = {\n              signature: key,\n              sourceFunction: source[key],\n              destFunction: dest[key]\n            };\n            throw err;\n          }\n          // else: both signatures point to the same function, that's fine\n        }\n        dest[key] = source[key];\n      }\n    }\n  }\n  const saveTyped = typed;\n\n  /**\n   * Originally the main function was a typed function itself, but then\n   * it might not be able to generate error messages if the client\n   * replaced the type system with different names.\n   *\n   * Main entry: typed([name], functions/objects with signatures...)\n   *\n   * Assembles and returns a new typed-function from the given items\n   * that provide signatures and implementations, each of which may be\n   * * a plain object mapping (string) signatures to implementing functions,\n   * * a previously constructed typed function, or\n   * * any other single function with a string-valued property `signature`.\n    * The name of the resulting typed-function will be given by the\n   * string-valued name argument if present, or if not, by the name\n   * of any of the arguments that have one, as long as any that do are\n   * consistent with each other. If no name is specified, the name will be\n   * an empty string.\n   *\n   * @param {string} maybeName [optional]\n   * @param {(function|object)[]} signature providers\n   * @returns {typed-function}\n   */\n  typed = function (maybeName) {\n    const named = typeof maybeName === 'string';\n    const start = named ? 1 : 0;\n    let name = named ? maybeName : '';\n    const allSignatures = {};\n    for (let i = start; i < arguments.length; ++i) {\n      const item = arguments[i];\n      let theseSignatures = {};\n      let thisName;\n      if (typeof item === 'function') {\n        thisName = item.name;\n        if (typeof item.signature === 'string') {\n          // Case 1: Ordinary function with a string 'signature' property\n          theseSignatures[item.signature] = item;\n        } else if (isTypedFunction(item)) {\n          // Case 2: Existing typed function\n          theseSignatures = item.signatures;\n        }\n      } else if (isPlainObject(item)) {\n        // Case 3: Plain object, assume keys = signatures, values = functions\n        theseSignatures = item;\n        if (!named) {\n          thisName = getObjectName(item);\n        }\n      }\n      if (Object.keys(theseSignatures).length === 0) {\n        const err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n        err.data = {\n          index: i,\n          argument: item\n        };\n        throw err;\n      }\n      if (!named) {\n        name = checkName(name, thisName);\n      }\n      mergeSignatures(allSignatures, theseSignatures);\n    }\n    return createTypedFunction(name || '', allSignatures);\n  };\n  typed.create = create;\n  typed.createCount = saveTyped.createCount;\n  typed.onMismatch = _onMismatch;\n  typed.throwMismatchError = _onMismatch;\n  typed.createError = createError;\n  typed.clear = clear;\n  typed.clearConversions = clearConversions;\n  typed.addTypes = addTypes;\n  typed._findType = findType; // For unit testing only\n  typed.referTo = referTo;\n  typed.referToSelf = referToSelf;\n  typed.convert = convert;\n  typed.findSignature = findSignature;\n  typed.find = find;\n  typed.isTypedFunction = isTypedFunction;\n  typed.warnAgainstDeprecatedThis = true;\n\n  /**\n   * add a type (convenience wrapper for typed.addTypes)\n   * @param {{name: string, test: function}} type\n   * @param {boolean} [beforeObjectTest=true]\n   *                          If true, the new test will be inserted before\n   *                          the test with name 'Object' (if any), since\n   *                          tests for Object match Array and classes too.\n   */\n  typed.addType = function (type, beforeObjectTest) {\n    let before = 'any';\n    if (beforeObjectTest !== false && typeMap.has('Object')) {\n      before = 'Object';\n    }\n    typed.addTypes([type], before);\n  };\n\n  /**\n   * Verify that the ConversionDef conversion has a valid format.\n   *\n   * @param {conversionDef} conversion\n   * @return {void}\n   * @throws {TypeError|SyntaxError}\n   */\n  function _validateConversion(conversion) {\n    if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n      throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n    }\n    if (conversion.to === conversion.from) {\n      throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n    }\n  }\n\n  /**\n   * Add a conversion\n   *\n   * @param {ConversionDef} conversion\n   * @param {{override: boolean}} [options]\n   * @returns {void}\n   * @throws {TypeError}\n   */\n  typed.addConversion = function (conversion) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      override: false\n    };\n    _validateConversion(conversion);\n    const to = findType(conversion.to);\n    const existing = to.conversionsTo.find(other => other.from === conversion.from);\n    if (existing) {\n      if (options && options.override) {\n        typed.removeConversion({\n          from: existing.from,\n          to: conversion.to,\n          convert: existing.convert\n        });\n      } else {\n        throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n      }\n    }\n    to.conversionsTo.push({\n      from: conversion.from,\n      convert: conversion.convert,\n      index: nConversions++\n    });\n  };\n\n  /**\n   * Convenience wrapper to call addConversion on each conversion in a list.\n   *\n   * @param {ConversionDef[]} conversions\n   * @param {{override: boolean}} [options]\n   * @returns {void}\n   * @throws {TypeError}\n   */\n  typed.addConversions = function (conversions, options) {\n    conversions.forEach(conversion => typed.addConversion(conversion, options));\n  };\n\n  /**\n   * Remove the specified conversion. The format is the same as for\n   * addConversion, and the convert function must match or an error\n   * is thrown.\n   *\n   * @param {{from: string, to: string, convert: function}} conversion\n   * @returns {void}\n   * @throws {TypeError|SyntaxError|Error}\n   */\n  typed.removeConversion = function (conversion) {\n    _validateConversion(conversion);\n    const to = findType(conversion.to);\n    const existingConversion = findInArray(to.conversionsTo, c => c.from === conversion.from);\n    if (!existingConversion) {\n      throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n    }\n    if (existingConversion.convert !== conversion.convert) {\n      throw new Error('Conversion to remove does not match existing conversion');\n    }\n    const index = to.conversionsTo.indexOf(existingConversion);\n    to.conversionsTo.splice(index, 1);\n  };\n\n  /**\n   * Produce the specific signature that a typed function\n   * will execute on the given arguments. Here, a \"signature\" is an\n   * object with properties 'params', 'test', 'fn', and 'implementation'.\n   * This last property is a function that converts params as necessary\n   * and then calls 'fn'. Returns null if there is no matching signature.\n   * @param {typed-function} tf\n   * @param {any[]} argList\n   * @returns {{params: string, test: function, fn: function, implementation: function}}\n   */\n  typed.resolve = function (tf, argList) {\n    if (!isTypedFunction(tf)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n    const sigs = tf._typedFunctionData.signatures;\n    for (let i = 0; i < sigs.length; ++i) {\n      if (sigs[i].test(argList)) {\n        return sigs[i];\n      }\n    }\n    return null;\n  };\n  return typed;\n}\nexport default create();\n//# sourceMappingURL=typed-function.mjs.map"]},"metadata":{},"sourceType":"script"}