{"ast":null,"code":"import React from 'react';\nimport { makeAutoObservable, toJS } from 'mobx';\nimport { debounce } from 'lodash';\nimport { Base64 } from 'js-base64';\nimport { message } from 'antd';\nimport { parseHotkeysConfig, parseFormulaTemplate } from '../utils';\nimport { DEFAULT_MIN_AREA } from '../constants';\nimport { ViewMode, ReviewMode, LabelItem, LabelStyle, LabelFormat, ShapeInfoItem, AttributesMode, ValidationType, CameraLayout, NumberingMode, InstanceItemNumberingMode, ShapeFocusMode, PredictiveMode, SoloMode, MeasurerType, InspectLabelParams, ContinuousModeType } from '../types';\nimport Cursor, { getCursor } from '../../common/Cursor';\nimport { ShapeRotateMode, ShapeRotateHandleMode } from '../../common/shapes/Shape';\nimport Pixel from '../../common/shapes/Pixel';\nimport { isReviewEditable } from '../../../utils/tool-mode';\nimport { modelsReplacer } from '../../../model/runner';\nimport cache, { CacheKey } from '../utils-storage';\nimport i18n from '../locales';\nimport Message from '../components/message/Message';\nconst GRID_SIZE = 1;\nfunction parseLabelItemsFromStr(str) {\n  const items = [];\n  str.split(',').forEach(i => {\n    const item = i.trim();\n    if (Object.values(LabelItem).includes(item)) {\n      items.push(item);\n    }\n  });\n  return items;\n}\nfunction parseAuxiliaryLines(auxiliaryLinesString = '') {\n  const auxiliaryLines = {\n    top: [],\n    left: [],\n    bottom: [],\n    right: []\n  };\n  const sideReg = /^(top|left|bottom|right):/;\n  const valueReg = /(px|%)$/;\n  const percentageReg = /%$/;\n  const colorReg = /^#(([0-9]|[a-f]|[A-F]){3}|([0-9]|[a-f]|[A-F]){6})$/;\n  const auxiliaryLinesSides = auxiliaryLinesString.split(';');\n  for (let i = 0; i < auxiliaryLinesSides.length; i += 1) {\n    const sideMatch = auxiliaryLinesSides[i].match(sideReg);\n    if (sideMatch) {\n      const side = sideMatch[1];\n      const linesString = auxiliaryLinesSides[i].replace(`${side}:`, '');\n      const lines = linesString.split(',');\n      lines.forEach(line => {\n        const [positionString, colorString] = line.split(':');\n        const positionValue = Number(positionString.replace(valueReg, ''));\n        if (Number.isFinite(positionValue)) {\n          const positionType = percentageReg.test(positionString) ? 'percentage' : 'px';\n          const colorStr = colorReg.test(colorString) ? colorString : '#ffffff';\n          const color = parseInt(colorStr.substr(1), 16);\n          auxiliaryLines[side].push({\n            positionType,\n            positionValue,\n            color\n          });\n        }\n      });\n    }\n  }\n  return auxiliaryLines;\n}\n\n/**\n * store for config\n * @class\n */\nexport default class ConfigStore {\n  /**\n   * view scale in current camera\n   * @getter\n   */\n  get viewScale() {\n    const scale = this.viewScales[this.rootStore.frame.currentCamera];\n    return scale !== undefined ? scale : 1;\n  }\n\n  /**\n   * view position in current camera\n   * @getter\n   */\n  get viewPosition() {\n    const position = this.viewPositions[this.rootStore.frame.currentCamera];\n    return position || {\n      x: 0,\n      y: 0\n    };\n  }\n\n  /**\n   * hotkey map for points\n   * @getter\n   */\n  get pointHotkeyMap() {\n    const map = {};\n    Object.keys(this.hotkeyMap).forEach(key => {\n      const items = this.hotkeyMap[key].filter(i => i.affected === 'point');\n      if (items.length > 0) {\n        map[key] = items;\n      }\n    });\n    return map;\n  }\n\n  /**\n   * point attributes defined in hotkeys cofig\n   * @getter\n   */\n  get pointAttributes() {\n    const keyValuesMap = {};\n    Object.values(this.hotkeyMap).forEach(items => {\n      items.forEach(({\n        affected,\n        attributes\n      }) => {\n        if (affected === 'point') {\n          Object.keys(attributes).forEach(attrKey => {\n            if (!keyValuesMap[attrKey]) {\n              keyValuesMap[attrKey] = new Set();\n            }\n            keyValuesMap[attrKey].add(attributes[attrKey]);\n          });\n        }\n      });\n    });\n    return keyValuesMap;\n  }\n\n  /**\n   * active measurement box\n   * @getter\n   */\n  get activeMeasurementBox() {\n    return (toJS(this.measurementBoxList) || [])[this.activeMeasurementBoxIndex];\n  }\n\n  /**\n   * is there any modal opened\n   * @getter\n   */\n  get isAnyModalOpened() {\n    return this.attributesModalVisible || this.multiAttributesModalVisible || this.movingModalVisible || this.reviewModalVisible || this.rejectAllModalVisible || this.relationshipModalVisible || this.relationshipMenuVisible || this.pointAttributesModalVisible || this.frameAttributesModalVisible || this.inspectLabelModalVisible || this.commonFrameAttributesModalVisible;\n  }\n\n  /**\n   * is any shape being working\n   * @getter\n   */\n  get isWorkingOnAnyShape() {\n    return this.rootStore.shape.drawingShape || this.rootStore.shape.cuttingShape || this.rootStore.shape.splittingShape || this.rootStore.shape.appendingShape || this.rootStore.shape.updatingShape || this.rootStore.segmentation.updatingShape;\n  }\n\n  /**\n   * not allow to change layer\n   * @getter\n   */\n  get layerChangeDisabled() {\n    const {\n      drawingShape\n    } = this.rootStore.shape;\n    if (drawingShape) {\n      if (drawingShape instanceof Pixel && drawingShape.pixelsData.isEmpty) {\n        // haven't being started\n        return false;\n      }\n      return true;\n    }\n    return this.rootStore.shape.cuttingShape || this.rootStore.shape.splittingShape || this.rootStore.shape.appendingShape || this.rootStore.shape.updatingShape || this.rootStore.segmentation.updatingShape;\n  }\n  get isGridVisible() {\n    return this.canvasConfig.gridVisible;\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * add mode, true means adding active\n     */\n    this.addMode = false;\n    /**\n     * continuous mode, true means and add shapes continuously\n     */\n    this.continuousMode = false;\n    /**\n     * continuous mode type\n     */\n    this.continuousModeType = ContinuousModeType.DEFAULT;\n    /**\n     * show shape labels or not\n     */\n    this.labelMode = true;\n    /**\n     * view mode\n     */\n    this.viewMode = ViewMode.DEFAULT;\n    /**\n     * review mode\n     */\n    this.reviewMode = ReviewMode.LABELING;\n    /**\n     * preview mode\n     */\n    this.previewMode = false;\n    /**\n     * message for preview mode\n     */\n    this.previewMsg = void 0;\n    /**\n     * proxy interpolate api to new url\n     */\n    this.interpolateProxy = '';\n    /**\n     * proxy predict api to new url\n     */\n    this.predictProxy = '';\n    /**\n     * camera layout\n     */\n    this.cameraLayout = CameraLayout.COL2;\n    /**\n     * layers (empty when not multi layers)\n     */\n    this.layers = [];\n    /**\n     * visibility for each layer\n     */\n    this.layersVisible = {};\n    /**\n     * active layer index for multi layers\n     */\n    this.activeLayerIndex = 0;\n    /**\n     * current cursor\n     */\n    this.cursor = getCursor(Cursor.INHERIT);\n    /**\n     * camera view scale factor\n     */\n    this.viewScales = {};\n    /**\n     * camera view position\n     */\n    this.viewPositions = {};\n    /**\n     * whether to show current position\n     */\n    this.showCurrPosition = false;\n    /**\n     * whether cross line visible\n     */\n    this.crossLineVisible = true;\n    /**\n     * measure mode\n     */\n    this.measureMode = false;\n    /**\n     * active measurer type\n     */\n    this.measurerType = MeasurerType.DISTANCE;\n    /**\n     * hide other shapes\n     */\n    this.hideOthers = {\n      isOpen: false,\n      mode: SoloMode.INSTANCE\n    };\n    /**\n     * hide all shapes\n     */\n    this.hideAll = false;\n    /**\n     * frame attributes panel visible\n     */\n    this.frameAttributesPanelVisible = true;\n    /**\n     * instance attributes panel visible\n     */\n    this.instanceAttributesPanelVisible = true;\n    /**\n     * shape attributes panel visible\n     */\n    this.shapeAttributesPanelVisible = true;\n    /**\n     * is attributes modal visible\n     */\n    this.attributesModalVisible = false;\n    /**\n     * is multi attributes modal visible\n     */\n    this.multiAttributesModalVisible = false;\n    /**\n     * point attributes modal visible\n     */\n    this.pointAttributesModalVisible = false;\n    /**\n     * frame attributes modal visible\n     */\n    this.frameAttributesModalVisible = false;\n    /**\n     * common frame attributes modal visible\n     */\n    this.commonFrameAttributesModalVisible = false;\n    /**\n     * is moving modal visible\n     */\n    this.movingModalVisible = false;\n    /**\n     * is review modal visible\n     */\n    this.reviewModalVisible = false;\n    /**\n     * is thumbnail modal visible\n     */\n    this.thumbnailModalVisible = false;\n    /**\n     * has thumbnails and need thumbnail layer\n     */\n    this.needThumbnailLayer = false;\n    /**\n     * is reject all modal visible\n     */\n    this.rejectAllModalVisible = false;\n    /**\n     * is relationship modal visible\n     */\n    this.relationshipModalVisible = false;\n    /**\n     * is relationship menu visible\n     */\n    this.relationshipMenuVisible = false;\n    /**\n     * is context menu visible\n     */\n    this.contextMenuVisible = false;\n    /**\n     * context menu position\n     */\n    this.contextMenuPosition = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * context menu selected frames\n     */\n    this.contextMenuSelectedFrames = [];\n    /**\n     * is pixel search visible\n     */\n    this.pixelSearchVisible = false;\n    /**\n     * label items\n     */\n    this.labelItems = [LabelItem.CATEGORY, LabelItem.NUMBER, LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES, LabelItem.ITEM_NAME, LabelItem.ITEM_NUMBER, LabelItem.ITEM_ATTRIBUTE_KEYS, LabelItem.ITEM_ATTRIBUTE_VALUES];\n    /**\n     * label style\n     */\n    this.labelStyle = LabelStyle.DEFAULT;\n    /**\n     * label format\n     */\n    this.labelFormat = LabelFormat.DEFAULT;\n    /**\n     * label items for point\n     */\n    this.pointLabelItems = [LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES];\n    /**\n     * inspect label\n     */\n    this.inspectLabel = null;\n    /**\n     * default inspect label (from template)\n     */\n    this.defaultInspectLabel = {\n      fields: [],\n      extraParams: [],\n      style: {\n        fontSize: 12,\n        color: '#FFFF00'\n      }\n    };\n    /**\n     * shape info items\n     */\n    this.shapeInfoItems = [];\n    /**\n     * category description drawer 's category\n     */\n    this.descriptionDrawerCategory = void 0;\n    /**\n     * is inspect label modal visible\n     */\n    this.inspectLabelModalVisible = false;\n    /**\n     * active attributes mode\n     */\n    this.activeAttributesMode = AttributesMode.HIDE;\n    /**\n     * active attributes mode for point\n     */\n    this.activePointAttributesMode = AttributesMode.ALWAYS;\n    /**\n     * active attributes mode for relationship\n     */\n    this.activeRelationshipsMode = AttributesMode.ALWAYS;\n    /**\n     * active mode for inspect label\n     */\n    this.activeInspectLabelMode = AttributesMode.HIDE;\n    /**\n     * measurement box list\n     */\n    this.measurementBoxList = null;\n    /**\n     * active measurement box index\n     */\n    this.activeMeasurementBoxIndex = 0;\n    /**\n     * auxiliary lines\n     */\n    this.auxiliaryLines = null;\n    /**\n     * tag configuration for OCR\n     */\n    this.ocrTagGroup = null;\n    /**\n     * formula template\n     */\n    this.formulaTemplate = null;\n    /**\n     * is formula template loaded\n     */\n    this.formulaTemplateLoaded = false;\n    /**\n     * auto ocr\n     */\n    this.autoOCR = true;\n    /**\n     * is ocr sync turned on\n     */\n    this.OCRSyncOn = true;\n    /**\n     * should sync ocr (only auto sync when shape created)\n     */\n    this.shouldSyncOCR = false;\n    /**\n     * auto interpolation\n     */\n    this.autoInterpolation = true;\n    /**\n     * when autoTracking is true, instance or instanceItem don't existent in current frame, whether it needs to be displayed in the sidebar\n     */\n    this.inexistentGraphicsCardVisibility = true;\n    /**\n     * auto tracking\n     */\n    this.autoTracking = true;\n    /**\n     * model prediction\n     */\n    this.modelPrediction = false;\n    /**\n     * predictive mode\n     */\n    this.predictiveMode = PredictiveMode.SELECTED_INSTANCE;\n    /**\n     * image boundary check\n     */\n    this.boundaryCheck = false;\n    /**\n     * minimal shape area\n     */\n    this.minArea = DEFAULT_MIN_AREA;\n    /**\n     * data precision (>= 14 -> NaN)\n     */\n    this.dataPrecision = 6;\n    /**\n     * view rotatable\n     */\n    this.viewRotatable = false;\n    /**\n     * shape draggable\n     */\n    this.draggable = true;\n    /**\n     * Whether the shape can be rotated\n     */\n    this.rotatable = false;\n    /**\n     * auto snap to rectangles\n     */\n    this.autoSnap = false;\n    /**\n     * auto snap to polygon & line vertexes\n     */\n    this.autoSnapPoint = true;\n    /**\n     * numbering mode for instance\n     */\n    this.numberingMode = NumberingMode.BY_CATEGORY;\n    /**\n     * numbering mode for instance item\n     */\n    this.instanceItemNumberingMode = InstanceItemNumberingMode.BY_INSTANCE;\n    /**\n     * minify result\n     */\n    this.minify = false;\n    /**\n     * default select the first issue type\n     */\n    this.defaultIssueType = false;\n    /**\n     * validation config\n     */\n    this.validationConfig = new Map([[ValidationType.INVALID_SHAPE, true]]);\n    /**\n     * custom validation config\n     */\n    this.customValidationConfig = void 0;\n    /**\n     * skip submit check for invalid data\n     */\n    this.skipCheckForInvalidData = false;\n    /**\n     * hotkey map\n     */\n    this.hotkeyMap = {};\n    /**\n     * guide instructions\n     */\n    this.instructionsUrl = '';\n    /**\n     * Preferences\n     */\n    this.preferences = {};\n    /**\n     * Preferences default config\n     */\n    this.preferencesDefaultConfig = {\n      // The step value of the mouse zoom image\n      zoomStep: 0.1,\n      // if keep zoom for muti cameras\n      zoomTogether: false,\n      // crossline assistant switch\n      crossLineVisible: true,\n      // continuous drawing mode\n      continuousMode: false,\n      // show grid on canvas\n      // show current position\n      showCurrPosition: false,\n      // finish shapes by double click\n      dblclickFinish: true,\n      // when shape rotable is true, rotable mode\n      shapeRotateMode: ShapeRotateMode.HANDLE,\n      // when shape rotable is true, and shapeRotateMode is hanlde\n      shapeRotateHandleMode: ShapeRotateHandleMode.SELECTED,\n      // whether to zoom when switching the selected instance\n      shapeFocusMode: ShapeFocusMode.ZOOM,\n      // show shape auxiliary lines\n      showShapeAuxiliaryLines: true,\n      // show pixel shape bounds\n      showPixelShapeBounds: true,\n      // auto open attributes modal\n      autoOpenAttributesModal: true,\n      // auto snap tolerance (for rectangles)\n      autoSnapTolerance: 8\n    };\n    this.catchPreferencesDebounce = debounce(() => {\n      cache.set(CacheKey.PREFERENCES, this.preferences);\n    }, 1000);\n    this.canvasConfig = {\n      gridVisible: false,\n      gap: GRID_SIZE\n    };\n    this.defaultCanvasConfig = {\n      gridVisible: false,\n      gap: GRID_SIZE\n    };\n    this.canvasConfigEffectiveImmediately = ({\n      gridVisible,\n      gap\n    }) => {\n      const {\n        cameraViews\n      } = this.rootStore.frame;\n      Object.values(cameraViews).forEach(cameraView => {\n        if (gridVisible !== undefined) {\n          cameraView.setShowGrid(!!gridVisible);\n        }\n        if (gap !== undefined) {\n          cameraView.updateGridSize(gap);\n        }\n      });\n    };\n    this.initCanvasConfig = () => {\n      const canvasConfigCached = cache.get(CacheKey.CANVAS_GRID);\n      if (canvasConfigCached) {\n        const {\n          gap\n        } = canvasConfigCached;\n        this.canvasConfig = {\n          ...canvasConfigCached,\n          gap: Math.max(1, gap)\n        };\n        return;\n      }\n      this.canvasConfig = {\n        ...this.defaultCanvasConfig\n      };\n    };\n    this.resetCanvasConfig = () => {\n      this.updateCanvasConfig(this.defaultCanvasConfig);\n    };\n    this.updateCanvasConfig = ({\n      gridVisible,\n      gap\n    }) => {\n      const config = {\n        ...this.canvasConfig\n      };\n      if (gridVisible !== undefined) {\n        config.gridVisible = gridVisible;\n      }\n      if (gap !== undefined) {\n        config.gap = gap;\n      }\n      this.canvasConfig = {\n        ...config\n      };\n      this.canvasConfigEffectiveImmediately({\n        gridVisible,\n        gap\n      });\n      cache.set(CacheKey.CANVAS_GRID, config);\n    };\n    makeAutoObservable(this, {\n      rootStore: false,\n      previewMsg: false,\n      OCRSyncOn: false,\n      shouldSyncOCR: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload) {\n    // set default review mode\n    this.reviewMode = isReviewEditable(payload.jobProxy.toolMode) ? ReviewMode.REVIEW : ReviewMode.LABELING;\n\n    // set interpolate proxy\n    if (typeof payload.interpolate_proxy === 'string' && payload.interpolate_proxy) {\n      this.interpolateProxy = payload.interpolate_proxy;\n    }\n    // set predict proxy\n    if (typeof payload.predict_proxy === 'string' && payload.predict_proxy) {\n      this.predictProxy = payload.predict_proxy;\n    }\n\n    // set camera layout\n    if (Object.values(CameraLayout).includes(payload.camera_layout)) {\n      this.cameraLayout = payload.camera_layout;\n    }\n\n    // set layers\n    if (typeof payload.layers === 'string' && payload.layers) {\n      const layers = payload.layers.split(',').map(l => l.trim()).filter(l => !!l);\n      if (layers.length > 0) {\n        // multi layers\n        this.layers = layers;\n        this.layers.forEach((_, i) => {\n          this.layersVisible[i] = true;\n        });\n      }\n    }\n\n    // parse shape label mode\n    const localAttributesMode = cache.get(CacheKey.ATTRIBUTES_MODE);\n    if ((localAttributesMode === null || localAttributesMode === void 0 ? void 0 : localAttributesMode.shape) && Object.values(AttributesMode).includes(localAttributesMode.shape)) {\n      this.activeAttributesMode = localAttributesMode.shape;\n    } else if (Object.values(AttributesMode).includes(payload.label_mode)) {\n      this.activeAttributesMode = payload.label_mode;\n    }\n\n    // parse point label mode\n    if ((localAttributesMode === null || localAttributesMode === void 0 ? void 0 : localAttributesMode.point) && Object.values(AttributesMode).includes(localAttributesMode.point)) {\n      this.activePointAttributesMode = localAttributesMode.point;\n    } else if (Object.values(AttributesMode).includes(payload.point_label_mode)) {\n      this.activePointAttributesMode = payload.point_label_mode;\n    }\n\n    // parse relationship label mode\n    if ((localAttributesMode === null || localAttributesMode === void 0 ? void 0 : localAttributesMode.relationship) && Object.values(AttributesMode).includes(localAttributesMode.relationship)) {\n      this.activeRelationshipsMode = localAttributesMode.relationship;\n    } else if (Object.values(AttributesMode).includes(payload.relationship_mode)) {\n      this.activeRelationshipsMode = payload.relationship_mode;\n    }\n\n    // parse inspect label mode\n    if ((localAttributesMode === null || localAttributesMode === void 0 ? void 0 : localAttributesMode.inspectLabel) && Object.values(AttributesMode).includes(localAttributesMode.inspectLabel)) {\n      this.activeInspectLabelMode = localAttributesMode.inspectLabel;\n    }\n\n    // parse numbering mode\n    if (Object.values(NumberingMode).includes(payload.numbering_mode)) {\n      this.numberingMode = payload.numbering_mode;\n    }\n    // parse numbering mode for instance item\n    if (Object.values(InstanceItemNumberingMode).includes(payload.numbering_mode_item)) {\n      this.instanceItemNumberingMode = payload.numbering_mode_item;\n    }\n    // parse label style\n    if (Object.values(LabelStyle).includes(payload.label_style)) {\n      this.labelStyle = payload.label_style;\n    }\n    // parse label format\n    if (Object.values(LabelFormat).includes(payload.label_format)) {\n      this.labelFormat = payload.label_format;\n    }\n    // parse label items\n    if (typeof payload.label_item === 'string' && payload.label_item) {\n      this.labelItems = parseLabelItemsFromStr(payload.label_item);\n    }\n    // parse point label items\n    if (typeof payload.point_label_item === 'string' && payload.point_label_item) {\n      this.pointLabelItems = parseLabelItemsFromStr(payload.point_label_item);\n    }\n    // parse shape info items\n    if (typeof payload.shape_info_item === 'string' && payload.shape_info_item) {\n      const items = [];\n      payload.shape_info_item.split(',').forEach(i => {\n        const item = i.trim();\n        if (Object.values(ShapeInfoItem).includes(item)) {\n          items.push(item);\n        }\n      });\n      this.shapeInfoItems = items;\n    }\n\n    // parse measurement box list\n    if (typeof payload.measurement_box === 'string' && payload.measurement_box) {\n      try {\n        const list = JSON.parse(payload.measurement_box);\n        if (Array.isArray(list) && list.every(i => i.length === 2 && typeof i[0] === 'number' && typeof i[1] === 'number')) {\n          this.measurementBoxList = list;\n        }\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse auxiliary lines\n    const auxiliaryLines = parseAuxiliaryLines(payload.auxiliary_lines);\n    if (Object.values(auxiliaryLines).flat().length > 0) {\n      // has config\n      this.auxiliaryLines = auxiliaryLines;\n    }\n\n    // parse ocr tag group\n    if (typeof payload.ocr_tag_group === 'string' && payload.ocr_tag_group) {\n      try {\n        this.ocrTagGroup = JSON.parse(Base64.decode(payload.ocr_tag_group));\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse formula template\n    parseFormulaTemplate(payload.formula_template).then(template => {\n      this.formulaTemplate = template;\n      this.formulaTemplateLoaded = true;\n    });\n\n    // parse auto ocr\n    this.autoOCR = payload.auto_ocr !== 'false' && payload.auto_ocr !== false;\n\n    // parse auto interpolation\n    this.autoInterpolation = payload.auto_interpolation !== 'false' && payload.auto_interpolation !== false;\n\n    // parse auto tracking\n    this.autoTracking = payload.auto_tracking !== 'false' && payload.auto_tracking !== false;\n    if (!this.autoTracking) {\n      // always not interpolate when not tracking\n      this.autoInterpolation = false;\n    }\n\n    // parse model prediction\n    this.modelPrediction = payload.model_prediction === 'true' || payload.model_prediction === true;\n\n    // parse predictive mode\n    const localPredictiveMode = cache.get(CacheKey.PREDICTIVE_MODE);\n    if ((localPredictiveMode === null || localPredictiveMode === void 0 ? void 0 : localPredictiveMode.predictiveMode) && Object.values(PredictiveMode).includes(localPredictiveMode.predictiveMode)) {\n      this.predictiveMode = localPredictiveMode.predictiveMode;\n    } else if (Object.values(PredictiveMode).includes(payload.predictive_mode)) {\n      this.predictiveMode = payload.predictive_mode;\n    }\n    if (!this.predictiveMode) {\n      this.predictiveMode = PredictiveMode.SELECTED_INSTANCE;\n    }\n\n    // parse boundary check\n    this.boundaryCheck = payload.boundary_check === 'true' || payload.boundary_check === true;\n    if (this.boundaryCheck) {\n      this.validationConfig.set(ValidationType.OUT_OF_BOUNDARY, true);\n    }\n\n    // parse min area\n    if (payload.min_area !== undefined && payload.min_area !== '') {\n      const minArea = Number(payload.min_area);\n      if (!Number.isNaN(minArea) && minArea >= 0) {\n        this.minArea = minArea;\n        this.validationConfig.set(ValidationType.MIN_AREA, payload.min_area_submit !== 'false' && payload.min_area_submit !== false);\n      }\n    }\n\n    // parse data precision\n    if (payload.data_precision !== undefined && payload.data_precision !== '') {\n      const precision = Number(payload.data_precision);\n      if (Number.isInteger(precision) && precision >= 0 || Number.isNaN(precision)) {\n        // use NaN when precision exceeds system precision\n        this.dataPrecision = precision >= 14 ? NaN : precision;\n      }\n    }\n\n    // parse view rotatable\n    this.viewRotatable = payload.view_rotatable === 'true' || payload.view_rotatable === true;\n\n    // parse draggable\n    this.draggable = payload.draggable !== 'false' && payload.draggable !== false;\n\n    // parse rotatable\n    this.rotatable = payload.rotatable === 'true' || payload.rotatable === true;\n\n    // parse auto snap\n    this.autoSnap = payload.auto_snap === 'true' || payload.auto_snap === true;\n\n    // parse auto snap point\n    this.autoSnapPoint = payload.auto_snap_point !== 'false' && payload.auto_snap_point !== false;\n\n    // parse submit check config\n    const submitCheck = payload.submit_check !== 'false' && payload.submit_check !== false;\n\n    // parse custom check\n    if (typeof payload.custom_check === 'string' && payload.custom_check) {\n      const scriptIds = payload.custom_check.split(',').map(i => i.trim()).filter(i => !!i);\n      if (scriptIds.length > 0) {\n        this.validationConfig.set(ValidationType.CUSTOM, submitCheck);\n        this.customValidationConfig = scriptIds;\n      }\n    }\n\n    // parse script check\n    if (payload.script_check === 'true' || payload.script_check === true) {\n      this.validationConfig.set(ValidationType.SCRIPT, submitCheck);\n    }\n\n    // parse skip check for invalid data\n    this.skipCheckForInvalidData = payload.skip_check_for_invalid_data === 'true' || payload.skip_check_for_invalid_data === true;\n\n    // parse empty area check\n    if (payload.empty_area_check === 'true' || payload.empty_area_check === true) {\n      this.validationConfig.set(ValidationType.EMPTY_AREA, false);\n    }\n\n    // parse fully covered check\n    if (payload.fully_covered_check === 'true' || payload.fully_covered_check === true) {\n      this.validationConfig.set(ValidationType.FULLY_COVERED, false);\n    }\n    if (payload.item_count_check !== 'false' && payload.item_count_check !== false) {\n      this.validationConfig.set(ValidationType.ITEM_COUNT, payload.item_count_check_submit !== 'false' && payload.item_count_check_submit !== false);\n    }\n    if (payload.attr_valid_check !== 'false' && payload.attr_valid_check !== false) {\n      this.validationConfig.set(ValidationType.ATTR_VALID, payload.attr_valid_check_submit !== 'false' && payload.attr_valid_check_submit !== false);\n    }\n    if (payload.frame_attr_valid_check !== 'false' && payload.frame_attr_valid_check !== false) {\n      this.validationConfig.set(ValidationType.FRAME_ATTR_VALID, payload.frame_attr_valid_check_submit !== 'false' && payload.frame_attr_valid_check_submit !== false);\n    }\n    if (payload.frame_common_attr_valid_check !== 'false' && payload.frame_common_attr_valid_check !== false) {\n      this.validationConfig.set(ValidationType.FRAME_COMMON_ATTR_VALID, payload.frame_common_attr_valid_check_submit !== 'false' && payload.frame_common_attr_valid_check_submit !== false);\n    }\n\n    // parse frame valid annotate check\n    if (payload.frame_valid_annotate_check === 'true' || payload.frame_valid_annotate_check === true) {\n      this.validationConfig.set(ValidationType.FRAME_VALID_ANNOTATE, payload.frame_valid_annotate_check_submit !== 'false' && payload.frame_valid_annotate_check_submit !== false);\n    }\n\n    // parse frame common valid annotate check\n    if (payload.frame_common_valid_annotate_check === 'true' || payload.frame_common_valid_annotate_check === true) {\n      this.validationConfig.set(ValidationType.FRAME_COMMON_VALID_ANNOTATE, payload.frame_common_valid_annotate_check_submit !== 'false' && payload.frame_common_valid_annotate_check_submit !== false);\n    }\n    if (payload.keypoints_finish_check !== 'false' && payload.keypoints_finish_check !== false) {\n      this.validationConfig.set(ValidationType.KEYPOINTS_FINISH, payload.keypoints_finish_check_submit !== 'false' && payload.keypoints_finish_check_submit !== false);\n    }\n\n    // parse hotkeys\n    if (payload.hotkeys && !this.rootStore.ontology.pointLabelConfigEnabled) {\n      try {\n        const config = JSON.parse(Base64.decode(payload.hotkeys));\n        this.hotkeyMap = parseHotkeysConfig(config);\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse minify\n    this.minify = payload.minify === 'true' || payload.minify === true;\n\n    // parse default issue type\n    this.defaultIssueType = payload.default_issue_type === 'true' || payload.default_issue_type === true;\n    if (payload.instructions_url) {\n      this.instructionsUrl = payload.instructions_url;\n    }\n\n    // replace model urls\n    if (payload.model_urls) {\n      modelsReplacer(payload.model_urls);\n    }\n    if (payload.grid_gap !== undefined && payload.grid_gap !== '') {\n      this.defaultCanvasConfig.gap = Math.max(Number(payload.grid_gap), 1) || GRID_SIZE;\n      this.defaultCanvasConfig.gridVisible = true;\n    }\n\n    // shape label visibility\n    this.initLabelMode(payload.shape_label_visibility);\n    this.initInspectLabel(payload.inspect_label);\n    this.initMeasurementBox();\n    this.initCameraLayout();\n    this.initPreferences();\n    this.initInexistentGraphicsCardVisibility();\n    this.initCanvasConfig();\n  }\n  /**\n   * set add mode\n   * @param addMode\n   * @param shouldPredict\n   */\n  setAddMode(addMode, shouldPredict = true) {\n    if (this.rootStore.readonly || this.isAnyModalOpened || !this.rootStore.ontology.selectedCategory || this.rootStore.config.viewMode === ViewMode.GRID) {\n      return;\n    }\n    this.addMode = addMode;\n    // close category context menu\n    this.setContextMenuVisible(false);\n    // exit measure mode\n    this.setMeasureMode(false);\n    // cancel shape working status\n    this.rootStore.cancelShapeWorking();\n    // change cursor\n    this.setCursor(addMode ? Cursor.CROSSHAIR : Cursor.DEFAULT);\n    // change other shapes interactive\n    this.rootStore.shape.updateShapesInteractive(!addMode);\n    // change connections interactive\n    this.rootStore.relationship.updateConnectionsInteractive(!addMode);\n    // remove drawing shape if needed\n    if (!addMode && this.rootStore.shape.drawingShape) {\n      this.rootStore.shape.drawingShape.destroy();\n      this.rootStore.shape.drawingShape = null;\n    }\n    // reset recognition\n    this.rootStore.shape.resetRecognition();\n    // hide or show predict shape\n    if (addMode) {\n      this.rootStore.shape.clearPredictedShapes();\n      this.rootStore.shape.startCreateShape();\n      this.setHideAll(false);\n    } else {\n      if (shouldPredict) {\n        // only repredict when frame not change\n        this.rootStore.shape.predict();\n      }\n      this.rootStore.shape.creatingShapeColor = '';\n      this.rootStore.shape.selectedPointIndex = -1;\n    }\n  }\n  setPredictiveMode(mode) {\n    this.predictiveMode = mode;\n    this.rootStore.shape.predict();\n    cache.set(CacheKey.PREDICTIVE_MODE, {\n      predictiveMode: mode\n    });\n  }\n\n  /**\n   * set label mode\n   * @param labelMode\n   */\n  setLabelMode(labelMode) {\n    if (this.labelMode !== labelMode) {\n      this.labelMode = labelMode;\n      cache.set(CacheKey.LABEL_MODE, labelMode);\n      if (this.viewMode === ViewMode.GRID) {\n        this.rootStore.grid.updateLabelMode(labelMode);\n      }\n      setTimeout(() => {\n        this.rootStore.relationship.setupConnections();\n      }, 0);\n    }\n  }\n\n  /**\n   * set view mode\n   * @param viewMode\n   */\n  setViewMode(viewMode) {\n    if (!this.rootStore.initialized) {\n      return;\n    }\n    if (this.viewMode !== viewMode) {\n      this.rootStore.cancelShapeWorking();\n      this.rootStore.instance.exitReorganizeMode();\n      this.setAddMode(false);\n      this.viewMode = viewMode;\n      if (viewMode === ViewMode.DEFAULT) {\n        // reset camera\n        const {\n          currentCameraView,\n          updateCameraLayers\n        } = this.rootStore.frame;\n        if (currentCameraView) {\n          updateCameraLayers(currentCameraView);\n        }\n        this.rootStore.shape.updateShapesInteractive(true);\n        this.rootStore.review.setupReviewAnchors();\n      } else if (viewMode === ViewMode.GRID) {\n        this.rootStore.shape.updateShapesInteractive(false);\n        this.rootStore.review.clearAnchors();\n      }\n      if (this.pixelSearchVisible) {\n        var _this$rootStore$frame;\n        this.setPixelSearchVisible(false);\n        (_this$rootStore$frame = this.rootStore.frame.currentCameraView) === null || _this$rootStore$frame === void 0 ? void 0 : _this$rootStore$frame.removePixelMark();\n      }\n    }\n  }\n\n  /**\n   * set review mode\n   * @param reviewMode\n   */\n  setReviewMode(reviewMode) {\n    if (this.reviewMode !== reviewMode) {\n      this.setAddMode(false);\n      this.reviewMode = reviewMode;\n      this.rootStore.review.unselectReview();\n      if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        this.rootStore.shape.updateShapesEditable(reviewMode === ReviewMode.LABELING);\n        this.rootStore.shape.predict();\n      } else {\n        this.rootStore.grid.updateShapesEditable(reviewMode === ReviewMode.LABELING);\n      }\n      this.rootStore.relationship.updateConnectionsInteractive(reviewMode === ReviewMode.LABELING);\n    }\n  }\n\n  /**\n   * set preview mode\n   * @param previewMode\n   */\n  setPreviewMode(previewMode) {\n    if (this.isAnyModalOpened || this.viewMode === ViewMode.GRID) {\n      return;\n    }\n\n    // cancel add & update\n    this.setAddMode(false);\n    this.rootStore.cancelShapeWorking();\n    this.rootStore.review.setAddMode(false);\n\n    // unselect shapes\n    this.rootStore.instance.selectInstanceItem(null);\n    this.rootStore.instance.selectInstance(null);\n    this.previewMode = previewMode;\n    this.rootStore.frame.updatePreviewMode();\n    if (this.previewMsg) {\n      this.previewMsg();\n    }\n    if (previewMode) {\n      this.previewMsg = message.open({\n        content: React.createElement(Message, {\n          message: i18n.translate('PREVIEW_MODE_TIP'),\n          btn: i18n.translate('PREVIEW_MODE_CLOSE'),\n          onBtnClick: () => this.setPreviewMode(false)\n        }),\n        duration: 0,\n        icon: null,\n        className: 'mode-message'\n      });\n    }\n  }\n\n  /**\n   * set camera layout\n   * @param layout\n   */\n  setCameraLayout(layout) {\n    this.cameraLayout = layout;\n    cache.set(CacheKey.CAMERA_LAYOUT, layout);\n  }\n\n  /**\n   * set active layer index\n   * @param index\n   */\n  setActiveLayerIndex(index) {\n    if (this.layerChangeDisabled) {\n      return;\n    }\n    const layersCount = this.layers.length;\n    if (layersCount > 0 && index < layersCount && index >= 0) {\n      // only for multi layers cases\n      this.activeLayerIndex = index;\n      this.rootStore.frame.updateActiveLayerIndexInAllCameras();\n      if (this.rootStore.shape.drawingShape instanceof Pixel) {\n        this.rootStore.shape.cancelCreateShape();\n        this.rootStore.shape.startCreateShape();\n      }\n    }\n  }\n\n  /**\n   * @param layer\n   * @param visible\n   */\n  setLayerVisibility(layer, visible) {\n    if (this.layersVisible[layer] !== undefined) {\n      this.layersVisible[layer] = visible;\n      this.rootStore.shape.hideOrShowOthers();\n    }\n  }\n\n  /**\n   * set cursor\n   * @param cursor\n   */\n  setCursor(cursor) {\n    this.cursor = getCursor(cursor);\n  }\n\n  /**\n   * set view scale\n   * @param viewScale\n   * @param camera\n   */\n  setViewScale(viewScale, camera = this.rootStore.frame.currentCamera) {\n    this.viewScales[camera] = viewScale;\n    this.rootStore.review.updateAnchorsScale(viewScale, camera);\n    this.rootStore.thumbnail.updateAnchorsScale(viewScale);\n    this.rootStore.validation.redrawCheckLayerByCamera(camera);\n    this.rootStore.frame.drawNIFTIViews();\n    if (camera === this.rootStore.frame.currentCamera && this.rootStore.shape.shapesResizer) {\n      this.rootStore.shape.shapesResizer.scale = viewScale;\n    }\n    if (this.preferences.zoomTogether && camera === this.rootStore.frame.currentCamera) {\n      Object.values(this.rootStore.frame.cameraViews).forEach(cameraView => {\n        if (cameraView.id !== camera && cameraView.viewScale !== viewScale) {\n          cameraView.viewScale = viewScale;\n        }\n      });\n    }\n  }\n\n  /**\n   * set view position\n   * @param position\n   * @param camera\n   */\n  setViewPosition(position, camera = this.rootStore.frame.currentCamera) {\n    this.viewPositions[camera] = {\n      ...position\n    };\n    this.rootStore.shape.redrawShapesLabel();\n    this.rootStore.frame.drawNIFTIViews();\n    if (this.preferences.zoomTogether && camera === this.rootStore.frame.currentCamera) {\n      Object.values(this.rootStore.frame.cameraViews).forEach(cameraView => {\n        if (cameraView.id !== camera) {\n          const p = cameraView.getStagePosition();\n          if (p.x !== position.x || p.y !== position.y) {\n            cameraView.setStagePosition(position.x, position.y);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * set show current position\n   * @param showCurrPosition\n   */\n  setShowCurrPosition(showCurrPosition) {\n    this.showCurrPosition = showCurrPosition;\n  }\n\n  /**\n   * set shape rotate mode\n   * @param mode\n   */\n  setShapeRotateMode(mode) {\n    this.preferences.shapeRotateMode = mode;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateShapesRotateMode(mode);\n    } else {\n      this.rootStore.grid.updateShapesRotateMode(mode);\n    }\n  }\n\n  /**\n   * set rotate handle mode when shape rotate mode is handle\n   * @param mode\n   */\n  setShapeRotateHandleMode(mode) {\n    if (this.preferences.shapeRotateMode === ShapeRotateMode.HANDLE) {\n      this.preferences.shapeRotateHandleMode = mode;\n      if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        this.rootStore.shape.updateShapesRotateHandleMode(mode);\n      } else {\n        this.rootStore.grid.updateShapesRotateHandleMode(mode);\n      }\n    }\n  }\n\n  /**\n   * set show shape auxiliary lines\n   * @param showShapeAuxiliaryLines\n   */\n  setShowShapeAuxiliaryLines(showShapeAuxiliaryLines) {\n    this.preferences.showShapeAuxiliaryLines = showShapeAuxiliaryLines;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateShapesShowAuxiliaryLines(showShapeAuxiliaryLines);\n    } else {\n      this.rootStore.grid.updateShapesShowAuxiliaryLines(showShapeAuxiliaryLines);\n    }\n  }\n\n  /**\n   * set show pixel shape bounds\n   * @param showPixelShapeBounds\n   */\n  setShowPixelShapeBounds(showPixelShapeBounds) {\n    this.preferences.showPixelShapeBounds = showPixelShapeBounds;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updatePixelShapesShowBounds(showPixelShapeBounds);\n    } else {\n      this.rootStore.grid.updatePixelShapesShowBounds(showPixelShapeBounds);\n    }\n  }\n\n  /**\n   * set double click finish\n   * @param dblclickFinish\n   */\n  setDoubleClickFinish(dblclickFinish) {\n    this.preferences.dblclickFinish = dblclickFinish;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateShapesDoubleClickFinish(dblclickFinish);\n    } else {\n      this.rootStore.grid.updateShapesDoubleClickFinish(dblclickFinish);\n    }\n  }\n\n  /**\n   * set auto snap tolerance\n   * @param tolerance\n   */\n  setAutoSnapTolerance(tolerance) {\n    this.preferences.autoSnapTolerance = tolerance;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateRectangleShapesAutoSnapTolerance(tolerance);\n    } else {\n      this.rootStore.grid.updateRectangleShapesAutoSnapTolerance(tolerance);\n    }\n  }\n\n  /**\n   * set cross line visible\n   * @param visible\n   */\n  setCrossLineVisible(visible) {\n    this.crossLineVisible = visible;\n  }\n\n  /**\n   * set continuous mode\n   * @param continuousMode\n   */\n  setContinuousMode(continuousMode) {\n    this.continuousMode = continuousMode;\n  }\n\n  /**\n   * set continuous mode type\n   * @param type\n   */\n  setContinuousModeType(type) {\n    this.continuousModeType = type;\n  }\n\n  /**\n   * set measure mode\n   * @param measureMode\n   */\n  setMeasureMode(measureMode) {\n    const changed = this.measureMode !== measureMode;\n    this.measureMode = measureMode;\n    if (changed) {\n      this.setCursor(this.measureMode ? Cursor.CROSSHAIR : Cursor.DEFAULT);\n      Object.values(this.rootStore.frame.cameraViews).forEach(cameraView => {\n        cameraView.measurerType = this.measureMode ? this.measurerType : null;\n      });\n      this.rootStore.shape.updateShapesInteractive(!this.measureMode);\n    }\n  }\n\n  /**\n   * set measurer type\n   * @param type\n   */\n  setMeasurerType(type) {\n    this.measurerType = type;\n    if (this.measureMode) {\n      Object.values(this.rootStore.frame.cameraViews).forEach(cameraView => {\n        cameraView.measurerType = type;\n      });\n    }\n  }\n\n  /**\n   * set hide others\n   * @param hideOthers\n   */\n  setHideOthers(hideOthers) {\n    this.hideOthers = {\n      ...this.hideOthers,\n      ...hideOthers\n    };\n    this.rootStore.shape.hideOrShowOthers();\n  }\n\n  /**\n   * set hide all\n   * @param hideAll\n   */\n  setHideAll(hideAll) {\n    this.hideAll = hideAll;\n    this.rootStore.shape.hideOrShowOthers();\n  }\n\n  /**\n   * set frame attributes panel visibility\n   * @param visible\n   */\n  setFrameAttributesPanelVisible(visible) {\n    this.frameAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set instance attributes panel visibility\n   * @param visible\n   */\n  setInstanceAttributesPanelVisible(visible) {\n    this.instanceAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set shape attributes panel visibility\n   * @param visible\n   */\n  setShapeAttributesPanelVisible(visible) {\n    this.shapeAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set attributes modal visibility\n   * @param visible\n   */\n  setAttributesModalVisible(visible) {\n    this.attributesModalVisible = visible;\n  }\n\n  /**\n   * set multi attributes modal visibility\n   * @param visible\n   */\n  setMultiAttributesModalVisible(visible) {\n    this.multiAttributesModalVisible = visible;\n  }\n\n  /**\n   * set moving modal visibility\n   * @param visible\n   */\n  setMovingModalVisible(visible) {\n    this.movingModalVisible = visible;\n  }\n\n  /**\n   * set review modal visibility\n   * @param visible\n   */\n  setReviewModalVisible(visible) {\n    this.reviewModalVisible = visible;\n  }\n\n  /**\n   * set review modal visibility\n   * @param visible\n   */\n  setThumbnailModalVisible(visible) {\n    this.thumbnailModalVisible = visible;\n  }\n\n  /**\n   * set need thumbnailLayer\n   * @param visible\n   */\n  setNeedThumbnailLayer(value) {\n    this.needThumbnailLayer = value;\n  }\n\n  /**\n   * set reject all modal visibility\n   * @param visible\n   */\n  setRejectAllModalVisible(visible) {\n    this.rejectAllModalVisible = visible;\n  }\n\n  /**\n   * set relationship modal visibility\n   * @param visible\n   */\n  setRelationshipModalVisible(visible) {\n    this.relationshipModalVisible = visible;\n  }\n\n  /**\n   * set relationship menu visibility\n   * @param visible\n   */\n  setRelationshipMenuVisible(visible) {\n    this.relationshipMenuVisible = visible;\n  }\n\n  /**\n   * set context menu visible\n   * @param visible\n   * @param position\n   * @param selectedFrames\n   */\n  setContextMenuVisible(visible, position, selectedFrames) {\n    if (position) {\n      this.contextMenuPosition.x = position.x;\n      this.contextMenuPosition.y = position.y;\n    }\n    this.contextMenuVisible = visible;\n    this.contextMenuSelectedFrames = visible && selectedFrames ? selectedFrames : [];\n  }\n\n  /**\n   * set pixel search visible\n   * @param visible\n   */\n  setPixelSearchVisible(visible) {\n    this.pixelSearchVisible = visible;\n  }\n\n  /**\n   * set point attributes modal visibility\n   * @param visible\n   */\n  setPointAttributesModalVisible(visible) {\n    this.pointAttributesModalVisible = visible;\n  }\n\n  /**\n   * set frame attributes modal visibility\n   * @param visible\n   */\n  setFrameAttributesModalVisible(visible) {\n    this.frameAttributesModalVisible = visible;\n  }\n\n  /**\n   * set common frame attributes modal visibility\n   * @param visible\n   */\n  setCommonFrameAttributesModalVisible(visible) {\n    this.commonFrameAttributesModalVisible = visible;\n  }\n\n  /**\n   * set inspect label modal visibility\n   * @param visible\n   */\n  setInspectLabelModalVisible(visible) {\n    this.inspectLabelModalVisible = visible;\n  }\n  setDescriptionDrawerCategory(category) {\n    this.descriptionDrawerCategory = category;\n  }\n\n  /**\n   * set active attributes mode\n   * @param activeMode\n   * @param type point or shape\n   */\n  setAttributesMode(activeMode, type = 'shape') {\n    switch (type) {\n      case 'point':\n        {\n          this.activePointAttributesMode = activeMode;\n          this.rootStore.shape.updateShapesUserDataMode(activeMode);\n          break;\n        }\n      case 'shape':\n        {\n          this.activeAttributesMode = activeMode;\n          break;\n        }\n      case 'relationship':\n        {\n          this.activeRelationshipsMode = activeMode;\n          this.rootStore.relationship.updateConnectionsVisible(activeMode === AttributesMode.ALWAYS);\n          break;\n        }\n      case 'inspectLabel':\n        {\n          this.activeInspectLabelMode = activeMode;\n          break;\n        }\n      default:\n        break;\n    }\n    cache.set(CacheKey.ATTRIBUTES_MODE, {\n      point: this.activePointAttributesMode,\n      shape: this.activeAttributesMode,\n      relationship: this.activeRelationshipsMode,\n      inspectLabel: this.activeInspectLabelMode\n    });\n  }\n  initLabelMode(payloadValue) {\n    const localLabelMode = cache.get(CacheKey.LABEL_MODE);\n    let labelMode;\n    if (localLabelMode !== undefined) {\n      labelMode = localLabelMode;\n    } else {\n      labelMode = payloadValue !== 'false' && payloadValue !== false;\n    }\n    this.setLabelMode(labelMode);\n  }\n  initInspectLabel(payloadValue) {\n    if (typeof payloadValue === 'string' && payloadValue) {\n      // from template config\n      try {\n        var _config$style, _config$style2;\n        const config = JSON.parse(payloadValue);\n        if (Array.isArray(config === null || config === void 0 ? void 0 : config.fields) && config.fields.length > 0 || Array.isArray(config === null || config === void 0 ? void 0 : config.extraParams) && config.extraParams.length > 0) {\n          var _config$fields, _config$extraParams$f, _config$extraParams;\n          this.defaultInspectLabel.fields = (_config$fields = config === null || config === void 0 ? void 0 : config.fields) !== null && _config$fields !== void 0 ? _config$fields : [];\n          this.defaultInspectLabel.extraParams = (_config$extraParams$f = config === null || config === void 0 ? void 0 : (_config$extraParams = config.extraParams) === null || _config$extraParams === void 0 ? void 0 : _config$extraParams.filter(param => Object.values(InspectLabelParams).includes(param))) !== null && _config$extraParams$f !== void 0 ? _config$extraParams$f : [];\n          // default set attributes mode to always\n          this.setAttributesMode(AttributesMode.ALWAYS, 'inspectLabel');\n        }\n        if (config === null || config === void 0 ? void 0 : (_config$style = config.style) === null || _config$style === void 0 ? void 0 : _config$style.fontSize) {\n          this.defaultInspectLabel.style.fontSize = config.style.fontSize;\n        }\n        if (config === null || config === void 0 ? void 0 : (_config$style2 = config.style) === null || _config$style2 === void 0 ? void 0 : _config$style2.color) {\n          this.defaultInspectLabel.style.color = config.style.color;\n        }\n      } catch (e) {\n        // parse error\n      }\n    }\n    const fields = [];\n    const extraParams = [];\n    const cachedKeys = cache.get(CacheKey.INSPECT_LABEL);\n    if (Array.isArray(cachedKeys) && cachedKeys.length > 0) {\n      cachedKeys.forEach(cachedKey => {\n        if (Object.values(InspectLabelParams).includes(cachedKey)) {\n          extraParams.push(cachedKey);\n        } else {\n          fields.push(cachedKey);\n        }\n      });\n    } else {\n      fields.push(...this.defaultInspectLabel.fields);\n      extraParams.push(...this.defaultInspectLabel.extraParams);\n    }\n    if (fields.length > 0 || extraParams.length > 0) {\n      // has inspect label config\n      this.inspectLabel = {\n        fields,\n        extraParams,\n        style: {\n          ...this.defaultInspectLabel.style,\n          ...cache.get(CacheKey.INSPECT_LABEL_STYLE)\n        }\n      };\n    }\n  }\n  setInspectLabel(inspectKeys, style) {\n    const fields = [];\n    const extraParams = [];\n    inspectKeys.forEach(key => {\n      if (Object.values(InspectLabelParams).includes(key)) {\n        extraParams.push(key);\n      } else {\n        fields.push(key);\n      }\n    });\n    this.inspectLabel = {\n      fields,\n      extraParams,\n      style: {\n        ...this.defaultInspectLabel.style,\n        ...style\n      }\n    };\n    cache.set(CacheKey.INSPECT_LABEL, inspectKeys);\n    cache.set(CacheKey.INSPECT_LABEL_STYLE, this.inspectLabel.style);\n  }\n  initMeasurementBox() {\n    const originalMeasurementBox = cache.get(CacheKey.LEGACY_MEASUREMENT_BOX);\n    const measurementBox = cache.get(CacheKey.MEASUREMENT_BOX) || originalMeasurementBox || {};\n    if (originalMeasurementBox) {\n      try {\n        cache.remove(CacheKey.LEGACY_MEASUREMENT_BOX);\n      } catch (error) {\n        // console.log(error);\n      }\n    }\n    const {\n      value,\n      index\n    } = measurementBox;\n    if (index === -1) {\n      this.activeMeasurementBoxIndex = -1;\n      return;\n    }\n    if (value) {\n      const measurementBoxList = toJS(this.measurementBoxList) || [];\n      const curIndex = measurementBoxList.findIndex(item => item[0] === value[0] && item[1] === value[1]);\n      this.activeMeasurementBoxIndex = curIndex > -1 ? curIndex : 0;\n    }\n  }\n  initCameraLayout() {\n    const cameraLayout = cache.get(CacheKey.CAMERA_LAYOUT);\n    if (cameraLayout && typeof cameraLayout === 'string') {\n      const typeMap = {\n        'col-2': CameraLayout.COL2,\n        'col-3': CameraLayout.COL3,\n        thumbnail: CameraLayout.THUMBNAIL\n      };\n      if (typeMap[cameraLayout]) {\n        this.cameraLayout = typeMap[cameraLayout];\n      }\n    }\n  }\n\n  /**\n   * set measurement box indexs\n   * @param index\n   */\n  setMeasurementBoxIndex(index) {\n    this.activeMeasurementBoxIndex = index || 0;\n    const nowMeasurementBox = {\n      index: this.activeMeasurementBoxIndex,\n      value: this.activeMeasurementBox\n    };\n    cache.set(CacheKey.MEASUREMENT_BOX, nowMeasurementBox);\n  }\n\n  // immediately effective\n  preferencesEffectiveImmediately(preferences) {\n    if (Object.prototype.hasOwnProperty.call(preferences, 'zoomTogether')) {\n      this.keepViewScaleAndPosition();\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'shapeRotateMode')) {\n      this.setShapeRotateMode(preferences.shapeRotateMode || ShapeRotateMode.HANDLE);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'shapeRotateHandleMode')) {\n      this.setShapeRotateHandleMode(preferences.shapeRotateHandleMode || ShapeRotateHandleMode.SELECTED);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'showShapeAuxiliaryLines')) {\n      this.setShowShapeAuxiliaryLines(!!preferences.showShapeAuxiliaryLines);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'showPixelShapeBounds')) {\n      this.setShowPixelShapeBounds(!!preferences.showPixelShapeBounds);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'dblclickFinish')) {\n      this.setDoubleClickFinish(!!preferences.dblclickFinish);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'autoSnapTolerance')) {\n      this.setAutoSnapTolerance(preferences.autoSnapTolerance || 8);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'crossLineVisible')) {\n      this.setCrossLineVisible(!!preferences.crossLineVisible);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'continuousMode')) {\n      this.setContinuousMode(!!preferences.continuousMode);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'showCurrPosition')) {\n      this.setShowCurrPosition(!!preferences.showCurrPosition);\n    }\n  }\n  updatePreferences(preferences) {\n    this.preferences = {\n      ...this.preferencesDefaultConfig,\n      ...this.preferences,\n      ...preferences\n    };\n    // set preferences catch\n    this.catchPreferencesDebounce();\n    // immediately effective\n    this.preferencesEffectiveImmediately(preferences);\n  }\n  resetPreferences(preferences) {\n    let newPreferences = {};\n    if (!preferences || preferences.length < 1) {\n      newPreferences = {\n        ...this.preferencesDefaultConfig\n      };\n    } else {\n      for (let index = 0; index < preferences.length; index += 1) {\n        const preferenceKey = preferences[index];\n        if (Object.prototype.hasOwnProperty.call(this.preferencesDefaultConfig, preferenceKey)) {\n          newPreferences[preferenceKey] = this.preferencesDefaultConfig[preferenceKey];\n        }\n      }\n      newPreferences = {\n        ...this.preferences,\n        ...newPreferences\n      };\n    }\n    this.preferences = {\n      ...newPreferences\n    };\n    this.catchPreferencesDebounce();\n    this.preferencesEffectiveImmediately(newPreferences);\n  }\n  initPreferences() {\n    const preferences = cache.get(CacheKey.PREFERENCES) || {};\n    if (this.rotatable && !preferences.shapeRotateMode) {\n      preferences.shapeRotateMode = ShapeRotateMode.HANDLE;\n    }\n    this.updatePreferences(preferences);\n  }\n  initInexistentGraphicsCardVisibility() {\n    this.inexistentGraphicsCardVisibility = this.rootStore.frame.frameCount > 1 || cache.get(CacheKey.INEXISTENT_GRAPHICS_CARD_VISIBILITY) !== false;\n  }\n  updateInexistentGraphicsCardVisibility(visible) {\n    this.inexistentGraphicsCardVisibility = visible;\n    cache.set(CacheKey.INEXISTENT_GRAPHICS_CARD_VISIBILITY, visible);\n  }\n  keepViewScaleAndPosition() {\n    if (!this.preferences.zoomTogether) {\n      return;\n    }\n    const {\n      currentCamera,\n      cameraViews\n    } = this.rootStore.frame;\n    const viewScale = this.viewScales[currentCamera];\n    const viewPosition = this.viewPositions[currentCamera];\n    const allCameraViews = Object.values(cameraViews);\n    for (let i = 0; i < allCameraViews.length; i += 1) {\n      const cameraView = allCameraViews[i];\n      if (cameraView.id !== currentCamera) {\n        // not current camera\n        cameraView.firstLoaded = true;\n        if (cameraView.viewScale !== viewScale) {\n          cameraView.viewScale = viewScale;\n        }\n        const position = cameraView.getStagePosition();\n        if (position.x !== viewPosition.x || position.y !== viewPosition.y) {\n          cameraView.setStagePosition(viewPosition.x, viewPosition.y);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["React","makeAutoObservable","toJS","debounce","Base64","message","parseHotkeysConfig","parseFormulaTemplate","DEFAULT_MIN_AREA","ViewMode","ReviewMode","LabelItem","LabelStyle","LabelFormat","ShapeInfoItem","AttributesMode","ValidationType","CameraLayout","NumberingMode","InstanceItemNumberingMode","ShapeFocusMode","PredictiveMode","SoloMode","MeasurerType","InspectLabelParams","ContinuousModeType","Cursor","getCursor","ShapeRotateMode","ShapeRotateHandleMode","Pixel","isReviewEditable","modelsReplacer","cache","CacheKey","i18n","Message","GRID_SIZE","parseLabelItemsFromStr","str","items","split","forEach","i","item","trim","Object","values","includes","push","parseAuxiliaryLines","auxiliaryLinesString","auxiliaryLines","top","left","bottom","right","sideReg","valueReg","percentageReg","colorReg","auxiliaryLinesSides","length","sideMatch","match","side","linesString","replace","lines","line","positionString","colorString","positionValue","Number","isFinite","positionType","test","colorStr","color","parseInt","substr","ConfigStore","viewScale","scale","viewScales","rootStore","frame","currentCamera","undefined","viewPosition","position","viewPositions","x","y","pointHotkeyMap","map","keys","hotkeyMap","key","filter","affected","pointAttributes","keyValuesMap","attributes","attrKey","Set","add","activeMeasurementBox","measurementBoxList","activeMeasurementBoxIndex","isAnyModalOpened","attributesModalVisible","multiAttributesModalVisible","movingModalVisible","reviewModalVisible","rejectAllModalVisible","relationshipModalVisible","relationshipMenuVisible","pointAttributesModalVisible","frameAttributesModalVisible","inspectLabelModalVisible","commonFrameAttributesModalVisible","isWorkingOnAnyShape","shape","drawingShape","cuttingShape","splittingShape","appendingShape","updatingShape","segmentation","layerChangeDisabled","pixelsData","isEmpty","isGridVisible","canvasConfig","gridVisible","constructor","addMode","continuousMode","continuousModeType","DEFAULT","labelMode","viewMode","reviewMode","LABELING","previewMode","previewMsg","interpolateProxy","predictProxy","cameraLayout","COL2","layers","layersVisible","activeLayerIndex","cursor","INHERIT","showCurrPosition","crossLineVisible","measureMode","measurerType","DISTANCE","hideOthers","isOpen","mode","INSTANCE","hideAll","frameAttributesPanelVisible","instanceAttributesPanelVisible","shapeAttributesPanelVisible","thumbnailModalVisible","needThumbnailLayer","contextMenuVisible","contextMenuPosition","contextMenuSelectedFrames","pixelSearchVisible","labelItems","CATEGORY","NUMBER","ATTRIBUTE_KEYS","ATTRIBUTE_VALUES","ITEM_NAME","ITEM_NUMBER","ITEM_ATTRIBUTE_KEYS","ITEM_ATTRIBUTE_VALUES","labelStyle","labelFormat","pointLabelItems","inspectLabel","defaultInspectLabel","fields","extraParams","style","fontSize","shapeInfoItems","descriptionDrawerCategory","activeAttributesMode","HIDE","activePointAttributesMode","ALWAYS","activeRelationshipsMode","activeInspectLabelMode","ocrTagGroup","formulaTemplate","formulaTemplateLoaded","autoOCR","OCRSyncOn","shouldSyncOCR","autoInterpolation","inexistentGraphicsCardVisibility","autoTracking","modelPrediction","predictiveMode","SELECTED_INSTANCE","boundaryCheck","minArea","dataPrecision","viewRotatable","draggable","rotatable","autoSnap","autoSnapPoint","numberingMode","BY_CATEGORY","instanceItemNumberingMode","BY_INSTANCE","minify","defaultIssueType","validationConfig","Map","INVALID_SHAPE","customValidationConfig","skipCheckForInvalidData","instructionsUrl","preferences","preferencesDefaultConfig","zoomStep","zoomTogether","dblclickFinish","shapeRotateMode","HANDLE","shapeRotateHandleMode","SELECTED","shapeFocusMode","ZOOM","showShapeAuxiliaryLines","showPixelShapeBounds","autoOpenAttributesModal","autoSnapTolerance","catchPreferencesDebounce","set","PREFERENCES","gap","defaultCanvasConfig","canvasConfigEffectiveImmediately","cameraViews","cameraView","setShowGrid","updateGridSize","initCanvasConfig","canvasConfigCached","get","CANVAS_GRID","Math","max","resetCanvasConfig","updateCanvasConfig","config","autoBind","init","payload","jobProxy","toolMode","REVIEW","interpolate_proxy","predict_proxy","camera_layout","l","_","localAttributesMode","ATTRIBUTES_MODE","label_mode","point","point_label_mode","relationship","relationship_mode","numbering_mode","numbering_mode_item","label_style","label_format","label_item","point_label_item","shape_info_item","measurement_box","list","JSON","parse","Array","isArray","every","e","auxiliary_lines","flat","ocr_tag_group","decode","formula_template","then","template","auto_ocr","auto_interpolation","auto_tracking","model_prediction","localPredictiveMode","PREDICTIVE_MODE","predictive_mode","boundary_check","OUT_OF_BOUNDARY","min_area","isNaN","MIN_AREA","min_area_submit","data_precision","precision","isInteger","NaN","view_rotatable","auto_snap","auto_snap_point","submitCheck","submit_check","custom_check","scriptIds","CUSTOM","script_check","SCRIPT","skip_check_for_invalid_data","empty_area_check","EMPTY_AREA","fully_covered_check","FULLY_COVERED","item_count_check","ITEM_COUNT","item_count_check_submit","attr_valid_check","ATTR_VALID","attr_valid_check_submit","frame_attr_valid_check","FRAME_ATTR_VALID","frame_attr_valid_check_submit","frame_common_attr_valid_check","FRAME_COMMON_ATTR_VALID","frame_common_attr_valid_check_submit","frame_valid_annotate_check","FRAME_VALID_ANNOTATE","frame_valid_annotate_check_submit","frame_common_valid_annotate_check","FRAME_COMMON_VALID_ANNOTATE","frame_common_valid_annotate_check_submit","keypoints_finish_check","KEYPOINTS_FINISH","keypoints_finish_check_submit","hotkeys","ontology","pointLabelConfigEnabled","default_issue_type","instructions_url","model_urls","grid_gap","initLabelMode","shape_label_visibility","initInspectLabel","inspect_label","initMeasurementBox","initCameraLayout","initPreferences","initInexistentGraphicsCardVisibility","setAddMode","shouldPredict","readonly","selectedCategory","GRID","setContextMenuVisible","setMeasureMode","cancelShapeWorking","setCursor","CROSSHAIR","updateShapesInteractive","updateConnectionsInteractive","destroy","resetRecognition","clearPredictedShapes","startCreateShape","setHideAll","predict","creatingShapeColor","selectedPointIndex","setPredictiveMode","setLabelMode","LABEL_MODE","grid","updateLabelMode","setTimeout","setupConnections","setViewMode","initialized","instance","exitReorganizeMode","currentCameraView","updateCameraLayers","review","setupReviewAnchors","clearAnchors","_this$rootStore$frame","setPixelSearchVisible","removePixelMark","setReviewMode","unselectReview","updateShapesEditable","setPreviewMode","selectInstanceItem","selectInstance","updatePreviewMode","open","content","createElement","translate","btn","onBtnClick","duration","icon","className","setCameraLayout","layout","CAMERA_LAYOUT","setActiveLayerIndex","index","layersCount","updateActiveLayerIndexInAllCameras","cancelCreateShape","setLayerVisibility","layer","visible","hideOrShowOthers","setViewScale","camera","updateAnchorsScale","thumbnail","validation","redrawCheckLayerByCamera","drawNIFTIViews","shapesResizer","id","setViewPosition","redrawShapesLabel","p","getStagePosition","setStagePosition","setShowCurrPosition","setShapeRotateMode","updateShapesRotateMode","setShapeRotateHandleMode","updateShapesRotateHandleMode","setShowShapeAuxiliaryLines","updateShapesShowAuxiliaryLines","setShowPixelShapeBounds","updatePixelShapesShowBounds","setDoubleClickFinish","updateShapesDoubleClickFinish","setAutoSnapTolerance","tolerance","updateRectangleShapesAutoSnapTolerance","setCrossLineVisible","setContinuousMode","setContinuousModeType","type","changed","setMeasurerType","setHideOthers","setFrameAttributesPanelVisible","setInstanceAttributesPanelVisible","setShapeAttributesPanelVisible","setAttributesModalVisible","setMultiAttributesModalVisible","setMovingModalVisible","setReviewModalVisible","setThumbnailModalVisible","setNeedThumbnailLayer","value","setRejectAllModalVisible","setRelationshipModalVisible","setRelationshipMenuVisible","selectedFrames","setPointAttributesModalVisible","setFrameAttributesModalVisible","setCommonFrameAttributesModalVisible","setInspectLabelModalVisible","setDescriptionDrawerCategory","category","setAttributesMode","activeMode","updateShapesUserDataMode","updateConnectionsVisible","payloadValue","localLabelMode","_config$style","_config$style2","_config$fields","_config$extraParams$f","_config$extraParams","param","cachedKeys","INSPECT_LABEL","cachedKey","INSPECT_LABEL_STYLE","setInspectLabel","inspectKeys","originalMeasurementBox","LEGACY_MEASUREMENT_BOX","measurementBox","MEASUREMENT_BOX","remove","error","curIndex","findIndex","typeMap","COL3","THUMBNAIL","setMeasurementBoxIndex","nowMeasurementBox","preferencesEffectiveImmediately","prototype","hasOwnProperty","call","keepViewScaleAndPosition","updatePreferences","resetPreferences","newPreferences","preferenceKey","frameCount","INEXISTENT_GRAPHICS_CARD_VISIBILITY","updateInexistentGraphicsCardVisibility","allCameraViews","firstLoaded"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/ConfigStore.ts"],"sourcesContent":["import React from 'react';\nimport { makeAutoObservable, toJS } from 'mobx';\nimport { debounce } from 'lodash';\nimport { Base64 } from 'js-base64';\nimport { message } from 'antd';\nimport { MessageType } from 'antd/es/message';\nimport RootStore from './RootStore';\nimport { parseHotkeysConfig, parseFormulaTemplate } from '../utils';\nimport { DEFAULT_MIN_AREA } from '../constants';\nimport { Payload, ViewMode, ReviewMode, LabelItem, LabelStyle, LabelFormat, ShapeInfoItem, AttributesMode, TagGroupProps, ValidationType, HotkeyItem, AuxiliaryLines, CameraLayout, InspectLabel, FormulaTemplate, PreferencesConfig, NumberingMode, InstanceItemNumberingMode, ShapeFocusMode, PredictiveMode, SoloMode, MeasurerType, InspectLabelParams, ContinuousModeType, CanvasConfig, Category, InspectLabelStyle } from '../types';\nimport Cursor, { getCursor } from '../../common/Cursor';\nimport { UserDataMode, ShapeRotateMode, ShapeRotateHandleMode } from '../../common/shapes/Shape';\nimport Pixel from '../../common/shapes/Pixel';\nimport { isReviewEditable } from '../../../utils/tool-mode';\nimport { modelsReplacer } from '../../../model/runner';\nimport cache, { CacheKey } from '../utils-storage';\nimport i18n from '../locales';\nimport Message from '../components/message/Message';\n\nconst GRID_SIZE = 1;\n\nfunction parseLabelItemsFromStr(str: string) {\n  const items: LabelItem[] = [];\n  str.split(',').forEach((i) => {\n    const item = i.trim() as LabelItem;\n    if (Object.values(LabelItem).includes(item)) {\n      items.push(item);\n    }\n  });\n  return items;\n}\n\nfunction parseAuxiliaryLines(auxiliaryLinesString = '') {\n  const auxiliaryLines: AuxiliaryLines = { top: [], left: [], bottom: [], right: [] };\n\n  const sideReg = /^(top|left|bottom|right):/;\n  const valueReg = /(px|%)$/;\n  const percentageReg = /%$/;\n  const colorReg = /^#(([0-9]|[a-f]|[A-F]){3}|([0-9]|[a-f]|[A-F]){6})$/;\n\n  const auxiliaryLinesSides = auxiliaryLinesString.split(';');\n  for (let i = 0; i < auxiliaryLinesSides.length; i += 1) {\n    const sideMatch = auxiliaryLinesSides[i].match(sideReg);\n    if (sideMatch) {\n      const side = sideMatch[1] as ('top' | 'left' | 'bottom' | 'right');\n      const linesString = auxiliaryLinesSides[i].replace(`${side}:`, '');\n      const lines = linesString.split(',');\n      lines.forEach((line) => {\n        const [positionString, colorString] = line.split(':');\n        const positionValue = Number(positionString.replace(valueReg, ''));\n        if (Number.isFinite(positionValue)) {\n          const positionType = percentageReg.test(positionString) ? 'percentage' : 'px';\n          const colorStr = colorReg.test(colorString) ? colorString : '#ffffff';\n          const color = parseInt(colorStr.substr(1), 16);\n          auxiliaryLines[side].push({\n            positionType, positionValue, color,\n          });\n        }\n      });\n    }\n  }\n\n  return auxiliaryLines;\n}\n\n/**\n * store for config\n * @class\n */\nexport default class ConfigStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * add mode, true means adding active\n   */\n  addMode = false;\n\n  /**\n   * continuous mode, true means and add shapes continuously\n   */\n  continuousMode = false;\n\n  /**\n   * continuous mode type\n   */\n  continuousModeType = ContinuousModeType.DEFAULT;\n\n  /**\n   * show shape labels or not\n   */\n  labelMode = true;\n\n  /**\n   * view mode\n   */\n  viewMode = ViewMode.DEFAULT;\n\n  /**\n   * review mode\n   */\n  reviewMode = ReviewMode.LABELING;\n\n  /**\n   * preview mode\n   */\n  previewMode = false;\n\n  /**\n   * message for preview mode\n   */\n  previewMsg?: MessageType;\n\n  /**\n   * proxy interpolate api to new url\n   */\n  interpolateProxy = '';\n\n  /**\n   * proxy predict api to new url\n   */\n  predictProxy = '';\n\n  /**\n   * camera layout\n   */\n  cameraLayout = CameraLayout.COL2;\n\n  /**\n   * layers (empty when not multi layers)\n   */\n  layers: string[] = [];\n\n  /**\n   * visibility for each layer\n   */\n  layersVisible: Record<number, boolean> = {};\n\n  /**\n   * active layer index for multi layers\n   */\n  activeLayerIndex = 0;\n\n  /**\n   * current cursor\n   */\n  cursor = getCursor(Cursor.INHERIT);\n\n  /**\n   * camera view scale factor\n   */\n  viewScales: Record<string, number> = {};\n\n  /**\n   * camera view position\n   */\n  viewPositions: Record<string, { x: number; y: number }> = {};\n\n  /**\n   * whether to show current position\n   */\n  showCurrPosition = false;\n\n  /**\n   * whether cross line visible\n   */\n  crossLineVisible = true;\n\n  /**\n   * measure mode\n   */\n  measureMode = false;\n\n  /**\n   * active measurer type\n   */\n  measurerType = MeasurerType.DISTANCE;\n\n  /**\n   * hide other shapes\n   */\n  hideOthers = {\n    isOpen: false,\n    mode: SoloMode.INSTANCE\n  };\n\n  /**\n   * hide all shapes\n   */\n  hideAll = false;\n\n  /**\n   * frame attributes panel visible\n   */\n  frameAttributesPanelVisible = true;\n\n  /**\n   * instance attributes panel visible\n   */\n  instanceAttributesPanelVisible = true;\n\n  /**\n   * shape attributes panel visible\n   */\n  shapeAttributesPanelVisible = true;\n\n  /**\n   * is attributes modal visible\n   */\n  attributesModalVisible = false;\n\n  /**\n   * is multi attributes modal visible\n   */\n  multiAttributesModalVisible = false;\n\n  /**\n   * point attributes modal visible\n   */\n  pointAttributesModalVisible = false;\n\n  /**\n   * frame attributes modal visible\n   */\n  frameAttributesModalVisible = false;\n\n  /**\n   * common frame attributes modal visible\n   */\n  commonFrameAttributesModalVisible = false;\n\n  /**\n   * is moving modal visible\n   */\n  movingModalVisible = false;\n\n  /**\n   * is review modal visible\n   */\n  reviewModalVisible = false;\n\n  /**\n   * is thumbnail modal visible\n   */\n  thumbnailModalVisible = false;\n\n  /**\n   * has thumbnails and need thumbnail layer\n   */\n  needThumbnailLayer = false;\n\n  /**\n   * is reject all modal visible\n   */\n  rejectAllModalVisible = false;\n\n  /**\n   * is relationship modal visible\n   */\n  relationshipModalVisible = false;\n\n  /**\n   * is relationship menu visible\n   */\n  relationshipMenuVisible = false;\n\n  /**\n   * is context menu visible\n   */\n  contextMenuVisible = false;\n\n  /**\n   * context menu position\n   */\n  contextMenuPosition = { x: 0, y: 0 };\n\n  /**\n   * context menu selected frames\n   */\n  contextMenuSelectedFrames: number[] = [];\n\n  /**\n   * is pixel search visible\n   */\n  pixelSearchVisible = false;\n\n  /**\n   * label items\n   */\n  labelItems = [LabelItem.CATEGORY, LabelItem.NUMBER, LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES, LabelItem.ITEM_NAME, LabelItem.ITEM_NUMBER, LabelItem.ITEM_ATTRIBUTE_KEYS, LabelItem.ITEM_ATTRIBUTE_VALUES];\n\n  /**\n   * label style\n   */\n  labelStyle = LabelStyle.DEFAULT;\n\n  /**\n   * label format\n   */\n  labelFormat = LabelFormat.DEFAULT;\n\n  /**\n   * label items for point\n   */\n  pointLabelItems = [LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES];\n\n  /**\n   * inspect label\n   */\n  inspectLabel: InspectLabel | null = null;\n\n  /**\n   * default inspect label (from template)\n   */\n  defaultInspectLabel: InspectLabel = {\n    fields: [],\n    extraParams: [],\n    style: {\n      fontSize: 12,\n      color: '#FFFF00',\n    },\n  };\n\n  /**\n   * shape info items\n   */\n  shapeInfoItems: ShapeInfoItem[] = [];\n\n  /**\n   * category description drawer 's category\n   */\n  descriptionDrawerCategory: Category | undefined;\n\n  /**\n   * is inspect label modal visible\n   */\n  inspectLabelModalVisible = false;\n\n  /**\n   * active attributes mode\n   */\n  activeAttributesMode = AttributesMode.HIDE;\n\n  /**\n   * active attributes mode for point\n   */\n  activePointAttributesMode = AttributesMode.ALWAYS;\n\n  /**\n   * active attributes mode for relationship\n   */\n  activeRelationshipsMode = AttributesMode.ALWAYS;\n\n  /**\n   * active mode for inspect label\n   */\n  activeInspectLabelMode = AttributesMode.HIDE;\n\n  /**\n   * measurement box list\n   */\n  measurementBoxList: number[][] | null = null;\n\n  /**\n   * active measurement box index\n   */\n  activeMeasurementBoxIndex = 0;\n\n  /**\n   * auxiliary lines\n   */\n  auxiliaryLines: AuxiliaryLines | null = null;\n\n  /**\n   * tag configuration for OCR\n   */\n  ocrTagGroup: TagGroupProps[] | null = null;\n\n  /**\n   * formula template\n   */\n  formulaTemplate: FormulaTemplate | null = null;\n\n  /**\n   * is formula template loaded\n   */\n  formulaTemplateLoaded = false;\n\n  /**\n   * auto ocr\n   */\n  autoOCR = true;\n\n  /**\n   * is ocr sync turned on\n   */\n  OCRSyncOn = true;\n\n  /**\n   * should sync ocr (only auto sync when shape created)\n   */\n  shouldSyncOCR = false;\n\n  /**\n   * auto interpolation\n   */\n  autoInterpolation = true;\n\n  /**\n   * when autoTracking is true, instance or instanceItem don't existent in current frame, whether it needs to be displayed in the sidebar\n   */\n  inexistentGraphicsCardVisibility = true;\n\n  /**\n   * auto tracking\n   */\n  autoTracking = true;\n\n  /**\n   * model prediction\n   */\n  modelPrediction = false;\n\n  /**\n   * predictive mode\n   */\n  predictiveMode = PredictiveMode.SELECTED_INSTANCE;\n\n  /**\n   * image boundary check\n   */\n  boundaryCheck = false;\n\n  /**\n   * minimal shape area\n   */\n  minArea = DEFAULT_MIN_AREA;\n\n  /**\n   * data precision (>= 14 -> NaN)\n   */\n  dataPrecision = 6;\n\n  /**\n   * view rotatable\n   */\n  viewRotatable = false;\n\n  /**\n   * shape draggable\n   */\n  draggable = true;\n\n  /**\n   * Whether the shape can be rotated\n   */\n  rotatable = false;\n\n  /**\n   * auto snap to rectangles\n   */\n  autoSnap = false;\n\n  /**\n   * auto snap to polygon & line vertexes\n   */\n  autoSnapPoint = true;\n\n  /**\n   * numbering mode for instance\n   */\n  numberingMode = NumberingMode.BY_CATEGORY;\n\n  /**\n   * numbering mode for instance item\n   */\n  instanceItemNumberingMode = InstanceItemNumberingMode.BY_INSTANCE;\n\n  /**\n   * minify result\n   */\n  minify = false;\n\n  /**\n   * default select the first issue type\n   */\n  defaultIssueType = false;\n\n  /**\n   * validation config\n   */\n  validationConfig: Map<ValidationType, boolean> = new Map([\n    [ValidationType.INVALID_SHAPE, true],\n  ]);\n\n  /**\n   * custom validation config\n   */\n  customValidationConfig?: string[];\n\n  /**\n   * skip submit check for invalid data\n   */\n  skipCheckForInvalidData = false;\n\n  /**\n   * hotkey map\n   */\n  hotkeyMap: { [key: string]: HotkeyItem[] } = {};\n\n  /**\n   * guide instructions\n   */\n  instructionsUrl = '';\n\n  /**\n   * Preferences\n   */\n  preferences: PreferencesConfig = {};\n\n  /**\n   * Preferences default config\n   */\n  preferencesDefaultConfig: PreferencesConfig = {\n    // The step value of the mouse zoom image\n    zoomStep: 0.1,\n    // if keep zoom for muti cameras\n    zoomTogether: false,\n    // crossline assistant switch\n    crossLineVisible: true,\n    // continuous drawing mode\n    continuousMode: false,\n    // show grid on canvas\n    // show current position\n    showCurrPosition: false,\n    // finish shapes by double click\n    dblclickFinish: true,\n    // when shape rotable is true, rotable mode\n    shapeRotateMode: ShapeRotateMode.HANDLE,\n    // when shape rotable is true, and shapeRotateMode is hanlde\n    shapeRotateHandleMode: ShapeRotateHandleMode.SELECTED,\n    // whether to zoom when switching the selected instance\n    shapeFocusMode: ShapeFocusMode.ZOOM,\n    // show shape auxiliary lines\n    showShapeAuxiliaryLines: true,\n    // show pixel shape bounds\n    showPixelShapeBounds: true,\n    // auto open attributes modal\n    autoOpenAttributesModal: true,\n    // auto snap tolerance (for rectangles)\n    autoSnapTolerance: 8,\n  };\n\n  catchPreferencesDebounce = debounce(() => {\n    cache.set(CacheKey.PREFERENCES, this.preferences);\n  }, 1000);\n\n  canvasConfig: CanvasConfig = {\n    gridVisible: false,\n    gap: GRID_SIZE,\n  };\n\n  defaultCanvasConfig: CanvasConfig = {\n    gridVisible: false,\n    gap: GRID_SIZE,\n  };\n\n  /**\n   * view scale in current camera\n   * @getter\n   */\n  get viewScale() {\n    const scale = this.viewScales[this.rootStore.frame.currentCamera];\n    return scale !== undefined ? scale : 1;\n  }\n\n  /**\n   * view position in current camera\n   * @getter\n   */\n  get viewPosition() {\n    const position = this.viewPositions[this.rootStore.frame.currentCamera];\n    return position || { x: 0, y: 0 };\n  }\n\n  /**\n   * hotkey map for points\n   * @getter\n   */\n  get pointHotkeyMap() {\n    const map: { [key: string]: HotkeyItem[] } = {};\n    Object.keys(this.hotkeyMap).forEach((key) => {\n      const items = this.hotkeyMap[key].filter((i) => i.affected === 'point');\n      if (items.length > 0) {\n        map[key] = items;\n      }\n    });\n    return map;\n  }\n\n  /**\n   * point attributes defined in hotkeys cofig\n   * @getter\n   */\n  get pointAttributes() {\n    const keyValuesMap: { [key: string]: Set<any> } = {};\n    Object.values(this.hotkeyMap).forEach((items) => {\n      items.forEach(({ affected, attributes }) => {\n        if (affected === 'point') {\n          Object.keys(attributes).forEach((attrKey) => {\n            if (!keyValuesMap[attrKey]) {\n              keyValuesMap[attrKey] = new Set();\n            }\n            keyValuesMap[attrKey].add(attributes[attrKey]);\n          });\n        }\n      });\n    });\n    return keyValuesMap;\n  }\n\n  /**\n   * active measurement box\n   * @getter\n   */\n  get activeMeasurementBox() {\n    return (toJS(this.measurementBoxList) || [])[this.activeMeasurementBoxIndex];\n  }\n\n  /**\n   * is there any modal opened\n   * @getter\n   */\n  get isAnyModalOpened() {\n    return this.attributesModalVisible\n      || this.multiAttributesModalVisible\n      || this.movingModalVisible\n      || this.reviewModalVisible\n      || this.rejectAllModalVisible\n      || this.relationshipModalVisible\n      || this.relationshipMenuVisible\n      || this.pointAttributesModalVisible\n      || this.frameAttributesModalVisible\n      || this.inspectLabelModalVisible\n      || this.commonFrameAttributesModalVisible;\n  }\n\n  /**\n   * is any shape being working\n   * @getter\n   */\n  get isWorkingOnAnyShape() {\n    return this.rootStore.shape.drawingShape\n      || this.rootStore.shape.cuttingShape\n      || this.rootStore.shape.splittingShape\n      || this.rootStore.shape.appendingShape\n      || this.rootStore.shape.updatingShape\n      || this.rootStore.segmentation.updatingShape;\n  }\n\n  /**\n   * not allow to change layer\n   * @getter\n   */\n  get layerChangeDisabled() {\n    const { drawingShape } = this.rootStore.shape;\n    if (drawingShape) {\n      if (drawingShape instanceof Pixel && drawingShape.pixelsData.isEmpty) {\n        // haven't being started\n        return false;\n      }\n      return true;\n    }\n    return this.rootStore.shape.cuttingShape\n      || this.rootStore.shape.splittingShape\n      || this.rootStore.shape.appendingShape\n      || this.rootStore.shape.updatingShape\n      || this.rootStore.segmentation.updatingShape;\n  }\n\n  get isGridVisible() {\n    return this.canvasConfig.gridVisible;\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      previewMsg: false,\n      OCRSyncOn: false,\n      shouldSyncOCR: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload: Payload) {\n    // set default review mode\n    this.reviewMode = isReviewEditable(payload.jobProxy.toolMode) ? ReviewMode.REVIEW : ReviewMode.LABELING;\n\n    // set interpolate proxy\n    if (typeof payload.interpolate_proxy === 'string' && payload.interpolate_proxy) {\n      this.interpolateProxy = payload.interpolate_proxy;\n    }\n    // set predict proxy\n    if (typeof payload.predict_proxy === 'string' && payload.predict_proxy) {\n      this.predictProxy = payload.predict_proxy;\n    }\n\n    // set camera layout\n    if (Object.values(CameraLayout).includes(payload.camera_layout as CameraLayout)) {\n      this.cameraLayout = payload.camera_layout as CameraLayout;\n    }\n\n    // set layers\n    if (typeof payload.layers === 'string' && payload.layers) {\n      const layers = payload.layers.split(',').map((l) => l.trim()).filter((l) => !!l);\n      if (layers.length > 0) {\n        // multi layers\n        this.layers = layers;\n        this.layers.forEach((_, i) => {\n          this.layersVisible[i] = true;\n        });\n      }\n    }\n\n    // parse shape label mode\n    const localAttributesMode = cache.get(CacheKey.ATTRIBUTES_MODE);\n    if (localAttributesMode?.shape && Object.values(AttributesMode).includes(localAttributesMode.shape)) {\n      this.activeAttributesMode = localAttributesMode.shape;\n    } else if (Object.values(AttributesMode).includes(payload.label_mode as AttributesMode)) {\n      this.activeAttributesMode = payload.label_mode as AttributesMode;\n    }\n\n    // parse point label mode\n    if (localAttributesMode?.point && Object.values(AttributesMode).includes(localAttributesMode.point)) {\n      this.activePointAttributesMode = localAttributesMode.point;\n    } else if (Object.values(AttributesMode).includes(payload.point_label_mode as AttributesMode)) {\n      this.activePointAttributesMode = payload.point_label_mode as AttributesMode;\n    }\n\n    // parse relationship label mode\n    if (localAttributesMode?.relationship && Object.values(AttributesMode).includes(localAttributesMode.relationship)) {\n      this.activeRelationshipsMode = localAttributesMode.relationship;\n    } else if (Object.values(AttributesMode).includes(payload.relationship_mode as AttributesMode)) {\n      this.activeRelationshipsMode = payload.relationship_mode as AttributesMode;\n    }\n\n    // parse inspect label mode\n    if (localAttributesMode?.inspectLabel && Object.values(AttributesMode).includes(localAttributesMode.inspectLabel)) {\n      this.activeInspectLabelMode = localAttributesMode.inspectLabel;\n    }\n\n    // parse numbering mode\n    if (Object.values(NumberingMode).includes(payload.numbering_mode as NumberingMode)) {\n      this.numberingMode = payload.numbering_mode as NumberingMode;\n    }\n    // parse numbering mode for instance item\n    if (Object.values(InstanceItemNumberingMode).includes(payload.numbering_mode_item as InstanceItemNumberingMode)) {\n      this.instanceItemNumberingMode = payload.numbering_mode_item as InstanceItemNumberingMode;\n    }\n    // parse label style\n    if (Object.values(LabelStyle).includes(payload.label_style as LabelStyle)) {\n      this.labelStyle = payload.label_style as LabelStyle;\n    }\n    // parse label format\n    if (Object.values(LabelFormat).includes(payload.label_format as LabelFormat)) {\n      this.labelFormat = payload.label_format as LabelFormat;\n    }\n    // parse label items\n    if (typeof payload.label_item === 'string' && payload.label_item) {\n      this.labelItems = parseLabelItemsFromStr(payload.label_item);\n    }\n    // parse point label items\n    if (typeof payload.point_label_item === 'string' && payload.point_label_item) {\n      this.pointLabelItems = parseLabelItemsFromStr(payload.point_label_item);\n    }\n    // parse shape info items\n    if (typeof payload.shape_info_item === 'string' && payload.shape_info_item) {\n      const items: ShapeInfoItem[] = [];\n      payload.shape_info_item.split(',').forEach((i) => {\n        const item = i.trim() as ShapeInfoItem;\n        if (Object.values(ShapeInfoItem).includes(item)) {\n          items.push(item);\n        }\n      });\n      this.shapeInfoItems = items;\n    }\n\n    // parse measurement box list\n    if (typeof payload.measurement_box === 'string' && payload.measurement_box) {\n      try {\n        const list = JSON.parse(payload.measurement_box);\n        if (Array.isArray(list) && list.every((i) => i.length === 2 && typeof i[0] === 'number' && typeof i[1] === 'number')) {\n          this.measurementBoxList = list;\n        }\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse auxiliary lines\n    const auxiliaryLines = parseAuxiliaryLines(payload.auxiliary_lines);\n    if (Object.values(auxiliaryLines).flat().length > 0) {\n      // has config\n      this.auxiliaryLines = auxiliaryLines;\n    }\n\n    // parse ocr tag group\n    if (typeof payload.ocr_tag_group === 'string' && payload.ocr_tag_group) {\n      try {\n        this.ocrTagGroup = JSON.parse(Base64.decode(payload.ocr_tag_group));\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse formula template\n    parseFormulaTemplate(payload.formula_template).then((template) => {\n      this.formulaTemplate = template;\n      this.formulaTemplateLoaded = true;\n    });\n\n    // parse auto ocr\n    this.autoOCR = payload.auto_ocr !== 'false' && payload.auto_ocr !== false;\n\n    // parse auto interpolation\n    this.autoInterpolation = payload.auto_interpolation !== 'false' && payload.auto_interpolation !== false;\n\n    // parse auto tracking\n    this.autoTracking = payload.auto_tracking !== 'false' && payload.auto_tracking !== false;\n    if (!this.autoTracking) {\n      // always not interpolate when not tracking\n      this.autoInterpolation = false;\n    }\n\n    // parse model prediction\n    this.modelPrediction = payload.model_prediction === 'true' || payload.model_prediction === true;\n\n    // parse predictive mode\n    const localPredictiveMode = cache.get(CacheKey.PREDICTIVE_MODE);\n    if (localPredictiveMode?.predictiveMode && Object.values(PredictiveMode).includes(localPredictiveMode.predictiveMode)) {\n      this.predictiveMode = localPredictiveMode.predictiveMode;\n    } else if (Object.values(PredictiveMode).includes(payload.predictive_mode as PredictiveMode)) {\n      this.predictiveMode = payload.predictive_mode as PredictiveMode;\n    }\n    if (!this.predictiveMode) {\n      this.predictiveMode = PredictiveMode.SELECTED_INSTANCE;\n    }\n\n    // parse boundary check\n    this.boundaryCheck = payload.boundary_check === 'true' || payload.boundary_check === true;\n    if (this.boundaryCheck) {\n      this.validationConfig.set(ValidationType.OUT_OF_BOUNDARY, true);\n    }\n\n    // parse min area\n    if (payload.min_area !== undefined && payload.min_area !== '') {\n      const minArea = Number(payload.min_area);\n      if (!Number.isNaN(minArea) && minArea >= 0) {\n        this.minArea = minArea;\n        this.validationConfig.set(\n          ValidationType.MIN_AREA,\n          payload.min_area_submit !== 'false' && payload.min_area_submit !== false,\n        );\n      }\n    }\n\n    // parse data precision\n    if (payload.data_precision !== undefined && payload.data_precision !== '') {\n      const precision = Number(payload.data_precision);\n      if ((Number.isInteger(precision) && precision >= 0) || Number.isNaN(precision)) {\n        // use NaN when precision exceeds system precision\n        this.dataPrecision = precision >= 14 ? NaN : precision;\n      }\n    }\n\n    // parse view rotatable\n    this.viewRotatable = payload.view_rotatable === 'true' || payload.view_rotatable === true;\n\n    // parse draggable\n    this.draggable = payload.draggable !== 'false' && payload.draggable !== false;\n\n    // parse rotatable\n    this.rotatable = payload.rotatable === 'true' || payload.rotatable === true;\n\n    // parse auto snap\n    this.autoSnap = payload.auto_snap === 'true' || payload.auto_snap === true;\n\n    // parse auto snap point\n    this.autoSnapPoint = payload.auto_snap_point !== 'false' && payload.auto_snap_point !== false;\n\n    // parse submit check config\n    const submitCheck = payload.submit_check !== 'false' && payload.submit_check !== false;\n\n    // parse custom check\n    if (typeof payload.custom_check === 'string' && payload.custom_check) {\n      const scriptIds = payload.custom_check.split(',').map((i) => i.trim()).filter((i) => !!i);\n      if (scriptIds.length > 0) {\n        this.validationConfig.set(ValidationType.CUSTOM, submitCheck);\n        this.customValidationConfig = scriptIds;\n      }\n    }\n\n    // parse script check\n    if (payload.script_check === 'true' || payload.script_check === true) {\n      this.validationConfig.set(ValidationType.SCRIPT, submitCheck);\n    }\n\n    // parse skip check for invalid data\n    this.skipCheckForInvalidData = payload.skip_check_for_invalid_data === 'true' || payload.skip_check_for_invalid_data === true;\n\n    // parse empty area check\n    if (payload.empty_area_check === 'true' || payload.empty_area_check === true) {\n      this.validationConfig.set(ValidationType.EMPTY_AREA, false);\n    }\n\n    // parse fully covered check\n    if (payload.fully_covered_check === 'true' || payload.fully_covered_check === true) {\n      this.validationConfig.set(ValidationType.FULLY_COVERED, false);\n    }\n\n    if (payload.item_count_check !== 'false' && payload.item_count_check !== false) {\n      this.validationConfig.set(\n        ValidationType.ITEM_COUNT,\n        payload.item_count_check_submit !== 'false' && payload.item_count_check_submit !== false,\n      );\n    }\n\n    if (payload.attr_valid_check !== 'false' && payload.attr_valid_check !== false) {\n      this.validationConfig.set(\n        ValidationType.ATTR_VALID,\n        payload.attr_valid_check_submit !== 'false' && payload.attr_valid_check_submit !== false,\n      );\n    }\n\n    if (payload.frame_attr_valid_check !== 'false' && payload.frame_attr_valid_check !== false) {\n      this.validationConfig.set(\n        ValidationType.FRAME_ATTR_VALID,\n        payload.frame_attr_valid_check_submit !== 'false' && payload.frame_attr_valid_check_submit !== false,\n      );\n    }\n\n    if (payload.frame_common_attr_valid_check !== 'false' && payload.frame_common_attr_valid_check !== false) {\n      this.validationConfig.set(\n        ValidationType.FRAME_COMMON_ATTR_VALID,\n        payload.frame_common_attr_valid_check_submit !== 'false' && payload.frame_common_attr_valid_check_submit !== false,\n      );\n    }\n\n    // parse frame valid annotate check\n    if (payload.frame_valid_annotate_check === 'true' || payload.frame_valid_annotate_check === true) {\n      this.validationConfig.set(\n        ValidationType.FRAME_VALID_ANNOTATE,\n        payload.frame_valid_annotate_check_submit !== 'false' && payload.frame_valid_annotate_check_submit !== false,\n      );\n    }\n\n    // parse frame common valid annotate check\n    if (payload.frame_common_valid_annotate_check === 'true' || payload.frame_common_valid_annotate_check === true) {\n      this.validationConfig.set(\n        ValidationType.FRAME_COMMON_VALID_ANNOTATE,\n        payload.frame_common_valid_annotate_check_submit !== 'false' && payload.frame_common_valid_annotate_check_submit !== false,\n      );\n    }\n\n    if (payload.keypoints_finish_check !== 'false' && payload.keypoints_finish_check !== false) {\n      this.validationConfig.set(\n        ValidationType.KEYPOINTS_FINISH,\n        payload.keypoints_finish_check_submit !== 'false' && payload.keypoints_finish_check_submit !== false,\n      );\n    }\n\n    // parse hotkeys\n    if (payload.hotkeys && !this.rootStore.ontology.pointLabelConfigEnabled) {\n      try {\n        const config = JSON.parse(Base64.decode(payload.hotkeys));\n        this.hotkeyMap = parseHotkeysConfig(config);\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse minify\n    this.minify = payload.minify === 'true' || payload.minify === true;\n\n    // parse default issue type\n    this.defaultIssueType = payload.default_issue_type === 'true' || payload.default_issue_type === true;\n\n    if (payload.instructions_url) {\n      this.instructionsUrl = payload.instructions_url;\n    }\n\n    // replace model urls\n    if (payload.model_urls) {\n      modelsReplacer(payload.model_urls);\n    }\n    if (payload.grid_gap !== undefined && payload.grid_gap !== '') {\n      this.defaultCanvasConfig.gap = Math.max(Number(payload.grid_gap), 1) || GRID_SIZE;\n      this.defaultCanvasConfig.gridVisible = true;\n    }\n\n    // shape label visibility\n    this.initLabelMode(payload.shape_label_visibility);\n    this.initInspectLabel(payload.inspect_label);\n    this.initMeasurementBox();\n    this.initCameraLayout();\n    this.initPreferences();\n    this.initInexistentGraphicsCardVisibility();\n    this.initCanvasConfig();\n  }\n\n  canvasConfigEffectiveImmediately = ({ gridVisible, gap }: Partial<CanvasConfig>) => {\n    const { cameraViews } = this.rootStore.frame;\n    Object.values(cameraViews).forEach((cameraView) => {\n      if (gridVisible !== undefined) {\n        cameraView.setShowGrid(!!gridVisible);\n      }\n      if (gap !== undefined) {\n        cameraView.updateGridSize(gap);\n      }\n    });\n  };\n\n  initCanvasConfig = () => {\n    const canvasConfigCached = cache.get(CacheKey.CANVAS_GRID);\n    if (canvasConfigCached) {\n      const { gap } = canvasConfigCached;\n      this.canvasConfig = { ...canvasConfigCached, gap: Math.max(1, gap) };\n      return;\n    }\n\n    this.canvasConfig = { ...this.defaultCanvasConfig };\n  };\n\n  resetCanvasConfig = () => {\n    this.updateCanvasConfig(this.defaultCanvasConfig);\n  };\n\n  updateCanvasConfig = ({ gridVisible, gap }: Partial<CanvasConfig>) => {\n    const config = { ...this.canvasConfig };\n    if (gridVisible !== undefined) {\n      config.gridVisible = gridVisible;\n    }\n    if (gap !== undefined) {\n      config.gap = gap;\n    }\n    this.canvasConfig = { ...config };\n\n    this.canvasConfigEffectiveImmediately({ gridVisible, gap });\n    cache.set(CacheKey.CANVAS_GRID, config);\n  };\n\n  /**\n   * set add mode\n   * @param addMode\n   * @param shouldPredict\n   */\n  setAddMode(addMode: boolean, shouldPredict = true) {\n    if (this.rootStore.readonly\n      || this.isAnyModalOpened\n      || !this.rootStore.ontology.selectedCategory\n      || this.rootStore.config.viewMode === ViewMode.GRID) {\n      return;\n    }\n\n    this.addMode = addMode;\n    // close category context menu\n    this.setContextMenuVisible(false);\n    // exit measure mode\n    this.setMeasureMode(false);\n    // cancel shape working status\n    this.rootStore.cancelShapeWorking();\n    // change cursor\n    this.setCursor(addMode ? Cursor.CROSSHAIR : Cursor.DEFAULT);\n    // change other shapes interactive\n    this.rootStore.shape.updateShapesInteractive(!addMode);\n    // change connections interactive\n    this.rootStore.relationship.updateConnectionsInteractive(!addMode);\n    // remove drawing shape if needed\n    if (!addMode && this.rootStore.shape.drawingShape) {\n      this.rootStore.shape.drawingShape.destroy();\n      this.rootStore.shape.drawingShape = null;\n    }\n    // reset recognition\n    this.rootStore.shape.resetRecognition();\n    // hide or show predict shape\n    if (addMode) {\n      this.rootStore.shape.clearPredictedShapes();\n      this.rootStore.shape.startCreateShape();\n      this.setHideAll(false);\n    } else {\n      if (shouldPredict) {\n        // only repredict when frame not change\n        this.rootStore.shape.predict();\n      }\n      this.rootStore.shape.creatingShapeColor = '';\n      this.rootStore.shape.selectedPointIndex = -1;\n    }\n  };\n\n  setPredictiveMode(mode: PredictiveMode) {\n    this.predictiveMode = mode;\n    this.rootStore.shape.predict();\n\n    cache.set(CacheKey.PREDICTIVE_MODE, {\n      predictiveMode: mode,\n    });\n  }\n\n  /**\n   * set label mode\n   * @param labelMode\n   */\n  setLabelMode(labelMode: boolean) {\n    if (this.labelMode !== labelMode) {\n      this.labelMode = labelMode;\n      cache.set(CacheKey.LABEL_MODE, labelMode);\n      if (this.viewMode === ViewMode.GRID) {\n        this.rootStore.grid.updateLabelMode(labelMode);\n      }\n      setTimeout(() => {\n        this.rootStore.relationship.setupConnections();\n      }, 0);\n    }\n  }\n\n  /**\n   * set view mode\n   * @param viewMode\n   */\n  setViewMode(viewMode: ViewMode) {\n    if (!this.rootStore.initialized) {\n      return;\n    }\n    if (this.viewMode !== viewMode) {\n      this.rootStore.cancelShapeWorking();\n      this.rootStore.instance.exitReorganizeMode();\n      this.setAddMode(false);\n      this.viewMode = viewMode;\n      if (viewMode === ViewMode.DEFAULT) {\n        // reset camera\n        const { currentCameraView, updateCameraLayers } = this.rootStore.frame;\n        if (currentCameraView) {\n          updateCameraLayers(currentCameraView);\n        }\n        this.rootStore.shape.updateShapesInteractive(true);\n        this.rootStore.review.setupReviewAnchors();\n      } else if (viewMode === ViewMode.GRID) {\n        this.rootStore.shape.updateShapesInteractive(false);\n        this.rootStore.review.clearAnchors();\n      }\n      if (this.pixelSearchVisible) {\n        this.setPixelSearchVisible(false);\n        this.rootStore.frame.currentCameraView?.removePixelMark();\n      }\n    }\n  }\n\n  /**\n   * set review mode\n   * @param reviewMode\n   */\n  setReviewMode(reviewMode: ReviewMode) {\n    if (this.reviewMode !== reviewMode) {\n      this.setAddMode(false);\n      this.reviewMode = reviewMode;\n      this.rootStore.review.unselectReview();\n      if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        this.rootStore.shape.updateShapesEditable(reviewMode === ReviewMode.LABELING);\n        this.rootStore.shape.predict();\n      } else {\n        this.rootStore.grid.updateShapesEditable(reviewMode === ReviewMode.LABELING);\n      }\n      this.rootStore.relationship.updateConnectionsInteractive(reviewMode === ReviewMode.LABELING);\n    }\n  }\n\n  /**\n   * set preview mode\n   * @param previewMode\n   */\n  setPreviewMode(previewMode: boolean) {\n    if (this.isAnyModalOpened || this.viewMode === ViewMode.GRID) {\n      return;\n    }\n\n    // cancel add & update\n    this.setAddMode(false);\n    this.rootStore.cancelShapeWorking();\n    this.rootStore.review.setAddMode(false);\n\n    // unselect shapes\n    this.rootStore.instance.selectInstanceItem(null);\n    this.rootStore.instance.selectInstance(null);\n\n    this.previewMode = previewMode;\n    this.rootStore.frame.updatePreviewMode();\n\n    if (this.previewMsg) {\n      this.previewMsg();\n    }\n    if (previewMode) {\n      this.previewMsg = message.open({\n        content: React.createElement(Message, {\n          message: i18n.translate('PREVIEW_MODE_TIP'),\n          btn: i18n.translate('PREVIEW_MODE_CLOSE'),\n          onBtnClick: () => this.setPreviewMode(false),\n        }),\n        duration: 0,\n        icon: null,\n        className: 'mode-message',\n      });\n    }\n  }\n\n  /**\n   * set camera layout\n   * @param layout\n   */\n  setCameraLayout(layout: CameraLayout) {\n    this.cameraLayout = layout;\n    cache.set(CacheKey.CAMERA_LAYOUT, layout);\n  }\n\n  /**\n   * set active layer index\n   * @param index\n   */\n  setActiveLayerIndex(index: number) {\n    if (this.layerChangeDisabled) {\n      return;\n    }\n    const layersCount = this.layers.length;\n    if (layersCount > 0 && index < layersCount && index >= 0) {\n      // only for multi layers cases\n      this.activeLayerIndex = index;\n      this.rootStore.frame.updateActiveLayerIndexInAllCameras();\n      if (this.rootStore.shape.drawingShape instanceof Pixel) {\n        this.rootStore.shape.cancelCreateShape();\n        this.rootStore.shape.startCreateShape();\n      }\n    }\n  }\n\n  /**\n   * @param layer\n   * @param visible\n   */\n  setLayerVisibility(layer: number, visible: boolean) {\n    if (this.layersVisible[layer] !== undefined) {\n      this.layersVisible[layer] = visible;\n      this.rootStore.shape.hideOrShowOthers();\n    }\n  }\n\n  /**\n   * set cursor\n   * @param cursor\n   */\n  setCursor(cursor: Cursor) {\n    this.cursor = getCursor(cursor);\n  }\n\n  /**\n   * set view scale\n   * @param viewScale\n   * @param camera\n   */\n  setViewScale(viewScale: number, camera = this.rootStore.frame.currentCamera) {\n    this.viewScales[camera] = viewScale;\n    this.rootStore.review.updateAnchorsScale(viewScale, camera);\n    this.rootStore.thumbnail.updateAnchorsScale(viewScale);\n    this.rootStore.validation.redrawCheckLayerByCamera(camera);\n    this.rootStore.frame.drawNIFTIViews();\n    if (camera === this.rootStore.frame.currentCamera && this.rootStore.shape.shapesResizer) {\n      this.rootStore.shape.shapesResizer.scale = viewScale;\n    }\n    if (this.preferences.zoomTogether && camera === this.rootStore.frame.currentCamera) {\n      Object.values(this.rootStore.frame.cameraViews).forEach((cameraView) => {\n        if (cameraView.id !== camera && cameraView.viewScale !== viewScale) {\n          cameraView.viewScale = viewScale;\n        }\n      });\n    }\n  }\n\n  /**\n   * set view position\n   * @param position\n   * @param camera\n   */\n  setViewPosition(position: { x: number; y: number }, camera = this.rootStore.frame.currentCamera) {\n    this.viewPositions[camera] = { ...position };\n    this.rootStore.shape.redrawShapesLabel();\n    this.rootStore.frame.drawNIFTIViews();\n    if (this.preferences.zoomTogether && camera === this.rootStore.frame.currentCamera) {\n      Object.values(this.rootStore.frame.cameraViews).forEach((cameraView) => {\n        if (cameraView.id !== camera) {\n          const p = cameraView.getStagePosition();\n          if (p.x !== position.x || p.y !== position.y) {\n            cameraView.setStagePosition(position.x, position.y);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * set show current position\n   * @param showCurrPosition\n   */\n  setShowCurrPosition(showCurrPosition: boolean) {\n    this.showCurrPosition = showCurrPosition;\n  }\n\n  /**\n   * set shape rotate mode\n   * @param mode\n   */\n  setShapeRotateMode(mode: ShapeRotateMode) {\n    this.preferences.shapeRotateMode = mode;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateShapesRotateMode(mode);\n    } else {\n      this.rootStore.grid.updateShapesRotateMode(mode);\n    }\n  }\n\n  /**\n   * set rotate handle mode when shape rotate mode is handle\n   * @param mode\n   */\n  setShapeRotateHandleMode(mode: ShapeRotateHandleMode) {\n    if (this.preferences.shapeRotateMode === ShapeRotateMode.HANDLE) {\n      this.preferences.shapeRotateHandleMode = mode;\n      if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        this.rootStore.shape.updateShapesRotateHandleMode(mode);\n      } else {\n        this.rootStore.grid.updateShapesRotateHandleMode(mode);\n      }\n    }\n  }\n\n  /**\n   * set show shape auxiliary lines\n   * @param showShapeAuxiliaryLines\n   */\n  setShowShapeAuxiliaryLines(showShapeAuxiliaryLines: boolean) {\n    this.preferences.showShapeAuxiliaryLines = showShapeAuxiliaryLines;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateShapesShowAuxiliaryLines(showShapeAuxiliaryLines);\n    } else {\n      this.rootStore.grid.updateShapesShowAuxiliaryLines(showShapeAuxiliaryLines);\n    }\n  }\n\n  /**\n   * set show pixel shape bounds\n   * @param showPixelShapeBounds\n   */\n  setShowPixelShapeBounds(showPixelShapeBounds: boolean) {\n    this.preferences.showPixelShapeBounds = showPixelShapeBounds;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updatePixelShapesShowBounds(showPixelShapeBounds);\n    } else {\n      this.rootStore.grid.updatePixelShapesShowBounds(showPixelShapeBounds);\n    }\n  }\n\n  /**\n   * set double click finish\n   * @param dblclickFinish\n   */\n  setDoubleClickFinish(dblclickFinish: boolean) {\n    this.preferences.dblclickFinish = dblclickFinish;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateShapesDoubleClickFinish(dblclickFinish);\n    } else {\n      this.rootStore.grid.updateShapesDoubleClickFinish(dblclickFinish);\n    }\n  }\n\n  /**\n   * set auto snap tolerance\n   * @param tolerance\n   */\n  setAutoSnapTolerance(tolerance: number) {\n    this.preferences.autoSnapTolerance = tolerance;\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      this.rootStore.shape.updateRectangleShapesAutoSnapTolerance(tolerance);\n    } else {\n      this.rootStore.grid.updateRectangleShapesAutoSnapTolerance(tolerance);\n    }\n  }\n\n  /**\n   * set cross line visible\n   * @param visible\n   */\n  setCrossLineVisible(visible: boolean) {\n    this.crossLineVisible = visible;\n  }\n\n  /**\n   * set continuous mode\n   * @param continuousMode\n   */\n  setContinuousMode(continuousMode: boolean) {\n    this.continuousMode = continuousMode;\n  }\n\n  /**\n   * set continuous mode type\n   * @param type\n   */\n  setContinuousModeType(type: ContinuousModeType) {\n    this.continuousModeType = type;\n  }\n\n  /**\n   * set measure mode\n   * @param measureMode\n   */\n  setMeasureMode(measureMode: boolean) {\n    const changed = this.measureMode !== measureMode;\n    this.measureMode = measureMode;\n    if (changed) {\n      this.setCursor(this.measureMode ? Cursor.CROSSHAIR : Cursor.DEFAULT);\n      Object.values(this.rootStore.frame.cameraViews).forEach((cameraView) => {\n        cameraView.measurerType = this.measureMode ? this.measurerType : null;\n      });\n      this.rootStore.shape.updateShapesInteractive(!this.measureMode);\n    }\n  }\n\n  /**\n   * set measurer type\n   * @param type\n   */\n  setMeasurerType(type: MeasurerType) {\n    this.measurerType = type;\n    if (this.measureMode) {\n      Object.values(this.rootStore.frame.cameraViews).forEach((cameraView) => {\n        cameraView.measurerType = type;\n      });\n    }\n  }\n\n  /**\n   * set hide others\n   * @param hideOthers\n   */\n  setHideOthers(hideOthers: { isOpen?: boolean, mode?: SoloMode }) {\n    this.hideOthers = { ...this.hideOthers, ...hideOthers };\n    this.rootStore.shape.hideOrShowOthers();\n  }\n\n  /**\n   * set hide all\n   * @param hideAll\n   */\n  setHideAll(hideAll: boolean) {\n    this.hideAll = hideAll;\n    this.rootStore.shape.hideOrShowOthers();\n  }\n\n  /**\n   * set frame attributes panel visibility\n   * @param visible\n   */\n  setFrameAttributesPanelVisible(visible: boolean) {\n    this.frameAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set instance attributes panel visibility\n   * @param visible\n   */\n  setInstanceAttributesPanelVisible(visible: boolean) {\n    this.instanceAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set shape attributes panel visibility\n   * @param visible\n   */\n  setShapeAttributesPanelVisible(visible: boolean) {\n    this.shapeAttributesPanelVisible = visible;\n  }\n\n  /**\n   * set attributes modal visibility\n   * @param visible\n   */\n  setAttributesModalVisible(visible: boolean) {\n    this.attributesModalVisible = visible;\n  }\n\n  /**\n   * set multi attributes modal visibility\n   * @param visible\n   */\n  setMultiAttributesModalVisible(visible: boolean) {\n    this.multiAttributesModalVisible = visible;\n  }\n\n  /**\n   * set moving modal visibility\n   * @param visible\n   */\n  setMovingModalVisible(visible: boolean) {\n    this.movingModalVisible = visible;\n  }\n\n  /**\n   * set review modal visibility\n   * @param visible\n   */\n  setReviewModalVisible(visible: boolean) {\n    this.reviewModalVisible = visible;\n  }\n\n  /**\n   * set review modal visibility\n   * @param visible\n   */\n  setThumbnailModalVisible(visible: boolean) {\n    this.thumbnailModalVisible = visible;\n  }\n\n  /**\n   * set need thumbnailLayer\n   * @param visible\n   */\n  setNeedThumbnailLayer(value: boolean) {\n    this.needThumbnailLayer = value;\n  }\n\n  /**\n   * set reject all modal visibility\n   * @param visible\n   */\n  setRejectAllModalVisible(visible: boolean) {\n    this.rejectAllModalVisible = visible;\n  }\n\n  /**\n   * set relationship modal visibility\n   * @param visible\n   */\n  setRelationshipModalVisible(visible: boolean) {\n    this.relationshipModalVisible = visible;\n  }\n\n  /**\n   * set relationship menu visibility\n   * @param visible\n   */\n  setRelationshipMenuVisible(visible: boolean) {\n    this.relationshipMenuVisible = visible;\n  }\n\n  /**\n   * set context menu visible\n   * @param visible\n   * @param position\n   * @param selectedFrames\n   */\n  setContextMenuVisible(visible: boolean, position?: { x: number; y: number }, selectedFrames?: number[]) {\n    if (position) {\n      this.contextMenuPosition.x = position.x;\n      this.contextMenuPosition.y = position.y;\n    }\n    this.contextMenuVisible = visible;\n    this.contextMenuSelectedFrames = visible && selectedFrames ? selectedFrames : [];\n  }\n\n  /**\n   * set pixel search visible\n   * @param visible\n   */\n  setPixelSearchVisible(visible: boolean) {\n    this.pixelSearchVisible = visible;\n  }\n\n  /**\n   * set point attributes modal visibility\n   * @param visible\n   */\n  setPointAttributesModalVisible(visible: boolean) {\n    this.pointAttributesModalVisible = visible;\n  }\n\n  /**\n   * set frame attributes modal visibility\n   * @param visible\n   */\n  setFrameAttributesModalVisible(visible: boolean) {\n    this.frameAttributesModalVisible = visible;\n  }\n\n  /**\n   * set common frame attributes modal visibility\n   * @param visible\n   */\n  setCommonFrameAttributesModalVisible(visible: boolean) {\n    this.commonFrameAttributesModalVisible = visible;\n  }\n\n  /**\n   * set inspect label modal visibility\n   * @param visible\n   */\n  setInspectLabelModalVisible(visible: boolean) {\n    this.inspectLabelModalVisible = visible;\n  }\n\n  setDescriptionDrawerCategory(category: Category | undefined) {\n    this.descriptionDrawerCategory = category;\n  }\n\n  /**\n   * set active attributes mode\n   * @param activeMode\n   * @param type point or shape\n   */\n  setAttributesMode(activeMode: AttributesMode, type = 'shape') {\n    switch (type) {\n      case 'point': {\n        this.activePointAttributesMode = activeMode;\n        this.rootStore.shape.updateShapesUserDataMode(activeMode as unknown as UserDataMode);\n        break;\n      }\n      case 'shape': {\n        this.activeAttributesMode = activeMode;\n        break;\n      }\n      case 'relationship': {\n        this.activeRelationshipsMode = activeMode;\n        this.rootStore.relationship.updateConnectionsVisible(activeMode === AttributesMode.ALWAYS);\n        break;\n      }\n      case 'inspectLabel': {\n        this.activeInspectLabelMode = activeMode;\n        break;\n      }\n      default:\n        break;\n    }\n    cache.set(CacheKey.ATTRIBUTES_MODE, {\n      point: this.activePointAttributesMode,\n      shape: this.activeAttributesMode,\n      relationship: this.activeRelationshipsMode,\n      inspectLabel: this.activeInspectLabelMode\n    });\n  }\n\n  initLabelMode(payloadValue: string | boolean | undefined) {\n    const localLabelMode = cache.get(CacheKey.LABEL_MODE);\n    let labelMode;\n    if (localLabelMode !== undefined) {\n      labelMode = localLabelMode;\n    } else {\n      labelMode = payloadValue !== 'false' && payloadValue !== false;\n    }\n\n    this.setLabelMode(labelMode);\n  }\n\n  initInspectLabel(payloadValue: string | boolean | undefined) {\n    if (typeof payloadValue === 'string' && payloadValue) {\n      // from template config\n      try {\n        const config = JSON.parse(payloadValue);\n        if (\n          (Array.isArray(config?.fields) && config.fields.length > 0) ||\n          (Array.isArray(config?.extraParams) && config.extraParams.length > 0)\n        ) {\n          this.defaultInspectLabel.fields = config?.fields ?? [];\n          this.defaultInspectLabel.extraParams = config?.extraParams?.filter(\n            (param: InspectLabelParams) => Object.values(InspectLabelParams).includes(param),\n          ) ?? [];\n          // default set attributes mode to always\n          this.setAttributesMode(AttributesMode.ALWAYS, 'inspectLabel');\n        }\n        if (config?.style?.fontSize) {\n          this.defaultInspectLabel.style.fontSize = config.style.fontSize;\n        }\n        if (config?.style?.color) {\n          this.defaultInspectLabel.style.color = config.style.color;\n        }\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    const fields = [];\n    const extraParams = [];\n    const cachedKeys = cache.get(CacheKey.INSPECT_LABEL);\n    if (Array.isArray(cachedKeys) && cachedKeys.length > 0) {\n      cachedKeys.forEach((cachedKey) => {\n        if (Object.values(InspectLabelParams).includes(cachedKey)) {\n          extraParams.push(cachedKey);\n        } else {\n          fields.push(cachedKey);\n        }\n      });\n    } else {\n      fields.push(...this.defaultInspectLabel.fields);\n      extraParams.push(...this.defaultInspectLabel.extraParams);\n    }\n\n    if (fields.length > 0 || extraParams.length > 0) {\n      // has inspect label config\n      this.inspectLabel = {\n        fields,\n        extraParams,\n        style: {\n          ...this.defaultInspectLabel.style,\n          ...cache.get(CacheKey.INSPECT_LABEL_STYLE),\n        },\n      };\n    }\n  }\n\n  setInspectLabel(inspectKeys: string[], style?: InspectLabelStyle) {\n    const fields: string[] = [];\n    const extraParams: InspectLabelParams[] = [];\n    inspectKeys.forEach((key) => {\n      if (Object.values(InspectLabelParams).includes(key as InspectLabelParams)) {\n        extraParams.push(key as InspectLabelParams);\n      } else {\n        fields.push(key);\n      }\n    });\n    this.inspectLabel = {\n      fields,\n      extraParams,\n      style: {\n        ...this.defaultInspectLabel.style,\n        ...style,\n      },\n    };\n    cache.set(CacheKey.INSPECT_LABEL, inspectKeys);\n    cache.set(CacheKey.INSPECT_LABEL_STYLE, this.inspectLabel.style);\n  }\n\n  initMeasurementBox() {\n    const originalMeasurementBox = cache.get(CacheKey.LEGACY_MEASUREMENT_BOX);\n    const measurementBox = cache.get(CacheKey.MEASUREMENT_BOX) || originalMeasurementBox || {};\n    if (originalMeasurementBox) {\n      try {\n        cache.remove(CacheKey.LEGACY_MEASUREMENT_BOX);\n      } catch (error) {\n        // console.log(error);\n      }\n    }\n    const { value, index } = measurementBox;\n    if (index === -1) {\n      this.activeMeasurementBoxIndex = -1;\n      return;\n    }\n    if (value) {\n      const measurementBoxList = toJS(this.measurementBoxList) || [];\n      const curIndex = measurementBoxList.findIndex((item: number[]) => item[0] === value[0] && item[1] === value[1]);\n      this.activeMeasurementBoxIndex = curIndex > -1 ? curIndex : 0;\n    }\n  }\n\n  initCameraLayout() {\n    const cameraLayout = cache.get(CacheKey.CAMERA_LAYOUT);\n    if (cameraLayout && typeof cameraLayout === 'string') {\n      const typeMap: { [key: string]: CameraLayout } = {\n        'col-2': CameraLayout.COL2,\n        'col-3': CameraLayout.COL3,\n        thumbnail: CameraLayout.THUMBNAIL,\n      };\n      if (typeMap[cameraLayout]) {\n        this.cameraLayout = typeMap[cameraLayout];\n      }\n    }\n  }\n\n  /**\n   * set measurement box indexs\n   * @param index\n   */\n  setMeasurementBoxIndex(index: number) {\n    this.activeMeasurementBoxIndex = index || 0;\n    const nowMeasurementBox = {\n      index: this.activeMeasurementBoxIndex,\n      value: this.activeMeasurementBox\n    };\n    cache.set(CacheKey.MEASUREMENT_BOX, nowMeasurementBox);\n  }\n\n  // immediately effective\n  preferencesEffectiveImmediately(preferences: PreferencesConfig) {\n    if (Object.prototype.hasOwnProperty.call(preferences, 'zoomTogether')) {\n      this.keepViewScaleAndPosition();\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'shapeRotateMode')) {\n      this.setShapeRotateMode(preferences.shapeRotateMode || ShapeRotateMode.HANDLE);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'shapeRotateHandleMode')) {\n      this.setShapeRotateHandleMode(preferences.shapeRotateHandleMode || ShapeRotateHandleMode.SELECTED);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'showShapeAuxiliaryLines')) {\n      this.setShowShapeAuxiliaryLines(!!preferences.showShapeAuxiliaryLines);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'showPixelShapeBounds')) {\n      this.setShowPixelShapeBounds(!!preferences.showPixelShapeBounds);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'dblclickFinish')) {\n      this.setDoubleClickFinish(!!preferences.dblclickFinish);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'autoSnapTolerance')) {\n      this.setAutoSnapTolerance(preferences.autoSnapTolerance || 8);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'crossLineVisible')) {\n      this.setCrossLineVisible(!!preferences.crossLineVisible);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'continuousMode')) {\n      this.setContinuousMode(!!preferences.continuousMode);\n    }\n    if (Object.prototype.hasOwnProperty.call(preferences, 'showCurrPosition')) {\n      this.setShowCurrPosition(!!preferences.showCurrPosition);\n    }\n  }\n\n  updatePreferences(preferences: PreferencesConfig) {\n    this.preferences = {\n      ...this.preferencesDefaultConfig,\n      ...this.preferences,\n      ...preferences,\n    };\n    // set preferences catch\n    this.catchPreferencesDebounce();\n    // immediately effective\n    this.preferencesEffectiveImmediately(preferences);\n  }\n\n  resetPreferences(preferences: string[] | null) {\n    let newPreferences: PreferencesConfig = {};\n\n    if (!preferences || preferences.length < 1) {\n      newPreferences = { ...this.preferencesDefaultConfig };\n    } else {\n      for (let index = 0; index < preferences.length; index += 1) {\n        const preferenceKey = preferences[index];\n        if (Object.prototype.hasOwnProperty.call(this.preferencesDefaultConfig, preferenceKey)) {\n          newPreferences[preferenceKey] = this.preferencesDefaultConfig[preferenceKey];\n        }\n      }\n      newPreferences = { ...this.preferences, ...newPreferences };\n    }\n\n    this.preferences = { ...newPreferences };\n    this.catchPreferencesDebounce();\n    this.preferencesEffectiveImmediately(newPreferences);\n  }\n\n  initPreferences() {\n    const preferences = cache.get(CacheKey.PREFERENCES) || {};\n    if (this.rotatable && !preferences.shapeRotateMode) {\n      preferences.shapeRotateMode = ShapeRotateMode.HANDLE;\n    }\n    this.updatePreferences(preferences);\n  }\n\n  initInexistentGraphicsCardVisibility() {\n    this.inexistentGraphicsCardVisibility = this.rootStore.frame.frameCount > 1 || cache.get(CacheKey.INEXISTENT_GRAPHICS_CARD_VISIBILITY) !== false;\n  }\n\n  updateInexistentGraphicsCardVisibility(visible: boolean) {\n    this.inexistentGraphicsCardVisibility = visible;\n    cache.set(CacheKey.INEXISTENT_GRAPHICS_CARD_VISIBILITY, visible);\n  }\n\n  keepViewScaleAndPosition() {\n    if (!this.preferences.zoomTogether) {\n      return;\n    }\n    const { currentCamera, cameraViews } = this.rootStore.frame;\n    const viewScale = this.viewScales[currentCamera];\n    const viewPosition = this.viewPositions[currentCamera];\n    const allCameraViews = Object.values(cameraViews);\n    for (let i = 0; i < allCameraViews.length; i += 1) {\n      const cameraView = allCameraViews[i];\n      if (cameraView.id !== currentCamera) {\n        // not current camera\n        cameraView.firstLoaded = true;\n        if (cameraView.viewScale !== viewScale) {\n          cameraView.viewScale = viewScale;\n        }\n        const position = cameraView.getStagePosition();\n        if (position.x !== viewPosition.x || position.y !== viewPosition.y) {\n          cameraView.setStagePosition(viewPosition.x, viewPosition.y);\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}