{"ast":null,"code":"/*!\n * @pixi/canvas-renderer - v6.2.2\n * Compiled Wed, 26 Jan 2022 16:23:27 UTC\n *\n * @pixi/canvas-renderer is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture, BaseRenderTexture, CanvasResource, AbstractRenderer, Renderer, BaseTexture, Texture } from '@pixi/core';\nimport { deprecation, CanvasRenderTarget, hex2string, rgb2hex, sayHello, hex2rgb } from '@pixi/utils';\nimport { SHAPES, Matrix } from '@pixi/math';\nimport { BLEND_MODES, SCALE_MODES, RENDERER_TYPE } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\nvar CanvasMaskManager = /** @class */function () {\n  /** @param renderer - A reference to the current renderer */\n  function CanvasMaskManager(renderer) {\n    this._foundShapes = [];\n    this.renderer = renderer;\n  }\n  /**\n   * This method adds it to the current stack of masks.\n   *\n   * @param maskData - the maskData that will be pushed\n   */\n  CanvasMaskManager.prototype.pushMask = function (maskData) {\n    var renderer = this.renderer;\n    var maskObject = maskData.maskObject || maskData;\n    renderer.context.save();\n    // TODO support sprite alpha masks??\n    // lots of effort required. If demand is great enough..\n    var foundShapes = this._foundShapes;\n    this.recursiveFindShapes(maskObject, foundShapes);\n    if (foundShapes.length > 0) {\n      var context = renderer.context;\n      context.beginPath();\n      for (var i = 0; i < foundShapes.length; i++) {\n        var shape = foundShapes[i];\n        var transform = shape.transform.worldTransform;\n        this.renderer.setContextTransform(transform);\n        this.renderGraphicsShape(shape);\n      }\n      foundShapes.length = 0;\n      context.clip();\n    }\n  };\n  /**\n   * Renders all PIXI.Graphics shapes in a subtree.\n   *\n   * @param container - container to scan.\n   * @param out - where to put found shapes\n   */\n  CanvasMaskManager.prototype.recursiveFindShapes = function (container, out) {\n    if (container.geometry && container.geometry.graphicsData) {\n      out.push(container);\n    }\n    var children = container.children;\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        this.recursiveFindShapes(children[i], out);\n      }\n    }\n  };\n  /**\n   * Renders a PIXI.Graphics shape.\n   *\n   * @param graphics - The object to render.\n   */\n  CanvasMaskManager.prototype.renderGraphicsShape = function (graphics) {\n    graphics.finishPoly();\n    var context = this.renderer.context;\n    var graphicsData = graphics.geometry.graphicsData;\n    var len = graphicsData.length;\n    if (len === 0) {\n      return;\n    }\n    for (var i = 0; i < len; i++) {\n      var data = graphicsData[i];\n      var shape = data.shape;\n      if (shape.type === SHAPES.POLY) {\n        var points = shape.points;\n        var holes = data.holes;\n        var outerArea = void 0;\n        var innerArea = void 0;\n        var px = void 0;\n        var py = void 0;\n        context.moveTo(points[0], points[1]);\n        for (var j = 1; j < points.length / 2; j++) {\n          context.lineTo(points[j * 2], points[j * 2 + 1]);\n        }\n        if (holes.length > 0) {\n          outerArea = 0;\n          px = points[0];\n          py = points[1];\n          for (var j = 2; j + 2 < points.length; j += 2) {\n            outerArea += (points[j] - px) * (points[j + 3] - py) - (points[j + 2] - px) * (points[j + 1] - py);\n          }\n          for (var k = 0; k < holes.length; k++) {\n            points = holes[k].shape.points;\n            if (!points) {\n              continue;\n            }\n            innerArea = 0;\n            px = points[0];\n            py = points[1];\n            for (var j = 2; j + 2 < points.length; j += 2) {\n              innerArea += (points[j] - px) * (points[j + 3] - py) - (points[j + 2] - px) * (points[j + 1] - py);\n            }\n            if (innerArea * outerArea < 0) {\n              context.moveTo(points[0], points[1]);\n              for (var j = 2; j < points.length; j += 2) {\n                context.lineTo(points[j], points[j + 1]);\n              }\n            } else {\n              context.moveTo(points[points.length - 2], points[points.length - 1]);\n              for (var j = points.length - 4; j >= 0; j -= 2) {\n                context.lineTo(points[j], points[j + 1]);\n              }\n            }\n            if (holes[k].shape.closeStroke) {\n              context.closePath();\n            }\n          }\n        }\n        // if the first and last point are the same close the path - much neater :)\n        if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1]) {\n          context.closePath();\n        }\n      } else if (shape.type === SHAPES.RECT) {\n        context.rect(shape.x, shape.y, shape.width, shape.height);\n        context.closePath();\n      } else if (shape.type === SHAPES.CIRC) {\n        // TODO - need to be Undefined!\n        context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n        context.closePath();\n      } else if (shape.type === SHAPES.ELIP) {\n        // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n        var w = shape.width * 2;\n        var h = shape.height * 2;\n        var x = shape.x - w / 2;\n        var y = shape.y - h / 2;\n        var kappa = 0.5522848;\n        var ox = w / 2 * kappa; // control point offset horizontal\n        var oy = h / 2 * kappa; // control point offset vertical\n        var xe = x + w; // x-end\n        var ye = y + h; // y-end\n        var xm = x + w / 2; // x-middle\n        var ym = y + h / 2; // y-middle\n        context.moveTo(x, ym);\n        context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n        context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n        context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n        context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n        context.closePath();\n      } else if (shape.type === SHAPES.RREC) {\n        var rx = shape.x;\n        var ry = shape.y;\n        var width = shape.width;\n        var height = shape.height;\n        var radius = shape.radius;\n        var maxRadius = Math.min(width, height) / 2;\n        radius = radius > maxRadius ? maxRadius : radius;\n        context.moveTo(rx, ry + radius);\n        context.lineTo(rx, ry + height - radius);\n        context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n        context.lineTo(rx + width - radius, ry + height);\n        context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n        context.lineTo(rx + width, ry + radius);\n        context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n        context.lineTo(rx + radius, ry);\n        context.quadraticCurveTo(rx, ry, rx, ry + radius);\n        context.closePath();\n      }\n    }\n  };\n  /**\n   * Restores the current drawing context to the state it was before the mask was applied.\n   *\n   * @param renderer - The renderer context to use.\n   */\n  CanvasMaskManager.prototype.popMask = function (renderer) {\n    renderer.context.restore();\n    renderer.invalidateBlendMode();\n  };\n  /** Destroys this canvas mask manager. */\n  CanvasMaskManager.prototype.destroy = function () {\n    /* empty */\n  };\n  return CanvasMaskManager;\n}();\n\n/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\nfunction createColoredCanvas(color) {\n  var canvas = document.createElement('canvas');\n  canvas.width = 6;\n  canvas.height = 1;\n  var context = canvas.getContext('2d');\n  context.fillStyle = color;\n  context.fillRect(0, 0, 6, 1);\n  return canvas;\n}\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\nfunction canUseNewCanvasBlendModes() {\n  if (typeof document === 'undefined') {\n    return false;\n  }\n  var magenta = createColoredCanvas('#ff00ff');\n  var yellow = createColoredCanvas('#ffff00');\n  var canvas = document.createElement('canvas');\n  canvas.width = 6;\n  canvas.height = 1;\n  var context = canvas.getContext('2d');\n  context.globalCompositeOperation = 'multiply';\n  context.drawImage(magenta, 0, 0);\n  context.drawImage(yellow, 2, 0);\n  var imageData = context.getImageData(2, 0, 1, 1);\n  if (!imageData) {\n    return false;\n  }\n  var data = imageData.data;\n  return data[0] === 255 && data[1] === 0 && data[2] === 0;\n}\n\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\nfunction mapCanvasBlendModesToPixi(array) {\n  if (array === void 0) {\n    array = [];\n  }\n  if (canUseNewCanvasBlendModes()) {\n    array[BLEND_MODES.NORMAL] = 'source-over';\n    array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n    array[BLEND_MODES.MULTIPLY] = 'multiply';\n    array[BLEND_MODES.SCREEN] = 'screen';\n    array[BLEND_MODES.OVERLAY] = 'overlay';\n    array[BLEND_MODES.DARKEN] = 'darken';\n    array[BLEND_MODES.LIGHTEN] = 'lighten';\n    array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n    array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n    array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n    array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n    array[BLEND_MODES.DIFFERENCE] = 'difference';\n    array[BLEND_MODES.EXCLUSION] = 'exclusion';\n    array[BLEND_MODES.HUE] = 'hue';\n    array[BLEND_MODES.SATURATION] = 'saturate';\n    array[BLEND_MODES.COLOR] = 'color';\n    array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n  } else {\n    // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n    array[BLEND_MODES.NORMAL] = 'source-over';\n    array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n    array[BLEND_MODES.MULTIPLY] = 'source-over';\n    array[BLEND_MODES.SCREEN] = 'source-over';\n    array[BLEND_MODES.OVERLAY] = 'source-over';\n    array[BLEND_MODES.DARKEN] = 'source-over';\n    array[BLEND_MODES.LIGHTEN] = 'source-over';\n    array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n    array[BLEND_MODES.COLOR_BURN] = 'source-over';\n    array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n    array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n    array[BLEND_MODES.DIFFERENCE] = 'source-over';\n    array[BLEND_MODES.EXCLUSION] = 'source-over';\n    array[BLEND_MODES.HUE] = 'source-over';\n    array[BLEND_MODES.SATURATION] = 'source-over';\n    array[BLEND_MODES.COLOR] = 'source-over';\n    array[BLEND_MODES.LUMINOSITY] = 'source-over';\n  }\n  // not-premultiplied, only for webgl\n  array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n  array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n  array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN];\n  // composite operations\n  array[BLEND_MODES.SRC_IN] = 'source-in';\n  array[BLEND_MODES.SRC_OUT] = 'source-out';\n  array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n  array[BLEND_MODES.DST_OVER] = 'destination-over';\n  array[BLEND_MODES.DST_IN] = 'destination-in';\n  array[BLEND_MODES.DST_OUT] = 'destination-out';\n  array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n  array[BLEND_MODES.XOR] = 'xor';\n  // SUBTRACT from flash, does not exist in canvas\n  array[BLEND_MODES.SUBTRACT] = 'source-over';\n  return array;\n}\nvar tempMatrix = new Matrix();\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nvar CanvasRenderer = /** @class */function (_super) {\n  __extends(CanvasRenderer, _super);\n  /**\n   * @param options - The optional renderer parameters\n   * @param {number} [options.width=800] - the width of the screen\n   * @param {number} [options.height=600] - the height of the screen\n   * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n   * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n   *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n   *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n   * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n   *   resolutions other than 1\n   * @param {boolean} [options.antialias=false] - sets antialias\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n   * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n   *  enable this if you need to call toDataUrl on the webgl context.\n   * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n   *      not before the new render pass.\n   * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n   *  (shown if not transparent).\n   * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n   */\n  function CanvasRenderer(options) {\n    var _this = _super.call(this, RENDERER_TYPE.CANVAS, options) || this;\n    /** Boolean flag controlling canvas refresh. */\n    _this.refresh = true;\n    /**\n     * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n     * @member {PIXI.CanvasMaskManager}\n     */\n    _this.maskManager = new CanvasMaskManager(_this);\n    /** The canvas property used to set the canvas smoothing property. */\n    _this.smoothProperty = 'imageSmoothingEnabled';\n    /** Tracks the blend modes useful for this renderer. */\n    _this.blendModes = mapCanvasBlendModesToPixi();\n    _this.renderingToScreen = false;\n    _this._activeBlendMode = null;\n    /** Projection transform, passed in render() stored here */\n    _this._projTransform = null;\n    /** @private */\n    _this._outerBlend = false;\n    _this.rootContext = _this.view.getContext('2d', {\n      alpha: _this.useContextAlpha\n    });\n    _this.context = _this.rootContext;\n    if (!_this.rootContext.imageSmoothingEnabled) {\n      var rc = _this.rootContext;\n      if (rc.webkitImageSmoothingEnabled) {\n        _this.smoothProperty = 'webkitImageSmoothingEnabled';\n      } else if (rc.mozImageSmoothingEnabled) {\n        _this.smoothProperty = 'mozImageSmoothingEnabled';\n      } else if (rc.oImageSmoothingEnabled) {\n        _this.smoothProperty = 'oImageSmoothingEnabled';\n      } else if (rc.msImageSmoothingEnabled) {\n        _this.smoothProperty = 'msImageSmoothingEnabled';\n      }\n    }\n    _this.initPlugins(CanvasRenderer.__plugins);\n    sayHello('Canvas');\n    _this.resize(_this.options.width, _this.options.height);\n    return _this;\n  }\n  /** @ignore */\n  CanvasRenderer.prototype.render = function (displayObject, options) {\n    if (!this.view) {\n      return;\n    }\n    var renderTexture;\n    var clear;\n    var transform;\n    var skipUpdateTransform;\n    if (options) {\n      if (options instanceof RenderTexture || options instanceof BaseRenderTexture) {\n        deprecation('6.0.0', 'CanvasRenderer#render arguments changed, use options instead.');\n        /* eslint-disable prefer-rest-params */\n        renderTexture = options;\n        clear = arguments[2];\n        transform = arguments[3];\n        skipUpdateTransform = arguments[4];\n        /* eslint-enable prefer-rest-params */\n      } else {\n        renderTexture = options.renderTexture;\n        clear = options.clear;\n        transform = options.transform;\n        skipUpdateTransform = options.skipUpdateTransform;\n      }\n    }\n    // can be handy to know!\n    this.renderingToScreen = !renderTexture;\n    this.emit('prerender');\n    var rootResolution = this.resolution;\n    if (renderTexture) {\n      renderTexture = renderTexture.castToBaseTexture();\n      if (!renderTexture._canvasRenderTarget) {\n        renderTexture._canvasRenderTarget = new CanvasRenderTarget(renderTexture.width, renderTexture.height, renderTexture.resolution);\n        renderTexture.resource = new CanvasResource(renderTexture._canvasRenderTarget.canvas);\n        renderTexture.valid = true;\n      }\n      this.context = renderTexture._canvasRenderTarget.context;\n      this.resolution = renderTexture._canvasRenderTarget.resolution;\n    } else {\n      this.context = this.rootContext;\n    }\n    var context = this.context;\n    this._projTransform = transform || null;\n    if (!renderTexture) {\n      this._lastObjectRendered = displayObject;\n    }\n    if (!skipUpdateTransform) {\n      // update the scene graph\n      var cacheParent = displayObject.enableTempParent();\n      displayObject.updateTransform();\n      displayObject.disableTempParent(cacheParent);\n    }\n    context.save();\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.globalAlpha = 1;\n    this._activeBlendMode = BLEND_MODES.NORMAL;\n    this._outerBlend = false;\n    context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n    if (clear !== undefined ? clear : this.clearBeforeRender) {\n      if (this.renderingToScreen) {\n        context.clearRect(0, 0, this.width, this.height);\n        if (this.backgroundAlpha > 0) {\n          context.globalAlpha = this.useContextAlpha ? this.backgroundAlpha : 1;\n          context.fillStyle = this._backgroundColorString;\n          context.fillRect(0, 0, this.width, this.height);\n          context.globalAlpha = 1;\n        }\n      } else {\n        renderTexture = renderTexture;\n        renderTexture._canvasRenderTarget.clear();\n        var clearColor = renderTexture.clearColor;\n        if (clearColor[3] > 0) {\n          context.globalAlpha = this.useContextAlpha ? clearColor[3] : 1;\n          context.fillStyle = hex2string(rgb2hex(clearColor));\n          context.fillRect(0, 0, renderTexture.realWidth, renderTexture.realHeight);\n          context.globalAlpha = 1;\n        }\n      }\n    }\n    // TODO RENDER TARGET STUFF HERE..\n    var tempContext = this.context;\n    this.context = context;\n    displayObject.renderCanvas(this);\n    this.context = tempContext;\n    context.restore();\n    this.resolution = rootResolution;\n    this._projTransform = null;\n    this.emit('postrender');\n  };\n  /**\n   * Sets matrix of context.\n   * called only from render() methods\n   * takes care about resolution\n   * @param transform - world matrix of current element\n   * @param roundPixels - whether to round (tx,ty) coords\n   * @param localResolution - If specified, used instead of `renderer.resolution` for local scaling\n   */\n  CanvasRenderer.prototype.setContextTransform = function (transform, roundPixels, localResolution) {\n    var mat = transform;\n    var proj = this._projTransform;\n    var resolution = this.resolution;\n    localResolution = localResolution || resolution;\n    if (proj) {\n      mat = tempMatrix;\n      mat.copyFrom(transform);\n      mat.prepend(proj);\n    }\n    if (roundPixels) {\n      this.context.setTransform(mat.a * localResolution, mat.b * localResolution, mat.c * localResolution, mat.d * localResolution, mat.tx * resolution | 0, mat.ty * resolution | 0);\n    } else {\n      this.context.setTransform(mat.a * localResolution, mat.b * localResolution, mat.c * localResolution, mat.d * localResolution, mat.tx * resolution, mat.ty * resolution);\n    }\n  };\n  /**\n   * Clear the canvas of renderer.\n   *\n   * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n   * @param {number} [alpha] - Alpha to apply to the background fill color.\n   */\n  CanvasRenderer.prototype.clear = function (clearColor, alpha) {\n    if (clearColor === void 0) {\n      clearColor = this._backgroundColorString;\n    }\n    if (alpha === void 0) {\n      alpha = this.backgroundAlpha;\n    }\n    var context = this.context;\n    context.clearRect(0, 0, this.width, this.height);\n    if (clearColor) {\n      context.globalAlpha = this.useContextAlpha ? alpha : 1;\n      context.fillStyle = clearColor;\n      context.fillRect(0, 0, this.width, this.height);\n      context.globalAlpha = 1;\n    }\n  };\n  /**\n   * Sets the blend mode of the renderer.\n   *\n   * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n   * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n   * Pass `true` only if you are ready to use them.\n   */\n  CanvasRenderer.prototype.setBlendMode = function (blendMode, readyForOuterBlend) {\n    var outerBlend = blendMode === BLEND_MODES.SRC_IN || blendMode === BLEND_MODES.SRC_OUT || blendMode === BLEND_MODES.DST_IN || blendMode === BLEND_MODES.DST_ATOP;\n    if (!readyForOuterBlend && outerBlend) {\n      blendMode = BLEND_MODES.NORMAL;\n    }\n    if (this._activeBlendMode === blendMode) {\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    this._outerBlend = outerBlend;\n    this.context.globalCompositeOperation = this.blendModes[blendMode];\n  };\n  /**\n   * Removes everything from the renderer and optionally removes the Canvas DOM element.\n   *\n   * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n   */\n  CanvasRenderer.prototype.destroy = function (removeView) {\n    // call the base destroy\n    _super.prototype.destroy.call(this, removeView);\n    this.context = null;\n    this.refresh = true;\n    this.maskManager.destroy();\n    this.maskManager = null;\n    this.smoothProperty = null;\n  };\n  /**\n   * Resizes the canvas view to the specified width and height.\n   *\n   * @extends PIXI.AbstractRenderer#resize\n   *\n   * @param desiredScreenWidth - the desired width of the screen\n   * @param desiredScreenHeight - the desired height of the screen\n   */\n  CanvasRenderer.prototype.resize = function (desiredScreenWidth, desiredScreenHeight) {\n    _super.prototype.resize.call(this, desiredScreenWidth, desiredScreenHeight);\n    // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n    // surely a browser bug?? Let PixiJS fix that for you..\n    if (this.smoothProperty) {\n      this.rootContext[this.smoothProperty] = settings.SCALE_MODE === SCALE_MODES.LINEAR;\n    }\n  };\n  /** Checks if blend mode has changed. */\n  CanvasRenderer.prototype.invalidateBlendMode = function () {\n    this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n  };\n  /**\n   * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n   * by creating a custom build. Consult the README for more information about creating custom\n   * builds and excluding plugins.\n   * @member {object} plugins\n   * @readonly\n   * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.\n   * @property {PIXI.CanvasExtract} extract Extract image data from renderer.\n   * @property {PIXI.InteractionManager} interaction Handles mouse, touch and pointer events.\n   * @property {PIXI.CanvasPrepare} prepare Pre-render display objects.\n   */\n  /**\n   * Adds a plugin to the renderer.\n   *\n   * @param pluginName - The name of the plugin.\n   * @param ctor - The constructor function or class for the plugin.\n   */\n  CanvasRenderer.registerPlugin = function (pluginName, ctor) {\n    CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n    CanvasRenderer.__plugins[pluginName] = ctor;\n  };\n  return CanvasRenderer;\n}(AbstractRenderer);\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\nvar canvasUtils = {\n  canvas: null,\n  /**\n   * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Sprite} sprite - the sprite to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @return {HTMLCanvasElement} The tinted canvas\n   */\n  getTintedCanvas: function (sprite, color) {\n    var texture = sprite.texture;\n    color = canvasUtils.roundColor(color);\n    var stringColor = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    texture.tintCache = texture.tintCache || {};\n    var cachedCanvas = texture.tintCache[stringColor];\n    var canvas;\n    if (cachedCanvas) {\n      if (cachedCanvas.tintId === texture._updateID) {\n        return texture.tintCache[stringColor];\n      }\n      canvas = texture.tintCache[stringColor];\n    } else {\n      canvas = document.createElement('canvas');\n    }\n    canvasUtils.tintMethod(texture, color, canvas);\n    canvas.tintId = texture._updateID;\n    if (canvasUtils.convertTintToImage) {\n      // is this better?\n      var tintImage = new Image();\n      tintImage.src = canvas.toDataURL();\n      texture.tintCache[stringColor] = tintImage;\n    } else {\n      texture.tintCache[stringColor] = canvas;\n    }\n    return canvas;\n  },\n  /**\n   * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Texture} texture - the sprite to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @return {HTMLCanvasElement} The tinted canvas\n   */\n  getTintedPattern: function (texture, color) {\n    color = canvasUtils.roundColor(color);\n    var stringColor = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    texture.patternCache = texture.patternCache || {};\n    var pattern = texture.patternCache[stringColor];\n    if (pattern && pattern.tintId === texture._updateID) {\n      return pattern;\n    }\n    if (!canvasUtils.canvas) {\n      canvasUtils.canvas = document.createElement('canvas');\n    }\n    canvasUtils.tintMethod(texture, color, canvasUtils.canvas);\n    pattern = canvasUtils.canvas.getContext('2d').createPattern(canvasUtils.canvas, 'repeat');\n    pattern.tintId = texture._updateID;\n    texture.patternCache[stringColor] = pattern;\n    return pattern;\n  },\n  /**\n   * Tint a texture using the 'multiply' operation.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithMultiply: function (texture, color, canvas) {\n    var context = canvas.getContext('2d');\n    var crop = texture._frame.clone();\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.fillStyle = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    context.fillRect(0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'multiply';\n    var source = texture.baseTexture.getDrawableSource();\n    context.drawImage(source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'destination-atop';\n    context.drawImage(source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.restore();\n  },\n  /**\n   * Tint a texture using the 'overlay' operation.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithOverlay: function (texture, color, canvas) {\n    var context = canvas.getContext('2d');\n    var crop = texture._frame.clone();\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.globalCompositeOperation = 'copy';\n    context.fillStyle = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    context.fillRect(0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'destination-atop';\n    context.drawImage(texture.baseTexture.getDrawableSource(), crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    // context.globalCompositeOperation = 'copy';\n    context.restore();\n  },\n  /**\n   * Tint a texture pixel per pixel.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithPerPixel: function (texture, color, canvas) {\n    var context = canvas.getContext('2d');\n    var crop = texture._frame.clone();\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.globalCompositeOperation = 'copy';\n    context.drawImage(texture.baseTexture.getDrawableSource(), crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.restore();\n    var rgbValues = hex2rgb(color);\n    var r = rgbValues[0];\n    var g = rgbValues[1];\n    var b = rgbValues[2];\n    var pixelData = context.getImageData(0, 0, crop.width, crop.height);\n    var pixels = pixelData.data;\n    for (var i = 0; i < pixels.length; i += 4) {\n      pixels[i + 0] *= r;\n      pixels[i + 1] *= g;\n      pixels[i + 2] *= b;\n    }\n    context.putImageData(pixelData, 0, 0);\n  },\n  /**\n   * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {number} color - the color to round, should be a hex color\n   * @return {number} The rounded color.\n   */\n  roundColor: function (color) {\n    var step = canvasUtils.cacheStepsPerColorChannel;\n    var rgbValues = hex2rgb(color);\n    rgbValues[0] = Math.min(255, rgbValues[0] / step * step);\n    rgbValues[1] = Math.min(255, rgbValues[1] / step * step);\n    rgbValues[2] = Math.min(255, rgbValues[2] / step * step);\n    return rgb2hex(rgbValues);\n  },\n  /**\n   * Number of steps which will be used as a cap when rounding colors.\n   *\n   * @memberof PIXI.canvasUtils\n   * @type {number}\n   */\n  cacheStepsPerColorChannel: 8,\n  /**\n   * Tint cache boolean flag.\n   *\n   * @memberof PIXI.canvasUtils\n   * @type {boolean}\n   */\n  convertTintToImage: false,\n  /**\n   * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n   *\n   * @memberof PIXI.canvasUtils\n   * @type {boolean}\n   */\n  canUseMultiply: canUseNewCanvasBlendModes(),\n  /**\n   * The tinting method that will be used.\n   *\n   * @memberof PIXI.canvasUtils\n   * @type {Function}\n   */\n  tintMethod: null\n};\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel;\n\n// Reference to Renderer.create static function\nvar parentCreate = Renderer.create;\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\nRenderer.create = function create(options) {\n  var forceCanvas = options && options.forceCanvas;\n  if (!forceCanvas) {\n    try {\n      return parentCreate(options);\n    } catch (err) {\n      // swallow WebGL-unsupported error\n    }\n  }\n  return new CanvasRenderer(options);\n};\n\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\nBaseTexture.prototype.getDrawableSource = function getDrawableSource() {\n  var resource = this.resource;\n  return resource ? resource.bitmap || resource.source : null;\n};\n/**\n * A reference to the canvas render target (we only need one as this can be shared across renderers)\n *\n * @protected\n * @member {PIXI.utils.CanvasRenderTarget} _canvasRenderTarget\n * @memberof PIXI.BaseRenderTexture#\n */\nBaseRenderTexture.prototype._canvasRenderTarget = null;\nTexture.prototype.patternCache = null;\nTexture.prototype.tintCache = null;\nexport { CanvasRenderer, canUseNewCanvasBlendModes, canvasUtils };","map":{"version":3,"sources":["../../../../../node_modules/tslib/tslib.es6.js","../../src/utils/CanvasMaskManager.ts","../../src/utils/canUseNewCanvasBlendModes.ts","../../src/utils/mapCanvasBlendModesToPixi.ts","../../src/CanvasRenderer.ts","../../src/canvasUtils.ts","../../src/Renderer.ts","../../src/BaseTexture.ts"],"names":[],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Polygon, SHAPES } from '@pixi/math';\n\nimport type { CanvasRenderer } from '../CanvasRenderer';\nimport type { Graphics } from '@pixi/graphics';\nimport type { MaskData } from '@pixi/core';\nimport type { Container } from '@pixi/display';\n\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasMaskManager\n{\n    /** A reference to the current renderer */\n    private renderer: CanvasRenderer;\n    private _foundShapes: Array<Graphics> = [];\n\n    /** @param renderer - A reference to the current renderer */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * This method adds it to the current stack of masks.\n     *\n     * @param maskData - the maskData that will be pushed\n     */\n    pushMask(maskData: MaskData | Graphics): void\n    {\n        const renderer = this.renderer;\n        const maskObject = ((maskData as MaskData).maskObject || maskData) as Container;\n\n        renderer.context.save();\n\n        // TODO support sprite alpha masks??\n        // lots of effort required. If demand is great enough..\n\n        const foundShapes = this._foundShapes;\n\n        this.recursiveFindShapes(maskObject, foundShapes);\n        if (foundShapes.length > 0)\n        {\n            const { context } = renderer;\n\n            context.beginPath();\n\n            for (let i = 0; i < foundShapes.length; i++)\n            {\n                const shape = foundShapes[i];\n                const transform = shape.transform.worldTransform;\n\n                this.renderer.setContextTransform(transform);\n\n                this.renderGraphicsShape(shape);\n            }\n\n            foundShapes.length = 0;\n            context.clip();\n        }\n    }\n\n    /**\n     * Renders all PIXI.Graphics shapes in a subtree.\n     *\n     * @param container - container to scan.\n     * @param out - where to put found shapes\n     */\n    recursiveFindShapes(container: Container, out: Array<Graphics>): void\n    {\n        if ((container as Graphics).geometry && (container as Graphics).geometry.graphicsData)\n        {\n            out.push(container as Graphics);\n        }\n\n        const { children } = container;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.recursiveFindShapes(children[i] as Container, out);\n            }\n        }\n    }\n\n    /**\n     * Renders a PIXI.Graphics shape.\n     *\n     * @param graphics - The object to render.\n     */\n    renderGraphicsShape(graphics: Graphics): void\n    {\n        graphics.finishPoly();\n\n        const context = this.renderer.context;\n        const graphicsData = graphics.geometry.graphicsData;\n        const len = graphicsData.length;\n\n        if (len === 0)\n        {\n            return;\n        }\n\n        for (let i = 0; i < len; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n\n            if (shape.type === SHAPES.POLY)\n            {\n                let points = shape.points;\n                const holes = data.holes;\n                let outerArea;\n                let innerArea;\n                let px;\n                let py;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 1; j < points.length / 2; j++)\n                {\n                    context.lineTo(points[j * 2], points[(j * 2) + 1]);\n                }\n                if (holes.length > 0)\n                {\n                    outerArea = 0;\n                    px = points[0];\n                    py = points[1];\n                    for (let j = 2; j + 2 < points.length; j += 2)\n                    {\n                        outerArea += ((points[j] - px) * (points[j + 3] - py))\n                            - ((points[j + 2] - px) * (points[j + 1] - py));\n                    }\n\n                    for (let k = 0; k < holes.length; k++)\n                    {\n                        points = (holes[k].shape as Polygon).points;\n\n                        if (!points)\n                        {\n                            continue;\n                        }\n\n                        innerArea = 0;\n                        px = points[0];\n                        py = points[1];\n                        for (let j = 2; j + 2 < points.length; j += 2)\n                        {\n                            innerArea += ((points[j] - px) * (points[j + 3] - py))\n                                - ((points[j + 2] - px) * (points[j + 1] - py));\n                        }\n\n                        if (innerArea * outerArea < 0)\n                        {\n                            context.moveTo(points[0], points[1]);\n\n                            for (let j = 2; j < points.length; j += 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n                        else\n                        {\n                            context.moveTo(points[points.length - 2], points[points.length - 1]);\n\n                            for (let j = points.length - 4; j >= 0; j -= 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n\n                        if ((holes[k].shape as Polygon).closeStroke)\n                        {\n                            context.closePath();\n                        }\n                    }\n                }\n                // if the first and last point are the same close the path - much neater :)\n                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1])\n                {\n                    context.closePath();\n                }\n            }\n            else if (shape.type === SHAPES.RECT)\n            {\n                context.rect(shape.x, shape.y, shape.width, shape.height);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w; // x-end\n                const ye = y + h; // y-end\n                const xm = x + (w / 2); // x-middle\n                const ym = y + (h / 2); // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n            }\n        }\n    }\n\n    /**\n     * Restores the current drawing context to the state it was before the mask was applied.\n     *\n     * @param renderer - The renderer context to use.\n     */\n    popMask(renderer: CanvasRenderer): void\n    {\n        renderer.context.restore();\n        renderer.invalidateBlendMode();\n    }\n\n    /** Destroys this canvas mask manager. */\n    public destroy(): void\n    {\n        /* empty */\n    }\n}\n","/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\nfunction createColoredCanvas(color: string): HTMLCanvasElement\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\nexport function canUseNewCanvasBlendModes(): boolean\n{\n    if (typeof document === 'undefined')\n    {\n        return false;\n    }\n\n    const magenta = createColoredCanvas('#ff00ff');\n    const yellow = createColoredCanvas('#ffff00');\n\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.globalCompositeOperation = 'multiply';\n    context.drawImage(magenta, 0, 0);\n    context.drawImage(yellow, 2, 0);\n\n    const imageData = context.getImageData(2, 0, 1, 1);\n\n    if (!imageData)\n    {\n        return false;\n    }\n\n    const data = imageData.data;\n\n    return (data[0] === 255 && data[1] === 0 && data[2] === 0);\n}\n","import { BLEND_MODES } from '@pixi/constants';\nimport { canUseNewCanvasBlendModes } from './canUseNewCanvasBlendModes';\n\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\nexport function mapCanvasBlendModesToPixi(array: string[] = []): string[]\n{\n    if (canUseNewCanvasBlendModes())\n    {\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'multiply';\n        array[BLEND_MODES.SCREEN] = 'screen';\n        array[BLEND_MODES.OVERLAY] = 'overlay';\n        array[BLEND_MODES.DARKEN] = 'darken';\n        array[BLEND_MODES.LIGHTEN] = 'lighten';\n        array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n        array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n        array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n        array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n        array[BLEND_MODES.DIFFERENCE] = 'difference';\n        array[BLEND_MODES.EXCLUSION] = 'exclusion';\n        array[BLEND_MODES.HUE] = 'hue';\n        array[BLEND_MODES.SATURATION] = 'saturate';\n        array[BLEND_MODES.COLOR] = 'color';\n        array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n    }\n    else\n    {\n        // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'source-over';\n        array[BLEND_MODES.SCREEN] = 'source-over';\n        array[BLEND_MODES.OVERLAY] = 'source-over';\n        array[BLEND_MODES.DARKEN] = 'source-over';\n        array[BLEND_MODES.LIGHTEN] = 'source-over';\n        array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n        array[BLEND_MODES.COLOR_BURN] = 'source-over';\n        array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n        array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n        array[BLEND_MODES.DIFFERENCE] = 'source-over';\n        array[BLEND_MODES.EXCLUSION] = 'source-over';\n        array[BLEND_MODES.HUE] = 'source-over';\n        array[BLEND_MODES.SATURATION] = 'source-over';\n        array[BLEND_MODES.COLOR] = 'source-over';\n        array[BLEND_MODES.LUMINOSITY] = 'source-over';\n    }\n    // not-premultiplied, only for webgl\n    array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n    array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n    array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = 'source-in';\n    array[BLEND_MODES.SRC_OUT] = 'source-out';\n    array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n    array[BLEND_MODES.DST_OVER] = 'destination-over';\n    array[BLEND_MODES.DST_IN] = 'destination-in';\n    array[BLEND_MODES.DST_OUT] = 'destination-out';\n    array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n    array[BLEND_MODES.XOR] = 'xor';\n\n    // SUBTRACT from flash, does not exist in canvas\n    array[BLEND_MODES.SUBTRACT] = 'source-over';\n\n    return array;\n}\n","import { AbstractRenderer, CanvasResource, RenderTexture, BaseRenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello, rgb2hex, hex2string, deprecation } from '@pixi/utils';\nimport { CanvasMaskManager } from './utils/CanvasMaskManager';\nimport { mapCanvasBlendModesToPixi } from './utils/mapCanvasBlendModesToPixi';\nimport { RENDERER_TYPE, SCALE_MODES, BLEND_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { Matrix } from '@pixi/math';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type {\n    IRendererOptions,\n    IRendererPlugin,\n    IRendererPlugins,\n    IRendererRenderOptions\n} from '@pixi/core';\n\nconst tempMatrix = new Matrix();\n\nexport interface ICanvasRendererPluginConstructor {\n    new (renderer: CanvasRenderer, options?: any): IRendererPlugin;\n}\n\nexport interface ICanvasRendererPlugins\n{\n    [key: string]: any;\n}\n\n/*\n * Different browsers support different smoothing property names\n * this is the list of all platform props.\n */\ntype SmoothingEnabledProperties =\n    'imageSmoothingEnabled' |\n    'webkitImageSmoothingEnabled' |\n    'mozImageSmoothingEnabled' |\n    'oImageSmoothingEnabled' |\n    'msImageSmoothingEnabled';\n\n/**\n * Rendering context for all browsers. This includes platform-specific\n * properties that are not included in the spec for CanvasRenderingContext2D\n * @private\n */\nexport interface CrossPlatformCanvasRenderingContext2D extends CanvasRenderingContext2D\n{\n    webkitImageSmoothingEnabled: boolean;\n    mozImageSmoothingEnabled: boolean;\n    oImageSmoothingEnabled: boolean;\n    msImageSmoothingEnabled: boolean;\n}\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nexport class CanvasRenderer extends AbstractRenderer\n{\n    /**\n     * Fired after rendering finishes.\n     * @event PIXI.CanvasRenderer#postrender\n     */\n    /**\n     * Fired before rendering starts.\n     * @event PIXI.CanvasRenderer#prerender\n     */\n\n    /** The root canvas 2d context that everything is drawn with. */\n    public readonly rootContext: CrossPlatformCanvasRenderingContext2D;\n    /** The currently active canvas 2d context (could change with renderTextures) */\n    public context: CrossPlatformCanvasRenderingContext2D;\n    /** Boolean flag controlling canvas refresh. */\n    public refresh = true;\n    /**\n     * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n     * @member {PIXI.CanvasMaskManager}\n     */\n    public maskManager: CanvasMaskManager = new CanvasMaskManager(this);\n    /** The canvas property used to set the canvas smoothing property. */\n    public smoothProperty: SmoothingEnabledProperties = 'imageSmoothingEnabled';\n    /** Tracks the blend modes useful for this renderer. */\n    public readonly blendModes: string[] = mapCanvasBlendModesToPixi();\n    public renderingToScreen = false;\n\n    private _activeBlendMode: BLEND_MODES =null;\n    /** Projection transform, passed in render() stored here */\n    private _projTransform: Matrix = null;\n\n    /** @private */\n    _outerBlend = false;\n\n    /**\n     * @param options - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the screen\n     * @param {number} [options.height=600] - the height of the screen\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1\n     * @param {boolean} [options.antialias=false] - sets antialias\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n     */\n    constructor(options?: IRendererOptions)\n    {\n        super(RENDERER_TYPE.CANVAS, options);\n\n        this.rootContext = this.view.getContext('2d', { alpha: this.useContextAlpha }) as\n            CrossPlatformCanvasRenderingContext2D;\n\n        this.context = this.rootContext;\n\n        if (!this.rootContext.imageSmoothingEnabled)\n        {\n            const rc = this.rootContext;\n\n            if (rc.webkitImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'webkitImageSmoothingEnabled';\n            }\n            else if (rc.mozImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'mozImageSmoothingEnabled';\n            }\n            else if (rc.oImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'oImageSmoothingEnabled';\n            }\n            else if (rc.msImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'msImageSmoothingEnabled';\n            }\n        }\n\n        this.initPlugins(CanvasRenderer.__plugins);\n\n        sayHello('Canvas');\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    /**\n     * Renders the object to its WebGL view.\n     *\n     * @param displayObject - The object to be rendered.\n     * @param options - Object to use for render options.\n     * @param {PIXI.RenderTexture} [options.renderTexture] - The render texture to render to.\n     * @param {boolean} [options.clear=true] - Should the canvas be cleared before the new render.\n     * @param {PIXI.Matrix} [options.transform] - A transform to apply to the render texture before rendering.\n     * @param {boolean} [options.skipUpdateTransform=false] - Should we skip the update transform pass?\n     */\n    render(displayObject: DisplayObject, options?: IRendererRenderOptions): void;\n\n    /**\n     * Please use the `option` render arguments instead.\n     *\n     * @deprecated Since 6.0.0\n     * @param displayObject - The object to be rendered.\n     * @param renderTexture - The render texture to render to.\n     * @param clear - Should the canvas be cleared before the new render.\n     * @param transform - A transform to apply to the render texture before rendering.\n     * @param skipUpdateTransform - Should we skip the update transform pass?\n     */\n    render(displayObject: DisplayObject, renderTexture?: RenderTexture | BaseRenderTexture,\n        clear?: boolean, transform?: Matrix, skipUpdateTransform?: boolean): void;\n\n    /** @ignore */\n    public render(displayObject: DisplayObject, options?: IRendererRenderOptions | RenderTexture | BaseRenderTexture): void\n    {\n        if (!this.view)\n        {\n            return;\n        }\n\n        let renderTexture: BaseRenderTexture | RenderTexture;\n        let clear: boolean;\n        let transform: Matrix;\n        let skipUpdateTransform: boolean;\n\n        if (options)\n        {\n            if (options instanceof RenderTexture || options instanceof BaseRenderTexture)\n            {\n                // #if _DEBUG\n                deprecation('6.0.0', 'CanvasRenderer#render arguments changed, use options instead.');\n                // #endif\n\n                /* eslint-disable prefer-rest-params */\n                renderTexture = options;\n                clear = arguments[2];\n                transform = arguments[3];\n                skipUpdateTransform = arguments[4];\n                /* eslint-enable prefer-rest-params */\n            }\n            else\n            {\n                renderTexture = options.renderTexture;\n                clear = options.clear;\n                transform = options.transform;\n                skipUpdateTransform = options.skipUpdateTransform;\n            }\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.emit('prerender');\n\n        const rootResolution = this.resolution;\n\n        if (renderTexture)\n        {\n            renderTexture = renderTexture.castToBaseTexture() as BaseRenderTexture;\n\n            if (!renderTexture._canvasRenderTarget)\n            {\n                renderTexture._canvasRenderTarget = new CanvasRenderTarget(\n                    renderTexture.width,\n                    renderTexture.height,\n                    renderTexture.resolution\n                );\n                renderTexture.resource = new CanvasResource(renderTexture._canvasRenderTarget.canvas);\n                renderTexture.valid = true;\n            }\n\n            this.context = renderTexture._canvasRenderTarget.context as CrossPlatformCanvasRenderingContext2D;\n            this.resolution = renderTexture._canvasRenderTarget.resolution;\n        }\n        else\n        {\n            this.context = this.rootContext;\n        }\n\n        const context = this.context;\n\n        this._projTransform = transform || null;\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.enableTempParent();\n\n            displayObject.updateTransform();\n            displayObject.disableTempParent(cacheParent);\n        }\n\n        context.save();\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.globalAlpha = 1;\n        this._activeBlendMode = BLEND_MODES.NORMAL;\n        this._outerBlend = false;\n        context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            if (this.renderingToScreen)\n            {\n                context.clearRect(0, 0, this.width, this.height);\n\n                if (this.backgroundAlpha > 0)\n                {\n                    context.globalAlpha = this.useContextAlpha ? this.backgroundAlpha : 1;\n                    context.fillStyle = this._backgroundColorString;\n                    context.fillRect(0, 0, this.width, this.height);\n                    context.globalAlpha = 1;\n                }\n            }\n            else\n            {\n                renderTexture = (renderTexture as BaseRenderTexture);\n                renderTexture._canvasRenderTarget.clear();\n\n                const clearColor = renderTexture.clearColor;\n\n                if (clearColor[3] > 0)\n                {\n                    context.globalAlpha = this.useContextAlpha ? clearColor[3] : 1;\n                    context.fillStyle = hex2string(rgb2hex(clearColor));\n                    context.fillRect(0, 0, renderTexture.realWidth, renderTexture.realHeight);\n                    context.globalAlpha = 1;\n                }\n            }\n        }\n\n        // TODO RENDER TARGET STUFF HERE..\n        const tempContext = this.context;\n\n        this.context = context;\n        displayObject.renderCanvas(this);\n        this.context = tempContext;\n\n        context.restore();\n\n        this.resolution = rootResolution;\n        this._projTransform = null;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * Sets matrix of context.\n     * called only from render() methods\n     * takes care about resolution\n     * @param transform - world matrix of current element\n     * @param roundPixels - whether to round (tx,ty) coords\n     * @param localResolution - If specified, used instead of `renderer.resolution` for local scaling\n     */\n    setContextTransform(transform: Matrix, roundPixels?: boolean, localResolution?: number): void\n    {\n        let mat = transform;\n        const proj = this._projTransform;\n        const resolution = this.resolution;\n\n        localResolution = localResolution || resolution;\n\n        if (proj)\n        {\n            mat = tempMatrix;\n            mat.copyFrom(transform);\n            mat.prepend(proj);\n        }\n\n        if (roundPixels)\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                (mat.tx * resolution) | 0,\n                (mat.ty * resolution) | 0\n            );\n        }\n        else\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                mat.tx * resolution,\n                mat.ty * resolution\n            );\n        }\n    }\n\n    /**\n     * Clear the canvas of renderer.\n     *\n     * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n     * @param {number} [alpha] - Alpha to apply to the background fill color.\n     */\n    public clear(clearColor: string = this._backgroundColorString, alpha: number = this.backgroundAlpha): void\n    {\n        const { context } = this;\n\n        context.clearRect(0, 0, this.width, this.height);\n\n        if (clearColor)\n        {\n            context.globalAlpha = this.useContextAlpha ? alpha : 1;\n            context.fillStyle = clearColor;\n            context.fillRect(0, 0, this.width, this.height);\n            context.globalAlpha = 1;\n        }\n    }\n\n    /**\n     * Sets the blend mode of the renderer.\n     *\n     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n     * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n     * Pass `true` only if you are ready to use them.\n     */\n    setBlendMode(blendMode: BLEND_MODES, readyForOuterBlend?: boolean): void\n    {\n        const outerBlend = blendMode === BLEND_MODES.SRC_IN\n            || blendMode === BLEND_MODES.SRC_OUT\n            || blendMode === BLEND_MODES.DST_IN\n            || blendMode === BLEND_MODES.DST_ATOP;\n\n        if (!readyForOuterBlend && outerBlend)\n        {\n            blendMode = BLEND_MODES.NORMAL;\n        }\n\n        if (this._activeBlendMode === blendMode)\n        {\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n        this._outerBlend = outerBlend;\n        this.context.globalCompositeOperation = this.blendModes[blendMode];\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    public destroy(removeView?: boolean): void\n    {\n        // call the base destroy\n        super.destroy(removeView);\n\n        this.context = null;\n\n        this.refresh = true;\n\n        this.maskManager.destroy();\n        this.maskManager = null;\n\n        this.smoothProperty = null;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height.\n     *\n     * @extends PIXI.AbstractRenderer#resize\n     *\n     * @param desiredScreenWidth - the desired width of the screen\n     * @param desiredScreenHeight - the desired height of the screen\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        super.resize(desiredScreenWidth, desiredScreenHeight);\n\n        // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n        // surely a browser bug?? Let PixiJS fix that for you..\n        if (this.smoothProperty)\n        {\n            this.rootContext[this.smoothProperty] = (settings.SCALE_MODE === SCALE_MODES.LINEAR);\n        }\n    }\n\n    /** Checks if blend mode has changed. */\n    invalidateBlendMode(): void\n    {\n        this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n    }\n\n    static __plugins: IRendererPlugins;\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @member {object} plugins\n     * @readonly\n     * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.CanvasExtract} extract Extract image data from renderer.\n     * @property {PIXI.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.CanvasPrepare} prepare Pre-render display objects.\n     */\n\n    /**\n     * Adds a plugin to the renderer.\n     *\n     * @param pluginName - The name of the plugin.\n     * @param ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName: string, ctor: ICanvasRendererPluginConstructor): void\n    {\n        CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n        CanvasRenderer.__plugins[pluginName] = ctor;\n    }\n}\n","import { hex2rgb, rgb2hex } from '@pixi/utils';\nimport { canUseNewCanvasBlendModes } from './utils/canUseNewCanvasBlendModes';\n\nimport type { Texture } from '@pixi/core';\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\nexport const canvasUtils = {\n    canvas: null as HTMLCanvasElement,\n\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedCanvas: (sprite: { texture: Texture }, color: number): HTMLCanvasElement | HTMLImageElement =>\n    {\n        const texture = sprite.texture;\n\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.tintCache = texture.tintCache || {};\n\n        const cachedCanvas = texture.tintCache[stringColor];\n\n        let canvas: HTMLCanvasElement;\n\n        if (cachedCanvas)\n        {\n            if (cachedCanvas.tintId === texture._updateID)\n            {\n                return texture.tintCache[stringColor];\n            }\n\n            canvas = texture.tintCache[stringColor] as HTMLCanvasElement;\n        }\n        else\n        {\n            canvas = document.createElement('canvas');\n        }\n\n        canvasUtils.tintMethod(texture, color, canvas);\n\n        canvas.tintId = texture._updateID;\n\n        if (canvasUtils.convertTintToImage)\n        {\n            // is this better?\n            const tintImage = new Image();\n\n            tintImage.src = (canvas as HTMLCanvasElement).toDataURL();\n\n            texture.tintCache[stringColor] = tintImage;\n        }\n        else\n        {\n            texture.tintCache[stringColor] = canvas;\n        }\n\n        return canvas;\n    },\n\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedPattern: (texture: Texture, color: number): CanvasPattern =>\n    {\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.patternCache = texture.patternCache || {};\n\n        let pattern = texture.patternCache[stringColor];\n\n        if (pattern && pattern.tintId === texture._updateID)\n        {\n            return pattern;\n        }\n        if (!canvasUtils.canvas)\n        {\n            canvasUtils.canvas = document.createElement('canvas');\n        }\n        canvasUtils.tintMethod(texture, color, canvasUtils.canvas);\n        pattern = canvasUtils.canvas.getContext('2d').createPattern(canvasUtils.canvas, 'repeat');\n        pattern.tintId = texture._updateID;\n        texture.patternCache[stringColor] = pattern;\n\n        return pattern;\n    },\n\n    /**\n     * Tint a texture using the 'multiply' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithMultiply: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'multiply';\n\n        const source = texture.baseTexture.getDrawableSource();\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        context.globalCompositeOperation = 'destination-atop';\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n    },\n\n    /**\n     * Tint a texture using the 'overlay' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithOverlay: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'destination-atop';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        // context.globalCompositeOperation = 'copy';\n        context.restore();\n    },\n\n    /**\n     * Tint a texture pixel per pixel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithPerPixel: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n\n        const rgbValues = hex2rgb(color);\n        const r = rgbValues[0];\n        const g = rgbValues[1];\n        const b = rgbValues[2];\n\n        const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n        const pixels = pixelData.data;\n\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            pixels[i + 0] *= r;\n            pixels[i + 1] *= g;\n            pixels[i + 2] *= b;\n        }\n\n        context.putImageData(pixelData, 0, 0);\n    },\n\n    /**\n     * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {number} color - the color to round, should be a hex color\n     * @return {number} The rounded color.\n     */\n    roundColor: (color: number): number =>\n    {\n        const step = canvasUtils.cacheStepsPerColorChannel;\n\n        const rgbValues = hex2rgb(color);\n\n        rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n        rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n        rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n        return rgb2hex(rgbValues);\n    },\n\n    /**\n     * Number of steps which will be used as a cap when rounding colors.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {number}\n     */\n    cacheStepsPerColorChannel: 8,\n\n    /**\n     * Tint cache boolean flag.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    convertTintToImage: false,\n\n    /**\n     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    canUseMultiply: canUseNewCanvasBlendModes(),\n\n    /**\n     * The tinting method that will be used.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {Function}\n     */\n    tintMethod: null as (texture: Texture, color: number, canvas: HTMLCanvasElement) => void,\n};\n\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel;\n","import { Renderer } from '@pixi/core';\nimport { CanvasRenderer } from './CanvasRenderer';\n\nimport type { AbstractRenderer, IRendererOptionsAuto } from '@pixi/core';\n\n// Reference to Renderer.create static function\nconst parentCreate = Renderer.create;\n\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\nRenderer.create = function create(options: IRendererOptionsAuto): AbstractRenderer\n{\n    const forceCanvas = options && options.forceCanvas;\n\n    if (!forceCanvas)\n    {\n        try\n        {\n            return parentCreate(options);\n        }\n        catch (err)\n        {\n            // swallow WebGL-unsupported error\n        }\n    }\n\n    return new CanvasRenderer(options);\n};\n","import { BaseTexture, BaseRenderTexture, Texture } from '@pixi/core';\n\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\nBaseTexture.prototype.getDrawableSource = function getDrawableSource(): CanvasImageSource\n{\n    const resource = this.resource as any;\n\n    return resource ? (resource.bitmap || resource.source) : null;\n};\n\n/**\n * A reference to the canvas render target (we only need one as this can be shared across renderers)\n *\n * @protected\n * @member {PIXI.utils.CanvasRenderTarget} _canvasRenderTarget\n * @memberof PIXI.BaseRenderTexture#\n */\n\nBaseRenderTexture.prototype._canvasRenderTarget = null;\n\nTexture.prototype.patternCache = null;\n\nTexture.prototype.tintCache = null;\n"]},"metadata":{},"sourceType":"module"}