{"ast":null,"code":"import{makeAutoObservable,toJS}from'mobx';import{isEqual}from'lodash';;/**\n * store for handle\n * @class\n */export default class HandleStore{constructor(rootStore){/**\n   * root store\n   */this.rootStore=void 0;this.handleMap={};this.updatedHandles={};makeAutoObservable(this,{rootStore:false,handleMap:false},{autoBind:true});this.rootStore=rootStore;}init(handles){const handleMap={};handles.forEach(h=>{const{frameIndex,pathId,pointIndex}=h;if(!handleMap[frameIndex]){handleMap[frameIndex]={};}if(!handleMap[frameIndex][pathId]){handleMap[frameIndex][pathId]={};}handleMap[frameIndex][pathId][pointIndex]=h;});this.setHandleMap(handleMap);}setHandleMap(handleMap){this.handleMap=handleMap;}saveHandles(handles){if(this.rootStore.shape.updatedShapes.length!==0)return;const handleMap={...this.handleMap};handles.forEach(handle=>{const{pathId,pointIndex:index,frameIndex}=handle;if(!handleMap[frameIndex]){handleMap[frameIndex]={};}if(!handleMap[frameIndex][pathId]){handleMap[frameIndex][pathId]={};}handleMap[frameIndex][pathId][index]=handle;});this.setHandleMap(handleMap);}updateHandle(handle,initialHandle){var _this$handleMap$frame,_this$handleMap$frame2;const{pathId,pointIndex,frameIndex}=handle;const prevHandle=((_this$handleMap$frame=this.handleMap[frameIndex])===null||_this$handleMap$frame===void 0?void 0:(_this$handleMap$frame2=_this$handleMap$frame[pathId])===null||_this$handleMap$frame2===void 0?void 0:_this$handleMap$frame2[pointIndex])||null;const handleMap={...this.handleMap};if(!handleMap[frameIndex]){handleMap[frameIndex]={};}if(!handleMap[frameIndex][pathId]){handleMap[frameIndex][pathId]={};}handleMap[frameIndex][pathId][pointIndex]=handle;this.setHandleMap(handleMap);this.changeHandleUndo([{frameIndex,pathId,pointIndex,handle:prevHandle||initialHandle}],[{frameIndex,pathId,pointIndex,handle}]);}removeHandles(points){const handleMap={...this.handleMap};const prevHandles=[];const updatedHandles=[];points.forEach(_ref=>{var _handleMap$frameIndex,_handleMap$frameIndex2;let{frameIndex,instanceId,groupName,pointCategory,index}=_ref;const pathId=\"\".concat(frameIndex,\"_\").concat(instanceId,\"_\").concat(groupName,\"_\").concat(pointCategory);const handle=(_handleMap$frameIndex=handleMap[frameIndex])===null||_handleMap$frameIndex===void 0?void 0:(_handleMap$frameIndex2=_handleMap$frameIndex[pathId])===null||_handleMap$frameIndex2===void 0?void 0:_handleMap$frameIndex2[index];if(handle){prevHandles.push({frameIndex,pathId:handle.pathId,pointIndex:handle.pointIndex,handle:{...handle}});updatedHandles.push({frameIndex,pathId:handle.pathId,pointIndex:handle.pointIndex,handle:null});delete handleMap[frameIndex][pathId][index];this.setHandleMap(handleMap);this.changeHandleUndo(prevHandles,updatedHandles,true);}});}changeHandleUndo(prevHandles,updatedHandles){let insertPrev=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const before=[];const after=[];before.push({type:'handle',status:[...prevHandles]});after.push({type:'handle',status:[...updatedHandles]});this.rootStore.undo.saveStatus(before,after,insertPrev);}changeFrame(frameIndex){const currentFrameHandles=toJS(this.handleMap[frameIndex]);if(currentFrameHandles){this.updatedHandles={[frameIndex]:currentFrameHandles};}}setUpdatedHandles(handles){const updatedHandles={};const handleMap={...this.handleMap};handles.forEach(_ref2=>{let{frameIndex,pathId,pointIndex:index,handle}=_ref2;if(handle){if(!handleMap[frameIndex]){handleMap[frameIndex]={};}if(!handleMap[frameIndex][pathId]){handleMap[frameIndex][pathId]={};}handleMap[frameIndex][pathId][index]=handle;if(!updatedHandles[frameIndex]){updatedHandles[frameIndex]={};}if(!updatedHandles[frameIndex][pathId]){updatedHandles[frameIndex][pathId]=handleMap[frameIndex][pathId];}}else{var _handleMap$frameIndex3,_handleMap$frameIndex4;(_handleMap$frameIndex3=handleMap[frameIndex])===null||_handleMap$frameIndex3===void 0?true:(_handleMap$frameIndex4=_handleMap$frameIndex3[pathId])===null||_handleMap$frameIndex4===void 0?true:delete _handleMap$frameIndex4[index];}});if(!isEqual(updatedHandles,this.updatedHandles)){this.setHandleMap(handleMap);this.updatedHandles=toJS(updatedHandles);}}setPathHandles(frameIndex,pathId,handles){const handleMap={...this.handleMap};handleMap[frameIndex]={...handleMap[frameIndex],[pathId]:handles};this.setHandleMap(handleMap);}getPathHandles(frame,pId){var _this$handleMap$frame3;return Object.values(((_this$handleMap$frame3=this.handleMap[frame])===null||_this$handleMap$frame3===void 0?void 0:_this$handleMap$frame3[pId])||{}).sort((a,b)=>a.pointIndex-b.pointIndex);}getHandles(){const handles=[];Object.values(toJS(this.handleMap)).forEach(frameHandles=>{Object.values(frameHandles).forEach(hs=>{Object.values(hs).forEach(h=>{handles.push(h);});});});return handles;}};","map":{"version":3,"names":["makeAutoObservable","toJS","isEqual","HandleStore","constructor","rootStore","handleMap","updatedHandles","autoBind","init","handles","forEach","h","frameIndex","pathId","pointIndex","setHandleMap","saveHandles","shape","updatedShapes","length","handle","index","updateHandle","initialHandle","_this$handleMap$frame","_this$handleMap$frame2","prevHandle","changeHandleUndo","removeHandles","points","prevHandles","_ref","_handleMap$frameIndex","_handleMap$frameIndex2","instanceId","groupName","pointCategory","concat","push","insertPrev","arguments","undefined","before","after","type","status","undo","saveStatus","changeFrame","currentFrameHandles","setUpdatedHandles","_ref2","_handleMap$frameIndex3","_handleMap$frameIndex4","setPathHandles","getPathHandles","frame","pId","_this$handleMap$frame3","Object","values","sort","a","b","getHandles","frameHandles","hs"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/store/HandleStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport { isEqual } from 'lodash';\nimport RootStore from './RootStore';\nimport { Status } from './UndoStore';\nimport { Handle, HandleStatus, UpdatedShape } from '../types';\n\nexport interface FrameHandleMap {\n  [pathId: string]: {\n    [pointIndex: number]: Handle;\n  };\n};\n\nexport interface HandleMap {\n  [frameIndex: number]: FrameHandleMap;\n}\n\n/**\n * store for handle\n * @class\n */\nexport default class HandleStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  handleMap: HandleMap = {};\n\n  updatedHandles: HandleMap = {};\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      handleMap: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  init(handles: Handle[]) {\n    const handleMap: {\n      [frameIndex: number]: {\n        [pathId: string]: {\n          [index: number]: Handle;\n        }\n      }\n    } = {};\n    handles.forEach((h) => {\n      const { frameIndex, pathId, pointIndex } = h;\n      if (!handleMap[frameIndex]) {\n        handleMap[frameIndex] = {};\n      }\n      if (!handleMap[frameIndex][pathId]) {\n        handleMap[frameIndex][pathId] = {};\n      }\n      handleMap[frameIndex][pathId][pointIndex] = h;\n    });\n    this.setHandleMap(handleMap);\n  }\n\n  setHandleMap(handleMap: HandleMap) {\n    this.handleMap = handleMap;\n  }\n\n  saveHandles(handles: Handle[]) {\n    if (this.rootStore.shape.updatedShapes.length !== 0) return;\n    const handleMap = { ...this.handleMap };\n    handles.forEach((handle) => {\n      const { pathId, pointIndex: index, frameIndex } = handle;\n      if (!handleMap[frameIndex]) {\n        handleMap[frameIndex] = {};\n      }\n      if (!handleMap[frameIndex][pathId]) {\n        handleMap[frameIndex][pathId] = {};\n      }\n      handleMap[frameIndex][pathId][index] = handle;\n    });\n    this.setHandleMap(handleMap);\n  }\n\n  updateHandle(handle: Handle, initialHandle: Handle) {\n    const { pathId, pointIndex, frameIndex } = handle;\n    const prevHandle = this.handleMap[frameIndex]?.[pathId]?.[pointIndex] || null;\n    const handleMap = { ...this.handleMap };\n    if (!handleMap[frameIndex]) {\n      handleMap[frameIndex] = {};\n    }\n    if (!handleMap[frameIndex][pathId]) {\n      handleMap[frameIndex][pathId] = {};\n    }\n    handleMap[frameIndex][pathId][pointIndex] = handle;\n    this.setHandleMap(handleMap);\n    this.changeHandleUndo(\n      [\n        { frameIndex, pathId, pointIndex, handle: prevHandle || initialHandle }\n      ],\n      [\n        { frameIndex, pathId, pointIndex, handle }\n      ],\n    );\n  }\n\n  removeHandles(points: UpdatedShape[]) {\n    const handleMap = { ...this.handleMap };\n    const prevHandles: HandleStatus[] = [];\n    const updatedHandles: HandleStatus[] = [];\n    points.forEach(({ frameIndex, instanceId, groupName, pointCategory, index }) => {\n      const pathId = `${frameIndex}_${instanceId}_${groupName}_${pointCategory}`;\n      const handle = handleMap[frameIndex]?.[pathId]?.[index as number];\n      if (handle) {\n        prevHandles.push({\n          frameIndex,\n          pathId: handle.pathId,\n          pointIndex: handle.pointIndex,\n          handle: { ...handle }\n        });\n        updatedHandles.push({\n          frameIndex,\n          pathId: handle.pathId,\n          pointIndex: handle.pointIndex,\n          handle: null\n        });\n        delete handleMap[frameIndex][pathId][index as number];\n        this.setHandleMap(handleMap);\n        this.changeHandleUndo(prevHandles, updatedHandles, true);\n      }\n    });\n  }\n\n  changeHandleUndo(\n    prevHandles: HandleStatus[],\n    updatedHandles: HandleStatus[],\n    insertPrev = false\n  ) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    before.push({ type: 'handle',\n      status: [\n        ...prevHandles,\n      ]\n    });\n    after.push({ type: 'handle',\n      status: [\n        ...updatedHandles,\n      ]\n    });\n    this.rootStore.undo.saveStatus(before, after, insertPrev);\n  }\n\n  changeFrame(frameIndex: number) {\n    const currentFrameHandles = toJS(this.handleMap[frameIndex]);\n    if (currentFrameHandles) {\n      this.updatedHandles = { [frameIndex]: currentFrameHandles };\n    }\n  }\n\n  setUpdatedHandles(handles: HandleStatus[]) {\n    const updatedHandles: HandleMap = {};\n    const handleMap = { ...this.handleMap };\n    handles.forEach(({ frameIndex, pathId, pointIndex: index, handle }) => {\n      if (handle) {\n        if (!handleMap[frameIndex]) {\n          handleMap[frameIndex] = {};\n        }\n        if (!handleMap[frameIndex][pathId]) {\n          handleMap[frameIndex][pathId] = {};\n        }\n        handleMap[frameIndex][pathId][index] = handle;\n\n        if (!updatedHandles[frameIndex]) {\n          updatedHandles[frameIndex] = {};\n        }\n        if (!updatedHandles[frameIndex][pathId]) {\n          updatedHandles[frameIndex][pathId] = handleMap[frameIndex][pathId];\n        }\n      } else {\n        delete handleMap[frameIndex]?.[pathId]?.[index];\n      }\n    });\n    if (!isEqual(updatedHandles, this.updatedHandles)) {\n      this.setHandleMap(handleMap);\n      this.updatedHandles = toJS(updatedHandles);\n    }\n  };\n\n  setPathHandles(frameIndex: number, pathId: number, handles: { [pointIndex: number]: Handle }) {\n    const handleMap = { ...this.handleMap };\n    handleMap[frameIndex] = {\n      ...handleMap[frameIndex],\n      [pathId]: handles,\n    };\n    this.setHandleMap(handleMap);\n  }\n\n  getPathHandles(frame: number, pId: string) {\n    return Object.values(this.handleMap[frame]?.[pId] || {}).sort((a, b) => a.pointIndex - b.pointIndex);\n  }\n\n  getHandles() {\n    const handles: Handle[] = [];\n    Object.values(toJS(this.handleMap)).forEach((frameHandles: FrameHandleMap) => {\n      Object.values(frameHandles).forEach((hs) => {\n        Object.values(hs).forEach((h) => {\n          handles.push(h);\n        });\n      });\n    });\n    return handles;\n  }\n};\n"],"mappings":"AAAA,OAASA,kBAAkB,CAAEC,IAAI,KAAQ,MAAM,CAC/C,OAASC,OAAO,KAAQ,QAAQ,CAS/B,CAMD;AACA;AACA;AACA,GACA,cAAe,MAAM,CAAAC,WAAY,CAU/BC,WAAWA,CAACC,SAA2B,CAAE,CATzC;AACF;AACA,KAFE,KAGAA,SAAS,aAETC,SAAS,CAAc,CAAC,CAAC,MAEzBC,cAAc,CAAc,CAAC,CAAC,CAG5BP,kBAAkB,CAAC,IAAI,CAAE,CACvBK,SAAS,CAAE,KAAK,CAChBC,SAAS,CAAE,KACb,CAAC,CAAE,CACDE,QAAQ,CAAE,IACZ,CAAC,CAAC,CAEF,IAAI,CAACH,SAAS,CAAGA,SAAS,CAC5B,CAEAI,IAAIA,CAACC,OAAiB,CAAE,CACtB,KAAM,CAAAJ,SAML,CAAG,CAAC,CAAC,CACNI,OAAO,CAACC,OAAO,CAAEC,CAAC,EAAK,CACrB,KAAM,CAAEC,UAAU,CAAEC,MAAM,CAAEC,UAAW,CAAC,CAAGH,CAAC,CAC5C,GAAI,CAACN,SAAS,CAACO,UAAU,CAAC,CAAE,CAC1BP,SAAS,CAACO,UAAU,CAAC,CAAG,CAAC,CAAC,CAC5B,CACA,GAAI,CAACP,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAAE,CAClCR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAAG,CAAC,CAAC,CACpC,CACAR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAACC,UAAU,CAAC,CAAGH,CAAC,CAC/C,CAAC,CAAC,CACF,IAAI,CAACI,YAAY,CAACV,SAAS,CAAC,CAC9B,CAEAU,YAAYA,CAACV,SAAoB,CAAE,CACjC,IAAI,CAACA,SAAS,CAAGA,SAAS,CAC5B,CAEAW,WAAWA,CAACP,OAAiB,CAAE,CAC7B,GAAI,IAAI,CAACL,SAAS,CAACa,KAAK,CAACC,aAAa,CAACC,MAAM,GAAK,CAAC,CAAE,OACrD,KAAM,CAAAd,SAAS,CAAG,CAAE,GAAG,IAAI,CAACA,SAAU,CAAC,CACvCI,OAAO,CAACC,OAAO,CAAEU,MAAM,EAAK,CAC1B,KAAM,CAAEP,MAAM,CAAEC,UAAU,CAAEO,KAAK,CAAET,UAAW,CAAC,CAAGQ,MAAM,CACxD,GAAI,CAACf,SAAS,CAACO,UAAU,CAAC,CAAE,CAC1BP,SAAS,CAACO,UAAU,CAAC,CAAG,CAAC,CAAC,CAC5B,CACA,GAAI,CAACP,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAAE,CAClCR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAAG,CAAC,CAAC,CACpC,CACAR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAACQ,KAAK,CAAC,CAAGD,MAAM,CAC/C,CAAC,CAAC,CACF,IAAI,CAACL,YAAY,CAACV,SAAS,CAAC,CAC9B,CAEAiB,YAAYA,CAACF,MAAc,CAAEG,aAAqB,CAAE,KAAAC,qBAAA,CAAAC,sBAAA,CAClD,KAAM,CAAEZ,MAAM,CAAEC,UAAU,CAAEF,UAAW,CAAC,CAAGQ,MAAM,CACjD,KAAM,CAAAM,UAAU,CAAG,EAAAF,qBAAA,KAAI,CAACnB,SAAS,CAACO,UAAU,CAAC,UAAAY,qBAAA,kBAAAC,sBAAA,CAA1BD,qBAAA,CAA6BX,MAAM,CAAC,UAAAY,sBAAA,iBAApCA,sBAAA,CAAuCX,UAAU,CAAC,GAAI,IAAI,CAC7E,KAAM,CAAAT,SAAS,CAAG,CAAE,GAAG,IAAI,CAACA,SAAU,CAAC,CACvC,GAAI,CAACA,SAAS,CAACO,UAAU,CAAC,CAAE,CAC1BP,SAAS,CAACO,UAAU,CAAC,CAAG,CAAC,CAAC,CAC5B,CACA,GAAI,CAACP,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAAE,CAClCR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAAG,CAAC,CAAC,CACpC,CACAR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAACC,UAAU,CAAC,CAAGM,MAAM,CAClD,IAAI,CAACL,YAAY,CAACV,SAAS,CAAC,CAC5B,IAAI,CAACsB,gBAAgB,CACnB,CACE,CAAEf,UAAU,CAAEC,MAAM,CAAEC,UAAU,CAAEM,MAAM,CAAEM,UAAU,EAAIH,aAAc,CAAC,CACxE,CACD,CACE,CAAEX,UAAU,CAAEC,MAAM,CAAEC,UAAU,CAAEM,MAAO,CAAC,CAE9C,CAAC,CACH,CAEAQ,aAAaA,CAACC,MAAsB,CAAE,CACpC,KAAM,CAAAxB,SAAS,CAAG,CAAE,GAAG,IAAI,CAACA,SAAU,CAAC,CACvC,KAAM,CAAAyB,WAA2B,CAAG,EAAE,CACtC,KAAM,CAAAxB,cAA8B,CAAG,EAAE,CACzCuB,MAAM,CAACnB,OAAO,CAACqB,IAAA,EAAiE,KAAAC,qBAAA,CAAAC,sBAAA,IAAhE,CAAErB,UAAU,CAAEsB,UAAU,CAAEC,SAAS,CAAEC,aAAa,CAAEf,KAAM,CAAC,CAAAU,IAAA,CACzE,KAAM,CAAAlB,MAAM,IAAAwB,MAAA,CAAMzB,UAAU,MAAAyB,MAAA,CAAIH,UAAU,MAAAG,MAAA,CAAIF,SAAS,MAAAE,MAAA,CAAID,aAAa,CAAE,CAC1E,KAAM,CAAAhB,MAAM,EAAAY,qBAAA,CAAG3B,SAAS,CAACO,UAAU,CAAC,UAAAoB,qBAAA,kBAAAC,sBAAA,CAArBD,qBAAA,CAAwBnB,MAAM,CAAC,UAAAoB,sBAAA,iBAA/BA,sBAAA,CAAkCZ,KAAK,CAAW,CACjE,GAAID,MAAM,CAAE,CACVU,WAAW,CAACQ,IAAI,CAAC,CACf1B,UAAU,CACVC,MAAM,CAAEO,MAAM,CAACP,MAAM,CACrBC,UAAU,CAAEM,MAAM,CAACN,UAAU,CAC7BM,MAAM,CAAE,CAAE,GAAGA,MAAO,CACtB,CAAC,CAAC,CACFd,cAAc,CAACgC,IAAI,CAAC,CAClB1B,UAAU,CACVC,MAAM,CAAEO,MAAM,CAACP,MAAM,CACrBC,UAAU,CAAEM,MAAM,CAACN,UAAU,CAC7BM,MAAM,CAAE,IACV,CAAC,CAAC,CACF,MAAO,CAAAf,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAACQ,KAAK,CAAW,CACrD,IAAI,CAACN,YAAY,CAACV,SAAS,CAAC,CAC5B,IAAI,CAACsB,gBAAgB,CAACG,WAAW,CAAExB,cAAc,CAAE,IAAI,CAAC,CAC1D,CACF,CAAC,CAAC,CACJ,CAEAqB,gBAAgBA,CACdG,WAA2B,CAC3BxB,cAA8B,CAE9B,IADA,CAAAiC,UAAU,CAAAC,SAAA,CAAArB,MAAA,IAAAqB,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,KAAK,CAElB,KAAM,CAAAE,MAAgB,CAAG,EAAE,CAC3B,KAAM,CAAAC,KAAe,CAAG,EAAE,CAC1BD,MAAM,CAACJ,IAAI,CAAC,CAAEM,IAAI,CAAE,QAAQ,CAC1BC,MAAM,CAAE,CACN,GAAGf,WAAW,CAElB,CAAC,CAAC,CACFa,KAAK,CAACL,IAAI,CAAC,CAAEM,IAAI,CAAE,QAAQ,CACzBC,MAAM,CAAE,CACN,GAAGvC,cAAc,CAErB,CAAC,CAAC,CACF,IAAI,CAACF,SAAS,CAAC0C,IAAI,CAACC,UAAU,CAACL,MAAM,CAAEC,KAAK,CAAEJ,UAAU,CAAC,CAC3D,CAEAS,WAAWA,CAACpC,UAAkB,CAAE,CAC9B,KAAM,CAAAqC,mBAAmB,CAAGjD,IAAI,CAAC,IAAI,CAACK,SAAS,CAACO,UAAU,CAAC,CAAC,CAC5D,GAAIqC,mBAAmB,CAAE,CACvB,IAAI,CAAC3C,cAAc,CAAG,CAAE,CAACM,UAAU,EAAGqC,mBAAoB,CAAC,CAC7D,CACF,CAEAC,iBAAiBA,CAACzC,OAAuB,CAAE,CACzC,KAAM,CAAAH,cAAyB,CAAG,CAAC,CAAC,CACpC,KAAM,CAAAD,SAAS,CAAG,CAAE,GAAG,IAAI,CAACA,SAAU,CAAC,CACvCI,OAAO,CAACC,OAAO,CAACyC,KAAA,EAAuD,IAAtD,CAAEvC,UAAU,CAAEC,MAAM,CAAEC,UAAU,CAAEO,KAAK,CAAED,MAAO,CAAC,CAAA+B,KAAA,CAChE,GAAI/B,MAAM,CAAE,CACV,GAAI,CAACf,SAAS,CAACO,UAAU,CAAC,CAAE,CAC1BP,SAAS,CAACO,UAAU,CAAC,CAAG,CAAC,CAAC,CAC5B,CACA,GAAI,CAACP,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAAE,CAClCR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAAG,CAAC,CAAC,CACpC,CACAR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CAACQ,KAAK,CAAC,CAAGD,MAAM,CAE7C,GAAI,CAACd,cAAc,CAACM,UAAU,CAAC,CAAE,CAC/BN,cAAc,CAACM,UAAU,CAAC,CAAG,CAAC,CAAC,CACjC,CACA,GAAI,CAACN,cAAc,CAACM,UAAU,CAAC,CAACC,MAAM,CAAC,CAAE,CACvCP,cAAc,CAACM,UAAU,CAAC,CAACC,MAAM,CAAC,CAAGR,SAAS,CAACO,UAAU,CAAC,CAACC,MAAM,CAAC,CACpE,CACF,CAAC,IAAM,KAAAuC,sBAAA,CAAAC,sBAAA,CACL,CAAAD,sBAAA,CAAO/C,SAAS,CAACO,UAAU,CAAC,UAAAwC,sBAAA,gBAAAC,sBAAA,CAArBD,sBAAA,CAAwBvC,MAAM,CAAC,UAAAwC,sBAAA,eAAtC,MAAO,CAAAA,sBAAA,CAAkChC,KAAK,CAAC,CACjD,CACF,CAAC,CAAC,CACF,GAAI,CAACpB,OAAO,CAACK,cAAc,CAAE,IAAI,CAACA,cAAc,CAAC,CAAE,CACjD,IAAI,CAACS,YAAY,CAACV,SAAS,CAAC,CAC5B,IAAI,CAACC,cAAc,CAAGN,IAAI,CAACM,cAAc,CAAC,CAC5C,CACF,CAEAgD,cAAcA,CAAC1C,UAAkB,CAAEC,MAAc,CAAEJ,OAAyC,CAAE,CAC5F,KAAM,CAAAJ,SAAS,CAAG,CAAE,GAAG,IAAI,CAACA,SAAU,CAAC,CACvCA,SAAS,CAACO,UAAU,CAAC,CAAG,CACtB,GAAGP,SAAS,CAACO,UAAU,CAAC,CACxB,CAACC,MAAM,EAAGJ,OACZ,CAAC,CACD,IAAI,CAACM,YAAY,CAACV,SAAS,CAAC,CAC9B,CAEAkD,cAAcA,CAACC,KAAa,CAAEC,GAAW,CAAE,KAAAC,sBAAA,CACzC,MAAO,CAAAC,MAAM,CAACC,MAAM,CAAC,EAAAF,sBAAA,KAAI,CAACrD,SAAS,CAACmD,KAAK,CAAC,UAAAE,sBAAA,iBAArBA,sBAAA,CAAwBD,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC,CAACI,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAChD,UAAU,CAAGiD,CAAC,CAACjD,UAAU,CAAC,CACtG,CAEAkD,UAAUA,CAAA,CAAG,CACX,KAAM,CAAAvD,OAAiB,CAAG,EAAE,CAC5BkD,MAAM,CAACC,MAAM,CAAC5D,IAAI,CAAC,IAAI,CAACK,SAAS,CAAC,CAAC,CAACK,OAAO,CAAEuD,YAA4B,EAAK,CAC5EN,MAAM,CAACC,MAAM,CAACK,YAAY,CAAC,CAACvD,OAAO,CAAEwD,EAAE,EAAK,CAC1CP,MAAM,CAACC,MAAM,CAACM,EAAE,CAAC,CAACxD,OAAO,CAAEC,CAAC,EAAK,CAC/BF,OAAO,CAAC6B,IAAI,CAAC3B,CAAC,CAAC,CACjB,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CAAC,CACF,MAAO,CAAAF,OAAO,CAChB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}