{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/attributes/FrameAttributesModal.tsx\";\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { makeObservable, reaction } from 'mobx';\nimport { Button, ConfigProvider } from 'antd';\nimport EasyForm from '@appen-china/easy-form';\nimport { ConditionType } from '@appen-china/easy-form/es/types';\nimport Modal from '../../../common/modal/Modal';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { setInitialValues } from '../../utils';\nimport './AttributesModal.scss';\nclass FrameAttributesModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      frameFields: []\n    };\n    this.attributes = {};\n    /**\n     * form container\n     */\n    this.ref = React.createRef();\n    /**\n     * reaction disposer\n     */\n    this.reactionDisposer = void 0;\n    /**\n     * when instance values submit\n     * @param values\n     */\n    this.onFrameValuesSubmit = values => {\n      const {\n        currentCamera,\n        currentFrame,\n        setFrameAttributesForCamera\n      } = store.frame;\n      const applyFrames = [currentFrame];\n      setFrameAttributesForCamera(currentCamera, applyFrames, values);\n      store.config.setFrameAttributesModalVisible(false);\n    };\n    /**\n     * submit button click\n     */\n    this.submit = () => {\n      if (store.frame.frameConfig) {\n        var _this$ref$current;\n        const buttons = (_this$ref$current = this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.querySelectorAll('button.easyform-btn.form-btn-submit');\n        buttons === null || buttons === void 0 ? void 0 : buttons.forEach(btn => {\n          btn.click();\n        });\n      } else {\n        this.onFrameValuesSubmit(undefined);\n      }\n    };\n    this.getEffectedFieldsByConditionIds = ids => {\n      const {\n        frameConfig\n      } = store.frame;\n      const conditions = (frameConfig === null || frameConfig === void 0 ? void 0 : frameConfig.conditions) || [];\n      const effectedConditions = conditions.filter(c => ids.has(c.id));\n      const effectedAggregationConditions = effectedConditions.filter(c => c.type === ConditionType.AGGREGATION);\n      const effectedField = effectedConditions.filter(c => c.type === ConditionType.FIELD).map(c => c.field);\n      if (effectedAggregationConditions.length > 0) {\n        effectedField.push(...this.getEffectedFieldsByConditionIds(new Set(effectedAggregationConditions.flatMap(c => c.conditions))));\n      }\n      return Array.from(new Set(effectedField));\n    };\n    this.getEffectedFields = (fieldNames, _allFieldNames) => {\n      const {\n        frameConfig\n      } = store.frame;\n      const effects = (frameConfig === null || frameConfig === void 0 ? void 0 : frameConfig.effects) || [];\n      const rules = (frameConfig === null || frameConfig === void 0 ? void 0 : frameConfig.rules) || [];\n      let allFieldNames = _allFieldNames;\n      if (!allFieldNames) {\n        allFieldNames = [...fieldNames];\n      }\n      const fieldEffectIds = new Set(effects.filter(e => fieldNames.includes(e.field)).map(e => e.id));\n      if (fieldEffectIds.size > 0) {\n        const effectedConditionIds = new Set(rules.filter(r => r.effects.some(e => fieldEffectIds.has(e))).map(i => i.condition));\n        const effectedFields = this.getEffectedFieldsByConditionIds(effectedConditionIds).filter(i => !allFieldNames.includes(i));\n        if (effectedFields.length > 0) {\n          return this.getEffectedFields(effectedFields, effectedFields.concat(allFieldNames));\n        }\n        return allFieldNames;\n      }\n      return allFieldNames;\n    };\n    this.handleChange = values => {\n      const {\n        frameConfig\n      } = store.frame;\n      if (frameConfig) {\n        this.attributes = {\n          ...this.attributes,\n          ...values\n        };\n      }\n    };\n    this.initFrameFields = () => {\n      const {\n        frameConfig,\n        currentFrameAttributes\n      } = store.frame;\n      if (frameConfig) {\n        this.attributes = currentFrameAttributes;\n        const frameFields = setInitialValues(frameConfig.fields, {\n          ...currentFrameAttributes\n        });\n        this.setState({\n          frameFields\n        });\n      }\n    };\n    makeObservable(this, {});\n    this.reactionDisposer = reaction(() => store.config.frameAttributesModalVisible, () => {\n      if (store.config.frameAttributesModalVisible) {\n        this.initFrameFields();\n      }\n    });\n  }\n  render() {\n    const {\n      currentFrame,\n      frameConfig,\n      isSingleCamera,\n      cameraNames,\n      currentCamera\n    } = store.frame;\n    if (!store.config.frameAttributesModalVisible) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(Modal, {\n      visible: true,\n      draggable: true,\n      closable: false,\n      dragId: \"video-tracking-attributes\",\n      className: \"attributes-form\",\n      title: `${i18n.translate('FRAME_ATTRIBUTES')}${isSingleCamera ? '' : `-C${cameraNames.indexOf(currentCamera) + 1}`}-${i18n.translate('FRAME_ATTRIBUTES_FRAME', {\n        values: {\n          frame: currentFrame + 1\n        }\n      })}`,\n      onClose: () => store.config.setFrameAttributesModalVisible(false),\n      onMaskClick: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.ref,\n      className: \"attributes-form-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, frameConfig && this.state.frameFields && /*#__PURE__*/React.createElement(EasyForm, {\n      theme: \"dark\",\n      fields: this.state.frameFields,\n      conditions: frameConfig.conditions,\n      effects: frameConfig.effects,\n      rules: frameConfig.rules,\n      onChange: this.handleChange,\n      onSubmit: this.onFrameValuesSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ConfigProvider, {\n      prefixCls: \"easyform\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, i18n.translate('COMMON_SUBMIT')))));\n  }\n}\nexport default observer(FrameAttributesModal);","map":{"version":3,"names":["React","observer","makeObservable","reaction","Button","ConfigProvider","EasyForm","ConditionType","Modal","store","i18n","setInitialValues","FrameAttributesModal","Component","constructor","props","state","frameFields","attributes","ref","createRef","reactionDisposer","onFrameValuesSubmit","values","currentCamera","currentFrame","setFrameAttributesForCamera","frame","applyFrames","config","setFrameAttributesModalVisible","submit","frameConfig","_this$ref$current","buttons","current","querySelectorAll","forEach","btn","click","undefined","getEffectedFieldsByConditionIds","ids","conditions","effectedConditions","filter","c","has","id","effectedAggregationConditions","type","AGGREGATION","effectedField","FIELD","map","field","length","push","Set","flatMap","Array","from","getEffectedFields","fieldNames","_allFieldNames","effects","rules","allFieldNames","fieldEffectIds","e","includes","size","effectedConditionIds","r","some","i","condition","effectedFields","concat","handleChange","initFrameFields","currentFrameAttributes","fields","setState","frameAttributesModalVisible","render","isSingleCamera","cameraNames","createElement","visible","draggable","closable","dragId","className","title","translate","indexOf","onClose","onMaskClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","theme","onChange","onSubmit","prefixCls","onClick"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/attributes/FrameAttributesModal.tsx"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { makeObservable, reaction, IReactionDisposer } from 'mobx';\nimport { Button, ConfigProvider } from 'antd';\nimport EasyForm from '@appen-china/easy-form';\nimport { ConditionType, Field } from '@appen-china/easy-form/es/types';\nimport Modal from '../../../common/modal/Modal';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { setInitialValues } from '../../utils';\nimport './AttributesModal.scss';\n\ninterface FrameAttributesModalState {\n  frameFields: Field[];\n}\n\nclass FrameAttributesModal extends React.Component {\n  state: FrameAttributesModalState = {\n    frameFields: [],\n  };\n\n  attributes = {};\n\n  /**\n   * form container\n   */\n  ref = React.createRef<HTMLDivElement>();\n\n  /**\n   * reaction disposer\n   */\n  reactionDisposer: IReactionDisposer;\n\n  constructor(props: any) {\n    super(props);\n    makeObservable(this, {});\n\n    this.reactionDisposer = reaction(\n      () => store.config.frameAttributesModalVisible,\n      () => {\n        if (store.config.frameAttributesModalVisible) {\n          this.initFrameFields();\n        }\n      },\n    );\n  }\n\n  /**\n   * when instance values submit\n   * @param values\n   */\n  onFrameValuesSubmit = (values: any) => {\n    const { currentCamera, currentFrame, setFrameAttributesForCamera } = store.frame;\n    const applyFrames = [currentFrame];\n    setFrameAttributesForCamera(\n      currentCamera,\n      applyFrames,\n      values,\n    );\n    store.config.setFrameAttributesModalVisible(false);\n  };\n\n  /**\n   * submit button click\n   */\n  submit = () => {\n    if (store.frame.frameConfig) {\n      const buttons = this.ref.current?.querySelectorAll('button.easyform-btn.form-btn-submit');\n      buttons?.forEach((btn) => {\n        (btn as HTMLButtonElement).click();\n      });\n    } else {\n      this.onFrameValuesSubmit(undefined);\n    }\n  };\n\n  getEffectedFieldsByConditionIds = (ids: Set<string>) => {\n    const { frameConfig } = store.frame;\n    const conditions = frameConfig?.conditions || [];\n    const effectedConditions = (conditions).filter((c) => ids.has(c.id));\n    const effectedAggregationConditions = effectedConditions.filter((c) => c.type === ConditionType.AGGREGATION);\n    const effectedField = effectedConditions.filter((c) => c.type === ConditionType.FIELD).map((c) => c.field);\n    if (effectedAggregationConditions.length > 0) {\n      effectedField.push(...this.getEffectedFieldsByConditionIds(new Set(effectedAggregationConditions.flatMap((c) => c.conditions) as string[])));\n    }\n    return Array.from(new Set(effectedField));\n  };\n\n  getEffectedFields = (fieldNames: string[], _allFieldNames?: string[]): string[] => {\n    const { frameConfig } = store.frame;\n    const effects = frameConfig?.effects || [];\n    const rules = frameConfig?.rules || [];\n    let allFieldNames = _allFieldNames;\n    if (!allFieldNames) {\n      allFieldNames = [...fieldNames];\n    }\n    const fieldEffectIds = new Set((effects).filter((e) => fieldNames.includes(e.field)).map((e) => e.id));\n    if (fieldEffectIds.size > 0) {\n      const effectedConditionIds = new Set((rules).filter((r) => r.effects.some((e) => fieldEffectIds.has(e))).map((i) => i.condition));\n      const effectedFields = this.getEffectedFieldsByConditionIds(effectedConditionIds).filter((i) => !allFieldNames!.includes(i!)) as string[];\n      if (effectedFields.length > 0) {\n        return this.getEffectedFields(effectedFields, effectedFields.concat(allFieldNames));\n      }\n      return allFieldNames;\n    }\n    return allFieldNames;\n  };\n\n  handleChange = (values: any) => {\n    const { frameConfig } = store.frame;\n    if (frameConfig) {\n      this.attributes = { ...this.attributes, ...values };\n    }\n  };\n\n  initFrameFields = () => {\n    const { frameConfig, currentFrameAttributes } = store.frame;\n    if (frameConfig) {\n      this.attributes = currentFrameAttributes;\n      const frameFields = setInitialValues(frameConfig.fields, { ...currentFrameAttributes });\n      this.setState({ frameFields });\n    }\n  };\n\n  render() {\n    const { currentFrame, frameConfig, isSingleCamera, cameraNames, currentCamera } = store.frame;\n    if (!store.config.frameAttributesModalVisible) {\n      return null;\n    }\n\n    return (\n      <Modal\n        visible\n        draggable\n        closable={false}\n        dragId=\"video-tracking-attributes\"\n        className=\"attributes-form\"\n        title={\n          `${i18n.translate('FRAME_ATTRIBUTES')}${isSingleCamera ? '' : `-C${cameraNames.indexOf(currentCamera) + 1}`}-${i18n.translate('FRAME_ATTRIBUTES_FRAME', { values: { frame: currentFrame + 1 } })}`\n        }\n        onClose={() => store.config.setFrameAttributesModalVisible(false)}\n        onMaskClick={this.submit}\n      >\n        <div ref={this.ref} className=\"attributes-form-content\">\n          {frameConfig && this.state.frameFields && (\n            <EasyForm\n              theme=\"dark\"\n              fields={this.state.frameFields}\n              conditions={frameConfig.conditions}\n              effects={frameConfig.effects}\n              rules={frameConfig.rules}\n              onChange={this.handleChange}\n              onSubmit={this.onFrameValuesSubmit}\n            />\n          )}\n        </div>\n        <div className=\"attributes-form-footer\">\n          <ConfigProvider prefixCls=\"easyform\">\n            <Button type=\"primary\" onClick={this.submit}>\n              {i18n.translate('COMMON_SUBMIT')}\n            </Button>\n          </ConfigProvider>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default observer(FrameAttributesModal);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}