{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/llm/input/Input.tsx\";\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { EditorState, getDefaultKeyBinding } from 'draft-js';\nimport Editor from '@draft-js-plugins/editor';\nimport createImagePlugin from '@draft-js-plugins/image';\nimport cx from 'classnames';\nimport { Check, Close, Fullscreen, FullscreenExit } from '../../icons';\nimport prismDecorator from './decorators/prism-decorator';\nimport backspaceCommandHandler from './command-handlers/backspace';\nimport tabCommandHandler from './command-handlers/tab';\nimport splitBlockCallback from './callbacks/split-block-callback';\nimport insertFragmentCallback from './callbacks/insert-fragment-callback';\nimport { contentStateToContent, contentToContentState } from './utils';\nimport { TAB_COMMAND, TAB_SHIFT_COMMAND } from './constants';\n// styles\nimport 'draft-js/dist/Draft.css';\nimport 'prismjs/themes/prism.css';\nconst imagePlugin = createImagePlugin();\nconst Input = forwardRef(({\n  defaultValue,\n  onSubmit,\n  onCancel,\n  onError,\n  renderTypeSwitch\n}, ref) => {\n  const editor = useRef(null);\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // NOTICE: use settimeout to wait for plugin decorators setup\n  const initEditor = v => setTimeout(() => {\n    var _editor$current;\n    setEditorState(v && v.length > 0 ? EditorState.createWithContent(contentToContentState(v)) : EditorState.createEmpty());\n    (_editor$current = editor.current) === null || _editor$current === void 0 ? void 0 : _editor$current.focus();\n  }, 0);\n  useEffect(() => {\n    initEditor(defaultValue);\n  }, [defaultValue]);\n  const [screenfull, setScreenfull] = useState(false);\n  const [addFormula, setAddFormula] = useState(false);\n  const [editingFormulaBlock, setEditingFormulaBlock] = useState(null);\n  useImperativeHandle(ref, () => ({\n    setValue: initEditor,\n    getCurrentValue: () => contentStateToContent(editorState.getCurrentContent())\n  }));\n  const submit = () => {\n    const content = contentStateToContent(editorState.getCurrentContent());\n    const last = content[content.length - 1];\n    if ((last === null || last === void 0 ? void 0 : last.content) === '') {\n      // remove last empty line\n      content.pop();\n    }\n    if (content.length > 0) {\n      onSubmit(content);\n      setScreenfull(false);\n    } else {\n      var _editor$current2;\n      // empty content\n      onError();\n      (_editor$current2 = editor.current) === null || _editor$current2 === void 0 ? void 0 : _editor$current2.focus();\n    }\n  };\n  const onEditorStateChange = updatedEditorState => {\n    const changeType = updatedEditorState.getLastChangeType();\n    switch (changeType) {\n      case 'split-block':\n        // enter\n        setEditorState(splitBlockCallback(updatedEditorState));\n        break;\n      case 'insert-fragment':\n        // paste\n        setEditorState(insertFragmentCallback(updatedEditorState, editorState));\n        break;\n      default:\n        setEditorState(updatedEditorState);\n    }\n  };\n  const handleKeyCommand = command => {\n    switch (command) {\n      case 'backspace':\n      case 'backspace-to-start-of-line':\n        return backspaceCommandHandler(editorState, setEditorState);\n      case TAB_COMMAND:\n      case TAB_SHIFT_COMMAND:\n        {\n          return tabCommandHandler(editorState, setEditorState, {\n            shift: command === TAB_SHIFT_COMMAND\n          });\n        }\n      default:\n    }\n    return 'not-handled';\n  };\n  const keyBindingFn = useCallback(e => {\n    if (e.key === 'Tab') {\n      return e.shiftKey ? TAB_SHIFT_COMMAND : TAB_COMMAND;\n    }\n    return getDefaultKeyBinding(e);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cx('llm-input-container', {\n      'screen-full': screenfull\n    }),\n    onMouseDown: e => e.stopPropagation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"llm-input-tools\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"llm-input-tools-btn\",\n    onClick: () => setScreenfull(!screenfull),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, screenfull ? /*#__PURE__*/React.createElement(FullscreenExit, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 27\n    }\n  }) : /*#__PURE__*/React.createElement(Fullscreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 48\n    }\n  })), renderTypeSwitch && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"divider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }), renderTypeSwitch())), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"llm-input-tools-btn\",\n    onClick: onCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Close, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"llm-input-tools-btn\",\n    onClick: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Check, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"llm-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    ref: editor,\n    stripPastedStyles: true,\n    plugins: [imagePlugin],\n    decorators: [prismDecorator],\n    editorState: editorState,\n    onChange: onEditorStateChange,\n    handleKeyCommand: handleKeyCommand,\n    keyBindingFn: keyBindingFn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  })));\n});\nexport default Input;","map":{"version":3,"names":["React","forwardRef","useCallback","useEffect","useImperativeHandle","useRef","useState","EditorState","getDefaultKeyBinding","Editor","createImagePlugin","cx","Check","Close","Fullscreen","FullscreenExit","prismDecorator","backspaceCommandHandler","tabCommandHandler","splitBlockCallback","insertFragmentCallback","contentStateToContent","contentToContentState","TAB_COMMAND","TAB_SHIFT_COMMAND","imagePlugin","Input","defaultValue","onSubmit","onCancel","onError","renderTypeSwitch","ref","editor","editorState","setEditorState","createEmpty","initEditor","v","setTimeout","_editor$current","length","createWithContent","current","focus","screenfull","setScreenfull","addFormula","setAddFormula","editingFormulaBlock","setEditingFormulaBlock","setValue","getCurrentValue","getCurrentContent","submit","content","last","pop","_editor$current2","onEditorStateChange","updatedEditorState","changeType","getLastChangeType","handleKeyCommand","command","shift","keyBindingFn","e","key","shiftKey","createElement","className","onMouseDown","stopPropagation","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Fragment","stripPastedStyles","plugins","decorators","onChange"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/llm/input/Input.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { ContentBlock, EditorCommand, EditorState, Entity, getDefaultKeyBinding } from 'draft-js';\nimport Editor from '@draft-js-plugins/editor';\nimport createImagePlugin from '@draft-js-plugins/image';\nimport cx from 'classnames';\nimport { Check, Close, Fullscreen, FullscreenExit } from '../../icons';\nimport prismDecorator from './decorators/prism-decorator';\nimport backspaceCommandHandler from './command-handlers/backspace';\nimport tabCommandHandler from './command-handlers/tab';\nimport splitBlockCallback from './callbacks/split-block-callback';\nimport insertFragmentCallback from './callbacks/insert-fragment-callback';\nimport { contentStateToContent, contentToContentState } from './utils';\nimport { TAB_COMMAND, TAB_SHIFT_COMMAND } from './constants';\nimport { Content } from '../types';\n\n// styles\nimport 'draft-js/dist/Draft.css';\nimport 'prismjs/themes/prism.css';\n\nconst imagePlugin = createImagePlugin();\n\ninterface InputProps {\n  defaultValue?: Content;\n  onSubmit: (value: Content) => void;\n  onCancel: () => void;\n  onError: (msg?: string) => void;\n  renderTypeSwitch?: () => React.ReactElement;\n}\n\nexport interface InputHandle {\n  setValue: (value?: Content) => void;\n  getCurrentValue: () => Content;\n}\n\nconst Input = forwardRef<InputHandle, InputProps>(({\n  defaultValue,\n  onSubmit,\n  onCancel,\n  onError,\n  renderTypeSwitch,\n}, ref) => {\n  const editor = useRef<Editor>(null);\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // NOTICE: use settimeout to wait for plugin decorators setup\n  const initEditor = (v?: Content) => setTimeout(() => {\n    setEditorState(\n      v && v.length > 0\n        ? EditorState.createWithContent(contentToContentState(v))\n        : EditorState.createEmpty()\n    );\n    editor.current?.focus();\n  }, 0);\n\n  useEffect(() => {\n    initEditor(defaultValue);\n  }, [defaultValue]);\n\n  const [screenfull, setScreenfull] = useState(false);\n  const [addFormula, setAddFormula] = useState(false);\n  const [editingFormulaBlock, setEditingFormulaBlock] = useState<ContentBlock | null>(null);\n\n  useImperativeHandle(ref, () => ({\n    setValue: initEditor,\n    getCurrentValue: () => contentStateToContent(editorState.getCurrentContent()),\n  }));\n\n  const submit = () => {\n    const content = contentStateToContent(editorState.getCurrentContent());\n    const last = content[content.length - 1];\n    if (last?.content === '') {\n      // remove last empty line\n      content.pop();\n    }\n    if (content.length > 0) {\n      onSubmit(content);\n      setScreenfull(false);\n    } else {\n      // empty content\n      onError();\n      editor.current?.focus();\n    }\n  };\n\n  const onEditorStateChange = (updatedEditorState: EditorState) => {\n    const changeType = updatedEditorState.getLastChangeType();\n\n    switch (changeType) {\n      case 'split-block':\n        // enter\n        setEditorState(splitBlockCallback(updatedEditorState));\n        break;\n      case 'insert-fragment':\n        // paste\n        setEditorState(insertFragmentCallback(updatedEditorState, editorState));\n        break;\n      default:\n        setEditorState(updatedEditorState);\n    }\n  };\n\n  const handleKeyCommand = (command: EditorCommand) => {\n    switch (command) {\n      case 'backspace':\n      case 'backspace-to-start-of-line':\n        return backspaceCommandHandler(editorState, setEditorState);\n      case TAB_COMMAND:\n      case TAB_SHIFT_COMMAND: {\n        return tabCommandHandler(editorState, setEditorState, {\n          shift: command === TAB_SHIFT_COMMAND,\n        });\n      }\n      default:\n    }\n    return 'not-handled';\n  };\n\n  const keyBindingFn = useCallback((e) => {\n    if (e.key === 'Tab') {\n      return e.shiftKey ? TAB_SHIFT_COMMAND : TAB_COMMAND;\n    }\n    return getDefaultKeyBinding(e);\n  }, []);\n\n  return (\n    <div\n      className={cx('llm-input-container', {\n        'screen-full': screenfull,\n      })}\n      onMouseDown={(e) => e.stopPropagation()}\n    >\n      <div className=\"llm-input-tools\">\n        <div>\n          <div\n            className=\"llm-input-tools-btn\"\n            onClick={() => setScreenfull(!screenfull)}\n          >\n            {screenfull ? <FullscreenExit /> : <Fullscreen />}\n          </div>\n          {renderTypeSwitch && (\n            <>\n              <div className=\"divider\" />\n              {renderTypeSwitch()}\n            </>\n          )}\n        </div>\n        <div>\n          <div\n            className=\"llm-input-tools-btn\"\n            onClick={onCancel}\n          >\n            <Close />\n          </div>\n          <div\n            className=\"llm-input-tools-btn\"\n            onClick={submit}\n          >\n            <Check />\n          </div>\n        </div>\n      </div>\n      <div className=\"llm-input\">\n        <Editor\n          ref={editor}\n          stripPastedStyles\n          plugins={[imagePlugin]}\n          decorators={[prismDecorator]}\n          editorState={editorState}\n          onChange={onEditorStateChange}\n          handleKeyCommand={handleKeyCommand}\n          keyBindingFn={keyBindingFn}\n        />\n      </div>\n\n    </div>\n  );\n});\n\nexport default Input;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}