{"ast":null,"code":"/*!\n * @pixi/canvas-extract - v6.2.2\n * Compiled Wed, 26 Jan 2022 16:23:27 UTC\n *\n * @pixi/canvas-extract is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nvar TEMP_RECT = new Rectangle();\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI\n */\nvar CanvasExtract = /** @class */function () {\n  /**\n   * @param renderer - A reference to the current renderer\n   */\n  function CanvasExtract(renderer) {\n    this.renderer = renderer;\n  }\n  /**\n   * Will return a HTML Image of the target\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @return HTML Image of the target\n   */\n  CanvasExtract.prototype.image = function (target, format, quality) {\n    var image = new Image();\n    image.src = this.base64(target, format, quality);\n    return image;\n  };\n  /**\n   * Will return a a base64 encoded string of this target. It works by calling\n   *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @return A base64 encoded string of the texture.\n   */\n  CanvasExtract.prototype.base64 = function (target, format, quality) {\n    return this.canvas(target).toDataURL(format, quality);\n  };\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @return A Canvas element with the texture rendered on.\n   */\n  CanvasExtract.prototype.canvas = function (target) {\n    var renderer = this.renderer;\n    var context;\n    var resolution;\n    var frame;\n    var renderTexture;\n    if (target) {\n      if (target instanceof RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = renderer.generateTexture(target);\n      }\n    }\n    if (renderTexture) {\n      context = renderTexture.baseTexture._canvasRenderTarget.context;\n      resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n      frame = renderTexture.frame;\n    } else {\n      context = renderer.rootContext;\n      resolution = renderer.resolution;\n      frame = TEMP_RECT;\n      frame.width = this.renderer.width;\n      frame.height = this.renderer.height;\n    }\n    var width = Math.floor(frame.width * resolution + 1e-4);\n    var height = Math.floor(frame.height * resolution + 1e-4);\n    var canvasBuffer = new CanvasRenderTarget(width, height, 1);\n    var canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n    canvasBuffer.context.putImageData(canvasData, 0, 0);\n    // send the canvas back..\n    return canvasBuffer.canvas;\n  };\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @return One-dimensional array containing the pixel data of the entire texture\n   */\n  CanvasExtract.prototype.pixels = function (target) {\n    var renderer = this.renderer;\n    var context;\n    var resolution;\n    var frame;\n    var renderTexture;\n    if (target) {\n      if (target instanceof RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = renderer.generateTexture(target);\n      }\n    }\n    if (renderTexture) {\n      context = renderTexture.baseTexture._canvasRenderTarget.context;\n      resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n      frame = renderTexture.frame;\n    } else {\n      context = renderer.rootContext;\n      resolution = renderer.resolution;\n      frame = TEMP_RECT;\n      frame.width = renderer.width;\n      frame.height = renderer.height;\n    }\n    var x = frame.x * resolution;\n    var y = frame.y * resolution;\n    var width = frame.width * resolution;\n    var height = frame.height * resolution;\n    return context.getImageData(x, y, width, height).data;\n  };\n  /** Destroys the extract */\n  CanvasExtract.prototype.destroy = function () {\n    this.renderer = null;\n  };\n  return CanvasExtract;\n}();\nexport { CanvasExtract };","map":{"version":3,"sources":["../../src/CanvasExtract.ts"],"names":[],"mappings":"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","sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { DisplayObject } from '@pixi/display';\nimport type { BaseRenderTexture } from '@pixi/core';\n\nconst TEMP_RECT = new Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasExtract\n{\n    /** A reference to the current renderer */\n    public renderer: CanvasRenderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return HTML Image of the target\n     */\n    public image(target?: DisplayObject|RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return A base64 encoded string of the texture.\n     */\n    public base64(target?: DisplayObject|RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject|RenderTexture): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject|RenderTexture): Uint8ClampedArray\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n        }\n\n        const x = frame.x * resolution;\n        const y = frame.y * resolution;\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        return context.getImageData(x, y, width, height).data;\n    }\n\n    /** Destroys the extract */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}