{"ast":null,"code":"import{Point,BitmapText}from'pixi.js';import Flatten from'@flatten-js/core';import{cloneDeep}from'lodash';import polygonClipping from'polygon-clipping';import pointOnLine from'@turf/boolean-point-on-line';import{lineString,point as turfPoint}from'@turf/helpers';import polylabel from'polylabel';import Shape,{EventAction}from'./Shape';import{ShapeType}from'./types';import ControlPoint from'./controls/ControlPoint';import ControlRotation from'./controls/ControlRotation';import{precise,normalizePoints}from'./utils';import Cursor from'../Cursor';import{computeRotatedPosition,computePolygonAreaCenter}from'../../../utils/math';/**\n * Polygon shape\n * @class\n */export default class Polygon extends Shape{/**\n   * get points\n   * @getter\n   */get points(){return this._points.map(p=>({x:p.x,y:p.y,...(p.userData&&{userData:p.userData})}));}/**\n   * set points\n   * @setter\n   */set points(points){this._points=points.map(p=>({x:p.x,y:p.y,userData:cloneDeep(p.userData)}));this.normalize();}/**\n   * get position\n   * @getter\n   */get position(){return new Point(this._points[0].x,this._points[0].y);}/**\n   * set position\n   * @setter\n   */set position(point){const offsetX=point.x-this._points[0].x;const offsetY=point.y-this._points[0].y;this._points.forEach(p=>{p.x=precise(p.x+offsetX);p.y=precise(p.y+offsetY);});this.updateGeometory();this.drawShape();}/**\n   * get pivot\n   * @getter\n   */get pivot(){const{x,y}=computePolygonAreaCenter(this.points);return new Point(x,y);}/**\n   * shape bounds\n   * @getter\n   */get shapeBounds(){const shapePoints=this.points;const left=Math.min(...shapePoints.map(p=>p.x));const right=Math.max(...shapePoints.map(p=>p.x));const top=Math.min(...shapePoints.map(p=>p.y));const bottom=Math.max(...shapePoints.map(p=>p.y));return{left,top,right,bottom};}/**\n   * shape area\n   * @getter\n   */get area(){return this._geometory.faces.values().next().value.area();}constructor(options){super(options);this.shapeType=ShapeType.POLYGON;/**\n   * polygon points\n   * @private\n   */this._points=[];/**\n   * indicate next point when creating\n   * @private\n   */this._nextPoint=null;/**\n   * is mouse down\n   * @private\n   */this._isDown=false;/**\n   * is dragging\n   * @private\n   */this._isDragging=false;/**\n   * polygon geometory data\n   */this._geometory=new Flatten.Polygon();/**\n   * mouse down listener when creating\n   * @private\n   */this._mouseDown=e=>{if(e.button===0){// not right click\nthis._isDown=true;}};/**\n   * mouse move listener when creating\n   * @private\n   * @param event\n   */this._mouseMove=event=>{if(this._isDown){this._isDragging=true;}let localPoint=this.globalSnappingPoint;if(!localPoint){const point=this._mapScreenToStagePosition(event.clientX,event.clientY);localPoint=this._mapStageToLocalPosition(point);}const p=localPoint;if(this._isDragging){// add point directly when dragging to draw a polygon\nconst lastPoint=this.points[this.points.length-1]||{x:0,y:0};const tolerance=10/this.scale;if(Math.abs(p.x-lastPoint.x)>tolerance||Math.abs(p.y-lastPoint.y)>tolerance){this.addPoint(p);}this._nextPoint=null;}else{this._nextPoint=p;this.drawShape();}};/**\n   * mouse up listener when creating\n   * @private\n   * @param event\n   */this._mouseUp=event=>{if(this._isDown&&!this._isDragging){let localPoint=this.globalSnappingPoint;if(!localPoint){const point=this._mapScreenToStagePosition(event.clientX,event.clientY);localPoint=this._mapStageToLocalPosition(point);}const p=localPoint;this.addPoint(p);}this._isDown=false;this._isDragging=false;};/**\n   * finish by double clicking\n   * @private\n   */this._finishByDoubleClick=()=>{this.finishCreate();};/**\n   * key down handler\n   * @private\n   * @param e\n   */this._keyDown=e=>{var _e$key;switch((_e$key=e.key)===null||_e$key===void 0?void 0:_e$key.toLowerCase()){case'q':if(!this._finished){e.preventDefault();this.removePoint(this.points.length-1);}break;case'enter':if(!this._finished){e.preventDefault();e.stopImmediatePropagation();this.finishCreate();}break;default:break;}};/**\n   * finish create\n   */this.finishCreate=()=>{let otherShapeData;this.normalize();this._finish(otherShapeData);this._removeListeners();};const{points}=options;if(Array.isArray(points)&&points.every(p=>p.x!==undefined&&p.y!==undefined)){this.points=points;}document.addEventListener('keydown',this._keyDown,false);}/**\n   * when shape move & resize\n   * @protected\n   */_changed(){if(this.rotation!==0){this.rotatePoints();}this._emit(EventAction.CHANGED,this.getData());}/**\n   * draw shape\n   */drawShape(){this.instance.clear();this._controlLine.clear();this._drawShapeFill();this._drawShapeLine();this._drawShapeVertex();this._drawSnappingPoint();if(this._finished){this.drawShapeLabel();this.attachControlPoints();}}/**\n   * draw shape fill\n   * @private\n   */_drawShapeFill(){if(this._finished){this.instance.beginFill(this.color,this.alpha);this.instance.drawPolygon(this._points.map(_ref=>{let{x,y}=_ref;return new Point(x,y);}));this.instance.endFill();}}/**\n   * draw shape border\n   * @private\n   */_drawShapeLine(){if(this._points.length===0)return;const ctx=this.selected?this._controlLine:this.instance;const baseWidth=1/this.scale;const color=this.displayBorderColor;ctx.moveTo(this._points[0].x,this._points[0].y);this._points.slice(1).forEach(point=>{ctx.lineStyle(baseWidth,color);ctx.drawLine(point.x,point.y,this.borderStyle,this.scale);});ctx.lineStyle(baseWidth,color);if(this._finished){ctx.drawLine(this._points[0].x,this._points[0].y,this.borderStyle,this.scale);}else if(this._nextPoint){ctx.drawLine(this._nextPoint.x,this._nextPoint.y,this.borderStyle,this.scale);}}/**\n   * draw shape vertexes\n   * @private\n   */_drawShapeVertex(){var _this$vertexesContain;(_this$vertexesContain=this.vertexesContainer)===null||_this$vertexesContain===void 0?void 0:_this$vertexesContain.removeChildren();if(!this.showVertex&&!this.showVertexOrder){return;}const r=4/this.scale;const offset=this.showVertex?r:4/this.scale;this.instance.lineStyle(1/this.scale,this.displayBorderColor);this._points.forEach((point,index)=>{if(this.showVertex&&(!this.editable||!this.selected)){// draw vertex dot\nthis.instance.beginFill(this.color);this.instance.drawVertex(point.x,point.y,r);this.instance.endFill();}if(this.showVertexOrder){// draw vertext order\nconst text=new BitmapText(\"\".concat(1+index,\" \"),{fontName:'ALPHA_NUMERIC'});text.scale.set(1/this.scale);text.position.set(point.x+offset,point.y+offset);if(!this.vertexesContainer){this._createVertexesContainer();}this.vertexesContainer.addChild(text);}});}/**\n   * draw snapping point\n   */_drawSnappingPoint(){if(this._snappingPoint){this.instance.beginFill(this.selectedColor);this.instance.drawCircle(this._snappingPoint.x,this._snappingPoint.y,3/this.scale);this.instance.endFill();}}/**\n   * create by click to add point\n   * @param point\n   */create(){this.app.view.addEventListener('mousedown',this._mouseDown,false);document.addEventListener('mousemove',this._mouseMove,false);document.addEventListener('mouseup',this._mouseUp,false);this.app.view.addEventListener('dblclick',this._finishByDoubleClick,false);this._finished=false;this._nextPoint=null;this._isDown=true;// create start is mouse down\nthis._isDragging=false;}/**\n   * remove all listeners\n   * @private\n   */_removeListeners(){this.app.view.removeEventListener('mousedown',this._mouseDown,false);document.removeEventListener('mousemove',this._mouseMove,false);document.removeEventListener('mouseup',this._mouseUp,false);this.app.view.removeEventListener('dblclick',this._finishByDoubleClick,false);}/**\n   * get label position\n   */getLabelPosition(){const sorted=[...this._points].sort((a,b)=>{if(a.y===b.y)return a.x-b.x;return a.y-b.y;});return new Point(sorted[0].x,sorted[0].y);}/**\n   * get shape data\n   */getData(){return{points:this.points};}/**\n   * get geo json\n   */getAreaAsGeoJSON(){return[[this.points.map(p=>[p.x,p.y])]];}/**\n   * delete selected points\n   */deleteSelectedPoints(){if(this.selected){const deletedIndexes=[];this._controls.forEach((c,i)=>{if(c.selected){deletedIndexes.push(i);c.selected=false;}});if(deletedIndexes.length>0){this._points=this._points.filter((_,i)=>!deletedIndexes.includes(i));this.normalize();this._changed();return true;}}return false;}/**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */snapToPoint(point){let tolerance=arguments.length>1&&arguments[1]!==undefined?arguments[1]:8;const t=tolerance/this.scale;// bbox\nconst{x,y}=point;const{left,right,top,bottom}=this.shapeBounds;if(x<left-t||x>right+t||y<top-t||y>bottom+t){return null;}// points\nlet nearestPoint;let d;this.points.forEach(p=>{const pointDistance=Math.sqrt((p.x-x)**2+(p.y-y)**2);if(pointDistance<t&&(d===undefined||pointDistance<d)){d=pointDistance;nearestPoint=p;}});if(nearestPoint){return new Point(nearestPoint.x,nearestPoint.y);}// edges\nconst location=new Flatten.Point(x,y);const[distance,segment]=this._geometory.distanceTo(location);if(distance<t){const{ps,pe}=segment;const edgePoint=ps.equalTo(location)?pe:ps;return new Point(edgePoint.x,edgePoint.y);}return null;}/**\n   * snap to polygon edges\n   */snap(event){if(event.data.originalEvent.altKey){const point=event.data.getLocalPosition(this.container);const location=new Flatten.Point(point.x,point.y);const[distance,segment]=this._geometory.distanceTo(location);if(distance<8/this.scale){const{ps,pe}=segment;const edgePoint=ps.equalTo(location)?pe:ps;this._snappingPoint=new Point(edgePoint.x,edgePoint.y);this.drawShape();return true;}}if(this._snappingPoint){this._snappingPoint=null;this.drawShape();}return false;}/**\n   * add snapping point to shape\n   */addSnappingPointToShape(){if(this._snappingPoint){const{point,edge,previousPointIndex}=this._findEdgeByPointPosition(this._snappingPoint);const x=precise(point.x);const y=precise(point.y);this._geometory.addVertex(new Flatten.Point(x,y),edge);this._points.splice(previousPointIndex+1,0,{x,y});this._snappingPoint=null;this._controls.forEach(c=>{c.selected=false;});this.drawShape();this._changed();return true;}return false;}/**\n   * find edge for new point position\n   * @param point\n   */_findEdgeByPointPosition(_ref2){let{x,y}=_ref2;const point=new Flatten.Point(x,y);const edge=this._geometory.findEdgeByPoint(point);const{start,end}=edge;// find the edge segment point index in points array\nlet i=0;while(i<this._points.length){const p1=this._points[i];const p2=this._points[(i+1)%this._points.length];if(p1.x===start.x&&p1.y===start.y&&p2.x===end.x&&p2.y===end.y||p1.x===end.x&&p1.y===end.y&&p2.x===start.x&&p2.y===start.y){// if has more than one edge that has the same start-end point, just use the first found one\n// in canvas when snapping point added, just the first of the overlapped edge can be divided\nbreak;}i+=1;}return{point,edge,previousPointIndex:i};}/**\n   * attach control points\n   */attachControlPoints(){if(!this.editable){this.removeControls();return;}[...this._points].forEach((point,index)=>{if(this.selected||this.hovered&&this.showVertex){// create if never created before\nif(!this._controls[index]){this._controls[index]=new ControlPoint({position:point,container:this.controlsContainer,scale:this.scale,color:this.displayBorderColor,cursor:Cursor.POINTER,onPositionChange:(x,y)=>this._updateByPointPosition(index,x,y),onFinish:()=>this._finishResize(),onClick:()=>this._updatePointSelectedStatus(index)});}// update\nthis._controls[index].color=this.displayBorderColor;this._controls[index].position=point;this._controls[index].add();}else if(this._controls[index]){// remove\nthis._controls[index].selected=false;this._controls[index].remove();}});if(this._controls.length>this._points.length){// remove redundant control points\nthis._controls.slice(this._points.length).forEach(c=>{c.remove();});this._controls=this._controls.slice(0,this._points.length);}if(this.rotatable){if(this.selected){const{top,bottom}=this.shapeBounds;const size=this.pivot.y-Math.abs(top-bottom)/2-50/this.scale;if(!this._rotateControl){this._rotateControl=new ControlRotation({container:this.container,position:this.pivot,size,rotation:this.shapeContainer.rotation,scale:this.scale,color:this.selectedColor,onRotationChange:angle=>{if(this.rotation!==undefined){this.rotation+=angle;if(this.rotation>=Math.PI){this.rotation-=2*Math.PI;}if(this.rotation<=-Math.PI){this.rotation+=2*Math.PI;}}},onFinish:()=>{this._changed();}});}this._rotateControl.rotation=this.shapeContainer.rotation;this._rotateControl.position=this.pivot;this._rotateControl.size=size;this._rotateControl.add();}else if(this._rotateControl){this._rotateControl.remove();}}}/**\n   * update polygon point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */_updateByPointPosition(index,x,y){const position=this.globalSnappingPoint||new Point(x,y);const deltaX=position.x-this._points[index].x;const deltaY=position.y-this._points[index].y;this.updateSelectedPointsPosistion(deltaX,deltaY);this._resizing({deltaX,deltaY});}/**\n   * update selected points position\n   * @param deltaX\n   * @param deltaY\n   */updateSelectedPointsPosistion(deltaX,deltaY){// move together\nthis._controls.forEach((c,i)=>{if(c.selected){const position=new Point(this._points[i].x+deltaX,this._points[i].y+deltaY);this._points[i].x=position.x;this._points[i].y=position.y;}});this.drawShape();}/**\n   * update selected point\n   * @private\n   * @param index\n   */_updatePointSelectedStatus(index){if(!this._controls[index].selected){this._emit(EventAction.VERTEX_SELECTED,index);this._controls.forEach((c,i)=>{if(i===index){c.selected=true;}else{c.selected=false;}});}}/**\n   * when finish resize\n   */_finishResize(){this.resizing=false;this.normalize();this._changed();}/**\n   * add a point\n   * @param point\n   * @param index\n   */addPoint(point,index){const pIndex=index===undefined?this._points.length:index;this._points.splice(pIndex,0,{x:precise(point.x),y:precise(point.y)});this.drawShape();}/**\n   * remove a point\n   * @param index\n   */removePoint(index){if(index>=0&&index<this._points.length){this._points.splice(index,1);this.drawShape();}}/**\n   * normalize polygon shape, remove it if necessary\n   */normalize(){// remove duplicated points\nconst points=[];this._points.forEach((point,index)=>{if(index===this._points.length-1||point.x!==this._points[index+1].x||point.y!==this._points[index+1].y){points.push(point);}});this._points=points;// crossing\nif(this._points.length>3){try{this.splitPolygon();}catch(e){this._remove();return;}}if(this._points.length<3){this._remove();return;}this._points.forEach(p=>{p.x=precise(p.x);p.y=precise(p.y);});this.updateGeometory();if(this.area<=0){this._remove();return;}this.drawShape();}// has crossing\nsplitPolygon(){const pointsData=[[this.points.map(p=>[p.x,p.y])]];const intersection=polygonClipping.intersection(pointsData);let points=[];if(intersection.length>1){// crossing\nlet maxArea={size:0,index:0};intersection.forEach((i,index)=>{const polygon=new Flatten.Polygon();polygon.addFace(i[0].map(p=>new Flatten.Point(p[0],p[1])));const area=polygon.faces.values().next().value.area();if(area>maxArea.size){maxArea={size:area,index};}});points=intersection[maxArea.index][0];}else if(intersection.length===1&&intersection[0].length>0){const polygonData=lineString(intersection[0][0]);const allPointsOnEdge=this.points.every(p=>pointOnLine(turfPoint([p.x,p.y]),polygonData));if(!allPointsOnEdge){// contains\npoints=intersection[0][0];}}if(points.length>0){const setPoints={};points.slice(0,points.length-1).forEach(point=>{setPoints[point.join(',')]=point;});this._points=Object.values(setPoints).map(p=>({x:p[0],y:p[1]}));this.setSelectedPoints([]);}}/**\n   * update geometory\n   */updateGeometory(){this._geometory.faces.forEach(face=>this._geometory.deleteFace(face));this._geometory.addFace(this._points.map(p=>new Flatten.Point(p.x,p.y)));}/**\n   * shape destroy\n   */destroy(){document.removeEventListener('keydown',this._keyDown,false);this._removeListeners();// call parent\nsuper.destroy();}/**\n   * selected points with point index & point instance\n   * @returns\n   */getSelectedPoints(){if(!this._finished){const lastPointIndex=this._points.length-1;return[{index:lastPointIndex,point:this._points[lastPointIndex]}];}const selectedPoints=[];const points=[...this.points];if(this.selected){this._controls.forEach((c,i)=>{if(c.selected){selectedPoints.push({index:i,point:points[i]});}});}return selectedPoints;}/**\n   * set selected points\n   * @param pointsIndex\n   */setSelectedPoints(pointsIndex){if(this.selected){this._controls.forEach((c,i)=>{if(pointsIndex.includes(i)){c.selected=true;}else{c.selected=false;}});}}/**\n   * set points user data\n   * @param pointsData\n   */setPointsUserData(pointsData){pointsData.forEach(_ref3=>{let{index,userData}=_ref3;this._points[index].userData=cloneDeep(userData);});this.drawShape();if(this._finished){this._changed();}}static getPolygons(shapes){return shapes.filter(i=>i.shapeType===ShapeType.POLYGON);}findInnerPolygons(shapes){const polygons=Polygon.getPolygons(shapes).filter(i=>i.uid!==this.uid);const{left,right,top,bottom}=this.shapeBounds;for(let i=0;i<polygons.length;i+=1){const polygon=polygons[i];const{left:l,right:r,top:t,bottom:b}=polygon.shapeBounds;if(l>=left&&r<=right&&t<=top&&b>=bottom){//\n}}}findIntersectPolygons(shapes){let includeCover=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const polygons=Polygon.getPolygons(shapes).filter(i=>i.uid!==this.uid);const pointsData=[[this.points.map(p=>[p.x,p.y])]];const intersects=[];for(let i=0;i<polygons.length;i+=1){const polygon=polygons[i];const points=[[polygon.points.map(p=>[p.x,p.y])]];const intersection=polygonClipping.intersection(pointsData,points);// has crossing, check include\nif(intersection.length>0){const differenceA=polygonClipping.difference(pointsData,points);const differenceB=polygonClipping.difference(points,pointsData);if(differenceA.length>0&&differenceB.length>0){intersects.push(polygon.uid);}else if(includeCover&&differenceA.length>0&&differenceB.length===0){// covered polygons\nintersects.push(polygon.uid);}}}return intersects;}merge(polygon){const pointsData=[[this.points.map(p=>[p.x,p.y])]];const polygonPoints=[[polygon.points.map(p=>[p.x,p.y])]];const mergedPolygonPoints=polygonClipping.union(pointsData,polygonPoints);return(mergedPolygonPoints[0]||[]).map(points=>({points:normalizePoints(points)}));}subtract(shapes){const polygons=shapes.filter(i=>i.shapeType===ShapeType.POLYGON);if(polygons.length===0){// no intersection\nreturn null;}const pointsData=[this.points.map(p=>[p.x,p.y])];const polygonsPointsData=polygons.map(i=>[i.points.map(p=>[p.x,p.y])]);const subtractData=polygonClipping.difference(pointsData,...polygonsPointsData);const newSubtractData=[];const addToNewSubtractData=polygon=>{const newPolygon=new Flatten.Polygon(polygon[0]);const area=newPolygon.faces.values().next().value.area();newSubtractData.push({polygon,area});};subtractData.forEach(i=>{if(i.length===1){// simple polygon, add directly\naddToNewSubtractData(i);}else if(i.length>1){// complex polygon, need split\nconst points=i[0];const innerPolygons=i.slice(1);const innerPolygonCenters=innerPolygons.map(polygon=>{// get visual center of the polygon\n// ensure polygon contains the center point\n// otherwise, it may fail to split some concave polygons by the split line\n// ref: https://blog.mapbox.com/a-new-algorithm-for-finding-a-visual-center-of-a-polygon-7c77e6492fbc\nconst p=polylabel([polygon],1);return p;}).sort((a,b)=>a[0]===b[0]?a[1]-b[1]:a[0]-b[0]);// sort from left to right\nconst sortedPoints=[...points].sort((a,b)=>a[0]===b[0]?a[1]-b[1]:a[0]-b[0]);const LPoint=sortedPoints[0];const RPoint=sortedPoints[sortedPoints.length-1];const LPointIndex=points.findIndex(p=>p[0]===LPoint[0]&&p[1]===LPoint[1]);const RPointIndex=points.findIndex(p=>p[0]===RPoint[0]&&p[1]===RPoint[1]);const splitLine=[LPoint,...innerPolygonCenters,RPoint];let p1;let p2;if(LPointIndex<RPointIndex){p1=[...points.slice(RPointIndex+1),...points.slice(0,LPointIndex),...splitLine];p2=[...points.slice(LPointIndex+1,RPointIndex),...splitLine.reverse()];}else{p1=[...points.slice(RPointIndex+1,LPointIndex),...splitLine];p2=[...points.slice(LPointIndex+1),...points.slice(0,RPointIndex),...splitLine.reverse()];}const innerGeom=innerPolygons.map(p=>[p]);const subtractedPolygons=[...polygonClipping.difference([p1],[p2],...innerGeom),...polygonClipping.difference([p2],[p1],...innerGeom)];subtractedPolygons.forEach(polygon=>addToNewSubtractData(polygon));}});return newSubtractData.sort((a,b)=>b.area-a.area)// sort by area\n.map(i=>i.polygon.map(points=>({points:normalizePoints(points)})));}/**\n   * set actual points position\n   * reset rotation\n   */rotatePoints(){const points=JSON.parse(JSON.stringify(this.points));if(this.rotation!==0){points.forEach(p=>{const point=computeRotatedPosition(this.pivot,p,this.rotation);p.x=precise(point.x);p.y=precise(point.y);});}this._rotation=0;this._updatePosition();this.points=points;}}","map":{"version":3,"names":["Point","BitmapText","Flatten","cloneDeep","polygonClipping","pointOnLine","lineString","point","turfPoint","polylabel","Shape","EventAction","ShapeType","ControlPoint","ControlRotation","precise","normalizePoints","Cursor","computeRotatedPosition","computePolygonAreaCenter","Polygon","points","_points","map","p","x","y","userData","normalize","position","offsetX","offsetY","forEach","updateGeometory","drawShape","pivot","shapeBounds","shapePoints","left","Math","min","right","max","top","bottom","area","_geometory","faces","values","next","value","constructor","options","shapeType","POLYGON","_nextPoint","_isDown","_isDragging","_mouseDown","e","button","_mouseMove","event","localPoint","globalSnappingPoint","_mapScreenToStagePosition","clientX","clientY","_mapStageToLocalPosition","lastPoint","length","tolerance","scale","abs","addPoint","_mouseUp","_finishByDoubleClick","finishCreate","_keyDown","_e$key","key","toLowerCase","_finished","preventDefault","removePoint","stopImmediatePropagation","otherShapeData","_finish","_removeListeners","Array","isArray","every","undefined","document","addEventListener","_changed","rotation","rotatePoints","_emit","CHANGED","getData","instance","clear","_controlLine","_drawShapeFill","_drawShapeLine","_drawShapeVertex","_drawSnappingPoint","drawShapeLabel","attachControlPoints","beginFill","color","alpha","drawPolygon","_ref","endFill","ctx","selected","baseWidth","displayBorderColor","moveTo","slice","lineStyle","drawLine","borderStyle","_this$vertexesContain","vertexesContainer","removeChildren","showVertex","showVertexOrder","r","offset","index","editable","drawVertex","text","concat","fontName","set","_createVertexesContainer","addChild","_snappingPoint","selectedColor","drawCircle","create","app","view","removeEventListener","getLabelPosition","sorted","sort","a","b","getAreaAsGeoJSON","deleteSelectedPoints","deletedIndexes","_controls","c","i","push","filter","_","includes","snapToPoint","arguments","t","nearestPoint","d","pointDistance","sqrt","location","distance","segment","distanceTo","ps","pe","edgePoint","equalTo","snap","data","originalEvent","altKey","getLocalPosition","container","addSnappingPointToShape","edge","previousPointIndex","_findEdgeByPointPosition","addVertex","splice","_ref2","findEdgeByPoint","start","end","p1","p2","removeControls","hovered","controlsContainer","cursor","POINTER","onPositionChange","_updateByPointPosition","onFinish","_finishResize","onClick","_updatePointSelectedStatus","add","remove","rotatable","size","_rotateControl","shapeContainer","onRotationChange","angle","PI","deltaX","deltaY","updateSelectedPointsPosistion","_resizing","VERTEX_SELECTED","resizing","pIndex","splitPolygon","_remove","pointsData","intersection","maxArea","polygon","addFace","polygonData","allPointsOnEdge","setPoints","join","Object","setSelectedPoints","face","deleteFace","destroy","getSelectedPoints","lastPointIndex","selectedPoints","pointsIndex","setPointsUserData","_ref3","getPolygons","shapes","findInnerPolygons","polygons","uid","l","findIntersectPolygons","includeCover","intersects","differenceA","difference","differenceB","merge","polygonPoints","mergedPolygonPoints","union","subtract","polygonsPointsData","subtractData","newSubtractData","addToNewSubtractData","newPolygon","innerPolygons","innerPolygonCenters","sortedPoints","LPoint","RPoint","LPointIndex","findIndex","RPointIndex","splitLine","reverse","innerGeom","subtractedPolygons","JSON","parse","stringify","_rotation","_updatePosition"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Polygon.ts"],"sourcesContent":["import { Point, BitmapText, InteractionEvent } from 'pixi.js';\nimport Flatten from '@flatten-js/core';\nimport { cloneDeep } from 'lodash';\nimport polygonClipping, { Ring, Pair } from 'polygon-clipping';\nimport pointOnLine from '@turf/boolean-point-on-line';\nimport { lineString, point as turfPoint } from '@turf/helpers';\nimport polylabel from 'polylabel';\nimport Shape, { ShapeOptions, EventAction } from './Shape';\nimport { ShapeData, ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlRotation from './controls/ControlRotation';\nimport { precise, normalizePoints } from './utils';\nimport Cursor from '../Cursor';\nimport { computeRotatedPosition, computePolygonAreaCenter } from '../../../utils/math';\n\ninterface IPoint {\n  x: number;\n  y: number;\n  userData?: any;\n}\n\nexport interface PolygonData {\n  points: IPoint[];\n}\n\nexport interface PolygonOptions extends ShapeOptions {\n  points?: IPoint[];\n}\n\n/**\n * Polygon shape\n * @class\n */\nexport default class Polygon extends Shape<PolygonData> {\n  shapeType = ShapeType.POLYGON;\n\n  /**\n   * polygon points\n   * @private\n   */\n  private _points: IPoint[] = [];\n\n  /**\n   * indicate next point when creating\n   * @private\n   */\n  private _nextPoint: IPoint | null = null;\n\n  /**\n   * is mouse down\n   * @private\n   */\n  private _isDown = false;\n\n  /**\n   * is dragging\n   * @private\n   */\n  private _isDragging = false;\n\n  /**\n   * polygon geometory data\n   */\n  private _geometory = new Flatten.Polygon();\n\n  /**\n   * get points\n   * @getter\n   */\n  get points() {\n    return this._points.map((p) => ({\n      x: p.x,\n      y: p.y,\n      ...p.userData && { userData: p.userData },\n    }));\n  }\n\n  /**\n   * set points\n   * @setter\n   */\n  set points(points: IPoint[]) {\n    this._points = points.map((p) => ({ x: p.x, y: p.y, userData: cloneDeep(p.userData) }));\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this._points[0].x, this._points[0].y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point: Point) {\n    const offsetX = point.x - this._points[0].x;\n    const offsetY = point.y - this._points[0].y;\n    this._points.forEach((p) => {\n      p.x = precise(p.x + offsetX);\n      p.y = precise(p.y + offsetY);\n    });\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * get pivot\n   * @getter\n   */\n  get pivot() {\n    const { x, y } = computePolygonAreaCenter(this.points);\n    return new Point(x, y);\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const shapePoints = this.points;\n    const left = Math.min(...shapePoints.map((p) => p.x));\n    const right = Math.max(...shapePoints.map((p) => p.x));\n    const top = Math.min(...shapePoints.map((p) => p.y));\n    const bottom = Math.max(...shapePoints.map((p) => p.y));\n    return { left, top, right, bottom };\n  }\n\n  /**\n   * shape area\n   * @getter\n   */\n  get area() {\n    return this._geometory.faces.values().next().value.area();\n  }\n\n  constructor(options: PolygonOptions) {\n    super(options);\n\n    const { points } = options;\n    if (Array.isArray(points) && points.every((p) => p.x !== undefined && p.y !== undefined)) {\n      this.points = points;\n    }\n\n    document.addEventListener('keydown', this._keyDown, false);\n  }\n\n  /**\n   * when shape move & resize\n   * @protected\n   */\n  protected _changed() {\n    if (this.rotation !== 0) {\n      this.rotatePoints();\n    }\n    this._emit(EventAction.CHANGED, this.getData());\n  };\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._controlLine.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    this._drawShapeVertex();\n    this._drawSnappingPoint();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   * @private\n   */\n  private _drawShapeFill() {\n    if (this._finished) {\n      this.instance.beginFill(this.color, this.alpha);\n      this.instance.drawPolygon(this._points.map(({ x, y }) => new Point(x, y)));\n      this.instance.endFill();\n    }\n  }\n\n  /**\n   * draw shape border\n   * @private\n   */\n  private _drawShapeLine() {\n    if (this._points.length === 0) return;\n    const ctx = this.selected ? this._controlLine : this.instance;\n    const baseWidth = 1 / this.scale;\n    const color = this.displayBorderColor;\n    ctx.moveTo(this._points[0].x, this._points[0].y);\n    this._points.slice(1).forEach((point) => {\n      ctx.lineStyle(baseWidth, color);\n      ctx.drawLine(point.x, point.y, this.borderStyle, this.scale);\n    });\n    ctx.lineStyle(baseWidth, color);\n    if (this._finished) {\n      ctx.drawLine(this._points[0].x, this._points[0].y, this.borderStyle, this.scale);\n    } else if (this._nextPoint) {\n      ctx.drawLine(this._nextPoint.x, this._nextPoint.y, this.borderStyle, this.scale);\n    }\n  }\n\n  /**\n   * draw shape vertexes\n   * @private\n   */\n  private _drawShapeVertex() {\n    this.vertexesContainer?.removeChildren();\n    if (!this.showVertex && !this.showVertexOrder) {\n      return;\n    }\n\n    const r = 4 / this.scale;\n    const offset = this.showVertex ? r : 4 / this.scale;\n    this.instance.lineStyle(1 / this.scale, this.displayBorderColor);\n    this._points.forEach((point, index) => {\n      if (this.showVertex && (!this.editable || !this.selected)) {\n        // draw vertex dot\n        this.instance.beginFill(this.color);\n        this.instance.drawVertex(point.x, point.y, r);\n        this.instance.endFill();\n      }\n      if (this.showVertexOrder) {\n        // draw vertext order\n        const text = new BitmapText(`${1 + index} `, { fontName: 'ALPHA_NUMERIC' });\n        text.scale.set(1 / this.scale);\n        text.position.set(point.x + offset, point.y + offset);\n        if (!this.vertexesContainer) {\n          this._createVertexesContainer();\n        }\n        this.vertexesContainer!.addChild(text);\n      }\n    });\n  }\n\n  /**\n   * draw snapping point\n   */\n  private _drawSnappingPoint() {\n    if (this._snappingPoint) {\n      this.instance.beginFill(this.selectedColor);\n      this.instance.drawCircle(this._snappingPoint.x, this._snappingPoint.y, 3 / this.scale);\n      this.instance.endFill();\n    }\n  }\n\n  /**\n   * create by click to add point\n   * @param point\n   */\n  create() {\n    this.app.view.addEventListener('mousedown', this._mouseDown, false);\n    document.addEventListener('mousemove', this._mouseMove, false);\n    document.addEventListener('mouseup', this._mouseUp, false);\n    this.app.view.addEventListener('dblclick', this._finishByDoubleClick, false);\n\n    this._finished = false;\n    this._nextPoint = null;\n    this._isDown = true; // create start is mouse down\n    this._isDragging = false;\n  }\n\n  /**\n   * mouse down listener when creating\n   * @private\n   */\n  private _mouseDown = (e: MouseEvent) => {\n    if (e.button === 0) { // not right click\n      this._isDown = true;\n    }\n  };\n\n  /**\n   * mouse move listener when creating\n   * @private\n   * @param event\n   */\n  private _mouseMove = (event: MouseEvent) => {\n    if (this._isDown) {\n      this._isDragging = true;\n    }\n\n    let localPoint = this.globalSnappingPoint;\n    if (!localPoint) {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      localPoint = this._mapStageToLocalPosition(point);\n    }\n    const p = localPoint;\n    if (this._isDragging) {\n      // add point directly when dragging to draw a polygon\n      const lastPoint = this.points[this.points.length - 1] || { x: 0, y: 0 };\n      const tolerance = 10 / this.scale;\n      if (Math.abs(p.x - lastPoint.x) > tolerance || Math.abs(p.y - lastPoint.y) > tolerance) {\n        this.addPoint(p);\n      }\n      this._nextPoint = null;\n    } else {\n      this._nextPoint = p;\n      this.drawShape();\n    }\n  };\n\n  /**\n   * mouse up listener when creating\n   * @private\n   * @param event\n   */\n  private _mouseUp = (event: MouseEvent) => {\n    if (this._isDown && !this._isDragging) {\n      let localPoint = this.globalSnappingPoint;\n      if (!localPoint) {\n        const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n        localPoint = this._mapStageToLocalPosition(point);\n      }\n      const p = localPoint;\n      this.addPoint(p);\n    }\n    this._isDown = false;\n    this._isDragging = false;\n  };\n\n  /**\n   * finish by double clicking\n   * @private\n   */\n  private _finishByDoubleClick = () => {\n    this.finishCreate();\n  };\n\n  /**\n   * key down handler\n   * @private\n   * @param e\n   */\n  private _keyDown = (e: KeyboardEvent) => {\n    switch (e.key?.toLowerCase()) {\n      case 'q':\n        if (!this._finished) {\n          e.preventDefault();\n          this.removePoint(this.points.length - 1);\n        }\n        break;\n      case 'enter':\n        if (!this._finished) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          this.finishCreate();\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * finish create\n   */\n  finishCreate = () => {\n    let otherShapeData: PolygonData[] | undefined;\n    this.normalize();\n    this._finish(otherShapeData);\n    this._removeListeners();\n  };\n\n  /**\n   * remove all listeners\n   * @private\n   */\n  private _removeListeners() {\n    this.app.view.removeEventListener('mousedown', this._mouseDown, false);\n    document.removeEventListener('mousemove', this._mouseMove, false);\n    document.removeEventListener('mouseup', this._mouseUp, false);\n    this.app.view.removeEventListener('dblclick', this._finishByDoubleClick, false);\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    const sorted = [...this._points].sort((a, b) => {\n      if (a.y === b.y) return a.x - b.x;\n      return a.y - b.y;\n    });\n    return new Point(sorted[0].x, sorted[0].y);\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      points: this.points,\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    return [[this.points.map((p) => [p.x, p.y] as [number, number])]];\n  }\n\n  /**\n   * delete selected points\n   */\n  deleteSelectedPoints() {\n    if (this.selected) {\n      const deletedIndexes: number[] = [];\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          deletedIndexes.push(i);\n          c.selected = false;\n        }\n      });\n      if (deletedIndexes.length > 0) {\n        this._points = this._points.filter((_, i) => !deletedIndexes.includes(i));\n        this.normalize();\n        this._changed();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point: Point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const { x, y } = point;\n    const { left, right, top, bottom } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n\n    // points\n    let nearestPoint: IPoint | undefined;\n    let d: number | undefined;\n    this.points.forEach((p) => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    const [distance, segment] = this._geometory.distanceTo(location);\n    if (distance < t) {\n      const { ps, pe } = segment;\n      const edgePoint = ps.equalTo(location) ? pe : ps;\n      return new Point(edgePoint.x, edgePoint.y);\n    }\n\n    return null;\n  }\n\n  /**\n   * snap to polygon edges\n   */\n  snap(event: InteractionEvent) {\n    if (event.data.originalEvent.altKey) {\n      const point = event.data.getLocalPosition(this.container);\n      const location = new Flatten.Point(point.x, point.y);\n      const [distance, segment] = this._geometory.distanceTo(location);\n      if (distance < 8 / this.scale) {\n        const { ps, pe } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        this._snappingPoint = new Point(edgePoint.x, edgePoint.y);\n        this.drawShape();\n        return true;\n      }\n    }\n\n    if (this._snappingPoint) {\n      this._snappingPoint = null;\n      this.drawShape();\n    }\n    return false;\n  }\n\n  /**\n   * add snapping point to shape\n   */\n  addSnappingPointToShape() {\n    if (this._snappingPoint) {\n      const { point, edge, previousPointIndex } = this._findEdgeByPointPosition(this._snappingPoint);\n      const x = precise(point.x);\n      const y = precise(point.y);\n      this._geometory.addVertex(new Flatten.Point(x, y), edge);\n      this._points.splice(previousPointIndex + 1, 0, { x, y });\n      this._snappingPoint = null;\n      this._controls.forEach((c) => {\n        c.selected = false;\n      });\n      this.drawShape();\n      this._changed();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * find edge for new point position\n   * @param point\n   */\n  private _findEdgeByPointPosition({ x, y }: { x: number; y: number }) {\n    const point = new Flatten.Point(x, y);\n    const edge = this._geometory.findEdgeByPoint(point);\n    const { start, end } = edge;\n    // find the edge segment point index in points array\n    let i = 0;\n    while (i < this._points.length) {\n      const p1 = this._points[i];\n      const p2 = this._points[(i + 1) % this._points.length];\n      if (\n        (p1.x === start.x && p1.y === start.y && p2.x === end.x && p2.y === end.y) ||\n        (p1.x === end.x && p1.y === end.y && p2.x === start.x && p2.y === start.y)\n      ) {\n        // if has more than one edge that has the same start-end point, just use the first found one\n        // in canvas when snapping point added, just the first of the overlapped edge can be divided\n        break;\n      }\n      i += 1;\n    }\n    return { point, edge, previousPointIndex: i };\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    [...this._points].forEach((point, index) => {\n      if (this.selected || (this.hovered && this.showVertex)) {\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.displayBorderColor,\n            cursor: Cursor.POINTER,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n            onClick: () => this._updatePointSelectedStatus(index),\n          });\n        }\n\n        // update\n        this._controls[index].color = this.displayBorderColor;\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].selected = false;\n        this._controls[index].remove();\n      }\n    });\n    if (this._controls.length > this._points.length) {\n      // remove redundant control points\n      this._controls.slice(this._points.length).forEach((c) => {\n        c.remove();\n      });\n      this._controls = this._controls.slice(0, this._points.length);\n    }\n\n    if (this.rotatable) {\n      if (this.selected) {\n        const { top, bottom } = this.shapeBounds;\n        const size = this.pivot.y - Math.abs(top - bottom) / 2 - 50 / this.scale;\n        if (!this._rotateControl) {\n          this._rotateControl = new ControlRotation({\n            container: this.container,\n            position: this.pivot,\n            size,\n            rotation: this.shapeContainer.rotation,\n            scale: this.scale,\n            color: this.selectedColor,\n            onRotationChange: (angle) => {\n              if (this.rotation !== undefined) {\n                this.rotation += angle;\n                if (this.rotation >= Math.PI) {\n                  this.rotation -= 2 * Math.PI;\n                }\n                if (this.rotation <= -Math.PI) {\n                  this.rotation += 2 * Math.PI;\n                }\n              }\n            },\n            onFinish: () => {\n              this._changed();\n            }\n          });\n        }\n        this._rotateControl.rotation = this.shapeContainer.rotation;\n        this._rotateControl.position = this.pivot;\n        this._rotateControl.size = size;\n        this._rotateControl.add();\n      } else if (this._rotateControl) {\n        this._rotateControl.remove();\n      }\n    }\n  }\n\n  /**\n   * update polygon point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  private _updateByPointPosition(index: number, x: number, y: number) {\n    const position = this.globalSnappingPoint || new Point(x, y);\n    const deltaX = position.x - this._points[index].x;\n    const deltaY = position.y - this._points[index].y;\n    this.updateSelectedPointsPosistion(deltaX, deltaY);\n    this._resizing({ deltaX, deltaY });\n  }\n\n  /**\n   * update selected points position\n   * @param deltaX\n   * @param deltaY\n   */\n  updateSelectedPointsPosistion(deltaX: number, deltaY: number) {\n    // move together\n    this._controls.forEach((c, i) => {\n      if (c.selected) {\n        const position = new Point(this._points[i].x + deltaX, this._points[i].y + deltaY);\n        this._points[i].x = position.x;\n        this._points[i].y = position.y;\n      }\n    });\n    this.drawShape();\n  }\n\n  /**\n   * update selected point\n   * @private\n   * @param index\n   */\n  private _updatePointSelectedStatus(index: number) {\n    if (!this._controls[index].selected) {\n      this._emit(EventAction.VERTEX_SELECTED, index);\n      this._controls.forEach((c, i) => {\n        if (i === index) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  private _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * add a point\n   * @param point\n   * @param index\n   */\n  addPoint(point: IPoint | Point, index?: number) {\n    const pIndex = index === undefined ? this._points.length : index;\n    this._points.splice(pIndex, 0, { x: precise(point.x), y: precise(point.y) });\n    this.drawShape();\n  }\n\n  /**\n   * remove a point\n   * @param index\n   */\n  removePoint(index: number) {\n    if (index >= 0 && index < this._points.length) {\n      this._points.splice(index, 1);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * normalize polygon shape, remove it if necessary\n   */\n  normalize() {\n    // remove duplicated points\n    const points: IPoint[] = [];\n    this._points.forEach((point, index) => {\n      if (index === this._points.length - 1 || point.x !== this._points[index + 1].x || point.y !== this._points[index + 1].y) {\n        points.push(point);\n      }\n    });\n    this._points = points;\n\n    // crossing\n    if (this._points.length > 3) {\n      try {\n        this.splitPolygon();\n      } catch (e) {\n        this._remove();\n        return;\n      }\n    }\n\n    if (this._points.length < 3) {\n      this._remove();\n      return;\n    }\n\n    this._points.forEach((p) => {\n      p.x = precise(p.x);\n      p.y = precise(p.y);\n    });\n\n    this.updateGeometory();\n\n    if (this.area <= 0) {\n      this._remove();\n      return;\n    }\n\n    this.drawShape();\n  }\n\n  // has crossing\n  splitPolygon() {\n    const pointsData: polygonClipping.Geom = [[this.points.map((p) => [p.x, p.y] as Pair)]];\n    const intersection = polygonClipping.intersection(pointsData);\n    let points: Ring = [];\n    if (intersection.length > 1) {\n      // crossing\n      let maxArea = {\n        size: 0,\n        index: 0\n      };\n      intersection.forEach((i, index) => {\n        const polygon = new Flatten.Polygon();\n        polygon.addFace(i[0].map((p) => new Flatten.Point(p[0], p[1])));\n        const area = polygon.faces.values().next().value.area();\n        if (area > maxArea.size) {\n          maxArea = {\n            size: area,\n            index\n          };\n        }\n      });\n      points = intersection[maxArea.index][0];\n    } else if (intersection.length === 1 && intersection[0].length > 0) {\n      const polygonData = lineString(intersection[0][0]);\n      const allPointsOnEdge = this.points.every((p) => pointOnLine(turfPoint([p.x, p.y]), polygonData));\n      if (!allPointsOnEdge) {\n        // contains\n        points = intersection[0][0];\n      }\n    }\n    if (points.length > 0) {\n      const setPoints: {[key: string]: number[]} = {};\n      points.slice(0, points.length - 1).forEach((point) => {\n        setPoints[point.join(',')] = point;\n      });\n      this._points = Object.values(setPoints).map((p) => ({ x: p[0], y: p[1] }));\n      this.setSelectedPoints([]);\n    }\n  }\n\n  /**\n   * update geometory\n   */\n  updateGeometory() {\n    this._geometory.faces.forEach((face) => this._geometory.deleteFace(face));\n    this._geometory.addFace(this._points.map((p) => new Flatten.Point(p.x, p.y)));\n  }\n\n  /**\n   * shape destroy\n   */\n  destroy() {\n    document.removeEventListener('keydown', this._keyDown, false);\n    this._removeListeners();\n    // call parent\n    super.destroy();\n  }\n\n  /**\n   * selected points with point index & point instance\n   * @returns\n   */\n  getSelectedPoints() {\n    if (!this._finished) {\n      const lastPointIndex = this._points.length - 1;\n      return [{ index: lastPointIndex, point: this._points[lastPointIndex] }];\n    }\n    const selectedPoints: {index: number; point: IPoint}[] = [];\n    const points = [...this.points];\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          selectedPoints.push({\n            index: i,\n            point: points[i],\n          });\n        }\n      });\n    }\n    return selectedPoints;\n  }\n\n  /**\n   * set selected points\n   * @param pointsIndex\n   */\n  setSelectedPoints(pointsIndex: number[]) {\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (pointsIndex.includes(i)) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * set points user data\n   * @param pointsData\n   */\n  setPointsUserData(pointsData: {index: number; userData: any}[]) {\n    pointsData.forEach(({ index, userData }) => {\n      this._points[index].userData = cloneDeep(userData);\n    });\n    this.drawShape();\n    if (this._finished) {\n      this._changed();\n    }\n  }\n\n  static getPolygons(shapes: Shape<ShapeData>[]) {\n    return shapes.filter((i) => i.shapeType === ShapeType.POLYGON) as Polygon[];\n  }\n\n  findInnerPolygons(shapes: Shape<ShapeData>[]) {\n    const polygons = Polygon.getPolygons(shapes).filter((i) => i.uid !== this.uid);\n\n    const { left, right, top, bottom } = this.shapeBounds;\n\n    for (let i = 0; i < polygons.length; i += 1) {\n      const polygon = polygons[i];\n      const { left: l, right: r, top: t, bottom: b } = polygon.shapeBounds;\n      if (l >= left && r <= right && t <= top && b >= bottom) {\n        //\n      }\n    }\n  }\n\n  findIntersectPolygons(shapes: Shape<ShapeData>[], includeCover = false) {\n    const polygons = Polygon.getPolygons(shapes).filter((i) => i.uid !== this.uid);\n    const pointsData: polygonClipping.Geom = [[this.points.map((p) => [p.x, p.y])]];\n\n    const intersects: string[] = [];\n    for (let i = 0; i < polygons.length; i += 1) {\n      const polygon = polygons[i];\n      const points: polygonClipping.Geom = [[polygon.points.map((p) => [p.x, p.y])]];\n      const intersection = polygonClipping.intersection(pointsData, points);\n      // has crossing, check include\n      if (intersection.length > 0) {\n        const differenceA = polygonClipping.difference(pointsData, points);\n        const differenceB = polygonClipping.difference(points, pointsData);\n        if (differenceA.length > 0 && differenceB.length > 0) {\n          intersects.push(polygon.uid);\n        } else if (includeCover && differenceA.length > 0 && differenceB.length === 0) {\n          // covered polygons\n          intersects.push(polygon.uid);\n        }\n      }\n    }\n\n    return intersects;\n  }\n\n  merge(polygon: Polygon): PolygonData[] {\n    const pointsData: polygonClipping.Geom = [[this.points.map((p) => [p.x, p.y])]];\n    const polygonPoints: polygonClipping.Geom = [[polygon.points.map((p) => [p.x, p.y])]];\n\n    const mergedPolygonPoints = polygonClipping.union(pointsData, polygonPoints);\n    return (mergedPolygonPoints[0] || []).map((points) => ({\n      points: normalizePoints(points),\n    }));\n  }\n\n  subtract(shapes: Shape<ShapeData>[]): PolygonData[][] | null {\n    const polygons = shapes.filter((i) => i.shapeType === ShapeType.POLYGON) as Polygon[];\n    if (polygons.length === 0) {\n      // no intersection\n      return null;\n    }\n\n    const pointsData = [this.points.map((p) => [p.x, p.y] as [number, number])];\n    const polygonsPointsData = polygons.map((i) => [i.points.map((p) => [p.x, p.y] as [number, number])]);\n\n    const subtractData = polygonClipping.difference(pointsData, ...polygonsPointsData);\n    const newSubtractData: {\n      polygon: polygonClipping.Polygon,\n      area: number,\n    }[] = [];\n    const addToNewSubtractData = (polygon: polygonClipping.Polygon) => {\n      const newPolygon = new Flatten.Polygon(polygon[0]);\n      const area = newPolygon.faces.values().next().value.area();\n      newSubtractData.push({\n        polygon, area,\n      });\n    };\n\n    subtractData.forEach((i) => {\n      if (i.length === 1) {\n        // simple polygon, add directly\n        addToNewSubtractData(i);\n      } else if (i.length > 1) {\n        // complex polygon, need split\n        const points = i[0];\n        const innerPolygons = i.slice(1);\n        const innerPolygonCenters = innerPolygons.map((polygon) => {\n          // get visual center of the polygon\n          // ensure polygon contains the center point\n          // otherwise, it may fail to split some concave polygons by the split line\n          // ref: https://blog.mapbox.com/a-new-algorithm-for-finding-a-visual-center-of-a-polygon-7c77e6492fbc\n          const p = polylabel([polygon], 1);\n          return p as [number, number];\n        }).sort((a, b) => (a[0] === b[0] ? a[1] - b[1] : a[0] - b[0])); // sort from left to right\n\n        const sortedPoints = [...points].sort((a, b) => (a[0] === b[0] ? a[1] - b[1] : a[0] - b[0]));\n        const LPoint = sortedPoints[0];\n        const RPoint = sortedPoints[sortedPoints.length - 1];\n        const LPointIndex = points.findIndex((p) => p[0] === LPoint[0] && p[1] === LPoint[1]);\n        const RPointIndex = points.findIndex((p) => p[0] === RPoint[0] && p[1] === RPoint[1]);\n\n        const splitLine = [LPoint, ...innerPolygonCenters, RPoint];\n        let p1: polygonClipping.Pair[];\n        let p2: polygonClipping.Pair[];\n        if (LPointIndex < RPointIndex) {\n          p1 = [...points.slice(RPointIndex + 1), ...points.slice(0, LPointIndex), ...splitLine];\n          p2 = [...points.slice(LPointIndex + 1, RPointIndex), ...splitLine.reverse()];\n        } else {\n          p1 = [...points.slice(RPointIndex + 1, LPointIndex), ...splitLine];\n          p2 = [...points.slice(LPointIndex + 1), ...points.slice(0, RPointIndex), ...splitLine.reverse()];\n        }\n\n        const innerGeom = innerPolygons.map((p) => [p]);\n        const subtractedPolygons = [\n          ...polygonClipping.difference([p1], [p2], ...innerGeom),\n          ...polygonClipping.difference([p2], [p1], ...innerGeom),\n        ];\n        subtractedPolygons.forEach((polygon) => addToNewSubtractData(polygon));\n      }\n    });\n\n    return newSubtractData\n      .sort((a, b) => b.area - a.area) // sort by area\n      .map((i) => i.polygon.map((points) => ({\n        points: normalizePoints(points),\n      })));\n  }\n\n  /**\n   * set actual points position\n   * reset rotation\n   */\n  rotatePoints() {\n    const points = JSON.parse(JSON.stringify(this.points)) as IPoint[];\n    if (this.rotation !== 0) {\n      points.forEach((p) => {\n        const point = computeRotatedPosition(this.pivot, p, this.rotation);\n        p.x = precise(point.x);\n        p.y = precise(point.y);\n      });\n    }\n    this._rotation = 0;\n    this._updatePosition();\n    this.points = points;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}