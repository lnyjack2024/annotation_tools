{"ast":null,"code":"import { toUint8Array } from 'js-base64';\nimport { getOrigin } from '../../utils';\nexport function getOCRText(base64Str) {\n  const origin = getOrigin();\n  const formData = new FormData();\n  formData.append('base64', base64Str);\n  const fetchPromise = new Promise((resolve, reject) => {\n    fetch(`${origin}/contributor_proxy/v1/lidar/vision/text`, {\n      method: 'POST',\n      credentials: 'include',\n      body: formData\n    }).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      }\n      throw new Error('Request failed.');\n    }).then(body => resolve(body.data)).catch(e => reject(e));\n  });\n  const timeoutPromise = new Promise((_, reject) => {\n    setTimeout(() => reject(), 4000);\n  });\n  return Promise.race([fetchPromise, timeoutPromise]);\n}\nexport function imageSegmentation(base64Str, clicks, threshold) {\n  const origin = getOrigin();\n  const byteArr = toUint8Array(base64Str.substring(base64Str.indexOf(',') + 1));\n  const blob = new Blob([byteArr], {\n    type: 'image/png'\n  });\n  const formData = new FormData();\n  formData.append('image', blob);\n  formData.append('clicks', clicks);\n  formData.append('threshold', `${threshold}`);\n  return new Promise((resolve, reject) => {\n    fetch(`${origin}/contributor_proxy/v1/lidar/image/segmentation`, {\n      method: 'POST',\n      credentials: 'include',\n      body: formData\n    }).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      }\n      throw new Error('Request failed.');\n    }).then(body => {\n      const {\n        data\n      } = body;\n      if (!data || !Array.isArray(data)) {\n        throw new Error('Invalid result.');\n      }\n      if (data.length === 1) {\n        resolve(data[0]);\n      } else {\n        let polygon = [];\n        data.forEach(p => {\n          if (p.length > polygon.length) {\n            polygon = [...p];\n          }\n        });\n        resolve(polygon);\n      }\n    }).catch(e => reject(e));\n  });\n}","map":{"version":3,"names":["toUint8Array","getOrigin","getOCRText","base64Str","origin","formData","FormData","append","fetchPromise","Promise","resolve","reject","fetch","method","credentials","body","then","res","status","json","Error","data","catch","e","timeoutPromise","_","setTimeout","race","imageSegmentation","clicks","threshold","byteArr","substring","indexOf","blob","Blob","type","Array","isArray","length","polygon","forEach","p"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/request.ts"],"sourcesContent":["import { toUint8Array } from 'js-base64';\nimport { getOrigin } from '../../utils';\n\nexport function getOCRText(base64Str: string) {\n  const origin = getOrigin();\n  const formData = new FormData();\n  formData.append('base64', base64Str);\n\n  const fetchPromise = new Promise<string>((resolve, reject) => {\n    fetch(`${origin}/contributor_proxy/v1/lidar/vision/text`, {\n      method: 'POST',\n      credentials: 'include',\n      body: formData,\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          return res.json();\n        }\n        throw new Error('Request failed.');\n      })\n      .then((body) => resolve(body.data))\n      .catch((e) => reject(e));\n  });\n  const timeoutPromise = new Promise<string>((_, reject) => {\n    setTimeout(() => reject(), 4000);\n  });\n\n  return Promise.race([fetchPromise, timeoutPromise]);\n}\n\nexport function imageSegmentation(base64Str: string, clicks: string, threshold: number) {\n  const origin = getOrigin();\n\n  const byteArr = toUint8Array(base64Str.substring(base64Str.indexOf(',') + 1));\n  const blob = new Blob([byteArr], { type: 'image/png' });\n\n  const formData = new FormData();\n  formData.append('image', blob);\n  formData.append('clicks', clicks);\n  formData.append('threshold', `${threshold}`);\n\n  return new Promise<{ x: number; y: number }[]>((resolve, reject) => {\n    fetch(`${origin}/contributor_proxy/v1/lidar/image/segmentation`, {\n      method: 'POST',\n      credentials: 'include',\n      body: formData,\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          return res.json();\n        }\n        throw new Error('Request failed.');\n      })\n      .then((body) => {\n        const { data } = body;\n        if (!data || !Array.isArray(data)) {\n          throw new Error('Invalid result.');\n        }\n        if (data.length === 1) {\n          resolve(data[0]);\n        } else {\n          let polygon: { x: number; y: number }[] = [];\n          data.forEach((p: { x: number; y: number }[]) => {\n            if (p.length > polygon.length) {\n              polygon = [...p];\n            }\n          });\n          resolve(polygon);\n        }\n      })\n      .catch((e) => reject(e));\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}