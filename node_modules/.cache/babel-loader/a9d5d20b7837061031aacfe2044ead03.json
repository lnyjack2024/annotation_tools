{"ast":null,"code":"module.exports = audioBufferToWav;\nfunction audioBufferToWav(buffer, opt) {\n  opt = opt || {};\n  var numChannels = buffer.numberOfChannels;\n  var sampleRate = buffer.sampleRate;\n  var format = opt.float32 ? 3 : 1;\n  var bitDepth = format === 3 ? 32 : 16;\n  var result;\n  if (numChannels === 2) {\n    result = interleave(buffer.getChannelData(0), buffer.getChannelData(1));\n  } else {\n    result = buffer.getChannelData(0);\n  }\n  return encodeWAV(result, format, sampleRate, numChannels, bitDepth);\n}\nfunction encodeWAV(samples, format, sampleRate, numChannels, bitDepth) {\n  var bytesPerSample = bitDepth / 8;\n  var blockAlign = numChannels * bytesPerSample;\n  var buffer = new ArrayBuffer(44 + samples.length * bytesPerSample);\n  var view = new DataView(buffer);\n\n  /* RIFF identifier */\n  writeString(view, 0, 'RIFF');\n  /* RIFF chunk length */\n  view.setUint32(4, 36 + samples.length * bytesPerSample, true);\n  /* RIFF type */\n  writeString(view, 8, 'WAVE');\n  /* format chunk identifier */\n  writeString(view, 12, 'fmt ');\n  /* format chunk length */\n  view.setUint32(16, 16, true);\n  /* sample format (raw) */\n  view.setUint16(20, format, true);\n  /* channel count */\n  view.setUint16(22, numChannels, true);\n  /* sample rate */\n  view.setUint32(24, sampleRate, true);\n  /* byte rate (sample rate * block align) */\n  view.setUint32(28, sampleRate * blockAlign, true);\n  /* block align (channel count * bytes per sample) */\n  view.setUint16(32, blockAlign, true);\n  /* bits per sample */\n  view.setUint16(34, bitDepth, true);\n  /* data chunk identifier */\n  writeString(view, 36, 'data');\n  /* data chunk length */\n  view.setUint32(40, samples.length * bytesPerSample, true);\n  if (format === 1) {\n    // Raw PCM\n    floatTo16BitPCM(view, 44, samples);\n  } else {\n    writeFloat32(view, 44, samples);\n  }\n  return buffer;\n}\nfunction interleave(inputL, inputR) {\n  var length = inputL.length + inputR.length;\n  var result = new Float32Array(length);\n  var index = 0;\n  var inputIndex = 0;\n  while (index < length) {\n    result[index++] = inputL[inputIndex];\n    result[index++] = inputR[inputIndex];\n    inputIndex++;\n  }\n  return result;\n}\nfunction writeFloat32(output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 4) {\n    output.setFloat32(offset, input[i], true);\n  }\n}\nfunction floatTo16BitPCM(output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 2) {\n    var s = Math.max(-1, Math.min(1, input[i]));\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n  }\n}\nfunction writeString(view, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i));\n  }\n}","map":{"version":3,"names":["module","exports","audioBufferToWav","buffer","opt","numChannels","numberOfChannels","sampleRate","format","float32","bitDepth","result","interleave","getChannelData","encodeWAV","samples","bytesPerSample","blockAlign","ArrayBuffer","length","view","DataView","writeString","setUint32","setUint16","floatTo16BitPCM","writeFloat32","inputL","inputR","Float32Array","index","inputIndex","output","offset","input","i","setFloat32","s","Math","max","min","setInt16","string","setUint8","charCodeAt"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/node_modules/audiobuffer-to-wav/index.js"],"sourcesContent":["module.exports = audioBufferToWav\nfunction audioBufferToWav (buffer, opt) {\n  opt = opt || {}\n\n  var numChannels = buffer.numberOfChannels\n  var sampleRate = buffer.sampleRate\n  var format = opt.float32 ? 3 : 1\n  var bitDepth = format === 3 ? 32 : 16\n\n  var result\n  if (numChannels === 2) {\n    result = interleave(buffer.getChannelData(0), buffer.getChannelData(1))\n  } else {\n    result = buffer.getChannelData(0)\n  }\n\n  return encodeWAV(result, format, sampleRate, numChannels, bitDepth)\n}\n\nfunction encodeWAV (samples, format, sampleRate, numChannels, bitDepth) {\n  var bytesPerSample = bitDepth / 8\n  var blockAlign = numChannels * bytesPerSample\n\n  var buffer = new ArrayBuffer(44 + samples.length * bytesPerSample)\n  var view = new DataView(buffer)\n\n  /* RIFF identifier */\n  writeString(view, 0, 'RIFF')\n  /* RIFF chunk length */\n  view.setUint32(4, 36 + samples.length * bytesPerSample, true)\n  /* RIFF type */\n  writeString(view, 8, 'WAVE')\n  /* format chunk identifier */\n  writeString(view, 12, 'fmt ')\n  /* format chunk length */\n  view.setUint32(16, 16, true)\n  /* sample format (raw) */\n  view.setUint16(20, format, true)\n  /* channel count */\n  view.setUint16(22, numChannels, true)\n  /* sample rate */\n  view.setUint32(24, sampleRate, true)\n  /* byte rate (sample rate * block align) */\n  view.setUint32(28, sampleRate * blockAlign, true)\n  /* block align (channel count * bytes per sample) */\n  view.setUint16(32, blockAlign, true)\n  /* bits per sample */\n  view.setUint16(34, bitDepth, true)\n  /* data chunk identifier */\n  writeString(view, 36, 'data')\n  /* data chunk length */\n  view.setUint32(40, samples.length * bytesPerSample, true)\n  if (format === 1) { // Raw PCM\n    floatTo16BitPCM(view, 44, samples)\n  } else {\n    writeFloat32(view, 44, samples)\n  }\n\n  return buffer\n}\n\nfunction interleave (inputL, inputR) {\n  var length = inputL.length + inputR.length\n  var result = new Float32Array(length)\n\n  var index = 0\n  var inputIndex = 0\n\n  while (index < length) {\n    result[index++] = inputL[inputIndex]\n    result[index++] = inputR[inputIndex]\n    inputIndex++\n  }\n  return result\n}\n\nfunction writeFloat32 (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 4) {\n    output.setFloat32(offset, input[i], true)\n  }\n}\n\nfunction floatTo16BitPCM (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 2) {\n    var s = Math.max(-1, Math.min(1, input[i]))\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true)\n  }\n}\n\nfunction writeString (view, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i))\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}