{"ast":null,"code":"/* eslint-disable no-bitwise, no-prototype-builtins, no-nested-ternary */\n\nconst formats = {\n  0x0001: 'lpcm',\n  0x0003: 'lpcm',\n  0xfffe: 'lpcm'\n};\nfunction decodeSync(data, _opts) {\n  const opts = _opts || {};\n  const buffer = data;\n  const dataView = new DataView(buffer);\n  const reader = createReader(dataView);\n  if (reader.string(4) !== 'RIFF') {\n    throw new TypeError('Invalid WAV file');\n  }\n  reader.uint32(); // skip file length\n\n  if (reader.string(4) !== 'WAVE') {\n    throw new TypeError('Invalid WAV file');\n  }\n  let format = null;\n  let audioData = null;\n  do {\n    const chunkType = reader.string(4);\n    const chunkSize = reader.uint32();\n    switch (chunkType) {\n      case 'fmt ':\n        format = decodeFormat(reader, chunkSize);\n        if (format instanceof Error) {\n          throw format;\n        }\n        break;\n      case 'data':\n        audioData = decodeData(reader, chunkSize, format, opts);\n        if (audioData instanceof Error) {\n          throw audioData;\n        }\n        break;\n      default:\n        reader.skip(chunkSize);\n        break;\n    }\n  } while (audioData === null);\n  return audioData;\n}\nfunction decode(buffer, opts) {\n  return new Promise(resolve => {\n    resolve(decodeSync(buffer, opts));\n  });\n}\nfunction decodeFormat(reader, chunkSize) {\n  const formatId = reader.uint16();\n  if (!formats.hasOwnProperty(formatId)) {\n    return new TypeError(`Unsupported format in WAV file: 0x${formatId.toString(16)}`);\n  }\n  const format = {\n    formatId,\n    floatingPoint: formatId === 0x0003,\n    numberOfChannels: reader.uint16(),\n    sampleRate: reader.uint32(),\n    byteRate: reader.uint32(),\n    blockSize: reader.uint16(),\n    bitDepth: reader.uint16()\n  };\n  reader.skip(chunkSize - 16);\n  return format;\n}\nfunction decodeData(reader, _chunkSize, format, opts) {\n  const chunkSize = Math.min(_chunkSize, reader.remain());\n  const length = Math.floor(chunkSize / format.blockSize);\n  const numberOfChannels = format.numberOfChannels;\n  const sampleRate = format.sampleRate;\n  const channelData = new Array(numberOfChannels);\n  for (let ch = 0; ch < numberOfChannels; ch += 1) {\n    channelData[ch] = new Float32Array(length);\n  }\n  const retVal = readPCM(reader, channelData, length, format, opts);\n  if (retVal instanceof Error) {\n    return retVal;\n  }\n  return {\n    numberOfChannels,\n    length,\n    sampleRate,\n    channelData\n  };\n}\nfunction readPCM(reader, _channelData, length, format, opts) {\n  const bitDepth = format.bitDepth;\n  const decoderOption = format.floatingPoint ? 'f' : opts.symmetric ? 's' : '';\n  const methodName = `pcm${bitDepth}${decoderOption}`;\n  if (!reader[methodName]) {\n    return new TypeError(`Not supported bit depth: ${format.bitDepth}`);\n  }\n  const channelData = _channelData;\n  const read = reader[methodName].bind(reader);\n  const numberOfChannels = format.numberOfChannels;\n  for (let i = 0; i < length; i += 1) {\n    for (let ch = 0; ch < numberOfChannels; ch += 1) {\n      channelData[ch][i] = read();\n    }\n  }\n  return null;\n}\nfunction createReader(dataView) {\n  let pos = 0;\n  return {\n    remain() {\n      return dataView.byteLength - pos;\n    },\n    skip(n) {\n      pos += n;\n    },\n    uint8() {\n      const data = dataView.getUint8(pos, true);\n      pos += 1;\n      return data;\n    },\n    int16() {\n      const data = dataView.getInt16(pos, true);\n      pos += 2;\n      return data;\n    },\n    uint16() {\n      const data = dataView.getUint16(pos, true);\n      pos += 2;\n      return data;\n    },\n    uint32() {\n      const data = dataView.getUint32(pos, true);\n      pos += 4;\n      return data;\n    },\n    string(n) {\n      let data = '';\n      for (let i = 0; i < n; i += 1) {\n        data += String.fromCharCode(this.uint8());\n      }\n      return data;\n    },\n    pcm8() {\n      const data = dataView.getUint8(pos) - 128;\n      pos += 1;\n      return data < 0 ? data / 128 : data / 127;\n    },\n    pcm8s() {\n      const data = dataView.getUint8(pos) - 127.5;\n      pos += 1;\n      return data / 127.5;\n    },\n    pcm16() {\n      const data = dataView.getInt16(pos, true);\n      pos += 2;\n      return data < 0 ? data / 32768 : data / 32767;\n    },\n    pcm16s() {\n      const data = dataView.getInt16(pos, true);\n      pos += 2;\n      return data / 32768;\n    },\n    pcm24() {\n      const x0 = dataView.getUint8(pos + 0);\n      const x1 = dataView.getUint8(pos + 1);\n      const x2 = dataView.getUint8(pos + 2);\n      const xx = x0 + (x1 << 8) + (x2 << 16);\n      const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n      pos += 3;\n      return data < 0 ? data / 8388608 : data / 8388607;\n    },\n    pcm24s() {\n      const x0 = dataView.getUint8(pos + 0);\n      const x1 = dataView.getUint8(pos + 1);\n      const x2 = dataView.getUint8(pos + 2);\n      const xx = x0 + (x1 << 8) + (x2 << 16);\n      const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n      pos += 3;\n      return data / 8388608;\n    },\n    pcm32() {\n      const data = dataView.getInt32(pos, true);\n      pos += 4;\n      return data < 0 ? data / 2147483648 : data / 2147483647;\n    },\n    pcm32s() {\n      const data = dataView.getInt32(pos, true);\n      pos += 4;\n      return data / 2147483648;\n    },\n    pcm32f() {\n      const data = dataView.getFloat32(pos, true);\n      pos += 4;\n      return data;\n    },\n    pcm64f() {\n      const data = dataView.getFloat64(pos, true);\n      pos += 8;\n      return data;\n    }\n  };\n}\nexport default {\n  decode,\n  decodeSync\n};","map":{"version":3,"names":["formats","decodeSync","data","_opts","opts","buffer","dataView","DataView","reader","createReader","string","TypeError","uint32","format","audioData","chunkType","chunkSize","decodeFormat","Error","decodeData","skip","decode","Promise","resolve","formatId","uint16","hasOwnProperty","toString","floatingPoint","numberOfChannels","sampleRate","byteRate","blockSize","bitDepth","_chunkSize","Math","min","remain","length","floor","channelData","Array","ch","Float32Array","retVal","readPCM","_channelData","decoderOption","symmetric","methodName","read","bind","i","pos","byteLength","n","uint8","getUint8","int16","getInt16","getUint16","getUint32","String","fromCharCode","pcm8","pcm8s","pcm16","pcm16s","pcm24","x0","x1","x2","xx","pcm24s","pcm32","getInt32","pcm32s","pcm32f","getFloat32","pcm64f","getFloat64"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/common/Wave/utils/wav-decoder.js"],"sourcesContent":["/* eslint-disable no-bitwise, no-prototype-builtins, no-nested-ternary */\n\nconst formats = {\n  0x0001: 'lpcm',\n  0x0003: 'lpcm',\n  0xfffe: 'lpcm',\n};\n\nfunction decodeSync(data, _opts) {\n  const opts = _opts || {};\n\n  const buffer = data;\n\n  const dataView = new DataView(buffer);\n  const reader = createReader(dataView);\n\n  if (reader.string(4) !== 'RIFF') {\n    throw new TypeError('Invalid WAV file');\n  }\n\n  reader.uint32(); // skip file length\n\n  if (reader.string(4) !== 'WAVE') {\n    throw new TypeError('Invalid WAV file');\n  }\n\n  let format = null;\n  let audioData = null;\n  do {\n    const chunkType = reader.string(4);\n    const chunkSize = reader.uint32();\n    switch (chunkType) {\n      case 'fmt ':\n        format = decodeFormat(reader, chunkSize);\n        if (format instanceof Error) {\n          throw format;\n        }\n        break;\n      case 'data':\n        audioData = decodeData(reader, chunkSize, format, opts);\n        if (audioData instanceof Error) {\n          throw audioData;\n        }\n        break;\n      default:\n        reader.skip(chunkSize);\n        break;\n    }\n  } while (audioData === null);\n\n  return audioData;\n}\n\nfunction decode(buffer, opts) {\n  return new Promise(((resolve) => {\n    resolve(decodeSync(buffer, opts));\n  }));\n}\n\nfunction decodeFormat(reader, chunkSize) {\n  const formatId = reader.uint16();\n\n  if (!formats.hasOwnProperty(formatId)) {\n    return new TypeError(`Unsupported format in WAV file: 0x${formatId.toString(16)}`);\n  }\n\n  const format = {\n    formatId,\n    floatingPoint: formatId === 0x0003,\n    numberOfChannels: reader.uint16(),\n    sampleRate: reader.uint32(),\n    byteRate: reader.uint32(),\n    blockSize: reader.uint16(),\n    bitDepth: reader.uint16()\n  };\n  reader.skip(chunkSize - 16);\n\n  return format;\n}\n\nfunction decodeData(reader, _chunkSize, format, opts) {\n  const chunkSize = Math.min(_chunkSize, reader.remain());\n\n  const length = Math.floor(chunkSize / format.blockSize);\n  const numberOfChannels = format.numberOfChannels;\n  const sampleRate = format.sampleRate;\n  const channelData = new Array(numberOfChannels);\n\n  for (let ch = 0; ch < numberOfChannels; ch += 1) {\n    channelData[ch] = new Float32Array(length);\n  }\n\n  const retVal = readPCM(reader, channelData, length, format, opts);\n\n  if (retVal instanceof Error) {\n    return retVal;\n  }\n\n  return {\n    numberOfChannels,\n    length,\n    sampleRate,\n    channelData\n  };\n}\n\nfunction readPCM(reader, _channelData, length, format, opts) {\n  const bitDepth = format.bitDepth;\n  const decoderOption = format.floatingPoint ? 'f' : opts.symmetric ? 's' : '';\n  const methodName = `pcm${bitDepth}${decoderOption}`;\n\n  if (!reader[methodName]) {\n    return new TypeError(`Not supported bit depth: ${format.bitDepth}`);\n  }\n  const channelData = _channelData;\n  const read = reader[methodName].bind(reader);\n  const numberOfChannels = format.numberOfChannels;\n\n  for (let i = 0; i < length; i += 1) {\n    for (let ch = 0; ch < numberOfChannels; ch += 1) {\n      channelData[ch][i] = read();\n    }\n  }\n\n  return null;\n}\n\nfunction createReader(dataView) {\n  let pos = 0;\n\n  return {\n    remain() {\n      return dataView.byteLength - pos;\n    },\n    skip(n) {\n      pos += n;\n    },\n    uint8() {\n      const data = dataView.getUint8(pos, true);\n\n      pos += 1;\n\n      return data;\n    },\n    int16() {\n      const data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data;\n    },\n    uint16() {\n      const data = dataView.getUint16(pos, true);\n\n      pos += 2;\n\n      return data;\n    },\n    uint32() {\n      const data = dataView.getUint32(pos, true);\n\n      pos += 4;\n\n      return data;\n    },\n    string(n) {\n      let data = '';\n\n      for (let i = 0; i < n; i += 1) {\n        data += String.fromCharCode(this.uint8());\n      }\n\n      return data;\n    },\n    pcm8() {\n      const data = dataView.getUint8(pos) - 128;\n\n      pos += 1;\n\n      return data < 0 ? data / 128 : data / 127;\n    },\n    pcm8s() {\n      const data = dataView.getUint8(pos) - 127.5;\n\n      pos += 1;\n\n      return data / 127.5;\n    },\n    pcm16() {\n      const data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data < 0 ? data / 32768 : data / 32767;\n    },\n    pcm16s() {\n      const data = dataView.getInt16(pos, true);\n\n      pos += 2;\n\n      return data / 32768;\n    },\n    pcm24() {\n      const x0 = dataView.getUint8(pos + 0);\n      const x1 = dataView.getUint8(pos + 1);\n      const x2 = dataView.getUint8(pos + 2);\n      const xx = (x0 + (x1 << 8) + (x2 << 16));\n      const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n\n      pos += 3;\n\n      return data < 0 ? data / 8388608 : data / 8388607;\n    },\n    pcm24s() {\n      const x0 = dataView.getUint8(pos + 0);\n      const x1 = dataView.getUint8(pos + 1);\n      const x2 = dataView.getUint8(pos + 2);\n      const xx = (x0 + (x1 << 8) + (x2 << 16));\n      const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n\n      pos += 3;\n\n      return data / 8388608;\n    },\n    pcm32() {\n      const data = dataView.getInt32(pos, true);\n\n      pos += 4;\n\n      return data < 0 ? data / 2147483648 : data / 2147483647;\n    },\n    pcm32s() {\n      const data = dataView.getInt32(pos, true);\n\n      pos += 4;\n\n      return data / 2147483648;\n    },\n    pcm32f() {\n      const data = dataView.getFloat32(pos, true);\n\n      pos += 4;\n\n      return data;\n    },\n    pcm64f() {\n      const data = dataView.getFloat64(pos, true);\n\n      pos += 8;\n\n      return data;\n    }\n  };\n}\n\nexport default {\n  decode,\n  decodeSync,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}