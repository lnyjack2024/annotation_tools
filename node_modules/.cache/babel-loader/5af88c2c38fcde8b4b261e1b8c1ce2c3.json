{"ast":null,"code":"import { Container, Graphics, Sprite, Texture, Text } from 'pixi.js';\nimport Layer from '../Layer';\nimport ShapeGraphics from '../ShapeGraphics';\nimport { hitTesting } from '../utils';\nconst gutter = 4;\nconst viewOffset = 8;\nconst titleHeight = 24;\nconst minZoom = 0.25;\nconst maxZoom = 100;\nfunction getContrastColor(color, blackColor, whiteColor) {\n  const hex = color.toString(16);\n  const r = parseInt(hex.substr(0, 2), 16);\n  const g = parseInt(hex.substr(2, 2), 16);\n  const b = parseInt(hex.substr(4, 2), 16);\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  return yiq >= 128 ? blackColor : whiteColor;\n}\nexport let EventAction = /*#__PURE__*/function (EventAction) {\n  EventAction[\"POINTERDOWN\"] = \"pointer-down\";\n  return EventAction;\n}({});\nexport let SelectedStyle = /*#__PURE__*/function (SelectedStyle) {\n  SelectedStyle[\"LINE\"] = \"line\";\n  SelectedStyle[\"FILL\"] = \"fill\";\n  return SelectedStyle;\n}({});\nexport default class GridContainer extends Container {\n  /**\n   * get border color\n   * @getter\n   */\n  get borderColor() {\n    return this._borderColor;\n  }\n\n  /**\n   * set border color\n   * @setter\n   */\n  set borderColor(color) {\n    const shouldUpdate = this._borderColor !== color;\n    this._borderColor = color;\n    if (shouldUpdate) {\n      this.drawBox();\n    }\n  }\n\n  /**\n   * selected status\n   */\n\n  /**\n   * get selected\n   * @getter\n   */\n  get selected() {\n    return this._selected;\n  }\n\n  /**\n   * set selected\n   * @setter\n   */\n  set selected(selected) {\n    const shouldUpdate = this._selected !== selected;\n    this._selected = selected;\n    if (shouldUpdate) {\n      this.drawBox();\n    }\n  }\n\n  /**\n   * selected style\n   */\n\n  /**\n   * get selected style\n   * @getter\n   */\n  get selectedStyle() {\n    return this._selectedStyle;\n  }\n\n  /**\n   * set selected style\n   * @setter\n   */\n  set selectedStyle(selectedStyle) {\n    const shouldUpdate = this._selectedStyle !== selectedStyle;\n    this._selectedStyle = selectedStyle;\n    if (shouldUpdate) {\n      this.drawBox();\n    }\n  }\n\n  /**\n   * hovered status\n   */\n\n  /**\n   * get hovered\n   * @getter\n   */\n  get hovered() {\n    return this._hovered;\n  }\n\n  /**\n   * set hovered\n   * @setter\n   */\n  set hovered(hovered) {\n    const shouldUpdate = this._hovered !== hovered;\n    this._hovered = hovered;\n    if (shouldUpdate) {\n      this.drawBox();\n    }\n  }\n\n  /**\n   * view zoom level\n   */\n\n  /**\n   * get view scale\n   * @getter\n   */\n  get viewScale() {\n    return this.view.scale.x;\n  }\n\n  /**\n   * set view scale\n   * @setter\n   */\n  set viewScale(scale) {\n    this.view.scale.set(scale, scale);\n    // update children scale\n    const setChildrenScale = children => {\n      children.forEach(child => {\n        if (child instanceof ShapeGraphics) {\n          // eslint-disable-next-line no-param-reassign\n          child.shape.scale = scale;\n        } else if (child instanceof Container) {\n          setChildrenScale(child.children);\n        }\n      });\n    };\n    setChildrenScale(this.view.children);\n    // update review anchor scale\n    this.reviews.forEach(review => {\n      review.setScale(scale);\n    });\n  }\n\n  /**\n   * is right button clicked\n   */\n\n  /**\n   * view bounds\n   */\n  get viewBounds() {\n    return {\n      x: viewOffset,\n      y: titleHeight,\n      width: this._containerWidth - viewOffset * 2,\n      height: this._containerHeight - titleHeight - viewOffset\n    };\n  }\n\n  /**\n   * grid bounds\n   */\n  get gridBounds() {\n    return {\n      x: gutter / 2,\n      y: gutter / 2,\n      width: this._containerWidth - gutter,\n      height: this._containerHeight - gutter\n    };\n  }\n\n  /**\n   * image bounds\n   */\n  get imageBounds() {\n    const {\n      width,\n      height\n    } = this.image;\n    return {\n      left: 0,\n      top: 0,\n      right: this.imageRotation % Math.PI === 0 ? width : height,\n      bottom: this.imageRotation % Math.PI === 0 ? height : width\n    };\n  }\n  constructor({\n    title = '',\n    info = '',\n    selected = false,\n    selectedStyle = SelectedStyle.LINE\n  } = {}) {\n    super();\n\n    // init title\n    /**\n     * grid container id\n     */\n    this.id = '';\n    /**\n     * box shape\n     */\n    this.box = new Graphics();\n    /**\n     * view container (with image & shapes)\n     */\n    this.view = new Layer();\n    /**\n     * grid image\n     */\n    this.image = new Sprite(Texture.EMPTY);\n    /**\n     * grid image load error\n     */\n    this.imageLoadError = false;\n    /**\n     * grid image rotation\n     */\n    this.imageRotation = 0;\n    /**\n     * grid title\n     */\n    this.title = void 0;\n    /**\n     * grid info\n     */\n    this.info = void 0;\n    /**\n     * error text\n     */\n    this.error = null;\n    /**\n     * shapes\n     */\n    this.shapes = [];\n    /**\n     * review anchors\n     */\n    this.reviews = [];\n    /**\n     * hovered shape\n     */\n    this.hoveredShape = void 0;\n    /**\n     * container width (default 400)\n     */\n    this._containerWidth = 400;\n    /**\n     * container height (default 300)\n     */\n    this._containerHeight = 300;\n    /**\n     * border color\n     */\n    this._borderColor = 0x1A1B1E;\n    this._selected = false;\n    this._selectedStyle = SelectedStyle.LINE;\n    this._hovered = false;\n    this._viewZoom = 1;\n    this._rightClicked = false;\n    /**\n     * click position when right button clicked\n     */\n    this._rightClickPoint = null;\n    /**\n     * stage position when right button clicked\n     */\n    this._rightClickPosition = null;\n    /**\n     * process pointer down\n     * @param e\n     */\n    this.processPointerDown = e => {\n      if (e.data.button === 2 && this.selected) {\n        const point = e.data.getLocalPosition(this);\n        if (this.isPointInView(point)) {\n          this._rightClicked = true;\n          this._rightClickPoint = point;\n          this._rightClickPosition = this.view.position.clone();\n          return;\n        }\n      }\n      this.emit(EventAction.POINTERDOWN, this, e.data.getLocalPosition(this.view));\n    };\n    /**\n     * process pointer move\n     * @param e\n     */\n    this.processPointerMove = e => {\n      if (this._rightClicked && this._rightClickPoint && this._rightClickPosition) {\n        const point = e.data.getLocalPosition(this);\n        const offsetX = point.x - this._rightClickPoint.x;\n        const offsetY = point.y - this._rightClickPoint.y;\n        this.view.position.set(this._rightClickPosition.x + offsetX, this._rightClickPosition.y + offsetY);\n        return;\n      }\n      if (this.hovered) {\n        const {\n          intersection,\n          snappingPoint\n        } = hitTesting(e.data.global, e.data.getLocalPosition(this.view), this.shapes.map(shape => shape.instance));\n        this.setHoveredShape(intersection);\n        if (!e.data.originalEvent.ctrlKey) {\n          this.view.setSnappingPoint(snappingPoint);\n        } else {\n          this.view.setSnappingPoint(null);\n        }\n      }\n    };\n    /**\n     * process pointer up\n     */\n    this.processPointerUp = () => {\n      this._rightClicked = false;\n      this._rightClickPoint = null;\n      this._rightClickPosition = null;\n    };\n    /**\n     * process pointer out\n     */\n    this.processPointerOut = () => {\n      this.processPointerUp();\n      this.setHoveredShape();\n    };\n    this.title = new Text(title, {\n      fontSize: 14,\n      lineHeight: 16,\n      fill: '#FFFFFF'\n    });\n    this.title.position.set(viewOffset, viewOffset / 2);\n    // init info\n    this.info = new Text(info, {\n      fontSize: 14,\n      lineHeight: 16,\n      fill: '#FFFFFF'\n    });\n    this._selected = selected;\n    this._selectedStyle = selectedStyle;\n    this.on('pointerover', () => {\n      this.hovered = true;\n    });\n    this.on('pointerout', () => {\n      this.hovered = false;\n    });\n    this.on('pointerdown', this.processPointerDown);\n    this.on('pointermove', this.processPointerMove);\n    this.on('pointerup', this.processPointerUp);\n    this.on('pointerupoutside', this.processPointerUp);\n    this.on('pointerout', this.processPointerOut);\n\n    // set interactive\n    this.interactive = true;\n    // add to container\n    this.addChild(this.box);\n    this.addChild(this.title);\n    this.addChild(this.info);\n    this.addChild(this.view);\n    this.view.addChild(this.image);\n    this.view.sortableChildren = true;\n    // redraw\n    this.draw();\n  }\n  /**\n   * is point (based on container) in view\n   * @param point\n   */\n  isPointInView(point) {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.viewBounds;\n    return point.x >= x && point.x <= x + width && point.y >= y && point.y <= y + height;\n  }\n\n  /**\n   * set container size\n   * @param width\n   * @param height\n   */\n  setSize(width, height) {\n    // set container size\n    this._containerWidth = width;\n    this._containerHeight = height;\n    // set filter area\n    const {\n      x: vx,\n      y: vy,\n      width: vw,\n      height: vh\n    } = this.viewBounds;\n    const {\n      x,\n      y\n    } = this.position;\n    this.view.mask = new Graphics().beginFill(0x000000).drawRect(x + vx, y + vy, vw, vh).endFill();\n    // update hit area\n    // this.hitArea = new Rectangle(0, 0, width, height);\n    // update info position\n    this.info.position.set(width - this.info.getBounds().width - viewOffset, viewOffset / 2);\n    // redraw\n    this.draw();\n  }\n\n  /**\n   * set info text\n   * @param text\n   */\n  setInfo(text) {\n    this.info.text = text;\n    const {\n      width\n    } = this.info.getBounds();\n    this.info.position.set(this._containerWidth - width - viewOffset, viewOffset / 2);\n  }\n\n  /**\n   * set image\n   * @param texture\n   */\n  setImage(texture) {\n    this.image.texture = texture;\n    this.fitImage();\n  }\n\n  /**\n   * set image load error\n   * @param hasError\n   */\n  setImageLoadError(hasError) {\n    this.imageLoadError = hasError;\n    if (this.error) {\n      this.removeChild(this.error);\n    }\n    if (hasError) {\n      this.error = new Text('Error', {\n        fontSize: 14,\n        fill: '#FFFFFF'\n      });\n      this.error.position.set(this._containerWidth / 2 - this.error.width / 2, this._containerHeight / 2);\n      this.addChild(this.error);\n    }\n  }\n\n  /**\n   * fit image to the container\n   */\n  fitImage() {\n    if (this.imageLoadError && this.error) {\n      this.error.position.set(this._containerWidth / 2 - this.error.width / 2, this._containerHeight / 2);\n      return;\n    }\n    const {\n      width,\n      height\n    } = this.image;\n    this.image.pivot.set(width / 2, height / 2);\n    let imageWidth = width;\n    let imageHeight = height;\n    if (this.imageRotation % Math.PI !== 0) {\n      imageWidth = height;\n      imageHeight = width;\n    }\n    this.image.position.set(imageWidth / 2, imageHeight / 2);\n    this.image.rotation = this.imageRotation;\n    const {\n      width: viewWidth,\n      height: viewHeight,\n      x,\n      y\n    } = this.viewBounds;\n    const viewRatio = viewWidth / viewHeight;\n    const imgRatio = imageWidth / imageHeight;\n    this.viewScale = viewRatio < imgRatio ? viewWidth / imageWidth : viewHeight / imageHeight;\n    this.view.position.set(x + (viewWidth - this.viewScale * imageWidth) / 2, y + (viewHeight - this.viewScale * imageHeight) / 2);\n    this._viewZoom = 1;\n  }\n\n  /**\n   * set hovered shape\n   * @param shape\n   */\n  setHoveredShape(shape) {\n    if (shape === this.hoveredShape) {\n      return;\n    }\n    if (this.hoveredShape) {\n      this.hoveredShape.hovered = false;\n    }\n    this.hoveredShape = shape;\n    if (this.hoveredShape) {\n      this.hoveredShape.hovered = true;\n    }\n  }\n\n  /**\n   * set shapes\n   * @param shapes\n   */\n  setShapes(shapes) {\n    this.setHoveredShape();\n    this.shapes.forEach(shape => {\n      shape.destroy();\n    });\n    this.shapes = shapes;\n    this.fitShapes();\n  }\n\n  /**\n   * fit view to shapes\n   */\n  fitShapes() {\n    if (this.shapes.length <= 0) {\n      this.fitImage();\n      return;\n    }\n    const {\n      width: viewWidth,\n      height: viewHeight,\n      x,\n      y\n    } = this.viewBounds;\n    const oldViewScale = this.viewScale;\n    const bboxes = [];\n    this.shapes.forEach(shape => {\n      bboxes.push(shape.shapeBounds);\n    });\n    const l = Math.min(...bboxes.map(({\n      left\n    }) => left));\n    const t = Math.min(...bboxes.map(({\n      top\n    }) => top));\n    const r = Math.max(...bboxes.map(({\n      right\n    }) => right));\n    const b = Math.max(...bboxes.map(({\n      bottom\n    }) => bottom));\n    const width = r - l;\n    const height = b - t;\n    if (width !== 0 && height !== 0) {\n      const ratio = width / height;\n      const viewRatio = viewWidth / viewHeight;\n      const viewScale = (viewRatio < ratio ? viewWidth / width : viewHeight / height) * 0.5;\n      const {\n        width: imageWidth,\n        height: imageHeight\n      } = this.image;\n      const imgRatio = imageWidth / imageHeight;\n      const originScale = viewRatio < imgRatio ? viewWidth / imageWidth : viewHeight / imageHeight;\n      if (viewScale < originScale) {\n        // default fit image rather than fit shapes\n        this.fitImage();\n        return;\n      }\n      this.viewScale = viewScale;\n      this.view.position.set(x + viewWidth / 2 - this.viewScale * (l + width / 2), y + viewHeight / 2 - this.viewScale * (t + height / 2));\n      const zoomScale = this.viewScale / oldViewScale;\n      this._viewZoom *= zoomScale;\n    } else {\n      this.fitImage();\n    }\n  }\n\n  /**\n   * set review anchors\n   * @param reviews\n   */\n  setReviews(reviews) {\n    this.reviews.forEach(review => {\n      review.destroy();\n    });\n    this.reviews = reviews;\n  }\n\n  /**\n   * draw grid\n   */\n  draw() {\n    this.drawBox();\n  }\n\n  /**\n   * draw grid box\n   */\n  drawBox() {\n    let textColor = getContrastColor(this.borderColor, '#252935', '#FFFFFF');\n    if (this.selected && this.selectedStyle === SelectedStyle.FILL) {\n      textColor = '#252935';\n    }\n    this.title.style.fill = textColor;\n    this.info.style.fill = textColor;\n    this.box.clear();\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.gridBounds;\n    let fill = this.borderColor;\n    if (this.selected && this.selectedStyle === SelectedStyle.FILL) {\n      fill = 0xFFFFFF;\n    }\n    this.box.beginFill(fill);\n    this.box.drawRect(x, y, width, height);\n    this.box.endFill();\n    const {\n      x: vx,\n      y: vy,\n      width: vw,\n      height: vh\n    } = this.viewBounds;\n    this.box.beginFill(0x000000);\n    this.box.drawRect(vx, vy, vw, vh);\n    this.box.endFill();\n    if (this.selected || this.hovered) {\n      this.box.lineStyle(2, this.selected ? 0xFFFFFF : 0x4A90E2);\n      this.box.drawRect(x, y, width, height);\n    }\n  }\n\n  /**\n   * wheel\n   * @param event\n   * @param zoomPoint\n   */\n  wheel(event, zoomPoint) {\n    if (this.selected && this.hovered) {\n      event.stopPropagation();\n      const zoomPointX = zoomPoint.x - this.position.x;\n      const zoomPointY = zoomPoint.y - this.position.y;\n      let newZoom = event.deltaY > 0 ? this._viewZoom / 1.1 : this._viewZoom * 1.1;\n      newZoom = Math.max(Math.min(newZoom, maxZoom), minZoom);\n      const zoomScale = newZoom / this._viewZoom;\n      this._viewZoom = newZoom;\n      this.viewScale *= zoomScale;\n      const {\n        x,\n        y\n      } = this.view.position;\n      this.view.position.set(zoomPointX - (zoomPointX - x) * zoomScale, zoomPointY - (zoomPointY - y) * zoomScale);\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["Container","Graphics","Sprite","Texture","Text","Layer","ShapeGraphics","hitTesting","gutter","viewOffset","titleHeight","minZoom","maxZoom","getContrastColor","color","blackColor","whiteColor","hex","toString","r","parseInt","substr","g","b","yiq","EventAction","SelectedStyle","GridContainer","borderColor","_borderColor","shouldUpdate","drawBox","selected","_selected","selectedStyle","_selectedStyle","hovered","_hovered","viewScale","view","scale","x","set","setChildrenScale","children","forEach","child","shape","reviews","review","setScale","viewBounds","y","width","_containerWidth","height","_containerHeight","gridBounds","imageBounds","image","left","top","right","imageRotation","Math","PI","bottom","constructor","title","info","LINE","id","box","EMPTY","imageLoadError","error","shapes","hoveredShape","_viewZoom","_rightClicked","_rightClickPoint","_rightClickPosition","processPointerDown","e","data","button","point","getLocalPosition","isPointInView","position","clone","emit","POINTERDOWN","processPointerMove","offsetX","offsetY","intersection","snappingPoint","global","map","instance","setHoveredShape","originalEvent","ctrlKey","setSnappingPoint","processPointerUp","processPointerOut","fontSize","lineHeight","fill","on","interactive","addChild","sortableChildren","draw","setSize","vx","vy","vw","vh","mask","beginFill","drawRect","endFill","getBounds","setInfo","text","setImage","texture","fitImage","setImageLoadError","hasError","removeChild","pivot","imageWidth","imageHeight","rotation","viewWidth","viewHeight","viewRatio","imgRatio","setShapes","destroy","fitShapes","length","oldViewScale","bboxes","push","shapeBounds","l","min","t","max","ratio","originScale","zoomScale","setReviews","textColor","FILL","style","clear","lineStyle","wheel","event","zoomPoint","stopPropagation","zoomPointX","zoomPointY","newZoom","deltaY"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/canvas/GridContainer.ts"],"sourcesContent":["import { Container, Graphics, Sprite, Texture, Text, Point, DisplayObject, InteractionEvent } from 'pixi.js';\nimport Layer from '../Layer';\nimport { ShapeData } from '../types';\nimport Shape from '../Shape';\nimport ShapeGraphics from '../ShapeGraphics';\nimport Anchor from '../anchors/Anchor';\nimport { hitTesting } from '../utils';\n\nconst gutter = 4;\nconst viewOffset = 8;\nconst titleHeight = 24;\nconst minZoom = 0.25;\nconst maxZoom = 100;\nfunction getContrastColor(color: number, blackColor: string, whiteColor: string) {\n  const hex = color.toString(16);\n  const r = parseInt(hex.substr(0, 2), 16);\n  const g = parseInt(hex.substr(2, 2), 16);\n  const b = parseInt(hex.substr(4, 2), 16);\n  const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n  return yiq >= 128 ? blackColor : whiteColor;\n}\n\nexport enum EventAction {\n  POINTERDOWN = 'pointer-down',\n}\nexport enum SelectedStyle {\n  LINE = 'line',\n  FILL = 'fill',\n}\n\ninterface GridOptions {\n  title?: string;\n  info?: string;\n  selected?: boolean;\n  selectedStyle?: SelectedStyle;\n}\n\nexport default class GridContainer extends Container {\n  /**\n   * grid container id\n   */\n  id = '';\n\n  /**\n   * box shape\n   */\n  box = new Graphics();\n\n  /**\n   * view container (with image & shapes)\n   */\n  view = new Layer();\n\n  /**\n   * grid image\n   */\n  image = new Sprite(Texture.EMPTY);\n\n  /**\n   * grid image load error\n   */\n  imageLoadError = false;\n\n  /**\n   * grid image rotation\n   */\n  imageRotation = 0;\n\n  /**\n   * grid title\n   */\n  title: Text;\n\n  /**\n   * grid info\n   */\n  info: Text;\n\n  /**\n   * error text\n   */\n  error: Text | null = null;\n\n  /**\n   * shapes\n   */\n  shapes: Shape<ShapeData>[] = [];\n\n  /**\n   * review anchors\n   */\n  reviews: Anchor[] = [];\n\n  /**\n   * hovered shape\n   */\n  hoveredShape?: Shape<unknown>;\n\n  /**\n   * container width (default 400)\n   */\n  _containerWidth = 400;\n\n  /**\n   * container height (default 300)\n   */\n  _containerHeight = 300;\n\n  /**\n   * border color\n   */\n  _borderColor = 0x1A1B1E;\n\n  /**\n   * get border color\n   * @getter\n   */\n  get borderColor() {\n    return this._borderColor;\n  }\n\n  /**\n   * set border color\n   * @setter\n   */\n  set borderColor(color) {\n    const shouldUpdate = this._borderColor !== color;\n    this._borderColor = color;\n    if (shouldUpdate) {\n      this.drawBox();\n    }\n  }\n\n  /**\n   * selected status\n   */\n  _selected = false;\n\n  /**\n   * get selected\n   * @getter\n   */\n  get selected() {\n    return this._selected;\n  }\n\n  /**\n   * set selected\n   * @setter\n   */\n  set selected(selected) {\n    const shouldUpdate = this._selected !== selected;\n    this._selected = selected;\n    if (shouldUpdate) {\n      this.drawBox();\n    }\n  }\n\n  /**\n   * selected style\n   */\n  _selectedStyle = SelectedStyle.LINE;\n\n  /**\n   * get selected style\n   * @getter\n   */\n  get selectedStyle() {\n    return this._selectedStyle;\n  }\n\n  /**\n   * set selected style\n   * @setter\n   */\n  set selectedStyle(selectedStyle) {\n    const shouldUpdate = this._selectedStyle !== selectedStyle;\n    this._selectedStyle = selectedStyle;\n    if (shouldUpdate) {\n      this.drawBox();\n    }\n  }\n\n  /**\n   * hovered status\n   */\n  _hovered = false;\n\n  /**\n   * get hovered\n   * @getter\n   */\n  get hovered() {\n    return this._hovered;\n  }\n\n  /**\n   * set hovered\n   * @setter\n   */\n  set hovered(hovered) {\n    const shouldUpdate = this._hovered !== hovered;\n    this._hovered = hovered;\n    if (shouldUpdate) {\n      this.drawBox();\n    }\n  }\n\n  /**\n   * view zoom level\n   */\n  _viewZoom = 1;\n\n  /**\n   * get view scale\n   * @getter\n   */\n  get viewScale() {\n    return this.view.scale.x;\n  }\n\n  /**\n   * set view scale\n   * @setter\n   */\n  set viewScale(scale) {\n    this.view.scale.set(scale, scale);\n    // update children scale\n    const setChildrenScale = (children: DisplayObject[]) => {\n      children.forEach((child) => {\n        if (child instanceof ShapeGraphics) {\n          // eslint-disable-next-line no-param-reassign\n          child.shape.scale = scale;\n        } else if (child instanceof Container) {\n          setChildrenScale(child.children);\n        }\n      });\n    };\n    setChildrenScale(this.view.children);\n    // update review anchor scale\n    this.reviews.forEach((review) => {\n      review.setScale(scale);\n    });\n  }\n\n  /**\n   * is right button clicked\n   */\n  _rightClicked = false;\n\n  /**\n   * click position when right button clicked\n   */\n  _rightClickPoint: Point | null = null;\n\n  /**\n   * stage position when right button clicked\n   */\n  _rightClickPosition: Point | null = null;\n\n  /**\n   * view bounds\n   */\n  get viewBounds() {\n    return {\n      x: viewOffset,\n      y: titleHeight,\n      width: this._containerWidth - viewOffset * 2,\n      height: this._containerHeight - titleHeight - viewOffset,\n    };\n  }\n\n  /**\n   * grid bounds\n   */\n  get gridBounds() {\n    return {\n      x: gutter / 2,\n      y: gutter / 2,\n      width: this._containerWidth - gutter,\n      height: this._containerHeight - gutter,\n    };\n  }\n\n  /**\n   * image bounds\n   */\n  get imageBounds() {\n    const { width, height } = this.image;\n    return {\n      left: 0,\n      top: 0,\n      right: this.imageRotation % Math.PI === 0 ? width : height,\n      bottom: this.imageRotation % Math.PI === 0 ? height : width,\n    };\n  }\n\n  constructor({ title = '', info = '', selected = false, selectedStyle = SelectedStyle.LINE }: GridOptions = {}) {\n    super();\n\n    // init title\n    this.title = new Text(title, {\n      fontSize: 14,\n      lineHeight: 16,\n      fill: '#FFFFFF',\n    });\n    this.title.position.set(viewOffset, viewOffset / 2);\n    // init info\n    this.info = new Text(info, {\n      fontSize: 14,\n      lineHeight: 16,\n      fill: '#FFFFFF',\n    });\n\n    this._selected = selected;\n    this._selectedStyle = selectedStyle;\n\n    this.on('pointerover', () => {\n      this.hovered = true;\n    });\n    this.on('pointerout', () => {\n      this.hovered = false;\n    });\n    this.on('pointerdown', this.processPointerDown);\n    this.on('pointermove', this.processPointerMove);\n    this.on('pointerup', this.processPointerUp);\n    this.on('pointerupoutside', this.processPointerUp);\n    this.on('pointerout', this.processPointerOut);\n\n    // set interactive\n    this.interactive = true;\n    // add to container\n    this.addChild(this.box);\n    this.addChild(this.title);\n    this.addChild(this.info);\n    this.addChild(this.view);\n    this.view.addChild(this.image);\n    this.view.sortableChildren = true;\n    // redraw\n    this.draw();\n  }\n\n  /**\n   * process pointer down\n   * @param e\n   */\n  processPointerDown = (e: InteractionEvent) => {\n    if (e.data.button === 2 && this.selected) {\n      const point = e.data.getLocalPosition(this);\n      if (this.isPointInView(point)) {\n        this._rightClicked = true;\n        this._rightClickPoint = point;\n        this._rightClickPosition = this.view.position.clone();\n        return;\n      }\n    }\n    this.emit(EventAction.POINTERDOWN, this, e.data.getLocalPosition(this.view));\n  };\n\n  /**\n   * process pointer move\n   * @param e\n   */\n  processPointerMove = (e: InteractionEvent) => {\n    if (this._rightClicked && this._rightClickPoint && this._rightClickPosition) {\n      const point = e.data.getLocalPosition(this);\n      const offsetX = point.x - this._rightClickPoint.x;\n      const offsetY = point.y - this._rightClickPoint.y;\n      this.view.position.set(this._rightClickPosition.x + offsetX, this._rightClickPosition.y + offsetY);\n      return;\n    }\n\n    if (this.hovered) {\n      const { intersection, snappingPoint } = hitTesting(e.data.global, e.data.getLocalPosition(this.view), this.shapes.map((shape) => shape.instance));\n      this.setHoveredShape(intersection);\n      if (!e.data.originalEvent.ctrlKey) {\n        this.view.setSnappingPoint(snappingPoint);\n      } else {\n        this.view.setSnappingPoint(null);\n      }\n    }\n  };\n\n  /**\n   * process pointer up\n   */\n  processPointerUp = () => {\n    this._rightClicked = false;\n    this._rightClickPoint = null;\n    this._rightClickPosition = null;\n  };\n\n  /**\n   * process pointer out\n   */\n  processPointerOut = () => {\n    this.processPointerUp();\n    this.setHoveredShape();\n  };\n\n  /**\n   * is point (based on container) in view\n   * @param point\n   */\n  isPointInView(point: Point) {\n    const { x, y, width, height } = this.viewBounds;\n    return point.x >= x && point.x <= x + width && point.y >= y && point.y <= y + height;\n  }\n\n  /**\n   * set container size\n   * @param width\n   * @param height\n   */\n  setSize(width: number, height: number) {\n    // set container size\n    this._containerWidth = width;\n    this._containerHeight = height;\n    // set filter area\n    const { x: vx, y: vy, width: vw, height: vh } = this.viewBounds;\n    const { x, y } = this.position;\n    this.view.mask = new Graphics()\n      .beginFill(0x000000)\n      .drawRect(x + vx, y + vy, vw, vh)\n      .endFill();\n    // update hit area\n    // this.hitArea = new Rectangle(0, 0, width, height);\n    // update info position\n    this.info.position.set(width - this.info.getBounds().width - viewOffset, viewOffset / 2);\n    // redraw\n    this.draw();\n  }\n\n  /**\n   * set info text\n   * @param text\n   */\n  setInfo(text: string) {\n    this.info.text = text;\n    const { width } = this.info.getBounds();\n    this.info.position.set(this._containerWidth - width - viewOffset, viewOffset / 2);\n  }\n\n  /**\n   * set image\n   * @param texture\n   */\n  setImage(texture: Texture) {\n    this.image.texture = texture;\n    this.fitImage();\n  }\n\n  /**\n   * set image load error\n   * @param hasError\n   */\n  setImageLoadError(hasError: boolean) {\n    this.imageLoadError = hasError;\n    if (this.error) {\n      this.removeChild(this.error);\n    }\n    if (hasError) {\n      this.error = new Text('Error', {\n        fontSize: 14,\n        fill: '#FFFFFF',\n      });\n      this.error.position.set(this._containerWidth / 2 - this.error.width / 2, this._containerHeight / 2);\n      this.addChild(this.error);\n    }\n  }\n\n  /**\n   * fit image to the container\n   */\n  fitImage() {\n    if (this.imageLoadError && this.error) {\n      this.error.position.set(this._containerWidth / 2 - this.error.width / 2, this._containerHeight / 2);\n      return;\n    }\n\n    const { width, height } = this.image;\n    this.image.pivot.set(width / 2, height / 2);\n\n    let imageWidth = width;\n    let imageHeight = height;\n    if (this.imageRotation % Math.PI !== 0) {\n      imageWidth = height;\n      imageHeight = width;\n    }\n    this.image.position.set(imageWidth / 2, imageHeight / 2);\n    this.image.rotation = this.imageRotation;\n\n    const { width: viewWidth, height: viewHeight, x, y } = this.viewBounds;\n    const viewRatio = viewWidth / viewHeight;\n    const imgRatio = imageWidth / imageHeight;\n    this.viewScale = viewRatio < imgRatio ? viewWidth / imageWidth : viewHeight / imageHeight;\n    this.view.position.set(x + (viewWidth - this.viewScale * imageWidth) / 2, y + (viewHeight - this.viewScale * imageHeight) / 2);\n    this._viewZoom = 1;\n  }\n\n  /**\n   * set hovered shape\n   * @param shape\n   */\n  setHoveredShape(shape?: Shape<unknown>) {\n    if (shape === this.hoveredShape) {\n      return;\n    }\n    if (this.hoveredShape) {\n      this.hoveredShape.hovered = false;\n    }\n    this.hoveredShape = shape;\n    if (this.hoveredShape) {\n      this.hoveredShape.hovered = true;\n    }\n  }\n\n  /**\n   * set shapes\n   * @param shapes\n   */\n  setShapes(shapes: Shape<ShapeData>[]) {\n    this.setHoveredShape();\n    this.shapes.forEach((shape) => {\n      shape.destroy();\n    });\n    this.shapes = shapes;\n    this.fitShapes();\n  }\n\n  /**\n   * fit view to shapes\n   */\n  fitShapes() {\n    if (this.shapes.length <= 0) {\n      this.fitImage();\n      return;\n    }\n\n    const { width: viewWidth, height: viewHeight, x, y } = this.viewBounds;\n    const oldViewScale = this.viewScale;\n    const bboxes: { left: number; top: number; right: number; bottom: number }[] = [];\n    this.shapes.forEach((shape) => {\n      bboxes.push(shape.shapeBounds);\n    });\n    const l = Math.min(...bboxes.map(({ left }) => left));\n    const t = Math.min(...bboxes.map(({ top }) => top));\n    const r = Math.max(...bboxes.map(({ right }) => right));\n    const b = Math.max(...bboxes.map(({ bottom }) => bottom));\n    const width = r - l;\n    const height = b - t;\n    if (width !== 0 && height !== 0) {\n      const ratio = width / height;\n      const viewRatio = viewWidth / viewHeight;\n      const viewScale = (viewRatio < ratio ? viewWidth / width : viewHeight / height) * 0.5;\n\n      const { width: imageWidth, height: imageHeight } = this.image;\n      const imgRatio = imageWidth / imageHeight;\n      const originScale = viewRatio < imgRatio ? viewWidth / imageWidth : viewHeight / imageHeight;\n      if (viewScale < originScale) { // default fit image rather than fit shapes\n        this.fitImage();\n        return;\n      }\n\n      this.viewScale = viewScale;\n      this.view.position.set(x + viewWidth / 2 - this.viewScale * (l + width / 2), y + viewHeight / 2 - this.viewScale * (t + height / 2));\n      const zoomScale = this.viewScale / oldViewScale;\n      this._viewZoom *= zoomScale;\n    } else {\n      this.fitImage();\n    }\n  }\n\n  /**\n   * set review anchors\n   * @param reviews\n   */\n  setReviews(reviews: Anchor[]) {\n    this.reviews.forEach((review) => {\n      review.destroy();\n    });\n    this.reviews = reviews;\n  }\n\n  /**\n   * draw grid\n   */\n  draw() {\n    this.drawBox();\n  }\n\n  /**\n   * draw grid box\n   */\n  drawBox() {\n    let textColor = getContrastColor(this.borderColor, '#252935', '#FFFFFF');\n    if (this.selected && this.selectedStyle === SelectedStyle.FILL) {\n      textColor = '#252935';\n    }\n    this.title.style.fill = textColor;\n    this.info.style.fill = textColor;\n\n    this.box.clear();\n\n    const { x, y, width, height } = this.gridBounds;\n\n    let fill = this.borderColor;\n    if (this.selected && this.selectedStyle === SelectedStyle.FILL) {\n      fill = 0xFFFFFF;\n    }\n    this.box.beginFill(fill);\n    this.box.drawRect(x, y, width, height);\n    this.box.endFill();\n\n    const { x: vx, y: vy, width: vw, height: vh } = this.viewBounds;\n    this.box.beginFill(0x000000);\n    this.box.drawRect(vx, vy, vw, vh);\n    this.box.endFill();\n\n    if (this.selected || this.hovered) {\n      this.box.lineStyle(2, this.selected ? 0xFFFFFF : 0x4A90E2);\n      this.box.drawRect(x, y, width, height);\n    }\n  }\n\n  /**\n   * wheel\n   * @param event\n   * @param zoomPoint\n   */\n  wheel(event: WheelEvent, zoomPoint: Point) {\n    if (this.selected && this.hovered) {\n      event.stopPropagation();\n      const zoomPointX = zoomPoint.x - this.position.x;\n      const zoomPointY = zoomPoint.y - this.position.y;\n      let newZoom = event.deltaY > 0 ? this._viewZoom / 1.1 : this._viewZoom * 1.1;\n      newZoom = Math.max(Math.min(newZoom, maxZoom), minZoom);\n      const zoomScale = newZoom / this._viewZoom;\n      this._viewZoom = newZoom;\n      this.viewScale *= zoomScale;\n      const { x, y } = this.view.position;\n      this.view.position.set(zoomPointX - (zoomPointX - x) * zoomScale, zoomPointY - (zoomPointY - y) * zoomScale);\n      return true;\n    }\n    return false;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}