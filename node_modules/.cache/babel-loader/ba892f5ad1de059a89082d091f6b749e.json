{"ast":null,"code":"import React,{useEffect,useState}from'react';import screenfull from'screenfull';import{connect}from'react-redux';import AppenLogo from'../../../common/AppenLogo';import TaskSelect from'./TaskSelect/TaskSelect';import Guider from'./Guider/Guider';import Measurements from'./Measurements/Measurements';import Preferences from'../Preferences';import{ClearAll,Save,Question,Fullscreen}from'../../../common/icons';import'./TaskNavigation.scss';import{showHideGuider}from'../../redux/action';import{translate,SegmentMode}from'../../constants';import version from'../../version';import{isPreview,isAnnotationReadonly}from'../../../../utils/tool-mode';import{isAppenCloud}from'../../../../utils';const TaskNavigation=props=>{const{toolMode,annotateDisabled,results,currentVideo,segmentMode}=props;const[enableClear,setEnableClear]=useState(false);useEffect(()=>{const readonly=isAnnotationReadonly(toolMode)||annotateDisabled;const segments=results[currentVideo];const len=segments.length;let isAnnotated=false;if(len===1){const{attributes,content=[{role:'none',text:'',attributes:{}}]}=segments[0];isAnnotated=Object.keys(attributes||{}).length>0||content[0].role!=='none'||Object.keys(content[0].attributes||{}).length>0;}setEnableClear(!readonly&&(segmentMode===SegmentMode.individual&&len>0||segmentMode===SegmentMode.continuous&&(len>1||isAnnotated)));},[results,currentVideo]);const handleButtonClick=(e,type)=>{switch(type){case'fullscreen':if(screenfull.isEnabled){screenfull.toggle();}break;case'guider':props.showHideGuider();break;case'save':props.onSave();break;case'clearAll':{if(enableClear){props.clearAll();}break;}default:break;}};return/*#__PURE__*/React.createElement(\"div\",{className:\"task-navigation-container\"},isAppenCloud()&&/*#__PURE__*/React.createElement(\"div\",{className:\"appen-logo\"},/*#__PURE__*/React.createElement(AppenLogo,null)),/*#__PURE__*/React.createElement(\"div\",{className:\"appen-title\"},/*#__PURE__*/React.createElement(\"span\",null,\"Audio Segmentation Tool\"),/*#__PURE__*/React.createElement(\"span\",{className:\"version\"},translate('VERSION_LABEL'),' ',version)),/*#__PURE__*/React.createElement(\"div\",{className:\"task-navigation-button-list\"},/*#__PURE__*/React.createElement(Measurements,null),/*#__PURE__*/React.createElement(\"button\",{disabled:!enableClear,className:\"clear-all-button\",onClick:e=>handleButtonClick(e,'clearAll')},/*#__PURE__*/React.createElement(ClearAll,null)),/*#__PURE__*/React.createElement(\"button\",{className:\"guider-button\",onClick:e=>handleButtonClick(e,'guider')},/*#__PURE__*/React.createElement(Question,null)),/*#__PURE__*/React.createElement(\"button\",{className:\"fullscreen-button\",onClick:e=>handleButtonClick(e,'fullscreen')},/*#__PURE__*/React.createElement(Fullscreen,null)),/*#__PURE__*/React.createElement(Preferences,null),/*#__PURE__*/React.createElement(\"button\",{className:\"save-button\",disabled:isPreview(toolMode),onClick:e=>handleButtonClick(e,'save')},/*#__PURE__*/React.createElement(Save,null))),/*#__PURE__*/React.createElement(Guider,null),/*#__PURE__*/React.createElement(TaskSelect,{className:\"task-select-wrapper\",setCurrentSegment:props.setCurrentSegment}));};const mapStateToProps=state=>({isGuiding:state.isGuiding,toolMode:state.toolMode,segmentMode:state.segmentMode,currentVideo:state.currentVideo,results:state.results,annotateDisabled:state.annotateDisabled});const mapDispatchToProps={showHideGuider};export default connect(mapStateToProps,mapDispatchToProps)(TaskNavigation);","map":{"version":3,"names":["React","useEffect","useState","screenfull","connect","AppenLogo","TaskSelect","Guider","Measurements","Preferences","ClearAll","Save","Question","Fullscreen","showHideGuider","translate","SegmentMode","version","isPreview","isAnnotationReadonly","isAppenCloud","TaskNavigation","props","toolMode","annotateDisabled","results","currentVideo","segmentMode","enableClear","setEnableClear","readonly","segments","len","length","isAnnotated","attributes","content","role","text","Object","keys","individual","continuous","handleButtonClick","e","type","isEnabled","toggle","onSave","clearAll","createElement","className","disabled","onClick","setCurrentSegment","mapStateToProps","state","isGuiding","mapDispatchToProps"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/long-audio/components/TaskNavigation/TaskNavigation.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport screenfull from 'screenfull';\nimport { connect } from 'react-redux';\nimport AppenLogo from '../../../common/AppenLogo';\nimport TaskSelect from './TaskSelect/TaskSelect';\nimport Guider from './Guider/Guider';\nimport Measurements from './Measurements/Measurements';\nimport Preferences from '../Preferences';\nimport { ClearAll, Save, Question, Fullscreen } from '../../../common/icons';\nimport './TaskNavigation.scss';\nimport { showHideGuider } from '../../redux/action';\nimport { translate, SegmentMode } from '../../constants';\nimport version from '../../version';\nimport { isPreview, isAnnotationReadonly } from '../../../../utils/tool-mode';\nimport { isAppenCloud } from '../../../../utils';\n\nconst TaskNavigation = ((props) => {\n  const { toolMode, annotateDisabled, results, currentVideo, segmentMode } = props;\n  const [enableClear, setEnableClear] = useState(false);\n\n  useEffect(() => {\n    const readonly = isAnnotationReadonly(toolMode) || annotateDisabled;\n    const segments = results[currentVideo];\n    const len = segments.length;\n    let isAnnotated = false;\n    if (len === 1) {\n      const { attributes, content = [{ role: 'none', text: '', attributes: {} }] } = segments[0];\n      isAnnotated =\n        Object.keys(attributes || {}).length > 0 ||\n        content[0].role !== 'none' ||\n        Object.keys(content[0].attributes || {}).length > 0;\n    }\n\n    setEnableClear(\n      !readonly && (\n        (segmentMode === SegmentMode.individual && len > 0) ||\n        (segmentMode === SegmentMode.continuous && (len > 1 || isAnnotated))\n      )\n    );\n  }, [results, currentVideo]);\n\n  const handleButtonClick = (e, type) => {\n    switch (type) {\n      case 'fullscreen':\n        if (screenfull.isEnabled) {\n          screenfull.toggle();\n        }\n        break;\n      case 'guider':\n        props.showHideGuider();\n        break;\n      case 'save':\n        props.onSave();\n        break;\n      case 'clearAll': {\n        if (enableClear) {\n          props.clearAll();\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  };\n  return (\n    <div className=\"task-navigation-container\">\n      {isAppenCloud() && (\n        <div className=\"appen-logo\">\n          <AppenLogo />\n        </div>\n      )}\n      <div className=\"appen-title\">\n        <span>Audio Segmentation Tool</span>\n        <span className=\"version\">\n          {translate('VERSION_LABEL')}\n          {' '}\n          {version}\n        </span>\n      </div>\n      <div className=\"task-navigation-button-list\">\n        <Measurements />\n        <button\n          disabled={!enableClear}\n          className=\"clear-all-button\"\n          onClick={(e) => handleButtonClick(e, 'clearAll')}\n        >\n          <ClearAll />\n        </button>\n        <button\n          className=\"guider-button\"\n          onClick={(e) => handleButtonClick(e, 'guider')}\n        >\n          <Question />\n        </button>\n        <button\n          className=\"fullscreen-button\"\n          onClick={(e) => handleButtonClick(e, 'fullscreen')}\n        >\n          <Fullscreen />\n        </button>\n        <Preferences />\n        <button\n          className=\"save-button\"\n          disabled={isPreview(toolMode)}\n          onClick={(e) => handleButtonClick(e, 'save')}\n        >\n          <Save />\n        </button>\n      </div>\n      <Guider />\n      <TaskSelect\n        className=\"task-select-wrapper\"\n        setCurrentSegment={props.setCurrentSegment}\n      />\n    </div>\n  );\n});\n\nconst mapStateToProps = (state) => ({\n  isGuiding: state.isGuiding,\n  toolMode: state.toolMode,\n  segmentMode: state.segmentMode,\n  currentVideo: state.currentVideo,\n  results: state.results,\n  annotateDisabled: state.annotateDisabled,\n});\nconst mapDispatchToProps = {\n  showHideGuider,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskNavigation);\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,UAAU,KAAM,YAAY,CACnC,OAASC,OAAO,KAAQ,aAAa,CACrC,MAAO,CAAAC,SAAS,KAAM,2BAA2B,CACjD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,MAAM,KAAM,iBAAiB,CACpC,MAAO,CAAAC,YAAY,KAAM,6BAA6B,CACtD,MAAO,CAAAC,WAAW,KAAM,gBAAgB,CACxC,OAASC,QAAQ,CAAEC,IAAI,CAAEC,QAAQ,CAAEC,UAAU,KAAQ,uBAAuB,CAC5E,MAAO,uBAAuB,CAC9B,OAASC,cAAc,KAAQ,oBAAoB,CACnD,OAASC,SAAS,CAAEC,WAAW,KAAQ,iBAAiB,CACxD,MAAO,CAAAC,OAAO,KAAM,eAAe,CACnC,OAASC,SAAS,CAAEC,oBAAoB,KAAQ,6BAA6B,CAC7E,OAASC,YAAY,KAAQ,mBAAmB,CAEhD,KAAM,CAAAC,cAAc,CAAKC,KAAK,EAAK,CACjC,KAAM,CAAEC,QAAQ,CAAEC,gBAAgB,CAAEC,OAAO,CAAEC,YAAY,CAAEC,WAAY,CAAC,CAAGL,KAAK,CAChF,KAAM,CAACM,WAAW,CAAEC,cAAc,CAAC,CAAG3B,QAAQ,CAAC,KAAK,CAAC,CAErDD,SAAS,CAAC,IAAM,CACd,KAAM,CAAA6B,QAAQ,CAAGX,oBAAoB,CAACI,QAAQ,CAAC,EAAIC,gBAAgB,CACnE,KAAM,CAAAO,QAAQ,CAAGN,OAAO,CAACC,YAAY,CAAC,CACtC,KAAM,CAAAM,GAAG,CAAGD,QAAQ,CAACE,MAAM,CAC3B,GAAI,CAAAC,WAAW,CAAG,KAAK,CACvB,GAAIF,GAAG,GAAK,CAAC,CAAE,CACb,KAAM,CAAEG,UAAU,CAAEC,OAAO,CAAG,CAAC,CAAEC,IAAI,CAAE,MAAM,CAAEC,IAAI,CAAE,EAAE,CAAEH,UAAU,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAGJ,QAAQ,CAAC,CAAC,CAAC,CAC1FG,WAAW,CACTK,MAAM,CAACC,IAAI,CAACL,UAAU,EAAI,CAAC,CAAC,CAAC,CAACF,MAAM,CAAG,CAAC,EACxCG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,GAAK,MAAM,EAC1BE,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAACD,UAAU,EAAI,CAAC,CAAC,CAAC,CAACF,MAAM,CAAG,CAAC,CACvD,CAEAJ,cAAc,CACZ,CAACC,QAAQ,GACNH,WAAW,GAAKX,WAAW,CAACyB,UAAU,EAAIT,GAAG,CAAG,CAAC,EACjDL,WAAW,GAAKX,WAAW,CAAC0B,UAAU,GAAKV,GAAG,CAAG,CAAC,EAAIE,WAAW,CAAE,CAExE,CAAC,CACH,CAAC,CAAE,CAACT,OAAO,CAAEC,YAAY,CAAC,CAAC,CAE3B,KAAM,CAAAiB,iBAAiB,CAAGA,CAACC,CAAC,CAAEC,IAAI,GAAK,CACrC,OAAQA,IAAI,EACV,IAAK,YAAY,CACf,GAAI1C,UAAU,CAAC2C,SAAS,CAAE,CACxB3C,UAAU,CAAC4C,MAAM,CAAC,CAAC,CACrB,CACA,MACF,IAAK,QAAQ,CACXzB,KAAK,CAACR,cAAc,CAAC,CAAC,CACtB,MACF,IAAK,MAAM,CACTQ,KAAK,CAAC0B,MAAM,CAAC,CAAC,CACd,MACF,IAAK,UAAU,CAAE,CACf,GAAIpB,WAAW,CAAE,CACfN,KAAK,CAAC2B,QAAQ,CAAC,CAAC,CAClB,CACA,MACF,CACA,QACE,MACJ,CACF,CAAC,CACD,mBACEjD,KAAA,CAAAkD,aAAA,QAAKC,SAAS,CAAC,2BAA2B,EACvC/B,YAAY,CAAC,CAAC,eACbpB,KAAA,CAAAkD,aAAA,QAAKC,SAAS,CAAC,YAAY,eACzBnD,KAAA,CAAAkD,aAAA,CAAC7C,SAAS,KAAE,CACT,CACN,cACDL,KAAA,CAAAkD,aAAA,QAAKC,SAAS,CAAC,aAAa,eAC1BnD,KAAA,CAAAkD,aAAA,aAAM,yBAA6B,CAAC,cACpClD,KAAA,CAAAkD,aAAA,SAAMC,SAAS,CAAC,SAAS,EACtBpC,SAAS,CAAC,eAAe,CAAC,CAC1B,GAAG,CACHE,OACG,CACH,CAAC,cACNjB,KAAA,CAAAkD,aAAA,QAAKC,SAAS,CAAC,6BAA6B,eAC1CnD,KAAA,CAAAkD,aAAA,CAAC1C,YAAY,KAAE,CAAC,cAChBR,KAAA,CAAAkD,aAAA,WACEE,QAAQ,CAAE,CAACxB,WAAY,CACvBuB,SAAS,CAAC,kBAAkB,CAC5BE,OAAO,CAAGT,CAAC,EAAKD,iBAAiB,CAACC,CAAC,CAAE,UAAU,CAAE,eAEjD5C,KAAA,CAAAkD,aAAA,CAACxC,QAAQ,KAAE,CACL,CAAC,cACTV,KAAA,CAAAkD,aAAA,WACEC,SAAS,CAAC,eAAe,CACzBE,OAAO,CAAGT,CAAC,EAAKD,iBAAiB,CAACC,CAAC,CAAE,QAAQ,CAAE,eAE/C5C,KAAA,CAAAkD,aAAA,CAACtC,QAAQ,KAAE,CACL,CAAC,cACTZ,KAAA,CAAAkD,aAAA,WACEC,SAAS,CAAC,mBAAmB,CAC7BE,OAAO,CAAGT,CAAC,EAAKD,iBAAiB,CAACC,CAAC,CAAE,YAAY,CAAE,eAEnD5C,KAAA,CAAAkD,aAAA,CAACrC,UAAU,KAAE,CACP,CAAC,cACTb,KAAA,CAAAkD,aAAA,CAACzC,WAAW,KAAE,CAAC,cACfT,KAAA,CAAAkD,aAAA,WACEC,SAAS,CAAC,aAAa,CACvBC,QAAQ,CAAElC,SAAS,CAACK,QAAQ,CAAE,CAC9B8B,OAAO,CAAGT,CAAC,EAAKD,iBAAiB,CAACC,CAAC,CAAE,MAAM,CAAE,eAE7C5C,KAAA,CAAAkD,aAAA,CAACvC,IAAI,KAAE,CACD,CACL,CAAC,cACNX,KAAA,CAAAkD,aAAA,CAAC3C,MAAM,KAAE,CAAC,cACVP,KAAA,CAAAkD,aAAA,CAAC5C,UAAU,EACT6C,SAAS,CAAC,qBAAqB,CAC/BG,iBAAiB,CAAEhC,KAAK,CAACgC,iBAAkB,CAC5C,CACE,CAAC,CAEV,CAAE,CAEF,KAAM,CAAAC,eAAe,CAAIC,KAAK,GAAM,CAClCC,SAAS,CAAED,KAAK,CAACC,SAAS,CAC1BlC,QAAQ,CAAEiC,KAAK,CAACjC,QAAQ,CACxBI,WAAW,CAAE6B,KAAK,CAAC7B,WAAW,CAC9BD,YAAY,CAAE8B,KAAK,CAAC9B,YAAY,CAChCD,OAAO,CAAE+B,KAAK,CAAC/B,OAAO,CACtBD,gBAAgB,CAAEgC,KAAK,CAAChC,gBAC1B,CAAC,CAAC,CACF,KAAM,CAAAkC,kBAAkB,CAAG,CACzB5C,cACF,CAAC,CACD,cAAe,CAAAV,OAAO,CAACmD,eAAe,CAAEG,kBAAkB,CAAC,CAACrC,cAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}