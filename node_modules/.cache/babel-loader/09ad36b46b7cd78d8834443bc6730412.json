{"ast":null,"code":"import { Point, BitmapText, Polygon } from 'pixi.js';\nimport Flatten from '@flatten-js/core';\nimport { cloneDeep } from 'lodash';\nimport Shape, { EventAction } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nimport { calcOutlineForLine } from '../../../utils/vector';\n/**\n * Line shape\n * @class\n */\nexport default class Line extends Shape {\n  /**\n   * get points\n   * @getter\n   */\n  get points() {\n    return this._points.map(p => ({\n      x: p.x,\n      y: p.y,\n      ...(p.userData && {\n        userData: p.userData\n      })\n    }));\n  }\n\n  /**\n   * set points\n   * @setter\n   */\n  set points(points) {\n    this._points = points.map(p => ({\n      x: p.x,\n      y: p.y,\n      userData: cloneDeep(p.userData)\n    }));\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this._points[0].x, this._points[0].y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point) {\n    const offsetX = point.x - this._points[0].x;\n    const offsetY = point.y - this._points[0].y;\n    this._points.forEach(p => {\n      p.x = precise(p.x + offsetX);\n      p.y = precise(p.y + offsetY);\n    });\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const linePoints = this.points;\n    const left = Math.min(...linePoints.map(p => p.x));\n    const right = Math.max(...linePoints.map(p => p.x));\n    const top = Math.min(...linePoints.map(p => p.y));\n    const bottom = Math.max(...linePoints.map(p => p.y));\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  constructor(options) {\n    super(options);\n    this.shapeType = ShapeType.LINE;\n    /**\n     * line points\n     * @protected\n     */\n    this._points = [];\n    /**\n     * indicate next point when creating\n     * @protected\n     */\n    this._nextPoint = null;\n    /**\n     * line geometory data (line array)\n     */\n    this._geometory = [];\n    /**\n     * index of lines when snapped\n     */\n    this._snappingIndex = -1;\n    /**\n     * mouse move listener when creating\n     * @private\n     * @param event\n     */\n    this._mouseMove = event => {\n      let localPoint = this.globalSnappingPoint;\n      if (!localPoint) {\n        const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n        localPoint = this._mapStageToLocalPosition(point);\n      }\n      this._nextPoint = localPoint;\n      this.drawShape();\n    };\n    /**\n     * mouse up listener when creating\n     * @private\n     * @param event\n     */\n    this._mouseUp = event => {\n      if (event.button === 2) {\n        return;\n      }\n      let localPoint = this.globalSnappingPoint;\n      if (!localPoint) {\n        const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n        localPoint = this._mapStageToLocalPosition(point);\n      }\n      this.addPoint(localPoint);\n    };\n    /**\n     * finish by double clicking\n     * @private\n     */\n    this._finishByDoubleClick = () => {\n      this.finishCreate();\n    };\n    /**\n     * key down handler\n     * @private\n     * @param e\n     */\n    this._keyDown = e => {\n      var _e$key;\n      switch ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.toLowerCase()) {\n        case 'q':\n          if (!this._finished) {\n            e.preventDefault();\n            const index = this.points.length - 1;\n            this.removePoint(index);\n          }\n          break;\n        case 'enter':\n          if (!this._finished) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            this.finishCreate();\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    /**\n     * finish create\n     */\n    this.finishCreate = () => {\n      this.normalize();\n      this._finish();\n      this._removeListeners();\n    };\n    const {\n      points\n    } = options;\n    if (Array.isArray(points) && points.every(p => p.x !== undefined && p.y !== undefined)) {\n      this.points = points;\n    }\n    document.addEventListener('keydown', this._keyDown, false);\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeLine();\n    this._drawShapeVertex();\n    this._drawSnappingPoint();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n      this.updateHitArea();\n    }\n  }\n\n  /**\n   * draw shape border\n   * @protected\n   */\n  _drawShapeLine() {\n    if (this._points.length <= 0) {\n      return;\n    }\n    const baseWidth = 1 / this.scale;\n    const color = this.displayBorderColor;\n    let i = 0;\n    this.instance.moveTo(this._points[0].x, this._points[0].y);\n    this._points.slice(1).forEach(point => {\n      this.instance.lineStyle(baseWidth, color);\n      this.instance.drawLine(point.x, point.y, this.borderStyle, this.scale);\n      i += 1;\n    });\n    if (!this._finished && this._nextPoint) {\n      this.instance.lineStyle(baseWidth, color);\n      this.instance.drawLine(this._nextPoint.x, this._nextPoint.y, this.borderStyle, this.scale);\n    }\n  }\n\n  /**\n   * draw shape vertexes\n   * @protected\n   */\n  _drawShapeVertex() {\n    var _this$vertexesContain;\n    (_this$vertexesContain = this.vertexesContainer) === null || _this$vertexesContain === void 0 ? void 0 : _this$vertexesContain.removeChildren();\n    if (!this.showVertex && !this.showVertexOrder) {\n      return;\n    }\n    const r = 4 / this.scale;\n    const offset = this.showVertex ? r : 4 / this.scale;\n    this.instance.lineStyle(1 / this.scale, this.displayBorderColor);\n    this._points.forEach((point, index) => {\n      if (this.showVertex && (!this.editable || !this.selected)) {\n        // draw vertex dot\n        this.instance.beginFill(this.color);\n        this.instance.drawVertex(point.x, point.y, r);\n        this.instance.endFill();\n      }\n      if (this.showVertexOrder) {\n        // draw vertext order\n        const text = new BitmapText(`${1 + index} `, {\n          fontName: 'ALPHA_NUMERIC'\n        });\n        text.scale.set(1 / this.scale);\n        text.position.set(point.x + offset, point.y + offset);\n        if (!this.vertexesContainer) {\n          this._createVertexesContainer();\n        }\n        this.vertexesContainer.addChild(text);\n      }\n    });\n  }\n\n  /**\n   * draw snapping point\n   */\n  _drawSnappingPoint() {\n    if (this._snappingPoint) {\n      this.instance.beginFill(this.selectedColor);\n      this.instance.drawCircle(this._snappingPoint.x, this._snappingPoint.y, 3 / this.scale);\n      this.instance.endFill();\n    }\n  }\n\n  /**\n   * create by click to add point\n   * @param point\n   */\n  create() {\n    document.addEventListener('mousemove', this._mouseMove, false);\n    document.addEventListener('mouseup', this._mouseUp, false);\n    this.app.view.addEventListener('dblclick', this._finishByDoubleClick, false);\n    this._finished = false;\n    this._nextPoint = null;\n  }\n  /**\n   * remove all listeners\n   * @private\n   */\n  _removeListeners() {\n    document.removeEventListener('mousemove', this._mouseMove, false);\n    document.removeEventListener('mouseup', this._mouseUp, false);\n    this.app.view.removeEventListener('dblclick', this._finishByDoubleClick, false);\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    const sorted = [...this._points].sort((a, b) => {\n      if (a.y === b.y) return a.x - b.x;\n      return a.y - b.y;\n    });\n    return new Point(sorted[0].x, sorted[0].y);\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      points: this.points\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const hitArea = this.instance.hitArea;\n    const points = [];\n    for (let i = 0; i < hitArea.points.length - 1; i += 2) {\n      const point = [hitArea.points[i], hitArea.points[i + 1]];\n      points.push(point);\n    }\n    return [[[...points]]];\n  }\n\n  /**\n   * delete selected points\n   */\n  deleteSelectedPoints() {\n    if (this.selected) {\n      const deletedIndexes = [];\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          deletedIndexes.push(i);\n          c.selected = false;\n        }\n      });\n      if (deletedIndexes.length > 0) {\n        this._points = this._points.filter((_, i) => !deletedIndexes.includes(i));\n        this.normalize();\n        this._changed();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const {\n      x,\n      y\n    } = point;\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n\n    // points\n    let nearestPoint;\n    let d;\n    this.points.forEach(p => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    for (let i = 0; i < this._geometory.length; i += 1) {\n      const [distance, segment] = this._geometory[i].distanceTo(location);\n      if (distance < t) {\n        const {\n          ps,\n          pe\n        } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * snap to line edges\n   */\n  snap(event) {\n    if (event.data.originalEvent.altKey) {\n      const point = event.data.getLocalPosition(this.container);\n      const location = new Flatten.Point(point.x, point.y);\n      for (let i = 0; i < this._geometory.length; i += 1) {\n        const [distance, segment] = this._geometory[i].distanceTo(location);\n        if (distance < 8 / this.scale) {\n          const {\n            ps,\n            pe\n          } = segment;\n          const edgePoint = ps.equalTo(location) ? pe : ps;\n          this._snappingPoint = new Point(edgePoint.x, edgePoint.y);\n          this._snappingIndex = i;\n          this.drawShape();\n          return true;\n        }\n      }\n    }\n    if (this._snappingPoint) {\n      this._snappingPoint = null;\n      this._snappingIndex = -1;\n      this.drawShape();\n    }\n    return false;\n  }\n\n  /**\n   * add snapping point to shape\n   */\n  addSnappingPointToShape() {\n    if (this._snappingPoint && this._snappingIndex >= 0) {\n      this._points.splice(this._snappingIndex + 1, 0, {\n        x: this._snappingPoint.x,\n        y: this._snappingPoint.y\n      });\n      this._snappingPoint = null;\n      this._snappingIndex = -1;\n      this._controls.forEach(c => {\n        c.selected = false;\n      });\n      this.normalize();\n      this._changed();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n    [...this._points].forEach((point, index) => {\n      if (this.selected || this.hovered && this.showVertex) {\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.displayBorderColor,\n            cursor: Cursor.POINTER,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n            onClick: () => this._updatePointSelectedStatus(index)\n          });\n        }\n\n        // update\n        this._controls[index].color = this.displayBorderColor;\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].selected = false;\n        this._controls[index].remove();\n      }\n    });\n    if (this._controls.length > this._points.length) {\n      // remove redundant control points\n      this._controls.slice(this._points.length).forEach(c => {\n        c.remove();\n      });\n      this._controls = this._controls.slice(0, this._points.length);\n    }\n  }\n\n  /**\n   * update line point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  _updateByPointPosition(index, x, y) {\n    const position = this.globalSnappingPoint || new Point(x, y);\n    const deltaX = position.x - this._points[index].x;\n    const deltaY = position.y - this._points[index].y;\n    this.updateSelectedPointsPosistion(deltaX, deltaY);\n    this._resizing({\n      deltaX,\n      deltaY\n    });\n  }\n\n  /**\n   * update selected points position\n   * @param deltaX\n   * @param deltaY\n   */\n  updateSelectedPointsPosistion(deltaX, deltaY) {\n    // move together\n    this._controls.forEach((c, i) => {\n      if (c.selected) {\n        const position = new Point(this._points[i].x + deltaX, this._points[i].y + deltaY);\n        this._points[i].x = position.x;\n        this._points[i].y = position.y;\n      }\n    });\n    this.drawShape();\n  }\n\n  /**\n   * update selected point\n   * @private\n   * @param index\n   */\n  _updatePointSelectedStatus(index) {\n    if (!this._controls[index].selected) {\n      this._emit(EventAction.VERTEX_SELECTED, index);\n      this._controls.forEach((c, i) => {\n        if (i === index) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * add a point\n   * @param point\n   * @param index\n   */\n  addPoint(point, index) {\n    const pIndex = index === undefined ? this._points.length : index;\n    this._points.splice(pIndex, 0, {\n      x: precise(point.x),\n      y: precise(point.y)\n    });\n    this.drawShape();\n  }\n\n  /**\n   * remove a point\n   * @param index\n   */\n  removePoint(index) {\n    if (index >= 0 && index < this._points.length) {\n      this._points.splice(index, 1);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * normalize line shape, remove it if necessary\n   */\n  normalize() {\n    // remove duplicated points\n    const points = [];\n    this._points.forEach((point, index) => {\n      if (index === this._points.length - 1 || point.x !== this._points[index + 1].x || point.y !== this._points[index + 1].y) {\n        points.push(point);\n      }\n    });\n    this._points = points;\n    if (this._points.length < 2) {\n      this._remove();\n      return;\n    }\n    this._points.forEach(p => {\n      p.x = precise(p.x);\n      p.y = precise(p.y);\n    });\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * update geometory\n   */\n  updateGeometory() {\n    const linePoints = this.points;\n    const lines = [];\n    for (let i = 0; i < linePoints.length - 1; i += 1) {\n      const start = linePoints[i];\n      const end = linePoints[i + 1];\n      lines.push({\n        start,\n        end\n      });\n    }\n    this._geometory = this._geometory.slice(0, lines.length);\n    for (let i = 0; i < lines.length; i += 1) {\n      const {\n        start,\n        end\n      } = lines[i];\n      const startPoint = new Flatten.Point(start.x, start.y);\n      const endPoint = new Flatten.Point(end.x, end.y);\n      if (!this._geometory[i]) {\n        this._geometory[i] = new Flatten.Segment(startPoint, endPoint);\n      } else {\n        this._geometory[i].ps = startPoint;\n        this._geometory[i].pe = endPoint;\n      }\n    }\n  }\n\n  /**\n   * update hit area\n   */\n  updateHitArea() {\n    const offset = 5 / this.scale;\n    const areaPoints = calcOutlineForLine(this.points, offset);\n    this.instance.hitArea = new Polygon(areaPoints);\n  }\n\n  /**\n   * shape destroy\n   */\n  destroy() {\n    this._removeListeners();\n    document.removeEventListener('keydown', this._keyDown, false);\n    // call parent\n    super.destroy();\n  }\n\n  /**\n   * selected points with point index & point instance\n   * @returns\n   */\n  getSelectedPoints() {\n    if (!this._finished) {\n      const lastPointIndex = this._points.length - 1;\n      return [{\n        index: lastPointIndex,\n        point: this._points[lastPointIndex]\n      }];\n    }\n    const selectedPoints = [];\n    const points = [...this.points];\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          selectedPoints.push({\n            index: i,\n            point: points[i]\n          });\n        }\n      });\n    }\n    return selectedPoints;\n  }\n\n  /**\n   * set selected points\n   * @param pointsIndex\n   */\n  setSelectedPoints(pointsIndex) {\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (pointsIndex.includes(i)) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * set points user data\n   * @param pointsData\n   */\n  setPointsUserData(pointsData) {\n    pointsData.forEach(({\n      index,\n      userData\n    }) => {\n      this._points[index].userData = cloneDeep(userData);\n    });\n    this.drawShape();\n    if (this._finished) {\n      this._changed();\n    }\n  }\n}","map":{"version":3,"names":["Point","BitmapText","Polygon","Flatten","cloneDeep","Shape","EventAction","ShapeType","ControlPoint","precise","Cursor","calcOutlineForLine","Line","points","_points","map","p","x","y","userData","normalize","position","point","offsetX","offsetY","forEach","updateGeometory","drawShape","shapeBounds","linePoints","left","Math","min","right","max","top","bottom","constructor","options","shapeType","LINE","_nextPoint","_geometory","_snappingIndex","_mouseMove","event","localPoint","globalSnappingPoint","_mapScreenToStagePosition","clientX","clientY","_mapStageToLocalPosition","_mouseUp","button","addPoint","_finishByDoubleClick","finishCreate","_keyDown","e","_e$key","key","toLowerCase","_finished","preventDefault","index","length","removePoint","stopImmediatePropagation","_finish","_removeListeners","Array","isArray","every","undefined","document","addEventListener","instance","clear","_drawShapeLine","_drawShapeVertex","_drawSnappingPoint","drawShapeLabel","attachControlPoints","updateHitArea","baseWidth","scale","color","displayBorderColor","i","moveTo","slice","lineStyle","drawLine","borderStyle","_this$vertexesContain","vertexesContainer","removeChildren","showVertex","showVertexOrder","r","offset","editable","selected","beginFill","drawVertex","endFill","text","fontName","set","_createVertexesContainer","addChild","_snappingPoint","selectedColor","drawCircle","create","app","view","removeEventListener","getLabelPosition","sorted","sort","a","b","getData","getAreaAsGeoJSON","hitArea","push","deleteSelectedPoints","deletedIndexes","_controls","c","filter","_","includes","_changed","snapToPoint","tolerance","t","nearestPoint","d","pointDistance","sqrt","location","distance","segment","distanceTo","ps","pe","edgePoint","equalTo","snap","data","originalEvent","altKey","getLocalPosition","container","addSnappingPointToShape","splice","removeControls","hovered","controlsContainer","cursor","POINTER","onPositionChange","_updateByPointPosition","onFinish","_finishResize","onClick","_updatePointSelectedStatus","add","remove","deltaX","deltaY","updateSelectedPointsPosistion","_resizing","_emit","VERTEX_SELECTED","resizing","pIndex","_remove","lines","start","end","startPoint","endPoint","Segment","areaPoints","destroy","getSelectedPoints","lastPointIndex","selectedPoints","setSelectedPoints","pointsIndex","setPointsUserData","pointsData"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Line.ts"],"sourcesContent":["import { Point, BitmapText, InteractionEvent, Polygon } from 'pixi.js';\nimport Flatten from '@flatten-js/core';\nimport { cloneDeep } from 'lodash';\nimport Shape, { ShapeOptions, EventAction } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nimport { calcOutlineForLine } from '../../../utils/vector';\n\ninterface IPoint {\n  x: number;\n  y: number;\n  userData?: any;\n}\n\nexport interface LineData {\n  points: IPoint[];\n}\n\nexport interface LineOptions extends ShapeOptions {\n  points?: IPoint[];\n}\n\n/**\n * Line shape\n * @class\n */\nexport default class Line extends Shape<LineData> {\n  shapeType = ShapeType.LINE;\n\n  /**\n   * line points\n   * @protected\n   */\n  protected _points: IPoint[] = [];\n\n  /**\n   * indicate next point when creating\n   * @protected\n   */\n  protected _nextPoint: IPoint | null = null;\n\n  /**\n   * line geometory data (line array)\n   */\n  private _geometory: Flatten.Segment[] = [];\n\n  /**\n   * index of lines when snapped\n   */\n  private _snappingIndex = -1;\n\n  /**\n   * get points\n   * @getter\n   */\n  get points() {\n    return this._points.map((p) => ({\n      x: p.x,\n      y: p.y,\n      ...p.userData && { userData: p.userData },\n    }));\n  }\n\n  /**\n   * set points\n   * @setter\n   */\n  set points(points: IPoint[]) {\n    this._points = points.map((p) => ({ x: p.x, y: p.y, userData: cloneDeep(p.userData) }));\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this._points[0].x, this._points[0].y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point: Point) {\n    const offsetX = point.x - this._points[0].x;\n    const offsetY = point.y - this._points[0].y;\n    this._points.forEach((p) => {\n      p.x = precise(p.x + offsetX);\n      p.y = precise(p.y + offsetY);\n    });\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const linePoints = this.points;\n    const left = Math.min(...linePoints.map((p) => p.x));\n    const right = Math.max(...linePoints.map((p) => p.x));\n    const top = Math.min(...linePoints.map((p) => p.y));\n    const bottom = Math.max(...linePoints.map((p) => p.y));\n    return { left, top, right, bottom };\n  }\n\n  constructor(options: LineOptions) {\n    super(options);\n\n    const { points } = options;\n    if (Array.isArray(points) && points.every((p) => p.x !== undefined && p.y !== undefined)) {\n      this.points = points;\n    }\n\n    document.addEventListener('keydown', this._keyDown, false);\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeLine();\n    this._drawShapeVertex();\n    this._drawSnappingPoint();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n      this.updateHitArea();\n    }\n  }\n\n  /**\n   * draw shape border\n   * @protected\n   */\n  protected _drawShapeLine() {\n    if (this._points.length <= 0) {\n      return;\n    }\n    const baseWidth = 1 / this.scale;\n    const color = this.displayBorderColor;\n\n    let i = 0;\n    this.instance.moveTo(this._points[0].x, this._points[0].y);\n    this._points.slice(1).forEach((point) => {\n      this.instance.lineStyle(baseWidth, color);\n      this.instance.drawLine(point.x, point.y, this.borderStyle, this.scale);\n      i += 1;\n    });\n    if ((!this._finished) && this._nextPoint) {\n      this.instance.lineStyle(baseWidth, color);\n      this.instance.drawLine(this._nextPoint.x, this._nextPoint.y, this.borderStyle, this.scale);\n    }\n  }\n\n  /**\n   * draw shape vertexes\n   * @protected\n   */\n  protected _drawShapeVertex() {\n    this.vertexesContainer?.removeChildren();\n    if (!this.showVertex && !this.showVertexOrder) {\n      return;\n    }\n\n    const r = 4 / this.scale;\n    const offset = this.showVertex ? r : 4 / this.scale;\n    this.instance.lineStyle(1 / this.scale, this.displayBorderColor);\n    this._points.forEach((point, index) => {\n      if (this.showVertex && (!this.editable || !this.selected)) {\n        // draw vertex dot\n        this.instance.beginFill(this.color);\n        this.instance.drawVertex(point.x, point.y, r);\n        this.instance.endFill();\n      }\n      if (this.showVertexOrder) {\n        // draw vertext order\n        const text = new BitmapText(`${1 + index} `, { fontName: 'ALPHA_NUMERIC' });\n        text.scale.set(1 / this.scale);\n        text.position.set(point.x + offset, point.y + offset);\n        if (!this.vertexesContainer) {\n          this._createVertexesContainer();\n        }\n        this.vertexesContainer!.addChild(text);\n      }\n    });\n  }\n\n  /**\n   * draw snapping point\n   */\n  private _drawSnappingPoint() {\n    if (this._snappingPoint) {\n      this.instance.beginFill(this.selectedColor);\n      this.instance.drawCircle(this._snappingPoint.x, this._snappingPoint.y, 3 / this.scale);\n      this.instance.endFill();\n    }\n  }\n\n  /**\n   * create by click to add point\n   * @param point\n   */\n  create() {\n    document.addEventListener('mousemove', this._mouseMove, false);\n    document.addEventListener('mouseup', this._mouseUp, false);\n    this.app.view.addEventListener('dblclick', this._finishByDoubleClick, false);\n\n    this._finished = false;\n    this._nextPoint = null;\n  }\n\n  /**\n   * mouse move listener when creating\n   * @private\n   * @param event\n   */\n  private _mouseMove = (event: MouseEvent) => {\n    let localPoint = this.globalSnappingPoint;\n    if (!localPoint) {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      localPoint = this._mapStageToLocalPosition(point);\n    }\n    this._nextPoint = localPoint;\n    this.drawShape();\n  };\n\n  /**\n   * mouse up listener when creating\n   * @private\n   * @param event\n   */\n  private _mouseUp = (event: MouseEvent) => {\n    if (event.button === 2) {\n      return;\n    }\n    let localPoint = this.globalSnappingPoint;\n    if (!localPoint) {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      localPoint = this._mapStageToLocalPosition(point);\n    }\n    this.addPoint(localPoint);\n  };\n\n  /**\n   * finish by double clicking\n   * @private\n   */\n  private _finishByDoubleClick = () => {\n    this.finishCreate();\n  };\n\n  /**\n   * key down handler\n   * @private\n   * @param e\n   */\n  private _keyDown = (e: KeyboardEvent) => {\n    switch (e.key?.toLowerCase()) {\n      case 'q':\n        if (!this._finished) {\n          e.preventDefault();\n          const index = this.points.length - 1;\n          this.removePoint(index);\n        }\n        break;\n      case 'enter':\n        if (!this._finished) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          this.finishCreate();\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * finish create\n   */\n  finishCreate = () => {\n    this.normalize();\n    this._finish();\n    this._removeListeners();\n  };\n\n  /**\n   * remove all listeners\n   * @private\n   */\n  private _removeListeners() {\n    document.removeEventListener('mousemove', this._mouseMove, false);\n    document.removeEventListener('mouseup', this._mouseUp, false);\n    this.app.view.removeEventListener('dblclick', this._finishByDoubleClick, false);\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    const sorted = [...this._points].sort((a, b) => {\n      if (a.y === b.y) return a.x - b.x;\n      return a.y - b.y;\n    });\n    return new Point(sorted[0].x, sorted[0].y);\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      points: this.points,\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const hitArea = this.instance.hitArea as Polygon;\n    const points: [number, number][] = [];\n    for (let i = 0; i < hitArea.points.length - 1; i += 2) {\n      const point = [hitArea.points[i], hitArea.points[i + 1]] as [number, number];\n      points.push(point);\n    }\n    return [[[...points]]];\n  }\n\n  /**\n   * delete selected points\n   */\n  deleteSelectedPoints() {\n    if (this.selected) {\n      const deletedIndexes: number[] = [];\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          deletedIndexes.push(i);\n          c.selected = false;\n        }\n      });\n      if (deletedIndexes.length > 0) {\n        this._points = this._points.filter((_, i) => !deletedIndexes.includes(i));\n        this.normalize();\n        this._changed();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point: Point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const { x, y } = point;\n    const { left, right, top, bottom } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n\n    // points\n    let nearestPoint: IPoint | undefined;\n    let d: number | undefined;\n    this.points.forEach((p) => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    for (let i = 0; i < this._geometory.length; i += 1) {\n      const [distance, segment] = this._geometory[i].distanceTo(location);\n      if (distance < t) {\n        const { ps, pe } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * snap to line edges\n   */\n  snap(event: InteractionEvent) {\n    if (event.data.originalEvent.altKey) {\n      const point = event.data.getLocalPosition(this.container);\n      const location = new Flatten.Point(point.x, point.y);\n      for (let i = 0; i < this._geometory.length; i += 1) {\n        const [distance, segment] = this._geometory[i].distanceTo(location);\n        if (distance < 8 / this.scale) {\n          const { ps, pe } = segment;\n          const edgePoint = ps.equalTo(location) ? pe : ps;\n          this._snappingPoint = new Point(edgePoint.x, edgePoint.y);\n          this._snappingIndex = i;\n          this.drawShape();\n          return true;\n        }\n      }\n    }\n\n    if (this._snappingPoint) {\n      this._snappingPoint = null;\n      this._snappingIndex = -1;\n      this.drawShape();\n    }\n    return false;\n  }\n\n  /**\n   * add snapping point to shape\n   */\n  addSnappingPointToShape() {\n    if (this._snappingPoint && this._snappingIndex >= 0) {\n      this._points.splice(this._snappingIndex + 1, 0, { x: this._snappingPoint.x, y: this._snappingPoint.y });\n      this._snappingPoint = null;\n      this._snappingIndex = -1;\n      this._controls.forEach((c) => {\n        c.selected = false;\n      });\n      this.normalize();\n      this._changed();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    [...this._points].forEach((point, index) => {\n      if (this.selected || (this.hovered && this.showVertex)) {\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.displayBorderColor,\n            cursor: Cursor.POINTER,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n            onClick: () => this._updatePointSelectedStatus(index),\n          });\n        }\n\n        // update\n        this._controls[index].color = this.displayBorderColor;\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].selected = false;\n        this._controls[index].remove();\n      }\n    });\n    if (this._controls.length > this._points.length) {\n      // remove redundant control points\n      this._controls.slice(this._points.length).forEach((c) => {\n        c.remove();\n      });\n      this._controls = this._controls.slice(0, this._points.length);\n    }\n  }\n\n  /**\n   * update line point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  private _updateByPointPosition(index: number, x: number, y: number) {\n    const position = this.globalSnappingPoint || new Point(x, y);\n    const deltaX = position.x - this._points[index].x;\n    const deltaY = position.y - this._points[index].y;\n    this.updateSelectedPointsPosistion(deltaX, deltaY);\n    this._resizing({ deltaX, deltaY });\n  }\n\n  /**\n   * update selected points position\n   * @param deltaX\n   * @param deltaY\n   */\n  updateSelectedPointsPosistion(deltaX: number, deltaY: number) {\n    // move together\n    this._controls.forEach((c, i) => {\n      if (c.selected) {\n        const position = new Point(this._points[i].x + deltaX, this._points[i].y + deltaY);\n        this._points[i].x = position.x;\n        this._points[i].y = position.y;\n      }\n    });\n    this.drawShape();\n  }\n\n  /**\n   * update selected point\n   * @private\n   * @param index\n   */\n  private _updatePointSelectedStatus(index: number) {\n    if (!this._controls[index].selected) {\n      this._emit(EventAction.VERTEX_SELECTED, index);\n      this._controls.forEach((c, i) => {\n        if (i === index) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  private _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * add a point\n   * @param point\n   * @param index\n   */\n  addPoint(point: IPoint | Point, index?: number) {\n    const pIndex = index === undefined ? this._points.length : index;\n    this._points.splice(pIndex, 0, { x: precise(point.x), y: precise(point.y) });\n    this.drawShape();\n  }\n\n  /**\n   * remove a point\n   * @param index\n   */\n  removePoint(index: number) {\n    if (index >= 0 && index < this._points.length) {\n      this._points.splice(index, 1);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * normalize line shape, remove it if necessary\n   */\n  normalize() {\n    // remove duplicated points\n    const points: IPoint[] = [];\n    this._points.forEach((point, index) => {\n      if (index === this._points.length - 1 || point.x !== this._points[index + 1].x || point.y !== this._points[index + 1].y) {\n        points.push(point);\n      }\n    });\n    this._points = points;\n\n    if (this._points.length < 2) {\n      this._remove();\n      return;\n    }\n\n    this._points.forEach((p) => {\n      p.x = precise(p.x);\n      p.y = precise(p.y);\n    });\n\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * update geometory\n   */\n  updateGeometory() {\n    const linePoints = this.points;\n    const lines = [];\n    for (let i = 0; i < linePoints.length - 1; i += 1) {\n      const start = linePoints[i];\n      const end = linePoints[i + 1];\n      lines.push({ start, end });\n    }\n    this._geometory = this._geometory.slice(0, lines.length);\n    for (let i = 0; i < lines.length; i += 1) {\n      const { start, end } = lines[i];\n      const startPoint = new Flatten.Point(start.x, start.y);\n      const endPoint = new Flatten.Point(end.x, end.y);\n      if (!this._geometory[i]) {\n        this._geometory[i] = new Flatten.Segment(startPoint, endPoint);\n      } else {\n        this._geometory[i].ps = startPoint;\n        this._geometory[i].pe = endPoint;\n      }\n    }\n  }\n\n  /**\n   * update hit area\n   */\n  updateHitArea() {\n    const offset = 5 / this.scale;\n    const areaPoints = calcOutlineForLine(this.points, offset);\n    this.instance.hitArea = new Polygon(areaPoints);\n  }\n\n  /**\n   * shape destroy\n   */\n  destroy() {\n    this._removeListeners();\n    document.removeEventListener('keydown', this._keyDown, false);\n    // call parent\n    super.destroy();\n  }\n\n  /**\n   * selected points with point index & point instance\n   * @returns\n   */\n  getSelectedPoints() {\n    if (!this._finished) {\n      const lastPointIndex = this._points.length - 1;\n      return [{ index: lastPointIndex, point: this._points[lastPointIndex] }];\n    }\n    const selectedPoints: {index: number; point: IPoint}[] = [];\n    const points = [...this.points];\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          selectedPoints.push({\n            index: i,\n            point: points[i],\n          });\n        }\n      });\n    }\n    return selectedPoints;\n  }\n\n  /**\n   * set selected points\n   * @param pointsIndex\n   */\n  setSelectedPoints(pointsIndex: number[]) {\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (pointsIndex.includes(i)) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * set points user data\n   * @param pointsData\n   */\n  setPointsUserData(pointsData: {index: number; userData: any}[]) {\n    pointsData.forEach(({ index, userData }) => {\n      this._points[index].userData = cloneDeep(userData);\n    });\n    this.drawShape();\n    if (this._finished) {\n      this._changed();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}