{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { message } from 'antd';\nimport { AttributesMode } from '../types';\nimport Relationship from '../model/Relationship';\nimport Connection from '../view/Connection';\nimport i18n from '../locales';\nimport { CAMERA_VIEW_CONNECTIONS } from '../constants';\nimport { formatFrames } from '../utils';\nexport default class RelationshipStore {\n  /**\n   * is relationship enabled\n   * @getter\n   */\n  get relationshipEnabled() {\n    return this.options.length > 0;\n  }\n\n  /**\n   * is setting relationship\n   * @getter\n   */\n  get settingRelationship() {\n    return this.fromInstanceItem !== null;\n  }\n\n  /**\n   * editing connection\n   * @getter\n   */\n  get editingConnection() {\n    if (!this.editingRelationship) {\n      return undefined;\n    }\n    const cid = this.connectionMap[this.editingRelationship.id];\n    return this.connections[cid];\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * relationship options\n     */\n    this.options = [];\n    /**\n     * active option index\n     */\n    this.activeOptionIndex = 0;\n    /**\n     * saved relationships\n     */\n    this.relationships = [];\n    /**\n     * editing relationship\n     */\n    this.editingRelationship = null;\n    /**\n     * relationship menu position\n     */\n    this.menuPosition = null;\n    /**\n     * from instance item current editing\n     */\n    this.fromInstanceItem = null;\n    /**\n     * from instance item relationship icon\n     */\n    this.fromIcon = null;\n    /**\n     * current editing connection\n     */\n    this.currentConnection = null;\n    /**\n     * all onnection instances in current frame & current camera\n     */\n    this.connections = {};\n    /**\n     * relationship id & connection id mapping\n     */\n    this.connectionMap = {};\n    /**\n     * handle mouse move\n     * @param event\n     */\n    this.handleMouseMove = event => {\n      if (this.settingRelationship) {\n        const to = {\n          x: event.clientX,\n          y: event.clientY\n        };\n        if (!this.currentConnection) {\n          const fromRect = this.fromIcon.getBoundingClientRect();\n          const from = {\n            x: fromRect.x + fromRect.width,\n            y: fromRect.y + fromRect.height / 2\n          };\n          this.currentConnection = new Connection({\n            containerId: `${CAMERA_VIEW_CONNECTIONS}-${this.rootStore.frame.currentCamera}`,\n            from,\n            to,\n            text: this.options[this.activeOptionIndex].name\n          });\n        } else {\n          this.currentConnection.to = to;\n        }\n      }\n    };\n    /**\n     * handle relationship click\n     * @param relationship\n     */\n    this.handleClick = relationship => {\n      this.editingRelationship = relationship;\n      if (this.editingConnection) {\n        this.editingConnection.selected = true;\n      }\n      this.rootStore.config.setRelationshipModalVisible(true);\n      this.rootStore.instance.selectInstanceItem(relationship.fromInstanceItem);\n    };\n    /**\n     * handle relationship right click\n     * @param relationship\n     */\n    this.handleRightClick = relationship => {\n      this.editingRelationship = relationship;\n      this.rootStore.config.setRelationshipMenuVisible(true);\n      this.rootStore.instance.selectInstanceItem(relationship.fromInstanceItem);\n    };\n    /**\n     * switch from & to for editing relationship\n     */\n    this.switch = () => {\n      if (this.editingRelationship) {\n        const storeId = this.rootStore.undo.preserve({\n          relationships: [this.editingRelationship.toJSON()]\n        });\n        this.editingRelationship.switch();\n        this.rootStore.undo.save(storeId, {\n          relationships: [this.editingRelationship.toJSON()]\n        });\n        this.deleteConnection(this.editingRelationship);\n        this.createConnection(this.editingRelationship);\n      }\n    };\n    /**\n     * update name for editing relationship\n     * @param name\n     */\n    this.updateName = name => {\n      if (this.editingRelationship) {\n        const storeId = this.rootStore.undo.preserve({\n          relationships: [this.editingRelationship.toJSON()]\n        });\n        this.editingRelationship.relationship = name;\n        this.rootStore.undo.save(storeId, {\n          relationships: [this.editingRelationship.toJSON()]\n        });\n        const cid = this.connectionMap[this.editingRelationship.id];\n        const connection = this.connections[cid];\n        if (connection) {\n          connection.name = name;\n        }\n      }\n    };\n    /**\n     * delete editing relationship\n     */\n    this.deleteFromCurrentFrame = () => {\n      this.deleteFromFrames([this.rootStore.frame.currentFrame]);\n    };\n    /**\n     * delete editing relationship from frames\n     * @param frames\n     */\n    this.deleteFromFrames = frames => {\n      if (this.editingRelationship) {\n        const storeId = this.rootStore.undo.preserve({\n          relationships: [this.editingRelationship.toJSON()]\n        });\n        const deletedFrames = this.editingRelationship.deleteFromFrames(frames);\n        if (frames.indexOf(this.rootStore.frame.currentFrame) >= 0) {\n          this.deleteConnection(this.editingRelationship);\n        }\n        if (this.editingRelationship.isEmpty) {\n          this.deleteRelationship(this.editingRelationship);\n        }\n        this.rootStore.undo.save(storeId, {\n          relationships: [this.editingRelationship.toJSON()]\n        });\n        message.success(i18n.translate('RELATIONSHIP_DELETE_MSG', {\n          values: {\n            frames: formatFrames(deletedFrames)\n          }\n        }));\n      }\n      this.finishUpdate();\n    };\n    /**\n     * copy editing relationship to next frame\n     */\n    this.copyToNextFrame = () => {\n      const {\n        currentFrame,\n        frameCount\n      } = this.rootStore.frame;\n      if (currentFrame + 1 < frameCount) {\n        this.copyToFrames([currentFrame + 1]);\n      }\n    };\n    /**\n     * copy editing relationship to frames\n     * @param frames\n     */\n    this.copyToFrames = frames => {\n      if (this.editingRelationship) {\n        const storeId = this.rootStore.undo.preserve({\n          relationships: [this.editingRelationship.toJSON()]\n        });\n        const {\n          fromInstanceItem,\n          toInstanceItem,\n          fromCamera,\n          toCamera\n        } = this.editingRelationship;\n        const fromCameraData = fromInstanceItem.getCamera(fromCamera);\n        const toCameraData = toInstanceItem.getCamera(toCamera);\n        const successFrames = [];\n        for (let i = 0; i < frames.length; i += 1) {\n          const frameIndex = frames[i];\n          if (fromCameraData.frames[frameIndex] && toCameraData.frames[frameIndex] && !this.editingRelationship.frames[frameIndex]) {\n            // exists\n            this.editingRelationship.addToFrame(frameIndex);\n            successFrames.push(frameIndex);\n          }\n        }\n        this.rootStore.undo.save(storeId, {\n          relationships: [this.editingRelationship.toJSON()]\n        });\n        if (successFrames.length > 0) {\n          message.success(i18n.translate('RELATIONSHIP_COPY_MSG', {\n            values: {\n              frames: formatFrames(successFrames)\n            }\n          }));\n        } else {\n          message.success(i18n.translate('RELATIONSHIP_COPY_MSG_SKIP'));\n        }\n      }\n      this.finishUpdate();\n    };\n    /**\n     * finish editing\n     */\n    this.finishUpdate = () => {\n      this.rootStore.config.setRelationshipModalVisible(false);\n      this.rootStore.config.setRelationshipMenuVisible(false);\n      if (this.editingConnection) {\n        this.editingConnection.selected = false;\n      }\n      this.editingRelationship = null;\n      this.menuPosition = null;\n    };\n    /**\n     * copy relationships to current frame from last frame\n     * @param instanceItem\n     */\n    this.copyFromLastFrame = instanceItem => {\n      const {\n        currentCamera,\n        currentFrame\n      } = this.rootStore.frame;\n      const lastFrame = currentFrame - 1;\n      if (lastFrame < 0) {\n        return;\n      }\n      const {\n        relationships\n      } = instanceItem.getCamera(currentCamera);\n      if (relationships.length <= 0) {\n        return;\n      }\n      let successCount = 0;\n      let skipCount = 0;\n      const prevRelationships = [];\n      const currRelationships = [];\n      const {\n        getShapeByInstanceItem\n      } = this.rootStore.shape;\n      relationships.forEach(r => {\n        const {\n          frames,\n          fromInstanceItem,\n          toInstanceItem\n        } = r;\n        if (frames[lastFrame] !== undefined && frames[currentFrame] === undefined) {\n          // exist in last frame, not in current frame\n          const relatedItem = fromInstanceItem === instanceItem ? toInstanceItem : fromInstanceItem;\n          const relatedShape = getShapeByInstanceItem(relatedItem);\n          if (relatedShape) {\n            // paste to current frame\n            prevRelationships.push(r.toJSON());\n            r.addToFrame(currentFrame);\n            currRelationships.push(r.toJSON());\n            this.createConnection(r);\n            successCount += 1;\n          } else {\n            skipCount += 1;\n          }\n        }\n      });\n      this.rootStore.undo.push({\n        relationships: prevRelationships\n      }, {\n        relationships: currRelationships\n      });\n      let msg = '';\n      if (successCount > 0) {\n        msg = i18n.translate('RELATIONSHIP_LAST_FRAME_COPY_MSG_SUCCESS', {\n          values: {\n            count: successCount\n          }\n        });\n        if (skipCount > 0) {\n          msg = `${msg}; `;\n        }\n      }\n      if (skipCount > 0) {\n        msg = `${msg}${i18n.translate('RELATIONSHIP_LAST_FRAME_COPY_MSG_SKIP', {\n          values: {\n            count: skipCount\n          }\n        })}`;\n      }\n      message.success(msg);\n    };\n    /**\n     * open menu by relationship\n     * @param relationship\n     */\n    this.openMenuByRelationship = (relationship, e) => {\n      this.editingRelationship = relationship;\n      this.rootStore.config.setRelationshipMenuVisible(true);\n      const bbox = e.target.getBoundingClientRect();\n      this.menuPosition = {\n        x: bbox.left,\n        y: bbox.bottom\n      };\n    };\n    /**\n     * delete from frames by instance item\n     * @param instanceItem\n     * @param camera\n     * @param frames\n     */\n    this.deleteFromFramesByInstanceItem = (instanceItem, camera, frames) => {\n      const {\n        currentFrame\n      } = this.rootStore.frame;\n      const currentFrameIncluded = frames.indexOf(currentFrame) >= 0;\n      const {\n        relationships\n      } = instanceItem.getCamera(camera);\n      const prevRelationships = [];\n      const currRelationships = [];\n      [...relationships].forEach(r => {\n        prevRelationships.push(r.toJSON());\n        r.deleteFromFrames(frames);\n        if (currentFrameIncluded) {\n          this.deleteConnection(r);\n        }\n        if (r.isEmpty) {\n          this.deleteRelationship(r);\n        } else {\n          currRelationships.push(r.toJSON());\n        }\n      });\n      return {\n        prevRelationships,\n        currRelationships\n      };\n    };\n    /**\n     * update connections interactive\n     * @param interactive\n     */\n    this.updateConnectionsInteractive = interactive => {\n      Object.values(this.connections).forEach(c => {\n        c.interactive = interactive;\n      });\n    };\n    /**\n     * update connection visible\n     * @param visible\n     */\n    this.updateConnectionsVisible = visible => {\n      Object.values(this.connections).forEach(c => {\n        c.visible = visible;\n      });\n    };\n    /**\n     * on shape hovered, update connections visibility\n     * @param shapeId\n     */\n    this.onShapeHovered = shapeId => {\n      const {\n        hideOthers,\n        activeRelationshipsMode\n      } = this.rootStore.config;\n      if (activeRelationshipsMode === AttributesMode.HOVER) {\n        this.updateConnectionsVisible(false);\n        const {\n          instanceItem\n        } = this.rootStore.shape.shapes[shapeId] || {};\n        if (instanceItem) {\n          const {\n            selectedInstances\n          } = this.rootStore.instance;\n          const shouldHide = hideOthers && selectedInstances.length > 0;\n          const {\n            relationships\n          } = instanceItem.getCamera(this.rootStore.frame.currentCamera);\n          relationships.forEach(r => {\n            const {\n              id,\n              fromInstanceItem,\n              toInstanceItem\n            } = r;\n            const cid = this.connectionMap[id];\n            const connection = this.connections[cid];\n            if (connection) {\n              const otherInstanceItem = instanceItem === fromInstanceItem ? toInstanceItem : fromInstanceItem;\n              if (!shouldHide || selectedInstances.indexOf(otherInstanceItem.instance) >= 0) {\n                connection.visible = true;\n              }\n            }\n          });\n        }\n      }\n    };\n    makeAutoObservable(this, {\n      rootStore: false,\n      relationships: false,\n      fromIcon: false,\n      currentConnection: false,\n      connections: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * get exist relationship\n   * @param fromInstanceItem\n   * @param toInstanceItem\n   * @param fromCamera\n   * @param toCamera\n   * @param relationship\n   */\n  getRelationship(fromInstanceItem, toInstanceItem, fromCamera, toCamera, relationship) {\n    return this.relationships.find(r => r.fromInstanceItem === fromInstanceItem && r.toInstanceItem === toInstanceItem && r.fromCamera === fromCamera && r.toCamera === toCamera && r.relationship === relationship);\n  }\n\n  /**\n   * init relationship settings\n   * @param payload\n   */\n  init(payload) {\n    const {\n      relationships\n    } = payload;\n    if (typeof relationships === 'string') {\n      const arr = relationships.split(',').map(i => i.trim()).filter(i => !!i);\n      this.options = arr.map(i => ({\n        name: i\n      }));\n    }\n  }\n\n  /**\n   * init relationships data\n   * @param relationships\n   */\n  initRelationships(relationships) {\n    if (Array.isArray(relationships)) {\n      relationships.forEach(({\n        id,\n        from = {},\n        to = {},\n        relationship,\n        frames = []\n      }) => {\n        if (from.instance && from.child && from.camera && to.instance && to.child && to.camera && relationship && this.options.findIndex(o => o.name === relationship) >= 0 && frames.length > 0 && frames.every(f => f.frameIndex !== undefined)) {\n          this.createRelationship({\n            id,\n            from,\n            to,\n            relationship,\n            frames\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * setup connections\n   */\n  setupConnections() {\n    this.clearConnections();\n    const {\n      currentFrame\n    } = this.rootStore.frame;\n    this.relationships.forEach(relationship => {\n      if (relationship.frames[currentFrame]) {\n        this.createConnection(relationship);\n      }\n    });\n  }\n\n  /**\n   * clear all connections\n   */\n  clearConnections() {\n    Object.values(this.connections).forEach(c => c.remove());\n    this.connectionMap = {};\n  }\n\n  /**\n   * set active option index\n   * @param optionIndex\n   */\n  setActiveOption(optionIndex) {\n    this.activeOptionIndex = optionIndex;\n  }\n\n  /**\n   * activate set relationship\n   */\n  activate() {\n    if (this.rootStore.instance.isSingleSelected) {\n      this.fromInstanceItem = this.rootStore.instance.selectedInstanceItems[0];\n      const icon = this.addIcon(this.fromInstanceItem, this.rootStore.frame.currentCamera);\n      if (icon) {\n        this.fromIcon = icon;\n        document.addEventListener('mousemove', this.handleMouseMove);\n      }\n    }\n  }\n\n  /**\n   * cancel set relationship\n   */\n  cancel() {\n    var _this$currentConnecti;\n    if (this.fromInstanceItem) {\n      const {\n        currentCamera,\n        currentFrame\n      } = this.rootStore.frame;\n      const fromRelationships = this.fromInstanceItem.getCamera(currentCamera).relationships.filter(({\n        frames\n      }) => !!frames[currentFrame]);\n      if (fromRelationships.length === 0) {\n        var _this$fromIcon;\n        (_this$fromIcon = this.fromIcon) === null || _this$fromIcon === void 0 ? void 0 : _this$fromIcon.remove();\n      }\n    }\n    this.fromInstanceItem = null;\n    this.fromIcon = null;\n    (_this$currentConnecti = this.currentConnection) === null || _this$currentConnecti === void 0 ? void 0 : _this$currentConnecti.remove();\n    this.currentConnection = null;\n    document.removeEventListener('mousemove', this.handleMouseMove);\n  }\n\n  /**\n   * add relationship\n   * @param toInstanceItem\n   */\n  add(toInstanceItem) {\n    if (!this.fromInstanceItem) {\n      return;\n    }\n    const {\n      currentCamera,\n      currentFrame\n    } = this.rootStore.frame;\n    const activeRelationship = this.options[this.activeOptionIndex].name;\n    const existRelationship = this.getRelationship(this.fromInstanceItem, toInstanceItem, currentCamera, currentCamera, activeRelationship);\n    const storeId = this.rootStore.undo.preserve({\n      relationships: existRelationship ? [existRelationship.toJSON()] : []\n    });\n    if (existRelationship) {\n      if (!existRelationship.frames[currentFrame]) {\n        existRelationship.addToFrame(currentFrame);\n        this.rootStore.undo.save(storeId, {\n          relationships: [existRelationship.toJSON()]\n        });\n      }\n      this.deleteConnection(existRelationship);\n      this.createConnection(existRelationship, true);\n    } else {\n      const relationship = new Relationship({\n        fromInstanceItem: this.fromInstanceItem,\n        toInstanceItem,\n        fromCamera: currentCamera,\n        toCamera: currentCamera,\n        relationship: activeRelationship,\n        frames: [{\n          frameIndex: currentFrame\n        }]\n      });\n      this.saveRelationship(relationship);\n      this.createConnection(relationship, true);\n      this.rootStore.undo.save(storeId, {\n        relationships: [relationship.toJSON()]\n      });\n    }\n    this.cancel();\n  }\n\n  /**\n   * create relationship instance\n   * @param relationship\n   */\n  createRelationship({\n    id,\n    from,\n    to,\n    relationship,\n    frames\n  }) {\n    const fromInstance = this.rootStore.instance.getInstanceById(from.instance);\n    const toInstance = this.rootStore.instance.getInstanceById(to.instance);\n    if (fromInstance && toInstance) {\n      const fromInstanceItem = fromInstance.items[from.child];\n      const toInstanceItem = toInstance.items[to.child];\n      if (fromInstanceItem && toInstanceItem) {\n        this.saveRelationship(new Relationship({\n          id,\n          fromInstanceItem,\n          toInstanceItem,\n          fromCamera: from.camera,\n          toCamera: to.camera,\n          relationship,\n          frames\n        }));\n      }\n    }\n  }\n\n  /**\n   * save relationship\n   * @param relationship\n   */\n  saveRelationship(relationship) {\n    const {\n      fromInstanceItem,\n      toInstanceItem,\n      fromCamera,\n      toCamera\n    } = relationship;\n    this.relationships.push(relationship);\n    fromInstanceItem.addRelationship(fromCamera, relationship);\n    toInstanceItem.addRelationship(toCamera, relationship);\n  }\n\n  /**\n   * delete relationship\n   * @param relationship\n   */\n  deleteRelationship(relationship) {\n    const {\n      id,\n      fromInstanceItem,\n      toInstanceItem,\n      fromCamera,\n      toCamera\n    } = relationship;\n    const index = this.relationships.findIndex(r => r.id === id);\n    if (index >= 0) {\n      this.relationships.splice(index, 1);\n    }\n    fromInstanceItem.removeRelationship(fromCamera, relationship);\n    toInstanceItem.removeRelationship(toCamera, relationship);\n  }\n\n  /**\n   * create connection\n   * @param relationship\n   * @param byMouse\n   */\n  createConnection(relationship, byMouse = false) {\n    const {\n      fromInstanceItem,\n      toInstanceItem,\n      fromCamera,\n      toCamera\n    } = relationship;\n    const fromIcon = this.addIcon(fromInstanceItem, fromCamera);\n    const toIcon = this.addIcon(toInstanceItem, toCamera);\n    if (fromIcon && toIcon) {\n      const fromRect = fromIcon.getBoundingClientRect();\n      const toRect = toIcon.getBoundingClientRect();\n      const from = {\n        x: fromRect.x + fromRect.width,\n        y: fromRect.y + fromRect.height / 2\n      };\n      const to = {\n        x: toRect.x + toRect.width / 2,\n        y: toRect.y\n      };\n      const {\n        activeRelationshipsMode\n      } = this.rootStore.config;\n      let visible = activeRelationshipsMode === AttributesMode.ALWAYS;\n      if (byMouse && activeRelationshipsMode === AttributesMode.HOVER) {\n        const {\n          hoveredShapeId,\n          shapes\n        } = this.rootStore.shape;\n        const {\n          instanceItem\n        } = shapes[hoveredShapeId] || {};\n        if (instanceItem === relationship.toInstanceItem) {\n          visible = true;\n        }\n      }\n      const connection = new Connection({\n        containerId: `${CAMERA_VIEW_CONNECTIONS}-${fromCamera}`,\n        from,\n        to,\n        text: relationship.relationship,\n        interactive: !this.rootStore.readonly,\n        visible,\n        onClick: () => this.handleClick(relationship),\n        onRightClick: () => this.handleRightClick(relationship)\n      });\n      this.connections[connection.id] = connection;\n      this.connectionMap[relationship.id] = connection.id;\n    }\n  }\n\n  /**\n    * update connection position\n    * @param instanceItem\n    * @param camera\n    * @param icon\n    */\n  updateConnection(instanceItem, camera, icon) {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = icon.getBoundingClientRect();\n    const {\n      relationships\n    } = instanceItem.getCamera(camera);\n    relationships.forEach(r => {\n      const cid = this.connectionMap[r.id];\n      const connection = this.connections[cid];\n      if (connection) {\n        if (r.fromInstanceItem === instanceItem) {\n          connection.from = {\n            x: x + width,\n            y: y + height / 2\n          };\n        } else {\n          connection.to = {\n            x: x + width / 2,\n            y\n          };\n        }\n      }\n    });\n    if (this.currentConnection && this.fromInstanceItem === instanceItem) {\n      this.currentConnection.from = {\n        x: x + width,\n        y: y + height / 2\n      };\n    }\n  }\n\n  /**\n   * delete connection\n   * @param relationship\n   */\n  deleteConnection(relationship) {\n    const {\n      id,\n      fromInstanceItem,\n      toInstanceItem,\n      fromCamera,\n      toCamera\n    } = relationship;\n    // delete connection instance\n    const cid = this.connectionMap[id];\n    const connection = this.connections[cid];\n    if (connection) {\n      connection.remove();\n      delete this.connections[cid];\n    }\n    // remove mapping\n    delete this.connectionMap[id];\n    // remove icon\n    const {\n      currentFrame\n    } = this.rootStore.frame;\n    const fromRelationships = fromInstanceItem.getCamera(fromCamera).relationships.filter(({\n      frames\n    }) => !!frames[currentFrame]);\n    if (fromRelationships.length === 0) {\n      this.removeIcon(fromInstanceItem);\n    }\n    const toRelationships = toInstanceItem.getCamera(toCamera).relationships.filter(({\n      frames\n    }) => !!frames[currentFrame]);\n    if (toRelationships.length === 0) {\n      this.removeIcon(toInstanceItem);\n    }\n  }\n\n  /**\n    * add icon to shape\n    * @param instanceItem\n    * @param camera\n    */\n  addIcon(instanceItem, camera) {\n    const shape = this.rootStore.shape.getShapeByInstanceItem(instanceItem, camera);\n    if (shape && shape.labelDom) {\n      // add relationship icon\n      const icon = document.createElement('div');\n      icon.className = 'relationship-icon';\n      icon.innerHTML = `\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 12 12\" version=\"1.1\">\n          <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\" transform=\"translate(-228.000000, -509.000000)\">\n            <g transform=\"translate(226.575379, 507.575379)\">\n              <path d=\"M5.9246212,3.9246212 L5.9246212,4.9246212 L3.9246212,4.9246212 C2.54390933,4.9246212 1.4246212,6.04390933 1.4246212,7.4246212 C1.4246212,8.7501046 2.45615714,9.83465987 3.76024551,9.91930352 L3.9246212,9.9246212 L5.9246212,9.9246212 L5.9246212,10.9246212 L3.9246212,10.9246212 C1.99162458,10.9246212 0.424621202,9.35761783 0.424621202,7.4246212 C0.424621202,5.5560578 1.8888988,4.02949475 3.732586,3.92980007 L3.9246212,3.9246212 L5.9246212,3.9246212 Z M10.9246212,3.9246212 C12.8576178,3.9246212 14.4246212,5.49162458 14.4246212,7.4246212 C14.4246212,9.29318461 12.9603436,10.8197477 11.1166564,10.9194423 L10.9246212,10.9246212 L8.9246212,10.9246212 L8.9246212,9.9246212 L10.9246212,9.9246212 C12.3053331,9.9246212 13.4246212,8.80533308 13.4246212,7.4246212 C13.4246212,6.0991378 12.3930853,5.01458253 11.0889969,4.92993888 L10.9246212,4.9246212 L8.9246212,4.9246212 L8.9246212,3.9246212 L10.9246212,3.9246212 Z M9.4246212,6.9246212 L9.4246212,7.9246212 L5.4246212,7.9246212 L5.4246212,6.9246212 L9.4246212,6.9246212 Z\" fill=\"currentColor\" fillRule=\"nonzero\" transform=\"translate(7.424621, 7.424621) rotate(-315.000000) translate(-7.424621, -7.424621) \" />\n            </g>\n          </g>\n        </svg>\n      `;\n      shape.labelDom.setExtra(icon);\n      shape.labelDom.onPositionChange = () => this.updateConnection(instanceItem, camera, icon);\n      return icon;\n    }\n    return null;\n  }\n\n  /**\n   * remove icon from shape\n   * @param instanceItem\n   */\n  removeIcon(instanceItem) {\n    const shape = this.rootStore.shape.getShapeByInstanceItem(instanceItem);\n    if (shape && shape.labelDom) {\n      shape.labelDom.setExtra();\n    }\n  }\n  /**\n   * setup relationships for instance item\n   * @param instanceItem\n   * @param camera\n   */\n  setupRelationshipsForInstanceItem(instanceItem, camera) {\n    this.relationships.forEach(r => {\n      const {\n        fromInstanceItem,\n        toInstanceItem,\n        fromCamera,\n        toCamera\n      } = r;\n      if (fromInstanceItem.id === instanceItem.id) {\n        if (!camera) {\n          instanceItem.removeRelationship(fromCamera, r);\n          instanceItem.addRelationship(fromCamera, r);\n        } else if (camera === fromCamera) {\n          instanceItem.removeRelationship(camera, r);\n          instanceItem.addRelationship(camera, r);\n        }\n        r.fromInstanceItem = instanceItem;\n      } else if (toInstanceItem.id === instanceItem.id) {\n        if (!camera) {\n          instanceItem.removeRelationship(toCamera, r);\n          instanceItem.addRelationship(toCamera, r);\n        } else if (camera === toCamera) {\n          instanceItem.removeRelationship(camera, r);\n          instanceItem.addRelationship(camera, r);\n        }\n        r.toInstanceItem = instanceItem;\n      }\n    });\n  }\n\n  /**\n   * setup connections for instance item\n   * @param instanceItem\n   */\n  setupConnectionsForInstanceItem(instanceItem) {\n    const {\n      currentCamera,\n      currentFrame\n    } = this.rootStore.frame;\n    const {\n      relationships\n    } = instanceItem.getCamera(currentCamera);\n    relationships.forEach(r => {\n      if (r.frames[currentFrame]) {\n        this.deleteConnection(r);\n        this.createConnection(r);\n      }\n    });\n  }\n  /**\n   * hide or show relationships\n   */\n  hideOrShowRelationships() {\n    const {\n      hideOthers,\n      activeRelationshipsMode\n    } = this.rootStore.config;\n    const {\n      selectedInstances\n    } = this.rootStore.instance;\n    const shouldHide = hideOthers && selectedInstances.length > 0;\n    const visibleConnections = [];\n    if (shouldHide) {\n      selectedInstances.forEach(instance => {\n        const items = Object.values(instance.items);\n        items.forEach(item => {\n          Object.values(item.cameras).forEach(({\n            relationships\n          }) => {\n            relationships.forEach(relationship => {\n              const {\n                id,\n                fromInstanceItem,\n                toInstanceItem\n              } = relationship;\n              const cid = this.connectionMap[id];\n              const connection = this.connections[cid];\n              if (connection) {\n                const otherInstanceItem = item === fromInstanceItem ? toInstanceItem : fromInstanceItem;\n                if (selectedInstances.indexOf(otherInstanceItem.instance) >= 0) {\n                  visibleConnections.push(connection);\n                }\n              }\n            });\n          });\n        });\n      });\n    }\n    Object.values(this.connections).forEach(connection => {\n      if (!shouldHide) {\n        connection.visible = activeRelationshipsMode === AttributesMode.ALWAYS;\n      } else {\n        connection.visible = visibleConnections.indexOf(connection) >= 0;\n      }\n    });\n  }\n\n  /**\n   * get relationships json data (for save)\n   */\n  relationshipsJSON() {\n    return this.relationships.map(r => r.toJSON());\n  }\n}","map":{"version":3,"names":["makeAutoObservable","message","AttributesMode","Relationship","Connection","i18n","CAMERA_VIEW_CONNECTIONS","formatFrames","RelationshipStore","relationshipEnabled","options","length","settingRelationship","fromInstanceItem","editingConnection","editingRelationship","undefined","cid","connectionMap","id","connections","constructor","rootStore","activeOptionIndex","relationships","menuPosition","fromIcon","currentConnection","handleMouseMove","event","to","x","clientX","y","clientY","fromRect","getBoundingClientRect","from","width","height","containerId","frame","currentCamera","text","name","handleClick","relationship","selected","config","setRelationshipModalVisible","instance","selectInstanceItem","handleRightClick","setRelationshipMenuVisible","switch","storeId","undo","preserve","toJSON","save","deleteConnection","createConnection","updateName","connection","deleteFromCurrentFrame","deleteFromFrames","currentFrame","frames","deletedFrames","indexOf","isEmpty","deleteRelationship","success","translate","values","finishUpdate","copyToNextFrame","frameCount","copyToFrames","toInstanceItem","fromCamera","toCamera","fromCameraData","getCamera","toCameraData","successFrames","i","frameIndex","addToFrame","push","copyFromLastFrame","instanceItem","lastFrame","successCount","skipCount","prevRelationships","currRelationships","getShapeByInstanceItem","shape","forEach","r","relatedItem","relatedShape","msg","count","openMenuByRelationship","e","bbox","target","left","bottom","deleteFromFramesByInstanceItem","camera","currentFrameIncluded","updateConnectionsInteractive","interactive","Object","c","updateConnectionsVisible","visible","onShapeHovered","shapeId","hideOthers","activeRelationshipsMode","HOVER","shapes","selectedInstances","shouldHide","otherInstanceItem","autoBind","getRelationship","find","init","payload","arr","split","map","trim","filter","initRelationships","Array","isArray","child","findIndex","o","every","f","createRelationship","setupConnections","clearConnections","remove","setActiveOption","optionIndex","activate","isSingleSelected","selectedInstanceItems","icon","addIcon","document","addEventListener","cancel","_this$currentConnecti","fromRelationships","_this$fromIcon","removeEventListener","add","activeRelationship","existRelationship","saveRelationship","fromInstance","getInstanceById","toInstance","items","addRelationship","index","splice","removeRelationship","byMouse","toIcon","toRect","ALWAYS","hoveredShapeId","readonly","onClick","onRightClick","updateConnection","removeIcon","toRelationships","labelDom","createElement","className","innerHTML","setExtra","onPositionChange","setupRelationshipsForInstanceItem","setupConnectionsForInstanceItem","hideOrShowRelationships","visibleConnections","item","cameras","relationshipsJSON"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/RelationshipStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { message } from 'antd';\nimport RootStore from './RootStore';\nimport { Payload, RelationshipOption, Relationship as IRelationship, AttributesMode } from '../types';\nimport Relationship from '../model/Relationship';\nimport InstanceItem from '../model/InstanceItem';\nimport Connection from '../view/Connection';\nimport i18n from '../locales';\nimport { CAMERA_VIEW_CONNECTIONS } from '../constants';\nimport { formatFrames } from '../utils';\n\nexport default class RelationshipStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * relationship options\n   */\n  options: RelationshipOption[] = [];\n\n  /**\n   * active option index\n   */\n  activeOptionIndex = 0;\n\n  /**\n   * saved relationships\n   */\n  relationships: Relationship[] = [];\n\n  /**\n   * editing relationship\n   */\n  editingRelationship: Relationship | null = null;\n\n  /**\n   * relationship menu position\n   */\n  menuPosition: { x: number; y: number } | null = null;\n\n  /**\n   * from instance item current editing\n   */\n  fromInstanceItem: InstanceItem | null = null;\n\n  /**\n   * from instance item relationship icon\n   */\n  fromIcon: HTMLDivElement | null = null;\n\n  /**\n   * current editing connection\n   */\n  currentConnection: Connection | null = null;\n\n  /**\n   * all onnection instances in current frame & current camera\n   */\n  connections: {\n    [id: string]: Connection;\n  } = {};\n\n  /**\n   * relationship id & connection id mapping\n   */\n  connectionMap: {\n    [relationshipId: string]: string;\n  } = {};\n\n  /**\n   * is relationship enabled\n   * @getter\n   */\n  get relationshipEnabled() {\n    return this.options.length > 0;\n  }\n\n  /**\n   * is setting relationship\n   * @getter\n   */\n  get settingRelationship() {\n    return this.fromInstanceItem !== null;\n  }\n\n  /**\n   * editing connection\n   * @getter\n   */\n  get editingConnection() {\n    if (!this.editingRelationship) {\n      return undefined;\n    }\n    const cid = this.connectionMap[this.editingRelationship.id];\n    return this.connections[cid];\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      relationships: false,\n      fromIcon: false,\n      currentConnection: false,\n      connections: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * get exist relationship\n   * @param fromInstanceItem\n   * @param toInstanceItem\n   * @param fromCamera\n   * @param toCamera\n   * @param relationship\n   */\n  getRelationship(fromInstanceItem: InstanceItem, toInstanceItem: InstanceItem, fromCamera: string, toCamera: string, relationship: string) {\n    return this.relationships.find((r) => (\n      r.fromInstanceItem === fromInstanceItem &&\n      r.toInstanceItem === toInstanceItem &&\n      r.fromCamera === fromCamera &&\n      r.toCamera === toCamera &&\n      r.relationship === relationship\n    ));\n  }\n\n  /**\n   * init relationship settings\n   * @param payload\n   */\n  init(payload: Payload) {\n    const { relationships } = payload;\n    if (typeof relationships === 'string') {\n      const arr = relationships.split(',').map((i) => i.trim()).filter((i) => !!i);\n      this.options = arr.map((i) => ({ name: i }));\n    }\n  }\n\n  /**\n   * init relationships data\n   * @param relationships\n   */\n  initRelationships(relationships: any) {\n    if (Array.isArray(relationships)) {\n      relationships.forEach(({ id, from = {}, to = {}, relationship, frames = [] }) => {\n        if (\n          from.instance && from.child && from.camera &&\n          to.instance && to.child && to.camera &&\n          relationship && this.options.findIndex((o) => o.name === relationship) >= 0 &&\n          frames.length > 0 && frames.every((f: any) => f.frameIndex !== undefined)\n        ) {\n          this.createRelationship({ id, from, to, relationship, frames });\n        }\n      });\n    }\n  }\n\n  /**\n   * setup connections\n   */\n  setupConnections() {\n    this.clearConnections();\n    const { currentFrame } = this.rootStore.frame;\n    this.relationships.forEach((relationship) => {\n      if (relationship.frames[currentFrame]) {\n        this.createConnection(relationship);\n      }\n    });\n  }\n\n  /**\n   * clear all connections\n   */\n  clearConnections() {\n    Object.values(this.connections).forEach((c) => c.remove());\n    this.connectionMap = {};\n  }\n\n  /**\n   * set active option index\n   * @param optionIndex\n   */\n  setActiveOption(optionIndex: number) {\n    this.activeOptionIndex = optionIndex;\n  }\n\n  /**\n   * activate set relationship\n   */\n  activate() {\n    if (this.rootStore.instance.isSingleSelected) {\n      this.fromInstanceItem = this.rootStore.instance.selectedInstanceItems[0];\n      const icon = this.addIcon(this.fromInstanceItem, this.rootStore.frame.currentCamera);\n      if (icon) {\n        this.fromIcon = icon;\n        document.addEventListener('mousemove', this.handleMouseMove);\n      }\n    }\n  }\n\n  /**\n   * cancel set relationship\n   */\n  cancel() {\n    if (this.fromInstanceItem) {\n      const { currentCamera, currentFrame } = this.rootStore.frame;\n      const fromRelationships = this.fromInstanceItem.getCamera(currentCamera).relationships.filter(({ frames }) => !!frames[currentFrame]);\n      if (fromRelationships.length === 0) {\n        this.fromIcon?.remove();\n      }\n    }\n    this.fromInstanceItem = null;\n    this.fromIcon = null;\n    this.currentConnection?.remove();\n    this.currentConnection = null;\n    document.removeEventListener('mousemove', this.handleMouseMove);\n  }\n\n  /**\n   * add relationship\n   * @param toInstanceItem\n   */\n  add(toInstanceItem: InstanceItem) {\n    if (!this.fromInstanceItem) {\n      return;\n    }\n\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const activeRelationship = this.options[this.activeOptionIndex].name;\n    const existRelationship = this.getRelationship(this.fromInstanceItem, toInstanceItem, currentCamera, currentCamera, activeRelationship);\n    const storeId = this.rootStore.undo.preserve({\n      relationships: existRelationship ? [existRelationship.toJSON()] : [],\n    });\n    if (existRelationship) {\n      if (!existRelationship.frames[currentFrame]) {\n        existRelationship.addToFrame(currentFrame);\n        this.rootStore.undo.save(storeId, {\n          relationships: [existRelationship.toJSON()],\n        });\n      }\n      this.deleteConnection(existRelationship);\n      this.createConnection(existRelationship, true);\n    } else {\n      const relationship = new Relationship({\n        fromInstanceItem: this.fromInstanceItem,\n        toInstanceItem,\n        fromCamera: currentCamera,\n        toCamera: currentCamera,\n        relationship: activeRelationship,\n        frames: [{\n          frameIndex: currentFrame,\n        }],\n      });\n      this.saveRelationship(relationship);\n      this.createConnection(relationship, true);\n      this.rootStore.undo.save(storeId, {\n        relationships: [relationship.toJSON()],\n      });\n    }\n    this.cancel();\n  }\n\n  /**\n   * create relationship instance\n   * @param relationship\n   */\n  createRelationship({ id, from, to, relationship, frames }: IRelationship) {\n    const fromInstance = this.rootStore.instance.getInstanceById(from.instance);\n    const toInstance = this.rootStore.instance.getInstanceById(to.instance);\n    if (fromInstance && toInstance) {\n      const fromInstanceItem = fromInstance.items[from.child];\n      const toInstanceItem = toInstance.items[to.child];\n      if (fromInstanceItem && toInstanceItem) {\n        this.saveRelationship(new Relationship({\n          id,\n          fromInstanceItem,\n          toInstanceItem,\n          fromCamera: from.camera,\n          toCamera: to.camera,\n          relationship,\n          frames,\n        }));\n      }\n    }\n  }\n\n  /**\n   * save relationship\n   * @param relationship\n   */\n  saveRelationship(relationship: Relationship) {\n    const { fromInstanceItem, toInstanceItem, fromCamera, toCamera } = relationship;\n    this.relationships.push(relationship);\n    fromInstanceItem.addRelationship(fromCamera, relationship);\n    toInstanceItem.addRelationship(toCamera, relationship);\n  }\n\n  /**\n   * delete relationship\n   * @param relationship\n   */\n  deleteRelationship(relationship: Relationship) {\n    const { id, fromInstanceItem, toInstanceItem, fromCamera, toCamera } = relationship;\n    const index = this.relationships.findIndex((r) => r.id === id);\n    if (index >= 0) {\n      this.relationships.splice(index, 1);\n    }\n    fromInstanceItem.removeRelationship(fromCamera, relationship);\n    toInstanceItem.removeRelationship(toCamera, relationship);\n  }\n\n  /**\n   * create connection\n   * @param relationship\n   * @param byMouse\n   */\n  createConnection(relationship: Relationship, byMouse = false) {\n    const { fromInstanceItem, toInstanceItem, fromCamera, toCamera } = relationship;\n    const fromIcon = this.addIcon(fromInstanceItem, fromCamera);\n    const toIcon = this.addIcon(toInstanceItem, toCamera);\n    if (fromIcon && toIcon) {\n      const fromRect = fromIcon.getBoundingClientRect();\n      const toRect = toIcon.getBoundingClientRect();\n      const from = {\n        x: fromRect.x + fromRect.width,\n        y: fromRect.y + fromRect.height / 2,\n      };\n      const to = {\n        x: toRect.x + toRect.width / 2,\n        y: toRect.y,\n      };\n      const { activeRelationshipsMode } = this.rootStore.config;\n      let visible = activeRelationshipsMode === AttributesMode.ALWAYS;\n      if (byMouse && activeRelationshipsMode === AttributesMode.HOVER) {\n        const { hoveredShapeId, shapes } = this.rootStore.shape;\n        const { instanceItem } = shapes[hoveredShapeId] || {};\n        if (instanceItem === relationship.toInstanceItem) {\n          visible = true;\n        }\n      }\n      const connection = new Connection({\n        containerId: `${CAMERA_VIEW_CONNECTIONS}-${fromCamera}`,\n        from,\n        to,\n        text: relationship.relationship,\n        interactive: !this.rootStore.readonly,\n        visible,\n        onClick: () => this.handleClick(relationship),\n        onRightClick: () => this.handleRightClick(relationship),\n      });\n      this.connections[connection.id] = connection;\n      this.connectionMap[relationship.id] = connection.id;\n    }\n  }\n\n  /**\n    * update connection position\n    * @param instanceItem\n    * @param camera\n    * @param icon\n    */\n  updateConnection(instanceItem: InstanceItem, camera: string, icon: HTMLDivElement) {\n    const { x, y, width, height } = icon.getBoundingClientRect();\n    const { relationships } = instanceItem.getCamera(camera);\n    relationships.forEach((r) => {\n      const cid = this.connectionMap[r.id];\n      const connection = this.connections[cid];\n      if (connection) {\n        if (r.fromInstanceItem === instanceItem) {\n          connection.from = {\n            x: x + width,\n            y: y + height / 2,\n          };\n        } else {\n          connection.to = {\n            x: x + width / 2,\n            y,\n          };\n        }\n      }\n    });\n    if (this.currentConnection && this.fromInstanceItem === instanceItem) {\n      this.currentConnection.from = {\n        x: x + width,\n        y: y + height / 2,\n      };\n    }\n  }\n\n  /**\n   * delete connection\n   * @param relationship\n   */\n  deleteConnection(relationship: Relationship) {\n    const { id, fromInstanceItem, toInstanceItem, fromCamera, toCamera } = relationship;\n    // delete connection instance\n    const cid = this.connectionMap[id];\n    const connection = this.connections[cid];\n    if (connection) {\n      connection.remove();\n      delete this.connections[cid];\n    }\n    // remove mapping\n    delete this.connectionMap[id];\n    // remove icon\n    const { currentFrame } = this.rootStore.frame;\n    const fromRelationships = fromInstanceItem.getCamera(fromCamera).relationships.filter(({ frames }) => !!frames[currentFrame]);\n    if (fromRelationships.length === 0) {\n      this.removeIcon(fromInstanceItem);\n    }\n    const toRelationships = toInstanceItem.getCamera(toCamera).relationships.filter(({ frames }) => !!frames[currentFrame]);\n    if (toRelationships.length === 0) {\n      this.removeIcon(toInstanceItem);\n    }\n  }\n\n  /**\n    * add icon to shape\n    * @param instanceItem\n    * @param camera\n    */\n  addIcon(instanceItem: InstanceItem, camera: string) {\n    const shape = this.rootStore.shape.getShapeByInstanceItem(instanceItem, camera);\n    if (shape && shape.labelDom) {\n      // add relationship icon\n      const icon = document.createElement('div');\n      icon.className = 'relationship-icon';\n      icon.innerHTML = `\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 12 12\" version=\"1.1\">\n          <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\" transform=\"translate(-228.000000, -509.000000)\">\n            <g transform=\"translate(226.575379, 507.575379)\">\n              <path d=\"M5.9246212,3.9246212 L5.9246212,4.9246212 L3.9246212,4.9246212 C2.54390933,4.9246212 1.4246212,6.04390933 1.4246212,7.4246212 C1.4246212,8.7501046 2.45615714,9.83465987 3.76024551,9.91930352 L3.9246212,9.9246212 L5.9246212,9.9246212 L5.9246212,10.9246212 L3.9246212,10.9246212 C1.99162458,10.9246212 0.424621202,9.35761783 0.424621202,7.4246212 C0.424621202,5.5560578 1.8888988,4.02949475 3.732586,3.92980007 L3.9246212,3.9246212 L5.9246212,3.9246212 Z M10.9246212,3.9246212 C12.8576178,3.9246212 14.4246212,5.49162458 14.4246212,7.4246212 C14.4246212,9.29318461 12.9603436,10.8197477 11.1166564,10.9194423 L10.9246212,10.9246212 L8.9246212,10.9246212 L8.9246212,9.9246212 L10.9246212,9.9246212 C12.3053331,9.9246212 13.4246212,8.80533308 13.4246212,7.4246212 C13.4246212,6.0991378 12.3930853,5.01458253 11.0889969,4.92993888 L10.9246212,4.9246212 L8.9246212,4.9246212 L8.9246212,3.9246212 L10.9246212,3.9246212 Z M9.4246212,6.9246212 L9.4246212,7.9246212 L5.4246212,7.9246212 L5.4246212,6.9246212 L9.4246212,6.9246212 Z\" fill=\"currentColor\" fillRule=\"nonzero\" transform=\"translate(7.424621, 7.424621) rotate(-315.000000) translate(-7.424621, -7.424621) \" />\n            </g>\n          </g>\n        </svg>\n      `;\n      shape.labelDom.setExtra(icon);\n      shape.labelDom.onPositionChange = () => this.updateConnection(instanceItem, camera, icon);\n      return icon;\n    }\n    return null;\n  }\n\n  /**\n   * remove icon from shape\n   * @param instanceItem\n   */\n  removeIcon(instanceItem: InstanceItem) {\n    const shape = this.rootStore.shape.getShapeByInstanceItem(instanceItem);\n    if (shape && shape.labelDom) {\n      shape.labelDom.setExtra();\n    }\n  }\n\n  /**\n   * handle mouse move\n   * @param event\n   */\n  handleMouseMove = (event: MouseEvent) => {\n    if (this.settingRelationship) {\n      const to = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n      if (!this.currentConnection) {\n        const fromRect = this.fromIcon!.getBoundingClientRect();\n        const from = {\n          x: fromRect.x + fromRect.width,\n          y: fromRect.y + fromRect.height / 2,\n        };\n        this.currentConnection = new Connection({\n          containerId: `${CAMERA_VIEW_CONNECTIONS}-${this.rootStore.frame.currentCamera}`,\n          from,\n          to,\n          text: this.options[this.activeOptionIndex].name,\n        });\n      } else {\n        this.currentConnection.to = to;\n      }\n    }\n  };\n\n  /**\n   * handle relationship click\n   * @param relationship\n   */\n  handleClick = (relationship: Relationship) => {\n    this.editingRelationship = relationship;\n    if (this.editingConnection) {\n      this.editingConnection.selected = true;\n    }\n    this.rootStore.config.setRelationshipModalVisible(true);\n    this.rootStore.instance.selectInstanceItem(relationship.fromInstanceItem);\n  };\n\n  /**\n   * handle relationship right click\n   * @param relationship\n   */\n  handleRightClick = (relationship: Relationship) => {\n    this.editingRelationship = relationship;\n    this.rootStore.config.setRelationshipMenuVisible(true);\n    this.rootStore.instance.selectInstanceItem(relationship.fromInstanceItem);\n  };\n\n  /**\n   * switch from & to for editing relationship\n   */\n  switch = () => {\n    if (this.editingRelationship) {\n      const storeId = this.rootStore.undo.preserve({ relationships: [this.editingRelationship.toJSON()] });\n      this.editingRelationship.switch();\n      this.rootStore.undo.save(storeId, { relationships: [this.editingRelationship.toJSON()] });\n      this.deleteConnection(this.editingRelationship);\n      this.createConnection(this.editingRelationship);\n    }\n  };\n\n  /**\n   * update name for editing relationship\n   * @param name\n   */\n  updateName = (name: string) => {\n    if (this.editingRelationship) {\n      const storeId = this.rootStore.undo.preserve({ relationships: [this.editingRelationship.toJSON()] });\n      this.editingRelationship.relationship = name;\n      this.rootStore.undo.save(storeId, { relationships: [this.editingRelationship.toJSON()] });\n      const cid = this.connectionMap[this.editingRelationship.id];\n      const connection = this.connections[cid];\n      if (connection) {\n        connection.name = name;\n      }\n    }\n  };\n\n  /**\n   * delete editing relationship\n   */\n  deleteFromCurrentFrame = () => {\n    this.deleteFromFrames([this.rootStore.frame.currentFrame]);\n  };\n\n  /**\n   * delete editing relationship from frames\n   * @param frames\n   */\n  deleteFromFrames = (frames: number[]) => {\n    if (this.editingRelationship) {\n      const storeId = this.rootStore.undo.preserve({ relationships: [this.editingRelationship.toJSON()] });\n      const deletedFrames = this.editingRelationship.deleteFromFrames(frames);\n      if (frames.indexOf(this.rootStore.frame.currentFrame) >= 0) {\n        this.deleteConnection(this.editingRelationship);\n      }\n      if (this.editingRelationship.isEmpty) {\n        this.deleteRelationship(this.editingRelationship);\n      }\n      this.rootStore.undo.save(storeId, { relationships: [this.editingRelationship.toJSON()] });\n      message.success(i18n.translate('RELATIONSHIP_DELETE_MSG', { values: { frames: formatFrames(deletedFrames) } }));\n    }\n    this.finishUpdate();\n  };\n\n  /**\n   * copy editing relationship to next frame\n   */\n  copyToNextFrame = () => {\n    const { currentFrame, frameCount } = this.rootStore.frame;\n    if (currentFrame + 1 < frameCount) {\n      this.copyToFrames([currentFrame + 1]);\n    }\n  };\n\n  /**\n   * copy editing relationship to frames\n   * @param frames\n   */\n  copyToFrames = (frames: number[]) => {\n    if (this.editingRelationship) {\n      const storeId = this.rootStore.undo.preserve({ relationships: [this.editingRelationship.toJSON()] });\n      const { fromInstanceItem, toInstanceItem, fromCamera, toCamera } = this.editingRelationship;\n      const fromCameraData = fromInstanceItem.getCamera(fromCamera);\n      const toCameraData = toInstanceItem.getCamera(toCamera);\n      const successFrames = [];\n      for (let i = 0; i < frames.length; i += 1) {\n        const frameIndex = frames[i];\n        if (fromCameraData.frames[frameIndex] && toCameraData.frames[frameIndex] && !this.editingRelationship.frames[frameIndex]) {\n          // exists\n          this.editingRelationship.addToFrame(frameIndex);\n          successFrames.push(frameIndex);\n        }\n      }\n      this.rootStore.undo.save(storeId, { relationships: [this.editingRelationship.toJSON()] });\n      if (successFrames.length > 0) {\n        message.success(i18n.translate('RELATIONSHIP_COPY_MSG', { values: { frames: formatFrames(successFrames) } }));\n      } else {\n        message.success(i18n.translate('RELATIONSHIP_COPY_MSG_SKIP'));\n      }\n    }\n    this.finishUpdate();\n  };\n\n  /**\n   * finish editing\n   */\n  finishUpdate = () => {\n    this.rootStore.config.setRelationshipModalVisible(false);\n    this.rootStore.config.setRelationshipMenuVisible(false);\n    if (this.editingConnection) {\n      this.editingConnection.selected = false;\n    }\n    this.editingRelationship = null;\n    this.menuPosition = null;\n  };\n\n  /**\n   * copy relationships to current frame from last frame\n   * @param instanceItem\n   */\n  copyFromLastFrame = (instanceItem: InstanceItem) => {\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const lastFrame = currentFrame - 1;\n    if (lastFrame < 0) {\n      return;\n    }\n    const { relationships } = instanceItem.getCamera(currentCamera);\n    if (relationships.length <= 0) {\n      return;\n    }\n\n    let successCount = 0;\n    let skipCount = 0;\n    const prevRelationships: IRelationship[] = [];\n    const currRelationships: IRelationship[] = [];\n    const { getShapeByInstanceItem } = this.rootStore.shape;\n    relationships.forEach((r) => {\n      const { frames, fromInstanceItem, toInstanceItem } = r;\n      if (frames[lastFrame] !== undefined && frames[currentFrame] === undefined) {\n        // exist in last frame, not in current frame\n        const relatedItem = fromInstanceItem === instanceItem ? toInstanceItem : fromInstanceItem;\n        const relatedShape = getShapeByInstanceItem(relatedItem);\n        if (relatedShape) {\n          // paste to current frame\n          prevRelationships.push(r.toJSON());\n          r.addToFrame(currentFrame);\n          currRelationships.push(r.toJSON());\n          this.createConnection(r);\n          successCount += 1;\n        } else {\n          skipCount += 1;\n        }\n      }\n    });\n    this.rootStore.undo.push({ relationships: prevRelationships }, { relationships: currRelationships });\n\n    let msg = '';\n    if (successCount > 0) {\n      msg = i18n.translate('RELATIONSHIP_LAST_FRAME_COPY_MSG_SUCCESS', { values: { count: successCount } });\n      if (skipCount > 0) {\n        msg = `${msg}; `;\n      }\n    }\n    if (skipCount > 0) {\n      msg = `${msg}${i18n.translate('RELATIONSHIP_LAST_FRAME_COPY_MSG_SKIP', { values: { count: skipCount } })}`;\n    }\n    message.success(msg);\n  };\n\n  /**\n   * open menu by relationship\n   * @param relationship\n   */\n  openMenuByRelationship = (relationship: Relationship, e: MouseEvent) => {\n    this.editingRelationship = relationship;\n    this.rootStore.config.setRelationshipMenuVisible(true);\n    const bbox = (e.target as HTMLElement).getBoundingClientRect();\n    this.menuPosition = {\n      x: bbox.left,\n      y: bbox.bottom,\n    };\n  };\n\n  /**\n   * delete from frames by instance item\n   * @param instanceItem\n   * @param camera\n   * @param frames\n   */\n  deleteFromFramesByInstanceItem = (instanceItem: InstanceItem, camera: string, frames: number[]) => {\n    const { currentFrame } = this.rootStore.frame;\n    const currentFrameIncluded = frames.indexOf(currentFrame) >= 0;\n    const { relationships } = instanceItem.getCamera(camera);\n    const prevRelationships: IRelationship[] = [];\n    const currRelationships: IRelationship[] = [];\n    [...relationships].forEach((r) => {\n      prevRelationships.push(r.toJSON());\n      r.deleteFromFrames(frames);\n      if (currentFrameIncluded) {\n        this.deleteConnection(r);\n      }\n      if (r.isEmpty) {\n        this.deleteRelationship(r);\n      } else {\n        currRelationships.push(r.toJSON());\n      }\n    });\n    return { prevRelationships, currRelationships };\n  };\n\n  /**\n   * setup relationships for instance item\n   * @param instanceItem\n   * @param camera\n   */\n  setupRelationshipsForInstanceItem(instanceItem: InstanceItem, camera?: string) {\n    this.relationships.forEach((r) => {\n      const { fromInstanceItem, toInstanceItem, fromCamera, toCamera } = r;\n      if (fromInstanceItem.id === instanceItem.id) {\n        if (!camera) {\n          instanceItem.removeRelationship(fromCamera, r);\n          instanceItem.addRelationship(fromCamera, r);\n        } else if (camera === fromCamera) {\n          instanceItem.removeRelationship(camera, r);\n          instanceItem.addRelationship(camera, r);\n        }\n        r.fromInstanceItem = instanceItem;\n      } else if (toInstanceItem.id === instanceItem.id) {\n        if (!camera) {\n          instanceItem.removeRelationship(toCamera, r);\n          instanceItem.addRelationship(toCamera, r);\n        } else if (camera === toCamera) {\n          instanceItem.removeRelationship(camera, r);\n          instanceItem.addRelationship(camera, r);\n        }\n        r.toInstanceItem = instanceItem;\n      }\n    });\n  }\n\n  /**\n   * setup connections for instance item\n   * @param instanceItem\n   */\n  setupConnectionsForInstanceItem(instanceItem: InstanceItem) {\n    const { currentCamera, currentFrame } = this.rootStore.frame;\n    const { relationships } = instanceItem.getCamera(currentCamera);\n    relationships.forEach((r) => {\n      if (r.frames[currentFrame]) {\n        this.deleteConnection(r);\n        this.createConnection(r);\n      }\n    });\n  }\n\n  /**\n   * update connections interactive\n   * @param interactive\n   */\n  updateConnectionsInteractive = (interactive: boolean) => {\n    Object.values(this.connections).forEach((c) => {\n      c.interactive = interactive;\n    });\n  };\n\n  /**\n   * update connection visible\n   * @param visible\n   */\n  updateConnectionsVisible = (visible: boolean) => {\n    Object.values(this.connections).forEach((c) => {\n      c.visible = visible;\n    });\n  };\n\n  /**\n   * on shape hovered, update connections visibility\n   * @param shapeId\n   */\n  onShapeHovered = (shapeId: string) => {\n    const { hideOthers, activeRelationshipsMode } = this.rootStore.config;\n    if (activeRelationshipsMode === AttributesMode.HOVER) {\n      this.updateConnectionsVisible(false);\n      const { instanceItem } = this.rootStore.shape.shapes[shapeId] || {};\n      if (instanceItem) {\n        const { selectedInstances } = this.rootStore.instance;\n        const shouldHide = hideOthers && selectedInstances.length > 0;\n\n        const { relationships } = instanceItem.getCamera(this.rootStore.frame.currentCamera);\n        relationships.forEach((r) => {\n          const { id, fromInstanceItem, toInstanceItem } = r;\n          const cid = this.connectionMap[id];\n          const connection = this.connections[cid];\n          if (connection) {\n            const otherInstanceItem = instanceItem === fromInstanceItem ? toInstanceItem : fromInstanceItem;\n            if (!shouldHide || selectedInstances.indexOf(otherInstanceItem.instance) >= 0) {\n              connection.visible = true;\n            }\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * hide or show relationships\n   */\n  hideOrShowRelationships() {\n    const { hideOthers, activeRelationshipsMode } = this.rootStore.config;\n    const { selectedInstances } = this.rootStore.instance;\n    const shouldHide = hideOthers && selectedInstances.length > 0;\n\n    const visibleConnections: Connection[] = [];\n    if (shouldHide) {\n      selectedInstances.forEach((instance) => {\n        const items = Object.values(instance.items);\n        items.forEach((item) => {\n          Object.values(item.cameras).forEach(({ relationships }) => {\n            relationships.forEach((relationship) => {\n              const { id, fromInstanceItem, toInstanceItem } = relationship;\n              const cid = this.connectionMap[id];\n              const connection = this.connections[cid];\n              if (connection) {\n                const otherInstanceItem = item === fromInstanceItem ? toInstanceItem : fromInstanceItem;\n                if (selectedInstances.indexOf(otherInstanceItem.instance) >= 0) {\n                  visibleConnections.push(connection);\n                }\n              }\n            });\n          });\n        });\n      });\n    }\n    Object.values(this.connections).forEach((connection) => {\n      if (!shouldHide) {\n        connection.visible = activeRelationshipsMode === AttributesMode.ALWAYS;\n      } else {\n        connection.visible = visibleConnections.indexOf(connection) >= 0;\n      }\n    });\n  }\n\n  /**\n   * get relationships json data (for save)\n   */\n  relationshipsJSON(): IRelationship[] {\n    return this.relationships.map((r) => r.toJSON());\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}