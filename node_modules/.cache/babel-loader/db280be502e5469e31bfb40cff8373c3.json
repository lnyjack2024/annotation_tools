{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\nimport { v4 as uuid } from 'uuid';\nimport { notification } from 'antd';\nimport * as alawmulaw from 'alawmulaw';\nimport i18n from '../locales';\nimport WavDecoder from '../common/Wave/utils/wav-decoder';\nimport { parseAlawPcmToAudioData } from '../../../utils/pcm';\nimport { AnnotationType, MediaModes } from '../types';\nimport { getFileExtension } from '../../../utils';\nclass AtlasStore {\n  constructor(rootStore) {\n    this.rootStore = void 0;\n    /**\n     * curve visibility\n     */\n    this.visible = {\n      spectrogram: true,\n      pitch: true,\n      formant: false,\n      intensity: false\n    };\n    /**\n     * analyse sampleRate\n     */\n    this.sampleRate = 10000;\n    /**\n     * analyse frequency\n     */\n    this.frequency = 5000;\n    this.placement = {\n      margin: 120,\n      // atlas start position\n      analyserHeight: 0,\n      // analyser window height\n      atlasWidth: 0,\n      // atlas window width\n      timelineHeight: 40,\n      // timeline height\n      atlasHeight: 320,\n      // atlas window height\n      timeControlHeight: 78,\n      // time controller height\n      timeControlTopGap: 12,\n      // gap at the top of the time controller\n      scalerHeight: 32,\n      // scaler height\n      duration: 0 // audio duration\n    };\n    this.tierHeight = 54;\n    this.annotationPanelHeight = 100;\n    /**\n     * tiers\n     */\n    this.tiers = {};\n    /**\n     * audiobuffer\n     */\n    this.audioBuffer = void 0;\n    /**\n     * anaylse duration threshold/second\n     */\n    this.threshold = 20;\n    /**\n     * draw atlas end\n     */\n    this.isDrawAtlasEnd = false;\n    /**\n     * waveform display range/precent\n     */\n    this.displayBuffer = {\n      start: 0,\n      end: 1,\n      precent: 1\n    };\n    /**\n     * selected region\n     */\n    this.selectedRegion = null;\n    /**\n     * current time\n     */\n    this.currentTime = 0;\n    /**\n     * selected time\n     */\n    this.selectedTime = null;\n    /**\n     * waveform value range\n     */\n    this.amplitude = {\n      min: 0,\n      max: 0\n    };\n    /**\n     * intensity value range\n     */\n    this.intensityRange = {\n      min: 0,\n      max: 0\n    };\n    /**\n     * cursor time\n     */\n    this.cursorTime = 0;\n    /**\n     * play mode\n     */\n    this.playMode = MediaModes.REGION_PLAY;\n    this.playAction = 0;\n    this.loop = null;\n    this.isPlaying = false;\n    // Loads audio using Web Audio buffer backend.\n    this.loadBuffer = url => new Promise(async (resolve, reject) => {\n      try {\n        const tail = getFileExtension(url);\n        const arrayBuffer = await fetch(url).then(async data => data.arrayBuffer());\n        let audioBuffer = null;\n        if (tail === 'wav') {\n          const decodeData = WavDecoder.decodeSync(arrayBuffer);\n          audioBuffer = new AudioBuffer({\n            numberOfChannels: decodeData.numberOfChannels,\n            sampleRate: decodeData.sampleRate,\n            length: decodeData.length\n          });\n          for (let i = 0; i < decodeData.numberOfChannels; i += 1) {\n            const audioChannelBuffer = audioBuffer.getChannelData(i);\n            for (let j = 0; j < decodeData.channelData[i].length; j += 1) {\n              audioChannelBuffer[j] = decodeData.channelData[i][j];\n            }\n          }\n        } else if (tail === 'alaw') {\n          const alawOriginData = new Uint8Array(arrayBuffer);\n          const decodeAlaw = alawmulaw.alaw.decode(alawOriginData);\n          audioBuffer = parseAlawPcmToAudioData(decodeAlaw.buffer);\n        } else {\n          const audioCtx = new AudioContext();\n          audioBuffer = await audioCtx.decodeAudioData(arrayBuffer);\n        }\n        resolve(audioBuffer);\n      } catch (error) {\n        resolve(null);\n      }\n    });\n    this.setAudioBuffer = buffer => {\n      this.audioBuffer = buffer;\n      this.sampleRate = buffer.sampleRate;\n      this.rootStore.setlocalUrl(buffer);\n      this.setDuration(buffer.duration);\n    };\n    this.setDuration = duration => {\n      this.updatePlacement({\n        duration\n      });\n      if (Object.keys(this.tiers).length === 0) {\n        const tiers = {};\n        this.rootStore.ontology.categories.forEach(({\n          className,\n          type\n        }) => {\n          tiers[className] = type === AnnotationType.TIMING ? [] : [{\n            id: uuid(),\n            category: className\n          }];\n        });\n        this.initTier(tiers);\n        this.rootStore.instance.createDefaultInstances();\n      }\n    };\n    // set curcve visiblity\n    this.setCurveVisible = curve => {\n      const visible = toJS(this.visible);\n      visible[curve] = !this.visible[curve];\n      this.visible = visible;\n    };\n    this.setIsDrawAtlasEnd = end => {\n      this.isDrawAtlasEnd = end;\n    };\n    this.updatePlacement = data => {\n      this.placement = {\n        ...toJS(this.placement),\n        ...data\n      };\n    };\n    // set atlas value range\n    this.setAmplitudeRange = range => {\n      this.amplitude = range;\n    };\n    makeAutoObservable(this, {\n      rootStore: false,\n      audioBuffer: false,\n      threshold: false,\n      cursorTime: false,\n      setAudioBuffer: false,\n      setCursorTime: false,\n      annotationPanelHeight: false,\n      loop: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n  /**\n   * init from paylod\n   * @param payload\n   */\n  async init(payload, url) {\n    // spectrogram frequency\n    const freq = Number(payload.frequency);\n    const frequency = Number.isNaN(freq) || !payload.frequency ? 5 : Math.max(Math.min(30, freq), 2);\n    this.frequency = frequency * 1000;\n    try {\n      const buffer = await this.loadBuffer(url);\n      if (!buffer) throw new Error();\n      this.setAudioBuffer(buffer);\n    } catch (error) {\n      notification.error({\n        message: i18n.translate('AUDIO_LOAD_ERROR')\n      });\n      this.rootStore.setting.setLoading(false);\n    }\n  }\n  setDisplayBuffer(bufferSize) {\n    this.displayBuffer = bufferSize;\n  }\n  initTier(tiers) {\n    this.tiers = tiers;\n    const len = Object.keys(tiers).length || 1;\n    this.annotationPanelHeight = len * this.tierHeight + (len - 1) * 4;\n  }\n  /**\n   * set selected region\n   */\n  setSelectedRegion(region) {\n    var _this$selectedRegion, _this$selectedRegion2;\n    if ((region === null || region === void 0 ? void 0 : region.start) !== ((_this$selectedRegion = this.selectedRegion) === null || _this$selectedRegion === void 0 ? void 0 : _this$selectedRegion.start) || (region === null || region === void 0 ? void 0 : region.end) !== ((_this$selectedRegion2 = this.selectedRegion) === null || _this$selectedRegion2 === void 0 ? void 0 : _this$selectedRegion2.end)) {\n      this.selectedRegion = region;\n      this.setLoop(region);\n    }\n    if (region !== null) {\n      this.selectedTime = null;\n    } else {\n      this.setLoop(null);\n    }\n  }\n\n  /**\n   * set selected time\n   */\n  setSelectedTime(time, end) {\n    if (this.selectedTime !== time) {\n      this.selectedTime = time;\n      this.setLoop(time !== null && end ? {\n        start: time,\n        end\n      } : null);\n    }\n    if (time !== null) {\n      this.selectedRegion = null;\n    }\n  }\n  clearSelected() {\n    this.selectedRegion = null;\n    this.selectedTime = null;\n  }\n  setCursorTime(time) {\n    this.cursorTime = time;\n  }\n  setCurrentTime(time) {\n    this.currentTime = time;\n  }\n  setPlayMode(mode) {\n    this.playMode = mode;\n  }\n  handlePlay() {\n    this.playAction += 1;\n  }\n  setLoop(loop) {\n    if (this.loop !== loop) {\n      if (loop && loop.end - loop.start < 0.02) {\n        this.loop = null;\n      } else {\n        this.loop = loop;\n      }\n    }\n  }\n  setIsPlaying(play) {\n    this.isPlaying = play;\n  }\n}\nexport default AtlasStore;","map":{"version":3,"names":["makeAutoObservable","toJS","v4","uuid","notification","alawmulaw","i18n","WavDecoder","parseAlawPcmToAudioData","AnnotationType","MediaModes","getFileExtension","AtlasStore","constructor","rootStore","visible","spectrogram","pitch","formant","intensity","sampleRate","frequency","placement","margin","analyserHeight","atlasWidth","timelineHeight","atlasHeight","timeControlHeight","timeControlTopGap","scalerHeight","duration","tierHeight","annotationPanelHeight","tiers","audioBuffer","threshold","isDrawAtlasEnd","displayBuffer","start","end","precent","selectedRegion","currentTime","selectedTime","amplitude","min","max","intensityRange","cursorTime","playMode","REGION_PLAY","playAction","loop","isPlaying","loadBuffer","url","Promise","resolve","reject","tail","arrayBuffer","fetch","then","data","decodeData","decodeSync","AudioBuffer","numberOfChannels","length","i","audioChannelBuffer","getChannelData","j","channelData","alawOriginData","Uint8Array","decodeAlaw","alaw","decode","buffer","audioCtx","AudioContext","decodeAudioData","error","setAudioBuffer","setlocalUrl","setDuration","updatePlacement","Object","keys","ontology","categories","forEach","className","type","TIMING","id","category","initTier","instance","createDefaultInstances","setCurveVisible","curve","setIsDrawAtlasEnd","setAmplitudeRange","range","setCursorTime","autoBind","init","payload","freq","Number","isNaN","Math","Error","message","translate","setting","setLoading","setDisplayBuffer","bufferSize","len","setSelectedRegion","region","_this$selectedRegion","_this$selectedRegion2","setLoop","setSelectedTime","time","clearSelected","setCurrentTime","setPlayMode","mode","handlePlay","setIsPlaying","play"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/store/AnalyseStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport { v4 as uuid } from 'uuid';\nimport { notification } from 'antd';\nimport * as alawmulaw from 'alawmulaw';\nimport { RootStoreType } from './RootStore';\nimport i18n from '../locales';\nimport WavDecoder from '../common/Wave/utils/wav-decoder';\nimport { parseAlawPcmToAudioData } from '../../../utils/pcm';\nimport { DisplayBuffer, CurveType, Tier, AnnotationType, MediaModes, Payload } from '../types';\nimport { getFileExtension } from '../../../utils';\n\nclass AtlasStore {\n  rootStore: RootStoreType;\n\n  /**\n   * curve visibility\n   */\n  visible: { [key: string]: boolean } = {\n    spectrogram: true,\n    pitch: true,\n    formant: false,\n    intensity: false\n  };\n\n  /**\n   * analyse sampleRate\n   */\n  sampleRate = 10000;\n\n  /**\n   * analyse frequency\n   */\n  frequency = 5000;\n\n  placement: {[key: string]: number} = {\n    margin: 120, // atlas start position\n    analyserHeight: 0, // analyser window height\n    atlasWidth: 0, // atlas window width\n    timelineHeight: 40, // timeline height\n    atlasHeight: 320, // atlas window height\n    timeControlHeight: 78, // time controller height\n    timeControlTopGap: 12, // gap at the top of the time controller\n    scalerHeight: 32, // scaler height\n    duration: 0, // audio duration\n  };\n\n  tierHeight = 54;\n\n  annotationPanelHeight = 100;\n\n  /**\n   * tiers\n   */\n  tiers: {[key: string]: Tier[]} = {};\n\n  /**\n   * audiobuffer\n   */\n  audioBuffer?: AudioBuffer;\n\n  /**\n   * anaylse duration threshold/second\n   */\n  threshold = 20;\n\n  /**\n   * draw atlas end\n   */\n  isDrawAtlasEnd = false;\n\n  /**\n   * waveform display range/precent\n   */\n  displayBuffer: DisplayBuffer = {\n    start: 0,\n    end: 1,\n    precent: 1,\n  };\n\n  /**\n   * selected region\n   */\n  selectedRegion: null | {start: number; end: number} = null;\n\n  /**\n   * current time\n   */\n\n  currentTime = 0;\n\n  /**\n   * selected time\n   */\n  selectedTime: null | number = null;\n\n  /**\n   * waveform value range\n   */\n  amplitude: {min: number, max: number} = { min: 0, max: 0 };\n\n  /**\n   * intensity value range\n   */\n  intensityRange: {min: number, max: number} = { min: 0, max: 0 };\n\n  /**\n   * cursor time\n   */\n  cursorTime = 0;\n\n  /**\n   * play mode\n   */\n  playMode: MediaModes = MediaModes.REGION_PLAY;\n\n  playAction = 0;\n\n  loop: { start: number, end: number } | null = null;\n\n  isPlaying = false;\n\n  constructor(rootStore: RootStoreType) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      audioBuffer: false,\n      threshold: false,\n      cursorTime: false,\n      setAudioBuffer: false,\n      setCursorTime: false,\n      annotationPanelHeight: false,\n      loop: false,\n    }, {\n      autoBind: true,\n    });\n    this.rootStore = rootStore;\n  };\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  async init(payload: Payload, url: string) {\n    // spectrogram frequency\n    const freq = Number(payload.frequency);\n    const frequency = (Number.isNaN(freq) || !payload.frequency) ? 5 : Math.max(Math.min(30, freq), 2);\n    this.frequency = frequency * 1000;\n    try {\n      const buffer = await this.loadBuffer(url);\n      if (!buffer) throw new Error();\n      this.setAudioBuffer(buffer);\n    } catch (error) {\n      notification.error({ message: i18n.translate('AUDIO_LOAD_ERROR') });\n      this.rootStore.setting.setLoading(false);\n    }\n  }\n\n  // Loads audio using Web Audio buffer backend.\n  loadBuffer = (url: string) => new Promise<AudioBuffer|null>(async (resolve, reject) => {\n    try {\n      const tail = getFileExtension(url);\n      const arrayBuffer = await fetch(url)\n        .then(async (data) => data.arrayBuffer());\n\n      let audioBuffer: AudioBuffer | null = null;\n      if (tail === 'wav') {\n        const decodeData = WavDecoder.decodeSync(arrayBuffer);\n        audioBuffer = new AudioBuffer({\n          numberOfChannels: decodeData.numberOfChannels,\n          sampleRate: decodeData.sampleRate,\n          length: decodeData.length,\n        });\n        for (let i = 0; i < decodeData.numberOfChannels; i += 1) {\n          const audioChannelBuffer = audioBuffer.getChannelData(i);\n          for (let j = 0; j < decodeData.channelData[i].length; j += 1) {\n            audioChannelBuffer[j] = decodeData.channelData[i][j];\n          }\n        }\n      } else if (tail === 'alaw') {\n        const alawOriginData = new Uint8Array(arrayBuffer);\n        const decodeAlaw = alawmulaw.alaw.decode(alawOriginData);\n        audioBuffer = parseAlawPcmToAudioData(decodeAlaw.buffer);\n      } else {\n        const audioCtx = new AudioContext();\n        audioBuffer = await audioCtx.decodeAudioData(arrayBuffer);\n      }\n      resolve(audioBuffer);\n    } catch (error) {\n      resolve(null);\n    }\n  });\n\n  setDisplayBuffer(bufferSize: DisplayBuffer) {\n    this.displayBuffer = bufferSize;\n  };\n\n  setAudioBuffer = (buffer: AudioBuffer) => {\n    this.audioBuffer = buffer;\n    this.sampleRate = buffer.sampleRate;\n    this.rootStore.setlocalUrl(buffer);\n    this.setDuration(buffer.duration);\n  };\n\n  setDuration = (duration: number) => {\n    this.updatePlacement({ duration });\n    if (Object.keys(this.tiers).length === 0) {\n      const tiers: {[key: string]: Tier[]} = {};\n      this.rootStore.ontology.categories.forEach(({ className, type }) => {\n        tiers[className] = type === AnnotationType.TIMING ? [] : [{\n          id: uuid(),\n          category: className\n        }];\n      });\n      this.initTier(tiers);\n      this.rootStore.instance.createDefaultInstances();\n    }\n  };\n\n  // set curcve visiblity\n  setCurveVisible = (curve: CurveType) => {\n    const visible = toJS(this.visible);\n    visible[curve] = !this.visible[curve];\n    this.visible = visible;\n  };\n\n  setIsDrawAtlasEnd = (end: boolean) => {\n    this.isDrawAtlasEnd = end;\n  };\n\n  updatePlacement = (data: {[key: string]: number}) => {\n    this.placement = {\n      ...toJS(this.placement),\n      ...data,\n    };\n  };\n\n  // set atlas value range\n  setAmplitudeRange = (range: { min: number, max: number }) => {\n    this.amplitude = range;\n  };\n\n  initTier(tiers: {[key: string]: Tier[]}) {\n    this.tiers = tiers;\n    const len = Object.keys(tiers).length || 1;\n    this.annotationPanelHeight = len * this.tierHeight + (len - 1) * 4;\n  };\n\n  /**\n   * set selected region\n   */\n  setSelectedRegion(region: {start: number; end: number} | null) {\n    if (region?.start !== this.selectedRegion?.start || region?.end !== this.selectedRegion?.end) {\n      this.selectedRegion = region;\n      this.setLoop(region);\n    }\n    if (region !== null) {\n      this.selectedTime = null;\n    } else {\n      this.setLoop(null);\n    }\n  }\n\n  /**\n   * set selected time\n   */\n  setSelectedTime(time: number | null, end?: number) {\n    if (this.selectedTime !== time) {\n      this.selectedTime = time;\n      this.setLoop(time !== null && end ? { start: time, end } : null);\n    }\n    if (time !== null) {\n      this.selectedRegion = null;\n    }\n  }\n\n  clearSelected() {\n    this.selectedRegion = null;\n    this.selectedTime = null;\n  }\n\n  setCursorTime(time: number) {\n    this.cursorTime = time;\n  }\n\n  setCurrentTime(time: number) {\n    this.currentTime = time;\n  }\n\n  setPlayMode(mode: MediaModes) {\n    this.playMode = mode;\n  }\n\n  handlePlay() {\n    this.playAction += 1;\n  }\n\n  setLoop(loop: { start: number, end: number } | null) {\n    if (this.loop !== loop) {\n      if (loop && loop.end - loop.start < 0.02) {\n        this.loop = null;\n      } else {\n        this.loop = loop;\n      }\n    }\n  }\n\n  setIsPlaying(play: boolean) {\n    this.isPlaying = play;\n  }\n}\n\nexport default AtlasStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}