{"ast":null,"code":"import { Point, Text, BitmapText, Polygon } from 'pixi.js';\nimport Flatten from '@flatten-js/core';\nimport { cloneDeep } from 'lodash';\nimport Shape, { EventAction } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\n/**\n * Line shape\n * @class\n */\nexport default class Line extends Shape {\n  /**\n   * get points\n   * @getter\n   */\n  get points() {\n    return this._points.map(p => ({\n      x: p.x,\n      y: p.y,\n      ...(p.userData && {\n        userData: p.userData\n      })\n    }));\n  }\n\n  /**\n   * set points\n   * @setter\n   */\n  set points(points) {\n    this._points = points.map(p => ({\n      x: p.x,\n      y: p.y,\n      userData: cloneDeep(p.userData)\n    }));\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this._points[0].x, this._points[0].y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point) {\n    const offsetX = point.x - this._points[0].x;\n    const offsetY = point.y - this._points[0].y;\n    this._points.forEach(p => {\n      p.x = precise(p.x + offsetX);\n      p.y = precise(p.y + offsetY);\n    });\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const linePoints = this.points;\n    const left = Math.min(...linePoints.map(p => p.x));\n    const right = Math.max(...linePoints.map(p => p.x));\n    const top = Math.min(...linePoints.map(p => p.y));\n    const bottom = Math.max(...linePoints.map(p => p.y));\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  /**\n   * set styles for point\n   */\n\n  constructor(options) {\n    super(options);\n    this.shapeType = ShapeType.LINE;\n    /**\n     * line points\n     * @protected\n     */\n    this._points = [];\n    /**\n     * default line edges count\n     * @private\n     */\n    this._defaultEdges = void 0;\n    /**\n     * indicate next point when creating\n     * @protected\n     */\n    this._nextPoint = null;\n    /**\n     * line geometory data (line array)\n     */\n    this._geometory = [];\n    /**\n     * index of lines when snapped\n     */\n    this._snappingIndex = -1;\n    /**\n     * is key v down\n     */\n    this._vKeyDown = false;\n    /**\n     * is key h down\n     */\n    this._hKeyDown = false;\n    this.pointStyler = void 0;\n    /**\n     * set styles for edge\n     */\n    this.edgeStyler = void 0;\n    /**\n     * mouse move listener when creating\n     * @private\n     * @param event\n     */\n    this._mouseMove = event => {\n      let localPoint = this.globalSnappingPoint;\n      if (!localPoint) {\n        const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n        localPoint = this._mapStageToLocalPosition(point);\n      }\n      this._nextPoint = this._straighten(this._keepPointInBounds(localPoint), this._points[this._points.length - 1]);\n      this.drawShape();\n    };\n    /**\n     * mouse up listener when creating\n     * @private\n     * @param event\n     */\n    this._mouseUp = event => {\n      if (event.button === 2) {\n        return;\n      }\n      let localPoint = this.globalSnappingPoint;\n      if (!localPoint) {\n        const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n        localPoint = this._mapStageToLocalPosition(point);\n      }\n      this.addPoint(this._straighten(this._keepPointInBounds(localPoint), this._points[this._points.length - 1]));\n      // auto finish\n      if (this._defaultEdges !== undefined && this._points.length > this._defaultEdges) {\n        this.finishCreate();\n      }\n    };\n    /**\n     * finish by double clicking\n     * @private\n     */\n    this._finishByDoubleClick = () => {\n      this.finishCreate();\n    };\n    /**\n     * key down handler\n     * @private\n     * @param e\n     */\n    this._keyDown = e => {\n      switch (e.key.toLowerCase()) {\n        case 'q':\n          if (!this._finished) {\n            e.preventDefault();\n            this.removePoint(this.points.length - 1);\n          }\n          break;\n        case 'enter':\n          if (!this._finished) {\n            e.preventDefault();\n            this.finishCreate();\n          }\n          break;\n        case 'v':\n          // e.preventDefault();\n          this._vKeyDown = true;\n          break;\n        case 'h':\n          // e.preventDefault();\n          this._hKeyDown = true;\n          break;\n        default:\n          break;\n      }\n    };\n    /**\n     * key up handler\n     */\n    this._keyUp = () => {\n      this._vKeyDown = false;\n      this._hKeyDown = false;\n    };\n    /**\n     * finish create\n     */\n    this.finishCreate = () => {\n      this.normalize();\n      this._finish();\n      this._removeListeners();\n    };\n    const {\n      points,\n      defaultEdges,\n      pointStyler,\n      edgeStyler\n    } = options;\n    this._defaultEdges = defaultEdges;\n    this.pointStyler = pointStyler;\n    this.edgeStyler = edgeStyler;\n    if (Array.isArray(points) && points.every(p => p.x !== undefined && p.y !== undefined)) {\n      this.points = points;\n    }\n    document.addEventListener('keydown', this._keyDown, false);\n    document.addEventListener('keyup', this._keyUp, false);\n  }\n\n  /**\n   * get point style\n   * @param pointIndex\n   */\n  getPointStyle(pointIndex) {\n    let color = this.displayVertexColor;\n    let type = this.vertexType;\n    if (this.pointStyler) {\n      const {\n        userData\n      } = this._points[pointIndex];\n      const styles = this.pointStyler(pointIndex, userData, this);\n      if (styles.color) {\n        color = styles.color;\n      }\n      if (styles.type) {\n        type = styles.type;\n      }\n    }\n    return {\n      color,\n      type\n    };\n  }\n\n  /**\n   * get edge style\n   * @param pointIndex\n   */\n  getEdgeStyle(pointIndex) {\n    let color = this.displayBorderColor;\n    let type = this.borderType;\n    let bold = this.borderBold;\n    if (this.edgeStyler) {\n      const {\n        userData\n      } = this._points[pointIndex];\n      const styles = this.edgeStyler(pointIndex, userData, this);\n      if (styles.color && !this.selected && !this.hovered) {\n        color = styles.color;\n      }\n      if (styles.type) {\n        type = styles.type;\n      }\n      if (styles.bold) {\n        bold = true;\n      }\n    }\n    return {\n      color,\n      type,\n      bold\n    };\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeLine();\n    this._drawShapeVertex();\n    this._drawSnappingPoint();\n    this.drawPointUserData();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n      this.updateHitArea();\n    }\n  }\n\n  /**\n   * draw shape border\n   * @protected\n   */\n  _drawShapeLine() {\n    if (this._points.length <= 0) {\n      return;\n    }\n    const baseWidth = this.borderWidth / this.scale;\n    const boldWidth = baseWidth * 4;\n    this.instance.moveTo(this._points[0].x, this._points[0].y);\n    this._points.slice(1).forEach((point, i) => {\n      const {\n        color,\n        type,\n        bold\n      } = this.getEdgeStyle(i);\n      this.instance.lineStyle(bold ? boldWidth : baseWidth, color, this.borderAlpha);\n      this.instance.drawLine(point.x, point.y, this.borderStyle, type);\n    });\n    if (!this._finished && this._nextPoint) {\n      const {\n        color,\n        type,\n        bold\n      } = this.getEdgeStyle(this._points.length - 1);\n      this.instance.lineStyle(bold ? boldWidth : baseWidth, color, this.borderAlpha);\n      this.instance.drawLine(this._nextPoint.x, this._nextPoint.y, this.borderStyle, type);\n    }\n  }\n\n  /**\n   * draw shape vertexes\n   * @protected\n   */\n  _drawShapeVertex() {\n    this.vertexesContainer.removeChildren();\n    if (!this.showVertex && !this.showVertexOrder) {\n      return;\n    }\n    const r = this.vertexSize / this.scale;\n    const offset = this.showVertex ? r : 4 / this.scale;\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this._points.forEach((point, index) => {\n      if (this.showVertex && (!this.editable || !this.selected)) {\n        // draw vertex dot\n        const {\n          color,\n          type\n        } = this.getPointStyle(index);\n        this.instance.beginFill(color, this.borderAlpha);\n        this.instance.drawVertex(point.x, point.y, r, type);\n        this.instance.endFill();\n      }\n      if (this.showVertexOrder) {\n        // draw vertext order\n        const text = new BitmapText(`${this.vertexStart + index} `, {\n          fontName: 'ALPHA_NUMERIC'\n        });\n        text.scale.set(1 / this.scale);\n        text.position.set(point.x + offset, point.y + offset);\n        this.vertexesContainer.addChild(text);\n      }\n    });\n  }\n\n  /**\n   * draw snapping point\n   */\n  _drawSnappingPoint() {\n    if (this._snappingPoint) {\n      this.instance.beginFill(this.selectedColor);\n      this.instance.drawCircle(this._snappingPoint.x, this._snappingPoint.y, 3 / this.scale);\n      this.instance.endFill();\n    }\n  }\n\n  /**\n   * draw point user data\n   */\n  drawPointUserData() {\n    this.userDataContainer.removeChildren();\n    let offsetX = 4 / this.scale; // default use 4 as offset\n    let offsetY = 4 / this.scale;\n    if (this.showVertex) {\n      const r = this.vertexSize / this.scale;\n      offsetX = r;\n      offsetY = r;\n    }\n    if (this.showVertexOrder) {\n      offsetY += 14 / this.scale;\n    }\n    this.points.forEach(point => {\n      if (point.userData && Object.keys(point.userData).length > 0) {\n        const x = point.x + offsetX;\n        const y = point.y + offsetY;\n        const text = new Text(this.userDataFormatter ? this.userDataFormatter(point.userData) : Object.keys(point.userData).map(key => `${key}: ${point.userData[key]}`).join(', '), {\n          fontSize: 12,\n          lineHeight: 14,\n          fill: '#FFFFFF',\n          dropShadow: true,\n          dropShadowAlpha: 0.8,\n          dropShadowBlur: 2,\n          dropShadowDistance: 1\n        });\n        text.scale.set(1 / this.scale);\n        text.position.set(x, y);\n        this.userDataContainer.addChild(text);\n      }\n    });\n  }\n\n  /**\n   * create by click to add point\n   * @param point\n   */\n  create() {\n    document.addEventListener('mousemove', this._mouseMove, false);\n    document.addEventListener('mouseup', this._mouseUp, false);\n    this.app.view.addEventListener('dblclick', this._finishByDoubleClick, false);\n    this._finished = false;\n    this._nextPoint = null;\n  }\n  /**\n   * remove all listeners\n   * @private\n   */\n  _removeListeners() {\n    document.removeEventListener('mousemove', this._mouseMove, false);\n    document.removeEventListener('mouseup', this._mouseUp, false);\n    this.app.view.removeEventListener('dblclick', this._finishByDoubleClick, false);\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    const sorted = [...this._points].sort((a, b) => {\n      if (a.y === b.y) return a.x - b.x;\n      return a.y - b.y;\n    });\n    return new Point(sorted[0].x, sorted[0].y);\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      points: this.points\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const hitArea = this.instance.hitArea;\n    const points = [];\n    for (let i = 0; i < hitArea.points.length - 1; i += 2) {\n      const point = [hitArea.points[i], hitArea.points[i + 1]];\n      points.push(point);\n    }\n    return [[[...points]]];\n  }\n\n  /**\n   * delete selected points\n   */\n  deleteSelectedPoints() {\n    if (this.selected) {\n      const deletedIndexes = [];\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          deletedIndexes.push(i);\n          c.selected = false;\n        }\n      });\n      if (deletedIndexes.length > 0) {\n        this._points = this._points.filter((_, i) => !deletedIndexes.includes(i));\n        this.normalize();\n        this._changed();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const {\n      x,\n      y\n    } = point;\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n\n    // points\n    let nearestPoint;\n    let d;\n    this.points.forEach(p => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    for (let i = 0; i < this._geometory.length; i += 1) {\n      const [distance, segment] = this._geometory[i].distanceTo(location);\n      if (distance < t) {\n        const {\n          ps,\n          pe\n        } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * snap to line edges\n   */\n  snap(event) {\n    if (event.data.originalEvent.altKey) {\n      const point = event.data.getLocalPosition(this.container);\n      const location = new Flatten.Point(point.x, point.y);\n      for (let i = 0; i < this._geometory.length; i += 1) {\n        const [distance, segment] = this._geometory[i].distanceTo(location);\n        if (distance < 8 / this.scale) {\n          const {\n            ps,\n            pe\n          } = segment;\n          const edgePoint = ps.equalTo(location) ? pe : ps;\n          this._snappingPoint = new Point(edgePoint.x, edgePoint.y);\n          this._snappingIndex = i;\n          this.drawShape();\n          return true;\n        }\n      }\n    }\n    if (this._snappingPoint) {\n      this._snappingPoint = null;\n      this._snappingIndex = -1;\n      this.drawShape();\n    }\n    return false;\n  }\n\n  /**\n   * add snapping point to shape\n   */\n  addSnappingPointToShape() {\n    if (this._snappingPoint && this._snappingIndex >= 0) {\n      this._points.splice(this._snappingIndex + 1, 0, {\n        x: this._snappingPoint.x,\n        y: this._snappingPoint.y\n      });\n      this._snappingPoint = null;\n      this._snappingIndex = -1;\n      this._controls.forEach(c => {\n        c.selected = false;\n      });\n      this.normalize();\n      this._changed();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n    [...this._points].forEach((point, index) => {\n      if (this.selected || this.hovered && this.showVertex) {\n        const {\n          color: fillColor,\n          type\n        } = this.getPointStyle(index);\n\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.displayBorderColor,\n            fillColor,\n            type,\n            cursor: Cursor.POINTER,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n            onClick: () => this._updatePointSelectedStatus(index)\n          });\n        }\n\n        // update\n        this._controls[index].fillColor = fillColor;\n        this._controls[index].type = type;\n        this._controls[index].color = this.displayBorderColor;\n        this._controls[index].size = this.selected ? 4 : this.vertexSize;\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].selected = false;\n        this._controls[index].remove();\n      }\n    });\n    if (this._controls.length > this._points.length) {\n      // remove redundant control points\n      this._controls.slice(this._points.length).forEach(c => {\n        c.remove();\n      });\n      this._controls = this._controls.slice(0, this._points.length);\n    }\n  }\n\n  /**\n   * update line point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  _updateByPointPosition(index, x, y) {\n    let position = this._keepPointInBounds(this.globalSnappingPoint || new Point(x, y));\n    if (index > 0) {\n      position = this._straighten(position, this._points[index - 1]);\n    }\n    const deltaX = position.x - this._points[index].x;\n    const deltaY = position.y - this._points[index].y;\n    this.updateSelectedPointsPosistion(deltaX, deltaY);\n    this._resizing({\n      deltaX,\n      deltaY\n    });\n  }\n\n  /**\n   * update selected points position\n   * @param deltaX\n   * @param deltaY\n   */\n  updateSelectedPointsPosistion(deltaX, deltaY) {\n    // move together\n    this._controls.forEach((c, i) => {\n      if (c.selected) {\n        const position = this._keepPointInBounds(new Point(this._points[i].x + deltaX, this._points[i].y + deltaY));\n        this._points[i].x = position.x;\n        this._points[i].y = position.y;\n      }\n    });\n    this.drawShape();\n  }\n\n  /**\n   * update selected point\n   * @private\n   * @param index\n   */\n  _updatePointSelectedStatus(index) {\n    if (!this._controls[index].selected) {\n      this._emit(EventAction.VERTEX_SELECTED, index);\n      this._controls.forEach((c, i) => {\n        if (i === index) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * add a point\n   * @param point\n   * @param index\n   */\n  addPoint(point, index) {\n    const pIndex = index === undefined ? this._points.length : index;\n    this._points.splice(pIndex, 0, {\n      x: precise(point.x),\n      y: precise(point.y)\n    });\n    this.drawShape();\n  }\n\n  /**\n   * remove a point\n   * @param index\n   */\n  removePoint(index) {\n    if (index >= 0 && index < this._points.length) {\n      this._points.splice(index, 1);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * normalize line shape, remove it if necessary\n   */\n  normalize() {\n    // remove duplicated points\n    const points = [];\n    this._points.forEach((point, index) => {\n      if (index === this._points.length - 1 || point.x !== this._points[index + 1].x || point.y !== this._points[index + 1].y) {\n        points.push(point);\n      }\n    });\n    this._points = points;\n    if (this._points.length < 2) {\n      this._remove();\n      return;\n    }\n    this._points.forEach(p => {\n      p.x = precise(p.x);\n      p.y = precise(p.y);\n    });\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * update geometory\n   */\n  updateGeometory() {\n    const linePoints = this.points;\n    const lines = [];\n    for (let i = 0; i < linePoints.length - 1; i += 1) {\n      const start = linePoints[i];\n      const end = linePoints[i + 1];\n      lines.push({\n        start,\n        end\n      });\n    }\n    this._geometory = this._geometory.slice(0, lines.length);\n    for (let i = 0; i < lines.length; i += 1) {\n      const {\n        start,\n        end\n      } = lines[i];\n      const startPoint = new Flatten.Point(start.x, start.y);\n      const endPoint = new Flatten.Point(end.x, end.y);\n      if (!this._geometory[i]) {\n        this._geometory[i] = new Flatten.Segment(startPoint, endPoint);\n      } else {\n        this._geometory[i].ps = startPoint;\n        this._geometory[i].pe = endPoint;\n      }\n    }\n  }\n\n  /**\n   * update hit area\n   */\n  updateHitArea() {\n    const offset = 5 / this.scale;\n    const linePoints = this.points;\n    const areaPoints = [...linePoints.map(p => new Point(p.x - offset, p.y - offset * 2)), ...linePoints.reverse().map(p => new Point(p.x + offset * 2, p.y + offset))];\n    this.instance.hitArea = new Polygon(areaPoints);\n  }\n\n  /**\n   * shape destroy\n   */\n  destroy() {\n    this._removeListeners();\n    document.removeEventListener('keydown', this._keyDown, false);\n    document.removeEventListener('keyup', this._keyUp, false);\n    // call parent\n    super.destroy();\n  }\n\n  /**\n   * selected points with point index & point instance\n   * @returns\n   */\n  getSelectedPoints() {\n    if (!this._finished) {\n      const lastPointIndex = this._points.length - 1;\n      return [{\n        index: lastPointIndex,\n        point: this._points[lastPointIndex]\n      }];\n    }\n    const selectedPoints = [];\n    const points = [...this.points];\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          selectedPoints.push({\n            index: i,\n            point: points[i]\n          });\n        }\n      });\n    }\n    return selectedPoints;\n  }\n\n  /**\n   * set selected points\n   * @param pointsIndex\n   */\n  setSelectedPoints(pointsIndex) {\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (pointsIndex.includes(i)) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * set points user data\n   * @param pointsData\n   */\n  setPointsUserData(pointsData) {\n    pointsData.forEach(({\n      index,\n      userData\n    }) => {\n      this._points[index].userData = cloneDeep(userData);\n    });\n    this.drawShape();\n    if (this._finished) {\n      this._changed();\n    }\n  }\n\n  /**\n   * straighten line segment\n   * @param type\n   */\n  _straighten(currPoint, lastPoint) {\n    if (!lastPoint) {\n      return currPoint;\n    }\n    if (this._vKeyDown) {\n      currPoint.x = lastPoint.x;\n    } else if (this._hKeyDown) {\n      currPoint.y = lastPoint.y;\n    }\n    return currPoint;\n  }\n}","map":{"version":3,"names":["Point","Text","BitmapText","Polygon","Flatten","cloneDeep","Shape","EventAction","ShapeType","ControlPoint","precise","Cursor","Line","points","_points","map","p","x","y","userData","normalize","position","point","offsetX","offsetY","forEach","updateGeometory","drawShape","shapeBounds","linePoints","left","Math","min","right","max","top","bottom","constructor","options","shapeType","LINE","_defaultEdges","_nextPoint","_geometory","_snappingIndex","_vKeyDown","_hKeyDown","pointStyler","edgeStyler","_mouseMove","event","localPoint","globalSnappingPoint","_mapScreenToStagePosition","clientX","clientY","_mapStageToLocalPosition","_straighten","_keepPointInBounds","length","_mouseUp","button","addPoint","undefined","finishCreate","_finishByDoubleClick","_keyDown","e","key","toLowerCase","_finished","preventDefault","removePoint","_keyUp","_finish","_removeListeners","defaultEdges","Array","isArray","every","document","addEventListener","getPointStyle","pointIndex","color","displayVertexColor","type","vertexType","styles","getEdgeStyle","displayBorderColor","borderType","bold","borderBold","selected","hovered","instance","clear","_drawShapeLine","_drawShapeVertex","_drawSnappingPoint","drawPointUserData","drawShapeLabel","attachControlPoints","updateHitArea","baseWidth","borderWidth","scale","boldWidth","moveTo","slice","i","lineStyle","borderAlpha","drawLine","borderStyle","vertexesContainer","removeChildren","showVertex","showVertexOrder","r","vertexSize","offset","index","editable","beginFill","drawVertex","endFill","text","vertexStart","fontName","set","addChild","_snappingPoint","selectedColor","drawCircle","userDataContainer","Object","keys","userDataFormatter","join","fontSize","lineHeight","fill","dropShadow","dropShadowAlpha","dropShadowBlur","dropShadowDistance","create","app","view","removeEventListener","getLabelPosition","sorted","sort","a","b","getData","getAreaAsGeoJSON","hitArea","push","deleteSelectedPoints","deletedIndexes","_controls","c","filter","_","includes","_changed","snapToPoint","tolerance","t","nearestPoint","d","pointDistance","sqrt","location","distance","segment","distanceTo","ps","pe","edgePoint","equalTo","snap","data","originalEvent","altKey","getLocalPosition","container","addSnappingPointToShape","splice","removeControls","fillColor","controlsContainer","cursor","POINTER","onPositionChange","_updateByPointPosition","onFinish","_finishResize","onClick","_updatePointSelectedStatus","size","add","remove","deltaX","deltaY","updateSelectedPointsPosistion","_resizing","_emit","VERTEX_SELECTED","resizing","pIndex","_remove","lines","start","end","startPoint","endPoint","Segment","areaPoints","reverse","destroy","getSelectedPoints","lastPointIndex","selectedPoints","setSelectedPoints","pointsIndex","setPointsUserData","pointsData","currPoint","lastPoint"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Line.ts"],"sourcesContent":["import { Point, Text, BitmapText, InteractionEvent, Polygon } from 'pixi.js';\nimport Flatten from '@flatten-js/core';\nimport { cloneDeep } from 'lodash';\nimport Shape, { ShapeOptions, EventAction } from './Shape';\nimport { ShapeType, ShapeData, VertexStyles, EdgeStyles } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\n\ninterface IPoint {\n  x: number;\n  y: number;\n  userData?: any;\n}\n\nexport interface LineData {\n  points: IPoint[];\n}\n\nexport interface LineOptions extends ShapeOptions {\n  points?: IPoint[];\n  defaultEdges?: number;\n  pointStyler?: (pointIndex: number, userData: any, shape: Shape<ShapeData>) => VertexStyles;\n  edgeStyler?: (startPointIndex: number, userData: any, shape: Shape<ShapeData>) => EdgeStyles;\n}\n\n/**\n * Line shape\n * @class\n */\nexport default class Line extends Shape<LineData> {\n  shapeType = ShapeType.LINE;\n\n  /**\n   * line points\n   * @protected\n   */\n  protected _points: IPoint[] = [];\n\n  /**\n   * default line edges count\n   * @private\n   */\n  private _defaultEdges?: number;\n\n  /**\n   * indicate next point when creating\n   * @protected\n   */\n  protected _nextPoint: IPoint | null = null;\n\n  /**\n   * line geometory data (line array)\n   */\n  private _geometory: Flatten.Segment[] = [];\n\n  /**\n   * index of lines when snapped\n   */\n  private _snappingIndex = -1;\n\n  /**\n   * is key v down\n   */\n  private _vKeyDown = false;\n\n  /**\n   * is key h down\n   */\n  private _hKeyDown = false;\n\n  /**\n   * get points\n   * @getter\n   */\n  get points() {\n    return this._points.map((p) => ({\n      x: p.x,\n      y: p.y,\n      ...p.userData && { userData: p.userData },\n    }));\n  }\n\n  /**\n   * set points\n   * @setter\n   */\n  set points(points: IPoint[]) {\n    this._points = points.map((p) => ({ x: p.x, y: p.y, userData: cloneDeep(p.userData) }));\n    this.normalize();\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this._points[0].x, this._points[0].y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point: Point) {\n    const offsetX = point.x - this._points[0].x;\n    const offsetY = point.y - this._points[0].y;\n    this._points.forEach((p) => {\n      p.x = precise(p.x + offsetX);\n      p.y = precise(p.y + offsetY);\n    });\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const linePoints = this.points;\n    const left = Math.min(...linePoints.map((p) => p.x));\n    const right = Math.max(...linePoints.map((p) => p.x));\n    const top = Math.min(...linePoints.map((p) => p.y));\n    const bottom = Math.max(...linePoints.map((p) => p.y));\n    return { left, top, right, bottom };\n  }\n\n  /**\n   * set styles for point\n   */\n  pointStyler?: (pointIndex: number, userData: any, shape: Shape<ShapeData>) => VertexStyles;\n\n  /**\n   * set styles for edge\n   */\n  edgeStyler?: (startPointIndex: number, userData: any, shape: Shape<ShapeData>) => EdgeStyles;\n\n  constructor(options: LineOptions) {\n    super(options);\n\n    const { points, defaultEdges, pointStyler, edgeStyler } = options;\n    this._defaultEdges = defaultEdges;\n    this.pointStyler = pointStyler;\n    this.edgeStyler = edgeStyler;\n    if (Array.isArray(points) && points.every((p) => p.x !== undefined && p.y !== undefined)) {\n      this.points = points;\n    }\n\n    document.addEventListener('keydown', this._keyDown, false);\n    document.addEventListener('keyup', this._keyUp, false);\n  }\n\n  /**\n   * get point style\n   * @param pointIndex\n   */\n  getPointStyle(pointIndex: number) {\n    let color = this.displayVertexColor;\n    let type = this.vertexType;\n    if (this.pointStyler) {\n      const { userData } = this._points[pointIndex];\n      const styles = this.pointStyler(pointIndex, userData, this);\n      if (styles.color) {\n        color = styles.color;\n      }\n      if (styles.type) {\n        type = styles.type;\n      }\n    }\n    return { color, type };\n  }\n\n  /**\n   * get edge style\n   * @param pointIndex\n   */\n  getEdgeStyle(pointIndex: number) {\n    let color = this.displayBorderColor;\n    let type = this.borderType;\n    let bold = this.borderBold;\n    if (this.edgeStyler) {\n      const { userData } = this._points[pointIndex];\n      const styles = this.edgeStyler(pointIndex, userData, this);\n      if (styles.color && !this.selected && !this.hovered) {\n        color = styles.color;\n      }\n      if (styles.type) {\n        type = styles.type;\n      }\n      if (styles.bold) {\n        bold = true;\n      }\n    }\n    return { color, type, bold };\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeLine();\n    this._drawShapeVertex();\n    this._drawSnappingPoint();\n    this.drawPointUserData();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n      this.updateHitArea();\n    }\n  }\n\n  /**\n   * draw shape border\n   * @protected\n   */\n  protected _drawShapeLine() {\n    if (this._points.length <= 0) {\n      return;\n    }\n    const baseWidth = this.borderWidth / this.scale;\n    const boldWidth = baseWidth * 4;\n    this.instance.moveTo(this._points[0].x, this._points[0].y);\n    this._points.slice(1).forEach((point, i) => {\n      const { color, type, bold } = this.getEdgeStyle(i);\n      this.instance.lineStyle(bold ? boldWidth : baseWidth, color, this.borderAlpha);\n      this.instance.drawLine(point.x, point.y, this.borderStyle, type);\n    });\n    if (!this._finished && this._nextPoint) {\n      const { color, type, bold } = this.getEdgeStyle(this._points.length - 1);\n      this.instance.lineStyle(bold ? boldWidth : baseWidth, color, this.borderAlpha);\n      this.instance.drawLine(this._nextPoint.x, this._nextPoint.y, this.borderStyle, type);\n    }\n  }\n\n  /**\n   * draw shape vertexes\n   * @protected\n   */\n  protected _drawShapeVertex() {\n    this.vertexesContainer.removeChildren();\n    if (!this.showVertex && !this.showVertexOrder) {\n      return;\n    }\n\n    const r = this.vertexSize / this.scale;\n    const offset = this.showVertex ? r : 4 / this.scale;\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this._points.forEach((point, index) => {\n      if (this.showVertex && (!this.editable || !this.selected)) {\n        // draw vertex dot\n        const { color, type } = this.getPointStyle(index);\n        this.instance.beginFill(color, this.borderAlpha);\n        this.instance.drawVertex(point.x, point.y, r, type);\n        this.instance.endFill();\n      }\n      if (this.showVertexOrder) {\n        // draw vertext order\n        const text = new BitmapText(`${this.vertexStart + index} `, { fontName: 'ALPHA_NUMERIC' });\n        text.scale.set(1 / this.scale);\n        text.position.set(point.x + offset, point.y + offset);\n        this.vertexesContainer.addChild(text);\n      }\n    });\n  }\n\n  /**\n   * draw snapping point\n   */\n  private _drawSnappingPoint() {\n    if (this._snappingPoint) {\n      this.instance.beginFill(this.selectedColor);\n      this.instance.drawCircle(this._snappingPoint.x, this._snappingPoint.y, 3 / this.scale);\n      this.instance.endFill();\n    }\n  }\n\n  /**\n   * draw point user data\n   */\n  drawPointUserData() {\n    this.userDataContainer.removeChildren();\n    let offsetX = 4 / this.scale; // default use 4 as offset\n    let offsetY = 4 / this.scale;\n    if (this.showVertex) {\n      const r = this.vertexSize / this.scale;\n      offsetX = r;\n      offsetY = r;\n    }\n    if (this.showVertexOrder) {\n      offsetY += 14 / this.scale;\n    }\n\n    this.points.forEach((point) => {\n      if (point.userData && Object.keys(point.userData).length > 0) {\n        const x = point.x + offsetX;\n        const y = point.y + offsetY;\n\n        const text = new Text(this.userDataFormatter\n          ? this.userDataFormatter(point.userData)\n          : Object.keys(point.userData).map((key) => `${key}: ${point.userData[key]}`).join(', '), {\n          fontSize: 12,\n          lineHeight: 14,\n          fill: '#FFFFFF',\n          dropShadow: true,\n          dropShadowAlpha: 0.8,\n          dropShadowBlur: 2,\n          dropShadowDistance: 1,\n        });\n        text.scale.set(1 / this.scale);\n        text.position.set(x, y);\n\n        this.userDataContainer.addChild(text);\n      }\n    });\n  }\n\n  /**\n   * create by click to add point\n   * @param point\n   */\n  create() {\n    document.addEventListener('mousemove', this._mouseMove, false);\n    document.addEventListener('mouseup', this._mouseUp, false);\n    this.app.view.addEventListener('dblclick', this._finishByDoubleClick, false);\n\n    this._finished = false;\n    this._nextPoint = null;\n  }\n\n  /**\n   * mouse move listener when creating\n   * @private\n   * @param event\n   */\n  private _mouseMove = (event: MouseEvent) => {\n    let localPoint = this.globalSnappingPoint;\n    if (!localPoint) {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      localPoint = this._mapStageToLocalPosition(point);\n    }\n    this._nextPoint = this._straighten(this._keepPointInBounds(localPoint), this._points[this._points.length - 1]);\n    this.drawShape();\n  };\n\n  /**\n   * mouse up listener when creating\n   * @private\n   * @param event\n   */\n  private _mouseUp = (event: MouseEvent) => {\n    if (event.button === 2) {\n      return;\n    }\n    let localPoint = this.globalSnappingPoint;\n    if (!localPoint) {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      localPoint = this._mapStageToLocalPosition(point);\n    }\n    this.addPoint(this._straighten(this._keepPointInBounds(localPoint), this._points[this._points.length - 1]));\n    // auto finish\n    if (this._defaultEdges !== undefined && this._points.length > this._defaultEdges) {\n      this.finishCreate();\n    }\n  };\n\n  /**\n   * finish by double clicking\n   * @private\n   */\n  private _finishByDoubleClick = () => {\n    this.finishCreate();\n  };\n\n  /**\n   * key down handler\n   * @private\n   * @param e\n   */\n  private _keyDown = (e: KeyboardEvent) => {\n    switch (e.key.toLowerCase()) {\n      case 'q':\n        if (!this._finished) {\n          e.preventDefault();\n          this.removePoint(this.points.length - 1);\n        }\n        break;\n      case 'enter':\n        if (!this._finished) {\n          e.preventDefault();\n          this.finishCreate();\n        }\n        break;\n      case 'v':\n        // e.preventDefault();\n        this._vKeyDown = true;\n        break;\n      case 'h':\n        // e.preventDefault();\n        this._hKeyDown = true;\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * key up handler\n   */\n  private _keyUp = () => {\n    this._vKeyDown = false;\n    this._hKeyDown = false;\n  };\n\n  /**\n   * finish create\n   */\n  finishCreate = () => {\n    this.normalize();\n    this._finish();\n    this._removeListeners();\n  };\n\n  /**\n   * remove all listeners\n   * @private\n   */\n  private _removeListeners() {\n    document.removeEventListener('mousemove', this._mouseMove, false);\n    document.removeEventListener('mouseup', this._mouseUp, false);\n    this.app.view.removeEventListener('dblclick', this._finishByDoubleClick, false);\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    const sorted = [...this._points].sort((a, b) => {\n      if (a.y === b.y) return a.x - b.x;\n      return a.y - b.y;\n    });\n    return new Point(sorted[0].x, sorted[0].y);\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      points: this.points,\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const hitArea = this.instance.hitArea as Polygon;\n    const points: [number, number][] = [];\n    for (let i = 0; i < hitArea.points.length - 1; i += 2) {\n      const point = [hitArea.points[i], hitArea.points[i + 1]] as [number, number];\n      points.push(point);\n    }\n    return [[[...points]]];\n  }\n\n  /**\n   * delete selected points\n   */\n  deleteSelectedPoints() {\n    if (this.selected) {\n      const deletedIndexes: number[] = [];\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          deletedIndexes.push(i);\n          c.selected = false;\n        }\n      });\n      if (deletedIndexes.length > 0) {\n        this._points = this._points.filter((_, i) => !deletedIndexes.includes(i));\n        this.normalize();\n        this._changed();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point: Point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const { x, y } = point;\n    const { left, right, top, bottom } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n\n    // points\n    let nearestPoint: IPoint | undefined;\n    let d: number | undefined;\n    this.points.forEach((p) => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    for (let i = 0; i < this._geometory.length; i += 1) {\n      const [distance, segment] = this._geometory[i].distanceTo(location);\n      if (distance < t) {\n        const { ps, pe } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * snap to line edges\n   */\n  snap(event: InteractionEvent) {\n    if (event.data.originalEvent.altKey) {\n      const point = event.data.getLocalPosition(this.container);\n      const location = new Flatten.Point(point.x, point.y);\n      for (let i = 0; i < this._geometory.length; i += 1) {\n        const [distance, segment] = this._geometory[i].distanceTo(location);\n        if (distance < 8 / this.scale) {\n          const { ps, pe } = segment;\n          const edgePoint = ps.equalTo(location) ? pe : ps;\n          this._snappingPoint = new Point(edgePoint.x, edgePoint.y);\n          this._snappingIndex = i;\n          this.drawShape();\n          return true;\n        }\n      }\n    }\n\n    if (this._snappingPoint) {\n      this._snappingPoint = null;\n      this._snappingIndex = -1;\n      this.drawShape();\n    }\n    return false;\n  }\n\n  /**\n   * add snapping point to shape\n   */\n  addSnappingPointToShape() {\n    if (this._snappingPoint && this._snappingIndex >= 0) {\n      this._points.splice(this._snappingIndex + 1, 0, { x: this._snappingPoint.x, y: this._snappingPoint.y });\n      this._snappingPoint = null;\n      this._snappingIndex = -1;\n      this._controls.forEach((c) => {\n        c.selected = false;\n      });\n      this.normalize();\n      this._changed();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    [...this._points].forEach((point, index) => {\n      if (this.selected || (this.hovered && this.showVertex)) {\n        const { color: fillColor, type } = this.getPointStyle(index);\n\n        // create if never created before\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.displayBorderColor,\n            fillColor,\n            type,\n            cursor: Cursor.POINTER,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n            onClick: () => this._updatePointSelectedStatus(index),\n          });\n        }\n\n        // update\n        (this._controls[index] as ControlPoint).fillColor = fillColor;\n        (this._controls[index] as ControlPoint).type = type;\n        this._controls[index].color = this.displayBorderColor;\n        this._controls[index].size = this.selected ? 4 : this.vertexSize;\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].selected = false;\n        this._controls[index].remove();\n      }\n    });\n    if (this._controls.length > this._points.length) {\n      // remove redundant control points\n      this._controls.slice(this._points.length).forEach((c) => {\n        c.remove();\n      });\n      this._controls = this._controls.slice(0, this._points.length);\n    }\n  }\n\n  /**\n   * update line point\n   * @private\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  private _updateByPointPosition(index: number, x: number, y: number) {\n    let position = this._keepPointInBounds(this.globalSnappingPoint || new Point(x, y));\n    if (index > 0) {\n      position = this._straighten(position, this._points[index - 1]);\n    }\n    const deltaX = position.x - this._points[index].x;\n    const deltaY = position.y - this._points[index].y;\n    this.updateSelectedPointsPosistion(deltaX, deltaY);\n    this._resizing({ deltaX, deltaY });\n  }\n\n  /**\n   * update selected points position\n   * @param deltaX\n   * @param deltaY\n   */\n  updateSelectedPointsPosistion(deltaX: number, deltaY: number) {\n    // move together\n    this._controls.forEach((c, i) => {\n      if (c.selected) {\n        const position = this._keepPointInBounds(new Point(this._points[i].x + deltaX, this._points[i].y + deltaY));\n        this._points[i].x = position.x;\n        this._points[i].y = position.y;\n      }\n    });\n    this.drawShape();\n  }\n\n  /**\n   * update selected point\n   * @private\n   * @param index\n   */\n  private _updatePointSelectedStatus(index: number) {\n    if (!this._controls[index].selected) {\n      this._emit(EventAction.VERTEX_SELECTED, index);\n      this._controls.forEach((c, i) => {\n        if (i === index) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * when finish resize\n   */\n  private _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * add a point\n   * @param point\n   * @param index\n   */\n  addPoint(point: IPoint | Point, index?: number) {\n    const pIndex = index === undefined ? this._points.length : index;\n    this._points.splice(pIndex, 0, { x: precise(point.x), y: precise(point.y) });\n    this.drawShape();\n  }\n\n  /**\n   * remove a point\n   * @param index\n   */\n  removePoint(index: number) {\n    if (index >= 0 && index < this._points.length) {\n      this._points.splice(index, 1);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * normalize line shape, remove it if necessary\n   */\n  normalize() {\n    // remove duplicated points\n    const points: IPoint[] = [];\n    this._points.forEach((point, index) => {\n      if (index === this._points.length - 1 || point.x !== this._points[index + 1].x || point.y !== this._points[index + 1].y) {\n        points.push(point);\n      }\n    });\n    this._points = points;\n\n    if (this._points.length < 2) {\n      this._remove();\n      return;\n    }\n\n    this._points.forEach((p) => {\n      p.x = precise(p.x);\n      p.y = precise(p.y);\n    });\n\n    this.updateGeometory();\n    this.drawShape();\n  }\n\n  /**\n   * update geometory\n   */\n  updateGeometory() {\n    const linePoints = this.points;\n    const lines = [];\n    for (let i = 0; i < linePoints.length - 1; i += 1) {\n      const start = linePoints[i];\n      const end = linePoints[i + 1];\n      lines.push({ start, end });\n    }\n    this._geometory = this._geometory.slice(0, lines.length);\n    for (let i = 0; i < lines.length; i += 1) {\n      const { start, end } = lines[i];\n      const startPoint = new Flatten.Point(start.x, start.y);\n      const endPoint = new Flatten.Point(end.x, end.y);\n      if (!this._geometory[i]) {\n        this._geometory[i] = new Flatten.Segment(startPoint, endPoint);\n      } else {\n        this._geometory[i].ps = startPoint;\n        this._geometory[i].pe = endPoint;\n      }\n    }\n  }\n\n  /**\n   * update hit area\n   */\n  updateHitArea() {\n    const offset = 5 / this.scale;\n    const linePoints = this.points;\n    const areaPoints = [\n      ...linePoints.map((p) => new Point(p.x - offset, p.y - offset * 2)),\n      ...linePoints.reverse().map((p) => new Point(p.x + offset * 2, p.y + offset)),\n    ];\n    this.instance.hitArea = new Polygon(areaPoints);\n  }\n\n  /**\n   * shape destroy\n   */\n  destroy() {\n    this._removeListeners();\n    document.removeEventListener('keydown', this._keyDown, false);\n    document.removeEventListener('keyup', this._keyUp, false);\n    // call parent\n    super.destroy();\n  }\n\n  /**\n   * selected points with point index & point instance\n   * @returns\n   */\n  getSelectedPoints() {\n    if (!this._finished) {\n      const lastPointIndex = this._points.length - 1;\n      return [{ index: lastPointIndex, point: this._points[lastPointIndex] }];\n    }\n    const selectedPoints: {index: number; point: IPoint}[] = [];\n    const points = [...this.points];\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (c.selected) {\n          selectedPoints.push({\n            index: i,\n            point: points[i],\n          });\n        }\n      });\n    }\n    return selectedPoints;\n  }\n\n  /**\n   * set selected points\n   * @param pointsIndex\n   */\n  setSelectedPoints(pointsIndex: number[]) {\n    if (this.selected) {\n      this._controls.forEach((c, i) => {\n        if (pointsIndex.includes(i)) {\n          c.selected = true;\n        } else {\n          c.selected = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * set points user data\n   * @param pointsData\n   */\n  setPointsUserData(pointsData: {index: number; userData: any}[]) {\n    pointsData.forEach(({ index, userData }) => {\n      this._points[index].userData = cloneDeep(userData);\n    });\n    this.drawShape();\n    if (this._finished) {\n      this._changed();\n    }\n  }\n\n  /**\n   * straighten line segment\n   * @param type\n   */\n  private _straighten(currPoint: Point, lastPoint?: IPoint) {\n    if (!lastPoint) {\n      return currPoint;\n    }\n    if (this._vKeyDown) {\n      currPoint.x = lastPoint.x;\n    } else if (this._hKeyDown) {\n      currPoint.y = lastPoint.y;\n    }\n    return currPoint;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}