{"ast":null,"code":"import{isConnection,isInsertion,isLabel}from'../store/tag_mode';class TagInfoMap{constructor(){this.labels={};this.insertions={};this.connections={};}reciveInfo(json){this.labels=JSON.parse(json.labels);this.insertions=JSON.parse(json.insertions);this.connections=JSON.parse(json.connections);return this;}getItem(id,type){const{labels,connections,insertions}=this;if(isLabel(type))return labels[id];if(isConnection(type))return connections[id];if(isInsertion(type))return insertions[id];return undefined;}setItem(id,item){const{labels,connections,insertions}=this;if(isLabel(item.type)){labels[id]=item;}if(isConnection(item.type)){connections[id]=item;}if(isInsertion(item.type)){insertions[id]=item;}}getMap(){return{labels:JSON.stringify(this.labels),connections:JSON.stringify(this.connections),insertions:JSON.stringify(this.insertions)};}clone(){return new TagInfoMap().reciveInfo(this.getMap());}}export default TagInfoMap;","map":{"version":3,"names":["isConnection","isInsertion","isLabel","TagInfoMap","constructor","labels","insertions","connections","reciveInfo","json","JSON","parse","getItem","id","type","undefined","setItem","item","getMap","stringify","clone"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/utils/TagInfoMap.js"],"sourcesContent":["import { isConnection, isInsertion, isLabel } from '../store/tag_mode';\n\nclass TagInfoMap {\n  constructor() {\n    this.labels = {};\n    this.insertions = {};\n    this.connections = {};\n  }\n\n  reciveInfo(json) {\n    this.labels = JSON.parse(json.labels);\n    this.insertions = JSON.parse(json.insertions);\n    this.connections = JSON.parse(json.connections);\n    return this;\n  }\n\n  getItem(id, type) {\n    const { labels, connections, insertions } = this;\n    if (isLabel(type)) return labels[id];\n    if (isConnection(type)) return connections[id];\n    if (isInsertion(type)) return insertions[id];\n    return undefined;\n  }\n\n  setItem(id, item) {\n    const { labels, connections, insertions } = this;\n    if (isLabel(item.type)) {\n      labels[id] = item;\n    }\n    if (isConnection(item.type)) {\n      connections[id] = item;\n    }\n    if (isInsertion(item.type)) {\n      insertions[id] = item;\n    }\n  }\n\n  getMap() {\n    return {\n      labels: JSON.stringify(this.labels),\n      connections: JSON.stringify(this.connections),\n      insertions: JSON.stringify(this.insertions),\n    };\n  }\n\n  clone() {\n    return new TagInfoMap().reciveInfo(this.getMap());\n  }\n}\n\nexport default TagInfoMap;\n"],"mappings":"AAAA,OAASA,YAAY,CAAEC,WAAW,CAAEC,OAAO,KAAQ,mBAAmB,CAEtE,KAAM,CAAAC,UAAW,CACfC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,MAAM,CAAG,CAAC,CAAC,CAChB,IAAI,CAACC,UAAU,CAAG,CAAC,CAAC,CACpB,IAAI,CAACC,WAAW,CAAG,CAAC,CAAC,CACvB,CAEAC,UAAUA,CAACC,IAAI,CAAE,CACf,IAAI,CAACJ,MAAM,CAAGK,IAAI,CAACC,KAAK,CAACF,IAAI,CAACJ,MAAM,CAAC,CACrC,IAAI,CAACC,UAAU,CAAGI,IAAI,CAACC,KAAK,CAACF,IAAI,CAACH,UAAU,CAAC,CAC7C,IAAI,CAACC,WAAW,CAAGG,IAAI,CAACC,KAAK,CAACF,IAAI,CAACF,WAAW,CAAC,CAC/C,MAAO,KAAI,CACb,CAEAK,OAAOA,CAACC,EAAE,CAAEC,IAAI,CAAE,CAChB,KAAM,CAAET,MAAM,CAAEE,WAAW,CAAED,UAAW,CAAC,CAAG,IAAI,CAChD,GAAIJ,OAAO,CAACY,IAAI,CAAC,CAAE,MAAO,CAAAT,MAAM,CAACQ,EAAE,CAAC,CACpC,GAAIb,YAAY,CAACc,IAAI,CAAC,CAAE,MAAO,CAAAP,WAAW,CAACM,EAAE,CAAC,CAC9C,GAAIZ,WAAW,CAACa,IAAI,CAAC,CAAE,MAAO,CAAAR,UAAU,CAACO,EAAE,CAAC,CAC5C,MAAO,CAAAE,SAAS,CAClB,CAEAC,OAAOA,CAACH,EAAE,CAAEI,IAAI,CAAE,CAChB,KAAM,CAAEZ,MAAM,CAAEE,WAAW,CAAED,UAAW,CAAC,CAAG,IAAI,CAChD,GAAIJ,OAAO,CAACe,IAAI,CAACH,IAAI,CAAC,CAAE,CACtBT,MAAM,CAACQ,EAAE,CAAC,CAAGI,IAAI,CACnB,CACA,GAAIjB,YAAY,CAACiB,IAAI,CAACH,IAAI,CAAC,CAAE,CAC3BP,WAAW,CAACM,EAAE,CAAC,CAAGI,IAAI,CACxB,CACA,GAAIhB,WAAW,CAACgB,IAAI,CAACH,IAAI,CAAC,CAAE,CAC1BR,UAAU,CAACO,EAAE,CAAC,CAAGI,IAAI,CACvB,CACF,CAEAC,MAAMA,CAAA,CAAG,CACP,MAAO,CACLb,MAAM,CAAEK,IAAI,CAACS,SAAS,CAAC,IAAI,CAACd,MAAM,CAAC,CACnCE,WAAW,CAAEG,IAAI,CAACS,SAAS,CAAC,IAAI,CAACZ,WAAW,CAAC,CAC7CD,UAAU,CAAEI,IAAI,CAACS,SAAS,CAAC,IAAI,CAACb,UAAU,CAC5C,CAAC,CACH,CAEAc,KAAKA,CAAA,CAAG,CACN,MAAO,IAAI,CAAAjB,UAAU,CAAC,CAAC,CAACK,UAAU,CAAC,IAAI,CAACU,MAAM,CAAC,CAAC,CAAC,CACnD,CACF,CAEA,cAAe,CAAAf,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}