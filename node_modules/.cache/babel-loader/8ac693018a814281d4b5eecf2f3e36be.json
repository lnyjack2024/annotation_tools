{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/frames/FrameControl.tsx\";\nimport React from 'react';\nimport { makeObservable, observable, computed, action, reaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { Slider, Popover } from 'antd';\nimport { GlobalOutlined, CheckOutlined } from '@ant-design/icons';\nimport cx from 'classnames';\nimport hexToRgba from 'hex-to-rgba';\nimport { cloneDeep } from 'lodash';\nimport FrameActions from './FrameActions';\nimport ItemLabel, { frameLabelHeight } from './ItemLabel';\nimport AttributeTip from './AttributeTip';\nimport AttributeForm from './AttributeForm';\nimport FramesRenderer, { EventAction, FrameItemType } from '../../../../libs/FramesRenderer';\nimport ResizableBox, { ResizableEdge } from '../../../common/resizable-box/ResizableBox';\nimport { Filter, Minus, Plus } from '../../../common/icons';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport cache, { CacheKey } from '../../utils-storage';\nimport { getFieldDisplayLabel, getReferenceImageUrl } from '../../../../utils/form';\nimport { setInitialValues } from '../../utils';\nimport { ReviewResult } from '../../types';\nimport './FrameControl.scss';\nimport ItemFrameLabel from './ItemFrameLabel';\nconst itemKeySeparator = '|S|';\nconst attrItemPrefix = 'ATTR-ITEM-PREFIX';\nconst attrFramePrefix = 'ATTR-FRAME-PREFIX';\nconst defaultFrameColor = '#5C5F6B';\nconst actionsContainerHeight = 40;\nconst defaultFramesHeight = 64;\nconst attributesFramesHeight = 319;\nfunction getRGBAColor(category, alpha = 0.2) {\n  const {\n    displayColor\n  } = store.ontology.getCategory(category) || {};\n  if (displayColor) {\n    return hexToRgba(displayColor, alpha);\n  }\n  return defaultFrameColor;\n}\nfunction getFrameColor(instanceItem, camera) {\n  const frameColor = {};\n  const cameraData = instanceItem.cameras[camera];\n  if (cameraData) {\n    Object.values(cameraData.frames).forEach(({\n      frameIndex\n    }) => {\n      const result = store.review.getReviewForInstanceItem(instanceItem, camera, frameIndex);\n      if (result) {\n        if (result === ReviewResult.REJECT) {\n          frameColor[frameIndex] = '#9C4434';\n        } else if (!store.isRework) {\n          if (result === ReviewResult.APPROVE) {\n            frameColor[frameIndex] = '#3E6F45';\n          } else if (result === ReviewResult.SUSPEND) {\n            frameColor[frameIndex] = '#A28900';\n          }\n        }\n      }\n    });\n  }\n  return frameColor;\n}\n;\nfunction hash(attributes) {\n  if (!attributes) {\n    return '';\n  }\n  if (typeof attributes !== 'object') {\n    return `${attributes}`;\n  }\n  const allKeys = Object.keys(attributes).sort();\n  let str = '';\n  for (let i = 0; i < allKeys.length; i += 1) {\n    const value = attributes[allKeys[i]];\n    if (value !== undefined && value !== null) {\n      str += `${value}`;\n    }\n  }\n  return str;\n}\nvar FramesMode = /*#__PURE__*/function (FramesMode) {\n  FramesMode[\"DEFAULT\"] = \"default\";\n  FramesMode[\"ALL\"] = \"all\";\n  FramesMode[\"ATTR\"] = \"attributes\";\n  FramesMode[\"FRAME_ATTR\"] = \"attributes_frame\";\n  return FramesMode;\n}(FramesMode || {});\nvar AttrKeys = /*#__PURE__*/function (AttrKeys) {\n  AttrKeys[\"INSTANCE\"] = \"instance\";\n  AttrKeys[\"INSTANCE_DYNAMIC\"] = \"instanceDynamic\";\n  AttrKeys[\"ITEM\"] = \"item\";\n  AttrKeys[\"CAMERA_ITEM\"] = \"cameraItem\";\n  AttrKeys[\"FRAME_ITEM\"] = \"frameItem\";\n  AttrKeys[\"TOTAL\"] = \"total\";\n  return AttrKeys;\n}(AttrKeys || {});\nclass FrameControl extends React.Component {\n  get filterOutAttrsCount() {\n    if (this.framesMode === FramesMode.ATTR) {\n      return (this.filterOutAttrs.instance || []).length + (this.filterOutAttrs.instanceDynamic || []).length + (this.filterOutAttrs.item || []).length;\n    }\n    return (this.filterOutAttrs.cameraItem || []).length + (this.filterOutAttrs.frameItem || []).length;\n  }\n  constructor(props) {\n    super(props);\n    this.reactionDisposers = [];\n    this.framesRenderer = null;\n    this.framesContainer = React.createRef();\n    this.itemsContainer = React.createRef();\n    this.framesMode = FramesMode.DEFAULT;\n    this.framesHeight = defaultFramesHeight;\n    this.savedFramesHeight = attributesFramesHeight;\n    this.visibleFramesIndex = 0;\n    this.visibleFramesIndexArr = [];\n    this.itemKeys = [];\n    this.attrKeys = {};\n    this.attrTip = null;\n    this.activeAttr = null;\n    this.filterVisible = false;\n    this.filterOutAttrs = {};\n    this.updateHeight = height => {\n      this.framesHeight = height;\n      this.props.onHeightChange(height + actionsContainerHeight);\n    };\n    this.updateVisibleFrames = (currentIndex, indexArr) => {\n      this.visibleFramesIndex = currentIndex;\n      if (indexArr) {\n        this.visibleFramesIndexArr = indexArr;\n      }\n    };\n    this.updateCurrentFrame = (frameIndex, itemIndex, isRightClick, pLeft, pBottom) => {\n      let needOpenContextMenu = false;\n      const itemKey = this.itemKeys[itemIndex];\n      if (itemKey) {\n        const [instanceId, instanceItemId, camera] = itemKey.split(itemKeySeparator);\n        const instance = store.instance.getInstanceById(instanceId);\n        if (instance) {\n          const item = instance.items[instanceItemId];\n          if (item) {\n            if (camera !== store.frame.currentCamera) {\n              store.frame.setCamera(camera);\n            }\n            store.instance.selectInstanceItem(item, false, false);\n            needOpenContextMenu = true;\n          } else {\n            const isSingle = instance.isSingle && store.frame.isSingleCamera;\n            if (!isSingle) {\n              store.instance.selectInstanceItem(null, false, false);\n            } else {\n              needOpenContextMenu = true;\n            }\n            store.instance.selectInstance(instance, false, false);\n          }\n        } else {\n          needOpenContextMenu = true;\n        }\n      }\n      store.frame.setFrameSync(frameIndex, true).then(() => {\n        if (needOpenContextMenu && isRightClick && pLeft !== undefined && pBottom !== undefined && this.visibleFramesIndex === this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1]) {\n          store.openContextMenu({\n            x: pLeft,\n            y: -pBottom\n          });\n        }\n      });\n    };\n    this.updateFrameCountIndex = v => {\n      this.visibleFramesIndex = Math.min(Math.max(v, this.visibleFramesIndexArr[0]), this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1]);\n      if (this.framesRenderer) {\n        this.framesRenderer.currentRangeIndex = this.visibleFramesIndex;\n      }\n    };\n    this.updateItemsScroll = top => {\n      if (this.itemsContainer.current) {\n        this.itemsContainer.current.scroll({\n          top\n        });\n      }\n      // hide attr tip when scroll\n      this.attrTip = null;\n    };\n    this.onItemsScroll = e => {\n      if (this.framesRenderer) {\n        this.framesRenderer.itemsOffset = e.target.scrollTop;\n      }\n    };\n    this.updateAttrTip = (hoveredBlock, hoveredFrame, hoveredItemIndex, pLeft, pBottom) => {\n      this.attrTip = null;\n      if ((this.framesMode === FramesMode.ATTR || this.framesMode === FramesMode.FRAME_ATTR) && hoveredBlock && hoveredFrame !== undefined && hoveredItemIndex !== undefined && pLeft !== undefined && pBottom !== undefined) {\n        const itemKey = this.itemKeys[hoveredItemIndex];\n        if (itemKey) {\n          const [type, ...rest] = itemKey.split(itemKeySeparator);\n          if (type === attrItemPrefix || type === attrFramePrefix) {\n            const fieldKey = rest[1];\n            if (fieldKey) {\n              var _this$attrKeys$attrTy;\n              const attrType = rest[0];\n              const field = (_this$attrKeys$attrTy = this.attrKeys[attrType]) === null || _this$attrKeys$attrTy === void 0 ? void 0 : _this$attrKeys$attrTy[fieldKey];\n              const label = (field === null || field === void 0 ? void 0 : field.label) || (field === null || field === void 0 ? void 0 : field.name) || fieldKey;\n              const referenceUrl = getReferenceImageUrl(hoveredBlock.value, field, ['label', 'value']);\n              this.attrTip = {\n                left: pLeft,\n                bottom: pBottom,\n                hoveredFrame,\n                startFrame: hoveredBlock.startFrame,\n                endFrame: hoveredBlock.endFrame,\n                value: hoveredBlock.value,\n                label,\n                ...(referenceUrl && {\n                  referenceUrl\n                })\n              };\n            }\n          }\n        }\n      }\n    };\n    this.activateAttr = (activeBlock, hoveredItemIndex, pLeft, pBottom) => {\n      if (!store.readonly) {\n        if (this.framesMode === FramesMode.ATTR || this.framesMode === FramesMode.FRAME_ATTR) {\n          const attrPrefix = this.framesMode === FramesMode.ATTR ? attrItemPrefix : attrFramePrefix;\n          const itemKey = this.itemKeys[hoveredItemIndex];\n          if (itemKey) {\n            const [type, ...rest] = itemKey.split(itemKeySeparator);\n            if (type === attrPrefix) {\n              var _this$attrKeys$attrTy2;\n              const attrType = rest[0];\n              const fieldKey = rest[1];\n              const field = (_this$attrKeys$attrTy2 = this.attrKeys[attrType]) === null || _this$attrKeys$attrTy2 === void 0 ? void 0 : _this$attrKeys$attrTy2[fieldKey];\n              if (field) {\n                const {\n                  currentCamera,\n                  currentFrame,\n                  attributes,\n                  frameAttributes\n                } = store.frame;\n                const {\n                  selectedInstances,\n                  selectedInstanceItems\n                } = store.instance;\n                const selectedInstanceItem = selectedInstanceItems[0];\n                const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n                let fields = [];\n                let disabled = false;\n                if (this.framesMode === FramesMode.ATTR) {\n                  let initialValues;\n                  switch (attrType) {\n                    case AttrKeys.INSTANCE:\n                      {\n                        initialValues = selectedInstance.attributes;\n                        break;\n                      }\n                    case AttrKeys.INSTANCE_DYNAMIC:\n                      {\n                        var _selectedInstance$dyn, _selectedInstance$dyn2, _selectedInstance$dyn3;\n                        initialValues = (_selectedInstance$dyn = selectedInstance.dynamicAttributes) === null || _selectedInstance$dyn === void 0 ? void 0 : (_selectedInstance$dyn2 = _selectedInstance$dyn[currentCamera]) === null || _selectedInstance$dyn2 === void 0 ? void 0 : (_selectedInstance$dyn3 = _selectedInstance$dyn2[currentFrame]) === null || _selectedInstance$dyn3 === void 0 ? void 0 : _selectedInstance$dyn3.attributes;\n                        break;\n                      }\n                    case AttrKeys.ITEM:\n                      {\n                        var _selectedInstanceItem, _selectedInstanceItem2, _selectedInstanceItem3, _selectedInstanceItem4;\n                        initialValues = (_selectedInstanceItem = selectedInstanceItem.cameras[currentCamera]) === null || _selectedInstanceItem === void 0 ? void 0 : (_selectedInstanceItem2 = _selectedInstanceItem.frames[currentFrame]) === null || _selectedInstanceItem2 === void 0 ? void 0 : _selectedInstanceItem2.attributes;\n                        disabled = !((_selectedInstanceItem3 = selectedInstanceItem.cameras[currentCamera]) === null || _selectedInstanceItem3 === void 0 ? void 0 : (_selectedInstanceItem4 = _selectedInstanceItem3.frames[currentFrame]) === null || _selectedInstanceItem4 === void 0 ? void 0 : _selectedInstanceItem4.attrChangeAllowed);\n                        break;\n                      }\n                    default:\n                      break;\n                  }\n                  fields = setInitialValues([field], initialValues);\n                } else {\n                  fields = setInitialValues([field], attrType === AttrKeys.CAMERA_ITEM ? attributes[currentCamera][currentFrame].attributes : frameAttributes[currentFrame]);\n                }\n                fields.forEach(f => {\n                  f.visible = true; // always set to visible\n                });\n                this.activeAttr = {\n                  left: pLeft,\n                  bottom: pBottom,\n                  startFrame: activeBlock.startFrame,\n                  endFrame: activeBlock.endFrame,\n                  attrType,\n                  fieldKey,\n                  fields,\n                  disabled\n                };\n              }\n            }\n          }\n        }\n      } else {\n        this.cancalAttr();\n      }\n    };\n    this.cancalAttr = () => {\n      var _this$framesRenderer;\n      (_this$framesRenderer = this.framesRenderer) === null || _this$framesRenderer === void 0 ? void 0 : _this$framesRenderer.unselectBlock();\n      this.activeAttr = null;\n    };\n    this.submitAttr = (values, applyAll) => {\n      if (this.activeAttr && values) {\n        const {\n          selectedInstances,\n          selectedInstanceItems\n        } = store.instance;\n        const selectedInstanceItem = selectedInstanceItems[0];\n        const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n        const {\n          attrType,\n          fieldKey,\n          startFrame,\n          endFrame\n        } = this.activeAttr;\n        const {\n          setFrameAttributesForCamera,\n          currentCamera,\n          currentFrame,\n          frameAttributes,\n          setCommonFrameAttributes,\n          attributes\n        } = store.frame;\n        const value = values[fieldKey];\n        switch (attrType) {\n          case AttrKeys.INSTANCE:\n            {\n              const storeId = store.undo.preserve({\n                instances: [{\n                  ...selectedInstance.getBasicInfo(),\n                  children: []\n                }]\n              });\n              selectedInstance.setAttributes({\n                ...selectedInstance.attributes,\n                [fieldKey]: value\n              });\n              store.undo.save(storeId, {\n                instances: [{\n                  ...selectedInstance.getBasicInfo(),\n                  children: []\n                }]\n              });\n              break;\n            }\n          case AttrKeys.INSTANCE_DYNAMIC:\n            {\n              var _selectedInstance$dyn4;\n              const storeId = store.undo.preserve({\n                instances: [{\n                  ...selectedInstance.getBasicInfo(),\n                  children: []\n                }]\n              });\n              const currentCameraAttributes = (_selectedInstance$dyn4 = selectedInstance.dynamicAttributes) === null || _selectedInstance$dyn4 === void 0 ? void 0 : _selectedInstance$dyn4[currentCamera];\n              const updatedDynamicAttributes = [];\n              if (applyAll) {\n                for (let i = startFrame; i < endFrame; i += 1) {\n                  const frameData = currentCameraAttributes === null || currentCameraAttributes === void 0 ? void 0 : currentCameraAttributes[i];\n                  updatedDynamicAttributes.push({\n                    frameIndex: i,\n                    attributes: {\n                      ...(frameData === null || frameData === void 0 ? void 0 : frameData.attributes),\n                      [fieldKey]: value\n                    }\n                  });\n                }\n              } else {\n                const frameData = currentCameraAttributes === null || currentCameraAttributes === void 0 ? void 0 : currentCameraAttributes[currentFrame];\n                updatedDynamicAttributes.push({\n                  frameIndex: currentFrame,\n                  attributes: {\n                    ...(frameData === null || frameData === void 0 ? void 0 : frameData.attributes),\n                    [fieldKey]: value\n                  }\n                });\n              }\n              selectedInstance.setDynamicAttributesByCamera(currentCamera, updatedDynamicAttributes);\n              store.undo.save(storeId, {\n                instances: [{\n                  ...selectedInstance.getBasicInfo(),\n                  children: []\n                }]\n              });\n              break;\n            }\n          case AttrKeys.ITEM:\n            {\n              const cameraData = selectedInstanceItem.cameras[currentCamera];\n              if (cameraData) {\n                const frameAttributesMap = {};\n                if (applyAll) {\n                  for (let i = startFrame; i < endFrame; i += 1) {\n                    const frameData = cameraData.frames[i];\n                    frameAttributesMap[i] = {\n                      attributes: {\n                        ...frameData.attributes,\n                        [fieldKey]: value\n                      }\n                    };\n                  }\n                } else {\n                  const frameData = cameraData.frames[currentFrame];\n                  frameAttributesMap[currentFrame] = {\n                    attributes: {\n                      ...frameData.attributes,\n                      [fieldKey]: value\n                    }\n                  };\n                }\n                const {\n                  prevState,\n                  currState\n                } = selectedInstanceItem.setAttributesByFrame(currentCamera, frameAttributesMap);\n                const basicInfo = selectedInstance.getBasicInfo();\n                store.undo.push({\n                  instances: [{\n                    ...basicInfo,\n                    children: prevState ? [prevState] : []\n                  }]\n                }, {\n                  instances: [{\n                    ...basicInfo,\n                    children: currState ? [currState] : []\n                  }]\n                });\n              }\n              break;\n            }\n          case AttrKeys.FRAME_ITEM:\n            {\n              const applyFrames = applyAll ? new Array(endFrame - startFrame).fill(0).map((v, i) => i + startFrame) : [currentFrame];\n              const updateFrameAttributes = [];\n              for (let index = 0; index < applyFrames.length; index += 1) {\n                const element = applyFrames[index];\n                const temp = {\n                  frameIndex: element,\n                  attributes: {\n                    ...frameAttributes[element],\n                    ...values\n                  }\n                };\n                updateFrameAttributes.push(temp);\n              }\n              setCommonFrameAttributes(updateFrameAttributes);\n              break;\n            }\n          case AttrKeys.CAMERA_ITEM:\n            {\n              const attributesCurrentCamera = attributes[currentCamera];\n              const applyFrames = applyAll ? new Array(endFrame - startFrame).fill(0).map((v, i) => i + startFrame) : [currentFrame];\n              const updatedFrameAttributes = [];\n              for (let index = 0; index < applyFrames.length; index += 1) {\n                const frameIndex = applyFrames[index];\n                const attrs = {\n                  ...attributesCurrentCamera[frameIndex].attributes\n                };\n                const valueKeys = Object.keys(values);\n                for (let i = 0; i < valueKeys.length; i += 1) {\n                  const key = valueKeys[i];\n                  attrs[key] = values[key];\n                }\n                updatedFrameAttributes.push({\n                  ...attributesCurrentCamera[frameIndex],\n                  frameIndex,\n                  attributes: attrs\n                });\n              }\n              setFrameAttributesForCamera(currentCamera, updatedFrameAttributes);\n              break;\n            }\n          default:\n            break;\n        }\n      }\n      this.cancalAttr();\n    };\n    this.updateFrameAttr = (updatedFrameStatus, updatedItemIndex) => {\n      if (this.framesMode === FramesMode.ATTR) {\n        const itemKey = this.itemKeys[updatedItemIndex];\n        if (itemKey) {\n          const [type, ...rest] = itemKey.split(itemKeySeparator);\n          if (type === attrItemPrefix) {\n            const {\n              currentCamera\n            } = store.frame;\n            const {\n              selectedInstances,\n              selectedInstanceItems\n            } = store.instance;\n            const selectedInstanceItem = selectedInstanceItems[0];\n            const attrType = rest[0];\n            const fieldKey = rest[1];\n            if (attrType === AttrKeys.INSTANCE_DYNAMIC) {\n              var _selectedInstance$dyn5;\n              const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n              const storeId = store.undo.preserve({\n                instances: [{\n                  ...selectedInstance.getBasicInfo(),\n                  children: []\n                }]\n              });\n              const currentCameraAttributes = (_selectedInstance$dyn5 = selectedInstance.dynamicAttributes) === null || _selectedInstance$dyn5 === void 0 ? void 0 : _selectedInstance$dyn5[currentCamera];\n              const updatedDynamicAttributes = [];\n              const baseFrameAttributes = {};\n              // save all attributes from base frames\n              Object.values(updatedFrameStatus).forEach(baseFrame => {\n                if (baseFrame !== null) {\n                  var _currentCameraAttribu;\n                  baseFrameAttributes[baseFrame] = cloneDeep(currentCameraAttributes === null || currentCameraAttributes === void 0 ? void 0 : (_currentCameraAttribu = currentCameraAttributes[baseFrame]) === null || _currentCameraAttribu === void 0 ? void 0 : _currentCameraAttribu.attributes);\n                }\n              });\n              Object.keys(updatedFrameStatus).forEach(frameStr => {\n                var _currentCameraAttribu2;\n                const frameIndex = Number(frameStr);\n                let frameDataAttributes = currentCameraAttributes === null || currentCameraAttributes === void 0 ? void 0 : (_currentCameraAttribu2 = currentCameraAttributes[frameIndex]) === null || _currentCameraAttribu2 === void 0 ? void 0 : _currentCameraAttribu2.attributes;\n                if (!frameDataAttributes) {\n                  frameDataAttributes = {};\n                }\n                const baseFrameIndex = updatedFrameStatus[frameIndex];\n                if (baseFrameIndex !== null) {\n                  var _baseFrameAttributes$;\n                  // update\n                  frameDataAttributes[fieldKey] = (_baseFrameAttributes$ = baseFrameAttributes[baseFrameIndex]) === null || _baseFrameAttributes$ === void 0 ? void 0 : _baseFrameAttributes$[fieldKey];\n                } else {\n                  // delete\n                  delete frameDataAttributes[fieldKey];\n                }\n                updatedDynamicAttributes.push({\n                  frameIndex,\n                  attributes: {\n                    ...frameDataAttributes\n                  }\n                });\n              });\n              selectedInstance.setDynamicAttributesByCamera(currentCamera, updatedDynamicAttributes);\n              store.undo.save(storeId, {\n                instances: [{\n                  ...selectedInstance.getBasicInfo(),\n                  children: []\n                }]\n              });\n            } else if (attrType === AttrKeys.ITEM) {\n              // only shape attributes can be applied to different frames\n              const cameraData = selectedInstanceItem === null || selectedInstanceItem === void 0 ? void 0 : selectedInstanceItem.cameras[currentCamera];\n              if (cameraData) {\n                const {\n                  frames\n                } = cameraData;\n                const baseFrameAttributes = {};\n                // save all attributes from base frames\n                Object.values(updatedFrameStatus).forEach(baseFrame => {\n                  if (baseFrame !== null) {\n                    var _frames$baseFrame;\n                    baseFrameAttributes[baseFrame] = cloneDeep((_frames$baseFrame = frames[baseFrame]) === null || _frames$baseFrame === void 0 ? void 0 : _frames$baseFrame.attributes);\n                  }\n                });\n                // update\n                const frameAttributesMap = {};\n                Object.keys(updatedFrameStatus).forEach(frameStr => {\n                  var _frames$frameIndex;\n                  const frameIndex = Number(frameStr);\n                  const frameAttributes = cloneDeep((_frames$frameIndex = frames[frameIndex]) === null || _frames$frameIndex === void 0 ? void 0 : _frames$frameIndex.attributes);\n                  if (frameAttributes) {\n                    const baseFrameIndex = updatedFrameStatus[frameIndex];\n                    if (baseFrameIndex !== null) {\n                      var _baseFrameAttributes$2;\n                      // update\n                      frameAttributes[fieldKey] = (_baseFrameAttributes$2 = baseFrameAttributes[baseFrameIndex]) === null || _baseFrameAttributes$2 === void 0 ? void 0 : _baseFrameAttributes$2[fieldKey];\n                    } else {\n                      // delete\n                      delete frameAttributes[fieldKey];\n                    }\n                    frameAttributesMap[frameIndex] = {\n                      attributes: frameAttributes\n                    };\n                  }\n                });\n                if (Object.keys(frameAttributesMap).length > 0) {\n                  const {\n                    prevState,\n                    currState\n                  } = selectedInstanceItem.setAttributesByFrame(currentCamera, frameAttributesMap);\n                  const basicInfo = selectedInstanceItem.instance.getBasicInfo();\n                  store.undo.push({\n                    instances: [{\n                      ...basicInfo,\n                      children: prevState ? [prevState] : []\n                    }]\n                  }, {\n                    instances: [{\n                      ...basicInfo,\n                      children: currState ? [currState] : []\n                    }]\n                  });\n                }\n              }\n            }\n          }\n        }\n      } else if (this.framesMode === FramesMode.FRAME_ATTR) {\n        const itemKey = this.itemKeys[updatedItemIndex];\n        if (itemKey) {\n          const {\n            currentCamera,\n            updateFrameAttributesForCamera,\n            attributes,\n            setCommonFrameAttributes,\n            frameAttributes\n          } = store.frame;\n          const replaceFrame = Object.values(updatedFrameStatus).length > 0 ? Object.values(updatedFrameStatus)[0] : null;\n          const replacedFrames = Object.keys(updatedFrameStatus).map(frameStr => Number(frameStr));\n          const [type, ...rest] = itemKey.split(itemKeySeparator);\n          if (type === attrFramePrefix) {\n            const attrType = rest[0];\n            const fieldKey = rest[1];\n            if (attrType === AttrKeys.CAMERA_ITEM) {\n              let fieldKeyNewAttr = null;\n              if (replaceFrame || typeof replaceFrame === 'number') {\n                var _attributes$currentCa;\n                fieldKeyNewAttr = (_attributes$currentCa = attributes[currentCamera][replaceFrame].attributes) === null || _attributes$currentCa === void 0 ? void 0 : _attributes$currentCa[fieldKey];\n              }\n              updateFrameAttributesForCamera(currentCamera, replacedFrames, {\n                [fieldKey]: fieldKeyNewAttr\n              });\n            } else if (attrType === AttrKeys.FRAME_ITEM) {\n              const updateFrameAttributes = [];\n              let fieldKeyNewAttr = null;\n              if (replaceFrame || typeof replaceFrame === 'number') {\n                var _frameAttributes$repl;\n                fieldKeyNewAttr = (_frameAttributes$repl = frameAttributes[replaceFrame]) === null || _frameAttributes$repl === void 0 ? void 0 : _frameAttributes$repl[fieldKey];\n              }\n              for (let index = 0; index < replacedFrames.length; index += 1) {\n                const element = replacedFrames[index];\n                const temp = {\n                  frameIndex: element,\n                  attributes: {\n                    ...frameAttributes[element],\n                    [fieldKey]: fieldKeyNewAttr\n                  }\n                };\n                updateFrameAttributes.push(temp);\n              }\n              setCommonFrameAttributes(updateFrameAttributes);\n            }\n          }\n        }\n      }\n    };\n    this.onContextMenu = (selectedFrames, pLeft, pBottom) => {\n      store.openContextMenu({\n        x: pLeft,\n        y: -pBottom\n      }, selectedFrames);\n    };\n    this.toggleFilterVisible = () => {\n      this.filterVisible = !this.filterVisible;\n    };\n    this.updateFilter = (type, fieldKey) => {\n      const filterOut = this.filterOutAttrs[type] || [];\n      const index = filterOut.indexOf(fieldKey);\n      if (index < 0) {\n        if (!this.filterOutAttrs[type]) {\n          this.filterOutAttrs[type] = [];\n        }\n        this.filterOutAttrs[type].push(fieldKey);\n      } else {\n        var _this$filterOutAttrs$;\n        (_this$filterOutAttrs$ = this.filterOutAttrs[type]) === null || _this$filterOutAttrs$ === void 0 ? void 0 : _this$filterOutAttrs$.splice(index, 1);\n      }\n      if (this.framesRenderer) {\n        this.framesRenderer.items = this.getItems();\n      }\n    };\n    this.resetFilter = () => {\n      if (this.framesMode === FramesMode.ATTR) {\n        this.filterOutAttrs.instance = [];\n        this.filterOutAttrs.instanceDynamic = [];\n        this.filterOutAttrs.item = [];\n      } else if (this.framesMode === FramesMode.FRAME_ATTR) {\n        this.filterOutAttrs.cameraItem = [];\n        this.filterOutAttrs.frameItem = [];\n      }\n      if (this.framesRenderer) {\n        this.framesRenderer.items = this.getItems();\n      }\n    };\n    this.switch = mode => {\n      if (this.framesMode === mode) {\n        return;\n      }\n      this.framesMode = mode;\n      if (mode === FramesMode.ATTR) {\n        // switch to card when use attributes mode\n        this.updateFrameCountIndex(this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1]);\n      } else if (mode === FramesMode.FRAME_ATTR) {\n        this.updateFrameCountIndex(this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1]);\n      }\n      // else {\n      //   // reset attr filter\n      //   this.filterOutAttrs = {};\n      // }\n      if (this.framesRenderer) {\n        this.framesRenderer.scrollable = this.framesMode !== FramesMode.DEFAULT;\n        this.framesRenderer.items = this.getItems();\n      }\n\n      // update frames height\n      if (mode === FramesMode.DEFAULT) {\n        this.updateHeight(defaultFramesHeight);\n      } else {\n        this.updateHeight(this.savedFramesHeight);\n      }\n    };\n    this.renderItemLabelContent = (fieldKey, isSingleCamera, cameraIndex, attrType, field) => {\n      const isFrameAttr = attrType === AttrKeys.FRAME_ITEM;\n      if (field === null || field === void 0 ? void 0 : field.label) {\n        return `${field === null || field === void 0 ? void 0 : field.label}${isFrameAttr || isSingleCamera ? '' : `(C${cameraIndex + 1})`}`;\n      }\n      if (fieldKey) {\n        return `${fieldKey}${isFrameAttr || isSingleCamera ? '' : `(C${cameraIndex + 1})`}`;\n      }\n      return `${i18n.translate('PROGRESS_ATTR_TOTAL')}`;\n    };\n    this.filterContentRender = (framesMode, attrGroups = []) => {\n      const {\n        selectedInstances,\n        selectedInstanceItems\n      } = store.instance;\n      const selectedInstanceItem = selectedInstanceItems[0];\n      const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n      let attrLen = 0;\n      for (let index = 0; index < attrGroups.length; index += 1) {\n        const element = attrGroups[index];\n        attrLen = Object.keys(this.attrKeys[element] || {}).length;\n      }\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1347,\n          columnNumber: 9\n        }\n      }, framesMode === FramesMode.FRAME_ATTR && i18n.translate('PROGRESS_ATTR_FILTER_TITLE_WITHOUT_NAME'), framesMode === FramesMode.ATTR && i18n.translate('PROGRESS_ATTR_FILTER_TITLE', {\n        values: {\n          name: (selectedInstanceItem === null || selectedInstanceItem === void 0 ? void 0 : selectedInstanceItem.label) || selectedInstance.label\n        }\n      })), attrLen > 1 && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"item\",\n        onClick: this.resetFilter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1352,\n          columnNumber: 11\n        }\n      }, i18n.translate('PROGRESS_ATTR_FILTER_SELECT_ALL')), attrGroups.map(item => {\n        if (Object.values(this.attrKeys[item] || {}).length > 0) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1362,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"divider\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1363,\n              columnNumber: 17\n            }\n          }), Object.values(this.attrKeys[item] || {}).map(f => {\n            var _this$filterOutAttrs$2;\n            return /*#__PURE__*/React.createElement(\"div\", {\n              key: f.name,\n              className: cx('item', {\n                active: !((_this$filterOutAttrs$2 = this.filterOutAttrs[item]) === null || _this$filterOutAttrs$2 === void 0 ? void 0 : _this$filterOutAttrs$2.includes(f.name))\n              }),\n              onClick: () => this.updateFilter(item, f.name),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1365,\n                columnNumber: 19\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"icon\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1372,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(CheckOutlined, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1373,\n                columnNumber: 23\n              }\n            })), f.label || f.name);\n          }));\n        }\n        return null;\n      }));\n    };\n    this.getBgColor = instance => {\n      let bgColor = instance.categoryRef.displayColor;\n      if (bgColor === 'random' && instance.items) {\n        const firstInstanceItem = Object.values(instance.items)[0];\n        if (firstInstanceItem) {\n          bgColor = firstInstanceItem.colorConfig.color;\n        }\n      }\n      return bgColor;\n    };\n    this.resizeFrameControl = data => {\n      if (this.framesMode !== FramesMode.DEFAULT && this.framesRenderer) {\n        const delta = data[ResizableEdge.TOP];\n        this.framesRenderer.itemsContainerHeight = Math.max(this.savedFramesHeight - delta - actionsContainerHeight, 0);\n      }\n    };\n    this.finishResizeFrameControl = () => {\n      this.savedFramesHeight = this.framesHeight;\n      cache.set(CacheKey.FRAMES_CONTROL_HEIGHT, this.savedFramesHeight);\n    };\n    makeObservable(this, {\n      framesMode: observable,\n      framesHeight: observable,\n      visibleFramesIndex: observable,\n      visibleFramesIndexArr: observable,\n      itemKeys: observable,\n      attrTip: observable,\n      activeAttr: observable,\n      filterVisible: observable,\n      filterOutAttrs: observable,\n      filterOutAttrsCount: computed,\n      getItems: action,\n      updateHeight: action,\n      updateVisibleFrames: action,\n      updateFrameCountIndex: action,\n      updateItemsScroll: action,\n      updateAttrTip: action,\n      activateAttr: action,\n      cancalAttr: action,\n      toggleFilterVisible: action,\n      updateFilter: action,\n      resetFilter: action,\n      switch: action\n    });\n\n    // when current frame changes\n    this.reactionDisposers.push(reaction(() => store.frame.currentFrame, () => {\n      if (this.framesRenderer) {\n        this.framesRenderer.currentFrame = store.frame.currentFrame;\n      }\n      this.cancalAttr();\n    }));\n\n    // when invalid frames changes\n    this.reactionDisposers.push(reaction(() => store.frame.invalidFrames, () => {\n      if (this.framesRenderer) {\n        this.framesRenderer.invalidFrames = store.frame.invalidFrames;\n      }\n    }));\n\n    // when instance changes, or data changes\n    this.reactionDisposers.push(reaction(() => [store.instance.selectedInstanceItems, store.instance.selectedInstances, store.undo.pointer, store.undo.lastStoreId, store.config.reviewMode, store.frame.currentCamera], ([items, instances, pointer, storeId, reviewMode, currentCamera], [prevItems, prevInstances, prevPointer, prevStoreId, prevReviewMode, preCurrentCamera]) => {\n      const selectedChanged = items.length !== prevItems.length || items.some(i => prevItems.indexOf(i) < 0) || instances.length !== prevInstances.length || instances.some(i => prevInstances.indexOf(i) < 0);\n      const cameraChanged = currentCamera !== preCurrentCamera;\n      if (selectedChanged) {\n        this.filterOutAttrs.instance = [];\n        this.filterOutAttrs.instanceDynamic = [];\n        this.filterOutAttrs.item = [];\n      }\n      if (cameraChanged) {\n        this.filterOutAttrs.cameraItem = [];\n        this.filterOutAttrs.frameItem = [];\n      }\n      if (this.framesRenderer && (selectedChanged || cameraChanged || pointer !== prevPointer || storeId !== prevStoreId || reviewMode !== prevReviewMode)) {\n        this.framesRenderer.items = this.getItems();\n      }\n    }));\n  }\n  componentDidMount() {\n    const h = cache.get(CacheKey.FRAMES_CONTROL_HEIGHT);\n    if (h !== undefined) {\n      this.savedFramesHeight = h;\n    }\n    if (this.framesContainer.current) {\n      this.framesRenderer = new FramesRenderer(this.framesContainer.current, store.frame.frameCount, {\n        fixHeight: true\n      });\n      this.framesRenderer.on(EventAction.HEIGHT_CHANGE, this.updateHeight);\n      this.framesRenderer.on(EventAction.VISIBLE_FRAMES_UPDATE, this.updateVisibleFrames);\n      this.framesRenderer.on(EventAction.CURRENT_FRAME_CHANGE, this.updateCurrentFrame);\n      this.framesRenderer.on(EventAction.ITEMS_OFFSET_CHANGE, this.updateItemsScroll);\n      this.framesRenderer.on(EventAction.BLOCK_HOVERED, this.updateAttrTip);\n      this.framesRenderer.on(EventAction.BLOCK_SELECTED, this.activateAttr);\n      this.framesRenderer.on(EventAction.FRAME_STATUS_CHANGED, this.updateFrameAttr);\n      this.framesRenderer.on(EventAction.CONTEXT_MENU, this.onContextMenu);\n      this.framesRenderer.items = this.getItems();\n      this.framesRenderer.invalidFrames = store.frame.invalidFrames;\n      this.framesRenderer.itemsContainerHeight = this.savedFramesHeight - actionsContainerHeight;\n    }\n  }\n  componentDidUpdate() {\n    if (this.framesMode === FramesMode.ALL) {\n      // scroll after dom updates\n      if (store.instance.selectedInstanceItems.length > 0) {\n        this.scrollTo(`frame-item-instance-item-${store.instance.selectedInstanceItems[0].id}`);\n      } else if (store.instance.selectedInstances.length > 0) {\n        this.scrollTo(`frame-item-instance-${store.instance.selectedInstances[0].id}`);\n      }\n    }\n  }\n  componentWillUnmount() {\n    if (this.framesRenderer) {\n      this.framesRenderer.removeEventListeners();\n      this.framesRenderer.off(EventAction.HEIGHT_CHANGE, this.updateHeight);\n      this.framesRenderer.off(EventAction.VISIBLE_FRAMES_UPDATE, this.updateVisibleFrames);\n      this.framesRenderer.off(EventAction.CURRENT_FRAME_CHANGE, this.updateCurrentFrame);\n      this.framesRenderer.off(EventAction.ITEMS_OFFSET_CHANGE, this.updateItemsScroll);\n      this.framesRenderer.off(EventAction.BLOCK_HOVERED, this.updateAttrTip);\n      this.framesRenderer.off(EventAction.BLOCK_SELECTED, this.activateAttr);\n      this.framesRenderer.off(EventAction.FRAME_STATUS_CHANGED, this.updateFrameAttr);\n      this.framesRenderer.off(EventAction.CONTEXT_MENU, this.onContextMenu);\n    }\n    this.reactionDisposers.forEach(disposer => disposer());\n  }\n  getItems() {\n    const items = {};\n    const {\n      selectedInstances,\n      selectedInstanceItems,\n      allInstances\n    } = store.instance;\n    const {\n      currentCamera,\n      isSingleCamera\n    } = store.frame;\n    if (this.framesMode === FramesMode.ALL) {\n      allInstances.forEach(instance => {\n        if (selectedInstances.indexOf(instance) >= 0) {\n          const isSingle = instance.isSingle && isSingleCamera;\n          const color = getRGBAColor(instance.category);\n          const filteredSelectedInstanceItems = selectedInstanceItems.filter(item => item.instance === instance);\n          // add instance\n          if (!isSingle) {\n            items[instance.id] = {\n              frameStatus: {},\n              color,\n              selected: filteredSelectedInstanceItems.length <= 0\n            };\n            const {\n              children\n            } = instance.categoryRef;\n            const sortedItems = Object.values(instance.items).sort((a, b) => {\n              const aIndex = children.findIndex(c => c.name === a.name);\n              const bIndex = children.findIndex(c => c.name === b.name);\n              if (aIndex < bIndex) {\n                return -1;\n              }\n              if (aIndex > bIndex) {\n                return 1;\n              }\n              return a.number - b.number;\n            });\n            sortedItems.forEach(item => {\n              Object.values(item.cameras).forEach(camera => {\n                if (!camera.isEmpty) {\n                  const key = [instance.id, item.id, camera.camera].join(itemKeySeparator);\n                  items[key] = {\n                    frameStatus: camera.frameStatus,\n                    frameColor: getFrameColor(item, camera.camera),\n                    color: hexToRgba(item.colorConfig.color || defaultFrameColor, 0.2),\n                    showCards: true,\n                    selected: filteredSelectedInstanceItems.indexOf(item) >= 0 && camera.camera === currentCamera\n                  };\n                }\n              });\n            });\n          } else {\n            const item = Object.values(instance.items)[0];\n            if (item) {\n              items[instance.id] = {\n                frameStatus: instance.frameStatus,\n                frameColor: getFrameColor(item, currentCamera),\n                color: hexToRgba(item.colorConfig.color || defaultFrameColor, 0.2),\n                showCards: true,\n                selected: true\n              };\n            }\n          }\n        } else {\n          items[instance.id] = {\n            frameStatus: instance.frameStatus,\n            color: getRGBAColor(instance.category)\n          };\n        }\n      });\n    } else if (this.framesMode === FramesMode.FRAME_ATTR) {\n      const {\n        commonFrameConfig,\n        frameAttributes,\n        frameConfig,\n        attributes\n      } = store.frame;\n      const cameraConfigFields = frameConfig === null || frameConfig === void 0 ? void 0 : frameConfig.fields;\n      if (commonFrameConfig) {\n        const {\n          fields\n        } = commonFrameConfig;\n        this.attrKeys.frameItem = {};\n        for (let i = 0; i < fields.length; i += 1) {\n          const field = fields[i];\n          this.attrKeys.frameItem[field.name] = field;\n        }\n      }\n      if (cameraConfigFields) {\n        this.attrKeys.cameraItem = {};\n        for (let i = 0; i < cameraConfigFields.length; i += 1) {\n          const field = cameraConfigFields[i];\n          this.attrKeys.cameraItem[field.name] = field;\n        }\n      }\n      if (this.attrKeys.frameItem && Object.keys(this.attrKeys.frameItem).length > 0 || this.attrKeys.cameraItem && Object.keys(this.attrKeys.cameraItem).length > 0) {\n        const frameTotal = {\n          frameStatus: {},\n          color: defaultFrameColor,\n          type: FrameItemType.ENDPOINT\n        };\n        const frameCamera = {\n          frameStatus: {},\n          color: defaultFrameColor,\n          selected: true\n        };\n        items.frameCamera = frameCamera;\n        items[`${attrFramePrefix}${itemKeySeparator}total`] = frameTotal;\n        if (commonFrameConfig) {\n          const frameFieldKeys = Object.keys(this.attrKeys.frameItem || {});\n          const renderFrameAttrs = {};\n          for (let i = 0; i < frameFieldKeys.length; i += 1) {\n            var _this$filterOutAttrs$3;\n            const fieldKey = frameFieldKeys[i];\n            if (!((_this$filterOutAttrs$3 = this.filterOutAttrs.frameItem) === null || _this$filterOutAttrs$3 === void 0 ? void 0 : _this$filterOutAttrs$3.includes(fieldKey))) {\n              renderFrameAttrs[fieldKey] = true;\n              const itemKey = `${attrFramePrefix}${itemKeySeparator}frameItem${itemKeySeparator}${fieldKey}`;\n              items[itemKey] = {\n                frameStatus: {},\n                color: defaultFrameColor,\n                type: FrameItemType.TEXT,\n                draggable: !store.readonly\n              };\n            }\n          }\n          const frameAttributesKeys = Object.keys(frameAttributes);\n          for (let index = 0; index < frameAttributesKeys.length; index += 1) {\n            const frameIndex = Number(frameAttributesKeys[index]);\n            const frameItemAttrs = frameAttributes[frameIndex];\n            if (frameItemAttrs) {\n              const renderFrameFieldKeys = Object.keys(renderFrameAttrs);\n              for (let i = 0; i < renderFrameFieldKeys.length; i += 1) {\n                const fieldKey = renderFrameFieldKeys[i];\n                frameTotal.frameStatus[frameIndex] = hash(frameItemAttrs);\n                frameCamera.frameStatus[frameIndex] = true;\n                const frameItemKey = `${attrFramePrefix}${itemKeySeparator}frameItem${itemKeySeparator}${fieldKey}`;\n                const frameItemValue = frameItemAttrs[fieldKey];\n                if (frameItemValue !== undefined && frameItemValue !== null) {\n                  const displayValue = getFieldDisplayLabel(frameItemValue, this.attrKeys.frameItem ? this.attrKeys.frameItem[fieldKey] : undefined);\n                  items[frameItemKey].frameStatus[frameIndex] = displayValue;\n                }\n              }\n            }\n          }\n        }\n        if (cameraConfigFields) {\n          const renderCameraAttrs = {};\n          const cameraFieldKeys = Object.keys(this.attrKeys.cameraItem || {});\n          for (let i = 0; i < cameraFieldKeys.length; i += 1) {\n            var _this$filterOutAttrs$4;\n            const fieldKey = cameraFieldKeys[i];\n            if (!((_this$filterOutAttrs$4 = this.filterOutAttrs.cameraItem) === null || _this$filterOutAttrs$4 === void 0 ? void 0 : _this$filterOutAttrs$4.includes(fieldKey))) {\n              renderCameraAttrs[fieldKey] = true;\n              const itemKey = `${attrFramePrefix}${itemKeySeparator}cameraItem${itemKeySeparator}${fieldKey}`;\n              items[itemKey] = {\n                frameStatus: {},\n                color: defaultFrameColor,\n                type: FrameItemType.TEXT,\n                draggable: !store.readonly\n              };\n            }\n          }\n          const currentCameraAttrs = attributes[currentCamera];\n          if (currentCameraAttrs) {\n            const cameraAttributesValue = Object.values(currentCameraAttrs);\n            for (let frameIndex = 0; frameIndex < cameraAttributesValue.length; frameIndex += 1) {\n              const currentCameraInstance = cameraAttributesValue[frameIndex];\n              if (currentCameraInstance) {\n                const itemAttrs = currentCameraInstance.attributes;\n                if (itemAttrs) {\n                  frameTotal.frameStatus[frameIndex] += hash(itemAttrs);\n                  frameCamera.frameStatus[frameIndex] = true;\n                  const renderCameraFieldKeys = Object.keys(renderCameraAttrs);\n                  for (let i = 0; i < renderCameraFieldKeys.length; i += 1) {\n                    const fieldKey = renderCameraFieldKeys[i];\n                    const cameraItemKey = `${attrFramePrefix}${itemKeySeparator}cameraItem${itemKeySeparator}${fieldKey}`;\n                    const itemValue = itemAttrs[fieldKey];\n                    if (itemValue !== undefined && itemValue !== null) {\n                      const displayValue = getFieldDisplayLabel(itemValue, this.attrKeys.cameraItem ? this.attrKeys.cameraItem[fieldKey] : undefined);\n                      items[cameraItemKey].frameStatus[frameIndex] = displayValue;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else if (selectedInstances.length > 0) {\n      const selectedInstanceItem = selectedInstanceItems[0];\n      const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n      if (!selectedInstanceItem) {\n        // only instance selected\n        items[selectedInstance.id] = {\n          frameStatus: selectedInstance.frameStatus,\n          color: getRGBAColor(selectedInstance.category)\n        };\n      } else {\n        var _selectedInstanceItem5;\n        // instance item in current frame selected\n        const key = [selectedInstance.id, selectedInstanceItem.id, currentCamera].join(itemKeySeparator);\n        items[key] = {\n          frameStatus: (_selectedInstanceItem5 = selectedInstanceItem.cameras[currentCamera]) === null || _selectedInstanceItem5 === void 0 ? void 0 : _selectedInstanceItem5.frameStatus,\n          frameColor: getFrameColor(selectedInstanceItem, currentCamera),\n          color: hexToRgba(selectedInstanceItem.colorConfig.color || defaultFrameColor, 0.2),\n          showCards: true,\n          selected: true\n        };\n      }\n      if (this.framesMode === FramesMode.ATTR) {\n        // init attr key mapping\n        if (selectedInstance.categoryRef.labelConfig) {\n          this.attrKeys.instance = {};\n          const {\n            fields\n          } = selectedInstance.categoryRef.labelConfig;\n          for (let i = 0; i < fields.length; i += 1) {\n            const field = fields[i];\n            this.attrKeys.instance[field.name] = field;\n          }\n        } else {\n          delete this.attrKeys.instance;\n        }\n        if (selectedInstance.categoryRef.labelConfigDynamic) {\n          this.attrKeys.instanceDynamic = {};\n          const {\n            fields\n          } = selectedInstance.categoryRef.labelConfigDynamic;\n          for (let i = 0; i < fields.length; i += 1) {\n            const field = fields[i];\n            this.attrKeys.instanceDynamic[field.name] = field;\n          }\n        } else {\n          delete this.attrKeys.instanceDynamic;\n        }\n        if (selectedInstanceItem === null || selectedInstanceItem === void 0 ? void 0 : selectedInstanceItem.categoryItemRef.labelConfig) {\n          this.attrKeys.item = {};\n          const {\n            fields\n          } = selectedInstanceItem.categoryItemRef.labelConfig;\n          for (let i = 0; i < fields.length; i += 1) {\n            const field = fields[i];\n            this.attrKeys.item[field.name] = field;\n          }\n        } else {\n          delete this.attrKeys.item;\n        }\n        if (this.attrKeys.instance && Object.keys(this.attrKeys.instance).length > 0 || this.attrKeys.instanceDynamic && Object.keys(this.attrKeys.instanceDynamic).length > 0 || this.attrKeys.item && Object.keys(this.attrKeys.item).length > 0) {\n          var _selectedInstance$dyn6;\n          // has attributes, add total item\n          const totalItem = {\n            frameStatus: {},\n            color: defaultFrameColor,\n            type: FrameItemType.ENDPOINT\n          };\n          items[`${attrItemPrefix}${itemKeySeparator}total`] = totalItem;\n          // all attributes frames\n          const allFrames = (selectedInstanceItem ? Object.keys(selectedInstanceItem.frameStatus) : Object.keys(selectedInstance.frameStatus)).map(f => Number(f));\n          const instanceFields = this.attrKeys.instance || {};\n          const instanceFieldKeys = Object.keys(instanceFields);\n          const instanceDynamicFields = this.attrKeys.instanceDynamic || {};\n          const instanceDynamicFieldKeys = Object.keys(instanceDynamicFields);\n          const itemFields = this.attrKeys.item || {};\n          const itemFieldKeys = Object.keys(itemFields);\n          const instanceAttrs = selectedInstance.attributes;\n          const instanceDynamicAttrs = (_selectedInstance$dyn6 = selectedInstance.dynamicAttributes) === null || _selectedInstance$dyn6 === void 0 ? void 0 : _selectedInstance$dyn6[currentCamera];\n          const instanceItemCameraData = selectedInstanceItem === null || selectedInstanceItem === void 0 ? void 0 : selectedInstanceItem.cameras[currentCamera];\n          for (let f = 0; f < allFrames.length; f += 1) {\n            const frame = allFrames[f];\n            totalItem.frameStatus[frame] = '';\n            for (let i = 0; i < instanceFieldKeys.length; i += 1) {\n              var _this$filterOutAttrs$5;\n              const fieldKey = instanceFieldKeys[i];\n              if (!((_this$filterOutAttrs$5 = this.filterOutAttrs.instance) === null || _this$filterOutAttrs$5 === void 0 ? void 0 : _this$filterOutAttrs$5.includes(fieldKey))) {\n                const itemKey = `${attrItemPrefix}${itemKeySeparator}instance${itemKeySeparator}${fieldKey}`;\n                if (!items[itemKey]) {\n                  items[itemKey] = {\n                    frameStatus: {},\n                    color: defaultFrameColor,\n                    type: FrameItemType.TEXT\n                  };\n                }\n                const value = instanceAttrs === null || instanceAttrs === void 0 ? void 0 : instanceAttrs[fieldKey];\n                if (value !== undefined && value !== null) {\n                  const displayValue = getFieldDisplayLabel(value, instanceFields[fieldKey]);\n                  items[itemKey].frameStatus[frame] = displayValue;\n                }\n              }\n            }\n            for (let i = 0; i < instanceDynamicFieldKeys.length; i += 1) {\n              var _this$filterOutAttrs$6;\n              const fieldKey = instanceDynamicFieldKeys[i];\n              if (!((_this$filterOutAttrs$6 = this.filterOutAttrs.instanceDynamic) === null || _this$filterOutAttrs$6 === void 0 ? void 0 : _this$filterOutAttrs$6.includes(fieldKey))) {\n                var _instanceDynamicAttrs, _instanceDynamicAttrs2;\n                const itemKey = `${attrItemPrefix}${itemKeySeparator}instanceDynamic${itemKeySeparator}${fieldKey}`;\n                if (!items[itemKey]) {\n                  items[itemKey] = {\n                    frameStatus: {},\n                    color: defaultFrameColor,\n                    type: FrameItemType.TEXT,\n                    draggable: !store.readonly\n                  };\n                }\n                const value = instanceDynamicAttrs === null || instanceDynamicAttrs === void 0 ? void 0 : (_instanceDynamicAttrs = instanceDynamicAttrs[frame]) === null || _instanceDynamicAttrs === void 0 ? void 0 : (_instanceDynamicAttrs2 = _instanceDynamicAttrs.attributes) === null || _instanceDynamicAttrs2 === void 0 ? void 0 : _instanceDynamicAttrs2[fieldKey];\n                if (value !== undefined && value !== null) {\n                  const displayValue = getFieldDisplayLabel(value, instanceDynamicFields[fieldKey]);\n                  items[itemKey].frameStatus[frame] = displayValue;\n                }\n              }\n            }\n            if (instanceItemCameraData) {\n              var _instanceItemCameraDa;\n              const itemAttrs = (_instanceItemCameraDa = instanceItemCameraData.frames[frame]) === null || _instanceItemCameraDa === void 0 ? void 0 : _instanceItemCameraDa.attributes;\n              totalItem.frameStatus[frame] = hash(itemAttrs);\n              for (let i = 0; i < itemFieldKeys.length; i += 1) {\n                var _this$filterOutAttrs$7;\n                const fieldKey = itemFieldKeys[i];\n                if (!((_this$filterOutAttrs$7 = this.filterOutAttrs.item) === null || _this$filterOutAttrs$7 === void 0 ? void 0 : _this$filterOutAttrs$7.includes(fieldKey))) {\n                  const itemKey = `${attrItemPrefix}${itemKeySeparator}item${itemKeySeparator}${fieldKey}`;\n                  if (f === 0) {\n                    // add instance item item\n                    items[itemKey] = {\n                      frameStatus: {},\n                      color: defaultFrameColor,\n                      type: FrameItemType.TEXT,\n                      draggable: !store.readonly\n                    };\n                  }\n                  const value = itemAttrs === null || itemAttrs === void 0 ? void 0 : itemAttrs[fieldKey];\n                  if (value !== undefined && value !== null) {\n                    const displayValue = getFieldDisplayLabel(value, itemFields[fieldKey]);\n                    items[itemKey].frameStatus[frame] = displayValue;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else if (this.framesMode === FramesMode.DEFAULT) {\n      const frameStatus = Object.values(store.instance.instances).map(i => i.frameStatus).reduce((acc, curr) => ({\n        ...acc,\n        ...curr\n      }), {});\n      items.global = {\n        frameStatus,\n        color: defaultFrameColor,\n        selected: true\n      };\n    }\n    this.itemKeys = Object.keys(items);\n    return items;\n  }\n  scrollTo(key) {\n    const doms = document.getElementsByClassName(key);\n    if (doms && doms.length > 0 && this.itemsContainer.current) {\n      const {\n        top: d1Top,\n        bottom: d1Bottom\n      } = doms[0].getBoundingClientRect();\n      const {\n        top: d2Top,\n        bottom: d2Bottom\n      } = doms[doms.length - 1].getBoundingClientRect();\n      const top = Math.min(d1Top, d2Top);\n      const bottom = Math.max(d1Bottom, d2Bottom);\n      const {\n        top: cTop,\n        bottom: cBottom\n      } = this.itemsContainer.current.getBoundingClientRect();\n      if (bottom > cBottom) {\n        this.itemsContainer.current.scrollBy({\n          top: bottom - cBottom\n        });\n      } else if (top < cTop) {\n        this.itemsContainer.current.scrollBy({\n          top: top - cTop\n        });\n      }\n    }\n  }\n  // render item label only for instance attributes panel\n  renderItemLabelForInstanceAttr() {\n    const attrTypeExisted = [];\n    return this.itemKeys.map(itemKey => {\n      const [type, ...rest] = itemKey.split(itemKeySeparator);\n      if (type === attrItemPrefix) {\n        var _this$attrKeys$attrTy3;\n        // is an attr item\n        const attrType = rest[0];\n        const fieldKey = rest[1];\n        const field = (_this$attrKeys$attrTy3 = this.attrKeys[attrType]) === null || _this$attrKeys$attrTy3 === void 0 ? void 0 : _this$attrKeys$attrTy3[fieldKey];\n        const isFirst = [AttrKeys.INSTANCE, AttrKeys.INSTANCE_DYNAMIC, AttrKeys.ITEM].includes(attrType) && attrTypeExisted.indexOf(attrType) < 0;\n        if (isFirst) {\n          attrTypeExisted.push(attrType);\n        }\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: itemKey,\n          className: \"frame-item-label frame-item-label-attr\",\n          style: {\n            height: frameLabelHeight,\n            borderTop: isFirst ? '1px solid #484C59' : 'none'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1217,\n            columnNumber: 11\n          }\n        }, attrType === 'instance' && /*#__PURE__*/React.createElement(Popover, {\n          overlayClassName: \"frame-item-label-attr-tip\",\n          placement: \"bottomRight\",\n          content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1228,\n              columnNumber: 21\n            }\n          }, i18n.translate('PROGRESS_ATTR_STATIC')), /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1229,\n              columnNumber: 21\n            }\n          }, i18n.translate('PROGRESS_ATTR_STATIC_INFO'))),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1223,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(GlobalOutlined, {\n          className: \"frame-item-label-attr-icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1233,\n            columnNumber: 17\n          }\n        })), (field === null || field === void 0 ? void 0 : field.label) || fieldKey || i18n.translate('PROGRESS_ATTR_TOTAL'));\n      }\n      return /*#__PURE__*/React.createElement(ItemLabel, {\n        key: itemKey,\n        itemKey: itemKey,\n        separator: itemKeySeparator,\n        prefix: /*#__PURE__*/React.createElement(\"div\", {\n          className: cx('frame-item-label-attr-filter', {\n            active: this.filterOutAttrsCount > 0\n          }),\n          onClick: this.toggleFilterVisible,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1246,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Filter, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1252,\n            columnNumber: 15\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1241,\n          columnNumber: 9\n        }\n      });\n    });\n  }\n  renderItemLabel(itemKey, i) {\n    if (this.framesMode === FramesMode.FRAME_ATTR) {\n      const [type, ...rest] = itemKey.split(itemKeySeparator);\n      const {\n        isSingleCamera,\n        cameraNames,\n        currentCamera\n      } = store.frame;\n      const cameraIndex = cameraNames.indexOf(currentCamera);\n      if (type === attrFramePrefix) {\n        var _this$attrKeys$attrTy4;\n        const attrType = rest[0];\n        const fieldKey = rest[1];\n        const field = (_this$attrKeys$attrTy4 = this.attrKeys[attrType]) === null || _this$attrKeys$attrTy4 === void 0 ? void 0 : _this$attrKeys$attrTy4[fieldKey];\n        let hasBorderTop = false;\n        if (i >= this.itemKeys.length) {\n          hasBorderTop = true;\n        } else {\n          let lastAttrType = '';\n          const preItemkey = this.itemKeys[i];\n          const [preType, ...preRest] = preItemkey.split(itemKeySeparator);\n          if (preType === attrFramePrefix) {\n            lastAttrType = preRest[0];\n          }\n          hasBorderTop = attrType !== 'total' && attrType !== lastAttrType;\n        }\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: itemKey,\n          className: \"frame-item-label frame-item-label-attr\",\n          style: {\n            height: frameLabelHeight,\n            borderBottom: hasBorderTop ? '1px solid #212633' : 'none'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1284,\n            columnNumber: 11\n          }\n        }, this.renderItemLabelContent(fieldKey, isSingleCamera, cameraIndex, attrType, field));\n      }\n      return /*#__PURE__*/React.createElement(ItemFrameLabel, Object.assign({\n        key: itemKey,\n        itemKeys: this.itemKeys,\n        itemKey: itemKey,\n        separator: itemKeySeparator\n      }, this.framesMode === FramesMode.FRAME_ATTR && {\n        prefix: /*#__PURE__*/React.createElement(\"div\", {\n          className: cx('frame-item-label-attr-filter', {\n            active: this.filterOutAttrsCount > 0\n          }),\n          onClick: this.toggleFilterVisible,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1302,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Filter, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1308,\n            columnNumber: 17\n          }\n        }))\n      }, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1295,\n          columnNumber: 9\n        }\n      }));\n    }\n    return /*#__PURE__*/React.createElement(ItemLabel, Object.assign({\n      key: itemKey,\n      itemKey: itemKey,\n      separator: itemKeySeparator\n    }, this.framesMode === FramesMode.ATTR && {\n      prefix: /*#__PURE__*/React.createElement(\"div\", {\n        className: cx('frame-item-label-attr-filter', {\n          active: this.filterOutAttrsCount > 0\n        }),\n        onClick: this.toggleFilterVisible,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1322,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Filter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1328,\n          columnNumber: 15\n        }\n      }))\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 7\n      }\n    }));\n  }\n  render() {\n    var _commonFrameConfig$fi, _frameConfig$fields;\n    const {\n      selectedInstances,\n      selectedInstanceItems\n    } = store.instance;\n    const {\n      commonFrameConfig,\n      frameConfig\n    } = store.frame;\n    const commonFrameFieldsLength = commonFrameConfig === null || commonFrameConfig === void 0 ? void 0 : (_commonFrameConfig$fi = commonFrameConfig.fields) === null || _commonFrameConfig$fi === void 0 ? void 0 : _commonFrameConfig$fi.length;\n    const cameraConfigFieldsLength = frameConfig === null || frameConfig === void 0 ? void 0 : (_frameConfig$fields = frameConfig.fields) === null || _frameConfig$fields === void 0 ? void 0 : _frameConfig$fields.length;\n    const selectedInstanceItem = selectedInstanceItems.length > 0 ? selectedInstanceItems[0] : null;\n    let selectedInstance = null;\n    if (selectedInstanceItem) {\n      selectedInstance = selectedInstanceItem.instance;\n    } else if (selectedInstances.length > 0) {\n      selectedInstance = selectedInstances[0];\n    }\n    return /*#__PURE__*/React.createElement(ResizableBox, {\n      className: \"frame-control\",\n      style: {\n        height: this.framesHeight + actionsContainerHeight\n      },\n      resizableEdges: this.framesMode !== FramesMode.DEFAULT && ResizableEdge.TOP,\n      onResize: this.resizeFrameControl,\n      onResizeEnd: this.finishResizeFrameControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 11\n      }\n    }, this.framesMode !== FramesMode.ALL && this.framesMode !== FramesMode.FRAME_ATTR && selectedInstance && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1442,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"label-dot\",\n      style: {\n        backgroundColor: this.getBgColor(selectedInstance)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443,\n        columnNumber: 19\n      }\n    }), selectedInstance.label)), /*#__PURE__*/React.createElement(FrameActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-switch\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1454,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('', {\n        active: this.framesMode === FramesMode.DEFAULT\n      }),\n      onClick: () => this.switch(FramesMode.DEFAULT),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 15\n      }\n    }, i18n.translate('PROGRESS_SWITCH_DEFAULT')), /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('', {\n        active: this.framesMode === FramesMode.ALL\n      }),\n      onClick: () => this.switch(FramesMode.ALL),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1461,\n        columnNumber: 15\n      }\n    }, i18n.translate('PROGRESS_SWITCH_ALL')), /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('', {\n        active: this.framesMode === FramesMode.ATTR\n      }),\n      onClick: () => this.switch(FramesMode.ATTR),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1467,\n        columnNumber: 15\n      }\n    }, i18n.translate('PROGRESS_SWITCH_ATTR')), (commonFrameFieldsLength && commonFrameFieldsLength > 0 || cameraConfigFieldsLength && cameraConfigFieldsLength > 0) && /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('', {\n        active: this.framesMode === FramesMode.FRAME_ATTR\n      }),\n      onClick: () => this.switch(FramesMode.FRAME_ATTR),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 17\n      }\n    }, i18n.translate('PROGRESS_SWITCH_FRAME_ATTR'))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frames\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1484,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-items-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1485,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-scaler\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-action-icon\",\n      onClick: () => this.updateFrameCountIndex(this.visibleFramesIndex - 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1487,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Minus, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1491,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        flex: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1493,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Slider, {\n      tooltip: {\n        open: false\n      },\n      step: 1,\n      min: this.visibleFramesIndexArr[0],\n      max: this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1],\n      value: this.visibleFramesIndex,\n      onChange: this.updateFrameCountIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-action-icon\",\n      onClick: () => this.updateFrameCountIndex(this.visibleFramesIndex + 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Plus, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.itemsContainer,\n      className: \"frame-items\",\n      style: {\n        height: this.framesHeight - 44\n      },\n      onScroll: this.onItemsScroll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1510,\n        columnNumber: 13\n      }\n    }, this.framesMode === FramesMode.ATTR && this.renderItemLabelForInstanceAttr(), this.framesMode !== FramesMode.ATTR && this.itemKeys.map((itemKey, i) => this.renderItemLabel(itemKey, i + 1)), (this.framesMode === FramesMode.ATTR || this.framesMode === FramesMode.FRAME_ATTR) && this.filterOutAttrsCount > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-item-filter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 19\n      }\n    }, i18n.translate('PROGRESS_ATTR_FILTER_INFO', {\n      values: {\n        count: this.filterOutAttrsCount\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"frame-item-filter-link\",\n      onClick: this.resetFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521,\n        columnNumber: 19\n      }\n    }, i18n.translate('PROGRESS_ATTR_FILTER_RESET'))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-steps\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1528,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.framesContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 13\n      }\n    }))), this.attrTip && /*#__PURE__*/React.createElement(AttributeTip, {\n      left: this.attrTip.left,\n      bottom: this.attrTip.bottom,\n      attrLabel: this.attrTip.label,\n      attrValue: this.attrTip.value,\n      hoveredFrame: this.attrTip.hoveredFrame,\n      startFrame: this.attrTip.startFrame,\n      endFrame: this.attrTip.endFrame,\n      referenceUrl: this.attrTip.referenceUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1533,\n        columnNumber: 11\n      }\n    }), this.activeAttr && /*#__PURE__*/React.createElement(AttributeForm, {\n      disabled: this.activeAttr.disabled,\n      left: this.activeAttr.left,\n      bottom: this.activeAttr.bottom,\n      fields: this.activeAttr.fields,\n      applyAllEnabled: this.activeAttr.attrType !== 'instance',\n      onSubmit: this.submitAttr,\n      onCancel: this.cancalAttr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1545,\n        columnNumber: 11\n      }\n    }), this.filterVisible && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-attr-mask\",\n      onContextMenu: e => e.preventDefault(),\n      onClick: () => {\n        if (this.framesMode === FramesMode.ATTR && !selectedInstanceItem && !selectedInstance) {\n          return;\n        }\n        this.toggleFilterVisible();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1556,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame-item-label-attr-filter-popover scroller\",\n      style: {\n        left: 0,\n        bottom: this.framesHeight - 20\n      },\n      onClick: e => e.stopPropagation(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566,\n        columnNumber: 13\n      }\n    }, this.framesMode === FramesMode.ATTR && this.filterContentRender(FramesMode.ATTR, [AttrKeys.INSTANCE, AttrKeys.INSTANCE_DYNAMIC, AttrKeys.ITEM]), this.framesMode === FramesMode.FRAME_ATTR && this.filterContentRender(FramesMode.FRAME_ATTR, [AttrKeys.FRAME_ITEM, AttrKeys.CAMERA_ITEM]))));\n  }\n}\nexport default observer(FrameControl);","map":{"version":3,"names":["React","makeObservable","observable","computed","action","reaction","observer","Slider","Popover","GlobalOutlined","CheckOutlined","cx","hexToRgba","cloneDeep","FrameActions","ItemLabel","frameLabelHeight","AttributeTip","AttributeForm","FramesRenderer","EventAction","FrameItemType","ResizableBox","ResizableEdge","Filter","Minus","Plus","store","i18n","cache","CacheKey","getFieldDisplayLabel","getReferenceImageUrl","setInitialValues","ReviewResult","ItemFrameLabel","itemKeySeparator","attrItemPrefix","attrFramePrefix","defaultFrameColor","actionsContainerHeight","defaultFramesHeight","attributesFramesHeight","getRGBAColor","category","alpha","displayColor","ontology","getCategory","getFrameColor","instanceItem","camera","frameColor","cameraData","cameras","Object","values","frames","forEach","frameIndex","result","review","getReviewForInstanceItem","REJECT","isRework","APPROVE","SUSPEND","hash","attributes","allKeys","keys","sort","str","i","length","value","undefined","FramesMode","AttrKeys","FrameControl","Component","filterOutAttrsCount","framesMode","ATTR","filterOutAttrs","instance","instanceDynamic","item","cameraItem","frameItem","constructor","props","reactionDisposers","framesRenderer","framesContainer","createRef","itemsContainer","DEFAULT","framesHeight","savedFramesHeight","visibleFramesIndex","visibleFramesIndexArr","itemKeys","attrKeys","attrTip","activeAttr","filterVisible","updateHeight","height","onHeightChange","updateVisibleFrames","currentIndex","indexArr","updateCurrentFrame","itemIndex","isRightClick","pLeft","pBottom","needOpenContextMenu","itemKey","instanceId","instanceItemId","split","getInstanceById","items","frame","currentCamera","setCamera","selectInstanceItem","isSingle","isSingleCamera","selectInstance","setFrameSync","then","openContextMenu","x","y","updateFrameCountIndex","v","Math","min","max","currentRangeIndex","updateItemsScroll","top","current","scroll","onItemsScroll","e","itemsOffset","target","scrollTop","updateAttrTip","hoveredBlock","hoveredFrame","hoveredItemIndex","FRAME_ATTR","type","rest","fieldKey","_this$attrKeys$attrTy","attrType","field","label","name","referenceUrl","left","bottom","startFrame","endFrame","activateAttr","activeBlock","readonly","attrPrefix","_this$attrKeys$attrTy2","currentFrame","frameAttributes","selectedInstances","selectedInstanceItems","selectedInstanceItem","selectedInstance","fields","disabled","initialValues","INSTANCE","INSTANCE_DYNAMIC","_selectedInstance$dyn","_selectedInstance$dyn2","_selectedInstance$dyn3","dynamicAttributes","ITEM","_selectedInstanceItem","_selectedInstanceItem2","_selectedInstanceItem3","_selectedInstanceItem4","attrChangeAllowed","CAMERA_ITEM","f","visible","cancalAttr","_this$framesRenderer","unselectBlock","submitAttr","applyAll","setFrameAttributesForCamera","setCommonFrameAttributes","storeId","undo","preserve","instances","getBasicInfo","children","setAttributes","save","_selectedInstance$dyn4","currentCameraAttributes","updatedDynamicAttributes","frameData","push","setDynamicAttributesByCamera","frameAttributesMap","prevState","currState","setAttributesByFrame","basicInfo","FRAME_ITEM","applyFrames","Array","fill","map","updateFrameAttributes","index","element","temp","attributesCurrentCamera","updatedFrameAttributes","attrs","valueKeys","key","updateFrameAttr","updatedFrameStatus","updatedItemIndex","_selectedInstance$dyn5","baseFrameAttributes","baseFrame","_currentCameraAttribu","frameStr","_currentCameraAttribu2","Number","frameDataAttributes","baseFrameIndex","_baseFrameAttributes$","_frames$baseFrame","_frames$frameIndex","_baseFrameAttributes$2","updateFrameAttributesForCamera","replaceFrame","replacedFrames","fieldKeyNewAttr","_attributes$currentCa","_frameAttributes$repl","onContextMenu","selectedFrames","toggleFilterVisible","updateFilter","filterOut","indexOf","_this$filterOutAttrs$","splice","getItems","resetFilter","switch","mode","scrollable","renderItemLabelContent","cameraIndex","isFrameAttr","translate","filterContentRender","attrGroups","attrLen","createElement","Fragment","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_this$filterOutAttrs$2","active","includes","getBgColor","bgColor","categoryRef","firstInstanceItem","colorConfig","color","resizeFrameControl","data","delta","TOP","itemsContainerHeight","finishResizeFrameControl","set","FRAMES_CONTROL_HEIGHT","invalidFrames","pointer","lastStoreId","config","reviewMode","prevItems","prevInstances","prevPointer","prevStoreId","prevReviewMode","preCurrentCamera","selectedChanged","some","cameraChanged","componentDidMount","h","get","frameCount","fixHeight","on","HEIGHT_CHANGE","VISIBLE_FRAMES_UPDATE","CURRENT_FRAME_CHANGE","ITEMS_OFFSET_CHANGE","BLOCK_HOVERED","BLOCK_SELECTED","FRAME_STATUS_CHANGED","CONTEXT_MENU","componentDidUpdate","ALL","scrollTo","id","componentWillUnmount","removeEventListeners","off","disposer","allInstances","filteredSelectedInstanceItems","filter","frameStatus","selected","sortedItems","a","b","aIndex","findIndex","c","bIndex","number","isEmpty","join","showCards","commonFrameConfig","frameConfig","cameraConfigFields","frameTotal","ENDPOINT","frameCamera","frameFieldKeys","renderFrameAttrs","_this$filterOutAttrs$3","TEXT","draggable","frameAttributesKeys","frameItemAttrs","renderFrameFieldKeys","frameItemKey","frameItemValue","displayValue","renderCameraAttrs","cameraFieldKeys","_this$filterOutAttrs$4","currentCameraAttrs","cameraAttributesValue","currentCameraInstance","itemAttrs","renderCameraFieldKeys","cameraItemKey","itemValue","_selectedInstanceItem5","labelConfig","labelConfigDynamic","categoryItemRef","_selectedInstance$dyn6","totalItem","allFrames","instanceFields","instanceFieldKeys","instanceDynamicFields","instanceDynamicFieldKeys","itemFields","itemFieldKeys","instanceAttrs","instanceDynamicAttrs","instanceItemCameraData","_this$filterOutAttrs$5","_this$filterOutAttrs$6","_instanceDynamicAttrs","_instanceDynamicAttrs2","_instanceItemCameraDa","_this$filterOutAttrs$7","reduce","acc","curr","global","doms","document","getElementsByClassName","d1Top","d1Bottom","getBoundingClientRect","d2Top","d2Bottom","cTop","cBottom","scrollBy","renderItemLabelForInstanceAttr","attrTypeExisted","_this$attrKeys$attrTy3","isFirst","style","borderTop","overlayClassName","placement","content","separator","prefix","renderItemLabel","cameraNames","_this$attrKeys$attrTy4","hasBorderTop","lastAttrType","preItemkey","preType","preRest","borderBottom","assign","render","_commonFrameConfig$fi","_frameConfig$fields","commonFrameFieldsLength","cameraConfigFieldsLength","resizableEdges","onResize","onResizeEnd","backgroundColor","flex","tooltip","open","step","onChange","ref","onScroll","count","attrLabel","attrValue","applyAllEnabled","onSubmit","onCancel","preventDefault","stopPropagation"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/frames/FrameControl.tsx"],"sourcesContent":["import React from 'react';\nimport { makeObservable, observable, computed, action, reaction, IReactionDisposer } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { Slider, Popover } from 'antd';\nimport { GlobalOutlined, CheckOutlined } from '@ant-design/icons';\nimport { Field } from '@appen-china/easy-form/es/types';\nimport cx from 'classnames';\nimport hexToRgba from 'hex-to-rgba';\nimport { cloneDeep } from 'lodash';\nimport FrameActions from './FrameActions';\nimport ItemLabel, { frameLabelHeight } from './ItemLabel';\nimport AttributeTip from './AttributeTip';\nimport AttributeForm from './AttributeForm';\nimport FramesRenderer, { FrameItem, EventAction, FrameItemType } from '../../../../libs/FramesRenderer';\nimport ResizableBox, { ResizableEdge } from '../../../common/resizable-box/ResizableBox';\nimport { Filter, Minus, Plus } from '../../../common/icons';\nimport Instance from '../../model/Instance';\nimport InstanceItem from '../../model/InstanceItem';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport cache, { CacheKey } from '../../utils-storage';\nimport { getFieldDisplayLabel, getReferenceImageUrl } from '../../../../utils/form';\nimport { setInitialValues } from '../../utils';\nimport { DynamicAttributes, ReviewResult } from '../../types';\nimport './FrameControl.scss';\nimport ItemFrameLabel from './ItemFrameLabel';\n\nconst itemKeySeparator = '|S|';\nconst attrItemPrefix = 'ATTR-ITEM-PREFIX';\nconst attrFramePrefix = 'ATTR-FRAME-PREFIX';\nconst defaultFrameColor = '#5C5F6B';\nconst actionsContainerHeight = 40;\nconst defaultFramesHeight = 64;\nconst attributesFramesHeight = 319;\nfunction getRGBAColor(category: string, alpha = 0.2) {\n  const { displayColor } = store.ontology.getCategory(category) || {};\n  if (displayColor) {\n    return hexToRgba(displayColor, alpha);\n  }\n  return defaultFrameColor;\n}\nfunction getFrameColor(instanceItem: InstanceItem, camera: string) {\n  const frameColor: { [frameIndex: number]: string } = {};\n  const cameraData = instanceItem.cameras[camera];\n  if (cameraData) {\n    Object.values(cameraData.frames).forEach(({ frameIndex }) => {\n      const result = store.review.getReviewForInstanceItem(instanceItem, camera, frameIndex);\n      if (result) {\n        if (result === ReviewResult.REJECT) {\n          frameColor[frameIndex] = '#9C4434';\n        } else if (!store.isRework) {\n          if (result === ReviewResult.APPROVE) {\n            frameColor[frameIndex] = '#3E6F45';\n          } else if (result === ReviewResult.SUSPEND) {\n            frameColor[frameIndex] = '#A28900';\n          }\n        }\n      }\n    });\n  }\n  return frameColor;\n};\nfunction hash(attributes: any) {\n  if (!attributes) {\n    return '';\n  }\n  if (typeof attributes !== 'object') {\n    return `${attributes}`;\n  }\n  const allKeys = Object.keys(attributes).sort();\n  let str = '';\n  for (let i = 0; i < allKeys.length; i += 1) {\n    const value = attributes[allKeys[i]];\n    if (value !== undefined && value !== null) {\n      str += `${value}`;\n    }\n  }\n  return str;\n}\n\nenum FramesMode {\n  DEFAULT = 'default',\n  ALL = 'all',\n  ATTR = 'attributes',\n  FRAME_ATTR = 'attributes_frame'\n}\n\nenum AttrKeys {\n  INSTANCE = 'instance',\n  INSTANCE_DYNAMIC = 'instanceDynamic',\n  ITEM = 'item',\n  CAMERA_ITEM = 'cameraItem',\n  FRAME_ITEM = 'frameItem',\n  TOTAL = 'total'\n}\ninterface FrameControlProps {\n  onHeightChange: (height: number) => void;\n}\n\nclass FrameControl extends React.Component<FrameControlProps> {\n  reactionDisposers: IReactionDisposer[] = [];\n\n  framesRenderer: FramesRenderer | null = null;\n\n  framesContainer = React.createRef<HTMLDivElement>();\n\n  itemsContainer = React.createRef<HTMLDivElement>();\n\n  framesMode = FramesMode.DEFAULT;\n\n  framesHeight = defaultFramesHeight;\n\n  savedFramesHeight = attributesFramesHeight;\n\n  visibleFramesIndex = 0;\n\n  visibleFramesIndexArr: number[] = [];\n\n  itemKeys: string[] = [];\n\n  attrKeys: {\n    [key in AttrKeys]?: {\n      [fieldKey: string]: Field;\n    }\n  } = {};\n\n  attrTip: {\n    left: number;\n    bottom: number;\n    hoveredFrame: number;\n    startFrame: number;\n    endFrame: number;\n    label?: string;\n    value?: string;\n    referenceUrl?: string;\n  } | null = null;\n\n  activeAttr: {\n    left: number;\n    bottom: number;\n    startFrame: number;\n    endFrame: number;\n    attrType: AttrKeys;\n    fieldKey: string;\n    fields: Field[];\n    disabled?: boolean;\n  } | null = null;\n\n  filterVisible = false;\n\n  filterOutAttrs: {\n    [key in AttrKeys]?: string[];\n  } = {};\n\n  get filterOutAttrsCount() {\n    if (this.framesMode === FramesMode.ATTR) {\n      return (this.filterOutAttrs.instance || []).length + (this.filterOutAttrs.instanceDynamic || []).length + (this.filterOutAttrs.item || []).length;\n    }\n    return (this.filterOutAttrs.cameraItem || []).length + (this.filterOutAttrs.frameItem || []).length;\n  }\n\n  constructor(props: FrameControlProps) {\n    super(props);\n\n    makeObservable(this, {\n      framesMode: observable,\n      framesHeight: observable,\n      visibleFramesIndex: observable,\n      visibleFramesIndexArr: observable,\n      itemKeys: observable,\n      attrTip: observable,\n      activeAttr: observable,\n      filterVisible: observable,\n      filterOutAttrs: observable,\n      filterOutAttrsCount: computed,\n      getItems: action,\n      updateHeight: action,\n      updateVisibleFrames: action,\n      updateFrameCountIndex: action,\n      updateItemsScroll: action,\n      updateAttrTip: action,\n      activateAttr: action,\n      cancalAttr: action,\n      toggleFilterVisible: action,\n      updateFilter: action,\n      resetFilter: action,\n      switch: action,\n    });\n\n    // when current frame changes\n    this.reactionDisposers.push(reaction(\n      () => store.frame.currentFrame,\n      () => {\n        if (this.framesRenderer) {\n          this.framesRenderer.currentFrame = store.frame.currentFrame;\n        }\n        this.cancalAttr();\n      },\n    ));\n\n    // when invalid frames changes\n    this.reactionDisposers.push(reaction(\n      () => store.frame.invalidFrames,\n      () => {\n        if (this.framesRenderer) {\n          this.framesRenderer.invalidFrames = store.frame.invalidFrames;\n        }\n      },\n    ));\n\n    // when instance changes, or data changes\n    this.reactionDisposers.push(reaction(\n      () => [\n        store.instance.selectedInstanceItems,\n        store.instance.selectedInstances,\n        store.undo.pointer,\n        store.undo.lastStoreId,\n        store.config.reviewMode,\n        store.frame.currentCamera\n      ],\n      (\n        [items, instances, pointer, storeId, reviewMode, currentCamera],\n        [prevItems, prevInstances, prevPointer, prevStoreId, prevReviewMode, preCurrentCamera]\n      ) => {\n        const selectedChanged = (items as InstanceItem[]).length !== (prevItems as InstanceItem[]).length\n          || (items as InstanceItem[]).some((i) => (prevItems as InstanceItem[]).indexOf(i) < 0)\n          || (instances as Instance[]).length !== (prevInstances as Instance[]).length\n          || (instances as Instance[]).some((i) => (prevInstances as Instance[]).indexOf(i) < 0);\n        const cameraChanged = currentCamera !== preCurrentCamera;\n        if (selectedChanged) {\n          this.filterOutAttrs.instance = [];\n          this.filterOutAttrs.instanceDynamic = [];\n          this.filterOutAttrs.item = [];\n        }\n        if (cameraChanged) {\n          this.filterOutAttrs.cameraItem = [];\n          this.filterOutAttrs.frameItem = [];\n        }\n        if (this.framesRenderer && (\n          selectedChanged ||\n          cameraChanged ||\n          pointer !== prevPointer ||\n          storeId !== prevStoreId ||\n          reviewMode !== prevReviewMode\n        )) {\n          this.framesRenderer.items = this.getItems();\n        }\n      },\n    ));\n  }\n\n  componentDidMount() {\n    const h = cache.get(CacheKey.FRAMES_CONTROL_HEIGHT);\n    if (h !== undefined) {\n      this.savedFramesHeight = h;\n    }\n    if (this.framesContainer.current) {\n      this.framesRenderer = new FramesRenderer(this.framesContainer.current, store.frame.frameCount, { fixHeight: true });\n      this.framesRenderer.on(EventAction.HEIGHT_CHANGE, this.updateHeight);\n      this.framesRenderer.on(EventAction.VISIBLE_FRAMES_UPDATE, this.updateVisibleFrames);\n      this.framesRenderer.on(EventAction.CURRENT_FRAME_CHANGE, this.updateCurrentFrame);\n      this.framesRenderer.on(EventAction.ITEMS_OFFSET_CHANGE, this.updateItemsScroll);\n      this.framesRenderer.on(EventAction.BLOCK_HOVERED, this.updateAttrTip);\n      this.framesRenderer.on(EventAction.BLOCK_SELECTED, this.activateAttr);\n      this.framesRenderer.on(EventAction.FRAME_STATUS_CHANGED, this.updateFrameAttr);\n      this.framesRenderer.on(EventAction.CONTEXT_MENU, this.onContextMenu);\n      this.framesRenderer.items = this.getItems();\n      this.framesRenderer.invalidFrames = store.frame.invalidFrames;\n      this.framesRenderer.itemsContainerHeight = this.savedFramesHeight - actionsContainerHeight;\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.framesMode === FramesMode.ALL) {\n      // scroll after dom updates\n      if (store.instance.selectedInstanceItems.length > 0) {\n        this.scrollTo(`frame-item-instance-item-${store.instance.selectedInstanceItems[0].id}`);\n      } else if (store.instance.selectedInstances.length > 0) {\n        this.scrollTo(`frame-item-instance-${store.instance.selectedInstances[0].id}`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.framesRenderer) {\n      this.framesRenderer.removeEventListeners();\n      this.framesRenderer.off(EventAction.HEIGHT_CHANGE, this.updateHeight);\n      this.framesRenderer.off(EventAction.VISIBLE_FRAMES_UPDATE, this.updateVisibleFrames);\n      this.framesRenderer.off(EventAction.CURRENT_FRAME_CHANGE, this.updateCurrentFrame);\n      this.framesRenderer.off(EventAction.ITEMS_OFFSET_CHANGE, this.updateItemsScroll);\n      this.framesRenderer.off(EventAction.BLOCK_HOVERED, this.updateAttrTip);\n      this.framesRenderer.off(EventAction.BLOCK_SELECTED, this.activateAttr);\n      this.framesRenderer.off(EventAction.FRAME_STATUS_CHANGED, this.updateFrameAttr);\n      this.framesRenderer.off(EventAction.CONTEXT_MENU, this.onContextMenu);\n    }\n    this.reactionDisposers.forEach((disposer) => disposer());\n  }\n\n  getItems() {\n    const items: { [id: string]: FrameItem } = {};\n\n    const { selectedInstances, selectedInstanceItems, allInstances } = store.instance;\n    const { currentCamera, isSingleCamera } = store.frame;\n\n    if (this.framesMode === FramesMode.ALL) {\n      allInstances.forEach((instance) => {\n        if (selectedInstances.indexOf(instance) >= 0) {\n          const isSingle = instance.isSingle && isSingleCamera;\n          const color = getRGBAColor(instance.category);\n          const filteredSelectedInstanceItems = selectedInstanceItems.filter((item) => item.instance === instance);\n          // add instance\n          if (!isSingle) {\n            items[instance.id] = {\n              frameStatus: {},\n              color,\n              selected: filteredSelectedInstanceItems.length <= 0,\n            };\n            const { children } = instance.categoryRef;\n            const sortedItems = Object.values(instance.items)\n              .sort((a, b) => {\n                const aIndex = children.findIndex((c) => c.name === a.name);\n                const bIndex = children.findIndex((c) => c.name === b.name);\n                if (aIndex < bIndex) {\n                  return -1;\n                }\n                if (aIndex > bIndex) {\n                  return 1;\n                }\n                return a.number - b.number;\n              });\n            sortedItems.forEach((item) => {\n              Object.values(item.cameras).forEach((camera) => {\n                if (!camera.isEmpty) {\n                  const key = [instance.id, item.id, camera.camera].join(itemKeySeparator);\n                  items[key] = {\n                    frameStatus: camera.frameStatus,\n                    frameColor: getFrameColor(item, camera.camera),\n                    color: hexToRgba(item.colorConfig.color || defaultFrameColor, 0.2),\n                    showCards: true,\n                    selected: filteredSelectedInstanceItems.indexOf(item) >= 0 && camera.camera === currentCamera,\n                  };\n                }\n              });\n            });\n          } else {\n            const item = Object.values(instance.items)[0];\n            if (item) {\n              items[instance.id] = {\n                frameStatus: instance.frameStatus,\n                frameColor: getFrameColor(item, currentCamera),\n                color: hexToRgba(item.colorConfig.color || defaultFrameColor, 0.2),\n                showCards: true,\n                selected: true,\n              };\n            }\n          }\n        } else {\n          items[instance.id] = {\n            frameStatus: instance.frameStatus,\n            color: getRGBAColor(instance.category),\n          };\n        }\n      });\n    } else if (this.framesMode === FramesMode.FRAME_ATTR) {\n      const { commonFrameConfig, frameAttributes, frameConfig, attributes } = store.frame;\n      const cameraConfigFields = frameConfig?.fields;\n      if (commonFrameConfig) {\n        const { fields } = commonFrameConfig;\n        this.attrKeys.frameItem = {};\n        for (let i = 0; i < fields.length; i += 1) {\n          const field = fields[i];\n          this.attrKeys.frameItem[field.name] = field;\n        }\n      }\n      if (cameraConfigFields) {\n        this.attrKeys.cameraItem = {};\n        for (let i = 0; i < cameraConfigFields.length; i += 1) {\n          const field = cameraConfigFields[i];\n          this.attrKeys.cameraItem[field.name] = field;\n        }\n      }\n      if ((this.attrKeys.frameItem && Object.keys(this.attrKeys.frameItem).length > 0) ||\n        (this.attrKeys.cameraItem && Object.keys(this.attrKeys.cameraItem).length > 0)) {\n        const frameTotal: FrameItem = {\n          frameStatus: {},\n          color: defaultFrameColor,\n          type: FrameItemType.ENDPOINT,\n        };\n        const frameCamera: FrameItem = {\n          frameStatus: {},\n          color: defaultFrameColor,\n          selected: true,\n        };\n        items.frameCamera = frameCamera;\n        items[`${attrFramePrefix}${itemKeySeparator}total`] = frameTotal;\n        if (commonFrameConfig) {\n          const frameFieldKeys = Object.keys(this.attrKeys.frameItem || {});\n          const renderFrameAttrs: { [key: string]: boolean } = {};\n          for (let i = 0; i < frameFieldKeys.length; i += 1) {\n            const fieldKey = frameFieldKeys[i];\n            if (!this.filterOutAttrs.frameItem?.includes(fieldKey)) {\n              renderFrameAttrs[fieldKey] = true;\n              const itemKey = `${attrFramePrefix}${itemKeySeparator}frameItem${itemKeySeparator}${fieldKey}`;\n              items[itemKey] = {\n                frameStatus: {},\n                color: defaultFrameColor,\n                type: FrameItemType.TEXT,\n                draggable: !store.readonly,\n              };\n            }\n          }\n          const frameAttributesKeys = Object.keys(frameAttributes);\n          for (let index = 0; index < frameAttributesKeys.length; index += 1) {\n            const frameIndex = Number(frameAttributesKeys[index]);\n            const frameItemAttrs = frameAttributes[frameIndex];\n            if (frameItemAttrs) {\n              const renderFrameFieldKeys = Object.keys(renderFrameAttrs);\n              for (let i = 0; i < renderFrameFieldKeys.length; i += 1) {\n                const fieldKey = renderFrameFieldKeys[i];\n                frameTotal.frameStatus[frameIndex] = hash(frameItemAttrs);\n                frameCamera.frameStatus[frameIndex] = true;\n                const frameItemKey = `${attrFramePrefix}${itemKeySeparator}frameItem${itemKeySeparator}${fieldKey}`;\n                const frameItemValue = frameItemAttrs[fieldKey];\n                if (frameItemValue !== undefined && frameItemValue !== null) {\n                  const displayValue = getFieldDisplayLabel(frameItemValue, (this.attrKeys.frameItem ? this.attrKeys.frameItem[fieldKey] : undefined));\n                  items[frameItemKey].frameStatus[frameIndex] = displayValue;\n                }\n              }\n            }\n          }\n        }\n\n        if (cameraConfigFields) {\n          const renderCameraAttrs: { [key: string]: boolean } = {};\n          const cameraFieldKeys = Object.keys(this.attrKeys.cameraItem || {});\n          for (let i = 0; i < cameraFieldKeys.length; i += 1) {\n            const fieldKey = cameraFieldKeys[i];\n            if (!this.filterOutAttrs.cameraItem?.includes(fieldKey)) {\n              renderCameraAttrs[fieldKey] = true;\n              const itemKey = `${attrFramePrefix}${itemKeySeparator}cameraItem${itemKeySeparator}${fieldKey}`;\n              items[itemKey] = {\n                frameStatus: {},\n                color: defaultFrameColor,\n                type: FrameItemType.TEXT,\n                draggable: !store.readonly,\n              };\n            }\n          }\n          const currentCameraAttrs = attributes[currentCamera];\n          if (currentCameraAttrs) {\n            const cameraAttributesValue = Object.values(currentCameraAttrs);\n            for (let frameIndex = 0; frameIndex < cameraAttributesValue.length; frameIndex += 1) {\n              const currentCameraInstance = cameraAttributesValue[frameIndex];\n              if (currentCameraInstance) {\n                const itemAttrs = currentCameraInstance.attributes;\n                if (itemAttrs) {\n                  frameTotal.frameStatus[frameIndex] += hash(itemAttrs);\n                  frameCamera.frameStatus[frameIndex] = true;\n                  const renderCameraFieldKeys = Object.keys(renderCameraAttrs);\n                  for (let i = 0; i < renderCameraFieldKeys.length; i += 1) {\n                    const fieldKey = renderCameraFieldKeys[i];\n                    const cameraItemKey = `${attrFramePrefix}${itemKeySeparator}cameraItem${itemKeySeparator}${fieldKey}`;\n                    const itemValue = itemAttrs[fieldKey];\n                    if (itemValue !== undefined && itemValue !== null) {\n                      const displayValue = getFieldDisplayLabel(itemValue, (this.attrKeys.cameraItem ? this.attrKeys.cameraItem[fieldKey] : undefined));\n                      items[cameraItemKey].frameStatus[frameIndex] = displayValue;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else if (selectedInstances.length > 0) {\n      const selectedInstanceItem = selectedInstanceItems[0];\n      const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n      if (!selectedInstanceItem) {\n        // only instance selected\n        items[selectedInstance.id] = {\n          frameStatus: selectedInstance.frameStatus,\n          color: getRGBAColor(selectedInstance.category),\n        };\n      } else {\n        // instance item in current frame selected\n        const key = [selectedInstance.id, selectedInstanceItem.id, currentCamera].join(itemKeySeparator);\n        items[key] = {\n          frameStatus: selectedInstanceItem.cameras[currentCamera]?.frameStatus,\n          frameColor: getFrameColor(selectedInstanceItem, currentCamera),\n          color: hexToRgba(selectedInstanceItem.colorConfig.color || defaultFrameColor, 0.2),\n          showCards: true,\n          selected: true,\n        };\n      }\n      if (this.framesMode === FramesMode.ATTR) {\n        // init attr key mapping\n        if (selectedInstance.categoryRef.labelConfig) {\n          this.attrKeys.instance = {};\n          const { fields } = selectedInstance.categoryRef.labelConfig;\n          for (let i = 0; i < fields.length; i += 1) {\n            const field = fields[i];\n            this.attrKeys.instance[field.name] = field;\n          }\n        } else {\n          delete this.attrKeys.instance;\n        }\n\n        if (selectedInstance.categoryRef.labelConfigDynamic) {\n          this.attrKeys.instanceDynamic = {};\n          const { fields } = selectedInstance.categoryRef.labelConfigDynamic;\n          for (let i = 0; i < fields.length; i += 1) {\n            const field = fields[i];\n            this.attrKeys.instanceDynamic[field.name] = field;\n          }\n        } else {\n          delete this.attrKeys.instanceDynamic;\n        }\n        if (selectedInstanceItem?.categoryItemRef.labelConfig) {\n          this.attrKeys.item = {};\n          const { fields } = selectedInstanceItem.categoryItemRef.labelConfig;\n          for (let i = 0; i < fields.length; i += 1) {\n            const field = fields[i];\n            this.attrKeys.item[field.name] = field;\n          }\n        } else {\n          delete this.attrKeys.item;\n        }\n\n        if (\n          (this.attrKeys.instance && Object.keys(this.attrKeys.instance).length > 0) ||\n          (this.attrKeys.instanceDynamic && Object.keys(this.attrKeys.instanceDynamic).length > 0) ||\n          (this.attrKeys.item && Object.keys(this.attrKeys.item).length > 0)\n        ) {\n          // has attributes, add total item\n          const totalItem: FrameItem = {\n            frameStatus: {},\n            color: defaultFrameColor,\n            type: FrameItemType.ENDPOINT,\n          };\n          items[`${attrItemPrefix}${itemKeySeparator}total`] = totalItem;\n          // all attributes frames\n          const allFrames = (selectedInstanceItem\n            ? Object.keys(selectedInstanceItem.frameStatus)\n            : Object.keys(selectedInstance.frameStatus)\n          ).map((f) => Number(f));\n\n          const instanceFields = this.attrKeys.instance || {};\n          const instanceFieldKeys = Object.keys(instanceFields);\n          const instanceDynamicFields = this.attrKeys.instanceDynamic || {};\n          const instanceDynamicFieldKeys = Object.keys(instanceDynamicFields);\n          const itemFields = this.attrKeys.item || {};\n          const itemFieldKeys = Object.keys(itemFields);\n          const instanceAttrs = selectedInstance.attributes;\n          const instanceDynamicAttrs = selectedInstance.dynamicAttributes?.[currentCamera];\n          const instanceItemCameraData = selectedInstanceItem?.cameras[currentCamera];\n          for (let f = 0; f < allFrames.length; f += 1) {\n            const frame = allFrames[f];\n            totalItem.frameStatus[frame] = '';\n\n            for (let i = 0; i < instanceFieldKeys.length; i += 1) {\n              const fieldKey = instanceFieldKeys[i];\n              if (!this.filterOutAttrs.instance?.includes(fieldKey)) {\n                const itemKey = `${attrItemPrefix}${itemKeySeparator}instance${itemKeySeparator}${fieldKey}`;\n                if (!items[itemKey]) {\n                  items[itemKey] = {\n                    frameStatus: {},\n                    color: defaultFrameColor,\n                    type: FrameItemType.TEXT,\n                  };\n                }\n                const value = instanceAttrs?.[fieldKey];\n                if (value !== undefined && value !== null) {\n                  const displayValue = getFieldDisplayLabel(value, instanceFields[fieldKey]);\n                  items[itemKey].frameStatus[frame] = displayValue;\n                }\n              }\n            }\n            for (let i = 0; i < instanceDynamicFieldKeys.length; i += 1) {\n              const fieldKey = instanceDynamicFieldKeys[i];\n              if (!this.filterOutAttrs.instanceDynamic?.includes(fieldKey)) {\n                const itemKey = `${attrItemPrefix}${itemKeySeparator}instanceDynamic${itemKeySeparator}${fieldKey}`;\n                if (!items[itemKey]) {\n                  items[itemKey] = {\n                    frameStatus: {},\n                    color: defaultFrameColor,\n                    type: FrameItemType.TEXT,\n                    draggable: !store.readonly,\n                  };\n                }\n                const value = instanceDynamicAttrs?.[frame]?.attributes?.[fieldKey];\n                if (value !== undefined && value !== null) {\n                  const displayValue = getFieldDisplayLabel(value, instanceDynamicFields[fieldKey]);\n                  items[itemKey].frameStatus[frame] = displayValue;\n                }\n              }\n            }\n\n            if (instanceItemCameraData) {\n              const itemAttrs = instanceItemCameraData.frames[frame]?.attributes;\n              totalItem.frameStatus[frame] = hash(itemAttrs);\n              for (let i = 0; i < itemFieldKeys.length; i += 1) {\n                const fieldKey = itemFieldKeys[i];\n                if (!this.filterOutAttrs.item?.includes(fieldKey)) {\n                  const itemKey = `${attrItemPrefix}${itemKeySeparator}item${itemKeySeparator}${fieldKey}`;\n                  if (f === 0) {\n                    // add instance item item\n                    items[itemKey] = {\n                      frameStatus: {},\n                      color: defaultFrameColor,\n                      type: FrameItemType.TEXT,\n                      draggable: !store.readonly,\n                    };\n                  }\n                  const value = itemAttrs?.[fieldKey];\n                  if (value !== undefined && value !== null) {\n                    const displayValue = getFieldDisplayLabel(value, itemFields[fieldKey]);\n                    items[itemKey].frameStatus[frame] = displayValue;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else if (this.framesMode === FramesMode.DEFAULT) {\n      const frameStatus = Object.values(store.instance.instances)\n        .map((i) => i.frameStatus)\n        .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n      items.global = {\n        frameStatus,\n        color: defaultFrameColor,\n        selected: true,\n      };\n    }\n\n    this.itemKeys = Object.keys(items);\n    return items;\n  }\n\n  updateHeight = (height: number) => {\n    this.framesHeight = height;\n    this.props.onHeightChange(height + actionsContainerHeight);\n  };\n\n  updateVisibleFrames = (currentIndex: number, indexArr?: number[]) => {\n    this.visibleFramesIndex = currentIndex;\n    if (indexArr) {\n      this.visibleFramesIndexArr = indexArr;\n    }\n  };\n\n  updateCurrentFrame = (frameIndex: number, itemIndex: number, isRightClick?: boolean, pLeft?: number, pBottom?: number) => {\n    let needOpenContextMenu = false;\n    const itemKey = this.itemKeys[itemIndex];\n    if (itemKey) {\n      const [instanceId, instanceItemId, camera] = itemKey.split(itemKeySeparator);\n      const instance = store.instance.getInstanceById(instanceId);\n      if (instance) {\n        const item = instance.items[instanceItemId];\n        if (item) {\n          if (camera !== store.frame.currentCamera) {\n            store.frame.setCamera(camera);\n          }\n          store.instance.selectInstanceItem(item, false, false);\n          needOpenContextMenu = true;\n        } else {\n          const isSingle = instance.isSingle && store.frame.isSingleCamera;\n          if (!isSingle) {\n            store.instance.selectInstanceItem(null, false, false);\n          } else {\n            needOpenContextMenu = true;\n          }\n          store.instance.selectInstance(instance, false, false);\n        }\n      } else {\n        needOpenContextMenu = true;\n      }\n    }\n    store.frame.setFrameSync(frameIndex, true).then(() => {\n      if (\n        needOpenContextMenu &&\n        isRightClick &&\n        pLeft !== undefined &&\n        pBottom !== undefined &&\n        this.visibleFramesIndex === this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1]\n      ) {\n        store.openContextMenu({\n          x: pLeft,\n          y: -pBottom,\n        });\n      }\n    });\n  };\n\n  updateFrameCountIndex = (v: number) => {\n    this.visibleFramesIndex = Math.min(\n      Math.max(v, this.visibleFramesIndexArr[0]),\n      this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1],\n    );\n    if (this.framesRenderer) {\n      this.framesRenderer.currentRangeIndex = this.visibleFramesIndex;\n    }\n  };\n\n  updateItemsScroll = (top: number) => {\n    if (this.itemsContainer.current) {\n      this.itemsContainer.current.scroll({ top });\n    }\n    // hide attr tip when scroll\n    this.attrTip = null;\n  };\n\n  onItemsScroll: React.UIEventHandler<HTMLDivElement> = (e) => {\n    if (this.framesRenderer) {\n      this.framesRenderer.itemsOffset = (e.target as HTMLDivElement).scrollTop;\n    }\n  };\n\n  scrollTo(key: string) {\n    const doms = document.getElementsByClassName(key);\n    if (doms && doms.length > 0 && this.itemsContainer.current) {\n      const { top: d1Top, bottom: d1Bottom } = doms[0].getBoundingClientRect();\n      const { top: d2Top, bottom: d2Bottom } = doms[doms.length - 1].getBoundingClientRect();\n      const top = Math.min(d1Top, d2Top);\n      const bottom = Math.max(d1Bottom, d2Bottom);\n      const { top: cTop, bottom: cBottom } = this.itemsContainer.current.getBoundingClientRect();\n      if (bottom > cBottom) {\n        this.itemsContainer.current.scrollBy({ top: bottom - cBottom });\n      } else if (top < cTop) {\n        this.itemsContainer.current.scrollBy({ top: top - cTop });\n      }\n    }\n  }\n\n  updateAttrTip = (\n    hoveredBlock?: { startFrame: number; endFrame: number; value: string } | null,\n    hoveredFrame?: number,\n    hoveredItemIndex?: number,\n    pLeft?: number,\n    pBottom?: number,\n  ) => {\n    this.attrTip = null;\n    if ((this.framesMode === FramesMode.ATTR || this.framesMode === FramesMode.FRAME_ATTR) &&\n      hoveredBlock &&\n      hoveredFrame !== undefined &&\n      hoveredItemIndex !== undefined &&\n      pLeft !== undefined &&\n      pBottom !== undefined) {\n      const itemKey = this.itemKeys[hoveredItemIndex];\n      if (itemKey) {\n        const [type, ...rest] = itemKey.split(itemKeySeparator);\n        if (type === attrItemPrefix || type === attrFramePrefix) {\n          const fieldKey = rest[1];\n          if (fieldKey) {\n            const attrType = rest[0] as AttrKeys;\n            const field = this.attrKeys[attrType]?.[fieldKey];\n            const label = field?.label || field?.name || fieldKey;\n            const referenceUrl = getReferenceImageUrl(hoveredBlock.value, field, ['label', 'value']);\n            this.attrTip = {\n              left: pLeft,\n              bottom: pBottom,\n              hoveredFrame,\n              startFrame: hoveredBlock.startFrame,\n              endFrame: hoveredBlock.endFrame,\n              value: hoveredBlock.value,\n              label,\n              ...referenceUrl && { referenceUrl }\n            };\n          }\n        }\n      }\n    }\n  };\n\n  activateAttr = (\n    activeBlock: { startFrame: number; endFrame: number },\n    hoveredItemIndex: number,\n    pLeft: number,\n    pBottom: number,\n  ) => {\n    if (!store.readonly) {\n      if (this.framesMode === FramesMode.ATTR || this.framesMode === FramesMode.FRAME_ATTR) {\n        const attrPrefix = this.framesMode === FramesMode.ATTR ? attrItemPrefix : attrFramePrefix;\n        const itemKey = this.itemKeys[hoveredItemIndex];\n\n        if (itemKey) {\n          const [type, ...rest] = itemKey.split(itemKeySeparator);\n          if (type === attrPrefix) {\n            const attrType = rest[0] as AttrKeys;\n            const fieldKey = rest[1];\n            const field = this.attrKeys[attrType]?.[fieldKey];\n            if (field) {\n              const { currentCamera, currentFrame, attributes, frameAttributes } = store.frame;\n              const { selectedInstances, selectedInstanceItems } = store.instance;\n              const selectedInstanceItem = selectedInstanceItems[0];\n              const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n              let fields: any[] = [];\n              let disabled = false;\n              if (this.framesMode === FramesMode.ATTR) {\n                let initialValues: any;\n                switch (attrType) {\n                  case AttrKeys.INSTANCE: {\n                    initialValues = selectedInstance.attributes;\n                    break;\n                  }\n                  case AttrKeys.INSTANCE_DYNAMIC: {\n                    initialValues = selectedInstance.dynamicAttributes?.[currentCamera]?.[currentFrame]?.attributes;\n                    break;\n                  }\n                  case AttrKeys.ITEM: {\n                    initialValues = selectedInstanceItem.cameras[currentCamera]?.frames[currentFrame]?.attributes;\n                    disabled = !selectedInstanceItem.cameras[currentCamera]?.frames[currentFrame]?.attrChangeAllowed;\n                    break;\n                  }\n                  default:\n                    break;\n                }\n                fields = setInitialValues(\n                  [field],\n                  initialValues\n                );\n              } else {\n                fields = setInitialValues(\n                  [field],\n                  attrType === AttrKeys.CAMERA_ITEM ? attributes[currentCamera][currentFrame].attributes : frameAttributes[currentFrame],\n                );\n              }\n              fields.forEach((f) => {\n                f.visible = true; // always set to visible\n              });\n              this.activeAttr = {\n                left: pLeft,\n                bottom: pBottom,\n                startFrame: activeBlock.startFrame,\n                endFrame: activeBlock.endFrame,\n                attrType,\n                fieldKey,\n                fields,\n                disabled,\n              };\n            }\n          }\n        }\n      }\n    } else {\n      this.cancalAttr();\n    }\n  };\n\n  cancalAttr = () => {\n    this.framesRenderer?.unselectBlock();\n    this.activeAttr = null;\n  };\n\n  submitAttr = (values: any, applyAll: boolean) => {\n    if (this.activeAttr && values) {\n      const { selectedInstances, selectedInstanceItems } = store.instance;\n      const selectedInstanceItem = selectedInstanceItems[0];\n      const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n\n      const { attrType, fieldKey, startFrame, endFrame } = this.activeAttr;\n      const { setFrameAttributesForCamera, currentCamera, currentFrame, frameAttributes, setCommonFrameAttributes, attributes } = store.frame;\n      const value = values[fieldKey];\n      switch (attrType) {\n        case AttrKeys.INSTANCE: {\n          const storeId = store.undo.preserve({\n            instances: [{ ...selectedInstance.getBasicInfo(), children: [] }],\n          });\n          selectedInstance.setAttributes({ ...selectedInstance.attributes, [fieldKey]: value });\n          store.undo.save(storeId, {\n            instances: [{ ...selectedInstance.getBasicInfo(), children: [] }],\n          });\n          break;\n        }\n        case AttrKeys.INSTANCE_DYNAMIC: {\n          const storeId = store.undo.preserve({\n            instances: [{ ...selectedInstance.getBasicInfo(), children: [] }],\n          });\n          const currentCameraAttributes = selectedInstance.dynamicAttributes?.[currentCamera];\n          const updatedDynamicAttributes: DynamicAttributes[] = [];\n          if (applyAll) {\n            for (let i = startFrame; i < endFrame; i += 1) {\n              const frameData = currentCameraAttributes?.[i];\n              updatedDynamicAttributes.push({\n                frameIndex: i,\n                attributes: { ...frameData?.attributes, [fieldKey]: value },\n              });\n            }\n          } else {\n            const frameData = currentCameraAttributes?.[currentFrame];\n            updatedDynamicAttributes.push({\n              frameIndex: currentFrame,\n              attributes: { ...frameData?.attributes, [fieldKey]: value },\n            });\n          }\n\n          selectedInstance.setDynamicAttributesByCamera(currentCamera, updatedDynamicAttributes);\n          store.undo.save(storeId, {\n            instances: [{ ...selectedInstance.getBasicInfo(), children: [] }],\n          });\n          break;\n        }\n        case AttrKeys.ITEM: {\n          const cameraData = selectedInstanceItem.cameras[currentCamera];\n          if (cameraData) {\n            const frameAttributesMap: {\n              [frameIndex: number]: { attributes: any };\n            } = {};\n            if (applyAll) {\n              for (let i = startFrame; i < endFrame; i += 1) {\n                const frameData = cameraData.frames[i];\n                frameAttributesMap[i] = {\n                  attributes: { ...frameData.attributes, [fieldKey]: value },\n                };\n              }\n            } else {\n              const frameData = cameraData.frames[currentFrame];\n              frameAttributesMap[currentFrame] = {\n                attributes: { ...frameData.attributes, [fieldKey]: value },\n              };\n            }\n            const { prevState, currState } = selectedInstanceItem.setAttributesByFrame(currentCamera, frameAttributesMap);\n            const basicInfo = selectedInstance.getBasicInfo();\n            store.undo.push({\n              instances: [{ ...basicInfo, children: prevState ? [prevState] : [] }],\n            }, {\n              instances: [{ ...basicInfo, children: currState ? [currState] : [] }],\n            });\n          }\n          break;\n        }\n        case AttrKeys.FRAME_ITEM: {\n          const applyFrames = applyAll\n            ? new Array(endFrame - startFrame).fill(0).map((v, i) => i + startFrame)\n            : [currentFrame];\n          const updateFrameAttributes = [];\n          for (let index = 0; index < applyFrames.length; index += 1) {\n            const element = applyFrames[index];\n            const temp = {\n              frameIndex: element,\n              attributes: {\n                ...frameAttributes[element],\n                ...values,\n              },\n            };\n            updateFrameAttributes.push(temp);\n          }\n          setCommonFrameAttributes(updateFrameAttributes);\n          break;\n        }\n        case AttrKeys.CAMERA_ITEM: {\n          const attributesCurrentCamera = attributes[currentCamera];\n          const applyFrames = applyAll\n            ? new Array(endFrame - startFrame).fill(0).map((v, i) => i + startFrame)\n            : [currentFrame];\n          const updatedFrameAttributes = [];\n          for (let index = 0; index < applyFrames.length; index += 1) {\n            const frameIndex = applyFrames[index];\n            const attrs = { ...attributesCurrentCamera[frameIndex].attributes };\n            const valueKeys = Object.keys(values);\n            for (let i = 0; i < valueKeys.length; i += 1) {\n              const key = valueKeys[i];\n              attrs[key] = values[key];\n            }\n            updatedFrameAttributes.push({\n              ...attributesCurrentCamera[frameIndex],\n              frameIndex,\n              attributes: attrs,\n            });\n          }\n          setFrameAttributesForCamera(currentCamera, updatedFrameAttributes);\n          break;\n        }\n        default:\n          break;\n      }\n    }\n    this.cancalAttr();\n  };\n\n  updateFrameAttr = (updatedFrameStatus: { [frameIndex: number]: number | null }, updatedItemIndex: number) => {\n    if (this.framesMode === FramesMode.ATTR) {\n      const itemKey = this.itemKeys[updatedItemIndex];\n      if (itemKey) {\n        const [type, ...rest] = itemKey.split(itemKeySeparator);\n        if (type === attrItemPrefix) {\n          const { currentCamera } = store.frame;\n          const { selectedInstances, selectedInstanceItems } = store.instance;\n          const selectedInstanceItem = selectedInstanceItems[0];\n\n          const attrType = rest[0] as AttrKeys.INSTANCE | AttrKeys.ITEM | AttrKeys.INSTANCE_DYNAMIC;\n          const fieldKey = rest[1];\n          if (attrType === AttrKeys.INSTANCE_DYNAMIC) {\n            const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n            const storeId = store.undo.preserve({\n              instances: [{ ...selectedInstance.getBasicInfo(), children: [] }],\n            });\n            const currentCameraAttributes = selectedInstance.dynamicAttributes?.[currentCamera];\n            const updatedDynamicAttributes: DynamicAttributes[] = [];\n            const baseFrameAttributes: {\n              [frameIndex: number]: any;\n            } = {};\n            // save all attributes from base frames\n            Object.values(updatedFrameStatus).forEach((baseFrame) => {\n              if (baseFrame !== null) {\n                baseFrameAttributes[baseFrame] = cloneDeep(currentCameraAttributes?.[baseFrame]?.attributes);\n              }\n            });\n            Object.keys(updatedFrameStatus).forEach((frameStr) => {\n              const frameIndex = Number(frameStr);\n              let frameDataAttributes = currentCameraAttributes?.[frameIndex]?.attributes;\n              if (!frameDataAttributes) {\n                frameDataAttributes = {};\n              }\n              const baseFrameIndex = updatedFrameStatus[frameIndex];\n              if (baseFrameIndex !== null) {\n                // update\n                frameDataAttributes[fieldKey] = baseFrameAttributes[baseFrameIndex]?.[fieldKey];\n              } else {\n                // delete\n                delete frameDataAttributes[fieldKey];\n              }\n              updatedDynamicAttributes.push({\n                frameIndex,\n                attributes: { ...frameDataAttributes },\n              });\n            });\n\n            selectedInstance.setDynamicAttributesByCamera(currentCamera, updatedDynamicAttributes);\n            store.undo.save(storeId, {\n              instances: [{ ...selectedInstance.getBasicInfo(), children: [] }],\n            });\n          } else if (attrType === AttrKeys.ITEM) {\n            // only shape attributes can be applied to different frames\n            const cameraData = selectedInstanceItem?.cameras[currentCamera];\n            if (cameraData) {\n              const { frames } = cameraData;\n              const baseFrameAttributes: {\n                [frameIndex: number]: any;\n              } = {};\n              // save all attributes from base frames\n              Object.values(updatedFrameStatus).forEach((baseFrame) => {\n                if (baseFrame !== null) {\n                  baseFrameAttributes[baseFrame] = cloneDeep(frames[baseFrame]?.attributes);\n                }\n              });\n              // update\n              const frameAttributesMap: {\n                [frameIndex: number]: { attributes: any };\n              } = {};\n              Object.keys(updatedFrameStatus).forEach((frameStr) => {\n                const frameIndex = Number(frameStr);\n                const frameAttributes = cloneDeep(frames[frameIndex]?.attributes);\n                if (frameAttributes) {\n                  const baseFrameIndex = updatedFrameStatus[frameIndex];\n                  if (baseFrameIndex !== null) {\n                    // update\n                    frameAttributes[fieldKey] = baseFrameAttributes[baseFrameIndex]?.[fieldKey];\n                  } else {\n                    // delete\n                    delete frameAttributes[fieldKey];\n                  }\n                  frameAttributesMap[frameIndex] = { attributes: frameAttributes };\n                }\n              });\n              if (Object.keys(frameAttributesMap).length > 0) {\n                const { prevState, currState } = selectedInstanceItem.setAttributesByFrame(currentCamera, frameAttributesMap);\n                const basicInfo = selectedInstanceItem.instance.getBasicInfo();\n                store.undo.push({\n                  instances: [{ ...basicInfo, children: prevState ? [prevState] : [] }],\n                }, {\n                  instances: [{ ...basicInfo, children: currState ? [currState] : [] }],\n                });\n              }\n            }\n          }\n        }\n      }\n    } else if (this.framesMode === FramesMode.FRAME_ATTR) {\n      const itemKey = this.itemKeys[updatedItemIndex];\n      if (itemKey) {\n        const { currentCamera, updateFrameAttributesForCamera, attributes, setCommonFrameAttributes, frameAttributes } = store.frame;\n        const replaceFrame = Object.values(updatedFrameStatus).length > 0 ? Object.values(updatedFrameStatus)[0] : null;\n        const replacedFrames = Object.keys(updatedFrameStatus).map((frameStr) => Number(frameStr));\n        const [type, ...rest] = itemKey.split(itemKeySeparator);\n\n        if (type === attrFramePrefix) {\n          const attrType = rest[0] as AttrKeys.FRAME_ITEM | AttrKeys.CAMERA_ITEM;\n          const fieldKey = rest[1];\n          if (attrType === AttrKeys.CAMERA_ITEM) {\n            let fieldKeyNewAttr = null;\n            if (replaceFrame || typeof replaceFrame === 'number') {\n              fieldKeyNewAttr = attributes[currentCamera][replaceFrame].attributes?.[fieldKey];\n            }\n            updateFrameAttributesForCamera(\n              currentCamera,\n              replacedFrames,\n              { [fieldKey]: fieldKeyNewAttr }\n            );\n          } else if (attrType === AttrKeys.FRAME_ITEM) {\n            const updateFrameAttributes = [];\n            let fieldKeyNewAttr = null;\n            if (replaceFrame || typeof replaceFrame === 'number') {\n              fieldKeyNewAttr = frameAttributes[replaceFrame]?.[fieldKey];\n            }\n            for (let index = 0; index < replacedFrames.length; index += 1) {\n              const element = replacedFrames[index];\n              const temp = {\n                frameIndex: element,\n                attributes: {\n                  ...frameAttributes[element],\n                  [fieldKey]: fieldKeyNewAttr,\n                },\n              };\n              updateFrameAttributes.push(temp);\n            }\n            setCommonFrameAttributes(updateFrameAttributes);\n          }\n        }\n      }\n    }\n  };\n\n  onContextMenu = (selectedFrames: number[], pLeft: number, pBottom: number) => {\n    store.openContextMenu({ x: pLeft, y: -pBottom }, selectedFrames);\n  };\n\n  toggleFilterVisible = () => {\n    this.filterVisible = !this.filterVisible;\n  };\n\n  updateFilter = (type: AttrKeys, fieldKey: string) => {\n    const filterOut = this.filterOutAttrs[type] || [];\n    const index = filterOut.indexOf(fieldKey);\n    if (index < 0) {\n      if (!this.filterOutAttrs[type]) {\n        this.filterOutAttrs[type] = [];\n      }\n      this.filterOutAttrs[type]!.push(fieldKey);\n    } else {\n      this.filterOutAttrs[type]?.splice(index, 1);\n    }\n    if (this.framesRenderer) {\n      this.framesRenderer.items = this.getItems();\n    }\n  };\n\n  resetFilter = () => {\n    if (this.framesMode === FramesMode.ATTR) {\n      this.filterOutAttrs.instance = [];\n      this.filterOutAttrs.instanceDynamic = [];\n      this.filterOutAttrs.item = [];\n    } else if (this.framesMode === FramesMode.FRAME_ATTR) {\n      this.filterOutAttrs.cameraItem = [];\n      this.filterOutAttrs.frameItem = [];\n    }\n    if (this.framesRenderer) {\n      this.framesRenderer.items = this.getItems();\n    }\n  };\n\n  switch = (mode: FramesMode) => {\n    if (this.framesMode === mode) {\n      return;\n    }\n\n    this.framesMode = mode;\n    if (mode === FramesMode.ATTR) {\n      // switch to card when use attributes mode\n      this.updateFrameCountIndex(this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1]);\n    } else if (mode === FramesMode.FRAME_ATTR) {\n      this.updateFrameCountIndex(this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1]);\n    }\n    // else {\n    //   // reset attr filter\n    //   this.filterOutAttrs = {};\n    // }\n    if (this.framesRenderer) {\n      this.framesRenderer.scrollable = this.framesMode !== FramesMode.DEFAULT;\n      this.framesRenderer.items = this.getItems();\n    }\n\n    // update frames height\n    if (mode === FramesMode.DEFAULT) {\n      this.updateHeight(defaultFramesHeight);\n    } else {\n      this.updateHeight(this.savedFramesHeight);\n    }\n  };\n\n  renderItemLabelContent = (fieldKey: string, isSingleCamera: boolean, cameraIndex: number, attrType: AttrKeys.FRAME_ITEM | AttrKeys.CAMERA_ITEM | AttrKeys.TOTAL, field?: Field) => {\n    const isFrameAttr = attrType === AttrKeys.FRAME_ITEM;\n    if (field?.label) {\n      return `${field?.label}${isFrameAttr || isSingleCamera ? '' : `(C${cameraIndex + 1})`}`;\n    }\n    if (fieldKey) {\n      return `${fieldKey}${isFrameAttr || isSingleCamera ? '' : `(C${cameraIndex + 1})`}`;\n    }\n    return `${i18n.translate('PROGRESS_ATTR_TOTAL')}`;\n  };\n\n  // render item label only for instance attributes panel\n  renderItemLabelForInstanceAttr() {\n    const attrTypeExisted: (AttrKeys.INSTANCE | AttrKeys.INSTANCE_DYNAMIC | AttrKeys.ITEM)[] = [];\n    return this.itemKeys.map((itemKey) => {\n      const [type, ...rest] = itemKey.split(itemKeySeparator);\n      if (type === attrItemPrefix) {\n        // is an attr item\n        const attrType = rest[0] as AttrKeys.INSTANCE | AttrKeys.INSTANCE_DYNAMIC | AttrKeys.ITEM;\n        const fieldKey = rest[1];\n        const field = this.attrKeys[attrType]?.[fieldKey];\n        const isFirst = [AttrKeys.INSTANCE, AttrKeys.INSTANCE_DYNAMIC, AttrKeys.ITEM].includes(attrType) && attrTypeExisted.indexOf(attrType) < 0;\n        if (isFirst) {\n          attrTypeExisted.push(attrType);\n        }\n        return (\n          <div\n            key={itemKey}\n            className=\"frame-item-label frame-item-label-attr\"\n            style={{ height: frameLabelHeight, borderTop: isFirst ? '1px solid #484C59' : 'none' }}\n          >\n            {attrType === 'instance' && (\n              <Popover\n                overlayClassName=\"frame-item-label-attr-tip\"\n                placement=\"bottomRight\"\n                content={(\n                  <>\n                    <div>{i18n.translate('PROGRESS_ATTR_STATIC')}</div>\n                    <div>{i18n.translate('PROGRESS_ATTR_STATIC_INFO')}</div>\n                  </>\n                )}\n              >\n                <GlobalOutlined className=\"frame-item-label-attr-icon\" />\n              </Popover>\n            )}\n            {field?.label || fieldKey || i18n.translate('PROGRESS_ATTR_TOTAL')}\n          </div>\n        );\n      }\n      return (\n        <ItemLabel\n          key={itemKey}\n          itemKey={itemKey}\n          separator={itemKeySeparator}\n          prefix={(\n            <div\n              className={cx('frame-item-label-attr-filter', {\n                active: this.filterOutAttrsCount > 0,\n              })}\n              onClick={this.toggleFilterVisible}\n            >\n              <Filter />\n            </div>\n          )}\n        />\n      );\n    });\n  }\n\n  renderItemLabel(itemKey: string, i: number) {\n    if (this.framesMode === FramesMode.FRAME_ATTR) {\n      const [type, ...rest] = itemKey.split(itemKeySeparator);\n      const { isSingleCamera, cameraNames, currentCamera } = store.frame;\n      const cameraIndex = cameraNames.indexOf(currentCamera);\n      if (type === attrFramePrefix) {\n        const attrType = rest[0] as AttrKeys.FRAME_ITEM | AttrKeys.CAMERA_ITEM | AttrKeys.TOTAL;\n        const fieldKey = rest[1];\n        const field = this.attrKeys[attrType]?.[fieldKey];\n\n        let hasBorderTop = false;\n        if (i >= this.itemKeys.length) {\n          hasBorderTop = true;\n        } else {\n          let lastAttrType = '';\n          const preItemkey = this.itemKeys[i];\n          const [preType, ...preRest] = preItemkey.split(itemKeySeparator);\n\n          if (preType === attrFramePrefix) {\n            lastAttrType = preRest[0] as AttrKeys.FRAME_ITEM | AttrKeys.CAMERA_ITEM | AttrKeys.TOTAL;\n          }\n          hasBorderTop = attrType !== 'total' && attrType !== lastAttrType;\n        }\n        return (\n          <div\n            key={itemKey}\n            className=\"frame-item-label frame-item-label-attr\"\n            style={{ height: frameLabelHeight, borderBottom: hasBorderTop ? '1px solid #212633' : 'none' }}\n          >\n            {this.renderItemLabelContent(fieldKey, isSingleCamera, cameraIndex, attrType, field)}\n          </div>\n        );\n      }\n\n      return (\n        <ItemFrameLabel\n          key={itemKey}\n          itemKeys={this.itemKeys}\n          itemKey={itemKey}\n          separator={itemKeySeparator}\n          {...this.framesMode === FramesMode.FRAME_ATTR && {\n            prefix: (\n              <div\n                className={cx('frame-item-label-attr-filter', {\n                  active: this.filterOutAttrsCount > 0,\n                })}\n                onClick={this.toggleFilterVisible}\n              >\n                <Filter />\n              </div>\n            ),\n          }}\n        />\n      );\n    }\n    return (\n      <ItemLabel\n        key={itemKey}\n        itemKey={itemKey}\n        separator={itemKeySeparator}\n        {...this.framesMode === FramesMode.ATTR && {\n          prefix: (\n            <div\n              className={cx('frame-item-label-attr-filter', {\n                active: this.filterOutAttrsCount > 0,\n              })}\n              onClick={this.toggleFilterVisible}\n            >\n              <Filter />\n            </div>\n          ),\n        }}\n      />\n    );\n  }\n\n  filterContentRender = (framesMode: FramesMode, attrGroups: AttrKeys[] = []) => {\n    const { selectedInstances, selectedInstanceItems } = store.instance;\n    const selectedInstanceItem = selectedInstanceItems[0];\n    const selectedInstance = selectedInstanceItem ? selectedInstanceItem.instance : selectedInstances[0];\n    let attrLen = 0;\n    for (let index = 0; index < attrGroups.length; index += 1) {\n      const element = attrGroups[index];\n      attrLen = Object.keys(this.attrKeys[element] || {}).length;\n    }\n    return (\n      <>\n        <div className=\"title\">\n          {framesMode === FramesMode.FRAME_ATTR && i18n.translate('PROGRESS_ATTR_FILTER_TITLE_WITHOUT_NAME')}\n          {framesMode === FramesMode.ATTR && i18n.translate('PROGRESS_ATTR_FILTER_TITLE', { values: { name: selectedInstanceItem?.label || selectedInstance.label } })}\n        </div>\n        {attrLen > 1 && (\n          <div\n            className=\"item\"\n            onClick={this.resetFilter}\n          >\n            {i18n.translate('PROGRESS_ATTR_FILTER_SELECT_ALL')}\n          </div>\n        )}\n        {attrGroups.map((item) => {\n          if (Object.values(this.attrKeys[item] || {}).length > 0) {\n            return (\n              <div key={item}>\n                <div className=\"divider\" />\n                {Object.values(this.attrKeys[item] || {}).map((f) => (\n                  <div\n                    key={f.name}\n                    className={cx('item', {\n                      active: !this.filterOutAttrs[item]?.includes(f.name),\n                    })}\n                    onClick={() => this.updateFilter(item, f.name)}\n                  >\n                    <span className=\"icon\">\n                      <CheckOutlined />\n                    </span>\n                    {f.label || f.name}\n                  </div>\n                ))}\n              </div>\n            );\n          }\n          return null;\n        })}\n      </>\n    );\n  };\n\n  getBgColor = (instance: Instance) => {\n    let bgColor = instance.categoryRef.displayColor;\n\n    if (bgColor === 'random' && instance.items) {\n      const firstInstanceItem = Object.values(instance.items)[0];\n      if (firstInstanceItem) {\n        bgColor = firstInstanceItem.colorConfig.color;\n      }\n    }\n    return bgColor;\n  };\n\n  resizeFrameControl = (data: Record<string, number>) => {\n    if (this.framesMode !== FramesMode.DEFAULT && this.framesRenderer) {\n      const delta = data[ResizableEdge.TOP];\n      this.framesRenderer.itemsContainerHeight = Math.max(\n        this.savedFramesHeight - delta - actionsContainerHeight,\n        0,\n      );\n    }\n  };\n\n  finishResizeFrameControl = () => {\n    this.savedFramesHeight = this.framesHeight;\n    cache.set(CacheKey.FRAMES_CONTROL_HEIGHT, this.savedFramesHeight);\n  };\n\n  render() {\n    const { selectedInstances, selectedInstanceItems } = store.instance;\n    const { commonFrameConfig, frameConfig } = store.frame;\n    const commonFrameFieldsLength = commonFrameConfig?.fields?.length;\n    const cameraConfigFieldsLength = frameConfig?.fields?.length;\n    const selectedInstanceItem = selectedInstanceItems.length > 0 ? selectedInstanceItems[0] : null;\n    let selectedInstance: Instance | null = null;\n    if (selectedInstanceItem) {\n      selectedInstance = selectedInstanceItem.instance;\n    } else if (selectedInstances.length > 0) {\n      selectedInstance = selectedInstances[0];\n    }\n    return (\n      <ResizableBox\n        className=\"frame-control\"\n        style={{\n          height: this.framesHeight + actionsContainerHeight,\n        }}\n        resizableEdges={this.framesMode !== FramesMode.DEFAULT && ResizableEdge.TOP}\n        onResize={this.resizeFrameControl}\n        onResizeEnd={this.finishResizeFrameControl}\n      >\n        <div className=\"frame-actions\">\n          <div>\n            {\n              this.framesMode !== FramesMode.ALL &&\n              this.framesMode !== FramesMode.FRAME_ATTR &&\n              selectedInstance && (\n                <div className=\"label\">\n                  <div\n                    className=\"label-dot\"\n                    style={{ backgroundColor: this.getBgColor(selectedInstance) }}\n                  />\n                  {selectedInstance.label}\n                </div>\n              )\n            }\n          </div>\n          <FrameActions />\n          <div>\n            <div className=\"frame-switch\">\n              <div\n                className={cx('', { active: this.framesMode === FramesMode.DEFAULT })}\n                onClick={() => this.switch(FramesMode.DEFAULT)}\n              >\n                {i18n.translate('PROGRESS_SWITCH_DEFAULT')}\n              </div>\n              <div\n                className={cx('', { active: this.framesMode === FramesMode.ALL })}\n                onClick={() => this.switch(FramesMode.ALL)}\n              >\n                {i18n.translate('PROGRESS_SWITCH_ALL')}\n              </div>\n              <div\n                className={cx('', { active: this.framesMode === FramesMode.ATTR })}\n                onClick={() => this.switch(FramesMode.ATTR)}\n              >\n                {i18n.translate('PROGRESS_SWITCH_ATTR')}\n              </div>\n              {((commonFrameFieldsLength && commonFrameFieldsLength > 0) || (cameraConfigFieldsLength && cameraConfigFieldsLength > 0)) && (\n                <div\n                  className={cx('', { active: this.framesMode === FramesMode.FRAME_ATTR })}\n                  onClick={() => this.switch(FramesMode.FRAME_ATTR)}\n                >\n                  {i18n.translate('PROGRESS_SWITCH_FRAME_ATTR')}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"frames\">\n          <div className=\"frame-items-container\">\n            <div className=\"frame-scaler\">\n              <div\n                className=\"frame-action-icon\"\n                onClick={() => this.updateFrameCountIndex(this.visibleFramesIndex - 1)}\n              >\n                <Minus />\n              </div>\n              <div style={{ flex: 1 }}>\n                <Slider\n                  tooltip={{ open: false }}\n                  step={1}\n                  min={this.visibleFramesIndexArr[0]}\n                  max={this.visibleFramesIndexArr[this.visibleFramesIndexArr.length - 1]}\n                  value={this.visibleFramesIndex}\n                  onChange={this.updateFrameCountIndex}\n                />\n              </div>\n              <div\n                className=\"frame-action-icon\"\n                onClick={() => this.updateFrameCountIndex(this.visibleFramesIndex + 1)}\n              >\n                <Plus />\n              </div>\n            </div>\n            <div\n              ref={this.itemsContainer}\n              className=\"frame-items\"\n              style={{ height: this.framesHeight - 44 }}\n              onScroll={this.onItemsScroll}\n            >\n              {this.framesMode === FramesMode.ATTR && this.renderItemLabelForInstanceAttr()}\n              {this.framesMode !== FramesMode.ATTR && this.itemKeys.map((itemKey, i) => this.renderItemLabel(itemKey, i + 1))}\n              {(this.framesMode === FramesMode.ATTR || this.framesMode === FramesMode.FRAME_ATTR) && this.filterOutAttrsCount > 0 && (\n                <div className=\"frame-item-filter\">\n                  <div>{i18n.translate('PROGRESS_ATTR_FILTER_INFO', { values: { count: this.filterOutAttrsCount } })}</div>\n                  <span className=\"frame-item-filter-link\" onClick={this.resetFilter}>\n                    {i18n.translate('PROGRESS_ATTR_FILTER_RESET')}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"frame-steps\">\n            <div ref={this.framesContainer} />\n          </div>\n        </div>\n        {this.attrTip && (\n          <AttributeTip\n            left={this.attrTip.left}\n            bottom={this.attrTip.bottom}\n            attrLabel={this.attrTip.label}\n            attrValue={this.attrTip.value}\n            hoveredFrame={this.attrTip.hoveredFrame}\n            startFrame={this.attrTip.startFrame}\n            endFrame={this.attrTip.endFrame}\n            referenceUrl={this.attrTip.referenceUrl}\n          />\n        )}\n        {this.activeAttr && (\n          <AttributeForm\n            disabled={this.activeAttr.disabled}\n            left={this.activeAttr.left}\n            bottom={this.activeAttr.bottom}\n            fields={this.activeAttr.fields}\n            applyAllEnabled={this.activeAttr.attrType !== 'instance'}\n            onSubmit={this.submitAttr}\n            onCancel={this.cancalAttr}\n          />\n        )}\n        {this.filterVisible && (\n          <div\n            className=\"frame-attr-mask\"\n            onContextMenu={(e) => e.preventDefault()}\n            onClick={() => {\n              if (this.framesMode === FramesMode.ATTR && !selectedInstanceItem && !selectedInstance) {\n                return;\n              }\n              this.toggleFilterVisible();\n            }}\n          >\n            <div\n              className=\"frame-item-label-attr-filter-popover scroller\"\n              style={{\n                left: 0,\n                bottom: this.framesHeight - 20,\n              }}\n              onClick={(e) => e.stopPropagation()}\n            >\n              {this.framesMode === FramesMode.ATTR && this.filterContentRender(FramesMode.ATTR, [AttrKeys.INSTANCE, AttrKeys.INSTANCE_DYNAMIC, AttrKeys.ITEM])}\n              {this.framesMode === FramesMode.FRAME_ATTR && this.filterContentRender(FramesMode.FRAME_ATTR, [AttrKeys.FRAME_ITEM, AttrKeys.CAMERA_ITEM])}\n            </div>\n          </div>\n        )}\n      </ResizableBox>\n    );\n  }\n}\n\nexport default observer(FrameControl);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}