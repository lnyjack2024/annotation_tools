{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\n/*:: import type {\n  NoContentRenderer,\n  Alignment,\n  CellSize,\n  CellPosition,\n  OverscanIndicesGetter,\n  RenderedSection,\n  CellRendererParams,\n  Scroll as GridScroll,\n} from '../Grid';*/\n/*:: import type {RowRenderer, RenderedRows, Scroll} from './types';*/\nimport Grid, { accessibilityOverscanIndicesGetter } from '../Grid';\nimport * as React from 'react';\nimport clsx from 'clsx';\n\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n/*:: type Props = {\n  'aria-label'?: string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   *-/\n  autoHeight: boolean,\n\n  /** Optional CSS class name *-/\n  className?: string,\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   *-/\n  estimatedRowSize: number,\n\n  /** Height constraint for list (determines how many actual rows are rendered) *-/\n  height: number,\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 *-/\n  noRowsRenderer: NoContentRenderer,\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  *-/\n\n  onRowsRendered: (params: RenderedRows) => void,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   *-/\n  onScroll: (params: Scroll) => void,\n\n  /** See Grid#overscanIndicesGetter *-/\n  overscanIndicesGetter: OverscanIndicesGetter,\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   *-/\n  overscanRowCount: number,\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  *-/\n  rowHeight: CellSize,\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node *-/\n  rowRenderer: RowRenderer,\n\n  /** Number of rows in list. *-/\n  rowCount: number,\n\n  /** See Grid#scrollToAlignment *-/\n  scrollToAlignment: Alignment,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) *-/\n  scrollToIndex: number,\n\n  /** Vertical offset. *-/\n  scrollTop?: number,\n\n  /** Optional inline style *-/\n  style: Object,\n\n  /** Tab index for focus *-/\n  tabIndex?: number,\n\n  /** Width of list *-/\n  width: number,\n};*/\nvar List = /*#__PURE__*/function (_React$PureComponent) {\n  function List() {\n    var _this;\n    _classCallCheck(this, List);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, List, [].concat(args));\n    _defineProperty(_this, \"Grid\", void 0);\n    _defineProperty(_this, \"_cellRenderer\", function (_ref /*:: */) {\n      var parent = _ref /*:: */.parent,\n        rowIndex = _ref /*:: */.rowIndex,\n        style = _ref /*:: */.style,\n        isScrolling = _ref /*:: */.isScrolling,\n        isVisible = _ref /*:: */.isVisible,\n        key = _ref /*:: */.key;\n      var rowRenderer = _this.props.rowRenderer;\n\n      // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = '100%';\n      }\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n    _defineProperty(_this, \"_setRef\", function (ref /*: ?React.ElementRef<typeof Grid>*/) {\n      _this.Grid = ref;\n    });\n    _defineProperty(_this, \"_onScroll\", function (_ref2 /*:: */) {\n      var clientHeight = _ref2 /*:: */.clientHeight,\n        scrollHeight = _ref2 /*:: */.scrollHeight,\n        scrollTop = _ref2 /*:: */.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n    _defineProperty(_this, \"_onSectionRendered\", function (_ref3 /*:: */) {\n      var rowOverscanStartIndex = _ref3 /*:: */.rowOverscanStartIndex,\n        rowOverscanStopIndex = _ref3 /*:: */.rowOverscanStopIndex,\n        rowStartIndex = _ref3 /*:: */.rowStartIndex,\n        rowStopIndex = _ref3 /*:: */.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n    return _this;\n  }\n  _inherits(List, _React$PureComponent);\n  return _createClass(List, [{\n    key: \"forceUpdateGrid\",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n\n    /** See Grid#getOffsetForCell */\n  }, {\n    key: \"getOffsetForRow\",\n    value: function getOffsetForRow(_ref4 /*:: */) {\n      var alignment = _ref4 /*:: */.alignment,\n        index = _ref4 /*:: */.index;\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n            alignment: alignment,\n            rowIndex: index,\n            columnIndex: 0\n          }),\n          scrollTop = _this$Grid$getOffsetF.scrollTop;\n        return scrollTop;\n      }\n      return 0;\n    }\n\n    /** CellMeasurer compatibility */\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref5 /*:: */) {\n      var columnIndex = _ref5 /*:: */.columnIndex,\n        rowIndex = _ref5 /*:: */.rowIndex;\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n\n    /** See Grid#measureAllCells */\n  }, {\n    key: \"measureAllRows\",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n\n    /** CellMeasurer compatibility */\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref6$columnIndex = _ref6.columnIndex,\n        columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n        _ref6$rowIndex = _ref6.rowIndex,\n        rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n\n    /** See Grid#recomputeGridSize */\n  }, {\n    key: \"recomputeRowHeights\",\n    value: function recomputeRowHeights() {\n      var index /*: number*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n\n    /** See Grid#scrollToPosition */\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition() {\n      var scrollTop /*: number*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n\n    /** See Grid#scrollToCell */\n  }, {\n    key: \"scrollToRow\",\n    value: function scrollToRow() {\n      var index /*: number*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        className = _this$props.className,\n        noRowsRenderer = _this$props.noRowsRenderer,\n        scrollToIndex = _this$props.scrollToIndex,\n        width = _this$props.width;\n      var classNames = clsx('ReactVirtualized__List', className);\n      return /*#__PURE__*/React.createElement(Grid, _extends({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n}(React.PureComponent);\n_defineProperty(List, \"defaultProps\", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n});\nexport { List as default };","map":{"version":3,"names":["_extends","_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_inherits","_defineProperty","_callSuper","t","o","e","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","Grid","accessibilityOverscanIndicesGetter","React","clsx","List","_React$PureComponent","_this","_len","arguments","length","args","Array","_key","concat","_ref","parent","rowIndex","style","isScrolling","isVisible","key","rowRenderer","props","widthDescriptor","Object","getOwnPropertyDescriptor","writable","width","index","ref","_ref2","clientHeight","scrollHeight","scrollTop","onScroll","_ref3","rowOverscanStartIndex","rowOverscanStopIndex","rowStartIndex","rowStopIndex","onRowsRendered","overscanStartIndex","overscanStopIndex","startIndex","stopIndex","value","forceUpdateGrid","forceUpdate","getOffsetForRow","_ref4","alignment","_this$Grid$getOffsetF","getOffsetForCell","columnIndex","invalidateCellSizeAfterRender","_ref5","measureAllRows","measureAllCells","recomputeGridSize","_ref6","undefined","_ref6$columnIndex","_ref6$rowIndex","recomputeRowHeights","scrollToPosition","scrollToRow","scrollToCell","render","_this$props","className","noRowsRenderer","scrollToIndex","classNames","createElement","autoContainerWidth","cellRenderer","_cellRenderer","columnWidth","columnCount","noContentRenderer","_onScroll","onSectionRendered","_onSectionRendered","_setRef","PureComponent","autoHeight","estimatedRowSize","overscanIndicesGetter","overscanRowCount","scrollToAlignment","default"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/node_modules/react-virtualized/dist/es/List/List.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n/*:: import type {\n  NoContentRenderer,\n  Alignment,\n  CellSize,\n  CellPosition,\n  OverscanIndicesGetter,\n  RenderedSection,\n  CellRendererParams,\n  Scroll as GridScroll,\n} from '../Grid';*/\n/*:: import type {RowRenderer, RenderedRows, Scroll} from './types';*/\nimport Grid, { accessibilityOverscanIndicesGetter } from '../Grid';\nimport * as React from 'react';\nimport clsx from 'clsx';\n\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n/*:: type Props = {\n  'aria-label'?: string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   *-/\n  autoHeight: boolean,\n\n  /** Optional CSS class name *-/\n  className?: string,\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   *-/\n  estimatedRowSize: number,\n\n  /** Height constraint for list (determines how many actual rows are rendered) *-/\n  height: number,\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 *-/\n  noRowsRenderer: NoContentRenderer,\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  *-/\n\n  onRowsRendered: (params: RenderedRows) => void,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   *-/\n  onScroll: (params: Scroll) => void,\n\n  /** See Grid#overscanIndicesGetter *-/\n  overscanIndicesGetter: OverscanIndicesGetter,\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   *-/\n  overscanRowCount: number,\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  *-/\n  rowHeight: CellSize,\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node *-/\n  rowRenderer: RowRenderer,\n\n  /** Number of rows in list. *-/\n  rowCount: number,\n\n  /** See Grid#scrollToAlignment *-/\n  scrollToAlignment: Alignment,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) *-/\n  scrollToIndex: number,\n\n  /** Vertical offset. *-/\n  scrollTop?: number,\n\n  /** Optional inline style *-/\n  style: Object,\n\n  /** Tab index for focus *-/\n  tabIndex?: number,\n\n  /** Width of list *-/\n  width: number,\n};*/\nvar List = /*#__PURE__*/function (_React$PureComponent) {\n  function List() {\n    var _this;\n    _classCallCheck(this, List);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, List, [].concat(args));\n    _defineProperty(_this, \"Grid\", void 0);\n    _defineProperty(_this, \"_cellRenderer\", function (_ref /*:: */) {\n      var parent = _ref /*:: */.parent,\n        rowIndex = _ref /*:: */.rowIndex,\n        style = _ref /*:: */.style,\n        isScrolling = _ref /*:: */.isScrolling,\n        isVisible = _ref /*:: */.isVisible,\n        key = _ref /*:: */.key;\n      var rowRenderer = _this.props.rowRenderer;\n\n      // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = '100%';\n      }\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n    _defineProperty(_this, \"_setRef\", function (ref /*: ?React.ElementRef<typeof Grid>*/) {\n      _this.Grid = ref;\n    });\n    _defineProperty(_this, \"_onScroll\", function (_ref2 /*:: */) {\n      var clientHeight = _ref2 /*:: */.clientHeight,\n        scrollHeight = _ref2 /*:: */.scrollHeight,\n        scrollTop = _ref2 /*:: */.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n    _defineProperty(_this, \"_onSectionRendered\", function (_ref3 /*:: */) {\n      var rowOverscanStartIndex = _ref3 /*:: */.rowOverscanStartIndex,\n        rowOverscanStopIndex = _ref3 /*:: */.rowOverscanStopIndex,\n        rowStartIndex = _ref3 /*:: */.rowStartIndex,\n        rowStopIndex = _ref3 /*:: */.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n    return _this;\n  }\n  _inherits(List, _React$PureComponent);\n  return _createClass(List, [{\n    key: \"forceUpdateGrid\",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n\n    /** See Grid#getOffsetForCell */\n  }, {\n    key: \"getOffsetForRow\",\n    value: function getOffsetForRow(_ref4 /*:: */) {\n      var alignment = _ref4 /*:: */.alignment,\n        index = _ref4 /*:: */.index;\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n            alignment: alignment,\n            rowIndex: index,\n            columnIndex: 0\n          }),\n          scrollTop = _this$Grid$getOffsetF.scrollTop;\n        return scrollTop;\n      }\n      return 0;\n    }\n\n    /** CellMeasurer compatibility */\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref5 /*:: */) {\n      var columnIndex = _ref5 /*:: */.columnIndex,\n        rowIndex = _ref5 /*:: */.rowIndex;\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n\n    /** See Grid#measureAllCells */\n  }, {\n    key: \"measureAllRows\",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n\n    /** CellMeasurer compatibility */\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref6$columnIndex = _ref6.columnIndex,\n        columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n        _ref6$rowIndex = _ref6.rowIndex,\n        rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n\n    /** See Grid#recomputeGridSize */\n  }, {\n    key: \"recomputeRowHeights\",\n    value: function recomputeRowHeights() {\n      var index /*: number*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n\n    /** See Grid#scrollToPosition */\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition() {\n      var scrollTop /*: number*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n\n    /** See Grid#scrollToCell */\n  }, {\n    key: \"scrollToRow\",\n    value: function scrollToRow() {\n      var index /*: number*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        className = _this$props.className,\n        noRowsRenderer = _this$props.noRowsRenderer,\n        scrollToIndex = _this$props.scrollToIndex,\n        width = _this$props.width;\n      var classNames = clsx('ReactVirtualized__List', className);\n      return /*#__PURE__*/React.createElement(Grid, _extends({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n}(React.PureComponent);\n_defineProperty(List, \"defaultProps\", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n});\nexport { List as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}