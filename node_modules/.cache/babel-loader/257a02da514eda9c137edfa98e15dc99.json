{"ast":null,"code":"import { Base64 } from 'js-base64';\nimport { cloneDeep } from 'lodash';\nimport { ToolMode, isAnnotationReadonly, isQA, isLabel, isTemplatePreview, isAudit } from '../utils/tool-mode';\nimport { BusinessType, isAdvance } from '../utils/business-type';\nimport { fetchResultByUrl, getLocale } from '../utils';\nimport { Language } from '../utils/constants';\nimport advanceJob from './advanceJob';\nimport base64Encoder from './base64-encode';\nvar ToolFileType = /*#__PURE__*/function (ToolFileType) {\n  ToolFileType[\"LABEL_RESULT\"] = \"LABEL_RESULT\";\n  // annotation result\n  ToolFileType[\"QA_RESULT\"] = \"QA_RESULT\";\n  // review result\n  ToolFileType[\"TEMP_LABEL_RESULT\"] = \"LABEL_TEMP_RESULT\";\n  // temp saved annotation result\n  ToolFileType[\"TEMP_QA_RESULT\"] = \"QA_TEMP_RESULT\";\n  // temp saved review result\n  ToolFileType[\"STAT_RESULT\"] = \"STAT_RESULT\";\n  // statistics result\n  ToolFileType[\"AUDIT_RESULT\"] = \"AUDIT_RESULT\";\n  // audit result\n  ToolFileType[\"TEMP_AUDIT_RESULT\"] = \"AUDIT_TEMP_RESULT\";\n  // template saved audit result\n  ToolFileType[\"AUDIT_MODIFY_LABEL_RESULT\"] = \"AUDIT_MODIFY_LABEL_RESULT\";\n  // submitted annotation result of AUDIT_RW\n  ToolFileType[\"AUDIT_MODIFY_TEMP_LABEL_RESULT\"] = \"AUDIT_MODIFY_TEMP_LABEL_RESULT\";\n  // saved annotation result of AUDIT_RW\n  ToolFileType[\"ADVANCE_QA_RESULT\"] = \"ADVANCE_QA_RESULT\";\n  // advance saved review result\n  ToolFileType[\"UNKNOWN\"] = \"UNKNOWN\"; // unknown\n  return ToolFileType;\n}(ToolFileType || {});\nvar FileType = /*#__PURE__*/function (FileType) {\n  FileType[\"TEXT\"] = \"text/plain\";\n  return FileType;\n}(FileType || {});\nexport let APIForwardType = /*#__PURE__*/function (APIForwardType) {\n  APIForwardType[\"TEXT_DETECTION\"] = \"text-detection\";\n  APIForwardType[\"SPEECH_RECOGNIZE\"] = \"speech-recognize\";\n  APIForwardType[\"INTERACTIVE_SEGMENTATION\"] = \"interactive-segmentation\";\n  APIForwardType[\"TRAFFIC_SIGN_RECOGNIZE\"] = \"traffic-sign-recognize\";\n  APIForwardType[\"FRAME_SEGMENTATION\"] = \"frame-segmentation\";\n  APIForwardType[\"CHAT_GPT\"] = \"create-gpt3-chat\";\n  APIForwardType[\"CHAT_GPT_4\"] = \"create-gpt4-chat\";\n  return APIForwardType;\n}({});\nexport let RecognizeSource = /*#__PURE__*/function (RecognizeSource) {\n  RecognizeSource[\"GG\"] = \"gg\";\n  RecognizeSource[\"MS\"] = \"ms\";\n  RecognizeSource[\"ALIYUN\"] = \"aliyun\";\n  return RecognizeSource;\n}({});\nconst AUDIT_DIRECTORY = 'audit';\nconst ErrMsg = {\n  RESULT_LOAD_ERROR: {\n    [Language.EN_US]: 'Failed to load annotation result. Submit is denied. Please refresh page and try again.',\n    [Language.ZH_CN]: '标注结果加载失败，禁止提交数据，请刷新后重试。',\n    [Language.JA_JP]: 'アノテーション結果の読み込みに失敗しました。提出は拒否されました。ページを更新して、もう一度お試しください。',\n    [Language.KO_KR]: '주석 결과를 로드하지 못했습니다. 제출이 거부되었습니다. 페이지를 새로고침하고 다시 시도하십시오.'\n  },\n  LOAD_CONTENT_NOT_DEFINED: {\n    [Language.EN_US]: 'No loadContent function defined.',\n    [Language.ZH_CN]: '未定义 loadContent 方法。',\n    [Language.JA_JP]: 'loadContent 関数が定義されていません。',\n    [Language.KO_KR]: 'loadContent 함수가 정의되지 않았습니다.'\n  },\n  SAVE_CONTENT_NOT_DEFINED: {\n    [Language.EN_US]: 'No saveContent function defined.',\n    [Language.ZH_CN]: '未定义 saveContent 方法。',\n    [Language.JA_JP]: 'saveContent 関数が定義されていません。',\n    [Language.KO_KR]: 'saveContent 함수가 정의되지 않았습니다.'\n  }\n};\nexport default class JobProxy {\n  get resultId() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.result`;\n  }\n  get reviewId() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.review`;\n  }\n  get resultFileName() {\n    return `${this.resultId}.json`;\n  }\n  get reviewFileName() {\n    return `${this.reviewId}.json`;\n  }\n  get advanceReviewFileName() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.review.json`;\n  }\n  get auditFileName() {\n    return `${this.auditFileId}.json`;\n  }\n  get resultStatFileName() {\n    return `${this.resultId}.stat.json`;\n  }\n  get reviewStatFileName() {\n    if (isAudit(this.toolMode)) {\n      // for audit task, no job id provieded, so use audit id instead\n      return `${this.auditId}.stat.json`;\n    }\n    return `${this.reviewId}.stat.json`;\n  }\n  get fileDirectory() {\n    if (isAudit(this.toolMode)) {\n      // for audit task, no job id provieded, so use a constant\n      return AUDIT_DIRECTORY;\n    }\n    return this.jobId;\n  }\n\n  /**\n   * is tool in template preview mode\n   */\n  get isTemplatePreview() {\n    return isTemplatePreview(this.toolMode);\n  }\n\n  /**\n   * is tool in labeling mode or template preview mode\n   */\n  get isLabeling() {\n    return this.toolMode === ToolMode.LABELING || this.isTemplatePreview;\n  }\n\n  /**\n   * is tool in label mode\n   */\n  get isLabel() {\n    return isLabel(this.toolMode);\n  }\n\n  /**\n   * is tool in qa mode\n   */\n  get isQA() {\n    return isQA(this.toolMode);\n  }\n\n  /**\n   * is tool readonly\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.toolMode);\n  }\n  get loadReviewEnabled() {\n    return !this.isLabeling || this.isAdvanceReviewLabel;\n  }\n  get isAdvanceReview() {\n    return isAdvance(this.businessType) && this.isQA;\n  }\n  get isAdvanceReviewLabel() {\n    return !!this.advanceFlag && this.isLabel;\n  }\n  constructor({\n    locale,\n    toolName,\n    toolMode,\n    projectId,\n    flowId,\n    jobId,\n    taskId,\n    recordId,\n    workerId,\n    workerName,\n    auditId,\n    reviewUrl,\n    reviewFrom,\n    flowData,\n    templateConfig,\n    scriptCheckTimeout,\n    auditCycle,\n    saveContent,\n    loadContent,\n    validateContent,\n    trackingStats\n  }) {\n    this.locale = void 0;\n    this.toolName = void 0;\n    this.toolMode = ToolMode.TEMPLATE_PREVIEW;\n    this.businessType = BusinessType.DEFAULT;\n    this.projectId = '';\n    this.flowId = '';\n    this.jobId = '';\n    this.taskId = '';\n    this.recordId = '';\n    this.workerId = '';\n    this.workerName = '';\n    this.auditId = '';\n    this.auditCycle = '';\n    this.auditFileId = '';\n    this.reviewUrl = '';\n    this.tempResultUrl = '';\n    this.tempQAResultUrl = '';\n    this.reviewFrom = void 0;\n    this.reviewFromLoadError = false;\n    this.savedDataLoadError = false;\n    this.templateConfig = void 0;\n    this.flowData = void 0;\n    this.encryptedTaskInfo = void 0;\n    this.scriptCheckTimeout = 10000;\n    this.advanceFlag = false;\n    /**\n     * advance worker name\n     */\n    this.advanceWorkerName = '';\n    this.saveContent = void 0;\n    this.loadContent = void 0;\n    this.validateContent = void 0;\n    this.trackingStats = void 0;\n    this.saveImage = async (base64, filetype, filename, toolFileType = ToolFileType.UNKNOWN) => {\n      const url = await this.save(base64, filetype, filename, toolFileType);\n      return url;\n    };\n    /**\n     * save file\n     * @param file\n     * @param toolFileType\n     */\n    this.saveFile = (file, toolFileType = ToolFileType.UNKNOWN) => new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = async () => {\n        const base64Str = reader.result;\n        const url = await this.save(base64Str, file.type, `${Date.now()}.${file.name}`, toolFileType);\n        if (url) {\n          resolve(url);\n        } else {\n          reject();\n        }\n      };\n      reader.onerror = e => reject(e);\n    });\n    // set locale\n    this.locale = getLocale(locale);\n    // annotation type, unique key for the processor\n    this.toolName = toolName;\n    this.setMode(toolMode);\n    this.setBusinessType(flowData === null || flowData === void 0 ? void 0 : flowData.BUSINESS_TYPE);\n    this.setJobInfo(projectId, flowId, jobId, taskId, recordId, workerId, workerName);\n    this.setAuditInfo(auditId, auditCycle);\n    this.setReviewUrl(reviewUrl);\n    this.reviewFrom = reviewFrom;\n    this.flowData = JSON.stringify(flowData);\n    this.tempResultUrl = flowData === null || flowData === void 0 ? void 0 : flowData.TEMP_RESULT_URL;\n    this.tempQAResultUrl = flowData === null || flowData === void 0 ? void 0 : flowData.TEMP_QA_RESULT_URL;\n    this.encryptedTaskInfo = flowData === null || flowData === void 0 ? void 0 : flowData.ENCRYPTED_TASK_INFO;\n    this.advanceFlag = flowData === null || flowData === void 0 ? void 0 : flowData.ADVANCE_FLAG;\n    this.advanceWorkerName = flowData === null || flowData === void 0 ? void 0 : flowData.ADVANCE_QA_NAME;\n    this.templateConfig = cloneDeep(templateConfig);\n    if (typeof scriptCheckTimeout === 'string' && scriptCheckTimeout) {\n      const checkTimeout = Number(scriptCheckTimeout);\n      this.scriptCheckTimeout = (Number.isNaN(checkTimeout) || !scriptCheckTimeout ? 10 : checkTimeout) * 1000;\n    }\n\n    // saveContent & loadContent is provided by the platform\n    // if no these two functions, load & save reviews should be implemented by each tool self\n    this.saveContent = saveContent;\n    this.loadContent = loadContent;\n    if (validateContent) {\n      this.validateContent = (content, data) => validateContent(content, data, this.scriptCheckTimeout);\n    }\n    if (trackingStats) {\n      this.trackingStats = (stats, timestamp) => trackingStats({\n        projectId: this.projectId,\n        jobId: this.jobId,\n        recordId: this.recordId,\n        timestamp,\n        stats\n      });\n    }\n    this.setAdvanceWork(flowData);\n  }\n  setMode(toolMode) {\n    if (Object.values(ToolMode).includes(toolMode)) {\n      this.toolMode = toolMode;\n    } else {\n      // default is a template preview job\n      this.toolMode = ToolMode.TEMPLATE_PREVIEW;\n    }\n  }\n  setBusinessType(businessType) {\n    if (Object.values(BusinessType).includes(businessType)) {\n      this.businessType = businessType;\n    } else {\n      this.businessType = BusinessType.DEFAULT;\n    }\n  }\n  setJobInfo(projectId, flowId, jobId, taskId, recordId, workerId, workerName) {\n    this.projectId = projectId || '';\n    this.flowId = flowId || '';\n    this.jobId = jobId || '';\n    this.taskId = taskId || '';\n    this.recordId = recordId || '';\n    this.workerId = workerId || '';\n    this.workerName = workerName || '';\n  }\n  setAuditInfo(auditId, auditCycle) {\n    this.auditId = auditId || `${this.jobId}.${this.recordId}.audit`;\n    this.auditCycle = auditCycle || '';\n    this.auditFileId = `${this.jobId}.${this.recordId}.audit`;\n  }\n  setAuditId(auditFileId) {\n    if (auditFileId) {\n      this.auditFileId = auditFileId;\n    }\n  }\n  setReviewUrl(reviewUrl) {\n    this.reviewUrl = reviewUrl || '';\n  }\n  setAdvanceWork(flowData) {\n    const {\n      LAST_JOB_FILE_NAME\n    } = flowData || {};\n    if (this.isAdvanceReview || this.isAdvanceReviewLabel) {\n      advanceJob.init({\n        isLabel: this.isAdvanceReviewLabel,\n        isQa: this.isAdvanceReview,\n        locale: this.locale,\n        businessType: this.businessType,\n        resultFileName: LAST_JOB_FILE_NAME,\n        reviewFileName: this.advanceReviewFileName,\n        loadContent: filename => this.load(filename)\n      });\n    }\n  }\n\n  /**\n   * load data by loadContent\n   * @param filename\n   * @param directory\n   * @param onLoadError\n   */\n  async load(filename, directory = this.fileDirectory, onLoadError) {\n    if (!this.loadContent || {}.toString.call(this.loadContent) !== '[object Function]') {\n      throw new Error(ErrMsg.LOAD_CONTENT_NOT_DEFINED[this.locale]);\n    }\n    let res;\n    let data;\n    try {\n      res = await this.loadContent(filename, directory);\n    } catch (e) {\n      // load error\n      if (onLoadError) {\n        onLoadError();\n      }\n    }\n    if (res) {\n      try {\n        data = JSON.parse(res);\n      } catch (e) {\n        // parse error\n      }\n    }\n    return data;\n  }\n\n  /**\n   * save data by saveContent\n   * @param base64\n   * @param filetype\n   * @param filename\n   * @param toolFileType\n   * @param isSubmit\n   * @param options\n   */\n  async save(base64, filetype, filename, toolFileType = ToolFileType.UNKNOWN, isSubmit = false, options) {\n    if (!this.saveContent || {}.toString.call(this.saveContent) !== '[object Function]') {\n      throw new Error(ErrMsg.SAVE_CONTENT_NOT_DEFINED[this.locale]);\n    }\n    let type = toolFileType;\n    if (this.isTemplatePreview) {\n      // for template preview mode, all save func should be unknown type\n      type = ToolFileType.UNKNOWN;\n    }\n    const result = await this.saveContent({\n      b64Content: base64,\n      type: filetype,\n      filename,\n      filePrefix: this.fileDirectory,\n      jobId: this.jobId,\n      projectId: this.projectId,\n      recordId: this.recordId,\n      toolFileType: type,\n      flowId: this.flowId,\n      // only audit result need audit id and cycle\n      ...([ToolFileType.AUDIT_RESULT, ToolFileType.TEMP_AUDIT_RESULT].includes(toolFileType) && {\n        auditId: this.auditId,\n        cycle: this.auditCycle\n      }),\n      tempResult: isSubmit === false,\n      businessType: this.businessType,\n      frame: options === null || options === void 0 ? void 0 : options.frame\n    });\n    if (toolFileType === ToolFileType.ADVANCE_QA_RESULT) {\n      advanceJob.updateLastTime({\n        updateReviewTime: new Date().getTime()\n      });\n    } else if (toolFileType === ToolFileType.TEMP_LABEL_RESULT) {\n      advanceJob.updateLastTime({\n        updateResultTime: new Date().getTime()\n      });\n    }\n    return result;\n  }\n\n  /**\n   * load temp save annotation result\n   */\n  async loadSavedResult() {\n    if (this.readonly || this.isTemplatePreview) {\n      // not load temp saved annotation when is readonly\n      return undefined;\n    }\n    this.savedDataLoadError = false;\n    if (this.tempResultUrl) {\n      let result;\n      try {\n        result = await fetchResultByUrl(this.tempResultUrl);\n      } catch (e) {\n        this.savedDataLoadError = true;\n        // eslint-disable-next-line no-console\n        console.log('Temp saved data load error [by temp result url]', this.tempResultUrl);\n      }\n      return result;\n    }\n    return this.load(this.resultFileName, this.fileDirectory, () => {\n      this.savedDataLoadError = true;\n      // eslint-disable-next-line no-console\n      console.log('Temp saved data load error [by load content]');\n    });\n  }\n\n  /**\n   * load annotation result from last task\n   */\n  async loadReviewFrom() {\n    this.reviewFromLoadError = false;\n    let result;\n    if (typeof this.reviewFrom === 'object') {\n      result = this.reviewFrom;\n    } else if (typeof this.reviewFrom === 'string' && this.reviewFrom !== '') {\n      if (this.reviewFrom.startsWith('http')) {\n        try {\n          result = await fetchResultByUrl(this.reviewFrom);\n        } catch (e) {\n          this.reviewFromLoadError = true;\n          throw e;\n        }\n      } else {\n        result = JSON.parse(this.reviewFrom);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * simply to load annotation result\n   */\n  async loadResult() {\n    // get temp saved annotations\n    let result = await this.loadSavedResult();\n\n    // get result from review_from\n    if (!result) {\n      result = await this.loadReviewFrom();\n    }\n    return result;\n  }\n\n  /**\n   * load temp saved reviews\n   */\n  async loadSavedReviews() {\n    if (!this.isQA) {\n      // not load temp saved reviews when is not a qa job\n      return undefined;\n    }\n    if (this.tempQAResultUrl) {\n      let reviews;\n      try {\n        reviews = await fetchResultByUrl(this.tempQAResultUrl);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('Temp saved reviews load error [by temp qa result url]', this.tempQAResultUrl);\n      }\n      return reviews;\n    }\n    return this.load(this.reviewFileName);\n  }\n\n  /**\n   * load reviews from last task by link\n   * @param reviewUrl\n   */\n  async loadReviewsFromReview(reviewUrl = this.reviewUrl) {\n    let reviews;\n    try {\n      reviews = await fetchResultByUrl(reviewUrl);\n    } catch (e) {\n      // get from review url error\n    }\n    return reviews;\n  }\n\n  /**\n   * load audit reviews\n   */\n  async loadReviewsFromAudit() {\n    return this.load(this.auditFileName, AUDIT_DIRECTORY);\n  }\n\n  /**\n   * simply to load reviews\n   * @param reviewUrl\n   */\n  async loadReviews(reviewUrl) {\n    // get temp saved reviews\n    let reviews = await this.loadSavedReviews();\n    const url = reviewUrl || this.reviewUrl;\n    if (!reviews && url) {\n      // get from review url first\n      reviews = await this.loadReviewsFromReview(url);\n    }\n    if (!reviews) {\n      // then get from audit if necessary\n      reviews = await this.loadReviewsFromAudit();\n    }\n    return reviews;\n  }\n\n  /**\n   * save annotation result\n   * @param data\n   * @param isSubmit\n   * @param useEncodeWorker\n   */\n  async saveResult(data, isSubmit = false, useEncodeWorker = false) {\n    if (this.reviewFromLoadError || this.savedDataLoadError) {\n      throw new Error(ErrMsg.RESULT_LOAD_ERROR[this.locale]);\n    }\n    const dataStr = typeof data === 'string' ? data : JSON.stringify(data);\n    const base64 = useEncodeWorker ? await base64Encoder.run(dataStr) : Base64.encode(dataStr);\n    const filename = `${isSubmit ? `R.${new Date().getTime()}.` : ''}${this.resultFileName}`;\n    let toolFileType = isSubmit ? ToolFileType.LABEL_RESULT : ToolFileType.TEMP_LABEL_RESULT;\n    if (isAudit(this.toolMode)) {\n      toolFileType = isSubmit ? ToolFileType.AUDIT_MODIFY_LABEL_RESULT : ToolFileType.AUDIT_MODIFY_TEMP_LABEL_RESULT;\n    }\n    const options = {};\n    if (toolFileType === ToolFileType.TEMP_LABEL_RESULT && data) {\n      options.frame = data.annotatedFrameCount;\n    }\n    return this.save(base64, FileType.TEXT, filename, toolFileType, isSubmit, options);\n  }\n\n  /**\n   * save reviews\n   * @param data\n   * @param isSubmit\n   */\n  async saveReviews(data, isSubmit = false) {\n    if (isAudit(this.toolMode)) {\n      return this.saveAudit(data, isSubmit);\n    }\n    const base64 = Base64.encode(JSON.stringify(data));\n    let toolFileType = this.isAdvanceReview ? ToolFileType.ADVANCE_QA_RESULT : ToolFileType.TEMP_QA_RESULT;\n    toolFileType = isSubmit ? ToolFileType.QA_RESULT : toolFileType;\n    const filename = isAdvance(this.businessType) ? this.advanceReviewFileName : this.reviewFileName;\n    return this.save(base64, FileType.TEXT, filename, toolFileType, isSubmit);\n  }\n\n  /**\n   * save audit reviews\n   * @param data\n   * @param isSubmit\n   */\n  async saveAudit(data, isSubmit = false) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    const toolFileType = isSubmit ? ToolFileType.AUDIT_RESULT : ToolFileType.TEMP_AUDIT_RESULT;\n    return this.save(base64, FileType.TEXT, this.auditFileName, toolFileType, isSubmit);\n  }\n\n  /**\n   * save annotation statistics\n   * @param data\n   * @param isSubmit\n   */\n  async saveResultStat(data, isSubmit = false) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    const filename = `${isSubmit ? `S.${new Date().getTime()}.` : ''}${this.resultStatFileName}`;\n    return this.save(base64, FileType.TEXT, filename, ToolFileType.STAT_RESULT);\n  }\n\n  /**\n   * save review statistics (including statistics for audit task)\n   * @param data\n   * @param isSubmit\n   */\n  async saveReviewStat(data, isSubmit = false) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    const filename = `${isSubmit ? `S.${new Date().getTime()}.` : ''}${this.reviewStatFileName}`;\n    return this.save(base64, FileType.TEXT, filename, ToolFileType.STAT_RESULT);\n  }\n  /**\n   * request to api gateway\n   * @param path\n   * @param options\n   */\n  async request(path, options) {\n    const headers = {\n      ...options.headers\n    };\n    if (this.encryptedTaskInfo) {\n      headers.encryptedTaskInfo = this.encryptedTaskInfo;\n    }\n    return fetch(`/api-gw${path}`, {\n      headers,\n      method: options.method,\n      body: options.body,\n      credentials: 'include'\n    });\n  }\n\n  /**\n   * forward api\n   * @param type\n   * @param data\n   */\n  async forwardAPI(type, data) {\n    switch (type) {\n      case APIForwardType.TEXT_DETECTION:\n        return this.request('/api-forward/v1/api-forward/text-detection', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: data\n        }).then(res => res.json()).then(body => body.data).catch(() => '');\n      case APIForwardType.SPEECH_RECOGNIZE:\n        // eslint-disable-next-line no-case-declarations\n        let route = data.get('endpoint') === RecognizeSource.GG ? 'gg-speech-recognize' : 'speech-recognize';\n        if (data.get('endpoint') === RecognizeSource.ALIYUN) {\n          route = 'aliyun-speech-recognize';\n        }\n        return this.request(`/api-forward/v1/api-forward/${route}`, {\n          method: 'POST',\n          headers: {\n            'Conntent-Type': 'multipart/form-data'\n          },\n          body: data\n        }).then(res => res.json()).then(body => body).catch(() => ({}));\n      case APIForwardType.INTERACTIVE_SEGMENTATION:\n        return this.request('/api-forward/v1/api-forward/interactive-segmentation', {\n          method: 'POST',\n          body: data\n        }).then(res => res.json()).then(body => body).catch(() => ({}));\n      case APIForwardType.TRAFFIC_SIGN_RECOGNIZE:\n        return this.request('/api-forward/v1/api-forward/traffic-sign/recognize', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: data\n        }).then(res => res.json()).then(body => body).catch(() => ({}));\n      case APIForwardType.FRAME_SEGMENTATION:\n        return this.request('/api-forward/v1/api-forward/frame-segmentation', {\n          method: 'POST',\n          body: data\n        }).then(res => res.arrayBuffer()).catch(() => '');\n      case APIForwardType.CHAT_GPT:\n        return this.request('/api-forward/v1/api-forward/create-gpt3-chat', {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'POST',\n          body: JSON.stringify({\n            ...data,\n            model: 'gpt-3.5-turbo'\n          })\n        }).then(res => res.json()).then(body => {\n          if (body.error) {\n            return body;\n          }\n          return body.data.choices;\n        }).catch(() => '');\n      case APIForwardType.CHAT_GPT_4:\n        return this.request('/api-forward/v1/api-forward/create-gpt4-chat', {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'POST',\n          body: JSON.stringify({\n            ...data,\n            model: 'gpt-4'\n          })\n        }).then(res => res.json()).then(body => {\n          if (body.error) {\n            return body;\n          }\n          return body.data.choices;\n        }).catch(() => '');\n      default:\n        return Promise.resolve();\n    }\n  }\n}","map":{"version":3,"names":["Base64","cloneDeep","ToolMode","isAnnotationReadonly","isQA","isLabel","isTemplatePreview","isAudit","BusinessType","isAdvance","fetchResultByUrl","getLocale","Language","advanceJob","base64Encoder","ToolFileType","FileType","APIForwardType","RecognizeSource","AUDIT_DIRECTORY","ErrMsg","RESULT_LOAD_ERROR","EN_US","ZH_CN","JA_JP","KO_KR","LOAD_CONTENT_NOT_DEFINED","SAVE_CONTENT_NOT_DEFINED","JobProxy","resultId","jobId","taskId","recordId","reviewId","resultFileName","reviewFileName","advanceReviewFileName","auditFileName","auditFileId","resultStatFileName","reviewStatFileName","toolMode","auditId","fileDirectory","isLabeling","LABELING","readonly","loadReviewEnabled","isAdvanceReviewLabel","isAdvanceReview","businessType","advanceFlag","constructor","locale","toolName","projectId","flowId","workerId","workerName","reviewUrl","reviewFrom","flowData","templateConfig","scriptCheckTimeout","auditCycle","saveContent","loadContent","validateContent","trackingStats","TEMPLATE_PREVIEW","DEFAULT","tempResultUrl","tempQAResultUrl","reviewFromLoadError","savedDataLoadError","encryptedTaskInfo","advanceWorkerName","saveImage","base64","filetype","filename","toolFileType","UNKNOWN","url","save","saveFile","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","base64Str","result","type","Date","now","name","onerror","e","setMode","setBusinessType","BUSINESS_TYPE","setJobInfo","setAuditInfo","setReviewUrl","JSON","stringify","TEMP_RESULT_URL","TEMP_QA_RESULT_URL","ENCRYPTED_TASK_INFO","ADVANCE_FLAG","ADVANCE_QA_NAME","checkTimeout","Number","isNaN","content","data","stats","timestamp","setAdvanceWork","Object","values","includes","setAuditId","LAST_JOB_FILE_NAME","init","isQa","load","directory","onLoadError","toString","call","Error","res","parse","isSubmit","options","b64Content","filePrefix","AUDIT_RESULT","TEMP_AUDIT_RESULT","cycle","tempResult","frame","ADVANCE_QA_RESULT","updateLastTime","updateReviewTime","getTime","TEMP_LABEL_RESULT","updateResultTime","loadSavedResult","undefined","console","log","loadReviewFrom","startsWith","loadResult","loadSavedReviews","reviews","loadReviewsFromReview","loadReviewsFromAudit","loadReviews","saveResult","useEncodeWorker","dataStr","run","encode","LABEL_RESULT","AUDIT_MODIFY_LABEL_RESULT","AUDIT_MODIFY_TEMP_LABEL_RESULT","annotatedFrameCount","TEXT","saveReviews","saveAudit","TEMP_QA_RESULT","QA_RESULT","saveResultStat","STAT_RESULT","saveReviewStat","request","path","headers","fetch","method","body","credentials","forwardAPI","TEXT_DETECTION","then","json","catch","SPEECH_RECOGNIZE","route","get","GG","ALIYUN","INTERACTIVE_SEGMENTATION","TRAFFIC_SIGN_RECOGNIZE","FRAME_SEGMENTATION","arrayBuffer","CHAT_GPT","model","error","choices","CHAT_GPT_4"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/libs/JobProxy.ts"],"sourcesContent":["import { Base64 } from 'js-base64';\nimport { cloneDeep } from 'lodash';\nimport { AnnotationType } from '../types';\nimport { ToolMode, isAnnotationReadonly, isQA, isLabel, isTemplatePreview, isAudit } from '../utils/tool-mode';\nimport { BusinessType, isAdvance } from '../utils/business-type';\nimport { fetchResultByUrl, getLocale } from '../utils';\nimport { Language } from '../utils/constants';\nimport advanceJob from './advanceJob';\nimport base64Encoder from './base64-encode';\n\nexport interface SaveContentParams {\n  b64Content: string;\n  type: string;\n  filename: string;\n  filePrefix: string;\n  jobId: string;\n  projectId: string;\n  recordId: string;\n  toolFileType: ToolFileType;\n  flowId: string;\n  auditId?: string;\n  cycle?: string;\n  tempResult?: boolean;\n  businessType?: string;\n  frame?: number;\n}\n\ninterface JobProxyParams {\n  locale?: string;\n  toolName: AnnotationType;\n  toolMode?: string;\n  projectId?: string;\n  flowId?: string;\n  jobId?: string;\n  taskId?: string;\n  recordId?: string;\n  workerId?: string;\n  workerName?: string;\n  auditId?: string;\n  reviewUrl?: string;\n  reviewFrom?: any;\n  flowData?: any;\n  templateConfig: any;\n  scriptCheckTimeout?: string;\n  auditCycle?: string;\n  businessType?: string;\n  saveContent?: (params: SaveContentParams) => Promise<string>;\n  loadContent?: (filename: string, directory: string) => Promise<string>;\n  validateContent?: (content: string, data: any, timeout?: number) => Promise<any>;\n  trackingStats?: (statsPayload: unknown) => Promise<void>;\n}\n\nenum ToolFileType {\n  LABEL_RESULT = 'LABEL_RESULT', // annotation result\n  QA_RESULT = 'QA_RESULT', // review result\n  TEMP_LABEL_RESULT = 'LABEL_TEMP_RESULT', // temp saved annotation result\n  TEMP_QA_RESULT = 'QA_TEMP_RESULT', // temp saved review result\n  STAT_RESULT = 'STAT_RESULT', // statistics result\n  AUDIT_RESULT = 'AUDIT_RESULT', // audit result\n  TEMP_AUDIT_RESULT = 'AUDIT_TEMP_RESULT', // template saved audit result\n  AUDIT_MODIFY_LABEL_RESULT = 'AUDIT_MODIFY_LABEL_RESULT', // submitted annotation result of AUDIT_RW\n  AUDIT_MODIFY_TEMP_LABEL_RESULT = 'AUDIT_MODIFY_TEMP_LABEL_RESULT', // saved annotation result of AUDIT_RW\n  ADVANCE_QA_RESULT = 'ADVANCE_QA_RESULT', // advance saved review result\n  UNKNOWN = 'UNKNOWN', // unknown\n}\n\nenum FileType {\n  TEXT = 'text/plain',\n}\n\nexport enum APIForwardType {\n  TEXT_DETECTION = 'text-detection',\n  SPEECH_RECOGNIZE = 'speech-recognize',\n  INTERACTIVE_SEGMENTATION = 'interactive-segmentation',\n  TRAFFIC_SIGN_RECOGNIZE = 'traffic-sign-recognize',\n  FRAME_SEGMENTATION = 'frame-segmentation',\n  CHAT_GPT = 'create-gpt3-chat',\n  CHAT_GPT_4 = 'create-gpt4-chat'\n}\n\nexport enum RecognizeSource {\n  GG = 'gg',\n  MS = 'ms',\n  ALIYUN = 'aliyun'\n}\n\ninterface SaveOptions {\n  frame?: number;\n}\n\nconst AUDIT_DIRECTORY = 'audit';\nconst ErrMsg = {\n  RESULT_LOAD_ERROR: {\n    [Language.EN_US]: 'Failed to load annotation result. Submit is denied. Please refresh page and try again.',\n    [Language.ZH_CN]: '标注结果加载失败，禁止提交数据，请刷新后重试。',\n    [Language.JA_JP]: 'アノテーション結果の読み込みに失敗しました。提出は拒否されました。ページを更新して、もう一度お試しください。',\n    [Language.KO_KR]: '주석 결과를 로드하지 못했습니다. 제출이 거부되었습니다. 페이지를 새로고침하고 다시 시도하십시오.',\n  },\n  LOAD_CONTENT_NOT_DEFINED: {\n    [Language.EN_US]: 'No loadContent function defined.',\n    [Language.ZH_CN]: '未定义 loadContent 方法。',\n    [Language.JA_JP]: 'loadContent 関数が定義されていません。',\n    [Language.KO_KR]: 'loadContent 함수가 정의되지 않았습니다.',\n  },\n  SAVE_CONTENT_NOT_DEFINED: {\n    [Language.EN_US]: 'No saveContent function defined.',\n    [Language.ZH_CN]: '未定义 saveContent 方法。',\n    [Language.JA_JP]: 'saveContent 関数が定義されていません。',\n    [Language.KO_KR]: 'saveContent 함수가 정의되지 않았습니다.',\n  },\n};\n\nexport default class JobProxy {\n  locale: Language;\n\n  toolName: AnnotationType;\n\n  toolMode = ToolMode.TEMPLATE_PREVIEW;\n\n  businessType = BusinessType.DEFAULT;\n\n  projectId = '';\n\n  flowId = '';\n\n  jobId = '';\n\n  taskId = '';\n\n  recordId = '';\n\n  workerId = '';\n\n  workerName = '';\n\n  auditId = '';\n\n  auditCycle = '';\n\n  auditFileId = '';\n\n  reviewUrl = '';\n\n  tempResultUrl = '';\n\n  tempQAResultUrl = '';\n\n  reviewFrom: any;\n\n  reviewFromLoadError = false;\n\n  savedDataLoadError = false;\n\n  templateConfig: any;\n\n  flowData?: string;\n\n  encryptedTaskInfo?: string;\n\n  scriptCheckTimeout = 10000;\n\n  advanceFlag = false;\n\n  /**\n   * advance worker name\n   */\n  advanceWorkerName = '';\n\n  saveContent?: (params: SaveContentParams) => Promise<string>;\n\n  loadContent?: (filename: string, directory: string) => Promise<string>;\n\n  validateContent?: (content: string, data: any) => Promise<any>;\n\n  trackingStats?: (stats: unknown, timestamp: number) => Promise<void>;\n\n  get resultId() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.result`;\n  }\n\n  get reviewId() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.review`;\n  }\n\n  get resultFileName() {\n    return `${this.resultId}.json`;\n  }\n\n  get reviewFileName() {\n    return `${this.reviewId}.json`;\n  }\n\n  get advanceReviewFileName() {\n    return `${this.jobId}.${this.taskId}.${this.recordId}.review.json`;\n  }\n\n  get auditFileName() {\n    return `${this.auditFileId}.json`;\n  }\n\n  get resultStatFileName() {\n    return `${this.resultId}.stat.json`;\n  }\n\n  get reviewStatFileName() {\n    if (isAudit(this.toolMode)) {\n      // for audit task, no job id provieded, so use audit id instead\n      return `${this.auditId}.stat.json`;\n    }\n    return `${this.reviewId}.stat.json`;\n  }\n\n  get fileDirectory() {\n    if (isAudit(this.toolMode)) {\n      // for audit task, no job id provieded, so use a constant\n      return AUDIT_DIRECTORY;\n    }\n    return this.jobId;\n  }\n\n  /**\n   * is tool in template preview mode\n   */\n  get isTemplatePreview() {\n    return isTemplatePreview(this.toolMode);\n  }\n\n  /**\n   * is tool in labeling mode or template preview mode\n   */\n  get isLabeling() {\n    return this.toolMode === ToolMode.LABELING || this.isTemplatePreview;\n  }\n\n  /**\n   * is tool in label mode\n   */\n  get isLabel() {\n    return isLabel(this.toolMode);\n  }\n\n  /**\n   * is tool in qa mode\n   */\n  get isQA() {\n    return isQA(this.toolMode);\n  }\n\n  /**\n   * is tool readonly\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.toolMode);\n  }\n\n  get loadReviewEnabled() {\n    return !this.isLabeling || this.isAdvanceReviewLabel;\n  }\n\n  get isAdvanceReview() {\n    return isAdvance(this.businessType) && this.isQA;\n  }\n\n  get isAdvanceReviewLabel() {\n    return !!this.advanceFlag && this.isLabel;\n  }\n\n  constructor({\n    locale,\n    toolName,\n    toolMode,\n    projectId,\n    flowId,\n    jobId,\n    taskId,\n    recordId,\n    workerId,\n    workerName,\n    auditId,\n    reviewUrl,\n    reviewFrom,\n    flowData,\n    templateConfig,\n    scriptCheckTimeout,\n    auditCycle,\n    saveContent,\n    loadContent,\n    validateContent,\n    trackingStats,\n  }: JobProxyParams) {\n    // set locale\n    this.locale = getLocale(locale);\n    // annotation type, unique key for the processor\n    this.toolName = toolName;\n\n    this.setMode(toolMode);\n    this.setBusinessType(flowData?.BUSINESS_TYPE);\n    this.setJobInfo(projectId, flowId, jobId, taskId, recordId, workerId, workerName);\n    this.setAuditInfo(auditId, auditCycle);\n    this.setReviewUrl(reviewUrl);\n    this.reviewFrom = reviewFrom;\n    this.flowData = JSON.stringify(flowData);\n    this.tempResultUrl = flowData?.TEMP_RESULT_URL;\n    this.tempQAResultUrl = flowData?.TEMP_QA_RESULT_URL;\n    this.encryptedTaskInfo = flowData?.ENCRYPTED_TASK_INFO;\n    this.advanceFlag = flowData?.ADVANCE_FLAG;\n    this.advanceWorkerName = flowData?.ADVANCE_QA_NAME;\n    this.templateConfig = cloneDeep(templateConfig);\n\n    if (typeof scriptCheckTimeout === 'string' && scriptCheckTimeout) {\n      const checkTimeout = Number(scriptCheckTimeout);\n      this.scriptCheckTimeout = ((Number.isNaN(checkTimeout) || !scriptCheckTimeout) ? 10 : checkTimeout) * 1000;\n    }\n\n    // saveContent & loadContent is provided by the platform\n    // if no these two functions, load & save reviews should be implemented by each tool self\n    this.saveContent = saveContent;\n    this.loadContent = loadContent;\n\n    if (validateContent) {\n      this.validateContent = (content: string, data: any) => validateContent(content, data, this.scriptCheckTimeout);\n    }\n\n    if (trackingStats) {\n      this.trackingStats = (stats: unknown, timestamp: number) => trackingStats({\n        projectId: this.projectId,\n        jobId: this.jobId,\n        recordId: this.recordId,\n        timestamp,\n        stats,\n      });\n    }\n\n    this.setAdvanceWork(flowData);\n  }\n\n  setMode(toolMode?: string) {\n    if (Object.values(ToolMode).includes(toolMode as ToolMode)) {\n      this.toolMode = toolMode as ToolMode;\n    } else {\n      // default is a template preview job\n      this.toolMode = ToolMode.TEMPLATE_PREVIEW;\n    }\n  }\n\n  setBusinessType(businessType?: string) {\n    if (Object.values(BusinessType).includes(businessType as BusinessType)) {\n      this.businessType = businessType as BusinessType;\n    } else {\n      this.businessType = BusinessType.DEFAULT;\n    }\n  }\n\n  setJobInfo(projectId?: string, flowId?: string, jobId?: string, taskId?: string, recordId?: string, workerId?: string, workerName?: string) {\n    this.projectId = projectId || '';\n    this.flowId = flowId || '';\n    this.jobId = jobId || '';\n    this.taskId = taskId || '';\n    this.recordId = recordId || '';\n    this.workerId = workerId || '';\n    this.workerName = workerName || '';\n  }\n\n  setAuditInfo(auditId?: string, auditCycle?: string) {\n    this.auditId = auditId || `${this.jobId}.${this.recordId}.audit`;\n    this.auditCycle = auditCycle || '';\n    this.auditFileId = `${this.jobId}.${this.recordId}.audit`;\n  }\n\n  setAuditId(auditFileId?: string) {\n    if (auditFileId) {\n      this.auditFileId = auditFileId;\n    }\n  }\n\n  setReviewUrl(reviewUrl?: string) {\n    this.reviewUrl = reviewUrl || '';\n  }\n\n  setAdvanceWork(flowData: any) {\n    const { LAST_JOB_FILE_NAME } = flowData || {};\n    if (this.isAdvanceReview || this.isAdvanceReviewLabel) {\n      advanceJob.init({\n        isLabel: this.isAdvanceReviewLabel,\n        isQa: this.isAdvanceReview,\n        locale: this.locale,\n        businessType: this.businessType,\n        resultFileName: LAST_JOB_FILE_NAME,\n        reviewFileName: this.advanceReviewFileName,\n        loadContent: (filename: string) => this.load(filename),\n      });\n    }\n  }\n\n  /**\n   * load data by loadContent\n   * @param filename\n   * @param directory\n   * @param onLoadError\n   */\n  private async load(filename: string, directory = this.fileDirectory, onLoadError?: () => void) {\n    if (!this.loadContent || {}.toString.call(this.loadContent) !== '[object Function]') {\n      throw new Error(ErrMsg.LOAD_CONTENT_NOT_DEFINED[this.locale]);\n    }\n\n    let res;\n    let data;\n    try {\n      res = await this.loadContent(filename, directory);\n    } catch (e) {\n      // load error\n      if (onLoadError) {\n        onLoadError();\n      }\n    }\n    if (res) {\n      try {\n        data = JSON.parse(res);\n      } catch (e) {\n        // parse error\n      }\n    }\n    return data;\n  }\n\n  /**\n   * save data by saveContent\n   * @param base64\n   * @param filetype\n   * @param filename\n   * @param toolFileType\n   * @param isSubmit\n   * @param options\n   */\n  private async save(\n    base64: string,\n    filetype: string,\n    filename: string,\n    toolFileType = ToolFileType.UNKNOWN,\n    isSubmit = false,\n    options?: SaveOptions,\n  ) {\n    if (!this.saveContent || {}.toString.call(this.saveContent) !== '[object Function]') {\n      throw new Error(ErrMsg.SAVE_CONTENT_NOT_DEFINED[this.locale]);\n    }\n    let type = toolFileType;\n    if (this.isTemplatePreview) {\n      // for template preview mode, all save func should be unknown type\n      type = ToolFileType.UNKNOWN;\n    }\n    const result = await this.saveContent({\n      b64Content: base64,\n      type: filetype,\n      filename,\n      filePrefix: this.fileDirectory,\n      jobId: this.jobId,\n      projectId: this.projectId,\n      recordId: this.recordId,\n      toolFileType: type,\n      flowId: this.flowId,\n      // only audit result need audit id and cycle\n      ...[ToolFileType.AUDIT_RESULT, ToolFileType.TEMP_AUDIT_RESULT].includes(toolFileType) && {\n        auditId: this.auditId,\n        cycle: this.auditCycle,\n      },\n      tempResult: isSubmit === false,\n      businessType: this.businessType,\n      frame: options?.frame,\n    });\n    if (toolFileType === ToolFileType.ADVANCE_QA_RESULT) {\n      advanceJob.updateLastTime({ updateReviewTime: new Date().getTime() });\n    } else if (toolFileType === ToolFileType.TEMP_LABEL_RESULT) {\n      advanceJob.updateLastTime({ updateResultTime: new Date().getTime() });\n    }\n    return result;\n  }\n\n  /**\n   * load temp save annotation result\n   */\n  async loadSavedResult() {\n    if (this.readonly || this.isTemplatePreview) {\n      // not load temp saved annotation when is readonly\n      return undefined;\n    }\n    this.savedDataLoadError = false;\n\n    if (this.tempResultUrl) {\n      let result;\n      try {\n        result = await fetchResultByUrl(this.tempResultUrl);\n      } catch (e) {\n        this.savedDataLoadError = true;\n        // eslint-disable-next-line no-console\n        console.log('Temp saved data load error [by temp result url]', this.tempResultUrl);\n      }\n      return result;\n    }\n\n    return this.load(this.resultFileName, this.fileDirectory, () => {\n      this.savedDataLoadError = true;\n      // eslint-disable-next-line no-console\n      console.log('Temp saved data load error [by load content]');\n    });\n  }\n\n  /**\n   * load annotation result from last task\n   */\n  async loadReviewFrom() {\n    this.reviewFromLoadError = false;\n    let result;\n    if (typeof this.reviewFrom === 'object') {\n      result = this.reviewFrom;\n    } else if (typeof this.reviewFrom === 'string' && this.reviewFrom !== '') {\n      if (this.reviewFrom.startsWith('http')) {\n        try {\n          result = await fetchResultByUrl(this.reviewFrom);\n        } catch (e) {\n          this.reviewFromLoadError = true;\n          throw e;\n        }\n      } else {\n        result = JSON.parse(this.reviewFrom);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * simply to load annotation result\n   */\n  async loadResult() {\n    // get temp saved annotations\n    let result = await this.loadSavedResult();\n\n    // get result from review_from\n    if (!result) {\n      result = await this.loadReviewFrom();\n    }\n\n    return result;\n  }\n\n  /**\n   * load temp saved reviews\n   */\n  async loadSavedReviews() {\n    if (!this.isQA) {\n      // not load temp saved reviews when is not a qa job\n      return undefined;\n    }\n\n    if (this.tempQAResultUrl) {\n      let reviews;\n      try {\n        reviews = await fetchResultByUrl(this.tempQAResultUrl);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('Temp saved reviews load error [by temp qa result url]', this.tempQAResultUrl);\n      }\n      return reviews;\n    }\n\n    return this.load(this.reviewFileName);\n  }\n\n  /**\n   * load reviews from last task by link\n   * @param reviewUrl\n   */\n  async loadReviewsFromReview(reviewUrl = this.reviewUrl) {\n    let reviews;\n    try {\n      reviews = await fetchResultByUrl(reviewUrl);\n    } catch (e) {\n      // get from review url error\n    }\n    return reviews;\n  }\n\n  /**\n   * load audit reviews\n   */\n  async loadReviewsFromAudit() {\n    return this.load(this.auditFileName, AUDIT_DIRECTORY);\n  }\n\n  /**\n   * simply to load reviews\n   * @param reviewUrl\n   */\n  async loadReviews(reviewUrl?: string) {\n    // get temp saved reviews\n    let reviews = await this.loadSavedReviews();\n    const url = reviewUrl || this.reviewUrl;\n    if (!reviews && url) {\n      // get from review url first\n      reviews = await this.loadReviewsFromReview(url);\n    }\n    if (!reviews) {\n      // then get from audit if necessary\n      reviews = await this.loadReviewsFromAudit();\n    }\n    return reviews;\n  }\n\n  /**\n   * save annotation result\n   * @param data\n   * @param isSubmit\n   * @param useEncodeWorker\n   */\n  async saveResult(data: unknown, isSubmit = false, useEncodeWorker = false) {\n    if (this.reviewFromLoadError || this.savedDataLoadError) {\n      throw new Error(ErrMsg.RESULT_LOAD_ERROR[this.locale]);\n    }\n    const dataStr = typeof data === 'string' ? data : JSON.stringify(data);\n    const base64 = useEncodeWorker ? await base64Encoder.run(dataStr) : Base64.encode(dataStr);\n    const filename = `${isSubmit ? `R.${new Date().getTime()}.` : ''}${this.resultFileName}`;\n    let toolFileType = isSubmit ? ToolFileType.LABEL_RESULT : ToolFileType.TEMP_LABEL_RESULT;\n    if (isAudit(this.toolMode)) {\n      toolFileType = isSubmit ? ToolFileType.AUDIT_MODIFY_LABEL_RESULT : ToolFileType.AUDIT_MODIFY_TEMP_LABEL_RESULT;\n    }\n    const options: SaveOptions = {};\n    if (toolFileType === ToolFileType.TEMP_LABEL_RESULT && data) {\n      options.frame = (data as any).annotatedFrameCount;\n    }\n    return this.save(base64, FileType.TEXT, filename, toolFileType, isSubmit, options);\n  }\n\n  /**\n   * save reviews\n   * @param data\n   * @param isSubmit\n   */\n  async saveReviews(data: unknown, isSubmit = false) {\n    if (isAudit(this.toolMode)) {\n      return this.saveAudit(data, isSubmit);\n    }\n    const base64 = Base64.encode(JSON.stringify(data));\n\n    let toolFileType = this.isAdvanceReview ? ToolFileType.ADVANCE_QA_RESULT : ToolFileType.TEMP_QA_RESULT;\n    toolFileType = isSubmit ? ToolFileType.QA_RESULT : toolFileType;\n\n    const filename = isAdvance(this.businessType) ? this.advanceReviewFileName : this.reviewFileName;\n\n    return this.save(base64, FileType.TEXT, filename, toolFileType, isSubmit);\n  }\n\n  /**\n   * save audit reviews\n   * @param data\n   * @param isSubmit\n   */\n  async saveAudit(data: unknown, isSubmit = false) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    const toolFileType = isSubmit ? ToolFileType.AUDIT_RESULT : ToolFileType.TEMP_AUDIT_RESULT;\n    return this.save(base64, FileType.TEXT, this.auditFileName, toolFileType, isSubmit);\n  }\n\n  /**\n   * save annotation statistics\n   * @param data\n   * @param isSubmit\n   */\n  async saveResultStat(data: unknown, isSubmit = false) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    const filename = `${isSubmit ? `S.${new Date().getTime()}.` : ''}${this.resultStatFileName}`;\n    return this.save(base64, FileType.TEXT, filename, ToolFileType.STAT_RESULT);\n  }\n\n  /**\n   * save review statistics (including statistics for audit task)\n   * @param data\n   * @param isSubmit\n   */\n  async saveReviewStat(data: unknown, isSubmit = false) {\n    const base64 = Base64.encode(JSON.stringify(data));\n    const filename = `${isSubmit ? `S.${new Date().getTime()}.` : ''}${this.reviewStatFileName}`;\n    return this.save(base64, FileType.TEXT, filename, ToolFileType.STAT_RESULT);\n  }\n\n  saveImage = async (base64: string, filetype: string, filename: string, toolFileType = ToolFileType.UNKNOWN) => {\n    const url = await this.save(base64, filetype, filename, toolFileType);\n    return url;\n  };\n\n  /**\n   * save file\n   * @param file\n   * @param toolFileType\n   */\n  saveFile = (file: File, toolFileType = ToolFileType.UNKNOWN) => new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = async () => {\n      const base64Str = reader.result as string;\n      const url = await this.save(base64Str, file.type, `${Date.now()}.${file.name}`, toolFileType);\n      if (url) {\n        resolve(url);\n      } else {\n        reject();\n      }\n    };\n    reader.onerror = (e) => reject(e);\n  });\n\n  /**\n   * request to api gateway\n   * @param path\n   * @param options\n   */\n  async request(\n    path: string,\n    options: {\n      method: 'get' | 'GET' | 'post' | 'POST';\n      headers?: { [key: string]: string };\n      body?: string;\n    },\n  ) {\n    const headers = {\n      ...options.headers,\n    };\n    if (this.encryptedTaskInfo) {\n      headers.encryptedTaskInfo = this.encryptedTaskInfo;\n    }\n    return fetch(`/api-gw${path}`, {\n      headers,\n      method: options.method,\n      body: options.body,\n      credentials: 'include',\n    });\n  }\n\n  /**\n   * forward api\n   * @param type\n   * @param data\n   */\n  async forwardAPI(type: APIForwardType, data?: any) {\n    switch (type) {\n      case APIForwardType.TEXT_DETECTION:\n        return this.request('/api-forward/v1/api-forward/text-detection', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: data,\n        })\n          .then((res) => res.json())\n          .then((body) => body.data)\n          .catch(() => '');\n      case APIForwardType.SPEECH_RECOGNIZE:\n        // eslint-disable-next-line no-case-declarations\n        let route = data.get('endpoint') === RecognizeSource.GG ? 'gg-speech-recognize' : 'speech-recognize';\n        if (data.get('endpoint') === RecognizeSource.ALIYUN) {\n          route = 'aliyun-speech-recognize';\n        }\n        return this.request(`/api-forward/v1/api-forward/${route}`, {\n          method: 'POST',\n          headers: {\n            'Conntent-Type': 'multipart/form-data',\n          },\n          body: data,\n        })\n          .then((res) => res.json())\n          .then((body) => body)\n          .catch(() => ({}));\n      case APIForwardType.INTERACTIVE_SEGMENTATION:\n        return this.request('/api-forward/v1/api-forward/interactive-segmentation', {\n          method: 'POST',\n          body: data,\n        })\n          .then((res) => res.json())\n          .then((body) => body)\n          .catch(() => ({}));\n      case APIForwardType.TRAFFIC_SIGN_RECOGNIZE:\n        return this.request('/api-forward/v1/api-forward/traffic-sign/recognize', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: data,\n        })\n          .then((res) => res.json())\n          .then((body) => body)\n          .catch(() => ({}));\n      case APIForwardType.FRAME_SEGMENTATION:\n        return this.request('/api-forward/v1/api-forward/frame-segmentation', {\n          method: 'POST',\n          body: data,\n        })\n          .then((res) => res.arrayBuffer())\n          .catch(() => '');\n      case APIForwardType.CHAT_GPT:\n        return this.request('/api-forward/v1/api-forward/create-gpt3-chat', {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          method: 'POST',\n          body: JSON.stringify({ ...data, model: 'gpt-3.5-turbo' }),\n        }).then((res) => res.json())\n          .then((body) => {\n            if (body.error) {\n              return body;\n            }\n            return body.data.choices;\n          })\n          .catch(() => '');\n      case APIForwardType.CHAT_GPT_4:\n        return this.request('/api-forward/v1/api-forward/create-gpt4-chat', {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          method: 'POST',\n          body: JSON.stringify({ ...data, model: 'gpt-4' }),\n        }).then((res) => res.json())\n          .then((body) => {\n            if (body.error) {\n              return body;\n            }\n            return body.data.choices;\n          })\n          .catch(() => '');\n      default:\n        return Promise.resolve();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}