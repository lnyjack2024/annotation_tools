{"ast":null,"code":"import { Point } from 'pixi.js';\nimport Shape, { BorderStyle } from './Shape';\nimport { ShapeType, ShapeVertexType } from './types';\nimport { precise } from './utils';\n/**\n * Dot shape\n * @class\n */\nexport default class Dot extends Shape {\n  /**\n   * get x\n   * @getter\n   */\n  get x() {\n    return this._x || 0;\n  }\n\n  /**\n   * set x\n   * @setter\n   */\n  set x(x) {\n    this._x = x;\n    this.drawShape();\n  }\n\n  /**\n   * get y\n   * @getter\n   */\n  get y() {\n    return this._y || 0;\n  }\n\n  /**\n   * set y\n   * @setter\n   */\n  set y(y) {\n    this._y = y;\n    this.drawShape();\n  }\n\n  /**\n   * set dot radius\n   * @setter\n   */\n  set dotRadius(dotRadius) {\n    const shouldUpdate = this._dotRadius !== dotRadius;\n    this._dotRadius = dotRadius;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * set dot type\n   * @setter\n   */\n  set dotType(dotType) {\n    const shouldUpdate = this._dotType !== dotType;\n    this._dotType = dotType;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(position) {\n    if (this._x !== position.x || this._y !== position.y) {\n      this._x = precise(position.x);\n      this._y = precise(position.y);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get dot border width\n   * @getter\n   */\n  get dotWidth() {\n    const radius = Math.ceil(this._dotRadius / 2);\n    return this.selected ? radius + 1 : radius;\n  }\n\n  /**\n   * get dot shape radius\n   * @getter\n   */\n  get dotInnerRadius() {\n    const radius = Math.floor(this._dotRadius / 2);\n    return this.selected ? radius + 1 : radius;\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    return {\n      left: this.x,\n      top: this.y,\n      right: this.x,\n      bottom: this.y\n    };\n  }\n\n  /**\n   * shape color\n   * @getter\n   */\n  get displayColor() {\n    if (this.selected) {\n      return this.selectedColor;\n    }\n    if (this.hovered) {\n      return this.hoveredColor;\n    }\n    return this.color;\n  }\n  constructor(options) {\n    super(options);\n    this.shapeType = ShapeType.DOT;\n    /**\n     * position x\n     * @private\n     */\n    this._x = void 0;\n    /**\n    * position y\n    * @private\n    */\n    this._y = void 0;\n    /**\n     * dot radius\n     * @private\n     */\n    this._dotRadius = 5;\n    /**\n     * dot shape type\n     * @private\n     */\n    this._dotType = ShapeVertexType.DOT;\n    const {\n      x,\n      y,\n      dotRadius,\n      dotType\n    } = options;\n    if (x !== undefined && y !== undefined) {\n      this._x = precise(x);\n      this._y = precise(y);\n    }\n    if (dotRadius !== undefined) {\n      this._dotRadius = dotRadius;\n    }\n    if (dotType !== undefined) {\n      this._dotType = dotType;\n    }\n    this.drawShape();\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    const mouseUp = event => {\n      let localPoint = this.globalSnappingPoint;\n      if (!localPoint) {\n        const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n        localPoint = this._mapStageToLocalPosition(point);\n      }\n      const {\n        x,\n        y\n      } = this._keepPointInBounds(localPoint);\n      this._x = precise(x);\n      this._y = precise(y);\n      this.drawShape();\n      this._finish();\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    if (this._x === undefined || this._y === undefined) {\n      return;\n    }\n    this.instance.scale.set(1 / this.scale, 1 / this.scale);\n    this.instance.pivot.set(this.x, this.y);\n    this.instance.position.set(this.x, this.y);\n    this.instance.beginFill(this.displayColor, this.borderStyle === BorderStyle.DASHED ? 0.2 : 1);\n    this.instance.drawVertex(this.x, this.y, this.dotInnerRadius + this.dotWidth, this._dotType);\n    this.instance.endFill();\n    this.instance.beginFill(0x252935);\n    this.instance.drawVertex(this.x, this.y, this.dotInnerRadius, this._dotType);\n    this.instance.endFill();\n    if (this.borderStyle === BorderStyle.DASHED) {\n      this._drawDashBorder();\n    }\n    if (this._finished) {\n      this.drawShapeLabel();\n    }\n  }\n\n  /**\n   * draw dot dash border\n   */\n  _drawDashBorder() {\n    const radius = this.dotInnerRadius + this.dotWidth;\n    const kappa = 0.5522848;\n    const x = this.x - radius;\n    const y = this.y - radius;\n    const ox = radius * kappa;\n    const oy = radius * kappa;\n    const xe = x + radius * 2;\n    const ye = y + radius * 2;\n    const xm = this.x;\n    const ym = this.y;\n    this.instance.lineStyle(1, this.displayColor, this.borderAlpha);\n    this.instance.moveTo(x, ym);\n    this.instance.dashBezierCurveTo(x, ym - oy, xm - ox, y, xm, y, 3, 2, false);\n    this.instance.dashBezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym, 3, 2, false);\n    this.instance.dashBezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye, 3, 2, false);\n    this.instance.dashBezierCurveTo(xm - ox, ye, x, ym + oy, x, ym, 3, 2, false);\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    return [[[[this.x, this.y]]]];\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return new Point(this.x, this.y - 7 / this.scale);\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point, tolerance = 8) {\n    const t = tolerance / this.scale;\n    const pointDistance = Math.sqrt((this.x - point.x) ** 2 + (this.y - point.y) ** 2);\n    if (pointDistance < t) {\n      return new Point(this.x, this.y);\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["Point","Shape","BorderStyle","ShapeType","ShapeVertexType","precise","Dot","x","_x","drawShape","y","_y","dotRadius","shouldUpdate","_dotRadius","dotType","_dotType","position","dotWidth","radius","Math","ceil","selected","dotInnerRadius","floor","shapeBounds","left","top","right","bottom","displayColor","selectedColor","hovered","hoveredColor","color","constructor","options","shapeType","DOT","undefined","create","mouseUp","event","localPoint","globalSnappingPoint","point","_mapScreenToStagePosition","clientX","clientY","_mapStageToLocalPosition","_keepPointInBounds","_finish","document","removeEventListener","addEventListener","_finished","instance","clear","scale","set","pivot","beginFill","borderStyle","DASHED","drawVertex","endFill","_drawDashBorder","drawShapeLabel","kappa","ox","oy","xe","ye","xm","ym","lineStyle","borderAlpha","moveTo","dashBezierCurveTo","getData","getAreaAsGeoJSON","getLabelPosition","snapToPoint","tolerance","t","pointDistance","sqrt"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Dot.ts"],"sourcesContent":["import { Point } from 'pixi.js';\nimport Shape, { BorderStyle, ShapeOptions } from './Shape';\nimport { ShapeType, ShapeVertexType } from './types';\nimport { precise } from './utils';\n\nexport interface DotData {\n  x: number;\n  y: number;\n}\n\nexport interface DotOptions extends ShapeOptions {\n  x?: number;\n  y?: number;\n  dotRadius?: number;\n  dotType?: ShapeVertexType;\n}\n\n/**\n * Dot shape\n * @class\n */\nexport default class Dot extends Shape<DotData> {\n  shapeType = ShapeType.DOT;\n\n  /**\n   * position x\n   * @private\n   */\n  private _x: number | undefined;\n\n  /**\n  * position y\n  * @private\n  */\n  private _y: number | undefined;\n\n  /**\n   * dot radius\n   * @private\n   */\n  private _dotRadius = 5;\n\n  /**\n   * dot shape type\n   * @private\n   */\n  private _dotType = ShapeVertexType.DOT;\n\n  /**\n   * get x\n   * @getter\n   */\n  get x() {\n    return this._x || 0;\n  }\n\n  /**\n   * set x\n   * @setter\n   */\n  set x(x: number) {\n    this._x = x;\n    this.drawShape();\n  }\n\n  /**\n   * get y\n   * @getter\n   */\n  get y() {\n    return this._y || 0;\n  }\n\n  /**\n   * set y\n   * @setter\n   */\n  set y(y: number) {\n    this._y = y;\n    this.drawShape();\n  }\n\n  /**\n   * set dot radius\n   * @setter\n   */\n  set dotRadius(dotRadius: number) {\n    const shouldUpdate = this._dotRadius !== dotRadius;\n    this._dotRadius = dotRadius;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * set dot type\n   * @setter\n   */\n  set dotType(dotType: ShapeVertexType) {\n    const shouldUpdate = this._dotType !== dotType;\n    this._dotType = dotType;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(position: Point) {\n    if (this._x !== position.x || this._y !== position.y) {\n      this._x = precise(position.x);\n      this._y = precise(position.y);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get dot border width\n   * @getter\n   */\n  get dotWidth() {\n    const radius = Math.ceil(this._dotRadius / 2);\n    return this.selected ? radius + 1 : radius;\n  }\n\n  /**\n   * get dot shape radius\n   * @getter\n   */\n  get dotInnerRadius() {\n    const radius = Math.floor(this._dotRadius / 2);\n    return this.selected ? radius + 1 : radius;\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    return { left: this.x, top: this.y, right: this.x, bottom: this.y };\n  }\n\n  /**\n   * shape color\n   * @getter\n   */\n  get displayColor() {\n    if (this.selected) {\n      return this.selectedColor;\n    }\n    if (this.hovered) {\n      return this.hoveredColor;\n    }\n    return this.color;\n  }\n\n  constructor(options: DotOptions) {\n    super(options);\n\n    const { x, y, dotRadius, dotType } = options;\n    if (x !== undefined && y !== undefined) {\n      this._x = precise(x);\n      this._y = precise(y);\n    }\n    if (dotRadius !== undefined) {\n      this._dotRadius = dotRadius;\n    }\n    if (dotType !== undefined) {\n      this._dotType = dotType;\n    }\n    this.drawShape();\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    const mouseUp = (event: MouseEvent) => {\n      let localPoint = this.globalSnappingPoint;\n      if (!localPoint) {\n        const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n        localPoint = this._mapStageToLocalPosition(point);\n      }\n      const { x, y } = this._keepPointInBounds(localPoint);\n      this._x = precise(x);\n      this._y = precise(y);\n      this.drawShape();\n      this._finish();\n\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    if (this._x === undefined || this._y === undefined) {\n      return;\n    }\n\n    this.instance.scale.set(1 / this.scale, 1 / this.scale);\n    this.instance.pivot.set(this.x, this.y);\n    this.instance.position.set(this.x, this.y);\n\n    this.instance.beginFill(this.displayColor, this.borderStyle === BorderStyle.DASHED ? 0.2 : 1);\n    this.instance.drawVertex(this.x, this.y, this.dotInnerRadius + this.dotWidth, this._dotType);\n    this.instance.endFill();\n    this.instance.beginFill(0x252935);\n    this.instance.drawVertex(this.x, this.y, this.dotInnerRadius, this._dotType);\n    this.instance.endFill();\n    if (this.borderStyle === BorderStyle.DASHED) {\n      this._drawDashBorder();\n    }\n\n    if (this._finished) {\n      this.drawShapeLabel();\n    }\n  }\n\n  /**\n   * draw dot dash border\n   */\n  _drawDashBorder() {\n    const radius = this.dotInnerRadius + this.dotWidth;\n    const kappa = 0.5522848;\n    const x = this.x - radius;\n    const y = this.y - radius;\n    const ox = radius * kappa;\n    const oy = radius * kappa;\n    const xe = x + radius * 2;\n    const ye = y + radius * 2;\n    const xm = this.x;\n    const ym = this.y;\n\n    this.instance.lineStyle(1, this.displayColor, this.borderAlpha);\n    this.instance.moveTo(x, ym);\n    this.instance.dashBezierCurveTo(x, ym - oy, xm - ox, y, xm, y, 3, 2, false);\n    this.instance.dashBezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym, 3, 2, false);\n    this.instance.dashBezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye, 3, 2, false);\n    this.instance.dashBezierCurveTo(xm - ox, ye, x, ym + oy, x, ym, 3, 2, false);\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    return [[[[this.x, this.y] as [number, number]]]];\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return new Point(this.x, this.y - 7 / this.scale);\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point: Point, tolerance = 8) {\n    const t = tolerance / this.scale;\n    const pointDistance = Math.sqrt((this.x - point.x) ** 2 + (this.y - point.y) ** 2);\n    if (pointDistance < t) {\n      return new Point(this.x, this.y);\n    }\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}