{"ast":null,"code":"import { Language } from '../../../utils/constants';\nimport CN from './zh-CN';\nimport US from './en-US';\nimport JP from './ja-JP';\nimport KR from './ko-KR';\nclass Internationalization {\n  constructor() {\n    this.locale = Language.EN_US;\n    this.setLocale = locale => {\n      const languages = Object.values(Language);\n      if (locale !== undefined) {\n        // get from props\n        if (languages.includes(locale)) {\n          this.locale = locale;\n        }\n      } else if (navigator.language) {\n        // get from browser\n        const language = languages.find(l => l.slice(0, 2) === navigator.language.slice(0, 2));\n        if (language) {\n          this.locale = language;\n        }\n      }\n    };\n  }\n  get isUS() {\n    return this.locale === Language.EN_US;\n  }\n  translate(key, options) {\n    let message;\n    switch (this.locale) {\n      case Language.ZH_CN:\n        message = CN[key];\n        break;\n      case Language.JA_JP:\n        message = JP[key];\n        break;\n      case Language.KO_KR:\n        message = KR[key];\n        break;\n      default:\n        message = US[key];\n        break;\n    }\n    if (message) {\n      let msg = message;\n      if (options && options.values) {\n        Object.keys(options.values).forEach(k => {\n          msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n        });\n      }\n      return msg;\n    }\n    return key;\n  }\n}\nconst i18n = new Internationalization();\nexport const setLocale = i18n.setLocale;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function formatMessage(key, options = {}) {\n  const message = i18n.translate(key);\n  if (message) {\n    let msg = message;\n    if (options.values) {\n      Object.keys(options.values).forEach(k => {\n        msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n      });\n    }\n    return msg;\n  }\n  return key;\n}","map":{"version":3,"names":["Language","CN","US","JP","KR","Internationalization","constructor","locale","EN_US","setLocale","languages","Object","values","undefined","includes","navigator","language","find","l","slice","isUS","translate","key","options","message","ZH_CN","JA_JP","KO_KR","msg","keys","forEach","k","replace","RegExp","i18n","formatMessage"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/translation/locales/index.ts"],"sourcesContent":["import { Language } from '../../../utils/constants';\nimport CN from './zh-CN';\nimport US from './en-US';\nimport JP from './ja-JP';\nimport KR from './ko-KR';\n\nclass Internationalization {\n  locale = Language.EN_US;\n\n  get isUS() {\n    return this.locale === Language.EN_US;\n  }\n\n  setLocale = (locale?: string) => {\n    const languages = Object.values(Language);\n    if (locale !== undefined) {\n      // get from props\n      if (languages.includes(locale as Language)) {\n        this.locale = locale as Language;\n      }\n    } else if (navigator.language) {\n      // get from browser\n      const language = languages.find((l) => l.slice(0, 2) === navigator.language.slice(0, 2));\n      if (language) {\n        this.locale = language;\n      }\n    }\n  };\n\n  translate(key: string, options?: any) {\n    let message;\n    switch (this.locale) {\n      case Language.ZH_CN:\n        message = CN[key];\n        break;\n      case Language.JA_JP:\n        message = JP[key];\n        break;\n      case Language.KO_KR:\n        message = KR[key];\n        break;\n      default:\n        message = US[key];\n        break;\n    }\n    if (message) {\n      let msg = message;\n      if (options && options.values) {\n        Object.keys(options.values).forEach((k) => {\n          msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n        });\n      }\n      return msg;\n    }\n    return key;\n  }\n}\n\nconst i18n = new Internationalization();\n\nexport const setLocale = i18n.setLocale;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function formatMessage(key: string, options: any = {}) {\n  const message = i18n.translate(key);\n  if (message) {\n    let msg = message;\n    if (options.values) {\n      Object.keys(options.values).forEach((k) => {\n        msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n      });\n    }\n    return msg;\n  }\n  return key;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}