{"ast":null,"code":"/*!\n * @pixi/accessibility - v6.2.2\n * Compiled Wed, 26 Jan 2022 16:23:27 UTC\n *\n * @pixi/accessibility is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nvar accessibleTarget = {\n  /**\n   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n   *   shadow div with attributes set\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessible: false,\n  /**\n   * Sets the title attribute of the shadow div\n   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n   *\n   * @member {?string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleTitle: null,\n  /**\n   * Sets the aria-label attribute of the shadow div\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleHint: null,\n  /**\n   * @member {number}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   * @todo Needs docs.\n   */\n  tabIndex: 0,\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleActive: false,\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleDiv: null,\n  /**\n   * Specify the type of div the accessible layer is. Screen readers treat the element differently\n   * depending on this type. Defaults to button.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'button'\n   */\n  accessibleType: 'button',\n  /**\n   * Specify the pointer-events the accessible div will use\n   * Defaults to auto.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'auto'\n   */\n  accessiblePointerEvents: 'auto',\n  /**\n   * Setting to false will prevent any children inside this container to\n   * be accessible. Defaults to true.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @default true\n   */\n  accessibleChildren: true,\n  renderId: -1\n};\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nvar AccessibilityManager = /** @class */function () {\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   */\n  function AccessibilityManager(renderer) {\n    /** Setting this to true will visually show the divs. */\n    this.debug = false;\n    /** Internal variable, see isActive getter. */\n    this._isActive = false;\n    /** Internal variable, see isMobileAccessibility getter. */\n    this._isMobileAccessibility = false;\n    /** A simple pool for storing divs. */\n    this.pool = [];\n    /** This is a tick used to check if an object is no longer being rendered. */\n    this.renderId = 0;\n    /** The array of currently active accessible items. */\n    this.children = [];\n    /** Count to throttle div updates on android devices. */\n    this.androidUpdateCount = 0;\n    /**  The frequency to update the div elements. */\n    this.androidUpdateFrequency = 500; // 2fps\n    this._hookDiv = null;\n    if (isMobile.tablet || isMobile.phone) {\n      this.createTouchHook();\n    }\n    // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n    var div = document.createElement('div');\n    div.style.width = DIV_TOUCH_SIZE + \"px\";\n    div.style.height = DIV_TOUCH_SIZE + \"px\";\n    div.style.position = 'absolute';\n    div.style.top = DIV_TOUCH_POS_X + \"px\";\n    div.style.left = DIV_TOUCH_POS_Y + \"px\";\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    this.div = div;\n    this.renderer = renderer;\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n    this._onKeyDown = this._onKeyDown.bind(this);\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n    this._onMouseMove = this._onMouseMove.bind(this);\n    // let listen for tab.. once pressed we can fire up and show the accessibility layer\n    self.addEventListener('keydown', this._onKeyDown, false);\n  }\n  Object.defineProperty(AccessibilityManager.prototype, \"isActive\", {\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._isActive;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessibilityManager.prototype, \"isMobileAccessibility\", {\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._isMobileAccessibility;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates the touch hooks.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.createTouchHook = function () {\n    var _this = this;\n    var hookDiv = document.createElement('button');\n    hookDiv.style.width = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.height = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.position = 'absolute';\n    hookDiv.style.top = DIV_HOOK_POS_X + \"px\";\n    hookDiv.style.left = DIV_HOOK_POS_Y + \"px\";\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n    hookDiv.style.backgroundColor = '#FF0000';\n    hookDiv.title = 'select to enable accessibility for this content';\n    hookDiv.addEventListener('focus', function () {\n      _this._isMobileAccessibility = true;\n      _this.activate();\n      _this.destroyTouchHook();\n    });\n    document.body.appendChild(hookDiv);\n    this._hookDiv = hookDiv;\n  };\n  /**\n   * Destroys the touch hooks.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.destroyTouchHook = function () {\n    if (!this._hookDiv) {\n      return;\n    }\n    document.body.removeChild(this._hookDiv);\n    this._hookDiv = null;\n  };\n  /**\n   * Activating will cause the Accessibility layer to be shown.\n   * This is called when a user presses the tab key.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.activate = function () {\n    var _a;\n    if (this._isActive) {\n      return;\n    }\n    this._isActive = true;\n    self.document.addEventListener('mousemove', this._onMouseMove, true);\n    self.removeEventListener('keydown', this._onKeyDown, false);\n    this.renderer.on('postrender', this.update, this);\n    (_a = this.renderer.view.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(this.div);\n  };\n  /**\n   * Deactivating will cause the Accessibility layer to be hidden.\n   * This is called when a user moves the mouse.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.deactivate = function () {\n    var _a;\n    if (!this._isActive || this._isMobileAccessibility) {\n      return;\n    }\n    this._isActive = false;\n    self.document.removeEventListener('mousemove', this._onMouseMove, true);\n    self.addEventListener('keydown', this._onKeyDown, false);\n    this.renderer.off('postrender', this.update);\n    (_a = this.div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.div);\n  };\n  /**\n   * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n   *\n   * @private\n   * @param {PIXI.Container} displayObject - The DisplayObject to check.\n   */\n  AccessibilityManager.prototype.updateAccessibleObjects = function (displayObject) {\n    if (!displayObject.visible || !displayObject.accessibleChildren) {\n      return;\n    }\n    if (displayObject.accessible && displayObject.interactive) {\n      if (!displayObject._accessibleActive) {\n        this.addChild(displayObject);\n      }\n      displayObject.renderId = this.renderId;\n    }\n    var children = displayObject.children;\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        this.updateAccessibleObjects(children[i]);\n      }\n    }\n  };\n  /**\n   * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.update = function () {\n    /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n    *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n    *  so I am just running update every half a second, seems to fix it.\n    */\n    var now = performance.now();\n    if (isMobile.android.device && now < this.androidUpdateCount) {\n      return;\n    }\n    this.androidUpdateCount = now + this.androidUpdateFrequency;\n    if (!this.renderer.renderingToScreen) {\n      return;\n    }\n    // update children...\n    if (this.renderer._lastObjectRendered) {\n      this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n    }\n    var _a = this.renderer.view.getBoundingClientRect(),\n      left = _a.left,\n      top = _a.top,\n      width = _a.width,\n      height = _a.height;\n    var _b = this.renderer,\n      viewWidth = _b.width,\n      viewHeight = _b.height,\n      resolution = _b.resolution;\n    var sx = width / viewWidth * resolution;\n    var sy = height / viewHeight * resolution;\n    var div = this.div;\n    div.style.left = left + \"px\";\n    div.style.top = top + \"px\";\n    div.style.width = viewWidth + \"px\";\n    div.style.height = viewHeight + \"px\";\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      if (child.renderId !== this.renderId) {\n        child._accessibleActive = false;\n        removeItems(this.children, i, 1);\n        this.div.removeChild(child._accessibleDiv);\n        this.pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n      } else {\n        // map div to display..\n        div = child._accessibleDiv;\n        var hitArea = child.hitArea;\n        var wt = child.worldTransform;\n        if (child.hitArea) {\n          div.style.left = (wt.tx + hitArea.x * wt.a) * sx + \"px\";\n          div.style.top = (wt.ty + hitArea.y * wt.d) * sy + \"px\";\n          div.style.width = hitArea.width * wt.a * sx + \"px\";\n          div.style.height = hitArea.height * wt.d * sy + \"px\";\n        } else {\n          hitArea = child.getBounds();\n          this.capHitArea(hitArea);\n          div.style.left = hitArea.x * sx + \"px\";\n          div.style.top = hitArea.y * sy + \"px\";\n          div.style.width = hitArea.width * sx + \"px\";\n          div.style.height = hitArea.height * sy + \"px\";\n          // update button titles and hints if they exist and they've changed\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle;\n          }\n          if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute('aria-label', child.accessibleHint);\n          }\n        }\n        // the title or index may have changed, if so lets update it!\n        if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n          div.title = child.accessibleTitle;\n          div.tabIndex = child.tabIndex;\n          if (this.debug) {\n            this.updateDebugHTML(div);\n          }\n        }\n      }\n    }\n    // increment the render id..\n    this.renderId++;\n  };\n  /**\n   * private function that will visually add the information to the\n   * accessability div\n   *\n   * @param {HTMLElement} div\n   */\n  AccessibilityManager.prototype.updateDebugHTML = function (div) {\n    div.innerHTML = \"type: \" + div.type + \"</br> title : \" + div.title + \"</br> tabIndex: \" + div.tabIndex;\n  };\n  /**\n   * Adjust the hit area based on the bounds of a display object\n   *\n   * @param {PIXI.Rectangle} hitArea - Bounds of the child\n   */\n  AccessibilityManager.prototype.capHitArea = function (hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    }\n    var _a = this.renderer,\n      viewWidth = _a.width,\n      viewHeight = _a.height;\n    if (hitArea.x + hitArea.width > viewWidth) {\n      hitArea.width = viewWidth - hitArea.x;\n    }\n    if (hitArea.y + hitArea.height > viewHeight) {\n      hitArea.height = viewHeight - hitArea.y;\n    }\n  };\n  /**\n   * Adds a DisplayObject to the accessibility manager\n   *\n   * @private\n   * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n   */\n  AccessibilityManager.prototype.addChild = function (displayObject) {\n    //    this.activate();\n    var div = this.pool.pop();\n    if (!div) {\n      div = document.createElement('button');\n      div.style.width = DIV_TOUCH_SIZE + \"px\";\n      div.style.height = DIV_TOUCH_SIZE + \"px\";\n      div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n      div.style.position = 'absolute';\n      div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n      div.style.borderStyle = 'none';\n      // ARIA attributes ensure that button title and hint updates are announced properly\n      if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n        div.setAttribute('aria-live', 'off');\n      } else {\n        div.setAttribute('aria-live', 'polite');\n      }\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        // FireFox needs this to announce only the new button name\n        div.setAttribute('aria-relevant', 'additions');\n      } else {\n        // required by IE, other browsers don't much care\n        div.setAttribute('aria-relevant', 'text');\n      }\n      div.addEventListener('click', this._onClick.bind(this));\n      div.addEventListener('focus', this._onFocus.bind(this));\n      div.addEventListener('focusout', this._onFocusOut.bind(this));\n    }\n    // set pointer events\n    div.style.pointerEvents = displayObject.accessiblePointerEvents;\n    // set the type, this defaults to button!\n    div.type = displayObject.accessibleType;\n    if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n      div.title = displayObject.accessibleTitle;\n    } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n      div.title = \"displayObject \" + displayObject.tabIndex;\n    }\n    if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n      div.setAttribute('aria-label', displayObject.accessibleHint);\n    }\n    if (this.debug) {\n      this.updateDebugHTML(div);\n    }\n    displayObject._accessibleActive = true;\n    displayObject._accessibleDiv = div;\n    div.displayObject = displayObject;\n    this.children.push(displayObject);\n    this.div.appendChild(displayObject._accessibleDiv);\n    displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n  };\n  /**\n   * Maps the div button press to pixi's InteractionManager (click)\n   *\n   * @private\n   * @param {MouseEvent} e - The click event.\n   */\n  AccessibilityManager.prototype._onClick = function (e) {\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'click', eventData);\n    interactionManager.dispatchEvent(displayObject, 'pointertap', eventData);\n    interactionManager.dispatchEvent(displayObject, 'tap', eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseover)\n   *\n   * @private\n   * @param {FocusEvent} e - The focus event.\n   */\n  AccessibilityManager.prototype._onFocus = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'assertive');\n    }\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'mouseover', eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseout)\n   *\n   * @private\n   * @param {FocusEvent} e - The focusout event.\n   */\n  AccessibilityManager.prototype._onFocusOut = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'polite');\n    }\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'mouseout', eventData);\n  };\n  /**\n   * Is called when a key is pressed\n   *\n   * @private\n   * @param {KeyboardEvent} e - The keydown event.\n   */\n  AccessibilityManager.prototype._onKeyDown = function (e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n    this.activate();\n  };\n  /**\n   * Is called when the mouse moves across the renderer element\n   *\n   * @private\n   * @param {MouseEvent} e - The mouse event.\n   */\n  AccessibilityManager.prototype._onMouseMove = function (e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n    this.deactivate();\n  };\n  /**\n   * Destroys the accessibility manager\n   *\n   */\n  AccessibilityManager.prototype.destroy = function () {\n    this.destroyTouchHook();\n    this.div = null;\n    self.document.removeEventListener('mousemove', this._onMouseMove, true);\n    self.removeEventListener('keydown', this._onKeyDown);\n    this.pool = null;\n    this.children = null;\n    this.renderer = null;\n  };\n  return AccessibilityManager;\n}();\nexport { AccessibilityManager, accessibleTarget };","map":{"version":3,"sources":["../../src/accessibleTarget.ts","../../src/AccessibilityManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget {\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: boolean;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement {\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     *\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n","import { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Container } from '@pixi/display';\nimport type { Renderer, AbstractRenderer } from '@pixi/core';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     *\n     * @type {PIXI.CanvasRenderer|PIXI.Renderer}\n     */\n    public renderer: AbstractRenderer|Renderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private pool: IAccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private children: DisplayObject[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private androidUpdateFrequency = 500; // 2fps\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer|Renderer)\n    {\n        this._hookDiv = null;\n\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this.div = div;\n        this.renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        self.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     *\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     *\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        self.document.addEventListener('mousemove', this._onMouseMove, true);\n        self.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n        this.renderer.view.parentNode?.appendChild(this.div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     *\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        self.document.removeEventListener('mousemove', this._onMouseMove, true);\n        self.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n        this.div.parentNode?.removeChild(this.div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!(this.renderer as Renderer).renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer._lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer._lastObjectRendered as Container);\n        }\n\n        const { left, top, width, height } = this.renderer.view.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this.renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${left}px`;\n        div.style.top = `${top}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     *\n     * @param {HTMLElement} div\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     *\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this.renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'click', eventData);\n        interactionManager.dispatchEvent(displayObject, 'pointertap', eventData);\n        interactionManager.dispatchEvent(displayObject, 'tap', eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'mouseover', eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'mouseout', eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        self.document.removeEventListener('mousemove', this._onMouseMove, true);\n        self.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}