{"ast":null,"code":"export let ShapeType = /*#__PURE__*/function (ShapeType) {\n  ShapeType[\"RECTANGLE\"] = \"rectangle\";\n  ShapeType[\"SQUARE\"] = \"square\";\n  ShapeType[\"POLYGON\"] = \"polygon\";\n  ShapeType[\"PARALLELOGRAM\"] = \"parallelogram\";\n  ShapeType[\"ELLIPSE\"] = \"ellipse\";\n  ShapeType[\"CIRCLE\"] = \"circle\";\n  ShapeType[\"CUBOID\"] = \"cuboid\";\n  ShapeType[\"LSHAPE\"] = \"l-shape\";\n  ShapeType[\"QUAD_PRISM\"] = \"quad-prism\";\n  ShapeType[\"ORIENTED_QUAD_PRISM\"] = \"oriented-quad-prism\";\n  ShapeType[\"LINE\"] = \"line\";\n  ShapeType[\"CURVE\"] = \"curve\";\n  ShapeType[\"CURVE_PAIR\"] = \"curve-pair\";\n  ShapeType[\"DOT\"] = \"dot\";\n  ShapeType[\"GRID\"] = \"grid\";\n  ShapeType[\"ARROW\"] = \"arrow\";\n  ShapeType[\"FLEX_LINE\"] = \"flex-line\";\n  ShapeType[\"TWO_SIDES_CUBOID\"] = \"two-sides-cuboid\";\n  ShapeType[\"PIXEL\"] = \"pixel\";\n  ShapeType[\"KEYPOINTS\"] = \"keypoints\";\n  return ShapeType;\n}({});\nexport let ShapeVertexType = /*#__PURE__*/function (ShapeVertexType) {\n  ShapeVertexType[\"DOT\"] = \"dot\";\n  ShapeVertexType[\"TRIANGLE\"] = \"triangle\";\n  ShapeVertexType[\"RECTANGLE\"] = \"rectangle\";\n  ShapeVertexType[\"TRAPEZOID\"] = \"trapezoid\";\n  ShapeVertexType[\"RHOMBUS\"] = \"rhombus\";\n  ShapeVertexType[\"PENTAGON\"] = \"pentagon\";\n  ShapeVertexType[\"STAR\"] = \"star\";\n  ShapeVertexType[\"ASTERISK\"] = \"asterisk\";\n  return ShapeVertexType;\n}({});\nexport let ShapeLineType = /*#__PURE__*/function (ShapeLineType) {\n  ShapeLineType[\"STRAIGHT\"] = \"straight\";\n  ShapeLineType[\"WAVY\"] = \"wavy\";\n  ShapeLineType[\"BROKEN\"] = \"broken\";\n  ShapeLineType[\"DOTTED\"] = \"dotted\";\n  return ShapeLineType;\n}({});","map":{"version":3,"names":["ShapeType","ShapeVertexType","ShapeLineType"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/types.ts"],"sourcesContent":["import type { RectangleData, RectangleOptions } from './Rectangle';\nimport type { PolygonData, PolygonOptions } from './Polygon';\nimport type { EllipseData, EllipseOptions } from './Ellipse';\nimport type { CircleData, CircleOptions } from './Circle';\nimport type { CuboidData, CuboidOptions } from './Cuboid';\nimport type { LShapeData, LShapeOptions } from './LShape';\nimport type { QuadPrismData, QuadPrismOptions } from './QuadPrism';\nimport type { OrientedQuadPrismData, OrientedQuadPrismOptions } from './OrientedQuadPrism';\nimport type { LineData, LineOptions } from './Line';\nimport type { CurveData, CurveOptions } from './Curve';\nimport type { CurvePairData, CurvePairOptions } from './CurvePair';\nimport type { DotData, DotOptions } from './Dot';\nimport type { GridData, GridOptions } from './Grid';\nimport type { PixelData, PixelOptions } from './Pixel';\nimport type { KeypointsData, KeypointsOptions } from './Keypoints';\n\nexport enum ShapeType {\n  RECTANGLE = 'rectangle',\n  SQUARE = 'square',\n  POLYGON = 'polygon',\n  PARALLELOGRAM = 'parallelogram',\n  ELLIPSE = 'ellipse',\n  CIRCLE = 'circle',\n  CUBOID = 'cuboid',\n  LSHAPE = 'l-shape',\n  QUAD_PRISM = 'quad-prism',\n  ORIENTED_QUAD_PRISM = 'oriented-quad-prism',\n  LINE = 'line',\n  CURVE = 'curve',\n  CURVE_PAIR = 'curve-pair',\n  DOT = 'dot',\n  GRID = 'grid',\n  ARROW = 'arrow',\n  FLEX_LINE = 'flex-line',\n  TWO_SIDES_CUBOID = 'two-sides-cuboid',\n  PIXEL = 'pixel',\n  KEYPOINTS = 'keypoints',\n}\n\nexport interface ShapeBounds {\n  left: number;\n  top: number;\n  right: number;\n  bottom: number;\n}\n\nexport interface ShapeGrid {\n  rows: number[];\n  cols: number[];\n}\n\nexport type ShapeData = (\n  RectangleData |\n  PolygonData |\n  EllipseData |\n  CircleData |\n  CuboidData |\n  LShapeData |\n  QuadPrismData |\n  OrientedQuadPrismData |\n  LineData |\n  CurveData |\n  CurvePairData |\n  DotData |\n  GridData |\n  PixelData |\n  KeypointsData\n) & {\n  shapeBounds?: ShapeBounds;\n};\n\nexport type ShapeOptions =\n  RectangleOptions |\n  PolygonOptions |\n  EllipseOptions |\n  CircleOptions |\n  CuboidOptions |\n  LShapeOptions |\n  QuadPrismOptions |\n  OrientedQuadPrismOptions |\n  LineOptions |\n  CurveOptions |\n  CurvePairOptions |\n  DotOptions |\n  GridOptions |\n  PixelOptions |\n  KeypointsOptions;\n\nexport type ShapeDataWithArea = RectangleData | PolygonData | EllipseData | CircleData | PixelData;\n\nexport enum ShapeVertexType {\n  DOT = 'dot',\n  TRIANGLE = 'triangle',\n  RECTANGLE = 'rectangle',\n  TRAPEZOID = 'trapezoid',\n  RHOMBUS = 'rhombus',\n  PENTAGON = 'pentagon',\n  STAR = 'star',\n  ASTERISK = 'asterisk',\n}\n\nexport enum ShapeLineType {\n  STRAIGHT = 'straight',\n  WAVY = 'wavy',\n  BROKEN = 'broken',\n  DOTTED = 'dotted'\n}\n\nexport interface VertexStyles {\n  color?: number;\n  type?: ShapeVertexType;\n}\n\nexport interface EdgeStyles {\n  color?: number;\n  type?: ShapeLineType;\n  bold?: boolean;\n}\n"],"mappings":"AAgBA,WAAYA,SAAS,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AA0ErB,WAAYC,eAAe,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAW3B,WAAYC,aAAa,0BAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}