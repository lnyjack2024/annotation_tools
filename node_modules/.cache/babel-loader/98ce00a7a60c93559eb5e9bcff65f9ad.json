{"ast":null,"code":"import { Point } from 'pixi.js';\nimport Shape, { BorderStyle } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlBar from './controls/ControlBar';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nexport default class Grid extends Shape {\n  /**\n   * get cols\n   * @getter\n   */\n  get cols() {\n    return this._cols.map(col => ({\n      x: col.x\n    }));\n  }\n\n  /**\n   * set cols\n   * @setter\n   */\n  set cols(cols) {\n    this._cols = cols.map(col => ({\n      x: col.x\n    }));\n    this.normalize();\n  }\n\n  /**\n   * get rows\n   * @getter\n   */\n  get rows() {\n    return this._rows.map(row => ({\n      y: row.y\n    }));\n  }\n\n  /**\n   * set rows\n   * @setter\n   */\n  set rows(rows) {\n    this._rows = rows.map(row => ({\n      y: row.y\n    }));\n    this.normalize();\n  }\n\n  /**\n   * get cols count\n   * @getter\n   */\n  get colsCount() {\n    return this._cols.length - 1;\n  }\n\n  /**\n   * get rows count\n   * @getter\n   */\n  get rowsCount() {\n    return this._rows.length - 1;\n  }\n\n  /**\n   * get top left position x\n   * @getter\n   */\n  get x() {\n    var _this$_cols$;\n    return ((_this$_cols$ = this._cols[0]) === null || _this$_cols$ === void 0 ? void 0 : _this$_cols$.x) || 0;\n  }\n\n  /**\n   * get top left position y\n   * @getter\n   */\n  get y() {\n    var _this$rows$;\n    return ((_this$rows$ = this.rows[0]) === null || _this$rows$ === void 0 ? void 0 : _this$rows$.y) || 0;\n  }\n\n  /**\n   * get width\n   * @getter\n   */\n  get width() {\n    var _this$_cols;\n    return (((_this$_cols = this._cols[this._cols.length - 1]) === null || _this$_cols === void 0 ? void 0 : _this$_cols.x) || 0) - this.x;\n  }\n\n  /**\n   * get height\n   * @getter\n   */\n  get height() {\n    var _this$_rows;\n    return (((_this$_rows = this._rows[this._rows.length - 1]) === null || _this$_rows === void 0 ? void 0 : _this$_rows.y) || 0) - this.y;\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point) {\n    if (this._cols.length > 0) {\n      const offsetX = point.x - this.x;\n      this._cols.forEach(col => {\n        col.x = precise(col.x + offsetX);\n      });\n    }\n    if (this._rows.length > 0) {\n      const offsetY = point.y - this.y;\n      this._rows.forEach(row => {\n        row.y = precise(row.y + offsetY);\n      });\n    }\n    this.drawShape();\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    return {\n      left: this.x,\n      top: this.y,\n      right: this.x + this.width,\n      bottom: this.y + this.height\n    };\n  }\n  constructor(options) {\n    super(options);\n    this.shapeType = ShapeType.GRID;\n    /**\n     * cols (ordered)\n     * @private\n     */\n    this._cols = [];\n    /**\n     * rows (ordered)\n     * @private\n     */\n    this._rows = [];\n    const {\n      cols,\n      rows\n    } = options;\n    if (Array.isArray(cols) && cols.every(col => col !== undefined) && Array.isArray(rows) && rows.every(row => row !== undefined)) {\n      this._rows = rows.map(row => ({\n        y: row.y\n      }));\n      this._cols = cols.map(col => ({\n        x: col.x\n      }));\n      this.normalize();\n    }\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   * @private\n   */\n  _drawShapeFill() {\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawRect(this.x, this.y, this.width, this.height);\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape border\n   * @private\n   */\n  _drawShapeLine() {\n    const lineTo = (x, y) => {\n      if (this.borderStyle === BorderStyle.DASHED) {\n        this.instance.dashLineTo(x, y);\n      } else {\n        this.instance.lineTo(x, y);\n      }\n    };\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this.instance.moveTo(this.x, this.y);\n    lineTo(this.x + this.width, this.y);\n    lineTo(this.x + this.width, this.y + this.height);\n    lineTo(this.x, this.y + this.height);\n    lineTo(this.x, this.y);\n    this.instance.closePath();\n    this.cols.slice(1, this.cols.length - 1).forEach(col => {\n      this.instance.moveTo(col.x, this.y);\n      lineTo(col.x, this.y + this.height);\n    });\n    this.rows.slice(1, this.rows.length - 1).forEach(row => {\n      this.instance.moveTo(this.x, row.y);\n      lineTo(this.x + this.width, row.y);\n    });\n  }\n\n  /**\n   * draw shape by the position\n   * @private\n   * @param point mouse position\n   */\n  _draw(point) {\n    const p = this._keepPointInBounds(point);\n    const width = p.x - this.x;\n    const height = p.y - this.y;\n    const wSeg = width / (this._cols.length - 1);\n    const hSeg = height / (this._rows.length - 1);\n    this._cols.forEach((col, i) => {\n      col.x = this.x + wSeg * i;\n    });\n    this._rows.forEach((row, i) => {\n      row.y = this.y + hSeg * i;\n    });\n    this.drawShape();\n  }\n\n  /**\n   * drag to create\n   * @param point\n   * @param options\n   */\n  create(point, options) {\n    const colsCount = (options === null || options === void 0 ? void 0 : options.cols) >= 1 ? options.cols : 5;\n    const rowsCount = (options === null || options === void 0 ? void 0 : options.rows) >= 1 ? options.rows : 5;\n    this._cols = Array.from({\n      length: colsCount + 1\n    }).map(() => ({\n      x: point.x\n    }));\n    this._rows = Array.from({\n      length: rowsCount + 1\n    }).map(() => ({\n      y: point.y\n    }));\n    const mouseMove = event => {\n      const p = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(p);\n      this._draw(localPoint);\n    };\n    const mouseUp = () => {\n      this.normalize();\n      this._finish();\n      document.removeEventListener('mousemove', mouseMove, false);\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n    document.addEventListener('mousemove', mouseMove, false);\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return this.position;\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      cols: this.cols,\n      rows: this.rows\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    return [[this.getPoints().map(p => [p.x, p.y])]];\n  }\n\n  /**\n   * get four points\n   */\n  getPoints() {\n    return [{\n      x: this.x,\n      y: this.y\n    }, {\n      x: this.x + this.width,\n      y: this.y\n    }, {\n      x: this.x + this.width,\n      y: this.y + this.height\n    }, {\n      x: this.x,\n      y: this.y + this.height\n    }];\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    // cols\n    let len = 4;\n    this.cols.forEach((col, i) => {\n      let control = this._controls[i + len];\n      if (this.selected) {\n        const position = {\n          x: col.x,\n          y: this.y + this.height / 2\n        };\n        if (!control || control.type !== 'vertical') {\n          if (control) {\n            control.destroy();\n          }\n          control = new ControlBar({\n            type: 'vertical',\n            position,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: Cursor.EW_RESIZE,\n            onFinish: () => this._finishResize()\n          });\n          this._controls[i + len] = control;\n        }\n        control.position = position;\n        control.size = this.height;\n        control.onPositionChange = (x, y) => this._updateByColPosition(i, x, y);\n        control.add();\n      } else if (control) {\n        control.remove();\n      }\n    });\n\n    // rows\n    len += this._cols.length;\n    this.rows.forEach((row, i) => {\n      let control = this._controls[i + len];\n      if (this.selected) {\n        const position = {\n          x: this.x + this.width / 2,\n          y: row.y\n        };\n        if (!control || control.type !== 'horizonal') {\n          if (control) {\n            control.destroy();\n          }\n          control = new ControlBar({\n            type: 'horizonal',\n            position,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: Cursor.NS_RESIZE,\n            onFinish: () => this._finishResize()\n          });\n          this._controls[i + len] = control;\n        }\n        control.position = position;\n        control.size = this.width;\n        control.onPositionChange = (x, y) => this._updateByRowPosition(i, x, y);\n        control.add();\n      } else if (control) {\n        control.remove();\n      }\n    });\n\n    // four points\n    this.getPoints().forEach((point, i) => {\n      if (this.selected) {\n        if (!this._controls[i]) {\n          const cursor = i % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE;\n          this._controls[i] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor,\n            onPositionChange: (x, y) => this._updateByPointPosition(i, x, y),\n            onFinish: () => this._finishResize()\n          });\n        }\n        this._controls[i].position = point;\n        this._controls[i].add();\n      } else if (this._controls[i]) {\n        this._controls[i].remove();\n      }\n    });\n    len += this._rows.length;\n    for (let i = len - 1; i < this._controls.length; i += 1) {\n      if (this._controls[i]) {\n        this._controls[i].remove();\n      }\n    }\n  }\n\n  /**\n   * update by col\n   * @param index\n   * @param x\n   * @param y\n   */\n  _updateByColPosition(index, x, y) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const col = this._cols[index];\n    if (col) {\n      if (index === 0 || index === this._cols.length - 1) {\n        const originWidth = this.width;\n        const originX = this.x;\n        col.x = position.x;\n        const scale = this.width / originWidth;\n        this._cols.forEach((c, i) => {\n          if (i !== 0 && i !== this._cols.length - 1) {\n            c.x = this.x + (c.x - originX) * scale;\n          }\n        });\n      } else {\n        col.x = Math.min(Math.max(position.x, this.x), this.x + this.width);\n      }\n      this.drawShape();\n      this._resizing();\n    }\n  }\n\n  /**\n   * update by row\n   * @param index\n   * @param x\n   * @param y\n   */\n  _updateByRowPosition(index, x, y) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const row = this._rows[index];\n    if (row) {\n      if (index === 0 || index === this._rows.length - 1) {\n        const originHeight = this.height;\n        const originY = this.y;\n        row.y = position.y;\n        const scale = this.height / originHeight;\n        this._rows.forEach((r, i) => {\n          if (i !== 0 && i !== this._rows.length - 1) {\n            r.y = this.y + (r.y - originY) * scale;\n          }\n        });\n      } else {\n        row.y = Math.min(Math.max(position.y, this.y), this.y + this.height);\n      }\n      this.drawShape();\n      this._resizing();\n    }\n  }\n\n  /**\n   * update by point\n   * @param index\n   * @param x\n   * @param y\n   */\n  _updateByPointPosition(index, x, y) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const originWidth = this.width;\n    const originHeight = this.height;\n    const originX = this.x;\n    const originY = this.y;\n    const left = this._cols[0];\n    const right = this._cols[this._cols.length - 1];\n    const top = this._rows[0];\n    const bottom = this._rows[this._rows.length - 1];\n    switch (index) {\n      case 0:\n        // left & top\n        left.x = position.x;\n        top.y = position.y;\n        break;\n      case 1:\n        // top & right\n        top.y = position.y;\n        right.x = position.x;\n        break;\n      case 2:\n        // right & bottom\n        right.x = position.x;\n        bottom.y = position.y;\n        break;\n      case 3:\n        // bottom & left\n        bottom.y = position.y;\n        left.x = position.x;\n        break;\n      default:\n    }\n    const wScale = this.width / originWidth;\n    const hScale = this.height / originHeight;\n    this._cols.forEach((col, i) => {\n      if (i !== 0 && i !== this._cols.length - 1) {\n        col.x = this.x + (col.x - originX) * wScale;\n      }\n    });\n    this._rows.forEach((row, i) => {\n      if (i !== 0 && i !== this._rows.length - 1) {\n        row.y = this.y + (row.y - originY) * hScale;\n      }\n    });\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * when finish resize\n   */\n  _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * normalize grid shape, remove it if necessary\n   */\n  normalize() {\n    this._cols = this._cols.filter(c => c.x !== undefined && c.x !== null);\n    this._rows = this._rows.filter(r => r.y !== undefined && r.y !== null);\n\n    // invalid\n    if (this._cols.length < 2 || this._rows.length < 2) {\n      this._remove();\n      return;\n    }\n\n    // sort\n    this._cols.sort((a, b) => a.x - b.x);\n    this._rows.sort((a, b) => a.y - b.y);\n    this._cols.forEach(p => {\n      p.x = precise(p.x);\n    });\n    this._rows.forEach(p => {\n      p.y = precise(p.y);\n    });\n    this.drawShape();\n  }\n\n  /**\n   * insert cols before last column\n   * @param count\n   */\n  insertCols(count) {\n    const len = this._cols.length;\n    const lastCol = this._cols[len - 1];\n    const penultimateCol = this._cols[len - 2];\n    const w = lastCol.x - penultimateCol.x;\n    const seg = w / (count + 1);\n    const insertedCols = Array.from({\n      length: count\n    }).map((_, i) => ({\n      x: penultimateCol.x + seg * (i + 1)\n    }));\n    this._cols.splice(len - 1, 0, ...insertedCols);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * insert rows before last row\n   * @param count\n   */\n  insertRows(count) {\n    const len = this._rows.length;\n    const lastRow = this._rows[len - 1];\n    const penultimateRow = this._rows[len - 2];\n    const h = lastRow.y - penultimateRow.y;\n    const seg = h / (count + 1);\n    const insertedRows = Array.from({\n      length: count\n    }).map((_, i) => ({\n      y: penultimateRow.y + seg * (i + 1)\n    }));\n    this._rows.splice(len - 1, 0, ...insertedRows);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * delete cols before last column\n   * @param count\n   */\n  deleteCols(count) {\n    const len = this._cols.length;\n    this._cols.splice(len - 1 - count, count);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * delete rows before last row\n   * @param count\n   */\n  deleteRows(count) {\n    const len = this._rows.length;\n    this._rows.splice(len - 1 - count, count);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * update cols count (insert or delete cols)\n   * @param currentCount\n   */\n  updateColsCount(currentCount) {\n    if (currentCount > this.colsCount) {\n      this.insertCols(currentCount - this.colsCount);\n    } else if (currentCount < this.colsCount && currentCount >= 1) {\n      this.deleteCols(this.colsCount - currentCount);\n    }\n  }\n\n  /**\n   * update rows count (insert or delete rows)\n   * @param currentCount\n   */\n  updateRowsCount(currentCount) {\n    if (currentCount > this.rowsCount) {\n      this.insertRows(currentCount - this.rowsCount);\n    } else if (currentCount < this.rowsCount && currentCount >= 1) {\n      this.deleteRows(this.rowsCount - currentCount);\n    }\n  }\n\n  /**\n   * average\n   */\n  average() {\n    this.averageCols(true);\n    this.averageRows(true);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * make cols size the same\n   * @param ignoreUpdate\n   */\n  averageCols(ignoreUpdate) {\n    const seg = this.width / this.colsCount;\n    for (let i = 0; i < this._cols.length - 1; i += 1) {\n      this._cols[i].x = this.x + seg * i;\n    }\n    if (!ignoreUpdate) {\n      this.normalize();\n      this._changed();\n    }\n  }\n\n  /**\n   * make rows size the same\n   * @param ignoreUpdate\n   */\n  averageRows(ignoreUpdate) {\n    const seg = this.height / this.rowsCount;\n    for (let i = 0; i < this._rows.length - 1; i += 1) {\n      this._rows[i].y = this.y + seg * i;\n    }\n    if (!ignoreUpdate) {\n      this.normalize();\n      this._changed();\n    }\n  }\n}","map":{"version":3,"names":["Point","Shape","BorderStyle","ShapeType","ControlPoint","ControlBar","precise","Cursor","Grid","cols","_cols","map","col","x","normalize","rows","_rows","row","y","colsCount","length","rowsCount","_this$_cols$","_this$rows$","width","_this$_cols","height","_this$_rows","position","point","offsetX","forEach","offsetY","drawShape","shapeBounds","left","top","right","bottom","constructor","options","shapeType","GRID","Array","isArray","every","undefined","instance","clear","_drawShapeFill","_drawShapeLine","_finished","drawShapeLabel","attachControlPoints","beginFill","color","alpha","drawRect","endFill","lineTo","borderStyle","DASHED","dashLineTo","lineStyle","borderWidth","scale","displayBorderColor","borderAlpha","moveTo","closePath","slice","_draw","p","_keepPointInBounds","wSeg","hSeg","i","create","from","mouseMove","event","_mapScreenToStagePosition","clientX","clientY","localPoint","_mapStageToLocalPosition","mouseUp","_finish","document","removeEventListener","addEventListener","getLabelPosition","getData","getAreaAsGeoJSON","getPoints","editable","removeControls","len","control","_controls","selected","type","destroy","container","controlsContainer","selectedColor","cursor","EW_RESIZE","onFinish","_finishResize","size","onPositionChange","_updateByColPosition","add","remove","NS_RESIZE","_updateByRowPosition","NWSE_RESIZE","NESW_RESIZE","_updateByPointPosition","index","originWidth","originX","c","Math","min","max","_resizing","originHeight","originY","r","wScale","hScale","resizing","_changed","filter","_remove","sort","a","b","insertCols","count","lastCol","penultimateCol","w","seg","insertedCols","_","splice","insertRows","lastRow","penultimateRow","h","insertedRows","deleteCols","deleteRows","updateColsCount","currentCount","updateRowsCount","average","averageCols","averageRows","ignoreUpdate"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Grid.ts"],"sourcesContent":["import { Point } from 'pixi.js';\nimport Shape, { ShapeOptions, BorderStyle } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlBar from './controls/ControlBar';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\n\ninterface ICol {\n  x: number;\n}\n\ninterface IRow {\n  y: number;\n}\n\nexport interface GridData {\n  cols: ICol[];\n  rows: IRow[];\n}\n\nexport interface GridOptions extends ShapeOptions {\n  cols?: ICol[];\n  rows?: IRow[];\n}\n\nexport default class Grid extends Shape<GridData> {\n  shapeType = ShapeType.GRID;\n\n  /**\n   * cols (ordered)\n   * @private\n   */\n  private _cols: ICol[] = [];\n\n  /**\n   * rows (ordered)\n   * @private\n   */\n  private _rows: IRow[] = [];\n\n  /**\n   * get cols\n   * @getter\n   */\n  get cols() {\n    return this._cols.map((col) => ({ x: col.x }));\n  }\n\n  /**\n   * set cols\n   * @setter\n   */\n  set cols(cols: ICol[]) {\n    this._cols = cols.map((col) => ({ x: col.x }));\n    this.normalize();\n  }\n\n  /**\n   * get rows\n   * @getter\n   */\n  get rows() {\n    return this._rows.map((row) => ({ y: row.y }));\n  }\n\n  /**\n   * set rows\n   * @setter\n   */\n  set rows(rows: IRow[]) {\n    this._rows = rows.map((row) => ({ y: row.y }));\n    this.normalize();\n  }\n\n  /**\n   * get cols count\n   * @getter\n   */\n  get colsCount() {\n    return this._cols.length - 1;\n  }\n\n  /**\n   * get rows count\n   * @getter\n   */\n  get rowsCount() {\n    return this._rows.length - 1;\n  }\n\n  /**\n   * get top left position x\n   * @getter\n   */\n  get x() {\n    return this._cols[0]?.x || 0;\n  }\n\n  /**\n   * get top left position y\n   * @getter\n   */\n  get y() {\n    return this.rows[0]?.y || 0;\n  }\n\n  /**\n   * get width\n   * @getter\n   */\n  get width() {\n    return (this._cols[this._cols.length - 1]?.x || 0) - this.x;\n  }\n\n  /**\n   * get height\n   * @getter\n   */\n  get height() {\n    return (this._rows[this._rows.length - 1]?.y || 0) - this.y;\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point: Point) {\n    if (this._cols.length > 0) {\n      const offsetX = point.x - this.x;\n      this._cols.forEach((col) => {\n        col.x = precise(col.x + offsetX);\n      });\n    }\n    if (this._rows.length > 0) {\n      const offsetY = point.y - this.y;\n      this._rows.forEach((row) => {\n        row.y = precise(row.y + offsetY);\n      });\n    }\n    this.drawShape();\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    return {\n      left: this.x,\n      top: this.y,\n      right: this.x + this.width,\n      bottom: this.y + this.height,\n    };\n  }\n\n  constructor(options: GridOptions) {\n    super(options);\n\n    const { cols, rows } = options;\n    if (\n      Array.isArray(cols) && cols.every((col) => col !== undefined) &&\n      Array.isArray(rows) && rows.every((row) => row !== undefined)\n    ) {\n      this._rows = rows.map((row) => ({ y: row.y }));\n      this._cols = cols.map((col) => ({ x: col.x }));\n      this.normalize();\n    }\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    this._drawShapeFill();\n    this._drawShapeLine();\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw shape fill\n   * @private\n   */\n  private _drawShapeFill() {\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawRect(this.x, this.y, this.width, this.height);\n    this.instance.endFill();\n  }\n\n  /**\n   * draw shape border\n   * @private\n   */\n  private _drawShapeLine() {\n    const lineTo = (x: number, y: number) => {\n      if (this.borderStyle === BorderStyle.DASHED) {\n        this.instance.dashLineTo(x, y);\n      } else {\n        this.instance.lineTo(x, y);\n      }\n    };\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n\n    this.instance.moveTo(this.x, this.y);\n    lineTo(this.x + this.width, this.y);\n    lineTo(this.x + this.width, this.y + this.height);\n    lineTo(this.x, this.y + this.height);\n    lineTo(this.x, this.y);\n    this.instance.closePath();\n    this.cols.slice(1, this.cols.length - 1).forEach((col) => {\n      this.instance.moveTo(col.x, this.y);\n      lineTo(col.x, this.y + this.height);\n    });\n    this.rows.slice(1, this.rows.length - 1).forEach((row) => {\n      this.instance.moveTo(this.x, row.y);\n      lineTo(this.x + this.width, row.y);\n    });\n  }\n\n  /**\n   * draw shape by the position\n   * @private\n   * @param point mouse position\n   */\n  private _draw(point: Point) {\n    const p = this._keepPointInBounds(point);\n    const width = p.x - this.x;\n    const height = p.y - this.y;\n    const wSeg = width / (this._cols.length - 1);\n    const hSeg = height / (this._rows.length - 1);\n    this._cols.forEach((col, i) => {\n      col.x = this.x + wSeg * i;\n    });\n    this._rows.forEach((row, i) => {\n      row.y = this.y + hSeg * i;\n    });\n    this.drawShape();\n  }\n\n  /**\n   * drag to create\n   * @param point\n   * @param options\n   */\n  create(point: Point, options: { cols: number; rows: number }) {\n    const colsCount = options?.cols >= 1 ? options.cols : 5;\n    const rowsCount = options?.rows >= 1 ? options.rows : 5;\n    this._cols = Array.from({ length: colsCount + 1 }).map(() => ({ x: point.x }));\n    this._rows = Array.from({ length: rowsCount + 1 }).map(() => ({ y: point.y }));\n\n    const mouseMove = (event: MouseEvent) => {\n      const p = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(p);\n      this._draw(localPoint);\n    };\n    const mouseUp = () => {\n      this.normalize();\n      this._finish();\n\n      document.removeEventListener('mousemove', mouseMove, false);\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n\n    document.addEventListener('mousemove', mouseMove, false);\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return this.position;\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      cols: this.cols,\n      rows: this.rows,\n    };\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    return [[this.getPoints().map((p) => [p.x, p.y] as [number, number])]];\n  }\n\n  /**\n   * get four points\n   */\n  getPoints() {\n    return [\n      { x: this.x, y: this.y },\n      { x: this.x + this.width, y: this.y },\n      { x: this.x + this.width, y: this.y + this.height },\n      { x: this.x, y: this.y + this.height },\n    ];\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    // cols\n    let len = 4;\n    this.cols.forEach((col, i) => {\n      let control = this._controls[i + len] as ControlBar;\n      if (this.selected) {\n        const position = { x: col.x, y: this.y + this.height / 2 };\n        if (!control || control.type !== 'vertical') {\n          if (control) {\n            control.destroy();\n          }\n          control = new ControlBar({\n            type: 'vertical',\n            position,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: Cursor.EW_RESIZE,\n            onFinish: () => this._finishResize(),\n          });\n          this._controls[i + len] = control;\n        }\n        control.position = position;\n        control.size = this.height;\n        control.onPositionChange = (x, y) => this._updateByColPosition(i, x, y);\n        control.add();\n      } else if (control) {\n        control.remove();\n      }\n    });\n\n    // rows\n    len += this._cols.length;\n    this.rows.forEach((row, i) => {\n      let control = this._controls[i + len] as ControlBar;\n      if (this.selected) {\n        const position = { x: this.x + this.width / 2, y: row.y };\n        if (!control || control.type !== 'horizonal') {\n          if (control) {\n            control.destroy();\n          }\n          control = new ControlBar({\n            type: 'horizonal',\n            position,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: Cursor.NS_RESIZE,\n            onFinish: () => this._finishResize(),\n          });\n          this._controls[i + len] = control;\n        }\n        control.position = position;\n        control.size = this.width;\n        control.onPositionChange = (x, y) => this._updateByRowPosition(i, x, y);\n        control.add();\n      } else if (control) {\n        control.remove();\n      }\n    });\n\n    // four points\n    this.getPoints().forEach((point, i) => {\n      if (this.selected) {\n        if (!this._controls[i]) {\n          const cursor = i % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE;\n          this._controls[i] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor,\n            onPositionChange: (x, y) => this._updateByPointPosition(i, x, y),\n            onFinish: () => this._finishResize(),\n          });\n        }\n        this._controls[i].position = point;\n        this._controls[i].add();\n      } else if (this._controls[i]) {\n        this._controls[i].remove();\n      }\n    });\n\n    len += this._rows.length;\n    for (let i = len - 1; i < this._controls.length; i += 1) {\n      if (this._controls[i]) {\n        this._controls[i].remove();\n      }\n    }\n  }\n\n  /**\n   * update by col\n   * @param index\n   * @param x\n   * @param y\n   */\n  private _updateByColPosition(index: number, x: number, y: number) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const col = this._cols[index];\n    if (col) {\n      if (index === 0 || index === this._cols.length - 1) {\n        const originWidth = this.width;\n        const originX = this.x;\n\n        col.x = position.x;\n        const scale = this.width / originWidth;\n        this._cols.forEach((c, i) => {\n          if (i !== 0 && i !== this._cols.length - 1) {\n            c.x = this.x + (c.x - originX) * scale;\n          }\n        });\n      } else {\n        col.x = Math.min(Math.max(position.x, this.x), this.x + this.width);\n      }\n\n      this.drawShape();\n      this._resizing();\n    }\n  }\n\n  /**\n   * update by row\n   * @param index\n   * @param x\n   * @param y\n   */\n  private _updateByRowPosition(index: number, x: number, y: number) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const row = this._rows[index];\n    if (row) {\n      if (index === 0 || index === this._rows.length - 1) {\n        const originHeight = this.height;\n        const originY = this.y;\n\n        row.y = position.y;\n        const scale = this.height / originHeight;\n        this._rows.forEach((r, i) => {\n          if (i !== 0 && i !== this._rows.length - 1) {\n            r.y = this.y + (r.y - originY) * scale;\n          }\n        });\n      } else {\n        row.y = Math.min(Math.max(position.y, this.y), this.y + this.height);\n      }\n\n      this.drawShape();\n      this._resizing();\n    }\n  }\n\n  /**\n   * update by point\n   * @param index\n   * @param x\n   * @param y\n   */\n  private _updateByPointPosition(index: number, x: number, y: number) {\n    const position = this._keepPointInBounds(new Point(x, y));\n\n    const originWidth = this.width;\n    const originHeight = this.height;\n    const originX = this.x;\n    const originY = this.y;\n\n    const left = this._cols[0];\n    const right = this._cols[this._cols.length - 1];\n    const top = this._rows[0];\n    const bottom = this._rows[this._rows.length - 1];\n\n    switch (index) {\n      case 0:\n        // left & top\n        left.x = position.x;\n        top.y = position.y;\n        break;\n      case 1:\n        // top & right\n        top.y = position.y;\n        right.x = position.x;\n        break;\n      case 2:\n        // right & bottom\n        right.x = position.x;\n        bottom.y = position.y;\n        break;\n      case 3:\n        // bottom & left\n        bottom.y = position.y;\n        left.x = position.x;\n        break;\n      default:\n    }\n\n    const wScale = this.width / originWidth;\n    const hScale = this.height / originHeight;\n    this._cols.forEach((col, i) => {\n      if (i !== 0 && i !== this._cols.length - 1) {\n        col.x = this.x + (col.x - originX) * wScale;\n      }\n    });\n    this._rows.forEach((row, i) => {\n      if (i !== 0 && i !== this._rows.length - 1) {\n        row.y = this.y + (row.y - originY) * hScale;\n      }\n    });\n\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * when finish resize\n   */\n  private _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * normalize grid shape, remove it if necessary\n   */\n  normalize() {\n    this._cols = this._cols.filter((c) => c.x !== undefined && c.x !== null);\n    this._rows = this._rows.filter((r) => r.y !== undefined && r.y !== null);\n\n    // invalid\n    if (this._cols.length < 2 || this._rows.length < 2) {\n      this._remove();\n      return;\n    }\n\n    // sort\n    this._cols.sort((a, b) => a.x - b.x);\n    this._rows.sort((a, b) => a.y - b.y);\n\n    this._cols.forEach((p) => {\n      p.x = precise(p.x);\n    });\n    this._rows.forEach((p) => {\n      p.y = precise(p.y);\n    });\n\n    this.drawShape();\n  }\n\n  /**\n   * insert cols before last column\n   * @param count\n   */\n  insertCols(count: number) {\n    const len = this._cols.length;\n    const lastCol = this._cols[len - 1];\n    const penultimateCol = this._cols[len - 2];\n    const w = lastCol.x - penultimateCol.x;\n    const seg = w / (count + 1);\n    const insertedCols = Array.from({ length: count }).map((_, i) => ({ x: penultimateCol.x + seg * (i + 1) }));\n    this._cols.splice(len - 1, 0, ...insertedCols);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * insert rows before last row\n   * @param count\n   */\n  insertRows(count: number) {\n    const len = this._rows.length;\n    const lastRow = this._rows[len - 1];\n    const penultimateRow = this._rows[len - 2];\n    const h = lastRow.y - penultimateRow.y;\n    const seg = h / (count + 1);\n    const insertedRows = Array.from({ length: count }).map((_, i) => ({ y: penultimateRow.y + seg * (i + 1) }));\n    this._rows.splice(len - 1, 0, ...insertedRows);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * delete cols before last column\n   * @param count\n   */\n  deleteCols(count: number) {\n    const len = this._cols.length;\n    this._cols.splice(len - 1 - count, count);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * delete rows before last row\n   * @param count\n   */\n  deleteRows(count: number) {\n    const len = this._rows.length;\n    this._rows.splice(len - 1 - count, count);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * update cols count (insert or delete cols)\n   * @param currentCount\n   */\n  updateColsCount(currentCount: number) {\n    if (currentCount > this.colsCount) {\n      this.insertCols(currentCount - this.colsCount);\n    } else if (currentCount < this.colsCount && currentCount >= 1) {\n      this.deleteCols(this.colsCount - currentCount);\n    }\n  }\n\n  /**\n   * update rows count (insert or delete rows)\n   * @param currentCount\n   */\n  updateRowsCount(currentCount: number) {\n    if (currentCount > this.rowsCount) {\n      this.insertRows(currentCount - this.rowsCount);\n    } else if (currentCount < this.rowsCount && currentCount >= 1) {\n      this.deleteRows(this.rowsCount - currentCount);\n    }\n  }\n\n  /**\n   * average\n   */\n  average() {\n    this.averageCols(true);\n    this.averageRows(true);\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * make cols size the same\n   * @param ignoreUpdate\n   */\n  averageCols(ignoreUpdate?: boolean) {\n    const seg = this.width / this.colsCount;\n    for (let i = 0; i < this._cols.length - 1; i += 1) {\n      this._cols[i].x = this.x + seg * i;\n    }\n    if (!ignoreUpdate) {\n      this.normalize();\n      this._changed();\n    }\n  }\n\n  /**\n   * make rows size the same\n   * @param ignoreUpdate\n   */\n  averageRows(ignoreUpdate?: boolean) {\n    const seg = this.height / this.rowsCount;\n    for (let i = 0; i < this._rows.length - 1; i += 1) {\n      this._rows[i].y = this.y + seg * i;\n    }\n    if (!ignoreUpdate) {\n      this.normalize();\n      this._changed();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}