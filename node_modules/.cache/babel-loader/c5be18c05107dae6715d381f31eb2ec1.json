{"ast":null,"code":"import{v4 as uuidv4}from'uuid';import{Container,Graphics,Point,Text,utils as PIXIUtils}from'pixi.js';import Layer from'./Layer';import ExtendedGraphics from'./ExtendedGraphics';import ShapeGraphics from'./ShapeGraphics';import{ShapeType}from'./types';import{findIntersections}from'./utils';import Cursor from'../Cursor';import{computeRotatedPosition}from'../../../utils/math';export let EventAction=/*#__PURE__*/function(EventAction){EventAction[\"SELECTED\"]=\"selected\";EventAction[\"VERTEX_SELECTED\"]=\"vertex-selected\";EventAction[\"FINISHED\"]=\"finished\";EventAction[\"REMOVED\"]=\"removed\";EventAction[\"CHANGED\"]=\"changed\";EventAction[\"POINTER_OVER\"]=\"pointer-over\";EventAction[\"POINTER_OUT\"]=\"pointer-out\";return EventAction;}({});export let BorderStyle=/*#__PURE__*/function(BorderStyle){BorderStyle[\"SOLID\"]=\"solid\";BorderStyle[\"DASHED\"]=\"dashed\";return BorderStyle;}({});/**\n * Shape base\n * @class\n */export default class Shape{/**\n   * global snapping point (not on self shape)\n   * @getter\n   */get globalSnappingPoint(){return this.container instanceof Layer?this.container.snappingPoint:this.app.stage.snappingPoint;}// eslint-disable-next-line class-methods-use-this\nget area(){return NaN;}// TODO: make pivot as abstract getter & setter\n// eslint-disable-next-line class-methods-use-this\nget pivot(){return new Point(0,0);}// eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-empty-function\nset pivot(p){}/**\n   * get position\n   * @getter\n   */ /**\n   * set position\n   * @setter\n   */ /**\n   * shape bounds\n   * @getter\n   */ /**\n   * get color\n   * @getter\n   */get color(){return this._color;}/**\n   * set color\n   * @setter\n   */set color(color){const shouldUpdate=this._color!==color;this._color=color;if(shouldUpdate){this.drawShape();}}/**\n   * get border color\n   * @getter\n   */get borderColor(){return this._borderColor;}/**\n   * set border color\n   * @setter\n   */set borderColor(color){const shouldUpdate=this._borderColor!==color;this._borderColor=color;if(shouldUpdate){this.drawShape();}}/**\n   * get display border color\n   * @getter\n   */get displayBorderColor(){if(this.selected){return this.selectedColor;}if(this.hovered){return this.hoveredColor;}return this.borderColor;}/**\n   * get alpha\n   * @getter\n   */get alpha(){return this._alpha;}/**\n   * set alpha\n   * @setter\n   */set alpha(alpha){const newAlpha=alpha>0?alpha:0.005;// for transparent shape, interactions can't be fired\nconst shouldUpdate=this._alpha!==newAlpha;this._alpha=newAlpha;if(shouldUpdate){this.drawShape();}}/**\n   * get label\n   * @getter\n   */get label(){return this._label;}/**\n   * set label\n   * @setter\n   */set label(label){this._label=label;this.drawShapeLabel();}/**\n   * get border style\n   * @getter\n   */get borderStyle(){return this._borderStyle;}/**\n   * set border style\n   * @setter\n   */set borderStyle(borderStyle){const shouldUpdate=this._borderStyle!==borderStyle;this._borderStyle=borderStyle;if(shouldUpdate){this.drawShape();}}/**\n   * get show vertex\n   * @getter\n   */get showVertex(){return this._showVertex;}/**\n   * set show vertex\n   * @setter\n   */set showVertex(showVertex){const shouldUpdate=this._showVertex!==showVertex;this._showVertex=showVertex;if(shouldUpdate){this.drawShape();}}/**\n   * get show vertex order\n   * @getter\n   */get showVertexOrder(){return this._showVertexOrder;}/**\n   * set show vertex order\n   * @setter\n   */set showVertexOrder(showVertexOrder){const shouldUpdate=this._showVertexOrder!==showVertexOrder;this._showVertexOrder=showVertexOrder;if(shouldUpdate){this.drawShape();}}/**\n   * get order\n   * @getter\n   */get order(){return this._order;}/**\n   * set order\n   * @setter\n   */set order(order){this._order=order;this._updateShapeContainerOrder();if(this.labelDom){this.labelDom.zIndex=order;}}/**\n   * get visible\n   * @getter\n   */get visible(){return this._visible;}/**\n   * set visible\n   * @setter\n   */set visible(visible){const shouldUpdate=this._visible!==visible;this._visible=visible;if(shouldUpdate){this.instance.interactive=visible?this.interactive:false;this.shapeContainer.visible=visible;this.controlsContainer.visible=visible;if(this._rotateControl){this._rotateControl.control.visible=visible;}if(this.labelDom){this.labelDom.visible=visible;}}}/**\n   * get interactive\n   * @getter\n   */get interactive(){return this._interactive;}/**\n   * set interactive\n   * @setter\n   */set interactive(interactive){this._interactive=interactive;if(this.instance){this.instance.interactive=interactive;}this._controls.forEach(c=>{c.control.interactive=interactive;});if(!interactive){this.selected=false;this.hovered=false;}}/**\n   * get editable\n   * @getter\n   */get editable(){return this._editable;}/**\n   * set editable\n   * @setter\n   */set editable(editable){this._editable=editable;this.drawShape();}/**\n   * get rotatable\n   * @getter\n   */get rotatable(){return this._rotatable;}/**\n   * set rotatable\n   * @setter\n   */set rotatable(rotatable){this._rotatable=rotatable;}/**\n   * get shape finished\n   * @getter\n   */get finished(){return this._finished;}/**\n   * get selected\n   * @getter\n   */get selected(){return this._selected;}/**\n   * set selected\n   * @setter\n   */set selected(selected){const shouldUpdate=this._selected!==selected;this._selected=selected;this._updateShapeContainerOrder();if(shouldUpdate){this.drawShape();}}/**\n   * get hovered\n   * @getter\n   */get hovered(){return this._hovered;}/**\n   * set hovered\n   * @setter\n   */set hovered(hovered){const shouldUpdate=this._hovered!==hovered;this._hovered=hovered;if(shouldUpdate){this.drawShape();this._emit(hovered?EventAction.POINTER_OVER:EventAction.POINTER_OUT);}// should update stage cursor because instance cursor not show when covered by others\nif(hovered){this.instance.cursor=this.editable?Cursor.MOVE:Cursor.POINTER;}else{this.instance.cursor=Cursor.DEFAULT;}}/**\n   * get scale\n   * @getter\n   */get scale(){return this._scale;}/**\n   * set scale\n   * @setter\n   */set scale(scale){const shouldUpdate=this._scale!==scale;this._scale=scale;this._controls.forEach(c=>{// eslint-disable-next-line no-param-reassign\nc.scale=scale;});if(this._rotateControl){this._rotateControl.scale=scale;}if(shouldUpdate){this.drawShape();}}/**\n   * get rotation\n   * @getter\n   */get rotation(){return this._rotation;}/**\n   * set rotation\n   * @setter\n   */set rotation(rotation){this._rotation=rotation;this._updatePosition();this.drawShape();}constructor(_ref){var _this=this;let{app,container,scale,color,alpha,label,showVertex,showVertexOrder,rotatable=false,labelDom}=_ref;/**\n   * shape type\n   */this.shapeType=void 0;/**\n   * unique id\n   * @member {string}\n   */this.uid=uuidv4();/**\n   * PIXI instance\n   * @member {ShapeGraphics}\n   */this.instance=new ShapeGraphics(this);/**\n   * PIXI application\n   * @member {PIXI.Application}\n   */this.app=void 0;/**\n   * PIXI container\n   * @member {PIXI.Container | Layer}\n   */this.container=void 0;/**\n   * origin colors from shape options\n   */this.originColors={color:0,borderColor:0};/**\n   * selected border color\n   * @member {number}\n   */this.selectedColor=0xFFFF00;/**\n   * hovered border color\n   * @member {number}\n   */this.hoveredColor=0xCCCCCC;/**\n   * shape container\n   * @member {PIXI.Container}\n   */this.shapeContainer=new Container();/**\n   * controls container\n   * @member {PIXI.Container}\n   */this.controlsContainer=new Container();/**\n   * label container\n   * @member {PIXI.Container}\n   */this.labelContainer=void 0;/**\n   * label dom\n   * @member {Label}\n   */this.labelDom=void 0;/**\n   * container to show shape vertexes\n   * @member {PIXI.Container}\n   */this.vertexesContainer=void 0;/**\n   * is shape destroyed\n   * @member {boolean}\n   */this.destroyed=false;/**\n   * is shape resizing\n   * @member {boolean}\n   */this.resizing=false;/**\n   * is shape dragging\n   * @member {boolean}\n   */this.dragging=false;/**\n   * events emitter\n   * @private {PIXI.utils.EventEmitter}\n   */this._eventEmitter=new PIXIUtils.EventEmitter();/**\n   * controls\n   * @protected {Control[]}\n   */this._controls=[];/**\n   * control for shape rotation\n   * @protected {ControlRotation}\n   */this._rotateControl=void 0;/**\n   * instance to draw shape boundary control\n   * @protected {ExtendedGraphics}\n   */this._controlLine=new ExtendedGraphics();/**\n   * color\n   * @protected {number}\n   */this._color=0;/**\n   * border color\n   * @protected {number}\n   */this._borderColor=0;/**\n   * shape alpha\n   * @protected {number}\n   */this._alpha=0.5;/**\n   * shape label\n   * @protected {string}\n   */this._label='';/**\n   * shape border style\n   * @protected {BorderStyle}\n   */this._borderStyle=BorderStyle.SOLID;/**\n   * show shape vertex\n   * @protected {boolean}\n   */this._showVertex=false;/**\n   * show shape vertex order\n   * @protected {boolean}\n   */this._showVertexOrder=false;/**\n   * shape z-index\n   * @protected {number}\n   */this._order=0;/**\n   * is shape visible\n   * @protected {boolean}\n   */this._visible=true;/**\n   * is shape interactive\n   * @protected {boolean}\n   */this._interactive=true;/**\n   * is shape editable\n   * @protected {boolean}\n   */this._editable=true;/**\n   * is shape rotatable\n   * @protected {boolean}\n   */this._rotatable=false;/**\n   * is shape drawing finished\n   * @protected {boolean}\n   */this._finished=true;/**\n   * is shape selected\n   * @protected {boolean}\n   */this._selected=false;/**\n   * is shape hovered\n   * @protected {boolean}\n   */this._hovered=false;/**\n   * shape scale factor\n   * @protected {boolean}\n   */this._scale=1;/**\n   * shape rotation\n   * @protected {number}\n   */this._rotation=0;/**\n   * point when snapping\n   * @protected {Point}\n   */this._snappingPoint=null;/**\n   * is ctrl key down\n   * @protected {boolean}\n   */this._ctrlKey=false;/**\n   * mouse position when click to drag\n   * @private {Point}\n   */this._dragPoint=null;/**\n   * instance position when click to drag\n   * @private {Point}\n   */this._dragPosistion=null;/**\n   * is instance been dragged\n   * @private {boolean}\n   */this._dragged=false;/**\n   * is right click down\n   * @private {boolean}\n   */this._rightClicked=false;/**\n   * is right dragged\n   * @private {boolean}\n   */this._rightDragged=false;/**\n   * last pivot\n   * @private {Point|undefined}\n   */this._lastPivot=void 0;/**\n   * process pointerdown\n   * @param event\n   * @param frontTargets\n   */this.processPointerDown=function(event){let frontTargets=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(event.data.button===2){_this._rightClicked=true;_this._continuePropogating(event,frontTargets,'processPointerDown');return;}if(_this.hovered){event.stopPropagation();const p=event.data.getLocalPosition(_this.container);_this._dragPoint=new Point(p.x,p.y);_this._dragPosistion=_this.position;_this._dragged=false;_this.selected=true;_this._emit(EventAction.SELECTED,p);// disable controls interactivity when first pointer down to selected (avoid bugs when start dragging on controls)\n_this._controls.forEach(c=>{c.control.interactive=false;});}if(!_this._snappingPoint){// if upper shapes has snapping point, do not propogating\n_this._continuePropogating(event,frontTargets,'processPointerDown');}};/**\n   * process pointerup\n   * @param event\n   * @param frontTargets\n   */this.processPointerUp=function(event){let frontTargets=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(event.data.button===2&&_this._rightClicked&&!_this._rightDragged){if(_this.hovered&&!_this.selected){const p=event.data.getLocalPosition(_this.container);_this.selected=true;_this._emit(EventAction.SELECTED,p);}}// re-active controls when pointer up\n_this._controls.forEach(c=>{c.control.interactive=true;});_this.dragging=false;_this._dragPoint=null;_this._dragPosistion=null;if(_this._dragged){_this._changed();_this._dragged=false;}_this._rightClicked=false;_this._rightDragged=false;_this._continuePropogating(event,frontTargets,'processPointerUp');};/**\n   * process pointermove\n   * @param event\n   */this.processPointerMove=event=>{if(event.data.buttons===2&&this._rightClicked){this._rightDragged=true;return;}if(this.editable&&this.selected&&this.snap(event)){// snapping\nthis.instance.cursor=Cursor.DEFAULT;}else if(this.editable&&this.selected&&this._dragPoint&&this._dragPosistion){// dragging\nthis._dragged=true;this._ctrlKey=event.data.originalEvent.ctrlKey;const point=event.data.getLocalPosition(this.container);const originX=this.position.x;const originY=this.position.y;const position=new Point(this._dragPosistion.x+(point.x-this._dragPoint.x),this._dragPosistion.y+(point.y-this._dragPoint.y));// prefer to use global snapping point if moving a dot\nthis.position=this.shapeType===ShapeType.DOT&&this.globalSnappingPoint?this.globalSnappingPoint:position;this._updatePosition();this._dragging({deltaX:this.position.x-originX,deltaY:this.position.y-originY});}};/**\n   * process app mouse down\n   */this.processGlobalMouseDown=()=>{if(this._snappingPoint){const success=this.addSnappingPointToShape();if(success){// set selected\nthis.selected=true;this._emit(EventAction.SELECTED);// ignore drag start\nthis._dragPoint=null;this._dragPosistion=null;}}};/**\n   * key down handler\n   * @protected\n   * @param e\n   */this._shapeKeyDown=e=>{if(this.finished&&this.selected&&this.editable&&e.shiftKey){var _e$key;let deltaX=0;let deltaY=0;let rotation=0;switch((_e$key=e.key)===null||_e$key===void 0?void 0:_e$key.toLowerCase()){case'w':deltaY=-1;break;case'a':deltaX=-1;break;case's':deltaY=1;break;case'd':deltaX=1;break;case'q':rotation=-1;break;case'e':rotation=1;break;default:break;}if(deltaX!==0||deltaY!==0){e.preventDefault();this.position=new Point(this.position.x+deltaX,this.position.y+deltaY);this._updatePosition();this._changed();}if(rotation!==0&&this.rotatable){e.preventDefault();this.rotation+=rotation*(Math.PI/180);this._changed();}}};this.instance.on('pointerdown',this.processPointerDown);this.instance.on('pointerup',this.processPointerUp);this.instance.on('pointerupoutside',this.processPointerUp);this.instance.on('pointermove',this.processPointerMove);this.app=app;this.app.view.addEventListener('mousedown',this.processGlobalMouseDown,false);document.addEventListener('keydown',this._shapeKeyDown,false);this.container=container||app.stage;this.instance.interactive=this.interactive;this.controlsContainer.zIndex=9999;this.shapeContainer.addChild(this.instance);this.container.addChild(this.shapeContainer);this.container.addChild(this.controlsContainer);this._controlLine.interactive=false;this.controlsContainer.addChild(this._controlLine);this._scale=scale||app.stage.scale.x;if(color!==undefined){this._color=color;this._borderColor=color;}this.originColors={color:this._color,borderColor:this._borderColor};if(alpha!==undefined){this._alpha=alpha>0?alpha:0.005;}if(label!==undefined){this._label=label;}if(showVertex!==undefined){this._showVertex=showVertex;}if(showVertexOrder!==undefined){this._showVertexOrder=showVertexOrder;}this._rotatable=rotatable;this.labelDom=labelDom;}/**\n   * update container position\n   * @protected\n   */_updatePosition(){let resize=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;const pivot=this.pivot.clone();if(resize&&this._lastPivot){// resize change pivot\nconst rotatedPivot=computeRotatedPosition(this._lastPivot,pivot,this.rotation);pivot.x=rotatedPivot.x;pivot.y=rotatedPivot.y;this.pivot=pivot;}this.shapeContainer.pivot.set(pivot.x,pivot.y);this.shapeContainer.position.set(pivot.x,pivot.y);this.shapeContainer.rotation=this.rotation;this._lastPivot=pivot.clone();this.controlsContainer.pivot.set(pivot.x,pivot.y);this.controlsContainer.position.set(pivot.x,pivot.y);this.controlsContainer.rotation=this.rotation;}/**\n   * propogating event to back shapes\n   * @param event\n   * @param frontTargets\n   * @param funcName\n   */_continuePropogating(event,frontTargets,funcName){this.instance.interactive=false;const{interaction}=this.app.renderer.plugins;const hit=interaction.hitTest(event.data.global);if(hit&&hit instanceof ShapeGraphics&&!frontTargets.includes(this.instance)){hit.shape[funcName](event,[...frontTargets,this.instance]);}this.instance.interactive=true;}/**\n   * actual draw the shape on canvas\n   */ /**\n   * start shape create\n   * @param point create start point\n   * @param options options used for creation\n   */ /**\n   * get label position of the shape\n   */ /**\n   * get shape data\n   */ /**\n   * get shape Geo JSON (multi polygon)\n   */ /**\n   * delete selected points in shape, default reture false and can be overwritten in sub class\n   */deleteSelectedPoints(){return false;// false means no point deleted\n}/**\n   * snap to shape vertexes or edges\n   * @param point\n   * @param tolerance\n   */snapToPoint(point,tolerance){return null;}/**\n   * snap to shape edges\n   * @param point\n   */snap(event){this._snappingPoint=null;return false;}/**\n   * add snapping point to shape\n   */addSnappingPointToShape(){return false;}/**\n   * draw shape label\n   */drawShapeLabel(){const borderOffset=this.shapeType!==ShapeType.DOT?1/2:0;const vertexOffset=(this.shapeType===ShapeType.POLYGON||this.shapeType===ShapeType.LINE||this.shapeType===ShapeType.RECTANGLE)&&this.showVertex?4:0;if(this.labelDom){// use dom to render\nif(this.label){this.labelDom.text=this.label;this.labelDom.zIndex=this.order;const position=this.getLabelPosition();const globalPosition=this.container.toGlobal({x:position.x,y:position.y-(borderOffset+vertexOffset)/this.scale});const globalPivot=this.container.toGlobal(this.pivot);this.labelDom.setPosition(globalPosition,globalPivot,this.rotation);}}else if(this.label){if(!this.labelContainer){this._createLabelContainer();}else{this.labelContainer.removeChildren();}const{x,y}=this.getLabelPosition();this.labelContainer.position.x=x;this.labelContainer.position.y=y-(18+borderOffset+vertexOffset)/this.scale;this.labelContainer.scale.set(1/this.scale);const text=new Text(\" \".concat(this.label,\" \"),{fontSize:14,lineHeight:18,fill:'#FFFFFF'});const{width,height}=text.getBounds();const bounds=new Graphics();bounds.beginFill(0,0.6);bounds.drawRect(0,0,width,height);bounds.endFill();this.labelContainer.addChild(bounds);this.labelContainer.addChild(text);}}/**\n   * finish shape create\n   * @param otherShapeData\n   * @protected\n   */_finish(otherShapeData){if(!this.destroyed){this._finished=true;this.drawShape();this._emit(EventAction.FINISHED,otherShapeData);}}/**\n   * remove shape from canvas\n   * @protected\n   */_remove(){this._emit(EventAction.REMOVED);this.destroy();}/**\n   * when shape move & resize\n   * @protected\n   */_changed(){this._emit(EventAction.CHANGED,this.getData());}/**\n   * when shape is been dragging\n   * @param data\n   * @protected\n   */_dragging(data){this.dragging=true;}/**\n   * when shape is reszing\n   * @param data\n   * @protected\n   */_resizing(data){this.resizing=true;}/**\n   * get global position\n   * @returns\n   */getGlobalPosition(){const{left,right,top,bottom}=this.shapeBounds;const center=new Point(left+(right-left)/2,top+(bottom-top)/2);const{x,y}=this.container.toGlobal(center);return{x,y};}/**\n   * find intersections\n   * @param shapes\n   */findIntersections(shapes){const currentShapeData=this.getAreaAsGeoJSON();const filteredShapes=shapes.filter(s=>s.uid!==this.uid);return findIntersections(currentShapeData,this.shapeBounds,this.shapeType,filteredShapes);}/**\n   * update shape position\n   * @param x\n   * @param y\n   */updatePosition(x,y){this.position=new Point(x,y);this._updatePosition();}/**\n   * destroy shape\n   */destroy(){if(this.destroyed){return;}this.app.view.removeEventListener('mousedown',this.processGlobalMouseDown,false);document.removeEventListener('keydown',this._shapeKeyDown,false);// remove all listeners\nObject.values(EventAction).forEach(action=>{this.off(action);});// remove controls\nthis._controls=[];if(this._rotateControl){this._rotateControl.destroy();}// destroy containers\n[this.controlsContainer,this.shapeContainer].forEach(container=>{this.container.removeChild(container);container.destroy({children:true,texture:true,baseTexture:true});});// remove dom if possible\nif(this.labelDom){this.labelDom.remove();this.labelDom=undefined;}this.destroyed=true;}/**\n   * remove controls\n   */removeControls(){// remove control points\nthis._controls.forEach(c=>{c.remove();});this._controls=[];// remove rotate control\nif(this._rotateControl){this._rotateControl.remove();}}/**\n   * emit event\n   * @protected\n   * @param eventName\n   */_emit(eventName){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}this._eventEmitter.emit(eventName,this,...args);}/**\n   * add listener\n   * @param eventName\n   * @param callback\n   */on(eventName,callback){this._eventEmitter.on(eventName,callback);return this;}/**\n   * remove listener\n   * @param eventName\n   * @param callback\n   */off(eventName,callback){if(callback){this._eventEmitter.removeListener(eventName,callback);}else{this._eventEmitter.removeAllListeners(eventName);}return this;}/**\n   * map screen position to stage position as a PIXI point\n   * @protected\n   * @param x screen position x\n   * @param y screen position y\n   */_mapScreenToStagePosition(x,y){const point=new Point();this.app.renderer.plugins.interaction.mapPositionToPoint(point,x,y);return point;}/**\n   * map stage position to local posistion as a PIXI point\n   * @protected\n   * @param point\n   */_mapStageToLocalPosition(point){return this.container.toLocal(point);}/**\n   * update shape container order\n   */_updateShapeContainerOrder(){if(this.shapeType===ShapeType.DOT||this.shapeType===ShapeType.LINE){this.shapeContainer.zIndex=this.selected?9999:this.order;}else{this.shapeContainer.zIndex=this.order;}}/**\n   * create label container\n   * @protected\n   */_createLabelContainer(){this.labelContainer=new Container();this.labelContainer.interactive=false;this.shapeContainer.addChild(this.labelContainer);}/**\n   * create vertexes container\n   * @protected\n   */_createVertexesContainer(){this.vertexesContainer=new Container();this.vertexesContainer.interactive=false;this.shapeContainer.addChild(this.vertexesContainer);}}","map":{"version":3,"names":["v4","uuidv4","Container","Graphics","Point","Text","utils","PIXIUtils","Layer","ExtendedGraphics","ShapeGraphics","ShapeType","findIntersections","Cursor","computeRotatedPosition","EventAction","BorderStyle","Shape","globalSnappingPoint","container","snappingPoint","app","stage","area","NaN","pivot","p","color","_color","shouldUpdate","drawShape","borderColor","_borderColor","displayBorderColor","selected","selectedColor","hovered","hoveredColor","alpha","_alpha","newAlpha","label","_label","drawShapeLabel","borderStyle","_borderStyle","showVertex","_showVertex","showVertexOrder","_showVertexOrder","order","_order","_updateShapeContainerOrder","labelDom","zIndex","visible","_visible","instance","interactive","shapeContainer","controlsContainer","_rotateControl","control","_interactive","_controls","forEach","c","editable","_editable","rotatable","_rotatable","finished","_finished","_selected","_hovered","_emit","POINTER_OVER","POINTER_OUT","cursor","MOVE","POINTER","DEFAULT","scale","_scale","rotation","_rotation","_updatePosition","constructor","_ref","_this","shapeType","uid","originColors","labelContainer","vertexesContainer","destroyed","resizing","dragging","_eventEmitter","EventEmitter","_controlLine","SOLID","_snappingPoint","_ctrlKey","_dragPoint","_dragPosistion","_dragged","_rightClicked","_rightDragged","_lastPivot","processPointerDown","event","frontTargets","arguments","length","undefined","data","button","_continuePropogating","stopPropagation","getLocalPosition","x","y","position","SELECTED","processPointerUp","_changed","processPointerMove","buttons","snap","originalEvent","ctrlKey","point","originX","originY","DOT","_dragging","deltaX","deltaY","processGlobalMouseDown","success","addSnappingPointToShape","_shapeKeyDown","e","shiftKey","_e$key","key","toLowerCase","preventDefault","Math","PI","on","view","addEventListener","document","addChild","resize","clone","rotatedPivot","set","funcName","interaction","renderer","plugins","hit","hitTest","global","includes","shape","deleteSelectedPoints","snapToPoint","tolerance","borderOffset","vertexOffset","POLYGON","LINE","RECTANGLE","text","getLabelPosition","globalPosition","toGlobal","globalPivot","setPosition","_createLabelContainer","removeChildren","concat","fontSize","lineHeight","fill","width","height","getBounds","bounds","beginFill","drawRect","endFill","_finish","otherShapeData","FINISHED","_remove","REMOVED","destroy","CHANGED","getData","_resizing","getGlobalPosition","left","right","top","bottom","shapeBounds","center","shapes","currentShapeData","getAreaAsGeoJSON","filteredShapes","filter","s","updatePosition","removeEventListener","Object","values","action","off","removeChild","children","texture","baseTexture","remove","removeControls","eventName","_len","args","Array","_key","emit","callback","removeListener","removeAllListeners","_mapScreenToStagePosition","mapPositionToPoint","_mapStageToLocalPosition","toLocal","_createVertexesContainer"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Shape.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { Application, Container, Graphics, InteractionEvent, Point, Text, utils as PIXIUtils } from 'pixi.js';\nimport { Geom } from 'polygon-clipping';\nimport Layer from './Layer';\nimport ExtendedGraphics from './ExtendedGraphics';\nimport ShapeGraphics from './ShapeGraphics';\nimport { ShapeType, ShapeData } from './types';\nimport Control from './controls/Control';\nimport ControlRotation from './controls/ControlRotation';\nimport Label from './label/Label';\nimport { findIntersections } from './utils';\nimport Cursor from '../Cursor';\nimport { computeRotatedPosition } from '../../../utils/math';\n\nexport enum EventAction {\n  SELECTED = 'selected',\n  VERTEX_SELECTED = 'vertex-selected',\n  FINISHED = 'finished',\n  REMOVED = 'removed',\n  CHANGED = 'changed',\n  POINTER_OVER = 'pointer-over',\n  POINTER_OUT = 'pointer-out',\n}\n\nexport enum BorderStyle {\n  SOLID = 'solid',\n  DASHED = 'dashed',\n}\n\nexport interface ShapeOptions {\n  app: Application;\n  container?: Container;\n  scale?: number;\n  color?: number; // default for vertexes, edges & fill\n  alpha?: number;\n  label?: string;\n  showVertex?: boolean;\n  showVertexOrder?: boolean;\n  rotatable?: boolean;\n  labelDom?: Label;\n}\n\n/**\n * Shape base\n * @class\n */\nexport default abstract class Shape<T> {\n  /**\n   * shape type\n   */\n  abstract shapeType: ShapeType;\n\n  /**\n   * unique id\n   * @member {string}\n   */\n  uid = uuidv4();\n\n  /**\n   * PIXI instance\n   * @member {ShapeGraphics}\n   */\n  instance = new ShapeGraphics<T>(this);\n\n  /**\n   * PIXI application\n   * @member {PIXI.Application}\n   */\n  app: Application;\n\n  /**\n   * PIXI container\n   * @member {PIXI.Container | Layer}\n   */\n  container: Container | Layer;\n\n  /**\n   * origin colors from shape options\n   */\n  originColors: {\n    color: number;\n    borderColor: number;\n  } = {\n    color: 0,\n    borderColor: 0,\n  };\n\n  /**\n   * selected border color\n   * @member {number}\n   */\n  selectedColor = 0xFFFF00;\n\n  /**\n   * hovered border color\n   * @member {number}\n   */\n  hoveredColor = 0xCCCCCC;\n\n  /**\n   * shape container\n   * @member {PIXI.Container}\n   */\n  shapeContainer = new Container();\n\n  /**\n   * controls container\n   * @member {PIXI.Container}\n   */\n  controlsContainer = new Container();\n\n  /**\n   * label container\n   * @member {PIXI.Container}\n   */\n  labelContainer?: Container;\n\n  /**\n   * label dom\n   * @member {Label}\n   */\n  labelDom?: Label;\n\n  /**\n   * container to show shape vertexes\n   * @member {PIXI.Container}\n   */\n  vertexesContainer?: Container;\n\n  /**\n   * is shape destroyed\n   * @member {boolean}\n   */\n  destroyed = false;\n\n  /**\n   * is shape resizing\n   * @member {boolean}\n   */\n  resizing = false;\n\n  /**\n   * is shape dragging\n   * @member {boolean}\n   */\n  dragging = false;\n\n  /**\n   * events emitter\n   * @private {PIXI.utils.EventEmitter}\n   */\n  private _eventEmitter = new PIXIUtils.EventEmitter();\n\n  /**\n   * controls\n   * @protected {Control[]}\n   */\n  protected _controls: Control[] = [];\n\n  /**\n   * control for shape rotation\n   * @protected {ControlRotation}\n   */\n  protected _rotateControl?: ControlRotation;\n\n  /**\n   * instance to draw shape boundary control\n   * @protected {ExtendedGraphics}\n   */\n  protected _controlLine = new ExtendedGraphics();\n\n  /**\n   * color\n   * @protected {number}\n   */\n  protected _color = 0;\n\n  /**\n   * border color\n   * @protected {number}\n   */\n  protected _borderColor = 0;\n\n  /**\n   * shape alpha\n   * @protected {number}\n   */\n  protected _alpha = 0.5;\n\n  /**\n   * shape label\n   * @protected {string}\n   */\n  protected _label = '';\n\n  /**\n   * shape border style\n   * @protected {BorderStyle}\n   */\n  protected _borderStyle = BorderStyle.SOLID;\n\n  /**\n   * show shape vertex\n   * @protected {boolean}\n   */\n  protected _showVertex = false;\n\n  /**\n   * show shape vertex order\n   * @protected {boolean}\n   */\n  protected _showVertexOrder = false;\n\n  /**\n   * shape z-index\n   * @protected {number}\n   */\n  protected _order = 0;\n\n  /**\n   * is shape visible\n   * @protected {boolean}\n   */\n  protected _visible = true;\n\n  /**\n   * is shape interactive\n   * @protected {boolean}\n   */\n  protected _interactive = true;\n\n  /**\n   * is shape editable\n   * @protected {boolean}\n   */\n  protected _editable = true;\n\n  /**\n   * is shape rotatable\n   * @protected {boolean}\n   */\n  protected _rotatable = false;\n\n  /**\n   * is shape drawing finished\n   * @protected {boolean}\n   */\n  protected _finished = true;\n\n  /**\n   * is shape selected\n   * @protected {boolean}\n   */\n  protected _selected = false;\n\n  /**\n   * is shape hovered\n   * @protected {boolean}\n   */\n  protected _hovered = false;\n\n  /**\n   * shape scale factor\n   * @protected {boolean}\n   */\n  protected _scale = 1;\n\n  /**\n   * shape rotation\n   * @protected {number}\n   */\n  protected _rotation = 0;\n\n  /**\n   * point when snapping\n   * @protected {Point}\n   */\n  protected _snappingPoint: Point | null = null;\n\n  /**\n   * is ctrl key down\n   * @protected {boolean}\n   */\n  protected _ctrlKey = false;\n\n  /**\n   * mouse position when click to drag\n   * @private {Point}\n   */\n  private _dragPoint: Point | null = null;\n\n  /**\n   * instance position when click to drag\n   * @private {Point}\n   */\n  private _dragPosistion: Point | null = null;\n\n  /**\n   * is instance been dragged\n   * @private {boolean}\n   */\n  private _dragged = false;\n\n  /**\n   * is right click down\n   * @private {boolean}\n   */\n  private _rightClicked = false;\n\n  /**\n   * is right dragged\n   * @private {boolean}\n   */\n  private _rightDragged = false;\n\n  /**\n   * last pivot\n   * @private {Point|undefined}\n   */\n  private _lastPivot: Point | undefined;\n\n  /**\n   * global snapping point (not on self shape)\n   * @getter\n   */\n  get globalSnappingPoint() {\n    return this.container instanceof Layer ? this.container.snappingPoint : (this.app.stage as Layer).snappingPoint;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get area() {\n    return NaN;\n  }\n\n  // TODO: make pivot as abstract getter & setter\n  // eslint-disable-next-line class-methods-use-this\n  get pivot() {\n    return new Point(0, 0);\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-empty-function\n  set pivot(p: Point) {}\n\n  /**\n   * get position\n   * @getter\n   */\n  abstract get position(): Point;\n\n  /**\n   * set position\n   * @setter\n   */\n  abstract set position(point: Point);\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  abstract get shapeBounds(): { left: number, top: number, right: number, bottom: number };\n\n  /**\n   * get color\n   * @getter\n   */\n  get color() {\n    return this._color;\n  }\n\n  /**\n   * set color\n   * @setter\n   */\n  set color(color: number) {\n    const shouldUpdate = this._color !== color;\n    this._color = color;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get border color\n   * @getter\n   */\n  get borderColor() {\n    return this._borderColor;\n  }\n\n  /**\n   * set border color\n   * @setter\n   */\n  set borderColor(color: number) {\n    const shouldUpdate = this._borderColor !== color;\n    this._borderColor = color;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get display border color\n   * @getter\n   */\n  get displayBorderColor() {\n    if (this.selected) {\n      return this.selectedColor;\n    }\n    if (this.hovered) {\n      return this.hoveredColor;\n    }\n    return this.borderColor;\n  }\n\n  /**\n   * get alpha\n   * @getter\n   */\n  get alpha() {\n    return this._alpha;\n  }\n\n  /**\n   * set alpha\n   * @setter\n   */\n  set alpha(alpha: number) {\n    const newAlpha = alpha > 0 ? alpha : 0.005; // for transparent shape, interactions can't be fired\n    const shouldUpdate = this._alpha !== newAlpha;\n    this._alpha = newAlpha;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get label\n   * @getter\n   */\n  get label() {\n    return this._label;\n  }\n\n  /**\n   * set label\n   * @setter\n   */\n  set label(label: string) {\n    this._label = label;\n    this.drawShapeLabel();\n  }\n\n  /**\n   * get border style\n   * @getter\n   */\n  get borderStyle() {\n    return this._borderStyle;\n  }\n\n  /**\n   * set border style\n   * @setter\n   */\n  set borderStyle(borderStyle: BorderStyle) {\n    const shouldUpdate = this._borderStyle !== borderStyle;\n    this._borderStyle = borderStyle;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get show vertex\n   * @getter\n   */\n  get showVertex() {\n    return this._showVertex;\n  }\n\n  /**\n   * set show vertex\n   * @setter\n   */\n  set showVertex(showVertex: boolean) {\n    const shouldUpdate = this._showVertex !== showVertex;\n    this._showVertex = showVertex;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get show vertex order\n   * @getter\n   */\n  get showVertexOrder() {\n    return this._showVertexOrder;\n  }\n\n  /**\n   * set show vertex order\n   * @setter\n   */\n  set showVertexOrder(showVertexOrder: boolean) {\n    const shouldUpdate = this._showVertexOrder !== showVertexOrder;\n    this._showVertexOrder = showVertexOrder;\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get order\n   * @getter\n   */\n  get order() {\n    return this._order;\n  }\n\n  /**\n   * set order\n   * @setter\n   */\n  set order(order: number) {\n    this._order = order;\n    this._updateShapeContainerOrder();\n    if (this.labelDom) {\n      this.labelDom.zIndex = order;\n    }\n  }\n\n  /**\n   * get visible\n   * @getter\n   */\n  get visible() {\n    return this._visible;\n  }\n\n  /**\n   * set visible\n   * @setter\n   */\n  set visible(visible: boolean) {\n    const shouldUpdate = this._visible !== visible;\n    this._visible = visible;\n    if (shouldUpdate) {\n      this.instance.interactive = visible ? this.interactive : false;\n      this.shapeContainer.visible = visible;\n      this.controlsContainer.visible = visible;\n      if (this._rotateControl) {\n        this._rotateControl.control.visible = visible;\n      }\n      if (this.labelDom) {\n        this.labelDom.visible = visible;\n      }\n    }\n  }\n\n  /**\n   * get interactive\n   * @getter\n   */\n  get interactive() {\n    return this._interactive;\n  }\n\n  /**\n   * set interactive\n   * @setter\n   */\n  set interactive(interactive: boolean) {\n    this._interactive = interactive;\n    if (this.instance) {\n      this.instance.interactive = interactive;\n    }\n    this._controls.forEach((c) => {\n      c.control.interactive = interactive;\n    });\n    if (!interactive) {\n      this.selected = false;\n      this.hovered = false;\n    }\n  }\n\n  /**\n   * get editable\n   * @getter\n   */\n  get editable() {\n    return this._editable;\n  }\n\n  /**\n   * set editable\n   * @setter\n   */\n  set editable(editable: boolean) {\n    this._editable = editable;\n    this.drawShape();\n  }\n\n  /**\n   * get rotatable\n   * @getter\n   */\n  get rotatable() {\n    return this._rotatable;\n  }\n\n  /**\n   * set rotatable\n   * @setter\n   */\n  set rotatable(rotatable: boolean) {\n    this._rotatable = rotatable;\n  }\n\n  /**\n   * get shape finished\n   * @getter\n   */\n  get finished() {\n    return this._finished;\n  }\n\n  /**\n   * get selected\n   * @getter\n   */\n  get selected() {\n    return this._selected;\n  }\n\n  /**\n   * set selected\n   * @setter\n   */\n  set selected(selected: boolean) {\n    const shouldUpdate = this._selected !== selected;\n    this._selected = selected;\n    this._updateShapeContainerOrder();\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get hovered\n   * @getter\n   */\n  get hovered() {\n    return this._hovered;\n  }\n\n  /**\n   * set hovered\n   * @setter\n   */\n  set hovered(hovered: boolean) {\n    const shouldUpdate = this._hovered !== hovered;\n    this._hovered = hovered;\n    if (shouldUpdate) {\n      this.drawShape();\n      this._emit(hovered ? EventAction.POINTER_OVER : EventAction.POINTER_OUT);\n    }\n    // should update stage cursor because instance cursor not show when covered by others\n    if (hovered) {\n      this.instance.cursor = this.editable ? Cursor.MOVE : Cursor.POINTER;\n    } else {\n      this.instance.cursor = Cursor.DEFAULT;\n    }\n  }\n\n  /**\n   * get scale\n   * @getter\n   */\n  get scale() {\n    return this._scale;\n  }\n\n  /**\n   * set scale\n   * @setter\n   */\n  set scale(scale: number) {\n    const shouldUpdate = this._scale !== scale;\n    this._scale = scale;\n    this._controls.forEach((c) => {\n      // eslint-disable-next-line no-param-reassign\n      c.scale = scale;\n    });\n    if (this._rotateControl) {\n      this._rotateControl.scale = scale;\n    }\n    if (shouldUpdate) {\n      this.drawShape();\n    }\n  }\n\n  /**\n   * get rotation\n   * @getter\n   */\n  get rotation() {\n    return this._rotation;\n  }\n\n  /**\n   * set rotation\n   * @setter\n   */\n  set rotation(rotation: number) {\n    this._rotation = rotation;\n    this._updatePosition();\n    this.drawShape();\n  }\n\n  constructor({\n    app,\n    container,\n    scale,\n    color,\n    alpha,\n    label,\n    showVertex,\n    showVertexOrder,\n    rotatable = false,\n    labelDom,\n  }: ShapeOptions) {\n    this.instance.on('pointerdown', this.processPointerDown);\n    this.instance.on('pointerup', this.processPointerUp);\n    this.instance.on('pointerupoutside', this.processPointerUp);\n    this.instance.on('pointermove', this.processPointerMove);\n\n    this.app = app;\n    this.app.view.addEventListener('mousedown', this.processGlobalMouseDown, false);\n    document.addEventListener('keydown', this._shapeKeyDown, false);\n\n    this.container = container || app.stage;\n    this.instance.interactive = this.interactive;\n    this.controlsContainer.zIndex = 9999;\n    this.shapeContainer.addChild(this.instance);\n    this.container.addChild(this.shapeContainer);\n    this.container.addChild(this.controlsContainer);\n    this._controlLine.interactive = false;\n    this.controlsContainer.addChild(this._controlLine);\n\n    this._scale = scale || app.stage.scale.x;\n    if (color !== undefined) {\n      this._color = color;\n      this._borderColor = color;\n    }\n    this.originColors = {\n      color: this._color,\n      borderColor: this._borderColor,\n    };\n    if (alpha !== undefined) {\n      this._alpha = alpha > 0 ? alpha : 0.005;\n    }\n    if (label !== undefined) {\n      this._label = label;\n    }\n    if (showVertex !== undefined) {\n      this._showVertex = showVertex;\n    }\n    if (showVertexOrder !== undefined) {\n      this._showVertexOrder = showVertexOrder;\n    }\n    this._rotatable = rotatable;\n    this.labelDom = labelDom;\n  }\n\n  /**\n   * update container position\n   * @protected\n   */\n  protected _updatePosition(resize = false) {\n    const pivot = this.pivot.clone();\n    if (resize && this._lastPivot) {\n      // resize change pivot\n      const rotatedPivot = computeRotatedPosition(this._lastPivot, pivot, this.rotation);\n      pivot.x = rotatedPivot.x;\n      pivot.y = rotatedPivot.y;\n      this.pivot = pivot;\n    }\n    this.shapeContainer.pivot.set(pivot.x, pivot.y);\n    this.shapeContainer.position.set(pivot.x, pivot.y);\n    this.shapeContainer.rotation = this.rotation;\n    this._lastPivot = pivot.clone();\n\n    this.controlsContainer.pivot.set(pivot.x, pivot.y);\n    this.controlsContainer.position.set(pivot.x, pivot.y);\n    this.controlsContainer.rotation = this.rotation;\n  };\n\n  /**\n   * propogating event to back shapes\n   * @param event\n   * @param frontTargets\n   * @param funcName\n   */\n  private _continuePropogating(\n    event: InteractionEvent,\n    frontTargets: Graphics[],\n    funcName: 'processPointerDown' | 'processPointerUp',\n  ) {\n    this.instance.interactive = false;\n    const { interaction } = this.app.renderer.plugins;\n    const hit = interaction.hitTest(event.data.global);\n    if (hit && hit instanceof ShapeGraphics && !frontTargets.includes(this.instance)) {\n      hit.shape[funcName](event, [...frontTargets, this.instance]);\n    }\n    this.instance.interactive = true;\n  }\n\n  /**\n   * process pointerdown\n   * @param event\n   * @param frontTargets\n   */\n  processPointerDown = (event: InteractionEvent, frontTargets: Graphics[] = []) => {\n    if (event.data.button === 2) {\n      this._rightClicked = true;\n      this._continuePropogating(event, frontTargets, 'processPointerDown');\n      return;\n    }\n\n    if (this.hovered) {\n      event.stopPropagation();\n      const p = event.data.getLocalPosition(this.container);\n      this._dragPoint = new Point(p.x, p.y);\n      this._dragPosistion = this.position;\n      this._dragged = false;\n      this.selected = true;\n      this._emit(EventAction.SELECTED, p);\n      // disable controls interactivity when first pointer down to selected (avoid bugs when start dragging on controls)\n      this._controls.forEach((c) => {\n        c.control.interactive = false;\n      });\n    }\n\n    if (!this._snappingPoint) { // if upper shapes has snapping point, do not propogating\n      this._continuePropogating(event, frontTargets, 'processPointerDown');\n    }\n  };\n\n  /**\n   * process pointerup\n   * @param event\n   * @param frontTargets\n   */\n  processPointerUp = (event: InteractionEvent, frontTargets: Graphics[] = []) => {\n    if (event.data.button === 2 && this._rightClicked && !this._rightDragged) {\n      if (this.hovered && !this.selected) {\n        const p = event.data.getLocalPosition(this.container);\n        this.selected = true;\n        this._emit(EventAction.SELECTED, p);\n      }\n    }\n\n    // re-active controls when pointer up\n    this._controls.forEach((c) => {\n      c.control.interactive = true;\n    });\n    this.dragging = false;\n    this._dragPoint = null;\n    this._dragPosistion = null;\n    if (this._dragged) {\n      this._changed();\n      this._dragged = false;\n    }\n    this._rightClicked = false;\n    this._rightDragged = false;\n    this._continuePropogating(event, frontTargets, 'processPointerUp');\n  };\n\n  /**\n   * process pointermove\n   * @param event\n   */\n  processPointerMove = (event: InteractionEvent) => {\n    if (event.data.buttons === 2 && this._rightClicked) {\n      this._rightDragged = true;\n      return;\n    }\n    if (this.editable && this.selected && this.snap(event)) {\n      // snapping\n      this.instance.cursor = Cursor.DEFAULT;\n    } else if (this.editable && this.selected && this._dragPoint && this._dragPosistion) {\n      // dragging\n      this._dragged = true;\n      this._ctrlKey = event.data.originalEvent.ctrlKey;\n      const point = event.data.getLocalPosition(this.container);\n      const originX = this.position.x;\n      const originY = this.position.y;\n      const position = new Point(\n        this._dragPosistion.x + (point.x - this._dragPoint.x),\n        this._dragPosistion.y + (point.y - this._dragPoint.y),\n      );\n      // prefer to use global snapping point if moving a dot\n      this.position = (this.shapeType === ShapeType.DOT && this.globalSnappingPoint) ? this.globalSnappingPoint : position;\n      this._updatePosition();\n      this._dragging({ deltaX: this.position.x - originX, deltaY: this.position.y - originY });\n    }\n  };\n\n  /**\n   * process app mouse down\n   */\n  processGlobalMouseDown = () => {\n    if (this._snappingPoint) {\n      const success = this.addSnappingPointToShape();\n      if (success) {\n        // set selected\n        this.selected = true;\n        this._emit(EventAction.SELECTED);\n        // ignore drag start\n        this._dragPoint = null;\n        this._dragPosistion = null;\n      }\n    }\n  };\n\n  /**\n   * actual draw the shape on canvas\n   */\n  abstract drawShape(): void;\n\n  /**\n   * start shape create\n   * @param point create start point\n   * @param options options used for creation\n   */\n  abstract create(point?: Point, options?: any): void;\n\n  /**\n   * get label position of the shape\n   */\n  abstract getLabelPosition(): Point;\n\n  /**\n   * get shape data\n   */\n  abstract getData(): T;\n\n  /**\n   * get shape Geo JSON (multi polygon)\n   */\n  abstract getAreaAsGeoJSON(): Geom;\n\n  /**\n   * delete selected points in shape, default reture false and can be overwritten in sub class\n   */\n  deleteSelectedPoints() {\n    return false; // false means no point deleted\n  }\n\n  /**\n   * snap to shape vertexes or edges\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point: Point, tolerance?: number): Point | null {\n    return null;\n  }\n\n  /**\n   * snap to shape edges\n   * @param point\n   */\n  snap(event: InteractionEvent) {\n    this._snappingPoint = null;\n    return false;\n  }\n\n  /**\n   * add snapping point to shape\n   */\n  addSnappingPointToShape() {\n    return false;\n  }\n\n  /**\n   * draw shape label\n   */\n  drawShapeLabel() {\n    const borderOffset = this.shapeType !== ShapeType.DOT ? 1 / 2 : 0;\n    const vertexOffset = (\n      this.shapeType === ShapeType.POLYGON ||\n      this.shapeType === ShapeType.LINE ||\n      this.shapeType === ShapeType.RECTANGLE\n    ) && this.showVertex ? 4 : 0;\n\n    if (this.labelDom) {\n      // use dom to render\n      if (this.label) {\n        this.labelDom.text = this.label;\n        this.labelDom.zIndex = this.order;\n\n        const position = this.getLabelPosition();\n        const globalPosition = this.container.toGlobal({ x: position.x, y: position.y - (borderOffset + vertexOffset) / this.scale });\n        const globalPivot = this.container.toGlobal(this.pivot);\n        this.labelDom.setPosition(globalPosition, globalPivot, this.rotation);\n      }\n    } else if (this.label) {\n      if (!this.labelContainer) {\n        this._createLabelContainer();\n      } else {\n        this.labelContainer.removeChildren();\n      }\n\n      const { x, y } = this.getLabelPosition();\n      this.labelContainer!.position.x = x;\n      this.labelContainer!.position.y = y - (18 + borderOffset + vertexOffset) / this.scale;\n      this.labelContainer!.scale.set(1 / this.scale);\n\n      const text = new Text(` ${this.label} `, {\n        fontSize: 14,\n        lineHeight: 18,\n        fill: '#FFFFFF',\n      });\n\n      const { width, height } = text.getBounds();\n      const bounds = new Graphics();\n      bounds.beginFill(0, 0.6);\n      bounds.drawRect(0, 0, width, height);\n      bounds.endFill();\n      this.labelContainer!.addChild(bounds);\n      this.labelContainer!.addChild(text);\n    }\n  }\n\n  /**\n   * finish shape create\n   * @param otherShapeData\n   * @protected\n   */\n  protected _finish(otherShapeData?: ShapeData[]) {\n    if (!this.destroyed) {\n      this._finished = true;\n      this.drawShape();\n      this._emit(EventAction.FINISHED, otherShapeData);\n    }\n  }\n\n  /**\n   * remove shape from canvas\n   * @protected\n   */\n  protected _remove() {\n    this._emit(EventAction.REMOVED);\n    this.destroy();\n  }\n\n  /**\n   * when shape move & resize\n   * @protected\n   */\n  protected _changed() {\n    this._emit(EventAction.CHANGED, this.getData());\n  }\n\n  /**\n   * when shape is been dragging\n   * @param data\n   * @protected\n   */\n  protected _dragging(data?: { deltaX: number; deltaY: number }) {\n    this.dragging = true;\n  }\n\n  /**\n   * when shape is reszing\n   * @param data\n   * @protected\n   */\n  protected _resizing(data?: { deltaX: number; deltaY: number }) {\n    this.resizing = true;\n  }\n\n  /**\n   * get global position\n   * @returns\n   */\n  getGlobalPosition() {\n    const { left, right, top, bottom } = this.shapeBounds;\n    const center = new Point(left + (right - left) / 2, top + (bottom - top) / 2);\n    const { x, y } = this.container.toGlobal(center);\n    return { x, y };\n  }\n\n  /**\n   * find intersections\n   * @param shapes\n   */\n  findIntersections(shapes: Shape<ShapeData>[]) {\n    const currentShapeData = this.getAreaAsGeoJSON();\n    const filteredShapes = shapes.filter((s) => s.uid !== this.uid);\n    return findIntersections(currentShapeData, this.shapeBounds, this.shapeType, filteredShapes);\n  }\n\n  /**\n   * update shape position\n   * @param x\n   * @param y\n   */\n  updatePosition(x: number, y: number) {\n    this.position = new Point(x, y);\n    this._updatePosition();\n  }\n\n  /**\n   * destroy shape\n   */\n  destroy() {\n    if (this.destroyed) {\n      return;\n    }\n    this.app.view.removeEventListener('mousedown', this.processGlobalMouseDown, false);\n    document.removeEventListener('keydown', this._shapeKeyDown, false);\n    // remove all listeners\n    Object.values(EventAction).forEach((action) => {\n      this.off(action);\n    });\n    // remove controls\n    this._controls = [];\n    if (this._rotateControl) {\n      this._rotateControl.destroy();\n    }\n    // destroy containers\n    [\n      this.controlsContainer,\n      this.shapeContainer,\n    ]\n      .forEach((container) => {\n        this.container.removeChild(container);\n        container.destroy({\n          children: true,\n          texture: true,\n          baseTexture: true,\n        });\n      });\n    // remove dom if possible\n    if (this.labelDom) {\n      this.labelDom.remove();\n      this.labelDom = undefined;\n    }\n    this.destroyed = true;\n  }\n\n  /**\n   * remove controls\n   */\n  removeControls() {\n    // remove control points\n    this._controls.forEach((c) => {\n      c.remove();\n    });\n    this._controls = [];\n    // remove rotate control\n    if (this._rotateControl) {\n      this._rotateControl.remove();\n    }\n  }\n\n  /**\n   * emit event\n   * @protected\n   * @param eventName\n   */\n  protected _emit(eventName: string, ...args: any[]) {\n    this._eventEmitter.emit(eventName, this, ...args);\n  }\n\n  /**\n   * add listener\n   * @param eventName\n   * @param callback\n   */\n  on(eventName: string, callback: (shape: Shape<T>, ...args: any[]) => void) {\n    this._eventEmitter.on(eventName, callback);\n    return this;\n  }\n\n  /**\n   * remove listener\n   * @param eventName\n   * @param callback\n   */\n  off(eventName: string, callback?: (shape: Shape<T>, ...args: any[]) => void) {\n    if (callback) {\n      this._eventEmitter.removeListener(eventName, callback);\n    } else {\n      this._eventEmitter.removeAllListeners(eventName);\n    }\n    return this;\n  }\n\n  /**\n   * map screen position to stage position as a PIXI point\n   * @protected\n   * @param x screen position x\n   * @param y screen position y\n   */\n  protected _mapScreenToStagePosition(x: number, y: number) {\n    const point = new Point();\n    this.app.renderer.plugins.interaction.mapPositionToPoint(point, x, y);\n    return point;\n  }\n\n  /**\n   * map stage position to local posistion as a PIXI point\n   * @protected\n   * @param point\n   */\n  protected _mapStageToLocalPosition(point: Point) {\n    return this.container.toLocal(point);\n  }\n\n  /**\n   * update shape container order\n   */\n  private _updateShapeContainerOrder() {\n    if (this.shapeType === ShapeType.DOT\n      || this.shapeType === ShapeType.LINE) {\n      this.shapeContainer.zIndex = this.selected ? 9999 : this.order;\n    } else {\n      this.shapeContainer.zIndex = this.order;\n    }\n  }\n\n  /**\n   * create label container\n   * @protected\n   */\n  protected _createLabelContainer() {\n    this.labelContainer = new Container();\n    this.labelContainer.interactive = false;\n    this.shapeContainer.addChild(this.labelContainer);\n  }\n\n  /**\n   * create vertexes container\n   * @protected\n   */\n  protected _createVertexesContainer() {\n    this.vertexesContainer = new Container();\n    this.vertexesContainer.interactive = false;\n    this.shapeContainer.addChild(this.vertexesContainer);\n  }\n\n  /**\n   * key down handler\n   * @protected\n   * @param e\n   */\n  protected _shapeKeyDown = (e: KeyboardEvent) => {\n    if (this.finished && this.selected && this.editable && e.shiftKey) {\n      let deltaX = 0;\n      let deltaY = 0;\n      let rotation = 0;\n      switch (e.key?.toLowerCase()) {\n        case 'w':\n          deltaY = -1;\n          break;\n        case 'a':\n          deltaX = -1;\n          break;\n        case 's':\n          deltaY = 1;\n          break;\n        case 'd':\n          deltaX = 1;\n          break;\n        case 'q':\n          rotation = -1;\n          break;\n        case 'e':\n          rotation = 1;\n          break;\n        default:\n          break;\n      }\n      if (deltaX !== 0 || deltaY !== 0) {\n        e.preventDefault();\n        this.position = new Point(\n          this.position.x + deltaX,\n          this.position.y + deltaY,\n        );\n        this._updatePosition();\n        this._changed();\n      }\n\n      if (rotation !== 0 && this.rotatable) {\n        e.preventDefault();\n        this.rotation += rotation * (Math.PI / 180);\n        this._changed();\n      }\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}