{"ast":null,"code":"export const timeInterval=pxPerSec=>{let retVal=1;if(pxPerSec>=1000){retVal=0.01;}else if(pxPerSec>=500){retVal=0.02;}else if(pxPerSec>=100){retVal=0.1;}else if(pxPerSec>=50){retVal=0.2;}else if(pxPerSec>=10){retVal=1;}else if(pxPerSec>=5){retVal=12;}else if(pxPerSec>=1){retVal=24;}else if(pxPerSec>=0.5){retVal=120;}else if(pxPerSec>=0.01){retVal=600;}else{retVal=Math.ceil(1/pxPerSec)*60;}return retVal;};export const primaryLabelInterval=pxPerSec=>{return 5;// let retVal = 1;\n// if (pxPerSec >= 1000) {\n//     retVal = 50; // 0.01;\n// } else if (pxPerSec >= 500) {\n//     retVal = 10; // 0.02;\n// } else if (pxPerSec >= 100) {\n//     retVal = 5; // 0.1;\n// } else if (pxPerSec >= 50) {\n//     retVal = 5; // 0.2;\n// } else if (pxPerSec >= 10) {\n//     retVal = 5; // 1;\n// } else if (pxPerSec >= 5) {\n//     retVal = 5 // 20;\n// } else if (pxPerSec >= 1) {\n//     retVal = 10; // 30;\n// } else if (pxPerSec >= 0.5) {\n//     retVal = 10; // 120;\n// } else if (pxPerSec >= 0.01) {\n//     retVal = 15; // 6000;\n// } else {\n//     retVal = Math.ceil(1 / pxPerSec);\n// }\n// return retVal;\n};export const secondaryLabelInterval=pxPerSec=>{return undefined;};export const formatTimeCallback=(secs,pxPerSec)=>{let seconds=Number(secs);const minutes=Math.floor(seconds/60);seconds=seconds%60;// fill up seconds with zeroes\nlet secondsStr=Math.round(seconds).toString();if(pxPerSec>=25*10){secondsStr=seconds.toFixed(2);}else if(pxPerSec>=25*1){secondsStr=seconds.toFixed(1);}if(minutes>0){if(seconds<10){secondsStr='0'+secondsStr;}return\"\".concat(minutes,\":\").concat(secondsStr);}return secondsStr;};","map":{"version":3,"names":["timeInterval","pxPerSec","retVal","Math","ceil","primaryLabelInterval","secondaryLabelInterval","undefined","formatTimeCallback","secs","seconds","Number","minutes","floor","secondsStr","round","toString","toFixed","concat"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/long-audio/components/utils/TimelineUtil.js"],"sourcesContent":["export const timeInterval = (pxPerSec) => {\n  let retVal = 1;\n  if (pxPerSec >= 1000) {\n    retVal = 0.01;\n  } else if (pxPerSec >= 500) {\n    retVal = 0.02;\n  } else if (pxPerSec >= 100) {\n    retVal = 0.1;\n  } else if (pxPerSec >= 50) {\n    retVal = 0.2;\n  } else if (pxPerSec >= 10) {\n    retVal = 1;\n  } else if (pxPerSec >= 5) {\n    retVal = 12;\n  } else if (pxPerSec >= 1) {\n    retVal = 24;\n  } else if (pxPerSec >= 0.5) {\n    retVal = 120;\n  } else if (pxPerSec >= 0.01) {\n    retVal = 600;\n  } else {\n    retVal = Math.ceil(1 / pxPerSec) * 60;\n  }\n  return retVal;\n};\n\nexport const primaryLabelInterval = (pxPerSec) => {\n  return 5;\n  // let retVal = 1;\n  // if (pxPerSec >= 1000) {\n  //     retVal = 50; // 0.01;\n  // } else if (pxPerSec >= 500) {\n  //     retVal = 10; // 0.02;\n  // } else if (pxPerSec >= 100) {\n  //     retVal = 5; // 0.1;\n  // } else if (pxPerSec >= 50) {\n  //     retVal = 5; // 0.2;\n  // } else if (pxPerSec >= 10) {\n  //     retVal = 5; // 1;\n  // } else if (pxPerSec >= 5) {\n  //     retVal = 5 // 20;\n  // } else if (pxPerSec >= 1) {\n  //     retVal = 10; // 30;\n  // } else if (pxPerSec >= 0.5) {\n  //     retVal = 10; // 120;\n  // } else if (pxPerSec >= 0.01) {\n  //     retVal = 15; // 6000;\n  // } else {\n  //     retVal = Math.ceil(1 / pxPerSec);\n  // }\n  // return retVal;\n};\n\nexport const secondaryLabelInterval = (pxPerSec) => {\n  return undefined;\n};\n\nexport const formatTimeCallback = (secs, pxPerSec) => {\n  let seconds = Number(secs);\n  const minutes = Math.floor(seconds / 60);\n  seconds = seconds % 60;\n\n  // fill up seconds with zeroes\n  let secondsStr = Math.round(seconds).toString();\n  if (pxPerSec >= 25 * 10) {\n    secondsStr = seconds.toFixed(2);\n  } else if (pxPerSec >= 25 * 1) {\n    secondsStr = seconds.toFixed(1);\n  }\n\n  if (minutes > 0) {\n    if (seconds < 10) {\n      secondsStr = '0' + secondsStr;\n    }\n    return `${minutes}:${secondsStr}`;\n  }\n  return secondsStr;\n};\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,YAAY,CAAIC,QAAQ,EAAK,CACxC,GAAI,CAAAC,MAAM,CAAG,CAAC,CACd,GAAID,QAAQ,EAAI,IAAI,CAAE,CACpBC,MAAM,CAAG,IAAI,CACf,CAAC,IAAM,IAAID,QAAQ,EAAI,GAAG,CAAE,CAC1BC,MAAM,CAAG,IAAI,CACf,CAAC,IAAM,IAAID,QAAQ,EAAI,GAAG,CAAE,CAC1BC,MAAM,CAAG,GAAG,CACd,CAAC,IAAM,IAAID,QAAQ,EAAI,EAAE,CAAE,CACzBC,MAAM,CAAG,GAAG,CACd,CAAC,IAAM,IAAID,QAAQ,EAAI,EAAE,CAAE,CACzBC,MAAM,CAAG,CAAC,CACZ,CAAC,IAAM,IAAID,QAAQ,EAAI,CAAC,CAAE,CACxBC,MAAM,CAAG,EAAE,CACb,CAAC,IAAM,IAAID,QAAQ,EAAI,CAAC,CAAE,CACxBC,MAAM,CAAG,EAAE,CACb,CAAC,IAAM,IAAID,QAAQ,EAAI,GAAG,CAAE,CAC1BC,MAAM,CAAG,GAAG,CACd,CAAC,IAAM,IAAID,QAAQ,EAAI,IAAI,CAAE,CAC3BC,MAAM,CAAG,GAAG,CACd,CAAC,IAAM,CACLA,MAAM,CAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAGH,QAAQ,CAAC,CAAG,EAAE,CACvC,CACA,MAAO,CAAAC,MAAM,CACf,CAAC,CAED,MAAO,MAAM,CAAAG,oBAAoB,CAAIJ,QAAQ,EAAK,CAChD,MAAO,EAAC,CACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,CAAC,CAED,MAAO,MAAM,CAAAK,sBAAsB,CAAIL,QAAQ,EAAK,CAClD,MAAO,CAAAM,SAAS,CAClB,CAAC,CAED,MAAO,MAAM,CAAAC,kBAAkB,CAAGA,CAACC,IAAI,CAAER,QAAQ,GAAK,CACpD,GAAI,CAAAS,OAAO,CAAGC,MAAM,CAACF,IAAI,CAAC,CAC1B,KAAM,CAAAG,OAAO,CAAGT,IAAI,CAACU,KAAK,CAACH,OAAO,CAAG,EAAE,CAAC,CACxCA,OAAO,CAAGA,OAAO,CAAG,EAAE,CAEtB;AACA,GAAI,CAAAI,UAAU,CAAGX,IAAI,CAACY,KAAK,CAACL,OAAO,CAAC,CAACM,QAAQ,CAAC,CAAC,CAC/C,GAAIf,QAAQ,EAAI,EAAE,CAAG,EAAE,CAAE,CACvBa,UAAU,CAAGJ,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC,CACjC,CAAC,IAAM,IAAIhB,QAAQ,EAAI,EAAE,CAAG,CAAC,CAAE,CAC7Ba,UAAU,CAAGJ,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC,CACjC,CAEA,GAAIL,OAAO,CAAG,CAAC,CAAE,CACf,GAAIF,OAAO,CAAG,EAAE,CAAE,CAChBI,UAAU,CAAG,GAAG,CAAGA,UAAU,CAC/B,CACA,SAAAI,MAAA,CAAUN,OAAO,MAAAM,MAAA,CAAIJ,UAAU,EACjC,CACA,MAAO,CAAAA,UAAU,CACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}