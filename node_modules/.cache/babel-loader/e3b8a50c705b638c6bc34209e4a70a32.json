{"ast":null,"code":"import { Point } from 'pixi.js';\nimport { union } from 'polygon-clipping';\nimport Flatten from '@flatten-js/core';\nimport Shape, { BorderStyle } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlBar from './controls/ControlBar';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\nconst DEFAULT_OFFSET = 50;\n/**\n * Cuboid shape\n * @class\n */\nexport default class Cuboid extends Shape {\n  /**\n   * get front face x\n   * @getter\n   */\n  get x1() {\n    return this._x1 || 0;\n  }\n\n  /**\n   * set front face x\n   * @setter\n   */\n  set x1(x1) {\n    const factor = this.w2 / this.w1;\n    if (!Number.isNaN(factor)) {\n      const offsetX = x1 - this.x1;\n      this._x1 = x1;\n      this._x2 = this.x2 + offsetX * factor;\n      this.normalize();\n    }\n  }\n\n  /**\n   * get front face y\n   * @getter\n   */\n  get y1() {\n    return this._y1 || 0;\n  }\n\n  /**\n   * set front face y\n   * @setter\n   */\n  set y1(y1) {\n    const factor = this.w2 / this.w1;\n    if (!Number.isNaN(factor)) {\n      const offsetY = y1 - this.y1;\n      this._y1 = y1;\n      this._y2 = this.y2 + offsetY * factor;\n      this.normalize();\n    }\n  }\n\n  /**\n   * get front face width\n   * @getter\n   */\n  get w1() {\n    return this._w1 || 0;\n  }\n\n  /**\n   * set front face width\n   */\n  set w1(w1) {\n    const factor = this.w2 / this.w1;\n    if (!Number.isNaN(factor)) {\n      this._w1 = w1;\n      this._w2 = w1 * factor;\n      this.normalize();\n    }\n  }\n\n  /**\n   * get front face height\n   * @getter\n   */\n  get h1() {\n    return this._h1 || 0;\n  }\n\n  /**\n   * set front face height\n   */\n  set h1(h1) {\n    const factor = this.w2 / this.w1;\n    if (!Number.isNaN(factor)) {\n      this._h1 = h1;\n      this._h2 = h1 * factor;\n      this.normalize();\n    }\n  }\n\n  /**\n   * get back face x\n   * @getter\n   */\n  get x2() {\n    return this._x2 || 0;\n  }\n\n  /**\n   * get back face y\n   * @getter\n   */\n  get y2() {\n    return this._y2 || 0;\n  }\n\n  /**\n   * get back face width\n   * @getter\n   */\n  get w2() {\n    return this._w2 || 0;\n  }\n\n  /**\n   * get back face height\n   * @getter\n   */\n  get h2() {\n    return this._h2 || 0;\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this._x1, this._y1);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point) {\n    if (this.x1 !== point.x || this.y1 !== point.y) {\n      const offsetX = point.x - this.x1;\n      const offsetY = point.y - this.y1;\n      this._x1 = precise(point.x);\n      this._y1 = precise(point.y);\n      this._x2 = precise(this.x2 + offsetX);\n      this._y2 = precise(this.y2 + offsetY);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const shapePoints = this.getPoints();\n    const left = Math.min(...shapePoints.map(p => p.x));\n    const right = Math.max(...shapePoints.map(p => p.x));\n    const top = Math.min(...shapePoints.map(p => p.y));\n    const bottom = Math.max(...shapePoints.map(p => p.y));\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  constructor(options) {\n    super(options);\n    this.shapeType = ShapeType.CUBOID;\n    /**\n     * front face x\n     * @protected\n     */\n    this._x1 = void 0;\n    /**\n     * front face y\n     * @protected\n     */\n    this._y1 = void 0;\n    /**\n     * front face width\n     * @protected\n     */\n    this._w1 = void 0;\n    /**\n     * front face height\n     * @protected\n     */\n    this._h1 = void 0;\n    /**\n     * back face x\n     * @protected\n     */\n    this._x2 = void 0;\n    /**\n     * back face y\n     * @protected\n     */\n    this._y2 = void 0;\n    /**\n     * back face width\n     * @protected\n     */\n    this._w2 = void 0;\n    /**\n     * back face height\n     * @protected\n     */\n    this._h2 = void 0;\n    const {\n      front,\n      back\n    } = options;\n    const {\n      x: x1,\n      y: y1,\n      width: w1,\n      height: h1\n    } = front || {};\n    const {\n      x: x2,\n      y: y2,\n      width: w2,\n      height: h2\n    } = back || {};\n    if (x1 !== undefined && y1 !== undefined && w1 !== undefined && h1 !== undefined) {\n      this._x1 = x1;\n      this._y1 = y1;\n      this._w1 = w1;\n      this._h1 = h1;\n      if (x2 !== undefined && y2 !== undefined && w2 !== undefined && h2 !== undefined) {\n        this._x2 = x2;\n        this._y2 = y2;\n        this._w2 = w2;\n        this._h2 = h2;\n      } else {\n        this._x2 = x1 + DEFAULT_OFFSET;\n        this._y2 = y1 - DEFAULT_OFFSET;\n        this._w2 = w1;\n        this._h2 = h2;\n      }\n      this.normalize();\n    }\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    const mouseMove = event => {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(point);\n      this._draw(localPoint);\n    };\n    const mouseUp = () => {\n      this.normalize();\n      this._finish();\n      document.removeEventListener('mousemove', mouseMove, false);\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n    document.addEventListener('mousemove', mouseMove, false);\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    // back face\n    this._drawFace(this.x2, this.y2, this.w2, this.h2);\n    // 4 sides\n    this._drawSides();\n    // front face\n    this._drawFace(this.x1, this.y1, this.w1, this.h1);\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw face by x, y, w, h\n   * @protected\n   */\n  _drawFace(x, y, w, h) {\n    // draw fill\n    this.instance.lineStyle(0);\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawRect(x, y, w, h);\n    this.instance.endFill();\n    // draw border\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this.instance.moveTo(x, y);\n    this._drawLine(x + w, y);\n    this._drawLine(x + w, y + h);\n    this._drawLine(x, y + h);\n    this._drawLine(x, y);\n    this.instance.closePath();\n  }\n\n  /**\n   * draw top & bottom & left & right sides\n   * @protected\n   */\n  _drawSides() {\n    const points = this.getPoints();\n    // draw fill\n    this.instance.lineStyle(0);\n    this.instance.beginFill(this.color, this.alpha);\n    for (let i = 0; i < 4; i += 1) {\n      const nextIndex = (i + 1) % 4;\n      this.instance.drawPolygon([points[i].x, points[i].y, points[nextIndex].x, points[nextIndex].y, points[nextIndex + 4].x, points[nextIndex + 4].y, points[i + 4].x, points[i + 4].y]);\n    }\n    this.instance.endFill();\n    // draw border\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    for (let i = 0; i < 4; i += 1) {\n      this.instance.moveTo(points[i].x, points[i].y);\n      this._drawLine(points[i + 4].x, points[i + 4].y);\n    }\n    this.instance.closePath();\n  }\n\n  /**\n   * draw line to (x, y)\n   * @private\n   * @param x\n   * @param y\n   */\n  _drawLine(x, y) {\n    if (this.borderStyle === BorderStyle.DASHED) {\n      this.instance.dashLineTo(x, y);\n    } else {\n      this.instance.lineTo(x, y);\n    }\n  }\n\n  /**\n   * draw shape by the position\n   * @protected\n   * @param point mouse position\n   */\n  _draw(point) {\n    const p = this._keepPointInBounds(point);\n    const bp = this._keepPointInBounds(new Point(p.x + DEFAULT_OFFSET, p.y - DEFAULT_OFFSET));\n    if (this._x1 === undefined || this._y1 === undefined) {\n      this._x1 = p.x;\n      this._y1 = p.y;\n      this._x2 = bp.x;\n      this._y2 = bp.y;\n    } else {\n      this._w1 = p.x - this._x1;\n      this._h1 = p.y - this._y1;\n      this._w2 = this._w1;\n      this._h2 = this._h1;\n    }\n    this._keepInBounds();\n    this.drawShape();\n  }\n\n  /**\n   * keep shap in bounds when creating & resizing\n   */\n  _keepInBounds() {\n    if (this.bounds && this._x1 !== undefined && this._y1 !== undefined && this._x2 !== undefined && this._y2 !== undefined) {\n      const backPoints = this.getPoints().slice(4);\n      const left = Math.min(...backPoints.map(i => i.x));\n      const right = Math.max(...backPoints.map(i => i.x));\n      const top = Math.min(...backPoints.map(i => i.y));\n      const bottom = Math.max(...backPoints.map(i => i.y));\n      const {\n        left: bLeft,\n        top: bTop,\n        right: bRight,\n        bottom: bBottom\n      } = this.bounds;\n      if (left < bLeft) {\n        this._x2 = this.w2 < 0 ? -this.w2 : 0;\n      } else if (right > bRight) {\n        this._x2 = this.w2 < 0 ? bRight : bRight - this.w2;\n      }\n      if (top < bTop) {\n        this._y2 = this.h2 < 0 ? -this.h2 : 0;\n      } else if (bottom > bBottom) {\n        this._y2 = this.h2 < 0 ? bBottom : bBottom - this.h2;\n      }\n    }\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n    const points = this.getPoints();\n    const edgePoints = this.getEdgePoints();\n    edgePoints.forEach((point, index) => {\n      const i = index + points.length;\n      if (this.selected) {\n        const isHorizontal = index % 2 === 0;\n        const size = isHorizontal ? this.w1 : this.h1;\n        if (!this._controls[i]) {\n          this._controls[i] = new ControlBar({\n            type: isHorizontal ? 'horizonal' : 'vertical',\n            size,\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: isHorizontal ? Cursor.NS_RESIZE : Cursor.EW_RESIZE,\n            onPositionChange: (x, y) => this._updateByBarPosition(index, x, y),\n            onFinish: () => this._finishResize()\n          });\n        }\n        this._controls[i].position = point;\n        this._controls[i].size = size;\n        this._controls[i].add();\n      } else if (this._controls[i]) {\n        this._controls[i].remove();\n      }\n    });\n    points.forEach((point, index) => {\n      if (this.selected) {\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize()\n          });\n        }\n\n        // update\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].remove();\n      }\n    });\n  }\n\n  /**\n   * update cuboid by dragging front face edge\n   * @param index edge index, top -> right -> bottom -> left\n   * @param x new position x\n   * @param y new position y\n   */\n  _updateByBarPosition(index, x, y) {\n    const factor = this.w2 / this.w1; // back & front face factor\n    if (Number.isNaN(factor)) {\n      return;\n    }\n    const position = this._keepPointInBounds(new Point(x, y));\n    const offsetX = position.x - this.x1;\n    const offsetY = position.y - this.y1;\n    switch (index) {\n      case 0:\n        this._y1 = position.y;\n        this._h1 = this.h1 - offsetY;\n        this._y2 = this.y2 + offsetY * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 1:\n        this._w1 = offsetX;\n        this._w2 = this._w1 * factor;\n        break;\n      case 2:\n        this._h1 = offsetY;\n        this._h2 = this._h1 * factor;\n        break;\n      case 3:\n        this._x1 = position.x;\n        this._w1 = this.w1 - offsetX;\n        this._x2 = this.x2 + offsetX * factor;\n        this._w2 = this._w1 * factor;\n        break;\n      default:\n    }\n    this._keepInBounds();\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * update cuboid by dragging point\n   * @protected\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  _updateByPointPosition(index, x, y) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const points = this.getPoints();\n    const offsetX = position.x - points[index].x;\n    const offsetY = position.y - points[index].y;\n    const factor = this.w2 / this.w1; // back & front face factor\n    const ratio = this.w1 / this.h1; // front face ratio\n    if (Number.isNaN(factor) || Number.isNaN(ratio)) {\n      return;\n    }\n    switch (index) {\n      case 0:\n        this._x1 = position.x;\n        this._y1 = position.y;\n        this._w1 = this.w1 - offsetX;\n        this._h1 = this.h1 - offsetY;\n        // update back face by factor\n        this._x2 = this.x2 + offsetX * factor;\n        this._y2 = this.y2 + offsetY * factor;\n        this._w2 = this._w1 * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 1:\n        this._y1 = position.y;\n        this._w1 = this.w1 + offsetX;\n        this._h1 = this.h1 - offsetY;\n        // update back face by factor\n        this._y2 = this.y2 + offsetY * factor;\n        this._w2 = this._w1 * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 2:\n        this._w1 = this.w1 + offsetX;\n        this._h1 = this.h1 + offsetY;\n        // update back face by factor\n        this._w2 = this._w1 * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 3:\n        this._x1 = position.x;\n        this._w1 = this.w1 - offsetX;\n        this._h1 = this.h1 + offsetY;\n        // update back face by factor\n        this._x2 = this.x2 + offsetX * factor;\n        this._w2 = this._w1 * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 4:\n        this._x2 = position.x;\n        this._y2 = position.y;\n        this._w2 = this.w2 - offsetX;\n        this._h2 = this._w2 / ratio;\n        // cannot reverse the point in back face\n        if (this._w2 < 0) {\n          this._x2 += this._w2;\n          this._y2 += this._h2;\n          this._w2 = 0;\n          this._h2 = 0;\n        }\n        break;\n      case 5:\n        this._y2 = position.y;\n        this._w2 = this.w2 + offsetX;\n        this._h2 = this._w2 / ratio;\n        // cannot reverse the point in back face\n        if (this._w2 < 0) {\n          this._y2 += this._h2;\n          this._w2 = 0;\n          this._h2 = 0;\n        }\n        break;\n      case 6:\n        this._w2 = this.w2 + offsetX;\n        this._h2 = this._w2 / ratio;\n        this._y2 = position.y - this._h2;\n        // cannot reverse the point in back face\n        if (this._w2 < 0) {\n          this._y2 += this._h2;\n          this._w2 = 0;\n          this._h2 = 0;\n        }\n        break;\n      case 7:\n        this._x2 = position.x;\n        this._w2 = this.w2 - offsetX;\n        this._h2 = this._w2 / ratio;\n        this._y2 = position.y - this._h2;\n        // cannot reverse the point in back face\n        if (this._w2 < 0) {\n          this._x2 += this._w2;\n          this._y2 += this._h2;\n          this._w2 = 0;\n          this._h2 = 0;\n        }\n        break;\n      default:\n    }\n    this._keepInBounds();\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * when finish resize\n   */\n  _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      front: {\n        x: this.x1,\n        y: this.y1,\n        width: this.w1,\n        height: this.h1\n      },\n      back: {\n        x: this.x2,\n        y: this.y2,\n        width: this.w2,\n        height: this.h2\n      }\n    };\n  }\n\n  /**\n   * set shape data\n   * @param data\n   */\n  setData(data) {\n    const {\n      front,\n      back\n    } = data;\n    const {\n      x: x1,\n      y: y1,\n      width: w1,\n      height: h1\n    } = front;\n    const {\n      x: x2,\n      y: y2,\n      width: w2,\n      height: h2\n    } = back;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._w1 = w1;\n    this._h1 = h1;\n    this._x2 = x2;\n    this._y2 = y2;\n    this._w2 = w2;\n    this._h2 = h2;\n    this.normalize();\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const allPoints = this.getPoints();\n    const front = allPoints.slice(0, 4);\n    const back = allPoints.slice(4);\n    const frontSide = front.map(p => [p.x, p.y]);\n    const backSide = back.map(p => [p.x, p.y]);\n    return union([frontSide], [backSide], [[frontSide[0], frontSide[1], backSide[1], backSide[0]]], [[frontSide[1], frontSide[2], backSide[2], backSide[1]]], [[frontSide[2], frontSide[3], backSide[3], backSide[2]]], [[frontSide[3], frontSide[1], backSide[1], backSide[3]]]);\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return new Point(this.x1, this.y1);\n  }\n\n  /**\n   * normalize cuboid shape, remove it if necessary\n   */\n  normalize() {\n    if (this._x1 === undefined || this._y1 === undefined || !this._w1 || !this._h1 || this._x2 === undefined || this._y2 === undefined || this._w2 === undefined || this._h2 === undefined) {\n      this._remove();\n      return;\n    }\n    if (this._w1 < 0) {\n      this._x1 += this._w1;\n      this._w1 = Math.abs(this._w1);\n    }\n    if (this._h1 < 0) {\n      this._y1 += this._h1;\n      this._h1 = Math.abs(this._h1);\n    }\n    if (this._w2 < 0) {\n      this._x2 += this._w2;\n      this._w2 = Math.abs(this._w2);\n    }\n    if (this._h2 < 0) {\n      this._y2 += this._h2;\n      this._h2 = Math.abs(this._h2);\n    }\n    this._x1 = precise(this._x1);\n    this._y1 = precise(this._y1);\n    this._w1 = precise(this._w1);\n    this._h1 = precise(this._h1);\n    this._x2 = precise(this._x2);\n    this._y2 = precise(this._y2);\n    this._w2 = precise(this._w2);\n    this._h2 = precise(this._h2);\n    this.drawShape();\n  }\n\n  /**\n   * 8 pointss\n   * @returns\n   */\n  getPoints() {\n    return [\n    // front points\n    {\n      x: this.x1,\n      y: this.y1\n    }, {\n      x: this.x1 + this.w1,\n      y: this.y1\n    }, {\n      x: this.x1 + this.w1,\n      y: this.y1 + this.h1\n    }, {\n      x: this.x1,\n      y: this.y1 + this.h1\n    },\n    // back points\n    {\n      x: this.x2,\n      y: this.y2\n    }, {\n      x: this.x2 + this.w2,\n      y: this.y2\n    }, {\n      x: this.x2 + this.w2,\n      y: this.y2 + this.h2\n    }, {\n      x: this.x2,\n      y: this.y2 + this.h2\n    }];\n  }\n\n  /**\n   * get edge points\n   */\n  getEdgePoints() {\n    const points = this.getPoints();\n    return points.slice(0, 4).map((point, index) => {\n      const nextIndex = (index + 1) % 4;\n      const nextPoint = points[nextIndex];\n      return {\n        x: (point.x + nextPoint.x) / 2,\n        y: (point.y + nextPoint.y) / 2\n      };\n    });\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const {\n      x,\n      y\n    } = point;\n    const {\n      left,\n      right,\n      top,\n      bottom\n    } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n    const [p1, p2, p3, p4, p5, p6, p7, p8] = this.getPoints();\n    // points\n    let nearestPoint;\n    let d;\n    [p1, p2, p3, p4, p5, p6, p7, p8].forEach(p => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    const lines = [[p1, p2], [p2, p3], [p3, p4], [p4, p1], [p5, p6], [p6, p7], [p7, p8], [p8, p5], [p1, p5], [p2, p6], [p3, p7], [p4, p8]];\n    for (let i = 0; i < lines.length; i += 1) {\n      const startPoint = new Flatten.Point(lines[i][0].x, lines[i][0].y);\n      const endPoint = new Flatten.Point(lines[i][1].x, lines[i][1].y);\n      const line = new Flatten.Segment(startPoint, endPoint);\n      const [distance, segment] = line.distanceTo(location);\n      if (distance < t) {\n        const {\n          ps,\n          pe\n        } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["Point","union","Flatten","Shape","BorderStyle","ShapeType","ControlPoint","ControlBar","precise","Cursor","DEFAULT_OFFSET","Cuboid","x1","_x1","factor","w2","w1","Number","isNaN","offsetX","_x2","x2","normalize","y1","_y1","offsetY","_y2","y2","_w1","_w2","h1","_h1","_h2","h2","position","point","x","y","drawShape","shapeBounds","shapePoints","getPoints","left","Math","min","map","p","right","max","top","bottom","constructor","options","shapeType","CUBOID","front","back","width","height","undefined","create","mouseMove","event","_mapScreenToStagePosition","clientX","clientY","localPoint","_mapStageToLocalPosition","_draw","mouseUp","_finish","document","removeEventListener","addEventListener","_finished","instance","clear","_drawFace","_drawSides","drawShapeLabel","attachControlPoints","w","h","lineStyle","beginFill","color","alpha","drawRect","endFill","borderWidth","scale","displayBorderColor","borderAlpha","moveTo","_drawLine","closePath","points","i","nextIndex","drawPolygon","borderStyle","DASHED","dashLineTo","lineTo","_keepPointInBounds","bp","_keepInBounds","bounds","backPoints","slice","bLeft","bTop","bRight","bBottom","editable","removeControls","edgePoints","getEdgePoints","forEach","index","length","selected","isHorizontal","size","_controls","type","container","controlsContainer","selectedColor","cursor","NS_RESIZE","EW_RESIZE","onPositionChange","_updateByBarPosition","onFinish","_finishResize","add","remove","NWSE_RESIZE","NESW_RESIZE","_updateByPointPosition","_resizing","ratio","resizing","_changed","getData","setData","data","getAreaAsGeoJSON","allPoints","frontSide","backSide","getLabelPosition","_remove","abs","nextPoint","snapToPoint","tolerance","t","p1","p2","p3","p4","p5","p6","p7","p8","nearestPoint","d","pointDistance","sqrt","location","lines","startPoint","endPoint","line","Segment","distance","segment","distanceTo","ps","pe","edgePoint","equalTo"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/Cuboid.ts"],"sourcesContent":["import { Point } from 'pixi.js';\nimport { Pair, union } from 'polygon-clipping';\nimport Flatten from '@flatten-js/core';\nimport Shape, { ShapeOptions, BorderStyle } from './Shape';\nimport { ShapeType } from './types';\nimport ControlPoint from './controls/ControlPoint';\nimport ControlBar from './controls/ControlBar';\nimport { precise } from './utils';\nimport Cursor from '../Cursor';\n\nconst DEFAULT_OFFSET = 50;\n\ninterface Face {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface CuboidData {\n  front: Face;\n  back: Face;\n}\n\nexport interface CuboidOptions extends ShapeOptions {\n  front?: Face;\n  back?: Face;\n}\n\n/**\n * Cuboid shape\n * @class\n */\nexport default class Cuboid extends Shape<CuboidData> {\n  shapeType = ShapeType.CUBOID;\n\n  /**\n   * front face x\n   * @protected\n   */\n  protected _x1: number | undefined;\n\n  /**\n   * front face y\n   * @protected\n   */\n  protected _y1: number | undefined;\n\n  /**\n   * front face width\n   * @protected\n   */\n  protected _w1: number | undefined;\n\n  /**\n   * front face height\n   * @protected\n   */\n  protected _h1: number | undefined;\n\n  /**\n   * back face x\n   * @protected\n   */\n  protected _x2: number | undefined;\n\n  /**\n   * back face y\n   * @protected\n   */\n  protected _y2: number | undefined;\n\n  /**\n   * back face width\n   * @protected\n   */\n  protected _w2: number | undefined;\n\n  /**\n   * back face height\n   * @protected\n   */\n  protected _h2: number | undefined;\n\n  /**\n   * get front face x\n   * @getter\n   */\n  get x1() {\n    return this._x1 || 0;\n  }\n\n  /**\n   * set front face x\n   * @setter\n   */\n  set x1(x1: number) {\n    const factor = this.w2 / this.w1;\n    if (!Number.isNaN(factor)) {\n      const offsetX = x1 - this.x1;\n      this._x1 = x1;\n      this._x2 = this.x2 + offsetX * factor;\n      this.normalize();\n    }\n  }\n\n  /**\n   * get front face y\n   * @getter\n   */\n  get y1() {\n    return this._y1 || 0;\n  }\n\n  /**\n   * set front face y\n   * @setter\n   */\n  set y1(y1: number) {\n    const factor = this.w2 / this.w1;\n    if (!Number.isNaN(factor)) {\n      const offsetY = y1 - this.y1;\n      this._y1 = y1;\n      this._y2 = this.y2 + offsetY * factor;\n      this.normalize();\n    }\n  }\n\n  /**\n   * get front face width\n   * @getter\n   */\n  get w1() {\n    return this._w1 || 0;\n  }\n\n  /**\n   * set front face width\n   */\n  set w1(w1: number) {\n    const factor = this.w2 / this.w1;\n    if (!Number.isNaN(factor)) {\n      this._w1 = w1;\n      this._w2 = w1 * factor;\n      this.normalize();\n    }\n  }\n\n  /**\n   * get front face height\n   * @getter\n   */\n  get h1() {\n    return this._h1 || 0;\n  }\n\n  /**\n   * set front face height\n   */\n  set h1(h1: number) {\n    const factor = this.w2 / this.w1;\n    if (!Number.isNaN(factor)) {\n      this._h1 = h1;\n      this._h2 = h1 * factor;\n      this.normalize();\n    }\n  }\n\n  /**\n   * get back face x\n   * @getter\n   */\n  get x2() {\n    return this._x2 || 0;\n  }\n\n  /**\n   * get back face y\n   * @getter\n   */\n  get y2() {\n    return this._y2 || 0;\n  }\n\n  /**\n   * get back face width\n   * @getter\n   */\n  get w2() {\n    return this._w2 || 0;\n  }\n\n  /**\n   * get back face height\n   * @getter\n   */\n  get h2() {\n    return this._h2 || 0;\n  }\n\n  /**\n   * get position\n   * @getter\n   */\n  get position() {\n    return new Point(this._x1, this._y1);\n  }\n\n  /**\n   * set position\n   * @setter\n   */\n  set position(point: Point) {\n    if (this.x1 !== point.x || this.y1 !== point.y) {\n      const offsetX = point.x - this.x1;\n      const offsetY = point.y - this.y1;\n      this._x1 = precise(point.x);\n      this._y1 = precise(point.y);\n      this._x2 = precise(this.x2 + offsetX);\n      this._y2 = precise(this.y2 + offsetY);\n      this.drawShape();\n    }\n  }\n\n  /**\n   * shape bounds\n   * @getter\n   */\n  get shapeBounds() {\n    const shapePoints = this.getPoints();\n    const left = Math.min(...shapePoints.map((p) => p.x));\n    const right = Math.max(...shapePoints.map((p) => p.x));\n    const top = Math.min(...shapePoints.map((p) => p.y));\n    const bottom = Math.max(...shapePoints.map((p) => p.y));\n    return { left, top, right, bottom };\n  }\n\n  constructor(options: CuboidOptions) {\n    super(options);\n\n    const { front, back } = options;\n    const { x: x1, y: y1, width: w1, height: h1 } = front || {};\n    const { x: x2, y: y2, width: w2, height: h2 } = back || {};\n    if (x1 !== undefined && y1 !== undefined && w1 !== undefined && h1 !== undefined) {\n      this._x1 = x1;\n      this._y1 = y1;\n      this._w1 = w1;\n      this._h1 = h1;\n      if (x2 !== undefined && y2 !== undefined && w2 !== undefined && h2 !== undefined) {\n        this._x2 = x2;\n        this._y2 = y2;\n        this._w2 = w2;\n        this._h2 = h2;\n      } else {\n        this._x2 = x1 + DEFAULT_OFFSET;\n        this._y2 = y1 - DEFAULT_OFFSET;\n        this._w2 = w1;\n        this._h2 = h2;\n      }\n      this.normalize();\n    }\n  }\n\n  /**\n   * drag to create\n   */\n  create() {\n    const mouseMove = (event: MouseEvent) => {\n      const point = this._mapScreenToStagePosition(event.clientX, event.clientY);\n      const localPoint = this._mapStageToLocalPosition(point);\n      this._draw(localPoint);\n    };\n    const mouseUp = () => {\n      this.normalize();\n      this._finish();\n\n      document.removeEventListener('mousemove', mouseMove, false);\n      document.removeEventListener('mouseup', mouseUp, false);\n    };\n\n    document.addEventListener('mousemove', mouseMove, false);\n    document.addEventListener('mouseup', mouseUp, false);\n    this._finished = false;\n  }\n\n  /**\n   * draw shape\n   */\n  drawShape() {\n    this.instance.clear();\n    // back face\n    this._drawFace(this.x2, this.y2, this.w2, this.h2);\n    // 4 sides\n    this._drawSides();\n    // front face\n    this._drawFace(this.x1, this.y1, this.w1, this.h1);\n    if (this._finished) {\n      this.drawShapeLabel();\n      this.attachControlPoints();\n    }\n  }\n\n  /**\n   * draw face by x, y, w, h\n   * @protected\n   */\n  protected _drawFace(x: number, y: number, w: number, h: number) {\n    // draw fill\n    this.instance.lineStyle(0);\n    this.instance.beginFill(this.color, this.alpha);\n    this.instance.drawRect(x, y, w, h);\n    this.instance.endFill();\n    // draw border\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    this.instance.moveTo(x, y);\n    this._drawLine(x + w, y);\n    this._drawLine(x + w, y + h);\n    this._drawLine(x, y + h);\n    this._drawLine(x, y);\n    this.instance.closePath();\n  }\n\n  /**\n   * draw top & bottom & left & right sides\n   * @protected\n   */\n  protected _drawSides() {\n    const points = this.getPoints();\n    // draw fill\n    this.instance.lineStyle(0);\n    this.instance.beginFill(this.color, this.alpha);\n    for (let i = 0; i < 4; i += 1) {\n      const nextIndex = (i + 1) % 4;\n      this.instance.drawPolygon([\n        points[i].x, points[i].y, points[nextIndex].x, points[nextIndex].y,\n        points[nextIndex + 4].x, points[nextIndex + 4].y, points[i + 4].x, points[i + 4].y,\n      ]);\n    }\n    this.instance.endFill();\n    // draw border\n    this.instance.lineStyle(this.borderWidth / this.scale, this.displayBorderColor, this.borderAlpha);\n    for (let i = 0; i < 4; i += 1) {\n      this.instance.moveTo(points[i].x, points[i].y);\n      this._drawLine(points[i + 4].x, points[i + 4].y);\n    }\n    this.instance.closePath();\n  }\n\n  /**\n   * draw line to (x, y)\n   * @private\n   * @param x\n   * @param y\n   */\n  private _drawLine(x: number, y: number) {\n    if (this.borderStyle === BorderStyle.DASHED) {\n      this.instance.dashLineTo(x, y);\n    } else {\n      this.instance.lineTo(x, y);\n    }\n  }\n\n  /**\n   * draw shape by the position\n   * @protected\n   * @param point mouse position\n   */\n  protected _draw(point: Point) {\n    const p = this._keepPointInBounds(point);\n    const bp = this._keepPointInBounds(new Point(p.x + DEFAULT_OFFSET, p.y - DEFAULT_OFFSET));\n    if (this._x1 === undefined || this._y1 === undefined) {\n      this._x1 = p.x;\n      this._y1 = p.y;\n      this._x2 = bp.x;\n      this._y2 = bp.y;\n    } else {\n      this._w1 = p.x - this._x1;\n      this._h1 = p.y - this._y1;\n      this._w2 = this._w1;\n      this._h2 = this._h1;\n    }\n    this._keepInBounds();\n    this.drawShape();\n  }\n\n  /**\n   * keep shap in bounds when creating & resizing\n   */\n  private _keepInBounds() {\n    if (this.bounds && this._x1 !== undefined && this._y1 !== undefined && this._x2 !== undefined && this._y2 !== undefined) {\n      const backPoints = this.getPoints().slice(4);\n      const left = Math.min(...backPoints.map((i) => i.x));\n      const right = Math.max(...backPoints.map((i) => i.x));\n      const top = Math.min(...backPoints.map((i) => i.y));\n      const bottom = Math.max(...backPoints.map((i) => i.y));\n      const { left: bLeft, top: bTop, right: bRight, bottom: bBottom } = this.bounds;\n      if (left < bLeft) {\n        this._x2 = this.w2 < 0 ? -this.w2 : 0;\n      } else if (right > bRight) {\n        this._x2 = this.w2 < 0 ? bRight : bRight - this.w2;\n      }\n      if (top < bTop) {\n        this._y2 = this.h2 < 0 ? -this.h2 : 0;\n      } else if (bottom > bBottom) {\n        this._y2 = this.h2 < 0 ? bBottom : bBottom - this.h2;\n      }\n    }\n  }\n\n  /**\n   * attach control points\n   */\n  attachControlPoints() {\n    if (!this.editable) {\n      this.removeControls();\n      return;\n    }\n\n    const points = this.getPoints();\n    const edgePoints = this.getEdgePoints();\n\n    edgePoints.forEach((point, index) => {\n      const i = index + points.length;\n      if (this.selected) {\n        const isHorizontal = index % 2 === 0;\n        const size = isHorizontal ? this.w1 : this.h1;\n        if (!this._controls[i]) {\n          this._controls[i] = new ControlBar({\n            type: isHorizontal ? 'horizonal' : 'vertical',\n            size,\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: isHorizontal ? Cursor.NS_RESIZE : Cursor.EW_RESIZE,\n            onPositionChange: (x, y) => this._updateByBarPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n          });\n        }\n\n        this._controls[i].position = point;\n        this._controls[i].size = size;\n        this._controls[i].add();\n      } else if (this._controls[i]) {\n        this._controls[i].remove();\n      }\n    });\n\n    points.forEach((point, index) => {\n      if (this.selected) {\n        if (!this._controls[index]) {\n          this._controls[index] = new ControlPoint({\n            position: point,\n            container: this.controlsContainer,\n            scale: this.scale,\n            color: this.selectedColor,\n            cursor: index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE,\n            onPositionChange: (x, y) => this._updateByPointPosition(index, x, y),\n            onFinish: () => this._finishResize(),\n          });\n        }\n\n        // update\n        this._controls[index].position = point;\n        this._controls[index].add();\n      } else if (this._controls[index]) {\n        // remove\n        this._controls[index].remove();\n      }\n    });\n  }\n\n  /**\n   * update cuboid by dragging front face edge\n   * @param index edge index, top -> right -> bottom -> left\n   * @param x new position x\n   * @param y new position y\n   */\n  protected _updateByBarPosition(index: number, x: number, y: number) {\n    const factor = this.w2 / this.w1; // back & front face factor\n    if (Number.isNaN(factor)) {\n      return;\n    }\n    const position = this._keepPointInBounds(new Point(x, y));\n    const offsetX = position.x - this.x1;\n    const offsetY = position.y - this.y1;\n    switch (index) {\n      case 0:\n        this._y1 = position.y;\n        this._h1 = this.h1 - offsetY;\n        this._y2 = this.y2 + offsetY * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 1:\n        this._w1 = offsetX;\n        this._w2 = this._w1 * factor;\n        break;\n      case 2:\n        this._h1 = offsetY;\n        this._h2 = this._h1 * factor;\n        break;\n      case 3:\n        this._x1 = position.x;\n        this._w1 = this.w1 - offsetX;\n        this._x2 = this.x2 + offsetX * factor;\n        this._w2 = this._w1 * factor;\n        break;\n      default:\n    }\n    this._keepInBounds();\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * update cuboid by dragging point\n   * @protected\n   * @param index point index\n   * @param x new position x\n   * @param y new position y\n   */\n  protected _updateByPointPosition(index: number, x: number, y: number) {\n    const position = this._keepPointInBounds(new Point(x, y));\n    const points = this.getPoints();\n    const offsetX = position.x - points[index].x;\n    const offsetY = position.y - points[index].y;\n    const factor = this.w2 / this.w1; // back & front face factor\n    const ratio = this.w1 / this.h1; // front face ratio\n    if (Number.isNaN(factor) || Number.isNaN(ratio)) {\n      return;\n    }\n    switch (index) {\n      case 0:\n        this._x1 = position.x;\n        this._y1 = position.y;\n        this._w1 = this.w1 - offsetX;\n        this._h1 = this.h1 - offsetY;\n        // update back face by factor\n        this._x2 = this.x2 + offsetX * factor;\n        this._y2 = this.y2 + offsetY * factor;\n        this._w2 = this._w1 * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 1:\n        this._y1 = position.y;\n        this._w1 = this.w1 + offsetX;\n        this._h1 = this.h1 - offsetY;\n        // update back face by factor\n        this._y2 = this.y2 + offsetY * factor;\n        this._w2 = this._w1 * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 2:\n        this._w1 = this.w1 + offsetX;\n        this._h1 = this.h1 + offsetY;\n        // update back face by factor\n        this._w2 = this._w1 * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 3:\n        this._x1 = position.x;\n        this._w1 = this.w1 - offsetX;\n        this._h1 = this.h1 + offsetY;\n        // update back face by factor\n        this._x2 = this.x2 + offsetX * factor;\n        this._w2 = this._w1 * factor;\n        this._h2 = this._h1 * factor;\n        break;\n      case 4:\n        this._x2 = position.x;\n        this._y2 = position.y;\n        this._w2 = this.w2 - offsetX;\n        this._h2 = this._w2 / ratio;\n        // cannot reverse the point in back face\n        if (this._w2 < 0) {\n          this._x2 += this._w2;\n          this._y2 += this._h2;\n          this._w2 = 0;\n          this._h2 = 0;\n        }\n        break;\n      case 5:\n        this._y2 = position.y;\n        this._w2 = this.w2 + offsetX;\n        this._h2 = this._w2 / ratio;\n        // cannot reverse the point in back face\n        if (this._w2 < 0) {\n          this._y2 += this._h2;\n          this._w2 = 0;\n          this._h2 = 0;\n        }\n        break;\n      case 6:\n        this._w2 = this.w2 + offsetX;\n        this._h2 = this._w2 / ratio;\n        this._y2 = position.y - this._h2;\n        // cannot reverse the point in back face\n        if (this._w2 < 0) {\n          this._y2 += this._h2;\n          this._w2 = 0;\n          this._h2 = 0;\n        }\n        break;\n      case 7:\n        this._x2 = position.x;\n        this._w2 = this.w2 - offsetX;\n        this._h2 = this._w2 / ratio;\n        this._y2 = position.y - this._h2;\n        // cannot reverse the point in back face\n        if (this._w2 < 0) {\n          this._x2 += this._w2;\n          this._y2 += this._h2;\n          this._w2 = 0;\n          this._h2 = 0;\n        }\n        break;\n      default:\n    }\n    this._keepInBounds();\n    this.drawShape();\n    this._resizing();\n  }\n\n  /**\n   * when finish resize\n   */\n  private _finishResize() {\n    this.resizing = false;\n    this.normalize();\n    this._changed();\n  }\n\n  /**\n   * get shape data\n   */\n  getData() {\n    return {\n      front: { x: this.x1, y: this.y1, width: this.w1, height: this.h1 },\n      back: { x: this.x2, y: this.y2, width: this.w2, height: this.h2 },\n    };\n  }\n\n  /**\n   * set shape data\n   * @param data\n   */\n  setData(data: CuboidData) {\n    const { front, back } = data;\n    const { x: x1, y: y1, width: w1, height: h1 } = front;\n    const { x: x2, y: y2, width: w2, height: h2 } = back;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._w1 = w1;\n    this._h1 = h1;\n    this._x2 = x2;\n    this._y2 = y2;\n    this._w2 = w2;\n    this._h2 = h2;\n    this.normalize();\n  }\n\n  /**\n   * get geo json\n   */\n  getAreaAsGeoJSON() {\n    const allPoints = this.getPoints();\n    const front = allPoints.slice(0, 4);\n    const back = allPoints.slice(4);\n    const frontSide: Pair[] = front.map((p) => [p.x, p.y]);\n    const backSide: Pair[] = back.map((p) => [p.x, p.y]);\n    return union(\n      [frontSide],\n      [backSide],\n      [[frontSide[0], frontSide[1], backSide[1], backSide[0]]],\n      [[frontSide[1], frontSide[2], backSide[2], backSide[1]]],\n      [[frontSide[2], frontSide[3], backSide[3], backSide[2]]],\n      [[frontSide[3], frontSide[1], backSide[1], backSide[3]]],\n    );\n  }\n\n  /**\n   * get label position\n   */\n  getLabelPosition() {\n    return new Point(this.x1, this.y1);\n  }\n\n  /**\n   * normalize cuboid shape, remove it if necessary\n   */\n  normalize() {\n    if (\n      this._x1 === undefined || this._y1 === undefined || !this._w1 || !this._h1 ||\n      this._x2 === undefined || this._y2 === undefined || this._w2 === undefined || this._h2 === undefined\n    ) {\n      this._remove();\n      return;\n    }\n\n    if (this._w1 < 0) {\n      this._x1 += this._w1;\n      this._w1 = Math.abs(this._w1);\n    }\n    if (this._h1 < 0) {\n      this._y1 += this._h1;\n      this._h1 = Math.abs(this._h1);\n    }\n    if (this._w2 < 0) {\n      this._x2 += this._w2;\n      this._w2 = Math.abs(this._w2);\n    }\n    if (this._h2 < 0) {\n      this._y2 += this._h2;\n      this._h2 = Math.abs(this._h2);\n    }\n\n    this._x1 = precise(this._x1);\n    this._y1 = precise(this._y1);\n    this._w1 = precise(this._w1);\n    this._h1 = precise(this._h1);\n    this._x2 = precise(this._x2);\n    this._y2 = precise(this._y2);\n    this._w2 = precise(this._w2);\n    this._h2 = precise(this._h2);\n\n    this.drawShape();\n  }\n\n  /**\n   * 8 pointss\n   * @returns\n   */\n  getPoints() {\n    return [\n      // front points\n      { x: this.x1, y: this.y1 },\n      { x: this.x1 + this.w1, y: this.y1 },\n      { x: this.x1 + this.w1, y: this.y1 + this.h1 },\n      { x: this.x1, y: this.y1 + this.h1 },\n      // back points\n      { x: this.x2, y: this.y2 },\n      { x: this.x2 + this.w2, y: this.y2 },\n      { x: this.x2 + this.w2, y: this.y2 + this.h2 },\n      { x: this.x2, y: this.y2 + this.h2 },\n    ];\n  }\n\n  /**\n   * get edge points\n   */\n  getEdgePoints() {\n    const points = this.getPoints();\n    return points.slice(0, 4).map((point, index) => {\n      const nextIndex = (index + 1) % 4;\n      const nextPoint = points[nextIndex];\n      return {\n        x: (point.x + nextPoint.x) / 2,\n        y: (point.y + nextPoint.y) / 2,\n      };\n    });\n  }\n\n  /**\n   * snap to point\n   * @param point\n   * @param tolerance\n   */\n  snapToPoint(point: Point, tolerance = 8) {\n    const t = tolerance / this.scale;\n\n    // bbox\n    const { x, y } = point;\n    const { left, right, top, bottom } = this.shapeBounds;\n    if (x < left - t || x > right + t || y < top - t || y > bottom + t) {\n      return null;\n    }\n\n    const [p1, p2, p3, p4, p5, p6, p7, p8] = this.getPoints();\n    // points\n    let nearestPoint: { x: number; y: number; } | undefined;\n    let d: number | undefined;\n    [p1, p2, p3, p4, p5, p6, p7, p8].forEach((p) => {\n      const pointDistance = Math.sqrt((p.x - x) ** 2 + (p.y - y) ** 2);\n      if (pointDistance < t && (d === undefined || pointDistance < d)) {\n        d = pointDistance;\n        nearestPoint = p;\n      }\n    });\n    if (nearestPoint) {\n      return new Point(nearestPoint.x, nearestPoint.y);\n    }\n\n    // edges\n    const location = new Flatten.Point(x, y);\n    const lines = [\n      [p1, p2],\n      [p2, p3],\n      [p3, p4],\n      [p4, p1],\n      [p5, p6],\n      [p6, p7],\n      [p7, p8],\n      [p8, p5],\n      [p1, p5],\n      [p2, p6],\n      [p3, p7],\n      [p4, p8],\n    ];\n    for (let i = 0; i < lines.length; i += 1) {\n      const startPoint = new Flatten.Point(lines[i][0].x, lines[i][0].y);\n      const endPoint = new Flatten.Point(lines[i][1].x, lines[i][1].y);\n      const line = new Flatten.Segment(startPoint, endPoint);\n      const [distance, segment] = line.distanceTo(location);\n      if (distance < t) {\n        const { ps, pe } = segment;\n        const edgePoint = ps.equalTo(location) ? pe : ps;\n        return new Point(edgePoint.x, edgePoint.y);\n      }\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}