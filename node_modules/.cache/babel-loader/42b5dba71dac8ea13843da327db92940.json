{"ast":null,"code":"import { Rectangle } from 'pixi.js';\nimport Control from './Control';\n/**\n * Control Point\n * @class\n */\nexport default class ControlBar extends Control {\n  /**\n   * get control bar type\n   * @getter\n   */\n  get type() {\n    return this._type;\n  }\n  constructor(options) {\n    super(options);\n    /**\n     * control bar type\n     * @private\n     */\n    this._type = void 0;\n    this._type = options.type;\n  }\n\n  /**\n   * draw bar control\n   */\n  drawControl() {\n    this.control.clear();\n    this._updateHitArea();\n  }\n\n  /**\n   * move bar position\n   * @param position\n   */\n  move(position) {\n    if (this._type === 'horizonal') {\n      this.control.y = position.y;\n    } else {\n      this.control.x = position.x;\n    }\n  }\n\n  /**\n   * draw hit area\n   * @private\n   */\n  _updateHitArea() {\n    const areaSize = 8 / this.scale;\n    if (this._type === 'horizonal') {\n      this.control.hitArea = new Rectangle(-this.size / 2, -areaSize / 2, this.size, areaSize);\n    } else {\n      this.control.hitArea = new Rectangle(-areaSize / 2, -this.size / 2, areaSize, this.size);\n    }\n  }\n}","map":{"version":3,"names":["Rectangle","Control","ControlBar","type","_type","constructor","options","drawControl","control","clear","_updateHitArea","move","position","y","x","areaSize","scale","hitArea","size"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/shapes/controls/ControlBar.ts"],"sourcesContent":["import { Point, Rectangle } from 'pixi.js';\nimport Control, { ControlOptions } from './Control';\n\nexport type ControlBarType = 'horizonal' | 'vertical';\n\ninterface ControlBarOptions extends ControlOptions {\n  type: ControlBarType;\n}\n\n/**\n * Control Point\n * @class\n */\nexport default class ControlBar extends Control {\n  /**\n   * control bar type\n   * @private\n   */\n  private _type: ControlBarType;\n\n  /**\n   * get control bar type\n   * @getter\n   */\n  get type() {\n    return this._type;\n  }\n\n  constructor(options: ControlBarOptions) {\n    super(options);\n    this._type = options.type;\n  }\n\n  /**\n   * draw bar control\n   */\n  drawControl() {\n    this.control.clear();\n    this._updateHitArea();\n  }\n\n  /**\n   * move bar position\n   * @param position\n   */\n  move(position: Point) {\n    if (this._type === 'horizonal') {\n      this.control.y = position.y;\n    } else {\n      this.control.x = position.x;\n    }\n  }\n\n  /**\n   * draw hit area\n   * @private\n   */\n  private _updateHitArea() {\n    const areaSize = 8 / this.scale;\n    if (this._type === 'horizonal') {\n      this.control.hitArea = new Rectangle(-this.size / 2, -areaSize / 2, this.size, areaSize);\n    } else {\n      this.control.hitArea = new Rectangle(-areaSize / 2, -this.size / 2, areaSize, this.size);\n    }\n  }\n}\n"],"mappings":"AAAA,SAAgBA,SAAS,QAAQ,SAAS;AAC1C,OAAOC,OAAO,MAA0B,WAAW;AAQnD;AACA;AACA;AACA;AACA,eAAe,MAAMC,UAAU,SAASD,OAAO,CAAC;EAO9C;AACF;AACA;AACA;EACE,IAAIE,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACC,KAAK;EACnB;EAEAC,WAAWA,CAACC,OAA0B,EAAE;IACtC,KAAK,CAACA,OAAO,CAAC;IAfhB;AACF;AACA;AACA;IAHE,KAIQF,KAAK;IAYX,IAAI,CAACA,KAAK,GAAGE,OAAO,CAACH,IAAI;EAC3B;;EAEA;AACF;AACA;EACEI,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC;IACpB,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB;;EAEA;AACF;AACA;AACA;EACEC,IAAIA,CAACC,QAAe,EAAE;IACpB,IAAI,IAAI,CAACR,KAAK,KAAK,WAAW,EAAE;MAC9B,IAAI,CAACI,OAAO,CAACK,CAAC,GAAGD,QAAQ,CAACC,CAAC;IAC7B,CAAC,MAAM;MACL,IAAI,CAACL,OAAO,CAACM,CAAC,GAAGF,QAAQ,CAACE,CAAC;IAC7B;EACF;;EAEA;AACF;AACA;AACA;EACUJ,cAAcA,CAAA,EAAG;IACvB,MAAMK,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACC,KAAK;IAC/B,IAAI,IAAI,CAACZ,KAAK,KAAK,WAAW,EAAE;MAC9B,IAAI,CAACI,OAAO,CAACS,OAAO,GAAG,IAAIjB,SAAS,CAAC,CAAC,IAAI,CAACkB,IAAI,GAAG,CAAC,EAAE,CAACH,QAAQ,GAAG,CAAC,EAAE,IAAI,CAACG,IAAI,EAAEH,QAAQ,CAAC;IAC1F,CAAC,MAAM;MACL,IAAI,CAACP,OAAO,CAACS,OAAO,GAAG,IAAIjB,SAAS,CAAC,CAACe,QAAQ,GAAG,CAAC,EAAE,CAAC,IAAI,CAACG,IAAI,GAAG,CAAC,EAAEH,QAAQ,EAAE,IAAI,CAACG,IAAI,CAAC;IAC1F;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}