{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/attributes/AttributesModal.tsx\";\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { makeObservable, observable, action, reaction } from 'mobx';\nimport { Button, ConfigProvider, Spin } from 'antd';\nimport EasyForm from '@appen-china/easy-form';\nimport { cloneDeep } from 'lodash';\nimport { APIForwardType } from 'src/libs/JobProxy';\nimport Modal from '../../../common/modal/Modal';\nimport InstanceItemAttributesForm from './InstanceItemAttributesForm';\nimport FramesApply from './FramesApply';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { getAttributesByModelData, getSnapshot, setInitialValues } from '../../utils';\nimport { CVModel, TrafficSignModelMappingType, ViewMode } from '../../types';\nimport { isTextarea } from '../../../../utils';\nimport './AttributesModal.scss';\nconst trafficSignRecognition = base64Str => {\n  // FIXME: temp use timestamp\n  const imageId = `${Date.now()}`;\n  const fetchPromise = new Promise((resolve, reject) => {\n    var _store$jobProxy;\n    (_store$jobProxy = store.jobProxy) === null || _store$jobProxy === void 0 ? void 0 : _store$jobProxy.forwardAPI(APIForwardType.TRAFFIC_SIGN_RECOGNIZE, JSON.stringify({\n      imageId,\n      inputType: 'base64',\n      image: base64Str || ''\n    })).then(res => {\n      if (res.status === 200) {\n        return res;\n      }\n      throw new Error('Request failed.');\n    }).then(data => {\n      // success\n      const {\n        category,\n        main_class,\n        sub_class\n      } = data.data;\n      resolve({\n        category,\n        main_class,\n        sub_class\n      });\n      // fail\n      throw new Error(data.message);\n    }).catch(e => reject(e));\n  });\n  const timeoutPromise = new Promise((_, reject) => {\n    setTimeout(() => reject(), 8000);\n  });\n  return Promise.race([fetchPromise, timeoutPromise]);\n};\nclass AttributesModal extends React.Component {\n  constructor(props) {\n    super(props);\n    /**\n     * form container\n     */\n    this.ref = React.createRef();\n    /**\n     * forms count that to be submitted\n     */\n    this.submitCount = 0;\n    /**\n     * instance state\n     */\n    this.instanceState = void 0;\n    /**\n     * items state\n     */\n    this.itemStates = [];\n    /**\n     * reaction disposer\n     */\n    this.reactionDisposer = void 0;\n    this.instanceFields = [];\n    this.dynamicInstanceFields = [];\n    this.applyType = void 0;\n    this.applyStart = void 0;\n    this.applyEnd = void 0;\n    this.appliedFrames = [];\n    this.dynamicInstanceFieldFramesMap = {};\n    this.modelSyncing = false;\n    this.modelData = null;\n    this.snapshotUrl = null;\n    this.getSnapshotForInstance = async () => {\n      const {\n        selectedInstanceItems\n      } = store.instance;\n      if (selectedInstanceItems.length === 1) {\n        const selectedInstanceItem = selectedInstanceItems[0];\n        const {\n          tools\n        } = selectedInstanceItem.categoryItemRef;\n        const needSnapshot = tools && tools.length > 0 ? tools[0].snapshot : false;\n        if (needSnapshot) {\n          var _selectedInstanceItem;\n          const {\n            currentCamera,\n            currentFrame\n          } = store.frame;\n          const frameData = (_selectedInstanceItem = selectedInstanceItem.cameras[currentCamera]) === null || _selectedInstanceItem === void 0 ? void 0 : _selectedInstanceItem.frames[currentFrame];\n          this.snapshotUrl = await getSnapshot(store.proxyResource(store.frame.getImageUrl(currentCamera, currentFrame)), store.frame.currentFrameRotation, frameData === null || frameData === void 0 ? void 0 : frameData.shape, store.frame.getPDFDocument(currentCamera), currentFrame + 1);\n        }\n      }\n    };\n    this.syncModel = async () => {\n      const selectedInstanceItem = store.instance.selectedInstanceItems[0];\n      if (selectedInstanceItem) {\n        const {\n          tools\n        } = selectedInstanceItem.categoryItemRef;\n        if (tools[0].models && tools[0].models.indexOf(CVModel.TRAFFIC_SIGN) >= 0) {\n          var _selectedInstanceItem2;\n          // models required\n          const {\n            currentCamera,\n            currentFrame\n          } = store.frame;\n          const frameData = (_selectedInstanceItem2 = selectedInstanceItem.cameras[currentCamera]) === null || _selectedInstanceItem2 === void 0 ? void 0 : _selectedInstanceItem2.frames[currentFrame];\n          if (selectedInstanceItem.instance.categoryRef.labelConfig && !selectedInstanceItem.instance.attributes || selectedInstanceItem.categoryItemRef.labelConfig && !(frameData === null || frameData === void 0 ? void 0 : frameData.attributes)) {\n            // no attributes, get attributes from model API\n            this.modelSyncing = true;\n            const snapshot = await getSnapshot(store.proxyResource(store.frame.getImageUrl(currentCamera, currentFrame)), store.frame.currentFrameRotation, frameData === null || frameData === void 0 ? void 0 : frameData.shape, store.frame.getPDFDocument(currentCamera), currentFrame + 1);\n            const base64Str = snapshot.split(',').pop();\n            try {\n              var _tools$0$modelConfig;\n              this.modelData = await trafficSignRecognition(base64Str);\n              const attrs = getAttributesByModelData(this.modelData, TrafficSignModelMappingType.INSTANCE, (_tools$0$modelConfig = tools[0].modelConfig) === null || _tools$0$modelConfig === void 0 ? void 0 : _tools$0$modelConfig[CVModel.TRAFFIC_SIGN]);\n              this.modelSyncing = false;\n              // set to instance fields\n              this.instanceFields = setInitialValues(this.instanceFields, attrs);\n            } catch (e) {\n              this.modelSyncing = false;\n            }\n          }\n        }\n      }\n    };\n    /**\n     * handle key down event\n     * @param e\n     */\n    this.handleKeyDown = e => {\n      var _e$key;\n      if (store.config.attributesModalVisible && ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.toLowerCase()) === 'enter' && !isTextarea(e.target)) {\n        e.preventDefault();\n        this.quickSubmit();\n      }\n    };\n    /**\n     * when instance values submit\n     * @param values\n     */\n    this.onInstanceValuesSubmit = (values, type) => {\n      const {\n        selectedInstances\n      } = store.instance;\n      if (selectedInstances.length === 1) {\n        const selectedInstance = selectedInstances[0];\n        const prevBasicInfo = selectedInstance.getBasicInfo();\n        let prevAttributes;\n        let prevDynamicAttributes;\n        switch (type) {\n          case 'static':\n            prevAttributes = cloneDeep(prevBasicInfo.attributes);\n            selectedInstance.setAttributes(values);\n            break;\n          case 'dynamic':\n            {\n              prevDynamicAttributes = cloneDeep(prevBasicInfo.dynamicAttributes);\n              const {\n                currentFrame,\n                currentCamera\n              } = store.frame;\n              const allApply = this.applyType !== undefined;\n              const updatedFrameAttributes = [];\n              const {\n                dynamicAttributes = {}\n              } = selectedInstance;\n              const attributesCurrentCamera = dynamicAttributes[currentCamera];\n              const framesSet = new Set(Object.values(this.dynamicInstanceFieldFramesMap).map(f => JSON.stringify(f)));\n              if (allApply || framesSet.size <= 1) {\n                // apply attributes together\n                const frames = allApply ? this.appliedFrames : Object.values(this.dynamicInstanceFieldFramesMap)[0] || [currentFrame];\n                for (let i = 0; i < frames.length; i += 1) {\n                  var _attributesCurrentCam;\n                  updatedFrameAttributes.push({\n                    frameIndex: frames[i],\n                    attributes: {\n                      ...(attributesCurrentCamera === null || attributesCurrentCamera === void 0 ? void 0 : (_attributesCurrentCam = attributesCurrentCamera[frames[i]]) === null || _attributesCurrentCam === void 0 ? void 0 : _attributesCurrentCam.attributes),\n                      ...values\n                    }\n                  });\n                }\n              } else {\n                // should set individual attribute by frame\n                const fieldKeys = Object.keys(this.dynamicInstanceFieldFramesMap);\n                const frames = Array.from(new Set(Object.values(this.dynamicInstanceFieldFramesMap).flatMap(fs => fs)));\n                for (let i = 0; i < frames.length; i += 1) {\n                  var _attributesCurrentCam2;\n                  const frameIndex = frames[i];\n                  const attrs = {\n                    ...(attributesCurrentCamera === null || attributesCurrentCamera === void 0 ? void 0 : (_attributesCurrentCam2 = attributesCurrentCamera[frameIndex]) === null || _attributesCurrentCam2 === void 0 ? void 0 : _attributesCurrentCam2.attributes)\n                  };\n                  for (let j = 0; j < fieldKeys.length; j += 1) {\n                    const key = fieldKeys[j];\n                    if (this.dynamicInstanceFieldFramesMap[key].includes(frameIndex)) {\n                      attrs[key] = values[key];\n                    }\n                  }\n                  updatedFrameAttributes.push({\n                    frameIndex,\n                    attributes: attrs\n                  });\n                }\n              }\n              selectedInstance.setDynamicAttributesByCamera(currentCamera, updatedFrameAttributes);\n              break;\n            }\n          default:\n            break;\n        }\n        if (!this.instanceState) {\n          this.instanceState = {\n            prevState: {\n              ...prevBasicInfo,\n              children: []\n            },\n            currState: {\n              ...selectedInstance.getBasicInfo(),\n              children: []\n            }\n          };\n        } else {\n          this.instanceState = {\n            prevState: {\n              ...this.instanceState.prevState,\n              ...(prevAttributes && {\n                attributes: prevAttributes\n              }),\n              ...(prevDynamicAttributes && {\n                dynamicAttributes: prevDynamicAttributes\n              })\n            },\n            currState: {\n              ...selectedInstance.getBasicInfo(),\n              children: []\n            }\n          };\n        }\n      }\n      this.checkFinished();\n    };\n    /**\n     * when instance item values submit (with OCR text)\n     * @param instanceItem\n     * @param values\n     * @param fieldFramesMap\n     */\n    this.onItemValuesSubmit = (instanceItem, values, fieldFramesMap) => {\n      const {\n        currentCamera,\n        currentFrame\n      } = store.frame;\n      const cameraData = instanceItem.cameras[currentCamera];\n      const allApply = this.applyType !== undefined;\n      const framesSet = new Set(Object.values(fieldFramesMap).map(f => JSON.stringify(f)));\n      if (allApply || framesSet.size <= 1) {\n        // apply attributes together\n        const frameData = cameraData.frames[currentFrame];\n        const frames = allApply && !frameData.isOCR && !frameData.isFormula ? this.appliedFrames : Object.values(fieldFramesMap)[0] || [currentFrame];\n        const {\n          prevState,\n          currState\n        } = instanceItem.setAttributes(currentCamera, frames, values);\n        this.itemStates.push({\n          prevState,\n          currState\n        });\n      } else {\n        // should set individual attribute by frame\n        const frameAttributesMap = {};\n        Object.values(cameraData.frames).forEach(({\n          frameIndex,\n          attributes\n        }) => {\n          const newAttributes = {\n            ...attributes\n          };\n          let shouldUpdate = false;\n          Object.keys(fieldFramesMap).forEach(key => {\n            if (fieldFramesMap[key].includes(frameIndex)) {\n              var _values$attributes;\n              newAttributes[key] = (_values$attributes = values.attributes) === null || _values$attributes === void 0 ? void 0 : _values$attributes[key];\n              shouldUpdate = true;\n            }\n          });\n          if (shouldUpdate) {\n            frameAttributesMap[frameIndex] = {\n              attributes: newAttributes\n            };\n          }\n        });\n        frameAttributesMap[currentFrame] = {\n          ...values\n        };\n        const {\n          prevState,\n          currState\n        } = instanceItem.setAttributesByFrame(currentCamera, frameAttributesMap);\n        this.itemStates.push({\n          prevState,\n          currState\n        });\n      }\n      const shape = store.config.viewMode === ViewMode.DEFAULT ? store.shape.selectedShapes[0] : store.grid.getCurrentSelectedShape();\n      if (shape) {\n        store.shape.setShapeStyles(shape, instanceItem);\n      }\n      this.checkFinished();\n    };\n    /**\n     * submit button click\n     */\n    this.submit = () => {\n      var _this$ref$current;\n      this.submitCount = 0;\n      this.instanceState = undefined;\n      this.itemStates = [];\n      const buttons = (_this$ref$current = this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.querySelectorAll('.attributes-form-section:not(.attributes-form-section--disabled) button.easyform-btn.form-btn-submit');\n      if (buttons === null || buttons === void 0 ? void 0 : buttons.length) {\n        // click buttons\n        buttons === null || buttons === void 0 ? void 0 : buttons.forEach(btn => {\n          this.submitCount += 1;\n          btn.click();\n        });\n      } else {\n        // close modal\n        store.config.setAttributesModalVisible(false);\n        store.config.shouldSyncOCR = false;\n        store.instance.openAttributesModalFromPending();\n      }\n    };\n    /**\n     * submit by click mask or enter\n     */\n    this.quickSubmit = () => {\n      // simply check by class name, if any popover opened, not trigger submit\n      const applyPopovers = document.querySelectorAll('.frames-apply-popover:not(.ant-popover-hidden)');\n      const formulaPopovers = document.querySelectorAll('.formula-example-selector__popover:not(.easyform-popover-hidden)');\n      if (applyPopovers.length === 0 && formulaPopovers.length === 0) {\n        this.submit();\n      }\n    };\n    makeObservable(this, {\n      instanceFields: observable,\n      dynamicInstanceFields: observable,\n      applyType: observable,\n      applyStart: observable,\n      applyEnd: observable,\n      modelSyncing: observable,\n      modelData: observable,\n      snapshotUrl: observable,\n      dynamicInstanceFieldFramesMap: observable,\n      syncModel: action,\n      getSnapshotForInstance: action\n    });\n    this.reactionDisposer = reaction(() => store.config.attributesModalVisible, () => {\n      if (store.config.attributesModalVisible) {\n        // reset frames applyer\n        this.applyType = undefined;\n        this.applyStart = undefined;\n        this.applyEnd = undefined;\n        // init instance fields\n        const selectedInstance = store.instance.selectedInstances[0];\n        if (selectedInstance) {\n          const {\n            labelConfig: instanceConfig,\n            labelConfigDynamic: dynamicInstanceConfig\n          } = selectedInstance.categoryRef;\n          const {\n            lastPendingInstanceItem\n          } = store.instance;\n          const useFromPending = lastPendingInstanceItem && lastPendingInstanceItem.instance.category === selectedInstance.category;\n          if (instanceConfig) {\n            let attrs = selectedInstance.attributes;\n            if ((!attrs || Object.keys(attrs).length === 0) && useFromPending) {\n              const lastAttrs = lastPendingInstanceItem.instance.attributes;\n              if (lastAttrs) {\n                attrs = {\n                  ...lastAttrs\n                };\n              }\n            }\n            this.instanceFields = setInitialValues(instanceConfig.fields, attrs);\n          }\n          if (dynamicInstanceConfig) {\n            let attrs = store.instance.getCurrentDynamicAttributesByInstance(selectedInstance);\n            if ((!attrs || Object.keys(attrs).length === 0) && useFromPending) {\n              var _lastPendingInstanceI, _lastPendingInstanceI2, _lastPendingInstanceI3;\n              const lastAttrs = (_lastPendingInstanceI = lastPendingInstanceItem.instance.dynamicAttributes) === null || _lastPendingInstanceI === void 0 ? void 0 : (_lastPendingInstanceI2 = _lastPendingInstanceI[store.frame.currentCamera]) === null || _lastPendingInstanceI2 === void 0 ? void 0 : (_lastPendingInstanceI3 = _lastPendingInstanceI2[store.frame.currentFrame]) === null || _lastPendingInstanceI3 === void 0 ? void 0 : _lastPendingInstanceI3.attributes;\n              if (lastAttrs) {\n                attrs = {\n                  ...lastAttrs\n                };\n              }\n            }\n            this.dynamicInstanceFields = setInitialValues(dynamicInstanceConfig.fields, attrs);\n          }\n        }\n        this.snapshotUrl = null;\n        this.getSnapshotForInstance();\n        // check if any model should be called\n        this.modelData = null;\n        this.syncModel();\n      }\n    });\n  }\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    this.reactionDisposer();\n  }\n  /**\n   * check if all forms has been submitted\n   */\n  checkFinished() {\n    this.submitCount -= 1;\n    if (this.submitCount === 0) {\n      var _this$instanceState, _this$instanceState2;\n      // finish\n      const basicInfo = store.instance.selectedInstances[0].getBasicInfo();\n      const prevInstance = {\n        ...(((_this$instanceState = this.instanceState) === null || _this$instanceState === void 0 ? void 0 : _this$instanceState.prevState) || basicInfo),\n        children: []\n      };\n      const currInstance = {\n        ...(((_this$instanceState2 = this.instanceState) === null || _this$instanceState2 === void 0 ? void 0 : _this$instanceState2.currState) || basicInfo),\n        children: []\n      };\n      this.itemStates.forEach(({\n        prevState,\n        currState\n      }) => {\n        if (prevState) {\n          prevInstance.children.push(prevState);\n        }\n        if (currState) {\n          currInstance.children.push(currState);\n        }\n      });\n      store.undo.push({\n        instances: [prevInstance]\n      }, {\n        instances: [currInstance]\n      });\n      store.config.setAttributesModalVisible(false);\n      store.config.shouldSyncOCR = false;\n      store.instance.openAttributesModalFromPending();\n    }\n  }\n  render() {\n    const {\n      attributesModalVisible\n    } = store.config;\n    const {\n      isMultiSelected,\n      selectedInstances,\n      selectedInstanceItems\n    } = store.instance;\n    if (!attributesModalVisible || isMultiSelected || selectedInstances.length <= 0) {\n      return null;\n    }\n    const selectedInstance = selectedInstances[0];\n    const {\n      labelConfig: instanceConfig,\n      labelConfigDynamic: dynamicInstanceConfig\n    } = selectedInstance.categoryRef;\n    const displayItems = selectedInstanceItems.length === 1 ? [selectedInstanceItems[0]] : Object.values(selectedInstance.items);\n    const hasInstanceAttrCfg = instanceConfig && this.instanceFields;\n    const hasInstanceDynamicAttrCfg = dynamicInstanceConfig && this.dynamicInstanceFields;\n    return /*#__PURE__*/React.createElement(Modal, {\n      visible: true,\n      draggable: true,\n      resizable: true,\n      defaultSize: {\n        w: 720,\n        h: 720\n      },\n      closable: false,\n      dragId: \"video-tracking-attributes\",\n      className: \"attributes-form\",\n      title: i18n.translate('INSTANCE_ATTRIBUTES'),\n      onMaskClick: this.quickSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 7\n      }\n    }, this.modelSyncing ? /*#__PURE__*/React.createElement(Spin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 30\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.ref,\n      className: \"attributes-form-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 13\n      }\n    }, this.snapshotUrl && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ocr-snapshot\",\n      style: {\n        backgroundImage: `url(${this.snapshotUrl})`,\n        height: 72,\n        marginBottom: 10,\n        marginTop: -10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }\n    }), hasInstanceAttrCfg && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-section__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 19\n      }\n    }, (selectedInstance === null || selectedInstance === void 0 ? void 0 : selectedInstance.label) && i18n.translate('ATTRIBUTES_MODE_INSPECT_LABEL_STATIC', {\n      values: {\n        prefix: selectedInstance.label\n      }\n    })), /*#__PURE__*/React.createElement(EasyForm, {\n      autoFocus: true,\n      theme: \"dark\",\n      fields: this.instanceFields,\n      conditions: instanceConfig.conditions,\n      effects: instanceConfig.effects,\n      rules: instanceConfig.rules,\n      onSubmit: val => this.onInstanceValuesSubmit(val, 'static'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 19\n      }\n    })), hasInstanceDynamicAttrCfg && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-section__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 19\n      }\n    }, (selectedInstance === null || selectedInstance === void 0 ? void 0 : selectedInstance.label) && i18n.translate('ATTRIBUTES_MODE_INSPECT_LABEL_DYNAMIC', {\n      values: {\n        prefix: selectedInstance.label\n      }\n    })), /*#__PURE__*/React.createElement(EasyForm, {\n      autoFocus: !hasInstanceAttrCfg,\n      theme: \"dark\",\n      fields: this.dynamicInstanceFields,\n      conditions: dynamicInstanceConfig.conditions,\n      effects: dynamicInstanceConfig.effects,\n      rules: dynamicInstanceConfig.rules,\n      onSubmit: val => this.onInstanceValuesSubmit(val, 'dynamic'),\n      renderLabel: (label, field) => /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 23\n        }\n      }, label, store.frame.frameCount > 1 // multiple frames\n      && /*#__PURE__*/React.createElement(FramesApply, {\n        type: this.applyType,\n        start: this.applyType !== undefined ? this.applyStart : undefined,\n        end: this.applyType !== undefined ? this.applyEnd : undefined,\n        onChange: appliedFrames => {\n          this.dynamicInstanceFieldFramesMap[field.name] = [...appliedFrames];\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 33\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 19\n      }\n    })), displayItems.map((item, i) => /*#__PURE__*/React.createElement(InstanceItemAttributesForm, Object.assign({\n      key: item.id,\n      autoFocus: !hasInstanceAttrCfg && !hasInstanceDynamicAttrCfg && i === 0,\n      instanceItem: item,\n      onSubmit: (values, fieldFramesMap) => this.onItemValuesSubmit(item, values, fieldFramesMap),\n      modelData: this.modelData\n    }, this.applyType !== undefined && {\n      applyType: this.applyType,\n      applyStart: this.applyStart,\n      applyEnd: this.applyEnd\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"attributes-form-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ConfigProvider, {\n      prefixCls: \"easyform\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.submit,\n      style: {\n        marginRight: 16\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }\n    }, i18n.translate('COMMON_SUBMIT'))), store.frame.frameCount > 1 // multiple frames\n    && displayItems.some(i => {\n      var _i$cameras$store$fram;\n      const frameData = (_i$cameras$store$fram = i.cameras[store.frame.currentCamera]) === null || _i$cameras$store$fram === void 0 ? void 0 : _i$cameras$store$fram.frames[store.frame.currentFrame];\n      return !(frameData === null || frameData === void 0 ? void 0 : frameData.isOCR) && !(frameData === null || frameData === void 0 ? void 0 : frameData.isFormula);\n    }) // some shape is not ocr or formula\n    && /*#__PURE__*/React.createElement(FramesApply, {\n      text: i18n.translate('APPLY_FRAMES_TO_ALL'),\n      onChange: action(appliedFrames => {\n        this.appliedFrames = appliedFrames;\n        this.applyStart = `${appliedFrames[0] + 1}`;\n        this.applyEnd = `${appliedFrames[appliedFrames.length - 1] + 1}`;\n      }),\n      onTypeChange: action(type => {\n        this.applyType = type;\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 19\n      }\n    }))));\n  }\n}\nexport default observer(AttributesModal);","map":{"version":3,"names":["React","observer","makeObservable","observable","action","reaction","Button","ConfigProvider","Spin","EasyForm","cloneDeep","APIForwardType","Modal","InstanceItemAttributesForm","FramesApply","store","i18n","getAttributesByModelData","getSnapshot","setInitialValues","CVModel","TrafficSignModelMappingType","ViewMode","isTextarea","trafficSignRecognition","base64Str","imageId","Date","now","fetchPromise","Promise","resolve","reject","_store$jobProxy","jobProxy","forwardAPI","TRAFFIC_SIGN_RECOGNIZE","JSON","stringify","inputType","image","then","res","status","Error","data","category","main_class","sub_class","message","catch","e","timeoutPromise","_","setTimeout","race","AttributesModal","Component","constructor","props","ref","createRef","submitCount","instanceState","itemStates","reactionDisposer","instanceFields","dynamicInstanceFields","applyType","applyStart","applyEnd","appliedFrames","dynamicInstanceFieldFramesMap","modelSyncing","modelData","snapshotUrl","getSnapshotForInstance","selectedInstanceItems","instance","length","selectedInstanceItem","tools","categoryItemRef","needSnapshot","snapshot","_selectedInstanceItem","currentCamera","currentFrame","frame","frameData","cameras","frames","proxyResource","getImageUrl","currentFrameRotation","shape","getPDFDocument","syncModel","models","indexOf","TRAFFIC_SIGN","_selectedInstanceItem2","categoryRef","labelConfig","attributes","split","pop","_tools$0$modelConfig","attrs","INSTANCE","modelConfig","handleKeyDown","_e$key","config","attributesModalVisible","key","toLowerCase","target","preventDefault","quickSubmit","onInstanceValuesSubmit","values","type","selectedInstances","selectedInstance","prevBasicInfo","getBasicInfo","prevAttributes","prevDynamicAttributes","setAttributes","dynamicAttributes","allApply","undefined","updatedFrameAttributes","attributesCurrentCamera","framesSet","Set","Object","map","f","size","i","_attributesCurrentCam","push","frameIndex","fieldKeys","keys","Array","from","flatMap","fs","_attributesCurrentCam2","j","includes","setDynamicAttributesByCamera","prevState","children","currState","checkFinished","onItemValuesSubmit","instanceItem","fieldFramesMap","cameraData","isOCR","isFormula","frameAttributesMap","forEach","newAttributes","shouldUpdate","_values$attributes","setAttributesByFrame","viewMode","DEFAULT","selectedShapes","grid","getCurrentSelectedShape","setShapeStyles","submit","_this$ref$current","buttons","current","querySelectorAll","btn","click","setAttributesModalVisible","shouldSyncOCR","openAttributesModalFromPending","applyPopovers","document","formulaPopovers","instanceConfig","labelConfigDynamic","dynamicInstanceConfig","lastPendingInstanceItem","useFromPending","lastAttrs","fields","getCurrentDynamicAttributesByInstance","_lastPendingInstanceI","_lastPendingInstanceI2","_lastPendingInstanceI3","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","_this$instanceState","_this$instanceState2","basicInfo","prevInstance","currInstance","undo","instances","render","isMultiSelected","displayItems","items","hasInstanceAttrCfg","hasInstanceDynamicAttrCfg","createElement","visible","draggable","resizable","defaultSize","w","h","closable","dragId","className","title","translate","onMaskClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","style","backgroundImage","height","marginBottom","marginTop","label","prefix","autoFocus","theme","conditions","effects","rules","onSubmit","val","renderLabel","field","display","justifyContent","frameCount","start","end","onChange","name","item","assign","id","prefixCls","onClick","marginRight","some","_i$cameras$store$fram","text","onTypeChange"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/components/attributes/AttributesModal.tsx"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { makeObservable, observable, action, reaction, IReactionDisposer } from 'mobx';\nimport { Button, ConfigProvider, Spin } from 'antd';\nimport EasyForm from '@appen-china/easy-form';\nimport { cloneDeep } from 'lodash';\nimport { APIForwardType } from 'src/libs/JobProxy';\nimport Modal from '../../../common/modal/Modal';\nimport InstanceItemAttributesForm from './InstanceItemAttributesForm';\nimport FramesApply, { FramesApplyType } from './FramesApply';\nimport InstanceItem from '../../model/InstanceItem';\nimport store from '../../store/RootStore';\nimport i18n from '../../locales';\nimport { getAttributesByModelData, getSnapshot, setInitialValues } from '../../utils';\nimport { CVModel, DynamicAttributes, Instance as IInstance, InstanceItem as IInstanceItem, TrafficSignModelData, TrafficSignModelMappingType, ViewMode } from '../../types';\nimport { isTextarea } from '../../../../utils';\nimport './AttributesModal.scss';\n\nconst trafficSignRecognition = (base64Str?: string) => {\n  // FIXME: temp use timestamp\n  const imageId = `${Date.now()}`;\n  const fetchPromise = new Promise<TrafficSignModelData>((resolve, reject) => {\n    store.jobProxy?.forwardAPI(APIForwardType.TRAFFIC_SIGN_RECOGNIZE, JSON.stringify({\n      imageId,\n      inputType: 'base64',\n      image: base64Str || '',\n    }))\n      .then((res) => {\n        if (res.status === 200) {\n          return res;\n        }\n        throw new Error('Request failed.');\n      }).then((data) => {\n        // success\n        const { category, main_class, sub_class } = data.data;\n        resolve({ category, main_class, sub_class });\n        // fail\n        throw new Error(data.message);\n      }).catch((e) => reject(e));\n  });\n  const timeoutPromise = new Promise<TrafficSignModelData>((_, reject) => {\n    setTimeout(() => reject(), 8000);\n  });\n  return Promise.race([fetchPromise, timeoutPromise]);\n};\n\nclass AttributesModal extends React.Component {\n  /**\n   * form container\n   */\n  ref = React.createRef<HTMLDivElement>();\n\n  /**\n   * forms count that to be submitted\n   */\n  submitCount = 0;\n\n  /**\n   * instance state\n   */\n  instanceState?: {\n    prevState: IInstance;\n    currState: IInstance;\n  };\n\n  /**\n   * items state\n   */\n  itemStates: {\n    prevState?: IInstanceItem;\n    currState?: IInstanceItem;\n  }[] = [];\n\n  /**\n   * reaction disposer\n   */\n  reactionDisposer: IReactionDisposer;\n\n  instanceFields: any = [];\n\n  dynamicInstanceFields: any = [];\n\n  applyType?: FramesApplyType;\n\n  applyStart?: string;\n\n  applyEnd?: string;\n\n  appliedFrames: number[] = [];\n\n  dynamicInstanceFieldFramesMap: {[key: string]: number[]} = {};\n\n  modelSyncing = false;\n\n  modelData: TrafficSignModelData | null = null;\n\n  snapshotUrl: string | null = null;\n\n  constructor(props: any) {\n    super(props);\n    makeObservable(this, {\n      instanceFields: observable,\n      dynamicInstanceFields: observable,\n      applyType: observable,\n      applyStart: observable,\n      applyEnd: observable,\n      modelSyncing: observable,\n      modelData: observable,\n      snapshotUrl: observable,\n      dynamicInstanceFieldFramesMap: observable,\n      syncModel: action,\n      getSnapshotForInstance: action,\n    });\n\n    this.reactionDisposer = reaction(\n      () => store.config.attributesModalVisible,\n      () => {\n        if (store.config.attributesModalVisible) {\n          // reset frames applyer\n          this.applyType = undefined;\n          this.applyStart = undefined;\n          this.applyEnd = undefined;\n          // init instance fields\n          const selectedInstance = store.instance.selectedInstances[0];\n          if (selectedInstance) {\n            const { labelConfig: instanceConfig, labelConfigDynamic: dynamicInstanceConfig } = selectedInstance.categoryRef;\n            const { lastPendingInstanceItem } = store.instance;\n            const useFromPending = lastPendingInstanceItem && lastPendingInstanceItem.instance.category === selectedInstance.category;\n            if (instanceConfig) {\n              let attrs = selectedInstance.attributes;\n              if ((!attrs || Object.keys(attrs).length === 0) && useFromPending) {\n                const lastAttrs = lastPendingInstanceItem.instance.attributes;\n                if (lastAttrs) {\n                  attrs = { ...lastAttrs };\n                }\n              }\n              this.instanceFields = setInitialValues(instanceConfig.fields, attrs);\n            }\n            if (dynamicInstanceConfig) {\n              let attrs = store.instance.getCurrentDynamicAttributesByInstance(selectedInstance);\n              if ((!attrs || Object.keys(attrs).length === 0) && useFromPending) {\n                const lastAttrs = lastPendingInstanceItem.instance.dynamicAttributes?.[store.frame.currentCamera]?.[store.frame.currentFrame]?.attributes;\n                if (lastAttrs) {\n                  attrs = { ...lastAttrs };\n                }\n              }\n              this.dynamicInstanceFields = setInitialValues(dynamicInstanceConfig.fields, attrs);\n            }\n          }\n          this.snapshotUrl = null;\n          this.getSnapshotForInstance();\n          // check if any model should be called\n          this.modelData = null;\n          this.syncModel();\n        }\n      },\n    );\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    this.reactionDisposer();\n  }\n\n  getSnapshotForInstance = async () => {\n    const { selectedInstanceItems } = store.instance;\n    if (selectedInstanceItems.length === 1) {\n      const selectedInstanceItem = selectedInstanceItems[0];\n      const { tools } = selectedInstanceItem.categoryItemRef;\n      const needSnapshot = tools && tools.length > 0 ? tools[0].snapshot : false;\n      if (needSnapshot) {\n        const { currentCamera, currentFrame } = store.frame;\n        const frameData = selectedInstanceItem.cameras[currentCamera]?.frames[currentFrame];\n        this.snapshotUrl = await getSnapshot(\n          store.proxyResource(store.frame.getImageUrl(currentCamera, currentFrame)),\n          store.frame.currentFrameRotation,\n          frameData?.shape,\n          store.frame.getPDFDocument(currentCamera),\n          currentFrame + 1,\n        );\n      }\n    }\n  };\n\n  syncModel = async () => {\n    const selectedInstanceItem = store.instance.selectedInstanceItems[0];\n    if (selectedInstanceItem) {\n      const { tools } = selectedInstanceItem.categoryItemRef;\n      if (tools[0].models && tools[0].models.indexOf(CVModel.TRAFFIC_SIGN) >= 0) {\n        // models required\n        const { currentCamera, currentFrame } = store.frame;\n        const frameData = selectedInstanceItem.cameras[currentCamera]?.frames[currentFrame];\n        if (\n          (selectedInstanceItem.instance.categoryRef.labelConfig && !selectedInstanceItem.instance.attributes) ||\n          (selectedInstanceItem.categoryItemRef.labelConfig && !frameData?.attributes)\n        ) {\n          // no attributes, get attributes from model API\n          this.modelSyncing = true;\n          const snapshot = await getSnapshot(\n            store.proxyResource(store.frame.getImageUrl(currentCamera, currentFrame)),\n            store.frame.currentFrameRotation,\n            frameData?.shape,\n            store.frame.getPDFDocument(currentCamera),\n            currentFrame + 1,\n          );\n          const base64Str = snapshot.split(',').pop();\n          try {\n            this.modelData = await trafficSignRecognition(base64Str);\n            const attrs = getAttributesByModelData(this.modelData, TrafficSignModelMappingType.INSTANCE, tools[0].modelConfig?.[CVModel.TRAFFIC_SIGN]);\n            this.modelSyncing = false;\n            // set to instance fields\n            this.instanceFields = setInitialValues(this.instanceFields, attrs);\n          } catch (e) {\n            this.modelSyncing = false;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * handle key down event\n   * @param e\n   */\n  handleKeyDown = (e: KeyboardEvent) => {\n    if (store.config.attributesModalVisible && e.key?.toLowerCase() === 'enter' && !isTextarea(e.target as HTMLElement)) {\n      e.preventDefault();\n      this.quickSubmit();\n    }\n  };\n\n  /**\n   * when instance values submit\n   * @param values\n   */\n  onInstanceValuesSubmit = (values: any, type: string) => {\n    const { selectedInstances } = store.instance;\n    if (selectedInstances.length === 1) {\n      const selectedInstance = selectedInstances[0];\n      const prevBasicInfo = selectedInstance.getBasicInfo();\n      let prevAttributes;\n      let prevDynamicAttributes;\n      switch (type) {\n        case 'static':\n          prevAttributes = cloneDeep(prevBasicInfo.attributes);\n          selectedInstance.setAttributes(values);\n          break;\n        case 'dynamic': {\n          prevDynamicAttributes = cloneDeep(prevBasicInfo.dynamicAttributes);\n          const { currentFrame, currentCamera } = store.frame;\n          const allApply = this.applyType !== undefined;\n          const updatedFrameAttributes: DynamicAttributes[] = [];\n          const { dynamicAttributes = {} } = selectedInstance;\n          const attributesCurrentCamera = dynamicAttributes[currentCamera];\n          const framesSet = new Set(Object.values(this.dynamicInstanceFieldFramesMap).map((f) => JSON.stringify(f)));\n          if (allApply || framesSet.size <= 1) {\n            // apply attributes together\n            const frames = allApply\n              ? this.appliedFrames\n              : (Object.values(this.dynamicInstanceFieldFramesMap)[0] || [currentFrame]);\n            for (let i = 0; i < frames.length; i += 1) {\n              updatedFrameAttributes.push({\n                frameIndex: frames[i],\n                attributes: { ...attributesCurrentCamera?.[frames[i]]?.attributes, ...values },\n              });\n            }\n          } else {\n            // should set individual attribute by frame\n            const fieldKeys = Object.keys(this.dynamicInstanceFieldFramesMap);\n            const frames = Array.from(new Set(Object.values(this.dynamicInstanceFieldFramesMap).flatMap((fs) => fs)));\n            for (let i = 0; i < frames.length; i += 1) {\n              const frameIndex = frames[i];\n              const attrs = { ...attributesCurrentCamera?.[frameIndex]?.attributes };\n              for (let j = 0; j < fieldKeys.length; j += 1) {\n                const key = fieldKeys[j];\n                if (this.dynamicInstanceFieldFramesMap[key].includes(frameIndex)) {\n                  attrs[key] = values[key];\n                }\n              }\n              updatedFrameAttributes.push({\n                frameIndex,\n                attributes: attrs,\n              });\n            }\n          }\n          selectedInstance.setDynamicAttributesByCamera(currentCamera, updatedFrameAttributes);\n          break;\n        }\n        default:\n          break;\n      }\n      if (!this.instanceState) {\n        this.instanceState = {\n          prevState: { ...prevBasicInfo, children: [] },\n          currState: { ...selectedInstance.getBasicInfo(), children: [] },\n        };\n      } else {\n        this.instanceState = {\n          prevState: {\n            ...this.instanceState.prevState,\n            ...prevAttributes && { attributes: prevAttributes },\n            ...prevDynamicAttributes && { dynamicAttributes: prevDynamicAttributes }\n          },\n          currState: { ...selectedInstance.getBasicInfo(), children: [] },\n        };\n      }\n    }\n    this.checkFinished();\n  };\n\n  /**\n   * when instance item values submit (with OCR text)\n   * @param instanceItem\n   * @param values\n   * @param fieldFramesMap\n   */\n  onItemValuesSubmit = (instanceItem: InstanceItem, values: { attributes?: any; OCRText?: string; formulaText?: string }, fieldFramesMap: { [field: string]: number[] }) => {\n    const { currentCamera, currentFrame } = store.frame;\n    const cameraData = instanceItem.cameras[currentCamera];\n    const allApply = this.applyType !== undefined;\n    const framesSet = new Set(Object.values(fieldFramesMap).map((f) => JSON.stringify(f)));\n    if (allApply || framesSet.size <= 1) {\n      // apply attributes together\n      const frameData = cameraData.frames[currentFrame];\n      const frames = (allApply && !frameData.isOCR && !frameData.isFormula)\n        ? this.appliedFrames\n        : (Object.values(fieldFramesMap)[0] || [currentFrame]);\n      const { prevState, currState } = instanceItem.setAttributes(currentCamera, frames, values);\n      this.itemStates.push({ prevState, currState });\n    } else {\n      // should set individual attribute by frame\n      const frameAttributesMap: { [frameIndex: number]: { attributes?: any; OCRText?: string; formulaText?: string } } = {};\n      Object.values(cameraData.frames).forEach(({ frameIndex, attributes }) => {\n        const newAttributes = { ...attributes };\n        let shouldUpdate = false;\n        Object.keys(fieldFramesMap).forEach((key) => {\n          if (fieldFramesMap[key].includes(frameIndex)) {\n            newAttributes[key] = values.attributes?.[key];\n            shouldUpdate = true;\n          }\n        });\n        if (shouldUpdate) {\n          frameAttributesMap[frameIndex] = { attributes: newAttributes };\n        }\n      });\n      frameAttributesMap[currentFrame] = { ...values };\n      const { prevState, currState } = instanceItem.setAttributesByFrame(currentCamera, frameAttributesMap);\n      this.itemStates.push({ prevState, currState });\n    }\n    const shape = store.config.viewMode === ViewMode.DEFAULT ? store.shape.selectedShapes[0] : store.grid.getCurrentSelectedShape();\n    if (shape) {\n      store.shape.setShapeStyles(shape, instanceItem);\n    }\n    this.checkFinished();\n  };\n\n  /**\n   * check if all forms has been submitted\n   */\n  checkFinished() {\n    this.submitCount -= 1;\n    if (this.submitCount === 0) {\n      // finish\n      const basicInfo = store.instance.selectedInstances[0]!.getBasicInfo();\n      const prevInstance: IInstance = {\n        ...(this.instanceState?.prevState || basicInfo),\n        children: [],\n      };\n      const currInstance: IInstance = {\n        ...(this.instanceState?.currState || basicInfo),\n        children: [],\n      };\n      this.itemStates.forEach(({ prevState, currState }) => {\n        if (prevState) {\n          prevInstance.children.push(prevState);\n        }\n        if (currState) {\n          currInstance.children.push(currState);\n        }\n      });\n      store.undo.push({ instances: [prevInstance] }, { instances: [currInstance] });\n      store.config.setAttributesModalVisible(false);\n      store.config.shouldSyncOCR = false;\n      store.instance.openAttributesModalFromPending();\n    }\n  }\n\n  /**\n   * submit button click\n   */\n  submit = () => {\n    this.submitCount = 0;\n    this.instanceState = undefined;\n    this.itemStates = [];\n\n    const buttons = this.ref.current?.querySelectorAll('.attributes-form-section:not(.attributes-form-section--disabled) button.easyform-btn.form-btn-submit');\n    if (buttons?.length) {\n      // click buttons\n      buttons?.forEach((btn) => {\n        this.submitCount += 1;\n        (btn as HTMLButtonElement).click();\n      });\n    } else {\n      // close modal\n      store.config.setAttributesModalVisible(false);\n      store.config.shouldSyncOCR = false;\n      store.instance.openAttributesModalFromPending();\n    }\n  };\n\n  /**\n   * submit by click mask or enter\n   */\n  quickSubmit = () => {\n    // simply check by class name, if any popover opened, not trigger submit\n    const applyPopovers = document.querySelectorAll('.frames-apply-popover:not(.ant-popover-hidden)');\n    const formulaPopovers = document.querySelectorAll('.formula-example-selector__popover:not(.easyform-popover-hidden)');\n    if (applyPopovers.length === 0 && formulaPopovers.length === 0) {\n      this.submit();\n    }\n  };\n\n  render() {\n    const { attributesModalVisible } = store.config;\n    const { isMultiSelected, selectedInstances, selectedInstanceItems } = store.instance;\n    if (!attributesModalVisible || isMultiSelected || selectedInstances.length <= 0) {\n      return null;\n    }\n\n    const selectedInstance = selectedInstances[0];\n    const { labelConfig: instanceConfig, labelConfigDynamic: dynamicInstanceConfig } = selectedInstance.categoryRef;\n    const displayItems = selectedInstanceItems.length === 1 ? [selectedInstanceItems[0]] : Object.values(selectedInstance.items);\n    const hasInstanceAttrCfg = instanceConfig && this.instanceFields;\n    const hasInstanceDynamicAttrCfg = dynamicInstanceConfig && this.dynamicInstanceFields;\n    return (\n      <Modal\n        visible\n        draggable\n        resizable\n        defaultSize={{ w: 720, h: 720 }}\n        closable={false}\n        dragId=\"video-tracking-attributes\"\n        className=\"attributes-form\"\n        title={i18n.translate('INSTANCE_ATTRIBUTES')}\n        onMaskClick={this.quickSubmit}\n      >\n        {this.modelSyncing ? <Spin /> : (\n          <>\n            <div ref={this.ref} className=\"attributes-form-content\">\n              {this.snapshotUrl && (\n                <div\n                  className=\"ocr-snapshot\"\n                  style={{\n                    backgroundImage: `url(${this.snapshotUrl})`,\n                    height: 72,\n                    marginBottom: 10,\n                    marginTop: -10,\n                  }}\n                />\n              )}\n              {hasInstanceAttrCfg && (\n                <div className=\"attributes-form-section\">\n                  <div className=\"attributes-form-section__title\">\n                    {selectedInstance?.label && i18n.translate('ATTRIBUTES_MODE_INSPECT_LABEL_STATIC', { values: { prefix: selectedInstance.label } })}\n                  </div>\n                  <EasyForm\n                    autoFocus\n                    theme=\"dark\"\n                    fields={this.instanceFields}\n                    conditions={instanceConfig.conditions}\n                    effects={instanceConfig.effects}\n                    rules={instanceConfig.rules}\n                    onSubmit={(val) => this.onInstanceValuesSubmit(val, 'static')}\n                  />\n                </div>\n              )}\n              {hasInstanceDynamicAttrCfg && (\n                <div className=\"attributes-form-section\">\n                  <div className=\"attributes-form-section__title\">\n                    {selectedInstance?.label && i18n.translate('ATTRIBUTES_MODE_INSPECT_LABEL_DYNAMIC', { values: { prefix: selectedInstance.label } })}\n                  </div>\n                  <EasyForm\n                    autoFocus={!hasInstanceAttrCfg}\n                    theme=\"dark\"\n                    fields={this.dynamicInstanceFields}\n                    conditions={dynamicInstanceConfig.conditions}\n                    effects={dynamicInstanceConfig.effects}\n                    rules={dynamicInstanceConfig.rules}\n                    onSubmit={(val) => this.onInstanceValuesSubmit(val, 'dynamic')}\n                    renderLabel={(label, field) => (\n                      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                        {label}\n                        {\n                              store.frame.frameCount > 1 // multiple frames\n                              && (\n                                <FramesApply\n                                  type={this.applyType}\n                                  start={this.applyType !== undefined ? this.applyStart : undefined}\n                                  end={this.applyType !== undefined ? this.applyEnd : undefined}\n                                  onChange={(appliedFrames) => {\n                                    this.dynamicInstanceFieldFramesMap[field.name] = [...appliedFrames];\n                                  }}\n                                />\n                              )\n                            }\n                      </div>\n                    )}\n                  />\n                </div>\n              )}\n              {displayItems.map((item, i) => (\n                <InstanceItemAttributesForm\n                  key={item.id}\n                  autoFocus={!hasInstanceAttrCfg && !hasInstanceDynamicAttrCfg && i === 0}\n                  instanceItem={item}\n                  onSubmit={(values, fieldFramesMap) => this.onItemValuesSubmit(item, values, fieldFramesMap)}\n                  modelData={this.modelData}\n                  {...this.applyType !== undefined && {\n                    applyType: this.applyType,\n                    applyStart: this.applyStart,\n                    applyEnd: this.applyEnd,\n                  }}\n                />\n              ))}\n            </div>\n            <div className=\"attributes-form-footer\">\n              <ConfigProvider prefixCls=\"easyform\">\n                <Button type=\"primary\" onClick={this.submit} style={{ marginRight: 16 }}>\n                  {i18n.translate('COMMON_SUBMIT')}\n                </Button>\n              </ConfigProvider>\n              {\n                store.frame.frameCount > 1 // multiple frames\n                && displayItems.some((i) => {\n                  const frameData = i.cameras[store.frame.currentCamera]?.frames[store.frame.currentFrame];\n                  return !frameData?.isOCR && !frameData?.isFormula;\n                }) // some shape is not ocr or formula\n                && (\n                  <FramesApply\n                    text={i18n.translate('APPLY_FRAMES_TO_ALL')}\n                    onChange={action((appliedFrames) => {\n                      this.appliedFrames = appliedFrames;\n                      this.applyStart = `${appliedFrames[0] + 1}`;\n                      this.applyEnd = `${appliedFrames[appliedFrames.length - 1] + 1}`;\n                    })}\n                    onTypeChange={action((type) => {\n                      this.applyType = type;\n                    })}\n                  />\n                )\n              }\n            </div>\n          </>\n        )}\n      </Modal>\n    );\n  }\n}\n\nexport default observer(AttributesModal);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,cAAc,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,QAA2B,MAAM;AACtF,SAASC,MAAM,EAAEC,cAAc,EAAEC,IAAI,QAAQ,MAAM;AACnD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAOC,KAAK,MAAM,6BAA6B;AAC/C,OAAOC,0BAA0B,MAAM,8BAA8B;AACrE,OAAOC,WAAW,MAA2B,eAAe;AAE5D,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,IAAI,MAAM,eAAe;AAChC,SAASC,wBAAwB,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,aAAa;AACrF,SAASC,OAAO,EAAiGC,2BAA2B,EAAEC,QAAQ,QAAQ,aAAa;AAC3K,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAO,wBAAwB;AAE/B,MAAMC,sBAAsB,GAAIC,SAAkB,IAAK;EACrD;EACA,MAAMC,OAAO,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;EAC/B,MAAMC,YAAY,GAAG,IAAIC,OAAO,CAAuB,CAACC,OAAO,EAAEC,MAAM,KAAK;IAAA,IAAAC,eAAA;IAC1E,CAAAA,eAAA,GAAAlB,KAAK,CAACmB,QAAQ,cAAAD,eAAA,uBAAdA,eAAA,CAAgBE,UAAU,CAACxB,cAAc,CAACyB,sBAAsB,EAAEC,IAAI,CAACC,SAAS,CAAC;MAC/EZ,OAAO;MACPa,SAAS,EAAE,QAAQ;MACnBC,KAAK,EAAEf,SAAS,IAAI;IACtB,CAAC,CAAC,CAAC,CACAgB,IAAI,CAAEC,GAAG,IAAK;MACb,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACtB,OAAOD,GAAG;MACZ;MACA,MAAM,IAAIE,KAAK,CAAC,iBAAiB,CAAC;IACpC,CAAC,CAAC,CAACH,IAAI,CAAEI,IAAI,IAAK;MAChB;MACA,MAAM;QAAEC,QAAQ;QAAEC,UAAU;QAAEC;MAAU,CAAC,GAAGH,IAAI,CAACA,IAAI;MACrDd,OAAO,CAAC;QAAEe,QAAQ;QAAEC,UAAU;QAAEC;MAAU,CAAC,CAAC;MAC5C;MACA,MAAM,IAAIJ,KAAK,CAACC,IAAI,CAACI,OAAO,CAAC;IAC/B,CAAC,CAAC,CAACC,KAAK,CAAEC,CAAC,IAAKnB,MAAM,CAACmB,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;EACF,MAAMC,cAAc,GAAG,IAAItB,OAAO,CAAuB,CAACuB,CAAC,EAAErB,MAAM,KAAK;IACtEsB,UAAU,CAAC,MAAMtB,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC;EAClC,CAAC,CAAC;EACF,OAAOF,OAAO,CAACyB,IAAI,CAAC,CAAC1B,YAAY,EAAEuB,cAAc,CAAC,CAAC;AACrD,CAAC;AAED,MAAMI,eAAe,SAASxD,KAAK,CAACyD,SAAS,CAAC;EAoD5CC,WAAWA,CAACC,KAAU,EAAE;IACtB,KAAK,CAACA,KAAK,CAAC;IApDd;AACF;AACA;IAFE,KAGAC,GAAG,GAAG5D,KAAK,CAAC6D,SAAS,CAAiB,CAAC;IAEvC;AACF;AACA;IAFE,KAGAC,WAAW,GAAG,CAAC;IAEf;AACF;AACA;IAFE,KAGAC,aAAa;IAKb;AACF;AACA;IAFE,KAGAC,UAAU,GAGJ,EAAE;IAER;AACF;AACA;IAFE,KAGAC,gBAAgB;IAAA,KAEhBC,cAAc,GAAQ,EAAE;IAAA,KAExBC,qBAAqB,GAAQ,EAAE;IAAA,KAE/BC,SAAS;IAAA,KAETC,UAAU;IAAA,KAEVC,QAAQ;IAAA,KAERC,aAAa,GAAa,EAAE;IAAA,KAE5BC,6BAA6B,GAA8B,CAAC,CAAC;IAAA,KAE7DC,YAAY,GAAG,KAAK;IAAA,KAEpBC,SAAS,GAAgC,IAAI;IAAA,KAE7CC,WAAW,GAAkB,IAAI;IAAA,KAwEjCC,sBAAsB,GAAG,YAAY;MACnC,MAAM;QAAEC;MAAsB,CAAC,GAAG9D,KAAK,CAAC+D,QAAQ;MAChD,IAAID,qBAAqB,CAACE,MAAM,KAAK,CAAC,EAAE;QACtC,MAAMC,oBAAoB,GAAGH,qBAAqB,CAAC,CAAC,CAAC;QACrD,MAAM;UAAEI;QAAM,CAAC,GAAGD,oBAAoB,CAACE,eAAe;QACtD,MAAMC,YAAY,GAAGF,KAAK,IAAIA,KAAK,CAACF,MAAM,GAAG,CAAC,GAAGE,KAAK,CAAC,CAAC,CAAC,CAACG,QAAQ,GAAG,KAAK;QAC1E,IAAID,YAAY,EAAE;UAAA,IAAAE,qBAAA;UAChB,MAAM;YAAEC,aAAa;YAAEC;UAAa,CAAC,GAAGxE,KAAK,CAACyE,KAAK;UACnD,MAAMC,SAAS,IAAAJ,qBAAA,GAAGL,oBAAoB,CAACU,OAAO,CAACJ,aAAa,CAAC,cAAAD,qBAAA,uBAA3CA,qBAAA,CAA6CM,MAAM,CAACJ,YAAY,CAAC;UACnF,IAAI,CAACZ,WAAW,GAAG,MAAMzD,WAAW,CAClCH,KAAK,CAAC6E,aAAa,CAAC7E,KAAK,CAACyE,KAAK,CAACK,WAAW,CAACP,aAAa,EAAEC,YAAY,CAAC,CAAC,EACzExE,KAAK,CAACyE,KAAK,CAACM,oBAAoB,EAChCL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEM,KAAK,EAChBhF,KAAK,CAACyE,KAAK,CAACQ,cAAc,CAACV,aAAa,CAAC,EACzCC,YAAY,GAAG,CACjB,CAAC;QACH;MACF;IACF,CAAC;IAAA,KAEDU,SAAS,GAAG,YAAY;MACtB,MAAMjB,oBAAoB,GAAGjE,KAAK,CAAC+D,QAAQ,CAACD,qBAAqB,CAAC,CAAC,CAAC;MACpE,IAAIG,oBAAoB,EAAE;QACxB,MAAM;UAAEC;QAAM,CAAC,GAAGD,oBAAoB,CAACE,eAAe;QACtD,IAAID,KAAK,CAAC,CAAC,CAAC,CAACiB,MAAM,IAAIjB,KAAK,CAAC,CAAC,CAAC,CAACiB,MAAM,CAACC,OAAO,CAAC/E,OAAO,CAACgF,YAAY,CAAC,IAAI,CAAC,EAAE;UAAA,IAAAC,sBAAA;UACzE;UACA,MAAM;YAAEf,aAAa;YAAEC;UAAa,CAAC,GAAGxE,KAAK,CAACyE,KAAK;UACnD,MAAMC,SAAS,IAAAY,sBAAA,GAAGrB,oBAAoB,CAACU,OAAO,CAACJ,aAAa,CAAC,cAAAe,sBAAA,uBAA3CA,sBAAA,CAA6CV,MAAM,CAACJ,YAAY,CAAC;UACnF,IACGP,oBAAoB,CAACF,QAAQ,CAACwB,WAAW,CAACC,WAAW,IAAI,CAACvB,oBAAoB,CAACF,QAAQ,CAAC0B,UAAU,IAClGxB,oBAAoB,CAACE,eAAe,CAACqB,WAAW,IAAI,EAACd,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEe,UAAU,CAAC,EAC5E;YACA;YACA,IAAI,CAAC/B,YAAY,GAAG,IAAI;YACxB,MAAMW,QAAQ,GAAG,MAAMlE,WAAW,CAChCH,KAAK,CAAC6E,aAAa,CAAC7E,KAAK,CAACyE,KAAK,CAACK,WAAW,CAACP,aAAa,EAAEC,YAAY,CAAC,CAAC,EACzExE,KAAK,CAACyE,KAAK,CAACM,oBAAoB,EAChCL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEM,KAAK,EAChBhF,KAAK,CAACyE,KAAK,CAACQ,cAAc,CAACV,aAAa,CAAC,EACzCC,YAAY,GAAG,CACjB,CAAC;YACD,MAAM9D,SAAS,GAAG2D,QAAQ,CAACqB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;YAC3C,IAAI;cAAA,IAAAC,oBAAA;cACF,IAAI,CAACjC,SAAS,GAAG,MAAMlD,sBAAsB,CAACC,SAAS,CAAC;cACxD,MAAMmF,KAAK,GAAG3F,wBAAwB,CAAC,IAAI,CAACyD,SAAS,EAAErD,2BAA2B,CAACwF,QAAQ,GAAAF,oBAAA,GAAE1B,KAAK,CAAC,CAAC,CAAC,CAAC6B,WAAW,cAAAH,oBAAA,uBAApBA,oBAAA,CAAuBvF,OAAO,CAACgF,YAAY,CAAC,CAAC;cAC1I,IAAI,CAAC3B,YAAY,GAAG,KAAK;cACzB;cACA,IAAI,CAACP,cAAc,GAAG/C,gBAAgB,CAAC,IAAI,CAAC+C,cAAc,EAAE0C,KAAK,CAAC;YACpE,CAAC,CAAC,OAAOzD,CAAC,EAAE;cACV,IAAI,CAACsB,YAAY,GAAG,KAAK;YAC3B;UACF;QACF;MACF;IACF,CAAC;IAED;AACF;AACA;AACA;IAHE,KAIAsC,aAAa,GAAI5D,CAAgB,IAAK;MAAA,IAAA6D,MAAA;MACpC,IAAIjG,KAAK,CAACkG,MAAM,CAACC,sBAAsB,IAAI,EAAAF,MAAA,GAAA7D,CAAC,CAACgE,GAAG,cAAAH,MAAA,uBAALA,MAAA,CAAOI,WAAW,CAAC,CAAC,MAAK,OAAO,IAAI,CAAC7F,UAAU,CAAC4B,CAAC,CAACkE,MAAqB,CAAC,EAAE;QACnHlE,CAAC,CAACmE,cAAc,CAAC,CAAC;QAClB,IAAI,CAACC,WAAW,CAAC,CAAC;MACpB;IACF,CAAC;IAED;AACF;AACA;AACA;IAHE,KAIAC,sBAAsB,GAAG,CAACC,MAAW,EAAEC,IAAY,KAAK;MACtD,MAAM;QAAEC;MAAkB,CAAC,GAAG5G,KAAK,CAAC+D,QAAQ;MAC5C,IAAI6C,iBAAiB,CAAC5C,MAAM,KAAK,CAAC,EAAE;QAClC,MAAM6C,gBAAgB,GAAGD,iBAAiB,CAAC,CAAC,CAAC;QAC7C,MAAME,aAAa,GAAGD,gBAAgB,CAACE,YAAY,CAAC,CAAC;QACrD,IAAIC,cAAc;QAClB,IAAIC,qBAAqB;QACzB,QAAQN,IAAI;UACV,KAAK,QAAQ;YACXK,cAAc,GAAGrH,SAAS,CAACmH,aAAa,CAACrB,UAAU,CAAC;YACpDoB,gBAAgB,CAACK,aAAa,CAACR,MAAM,CAAC;YACtC;UACF,KAAK,SAAS;YAAE;cACdO,qBAAqB,GAAGtH,SAAS,CAACmH,aAAa,CAACK,iBAAiB,CAAC;cAClE,MAAM;gBAAE3C,YAAY;gBAAED;cAAc,CAAC,GAAGvE,KAAK,CAACyE,KAAK;cACnD,MAAM2C,QAAQ,GAAG,IAAI,CAAC/D,SAAS,KAAKgE,SAAS;cAC7C,MAAMC,sBAA2C,GAAG,EAAE;cACtD,MAAM;gBAAEH,iBAAiB,GAAG,CAAC;cAAE,CAAC,GAAGN,gBAAgB;cACnD,MAAMU,uBAAuB,GAAGJ,iBAAiB,CAAC5C,aAAa,CAAC;cAChE,MAAMiD,SAAS,GAAG,IAAIC,GAAG,CAACC,MAAM,CAAChB,MAAM,CAAC,IAAI,CAACjD,6BAA6B,CAAC,CAACkE,GAAG,CAAEC,CAAC,IAAKtG,IAAI,CAACC,SAAS,CAACqG,CAAC,CAAC,CAAC,CAAC;cAC1G,IAAIR,QAAQ,IAAII,SAAS,CAACK,IAAI,IAAI,CAAC,EAAE;gBACnC;gBACA,MAAMjD,MAAM,GAAGwC,QAAQ,GACnB,IAAI,CAAC5D,aAAa,GACjBkE,MAAM,CAAChB,MAAM,CAAC,IAAI,CAACjD,6BAA6B,CAAC,CAAC,CAAC,CAAC,IAAI,CAACe,YAAY,CAAE;gBAC5E,KAAK,IAAIsD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlD,MAAM,CAACZ,MAAM,EAAE8D,CAAC,IAAI,CAAC,EAAE;kBAAA,IAAAC,qBAAA;kBACzCT,sBAAsB,CAACU,IAAI,CAAC;oBAC1BC,UAAU,EAAErD,MAAM,CAACkD,CAAC,CAAC;oBACrBrC,UAAU,EAAE;sBAAE,IAAG8B,uBAAuB,aAAvBA,uBAAuB,wBAAAQ,qBAAA,GAAvBR,uBAAuB,CAAG3C,MAAM,CAACkD,CAAC,CAAC,CAAC,cAAAC,qBAAA,uBAApCA,qBAAA,CAAsCtC,UAAU;sBAAE,GAAGiB;oBAAO;kBAC/E,CAAC,CAAC;gBACJ;cACF,CAAC,MAAM;gBACL;gBACA,MAAMwB,SAAS,GAAGR,MAAM,CAACS,IAAI,CAAC,IAAI,CAAC1E,6BAA6B,CAAC;gBACjE,MAAMmB,MAAM,GAAGwD,KAAK,CAACC,IAAI,CAAC,IAAIZ,GAAG,CAACC,MAAM,CAAChB,MAAM,CAAC,IAAI,CAACjD,6BAA6B,CAAC,CAAC6E,OAAO,CAAEC,EAAE,IAAKA,EAAE,CAAC,CAAC,CAAC;gBACzG,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlD,MAAM,CAACZ,MAAM,EAAE8D,CAAC,IAAI,CAAC,EAAE;kBAAA,IAAAU,sBAAA;kBACzC,MAAMP,UAAU,GAAGrD,MAAM,CAACkD,CAAC,CAAC;kBAC5B,MAAMjC,KAAK,GAAG;oBAAE,IAAG0B,uBAAuB,aAAvBA,uBAAuB,wBAAAiB,sBAAA,GAAvBjB,uBAAuB,CAAGU,UAAU,CAAC,cAAAO,sBAAA,uBAArCA,sBAAA,CAAuC/C,UAAU;kBAAC,CAAC;kBACtE,KAAK,IAAIgD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,SAAS,CAAClE,MAAM,EAAEyE,CAAC,IAAI,CAAC,EAAE;oBAC5C,MAAMrC,GAAG,GAAG8B,SAAS,CAACO,CAAC,CAAC;oBACxB,IAAI,IAAI,CAAChF,6BAA6B,CAAC2C,GAAG,CAAC,CAACsC,QAAQ,CAACT,UAAU,CAAC,EAAE;sBAChEpC,KAAK,CAACO,GAAG,CAAC,GAAGM,MAAM,CAACN,GAAG,CAAC;oBAC1B;kBACF;kBACAkB,sBAAsB,CAACU,IAAI,CAAC;oBAC1BC,UAAU;oBACVxC,UAAU,EAAEI;kBACd,CAAC,CAAC;gBACJ;cACF;cACAgB,gBAAgB,CAAC8B,4BAA4B,CAACpE,aAAa,EAAE+C,sBAAsB,CAAC;cACpF;YACF;UACA;YACE;QACJ;QACA,IAAI,CAAC,IAAI,CAACtE,aAAa,EAAE;UACvB,IAAI,CAACA,aAAa,GAAG;YACnB4F,SAAS,EAAE;cAAE,GAAG9B,aAAa;cAAE+B,QAAQ,EAAE;YAAG,CAAC;YAC7CC,SAAS,EAAE;cAAE,GAAGjC,gBAAgB,CAACE,YAAY,CAAC,CAAC;cAAE8B,QAAQ,EAAE;YAAG;UAChE,CAAC;QACH,CAAC,MAAM;UACL,IAAI,CAAC7F,aAAa,GAAG;YACnB4F,SAAS,EAAE;cACT,GAAG,IAAI,CAAC5F,aAAa,CAAC4F,SAAS;cAC/B,IAAG5B,cAAc,IAAI;gBAAEvB,UAAU,EAAEuB;cAAe,CAAC;cACnD,IAAGC,qBAAqB,IAAI;gBAAEE,iBAAiB,EAAEF;cAAsB,CAAC;YAC1E,CAAC;YACD6B,SAAS,EAAE;cAAE,GAAGjC,gBAAgB,CAACE,YAAY,CAAC,CAAC;cAAE8B,QAAQ,EAAE;YAAG;UAChE,CAAC;QACH;MACF;MACA,IAAI,CAACE,aAAa,CAAC,CAAC;IACtB,CAAC;IAED;AACF;AACA;AACA;AACA;AACA;IALE,KAMAC,kBAAkB,GAAG,CAACC,YAA0B,EAAEvC,MAAoE,EAAEwC,cAA6C,KAAK;MACxK,MAAM;QAAE3E,aAAa;QAAEC;MAAa,CAAC,GAAGxE,KAAK,CAACyE,KAAK;MACnD,MAAM0E,UAAU,GAAGF,YAAY,CAACtE,OAAO,CAACJ,aAAa,CAAC;MACtD,MAAM6C,QAAQ,GAAG,IAAI,CAAC/D,SAAS,KAAKgE,SAAS;MAC7C,MAAMG,SAAS,GAAG,IAAIC,GAAG,CAACC,MAAM,CAAChB,MAAM,CAACwC,cAAc,CAAC,CAACvB,GAAG,CAAEC,CAAC,IAAKtG,IAAI,CAACC,SAAS,CAACqG,CAAC,CAAC,CAAC,CAAC;MACtF,IAAIR,QAAQ,IAAII,SAAS,CAACK,IAAI,IAAI,CAAC,EAAE;QACnC;QACA,MAAMnD,SAAS,GAAGyE,UAAU,CAACvE,MAAM,CAACJ,YAAY,CAAC;QACjD,MAAMI,MAAM,GAAIwC,QAAQ,IAAI,CAAC1C,SAAS,CAAC0E,KAAK,IAAI,CAAC1E,SAAS,CAAC2E,SAAS,GAChE,IAAI,CAAC7F,aAAa,GACjBkE,MAAM,CAAChB,MAAM,CAACwC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC1E,YAAY,CAAE;QACxD,MAAM;UAAEoE,SAAS;UAAEE;QAAU,CAAC,GAAGG,YAAY,CAAC/B,aAAa,CAAC3C,aAAa,EAAEK,MAAM,EAAE8B,MAAM,CAAC;QAC1F,IAAI,CAACzD,UAAU,CAAC+E,IAAI,CAAC;UAAEY,SAAS;UAAEE;QAAU,CAAC,CAAC;MAChD,CAAC,MAAM;QACL;QACA,MAAMQ,kBAA0G,GAAG,CAAC,CAAC;QACrH5B,MAAM,CAAChB,MAAM,CAACyC,UAAU,CAACvE,MAAM,CAAC,CAAC2E,OAAO,CAAC,CAAC;UAAEtB,UAAU;UAAExC;QAAW,CAAC,KAAK;UACvE,MAAM+D,aAAa,GAAG;YAAE,GAAG/D;UAAW,CAAC;UACvC,IAAIgE,YAAY,GAAG,KAAK;UACxB/B,MAAM,CAACS,IAAI,CAACe,cAAc,CAAC,CAACK,OAAO,CAAEnD,GAAG,IAAK;YAC3C,IAAI8C,cAAc,CAAC9C,GAAG,CAAC,CAACsC,QAAQ,CAACT,UAAU,CAAC,EAAE;cAAA,IAAAyB,kBAAA;cAC5CF,aAAa,CAACpD,GAAG,CAAC,IAAAsD,kBAAA,GAAGhD,MAAM,CAACjB,UAAU,cAAAiE,kBAAA,uBAAjBA,kBAAA,CAAoBtD,GAAG,CAAC;cAC7CqD,YAAY,GAAG,IAAI;YACrB;UACF,CAAC,CAAC;UACF,IAAIA,YAAY,EAAE;YAChBH,kBAAkB,CAACrB,UAAU,CAAC,GAAG;cAAExC,UAAU,EAAE+D;YAAc,CAAC;UAChE;QACF,CAAC,CAAC;QACFF,kBAAkB,CAAC9E,YAAY,CAAC,GAAG;UAAE,GAAGkC;QAAO,CAAC;QAChD,MAAM;UAAEkC,SAAS;UAAEE;QAAU,CAAC,GAAGG,YAAY,CAACU,oBAAoB,CAACpF,aAAa,EAAE+E,kBAAkB,CAAC;QACrG,IAAI,CAACrG,UAAU,CAAC+E,IAAI,CAAC;UAAEY,SAAS;UAAEE;QAAU,CAAC,CAAC;MAChD;MACA,MAAM9D,KAAK,GAAGhF,KAAK,CAACkG,MAAM,CAAC0D,QAAQ,KAAKrJ,QAAQ,CAACsJ,OAAO,GAAG7J,KAAK,CAACgF,KAAK,CAAC8E,cAAc,CAAC,CAAC,CAAC,GAAG9J,KAAK,CAAC+J,IAAI,CAACC,uBAAuB,CAAC,CAAC;MAC/H,IAAIhF,KAAK,EAAE;QACThF,KAAK,CAACgF,KAAK,CAACiF,cAAc,CAACjF,KAAK,EAAEiE,YAAY,CAAC;MACjD;MACA,IAAI,CAACF,aAAa,CAAC,CAAC;IACtB,CAAC;IAiCD;AACF;AACA;IAFE,KAGAmB,MAAM,GAAG,MAAM;MAAA,IAAAC,iBAAA;MACb,IAAI,CAACpH,WAAW,GAAG,CAAC;MACpB,IAAI,CAACC,aAAa,GAAGqE,SAAS;MAC9B,IAAI,CAACpE,UAAU,GAAG,EAAE;MAEpB,MAAMmH,OAAO,IAAAD,iBAAA,GAAG,IAAI,CAACtH,GAAG,CAACwH,OAAO,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,gBAAgB,CAAC,sGAAsG,CAAC;MAC1J,IAAIF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEpG,MAAM,EAAE;QACnB;QACAoG,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEb,OAAO,CAAEgB,GAAG,IAAK;UACxB,IAAI,CAACxH,WAAW,IAAI,CAAC;UACpBwH,GAAG,CAAuBC,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACAxK,KAAK,CAACkG,MAAM,CAACuE,yBAAyB,CAAC,KAAK,CAAC;QAC7CzK,KAAK,CAACkG,MAAM,CAACwE,aAAa,GAAG,KAAK;QAClC1K,KAAK,CAAC+D,QAAQ,CAAC4G,8BAA8B,CAAC,CAAC;MACjD;IACF,CAAC;IAED;AACF;AACA;IAFE,KAGAnE,WAAW,GAAG,MAAM;MAClB;MACA,MAAMoE,aAAa,GAAGC,QAAQ,CAACP,gBAAgB,CAAC,gDAAgD,CAAC;MACjG,MAAMQ,eAAe,GAAGD,QAAQ,CAACP,gBAAgB,CAAC,kEAAkE,CAAC;MACrH,IAAIM,aAAa,CAAC5G,MAAM,KAAK,CAAC,IAAI8G,eAAe,CAAC9G,MAAM,KAAK,CAAC,EAAE;QAC9D,IAAI,CAACkG,MAAM,CAAC,CAAC;MACf;IACF,CAAC;IApUC/K,cAAc,CAAC,IAAI,EAAE;MACnBgE,cAAc,EAAE/D,UAAU;MAC1BgE,qBAAqB,EAAEhE,UAAU;MACjCiE,SAAS,EAAEjE,UAAU;MACrBkE,UAAU,EAAElE,UAAU;MACtBmE,QAAQ,EAAEnE,UAAU;MACpBsE,YAAY,EAAEtE,UAAU;MACxBuE,SAAS,EAAEvE,UAAU;MACrBwE,WAAW,EAAExE,UAAU;MACvBqE,6BAA6B,EAAErE,UAAU;MACzC8F,SAAS,EAAE7F,MAAM;MACjBwE,sBAAsB,EAAExE;IAC1B,CAAC,CAAC;IAEF,IAAI,CAAC6D,gBAAgB,GAAG5D,QAAQ,CAC9B,MAAMU,KAAK,CAACkG,MAAM,CAACC,sBAAsB,EACzC,MAAM;MACJ,IAAInG,KAAK,CAACkG,MAAM,CAACC,sBAAsB,EAAE;QACvC;QACA,IAAI,CAAC9C,SAAS,GAAGgE,SAAS;QAC1B,IAAI,CAAC/D,UAAU,GAAG+D,SAAS;QAC3B,IAAI,CAAC9D,QAAQ,GAAG8D,SAAS;QACzB;QACA,MAAMR,gBAAgB,GAAG7G,KAAK,CAAC+D,QAAQ,CAAC6C,iBAAiB,CAAC,CAAC,CAAC;QAC5D,IAAIC,gBAAgB,EAAE;UACpB,MAAM;YAAErB,WAAW,EAAEuF,cAAc;YAAEC,kBAAkB,EAAEC;UAAsB,CAAC,GAAGpE,gBAAgB,CAACtB,WAAW;UAC/G,MAAM;YAAE2F;UAAwB,CAAC,GAAGlL,KAAK,CAAC+D,QAAQ;UAClD,MAAMoH,cAAc,GAAGD,uBAAuB,IAAIA,uBAAuB,CAACnH,QAAQ,CAAChC,QAAQ,KAAK8E,gBAAgB,CAAC9E,QAAQ;UACzH,IAAIgJ,cAAc,EAAE;YAClB,IAAIlF,KAAK,GAAGgB,gBAAgB,CAACpB,UAAU;YACvC,IAAI,CAAC,CAACI,KAAK,IAAI6B,MAAM,CAACS,IAAI,CAACtC,KAAK,CAAC,CAAC7B,MAAM,KAAK,CAAC,KAAKmH,cAAc,EAAE;cACjE,MAAMC,SAAS,GAAGF,uBAAuB,CAACnH,QAAQ,CAAC0B,UAAU;cAC7D,IAAI2F,SAAS,EAAE;gBACbvF,KAAK,GAAG;kBAAE,GAAGuF;gBAAU,CAAC;cAC1B;YACF;YACA,IAAI,CAACjI,cAAc,GAAG/C,gBAAgB,CAAC2K,cAAc,CAACM,MAAM,EAAExF,KAAK,CAAC;UACtE;UACA,IAAIoF,qBAAqB,EAAE;YACzB,IAAIpF,KAAK,GAAG7F,KAAK,CAAC+D,QAAQ,CAACuH,qCAAqC,CAACzE,gBAAgB,CAAC;YAClF,IAAI,CAAC,CAAChB,KAAK,IAAI6B,MAAM,CAACS,IAAI,CAACtC,KAAK,CAAC,CAAC7B,MAAM,KAAK,CAAC,KAAKmH,cAAc,EAAE;cAAA,IAAAI,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;cACjE,MAAML,SAAS,IAAAG,qBAAA,GAAGL,uBAAuB,CAACnH,QAAQ,CAACoD,iBAAiB,cAAAoE,qBAAA,wBAAAC,sBAAA,GAAlDD,qBAAA,CAAqDvL,KAAK,CAACyE,KAAK,CAACF,aAAa,CAAC,cAAAiH,sBAAA,wBAAAC,sBAAA,GAA/ED,sBAAA,CAAkFxL,KAAK,CAACyE,KAAK,CAACD,YAAY,CAAC,cAAAiH,sBAAA,uBAA3GA,sBAAA,CAA6GhG,UAAU;cACzI,IAAI2F,SAAS,EAAE;gBACbvF,KAAK,GAAG;kBAAE,GAAGuF;gBAAU,CAAC;cAC1B;YACF;YACA,IAAI,CAAChI,qBAAqB,GAAGhD,gBAAgB,CAAC6K,qBAAqB,CAACI,MAAM,EAAExF,KAAK,CAAC;UACpF;QACF;QACA,IAAI,CAACjC,WAAW,GAAG,IAAI;QACvB,IAAI,CAACC,sBAAsB,CAAC,CAAC;QAC7B;QACA,IAAI,CAACF,SAAS,GAAG,IAAI;QACrB,IAAI,CAACuB,SAAS,CAAC,CAAC;MAClB;IACF,CACF,CAAC;EACH;EAEAwG,iBAAiBA,CAAA,EAAG;IAClBC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC5F,aAAa,CAAC;EACxD;EAEA6F,oBAAoBA,CAAA,EAAG;IACrBF,MAAM,CAACG,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC9F,aAAa,CAAC;IACzD,IAAI,CAAC9C,gBAAgB,CAAC,CAAC;EACzB;EAkMA;AACF;AACA;EACE6F,aAAaA,CAAA,EAAG;IACd,IAAI,CAAChG,WAAW,IAAI,CAAC;IACrB,IAAI,IAAI,CAACA,WAAW,KAAK,CAAC,EAAE;MAAA,IAAAgJ,mBAAA,EAAAC,oBAAA;MAC1B;MACA,MAAMC,SAAS,GAAGjM,KAAK,CAAC+D,QAAQ,CAAC6C,iBAAiB,CAAC,CAAC,CAAC,CAAEG,YAAY,CAAC,CAAC;MACrE,MAAMmF,YAAuB,GAAG;QAC9B,IAAI,EAAAH,mBAAA,OAAI,CAAC/I,aAAa,cAAA+I,mBAAA,uBAAlBA,mBAAA,CAAoBnD,SAAS,KAAIqD,SAAS,CAAC;QAC/CpD,QAAQ,EAAE;MACZ,CAAC;MACD,MAAMsD,YAAuB,GAAG;QAC9B,IAAI,EAAAH,oBAAA,OAAI,CAAChJ,aAAa,cAAAgJ,oBAAA,uBAAlBA,oBAAA,CAAoBlD,SAAS,KAAImD,SAAS,CAAC;QAC/CpD,QAAQ,EAAE;MACZ,CAAC;MACD,IAAI,CAAC5F,UAAU,CAACsG,OAAO,CAAC,CAAC;QAAEX,SAAS;QAAEE;MAAU,CAAC,KAAK;QACpD,IAAIF,SAAS,EAAE;UACbsD,YAAY,CAACrD,QAAQ,CAACb,IAAI,CAACY,SAAS,CAAC;QACvC;QACA,IAAIE,SAAS,EAAE;UACbqD,YAAY,CAACtD,QAAQ,CAACb,IAAI,CAACc,SAAS,CAAC;QACvC;MACF,CAAC,CAAC;MACF9I,KAAK,CAACoM,IAAI,CAACpE,IAAI,CAAC;QAAEqE,SAAS,EAAE,CAACH,YAAY;MAAE,CAAC,EAAE;QAAEG,SAAS,EAAE,CAACF,YAAY;MAAE,CAAC,CAAC;MAC7EnM,KAAK,CAACkG,MAAM,CAACuE,yBAAyB,CAAC,KAAK,CAAC;MAC7CzK,KAAK,CAACkG,MAAM,CAACwE,aAAa,GAAG,KAAK;MAClC1K,KAAK,CAAC+D,QAAQ,CAAC4G,8BAA8B,CAAC,CAAC;IACjD;EACF;EAqCA2B,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEnG;IAAuB,CAAC,GAAGnG,KAAK,CAACkG,MAAM;IAC/C,MAAM;MAAEqG,eAAe;MAAE3F,iBAAiB;MAAE9C;IAAsB,CAAC,GAAG9D,KAAK,CAAC+D,QAAQ;IACpF,IAAI,CAACoC,sBAAsB,IAAIoG,eAAe,IAAI3F,iBAAiB,CAAC5C,MAAM,IAAI,CAAC,EAAE;MAC/E,OAAO,IAAI;IACb;IAEA,MAAM6C,gBAAgB,GAAGD,iBAAiB,CAAC,CAAC,CAAC;IAC7C,MAAM;MAAEpB,WAAW,EAAEuF,cAAc;MAAEC,kBAAkB,EAAEC;IAAsB,CAAC,GAAGpE,gBAAgB,CAACtB,WAAW;IAC/G,MAAMiH,YAAY,GAAG1I,qBAAqB,CAACE,MAAM,KAAK,CAAC,GAAG,CAACF,qBAAqB,CAAC,CAAC,CAAC,CAAC,GAAG4D,MAAM,CAAChB,MAAM,CAACG,gBAAgB,CAAC4F,KAAK,CAAC;IAC5H,MAAMC,kBAAkB,GAAG3B,cAAc,IAAI,IAAI,CAAC5H,cAAc;IAChE,MAAMwJ,yBAAyB,GAAG1B,qBAAqB,IAAI,IAAI,CAAC7H,qBAAqB;IACrF,oBACEnE,KAAA,CAAA2N,aAAA,CAAC/M,KAAK;MACJgN,OAAO;MACPC,SAAS;MACTC,SAAS;MACTC,WAAW,EAAE;QAAEC,CAAC,EAAE,GAAG;QAAEC,CAAC,EAAE;MAAI,CAAE;MAChCC,QAAQ,EAAE,KAAM;MAChBC,MAAM,EAAC,2BAA2B;MAClCC,SAAS,EAAC,iBAAiB;MAC3BC,KAAK,EAAErN,IAAI,CAACsN,SAAS,CAAC,qBAAqB,CAAE;MAC7CC,WAAW,EAAE,IAAI,CAAChH,WAAY;MAAAiH,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAE7B,IAAI,CAACpK,YAAY,gBAAGzE,KAAA,CAAA2N,aAAA,CAACnN,IAAI;MAAAgO,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,gBAC3B7O,KAAA,CAAA2N,aAAA,CAAA3N,KAAA,CAAA8O,QAAA,qBACE9O,KAAA,CAAA2N,aAAA;MAAK/J,GAAG,EAAE,IAAI,CAACA,GAAI;MAACwK,SAAS,EAAC,yBAAyB;MAAAI,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACpD,IAAI,CAAClK,WAAW,iBACf3E,KAAA,CAAA2N,aAAA;MACES,SAAS,EAAC,cAAc;MACxBW,KAAK,EAAE;QACLC,eAAe,EAAE,OAAO,IAAI,CAACrK,WAAW,GAAG;QAC3CsK,MAAM,EAAE,EAAE;QACVC,YAAY,EAAE,EAAE;QAChBC,SAAS,EAAE,CAAC;MACd,CAAE;MAAAX,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACH,CACF,EACApB,kBAAkB,iBACjBzN,KAAA,CAAA2N,aAAA;MAAKS,SAAS,EAAC,yBAAyB;MAAAI,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACtC7O,KAAA,CAAA2N,aAAA;MAAKS,SAAS,EAAC,gCAAgC;MAAAI,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC5C,CAAAjH,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEwH,KAAK,KAAIpO,IAAI,CAACsN,SAAS,CAAC,sCAAsC,EAAE;MAAE7G,MAAM,EAAE;QAAE4H,MAAM,EAAEzH,gBAAgB,CAACwH;MAAM;IAAE,CAAC,CAC9H,CAAC,eACNpP,KAAA,CAAA2N,aAAA,CAAClN,QAAQ;MACP6O,SAAS;MACTC,KAAK,EAAC,MAAM;MACZnD,MAAM,EAAE,IAAI,CAAClI,cAAe;MAC5BsL,UAAU,EAAE1D,cAAc,CAAC0D,UAAW;MACtCC,OAAO,EAAE3D,cAAc,CAAC2D,OAAQ;MAChCC,KAAK,EAAE5D,cAAc,CAAC4D,KAAM;MAC5BC,QAAQ,EAAGC,GAAG,IAAK,IAAI,CAACpI,sBAAsB,CAACoI,GAAG,EAAE,QAAQ,CAAE;MAAApB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC/D,CACE,CACN,EACAnB,yBAAyB,iBACxB1N,KAAA,CAAA2N,aAAA;MAAKS,SAAS,EAAC,yBAAyB;MAAAI,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACtC7O,KAAA,CAAA2N,aAAA;MAAKS,SAAS,EAAC,gCAAgC;MAAAI,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC5C,CAAAjH,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEwH,KAAK,KAAIpO,IAAI,CAACsN,SAAS,CAAC,uCAAuC,EAAE;MAAE7G,MAAM,EAAE;QAAE4H,MAAM,EAAEzH,gBAAgB,CAACwH;MAAM;IAAE,CAAC,CAC/H,CAAC,eACNpP,KAAA,CAAA2N,aAAA,CAAClN,QAAQ;MACP6O,SAAS,EAAE,CAAC7B,kBAAmB;MAC/B8B,KAAK,EAAC,MAAM;MACZnD,MAAM,EAAE,IAAI,CAACjI,qBAAsB;MACnCqL,UAAU,EAAExD,qBAAqB,CAACwD,UAAW;MAC7CC,OAAO,EAAEzD,qBAAqB,CAACyD,OAAQ;MACvCC,KAAK,EAAE1D,qBAAqB,CAAC0D,KAAM;MACnCC,QAAQ,EAAGC,GAAG,IAAK,IAAI,CAACpI,sBAAsB,CAACoI,GAAG,EAAE,SAAS,CAAE;MAC/DC,WAAW,EAAEA,CAACT,KAAK,EAAEU,KAAK,kBACxB9P,KAAA,CAAA2N,aAAA;QAAKoB,KAAK,EAAE;UAAEgB,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE;QAAgB,CAAE;QAAAxB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAC9DO,KAAK,EAEArO,KAAK,CAACyE,KAAK,CAACyK,UAAU,GAAG,CAAC,CAAC;MAAA,gBAEzBjQ,KAAA,CAAA2N,aAAA,CAAC7M,WAAW;QACV4G,IAAI,EAAE,IAAI,CAACtD,SAAU;QACrB8L,KAAK,EAAE,IAAI,CAAC9L,SAAS,KAAKgE,SAAS,GAAG,IAAI,CAAC/D,UAAU,GAAG+D,SAAU;QAClE+H,GAAG,EAAE,IAAI,CAAC/L,SAAS,KAAKgE,SAAS,GAAG,IAAI,CAAC9D,QAAQ,GAAG8D,SAAU;QAC9DgI,QAAQ,EAAG7L,aAAa,IAAK;UAC3B,IAAI,CAACC,6BAA6B,CAACsL,KAAK,CAACO,IAAI,CAAC,GAAG,CAAC,GAAG9L,aAAa,CAAC;QACrE,CAAE;QAAAiK,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACH,CAGN,CACL;MAAAL,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACH,CACE,CACN,EACAtB,YAAY,CAAC7E,GAAG,CAAC,CAAC4H,IAAI,EAAEzH,CAAC,kBACxB7I,KAAA,CAAA2N,aAAA,CAAC9M,0BAA0B,EAAA4H,MAAA,CAAA8H,MAAA;MACzBpJ,GAAG,EAAEmJ,IAAI,CAACE,EAAG;MACblB,SAAS,EAAE,CAAC7B,kBAAkB,IAAI,CAACC,yBAAyB,IAAI7E,CAAC,KAAK,CAAE;MACxEmB,YAAY,EAAEsG,IAAK;MACnBX,QAAQ,EAAEA,CAAClI,MAAM,EAAEwC,cAAc,KAAK,IAAI,CAACF,kBAAkB,CAACuG,IAAI,EAAE7I,MAAM,EAAEwC,cAAc,CAAE;MAC5FvF,SAAS,EAAE,IAAI,CAACA;IAAU,GACtB,IAAI,CAACN,SAAS,KAAKgE,SAAS,IAAI;MAClChE,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,QAAQ,EAAE,IAAI,CAACA;IACjB,CAAC;MAAAkK,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EACF,CACF,CACE,CAAC,eACN7O,KAAA,CAAA2N,aAAA;MAAKS,SAAS,EAAC,wBAAwB;MAAAI,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACrC7O,KAAA,CAAA2N,aAAA,CAACpN,cAAc;MAACkQ,SAAS,EAAC,UAAU;MAAAjC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAClC7O,KAAA,CAAA2N,aAAA,CAACrN,MAAM;MAACoH,IAAI,EAAC,SAAS;MAACgJ,OAAO,EAAE,IAAI,CAACzF,MAAO;MAAC8D,KAAK,EAAE;QAAE4B,WAAW,EAAE;MAAG,CAAE;MAAAnC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACrE7N,IAAI,CAACsN,SAAS,CAAC,eAAe,CACzB,CACM,CAAC,EAEfvN,KAAK,CAACyE,KAAK,CAACyK,UAAU,GAAG,CAAC,CAAC;IAAA,GACxB1C,YAAY,CAACqD,IAAI,CAAE/H,CAAC,IAAK;MAAA,IAAAgI,qBAAA;MAC1B,MAAMpL,SAAS,IAAAoL,qBAAA,GAAGhI,CAAC,CAACnD,OAAO,CAAC3E,KAAK,CAACyE,KAAK,CAACF,aAAa,CAAC,cAAAuL,qBAAA,uBAApCA,qBAAA,CAAsClL,MAAM,CAAC5E,KAAK,CAACyE,KAAK,CAACD,YAAY,CAAC;MACxF,OAAO,EAACE,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE0E,KAAK,KAAI,EAAC1E,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE2E,SAAS;IACnD,CAAC,CAAC,CAAC;IAAA,gBAEDpK,KAAA,CAAA2N,aAAA,CAAC7M,WAAW;MACVgQ,IAAI,EAAE9P,IAAI,CAACsN,SAAS,CAAC,qBAAqB,CAAE;MAC5C8B,QAAQ,EAAEhQ,MAAM,CAAEmE,aAAa,IAAK;QAClC,IAAI,CAACA,aAAa,GAAGA,aAAa;QAClC,IAAI,CAACF,UAAU,GAAG,GAAGE,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;QAC3C,IAAI,CAACD,QAAQ,GAAG,GAAGC,aAAa,CAACA,aAAa,CAACQ,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE;MAClE,CAAC,CAAE;MACHgM,YAAY,EAAE3Q,MAAM,CAAEsH,IAAI,IAAK;QAC7B,IAAI,CAACtD,SAAS,GAAGsD,IAAI;MACvB,CAAC,CAAE;MAAA8G,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACJ,CAGF,CACL,CAEC,CAAC;EAEZ;AACF;AAEA,eAAe5O,QAAQ,CAACuD,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}