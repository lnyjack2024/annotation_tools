{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\n/**\n * store for validation\n * @class\n */\nexport default class ValidationStore {\n  /**\n   * warnings count\n   * @getter\n   */\n  get warningCount() {\n    return this.warnings.length;\n  }\n\n  /**\n   * has error or blocked issue\n   * @getter\n   */\n  get blocked() {\n    if (!this.rootStore.submitCheck) {\n      return false;\n    }\n    return this.hasCustomError || this.warnings.filter(warning => warning.blockSubmit === true).length > 0;\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * warning list\n     */\n    this.warnings = [];\n    /**\n     * has custom error\n     */\n    this.hasCustomError = false;\n    /**\n     * is checking\n     */\n    this.checking = false;\n    makeAutoObservable(this, {\n      rootStore: false,\n      blocked: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * trigger sync\n   */\n  async sync() {\n    if (this.checking) {\n      return;\n    }\n    await this.defaultSync();\n  }\n\n  /**\n   * trigger default sync\n   * @param isSubmit\n   */\n  async defaultSync() {\n    this.checking = true;\n    const [result] = await Promise.all([this.validate(), new Promise(resolve => {\n      setTimeout(resolve, 300);\n    })]);\n    if (result) {\n      const {\n        results,\n        hasCustomError\n      } = result;\n      this.warnings = results;\n      this.hasCustomError = hasCustomError;\n    }\n    this.checking = false;\n  }\n\n  /**\n   * do validation\n   * @param isSubmit\n   */\n  validate() {\n    const {\n      validationConfig\n    } = this.rootStore;\n    return new Promise(async resolve => {\n      const results = [];\n      let hasCustomError = false;\n\n      // get result link\n      let resultLink = '';\n      if (validationConfig.script) {\n        var _this$rootStore$jobPr;\n        if (typeof ((_this$rootStore$jobPr = this.rootStore.jobProxy) === null || _this$rootStore$jobPr === void 0 ? void 0 : _this$rootStore$jobPr.reviewFrom) === 'string') {\n          resultLink = this.rootStore.jobProxy.reviewFrom;\n        }\n        if (this.rootStore.annotatable) {\n          try {\n            resultLink = (await this.rootStore.saveResult()) || '';\n          } catch (e) {\n            resultLink = '';\n          }\n        }\n      }\n\n      // if (validationConfig.script) {\n      //   try {\n      //     const validateResults = await this.rootStore.jobProxy?.validateContent?.(resultLink, this.rootStore.jobProxy?.flowData) || [];\n      //     validateResults.forEach((result: { data: { out_str: any; }; status_code: number; }) => {\n      //       const out = JSON.parse(result?.data?.out_str || '{}');\n      //       if (result?.status_code === 200 && Array.isArray(out)) {\n      //         out.forEach((item) => {\n      //           results.push({\n      //             id: item.id,\n      //             message: item.message,\n      //             info: { ...item.info },\n      //             blockSubmit: item.blockSubmit,\n      //             type: 'script'\n      //           });\n      //         });\n      //       } else {\n      //         hasCustomError = true;\n      //       }\n      //     });\n      //   } catch (error) {\n      //     console.log('script validation error', error);\n      //   }\n      // }\n      resolve({\n        results,\n        hasCustomError\n      });\n    });\n  }\n}","map":{"version":3,"names":["makeAutoObservable","ValidationStore","warningCount","warnings","length","blocked","rootStore","submitCheck","hasCustomError","filter","warning","blockSubmit","constructor","checking","autoBind","sync","defaultSync","result","Promise","all","validate","resolve","setTimeout","results","validationConfig","resultLink","script","_this$rootStore$jobPr","jobProxy","reviewFrom","annotatable","saveResult","e"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/dialogue/validationStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport RootStore from './store';\nimport { Result } from './types';\n\n/**\n * store for validation\n * @class\n */\nexport default class ValidationStore {\n  /**\n   * root store\n   */\n  rootStore;\n\n  /**\n   * warning list\n   */\n  warnings: Result[] = [];\n\n  /**\n   * has custom error\n   */\n  hasCustomError = false;\n\n  /**\n   * is checking\n   */\n  checking = false;\n\n  /**\n   * warnings count\n   * @getter\n   */\n  get warningCount() {\n    return this.warnings.length;\n  }\n\n  /**\n   * has error or blocked issue\n   * @getter\n   */\n  get blocked() {\n    if (!this.rootStore.submitCheck) {\n      return false;\n    }\n    return this.hasCustomError || this.warnings.filter((warning) => warning.blockSubmit === true).length > 0;\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      blocked: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * trigger sync\n   */\n  async sync() {\n    if (this.checking) {\n      return;\n    }\n    await this.defaultSync();\n  }\n\n  /**\n   * trigger default sync\n   * @param isSubmit\n   */\n  async defaultSync() {\n    this.checking = true;\n    const [result] = await Promise.all([\n      this.validate(),\n      new Promise((resolve) => {\n        setTimeout(resolve, 300);\n      }),\n    ]);\n    if (result) {\n      const { results, hasCustomError } = result as ({results: Result[], hasCustomError: boolean});\n      this.warnings = results;\n      this.hasCustomError = hasCustomError;\n    }\n    this.checking = false;\n  }\n\n  /**\n   * do validation\n   * @param isSubmit\n   */\n  validate() {\n    const { validationConfig } = this.rootStore;\n    return new Promise(async (resolve) => {\n      const results: Result[] = [];\n      let hasCustomError = false;\n\n      // get result link\n      let resultLink = '';\n      if (validationConfig.script) {\n        if (typeof this.rootStore.jobProxy?.reviewFrom === 'string') {\n          resultLink = this.rootStore.jobProxy.reviewFrom;\n        }\n        if (this.rootStore.annotatable) {\n          try {\n            resultLink = await this.rootStore.saveResult() || '';\n          } catch (e) {\n            resultLink = '';\n          }\n        }\n      }\n\n      // if (validationConfig.script) {\n      //   try {\n      //     const validateResults = await this.rootStore.jobProxy?.validateContent?.(resultLink, this.rootStore.jobProxy?.flowData) || [];\n      //     validateResults.forEach((result: { data: { out_str: any; }; status_code: number; }) => {\n      //       const out = JSON.parse(result?.data?.out_str || '{}');\n      //       if (result?.status_code === 200 && Array.isArray(out)) {\n      //         out.forEach((item) => {\n      //           results.push({\n      //             id: item.id,\n      //             message: item.message,\n      //             info: { ...item.info },\n      //             blockSubmit: item.blockSubmit,\n      //             type: 'script'\n      //           });\n      //         });\n      //       } else {\n      //         hasCustomError = true;\n      //       }\n      //     });\n      //   } catch (error) {\n      //     console.log('script validation error', error);\n      //   }\n      // }\n      resolve({ results, hasCustomError });\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}