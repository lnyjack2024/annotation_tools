{"ast":null,"code":"import Mousetrap from 'mousetrap';\nimport { Base64 } from 'js-base64';\nimport SettingsStore from './store/SettingsStore';\nimport { parseHotkeysConfig } from './utils';\nexport default function bindKeyboardEvents(ctx, hotkeysCfg) {\n  // default keyboard events\n  Mousetrap.bind(['del', 'backspace'], () => {\n    ctx.delete();\n    return false;\n  });\n  Mousetrap.bind(['ctrl+s', 'command+s'], () => {\n    ctx.save();\n    return false;\n  });\n  Mousetrap.bind('shift+l', () => {\n    SettingsStore.setCrossLineVisible(!SettingsStore.crossLineVisible);\n    return false;\n  });\n  Mousetrap.bind('alt+p', () => {\n    ctx.convertShapeToPolygon();\n    return false;\n  });\n  Mousetrap.bind('shift+ctrl+i', () => {\n    ctx.addCategoryInstancesToCurrentFrame();\n    return false;\n  });\n\n  // configured hotkeys events\n  let hotkeyMap;\n  let hotkeyListener;\n  if (hotkeysCfg) {\n    try {\n      const config = JSON.parse(Base64.decode(hotkeysCfg));\n      hotkeyMap = parseHotkeysConfig(config);\n    } catch (e) {\n      // parse error\n    }\n  }\n  if (hotkeyMap !== undefined) {\n    hotkeyListener = e => {\n      if (hotkeyMap[e.key]) {\n        hotkeyMap[e.key].forEach(i => ctx.handleHotkey(i));\n      }\n    };\n    window.addEventListener('keyup', hotkeyListener);\n  }\n  return () => {\n    Mousetrap.unbind(['del', 'backspace']);\n    Mousetrap.unbind(['ctrl+s', 'command+s']);\n    Mousetrap.unbind('shift+l');\n    Mousetrap.unbind('alt+p');\n    Mousetrap.unbind('shift+ctrl+i');\n    if (hotkeyListener !== undefined) {\n      window.removeEventListener('keyup', hotkeyListener);\n    }\n  };\n}","map":{"version":3,"names":["Mousetrap","Base64","SettingsStore","parseHotkeysConfig","bindKeyboardEvents","ctx","hotkeysCfg","bind","delete","save","setCrossLineVisible","crossLineVisible","convertShapeToPolygon","addCategoryInstancesToCurrentFrame","hotkeyMap","hotkeyListener","config","JSON","parse","decode","e","undefined","key","forEach","i","handleHotkey","window","addEventListener","unbind","removeEventListener"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking/keyboard-events.ts"],"sourcesContent":["import Mousetrap from 'mousetrap';\nimport { Base64 } from 'js-base64';\nimport { VideoTracking } from './index';\nimport SettingsStore from './store/SettingsStore';\nimport { parseHotkeysConfig } from './utils';\nimport { HotkeyItem } from './types';\n\nexport default function bindKeyboardEvents(ctx: VideoTracking, hotkeysCfg?: string) {\n  // default keyboard events\n  Mousetrap.bind(['del', 'backspace'], () => {\n    ctx.delete();\n    return false;\n  });\n  Mousetrap.bind(['ctrl+s', 'command+s'], () => {\n    ctx.save();\n    return false;\n  });\n  Mousetrap.bind('shift+l', () => {\n    SettingsStore.setCrossLineVisible(!SettingsStore.crossLineVisible);\n    return false;\n  });\n  Mousetrap.bind('alt+p', () => {\n    ctx.convertShapeToPolygon();\n    return false;\n  });\n  Mousetrap.bind('shift+ctrl+i', () => {\n    ctx.addCategoryInstancesToCurrentFrame();\n    return false;\n  });\n\n  // configured hotkeys events\n  let hotkeyMap: {[key: string]: HotkeyItem[]} | undefined;\n  let hotkeyListener: (event: KeyboardEvent) => void | undefined;\n  if (hotkeysCfg) {\n    try {\n      const config = JSON.parse(Base64.decode(hotkeysCfg));\n      hotkeyMap = parseHotkeysConfig(config);\n    } catch (e) {\n      // parse error\n    }\n  }\n  if (hotkeyMap !== undefined) {\n    hotkeyListener = (e: KeyboardEvent) => {\n      if (hotkeyMap![e.key]) {\n        hotkeyMap![e.key].forEach((i) => ctx.handleHotkey(i));\n      }\n    };\n    window.addEventListener('keyup', hotkeyListener);\n  }\n\n  return () => {\n    Mousetrap.unbind(['del', 'backspace']);\n    Mousetrap.unbind(['ctrl+s', 'command+s']);\n    Mousetrap.unbind('shift+l');\n    Mousetrap.unbind('alt+p');\n    Mousetrap.unbind('shift+ctrl+i');\n    if (hotkeyListener !== undefined) {\n      window.removeEventListener('keyup', hotkeyListener);\n    }\n  };\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,SAASC,MAAM,QAAQ,WAAW;AAElC,OAAOC,aAAa,MAAM,uBAAuB;AACjD,SAASC,kBAAkB,QAAQ,SAAS;AAG5C,eAAe,SAASC,kBAAkBA,CAACC,GAAkB,EAAEC,UAAmB,EAAE;EAClF;EACAN,SAAS,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,EAAE,MAAM;IACzCF,GAAG,CAACG,MAAM,CAAC,CAAC;IACZ,OAAO,KAAK;EACd,CAAC,CAAC;EACFR,SAAS,CAACO,IAAI,CAAC,CAAC,QAAQ,EAAE,WAAW,CAAC,EAAE,MAAM;IAC5CF,GAAG,CAACI,IAAI,CAAC,CAAC;IACV,OAAO,KAAK;EACd,CAAC,CAAC;EACFT,SAAS,CAACO,IAAI,CAAC,SAAS,EAAE,MAAM;IAC9BL,aAAa,CAACQ,mBAAmB,CAAC,CAACR,aAAa,CAACS,gBAAgB,CAAC;IAClE,OAAO,KAAK;EACd,CAAC,CAAC;EACFX,SAAS,CAACO,IAAI,CAAC,OAAO,EAAE,MAAM;IAC5BF,GAAG,CAACO,qBAAqB,CAAC,CAAC;IAC3B,OAAO,KAAK;EACd,CAAC,CAAC;EACFZ,SAAS,CAACO,IAAI,CAAC,cAAc,EAAE,MAAM;IACnCF,GAAG,CAACQ,kCAAkC,CAAC,CAAC;IACxC,OAAO,KAAK;EACd,CAAC,CAAC;;EAEF;EACA,IAAIC,SAAoD;EACxD,IAAIC,cAA0D;EAC9D,IAAIT,UAAU,EAAE;IACd,IAAI;MACF,MAAMU,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACjB,MAAM,CAACkB,MAAM,CAACb,UAAU,CAAC,CAAC;MACpDQ,SAAS,GAAGX,kBAAkB,CAACa,MAAM,CAAC;IACxC,CAAC,CAAC,OAAOI,CAAC,EAAE;MACV;IAAA;EAEJ;EACA,IAAIN,SAAS,KAAKO,SAAS,EAAE;IAC3BN,cAAc,GAAIK,CAAgB,IAAK;MACrC,IAAIN,SAAS,CAAEM,CAAC,CAACE,GAAG,CAAC,EAAE;QACrBR,SAAS,CAAEM,CAAC,CAACE,GAAG,CAAC,CAACC,OAAO,CAAEC,CAAC,IAAKnB,GAAG,CAACoB,YAAY,CAACD,CAAC,CAAC,CAAC;MACvD;IACF,CAAC;IACDE,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEZ,cAAc,CAAC;EAClD;EAEA,OAAO,MAAM;IACXf,SAAS,CAAC4B,MAAM,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IACtC5B,SAAS,CAAC4B,MAAM,CAAC,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACzC5B,SAAS,CAAC4B,MAAM,CAAC,SAAS,CAAC;IAC3B5B,SAAS,CAAC4B,MAAM,CAAC,OAAO,CAAC;IACzB5B,SAAS,CAAC4B,MAAM,CAAC,cAAc,CAAC;IAChC,IAAIb,cAAc,KAAKM,SAAS,EAAE;MAChCK,MAAM,CAACG,mBAAmB,CAAC,OAAO,EAAEd,cAAc,CAAC;IACrD;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}