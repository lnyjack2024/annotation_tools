{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"maxScrollSize\"];\n/*:: import type {Alignment, CellSizeGetter, VisibleCellRange} from '../types';*/\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n/*:: type ContainerSizeAndOffset = {\n  containerSize: number,\n  offset: number,\n};*/\n/*:: type Params = {\n  maxScrollSize?: number,\n  cellCount: number,\n  cellSizeGetter: CellSizeGetter,\n  estimatedCellSize: number,\n};*/\n/**\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\n */\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager = /*#__PURE__*/function () {\n  function ScalingCellSizeAndPositionManager(_ref /*:: */) {\n    var _ref$maxScrollSize = _ref /*:: */.maxScrollSize,\n      maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n      params = _objectWithoutProperties(_ref /*:: */, _excluded);\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n    _defineProperty(this, \"_cellSizeAndPositionManager\", void 0);\n    _defineProperty(this, \"_maxScrollSize\", void 0);\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n  return _createClass(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() /*: boolean*/{\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params\n    /*: {\n        cellCount: number,\n        estimatedCellSize: number,\n        cellSizeGetter: CellSizeGetter,\n      }*/) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() /*: number*/{\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() /*: number*/{\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() /*: number*/{\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2 /*:: */) /*: number*/{\n      var containerSize = _ref2 /*:: */.containerSize,\n        offset = _ref2 /*:: */.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index /*: number*/) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n\n    /** See CellSizeAndPositionManager#getTotalSize */\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() /*: number*/{\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3 /*:: */) {\n      var _ref3$align = _ref3 /*:: */.align,\n        align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n        containerSize = _ref3 /*:: */.containerSize,\n        currentOffset = _ref3 /*:: */.currentOffset,\n        targetIndex = _ref3 /*:: */.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4 /*:: */) /*: VisibleCellRange*/{\n      var containerSize = _ref4 /*:: */.containerSize,\n        offset = _ref4 /*:: */.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index /*: number*/) /*: void*/{\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5 /*:: */) {\n      var containerSize = _ref5 /*:: */.containerSize,\n        offset = _ref5 /*:: */.offset,\n        totalSize = _ref5 /*:: */.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6 /*:: */) /*: number*/{\n      var containerSize = _ref6 /*:: */.containerSize,\n        offset = _ref6 /*:: */.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7 /*:: */) /*: number*/{\n      var containerSize = _ref7 /*:: */.containerSize,\n        offset = _ref7 /*:: */.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n}();\nexport { ScalingCellSizeAndPositionManager as default };","map":{"version":3,"names":["_objectWithoutProperties","_classCallCheck","_createClass","_defineProperty","_excluded","CellSizeAndPositionManager","getMaxElementSize","ScalingCellSizeAndPositionManager","_ref","_ref$maxScrollSize","maxScrollSize","params","_cellSizeAndPositionManager","_maxScrollSize","key","value","areOffsetsAdjusted","getTotalSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","getOffsetAdjustment","_ref2","containerSize","offset","totalSize","safeTotalSize","offsetPercentage","_getOffsetPercentage","Math","round","getSizeAndPositionOfCell","index","getSizeAndPositionOfLastMeasuredCell","min","getUpdatedOffsetForIndex","_ref3","_ref3$align","align","currentOffset","targetIndex","_safeOffsetToOffset","_offsetToSafeOffset","getVisibleCellRange","_ref4","resetCell","_ref5","_ref6","_ref7","default"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/node_modules/react-virtualized/dist/es/Grid/utils/ScalingCellSizeAndPositionManager.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"maxScrollSize\"];\n/*:: import type {Alignment, CellSizeGetter, VisibleCellRange} from '../types';*/\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n/*:: type ContainerSizeAndOffset = {\n  containerSize: number,\n  offset: number,\n};*/\n/*:: type Params = {\n  maxScrollSize?: number,\n  cellCount: number,\n  cellSizeGetter: CellSizeGetter,\n  estimatedCellSize: number,\n};*/\n/**\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\n */\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager = /*#__PURE__*/function () {\n  function ScalingCellSizeAndPositionManager(_ref /*:: */) {\n    var _ref$maxScrollSize = _ref /*:: */.maxScrollSize,\n      maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n      params = _objectWithoutProperties(_ref /*:: */, _excluded);\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n    _defineProperty(this, \"_cellSizeAndPositionManager\", void 0);\n    _defineProperty(this, \"_maxScrollSize\", void 0);\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n  return _createClass(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() /*: boolean*/{\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params\n    /*: {\n        cellCount: number,\n        estimatedCellSize: number,\n        cellSizeGetter: CellSizeGetter,\n      }*/\n    ) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() /*: number*/{\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() /*: number*/{\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() /*: number*/{\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2 /*:: */) /*: number*/{\n      var containerSize = _ref2 /*:: */.containerSize,\n        offset = _ref2 /*:: */.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index /*: number*/) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n\n    /** See CellSizeAndPositionManager#getTotalSize */\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() /*: number*/{\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3 /*:: */) {\n      var _ref3$align = _ref3 /*:: */.align,\n        align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n        containerSize = _ref3 /*:: */.containerSize,\n        currentOffset = _ref3 /*:: */.currentOffset,\n        targetIndex = _ref3 /*:: */.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4 /*:: */) /*: VisibleCellRange*/{\n      var containerSize = _ref4 /*:: */.containerSize,\n        offset = _ref4 /*:: */.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index /*: number*/) /*: void*/{\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5 /*:: */) {\n      var containerSize = _ref5 /*:: */.containerSize,\n        offset = _ref5 /*:: */.offset,\n        totalSize = _ref5 /*:: */.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6 /*:: */) /*: number*/{\n      var containerSize = _ref6 /*:: */.containerSize,\n        offset = _ref6 /*:: */.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7 /*:: */) /*: number*/{\n      var containerSize = _ref7 /*:: */.containerSize,\n        offset = _ref7 /*:: */.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n}();\nexport { ScalingCellSizeAndPositionManager as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}