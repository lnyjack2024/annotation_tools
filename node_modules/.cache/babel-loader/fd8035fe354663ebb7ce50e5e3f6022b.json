{"ast":null,"code":"/* eslint-disable no-useless-escape */\nimport { substr, strlen } from 'fbjs/lib/UnicodeUtils';\nimport { EditorState } from 'draft-js';\nimport { uniqueId } from 'lodash';\nconst isEmoji = str => {\n  // move to getSliceHead()\n  // if (!/^([\\uD83C|\\uD83D|\\uD83E][\\uDC00-\\uDFFF][\\u200D|\\uFE0F]|[\\uD83C|\\uD83D|\\uD83E][\\uDC00-\\uDFFF]|[0-9|*|#]\\uFE0F\\u20E3|[0-9|#]\\u20E3|[\\u203C-\\u3299]\\uFE0F\\u200D|[\\u203C-\\u3299]\\uFE0F|[\\u2122-\\u2B55]|\\u303D|[\\A9|\\AE]\\u3030|\\uA9|\\uAE|\\u3030)/.test(str)) return substr(str, 0, 1);\n  const joiner = '\\u{200D}';\n  const split = str.split(joiner);\n  let count = 0;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const s of split) {\n    // removing the variation selectors\n    const num = Array.from(s.split(/[\\ufe00-\\ufe0f]|[\\u2642]/).join('')).length;\n    count += num;\n  }\n  // assuming the joiners are used appropriately\n  return count / split.length === 1;\n};\nexport const isArabic = str => /^\\s*[\\u0600-\\u06ff]+/g.test(str);\nexport const convertArrayToColor = array => array.map((item, index) => `${index ? '' : '#'}${Math.floor(item) < 16 ? '0' : ''}${Math.floor(item).toString(16)}`).join('');\nexport const convertColorToArray = color => [parseInt(color.slice(1, 3), 16), parseInt(color.slice(3, 5), 16), parseInt(color.slice(5, 7), 16)];\n\n// handle slice begin with emoji\nexport const getSliceHead = str => {\n  // eslint-disable-next-line no-misleading-character-class\n  if (!/^([\\uD83C|\\uD83D|\\uD83E][\\uDC00-\\uDFFF][\\u200D|\\uFE0F]|[\\uD83C|\\uD83D|\\uD83E][\\uDC00-\\uDFFF]|[0-9|*|#]\\uFE0F\\u20E3|[0-9|#]\\u20E3|[\\u203C-\\u3299]\\uFE0F\\u200D|[\\u203C-\\u3299]\\uFE0F|[\\u2122-\\u2B55]|\\u303D|[\\A9|\\AE]\\u3030|\\uA9|\\uAE|\\u3030)/.test(str)) return substr(str, 0, 1);\n  const MAX_EMOJI_LENGTH = 8;\n  const length = Math.min(strlen(str), MAX_EMOJI_LENGTH);\n  for (let i = length; i > 0; i -= 1) {\n    const head = substr(str, 0, i);\n    if (isEmoji(head)) return head;\n  }\n  console.warning('getSliceHead: warning');\n  return substr(str, 0, 1);\n};\nexport const setSelection = (editorState, start, end) => {\n  let selection = editorState.getSelection();\n  selection = selection.set('focusOffset', start).set('anchorOffset', end);\n  editorState = EditorState.forceSelection(editorState, selection);\n  return editorState;\n};\nexport const closeSelection = editorState => {\n  let selection = editorState.getSelection();\n  selection = selection.set('anchorOffset', selection.get('focusOffset'));\n  editorState = EditorState.forceSelection(editorState, selection);\n  return editorState;\n};\nexport const getTextByInsertion = (text, insertion) => {\n  const length = strlen(text);\n  if (insertion.at >= 5 && insertion.at <= length - 5) return `${substr(text, insertion.at - 5, 5)}*${insertion.value}*${substr(text, insertion.at, 5)}`;\n  if (insertion.at >= 5) return `${substr(text, insertion.at - 5, 5)}*${insertion.value}*${substr(text, insertion.at, length - insertion.at)}`;\n  if (insertion.at <= length - 5) return `${substr(text, 0, insertion.at)}*${insertion.value}*${substr(text, insertion.at, 5)}`;\n  return `${substr(text, 0, insertion.at)}*${insertion.value}*${substr(text, insertion.at, length - insertion.at)}`;\n};\n\n// id manager\nexport const idManager = () => {\n  const idList = [];\n  return {\n    generateID: head => {\n      let id;\n      do {\n        id = uniqueId(`${head}_`);\n      } while (idList.indexOf(id) !== -1);\n      idList.push(id);\n      return id;\n    },\n    clear: () => {\n      idList.length = 0;\n    },\n    checkAndInsert: (id, head) => {\n      if (!id || idList.indexOf(id) !== -1) return this.generateID(head);\n      idList.push(id);\n      return id;\n    }\n  };\n};\n\n// used to get wrapper dom from active dom\nexport const getTargetWrapperDataSet = e => {\n  let target = e.target || e.srcElement;\n  while (target.className.indexOf('wrapper') === -1) {\n    target = target.parentNode;\n  }\n  return target.dataset;\n};\nexport const getNextInLoopList = (list, src, step) => {\n  let index = src + step;\n  const len = list.length;\n  while (index < 0) index += len;\n  return list[index % len];\n};","map":{"version":3,"names":["substr","strlen","EditorState","uniqueId","isEmoji","str","joiner","split","count","s","num","Array","from","join","length","isArabic","test","convertArrayToColor","array","map","item","index","Math","floor","toString","convertColorToArray","color","parseInt","slice","getSliceHead","MAX_EMOJI_LENGTH","min","i","head","console","warning","setSelection","editorState","start","end","selection","getSelection","set","forceSelection","closeSelection","get","getTextByInsertion","text","insertion","at","value","idManager","idList","generateID","id","indexOf","push","clear","checkAndInsert","getTargetWrapperDataSet","e","target","srcElement","className","parentNode","dataset","getNextInLoopList","list","src","step","len"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/editable-text/utils/helper.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\nimport { substr, strlen } from 'fbjs/lib/UnicodeUtils';\nimport { EditorState } from 'draft-js';\nimport { uniqueId } from 'lodash';\n\nconst isEmoji = (str) => {\n  // move to getSliceHead()\n  // if (!/^([\\uD83C|\\uD83D|\\uD83E][\\uDC00-\\uDFFF][\\u200D|\\uFE0F]|[\\uD83C|\\uD83D|\\uD83E][\\uDC00-\\uDFFF]|[0-9|*|#]\\uFE0F\\u20E3|[0-9|#]\\u20E3|[\\u203C-\\u3299]\\uFE0F\\u200D|[\\u203C-\\u3299]\\uFE0F|[\\u2122-\\u2B55]|\\u303D|[\\A9|\\AE]\\u3030|\\uA9|\\uAE|\\u3030)/.test(str)) return substr(str, 0, 1);\n  const joiner = '\\u{200D}';\n  const split = str.split(joiner);\n  let count = 0;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const s of split) {\n    // removing the variation selectors\n    const num = Array.from(s.split(/[\\ufe00-\\ufe0f]|[\\u2642]/).join('')).length;\n    count += num;\n  }\n  // assuming the joiners are used appropriately\n  return (count / split.length) === 1;\n};\n\nexport const isArabic = (str) => (/^\\s*[\\u0600-\\u06ff]+/g.test(str));\n\nexport const convertArrayToColor = (array) => array.map((item, index) => `${index ? '' : '#'}${Math.floor(item) < 16 ? '0' : ''}${Math.floor(item).toString(16)}`).join('');\n\nexport const convertColorToArray = (color) => ([\n  parseInt(color.slice(1, 3), 16),\n  parseInt(color.slice(3, 5), 16),\n  parseInt(color.slice(5, 7), 16),\n]);\n\n// handle slice begin with emoji\nexport const getSliceHead = (str) => {\n  // eslint-disable-next-line no-misleading-character-class\n  if (!/^([\\uD83C|\\uD83D|\\uD83E][\\uDC00-\\uDFFF][\\u200D|\\uFE0F]|[\\uD83C|\\uD83D|\\uD83E][\\uDC00-\\uDFFF]|[0-9|*|#]\\uFE0F\\u20E3|[0-9|#]\\u20E3|[\\u203C-\\u3299]\\uFE0F\\u200D|[\\u203C-\\u3299]\\uFE0F|[\\u2122-\\u2B55]|\\u303D|[\\A9|\\AE]\\u3030|\\uA9|\\uAE|\\u3030)/.test(str)) return substr(str, 0, 1);\n  const MAX_EMOJI_LENGTH = 8;\n  const length = Math.min(strlen(str), MAX_EMOJI_LENGTH);\n  for (let i = length; i > 0; i -= 1) {\n    const head = substr(str, 0, i);\n    if (isEmoji(head)) return head;\n  }\n  console.warning('getSliceHead: warning');\n  return substr(str, 0, 1);\n};\n\nexport const setSelection = (editorState, start, end) => {\n  let selection = editorState.getSelection();\n  selection = selection.set('focusOffset', start).set('anchorOffset', end);\n  editorState = EditorState.forceSelection(editorState, selection);\n  return editorState;\n};\n\nexport const closeSelection = (editorState) => {\n  let selection = editorState.getSelection();\n  selection = selection.set('anchorOffset', selection.get('focusOffset'));\n  editorState = EditorState.forceSelection(editorState, selection);\n  return editorState;\n};\n\nexport const getTextByInsertion = (text, insertion) => {\n  const length = strlen(text);\n  if (insertion.at >= 5 && insertion.at <= length - 5) return `${substr(text, insertion.at - 5, 5)}*${insertion.value}*${substr(text, insertion.at, 5)}`;\n  if (insertion.at >= 5) return `${substr(text, insertion.at - 5, 5)}*${insertion.value}*${substr(text, insertion.at, length - insertion.at)}`;\n  if (insertion.at <= length - 5) return `${substr(text, 0, insertion.at)}*${insertion.value}*${substr(text, insertion.at, 5)}`;\n  return `${substr(text, 0, insertion.at)}*${insertion.value}*${substr(text, insertion.at, length - insertion.at)}`;\n};\n\n// id manager\nexport const idManager = () => {\n  const idList = [];\n  return {\n    generateID: (head) => {\n      let id;\n      do { id = uniqueId(`${head}_`); } while (idList.indexOf(id) !== -1);\n      idList.push(id);\n      return id;\n    },\n    clear: () => {\n      idList.length = 0;\n    },\n    checkAndInsert: (id, head) => {\n      if (!id || idList.indexOf(id) !== -1) return this.generateID(head);\n      idList.push(id);\n      return id;\n    }\n  };\n};\n\n// used to get wrapper dom from active dom\nexport const getTargetWrapperDataSet = (e) => {\n  let target = e.target || e.srcElement;\n  while (target.className.indexOf('wrapper') === -1) {\n    target = target.parentNode;\n  }\n  return target.dataset;\n};\n\nexport const getNextInLoopList = (list, src, step) => {\n  let index = src + step;\n  const len = list.length;\n  while (index < 0) index += len;\n  return list[index % len];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}