{"ast":null,"code":"var _jsxFileName = \"/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking/components/GridView.tsx\";\nimport React from 'react';\nimport { Slider } from 'antd';\nimport GridCanvas from '../../common/shapes/canvas/GridCanvas';\nimport { SelectedStyle } from '../../common/shapes/canvas/GridContainer';\nimport { BorderStyle, EventAction } from '../../common/shapes/Shape';\nimport { Frames, Aim } from '../../common/icons';\nimport i18n from '../locales';\nimport { ReviewResult } from '../types';\nimport { predictShapeData } from '../utils';\nimport ReviewsStore from '../store/ReviewsStore';\nimport './GridView.scss';\nconst gridSizes = [200, 300, 400, 600, 800];\nexport default class GridView extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gridSizeIndex: 2\n    };\n    /**\n     * grid canvas ref\n     */\n    this.gridCanvasRef = React.createRef();\n    /**\n     * get shapes in grid\n     * @param gridIndex\n     * @returns\n     */\n    this.getShapesForGrid = gridIndex => {\n      var _this$gridCanvasRef$c;\n      return ((_this$gridCanvasRef$c = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c === void 0 ? void 0 : _this$gridCanvasRef$c.getGridShapes(gridIndex)) || [];\n    };\n    /**\n     * create shapes for grid\n     * @param gridIndex\n     * @param container\n     * @param imageBounds\n     * @returns\n     */\n    this.createShapesForGrid = (gridIndex, container, imageBounds) => {\n      const shapes = [];\n      const {\n        readonly,\n        instances,\n        selectedInstanceId,\n        selectedCategoryColor,\n        createShape,\n        updateShape,\n        getInstanceLabel\n      } = this.props;\n      const selectedInstance = instances[selectedInstanceId];\n      if (selectedInstance) {\n        const label = getInstanceLabel(selectedInstance);\n        const {\n          frames\n        } = selectedInstance;\n        let shape;\n        let shapeType;\n        if (frames[gridIndex]) {\n          shapeType = frames[gridIndex].shapeType;\n          shape = createShape(selectedCategoryColor, label, frames[gridIndex].shapeType, frames[gridIndex].shape, container, imageBounds);\n        } else {\n          const shapeInfo = predictShapeData(gridIndex, frames, imageBounds);\n          if (shapeInfo) {\n            // create predict shape\n            shapeType = shapeInfo.shapeType;\n            shape = createShape(selectedCategoryColor, label, shapeInfo.shapeType, shapeInfo.shape, container, imageBounds);\n            shape.borderStyle = BorderStyle.DASHED;\n          }\n        }\n        if (shape && shapeType) {\n          shape.on(EventAction.CHANGED, (s, data) => {\n            updateShape(selectedInstanceId, s, data, shapeType);\n            this.update();\n          });\n          if (readonly) {\n            shape.editable = false;\n          }\n          shape.selected = true; // always true\n          shapes.push(shape);\n        }\n      }\n      return shapes;\n    };\n    /**\n     * add shape to grid\n     * @param gridIndex\n     * @param instanceId\n     */\n    this.addShapeToGrid = (gridIndex, instanceId) => {\n      var _this$gridCanvasRef$c2;\n      const grid = (_this$gridCanvasRef$c2 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c2 === void 0 ? void 0 : _this$gridCanvasRef$c2.getGrid(gridIndex);\n      if (grid) {\n        const shape = this.props.addShapeToInstance(instanceId, grid.container, grid.imageBounds);\n        if (shape) {\n          var _this$gridCanvasRef$c3, _this$gridCanvasRef$c4;\n          const originShapes = ((_this$gridCanvasRef$c3 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c3 === void 0 ? void 0 : _this$gridCanvasRef$c3.getGridShapes(gridIndex)) || [];\n          (_this$gridCanvasRef$c4 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c4 === void 0 ? void 0 : _this$gridCanvasRef$c4.setGridShapes(gridIndex, [...originShapes, shape]);\n        }\n        this.update();\n      }\n    };\n    /**\n     * delete shape vertex or shape itself in specific frame\n     * @param frameIndex\n     * @param instanceId\n     */\n    this.delete = (frameIndex, instanceId) => {\n      var _this$gridCanvasRef$c5;\n      const shapes = ((_this$gridCanvasRef$c5 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c5 === void 0 ? void 0 : _this$gridCanvasRef$c5.getGridShapes(frameIndex)) || [];\n      const pointsDeleted = shapes.some(shape => shape.deleteSelectedPoints());\n      if (!pointsDeleted) {\n        this.props.deleteShape(instanceId, [frameIndex]);\n      }\n      this.update();\n    };\n    /**\n     * update all grids shapes\n     */\n    this.update = () => {\n      var _this$gridCanvasRef$c6;\n      (_this$gridCanvasRef$c6 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c6 === void 0 ? void 0 : _this$gridCanvasRef$c6.updateShapes(this.grids);\n    };\n    /**\n     * update grid style\n     * @param frameIndex\n     */\n    this.updateStyle = frameIndex => {\n      var _this$gridCanvasRef$c7;\n      (_this$gridCanvasRef$c7 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c7 === void 0 ? void 0 : _this$gridCanvasRef$c7.updateStyle(frameIndex);\n    };\n    /**\n     * update grid size\n     * @param sizeIndex\n     */\n    this.updateGridSize = sizeIndex => {\n      var _this$gridCanvasRef$c8;\n      this.setState({\n        gridSizeIndex: sizeIndex\n      });\n      const size = gridSizes[sizeIndex];\n      (_this$gridCanvasRef$c8 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c8 === void 0 ? void 0 : _this$gridCanvasRef$c8.updateCanvas(size);\n    };\n  }\n  /**\n   * whether tool has been initialized\n   */\n  get initialized() {\n    return this.props.frames.length > 0;\n  }\n\n  /**\n   * grid items\n   */\n  get grids() {\n    const hasReview = ReviewsStore.isEnabled;\n    const {\n      instances,\n      selectedInstanceId\n    } = this.props;\n    const {\n      frames = {}\n    } = instances[selectedInstanceId] || {};\n    return this.props.frames.map((frame, index) => {\n      let borderColor = 0x1A1B1E;\n      let selectedStyle = SelectedStyle.FILL;\n      if (frames[index]) {\n        borderColor = 0xA4A9BB;\n        if (hasReview) {\n          const reviewResult = ReviewsStore.getReviewResult(index, selectedInstanceId);\n          if (reviewResult) {\n            selectedStyle = SelectedStyle.LINE;\n            if (reviewResult === ReviewResult.APPROVE) {\n              borderColor = 0x3A5F54;\n            } else if (reviewResult === ReviewResult.REJECT) {\n              borderColor = 0x7C433C;\n            } else if (reviewResult === ReviewResult.SUSPEND) {\n              borderColor = 0x897D2E;\n            }\n          }\n        }\n      } else {\n        selectedStyle = SelectedStyle.LINE;\n      }\n      return {\n        imageUrl: frame,\n        title: `${index + 1}`,\n        borderColor,\n        selectedStyle,\n        defaultSelected: index === this.props.currentFrame,\n        ...(frames[index] && frames[index].isKeyFrame && {\n          info: 'key frame ‚óè'\n        })\n      };\n    });\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentFrame !== this.props.currentFrame) {\n      var _this$gridCanvasRef$c9, _this$gridCanvasRef$c0;\n      // current frame changes\n      (_this$gridCanvasRef$c9 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c9 === void 0 ? void 0 : _this$gridCanvasRef$c9.setGridSelected(this.props.currentFrame);\n      (_this$gridCanvasRef$c0 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c0 === void 0 ? void 0 : _this$gridCanvasRef$c0.scrollTo(this.props.currentFrame);\n    }\n    if (prevProps.selectedInstanceId !== this.props.selectedInstanceId || prevProps.labelMode !== this.props.labelMode || prevProps.attributesMode !== this.props.attributesMode) {\n      this.update();\n    }\n  }\n  render() {\n    const {\n      currentFrame,\n      instances,\n      selectedInstanceId,\n      selectedCategoryColor,\n      getInstanceLabel\n    } = this.props;\n    const selectedInstance = instances[selectedInstanceId];\n    return this.initialized && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }\n    }, selectedInstance && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"label-dot\",\n      style: {\n        backgroundColor: selectedCategoryColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }), getInstanceLabel(selectedInstance)), i18n.translate('GRID_SELECTED_LABEL', {\n      values: {\n        frame: currentFrame + 1\n      }\n    }), selectedInstance && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"frames\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Frames, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }), Object.keys(selectedInstance.frames).length)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }\n    }, i18n.translate('GRID_SCALE_LABEL'), /*#__PURE__*/React.createElement(Slider, {\n      tooltipVisible: false,\n      step: 1,\n      min: 0,\n      max: gridSizes.length - 1,\n      value: this.state.gridSizeIndex,\n      onChange: this.updateGridSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon-button\",\n      onClick: () => {\n        var _this$gridCanvasRef$c1;\n        return (_this$gridCanvasRef$c1 = this.gridCanvasRef.current) === null || _this$gridCanvasRef$c1 === void 0 ? void 0 : _this$gridCanvasRef$c1.fitShapes();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Aim, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(GridCanvas, {\n      ref: this.gridCanvasRef,\n      app: this.props.app,\n      grids: this.grids,\n      addShape: this.props.addShape,\n      createShapesForGrid: this.createShapesForGrid,\n      onGridSelected: index => this.props.setFrame(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"names":["React","Slider","GridCanvas","SelectedStyle","BorderStyle","EventAction","Frames","Aim","i18n","ReviewResult","predictShapeData","ReviewsStore","gridSizes","GridView","Component","constructor","args","state","gridSizeIndex","gridCanvasRef","createRef","getShapesForGrid","gridIndex","_this$gridCanvasRef$c","current","getGridShapes","createShapesForGrid","container","imageBounds","shapes","readonly","instances","selectedInstanceId","selectedCategoryColor","createShape","updateShape","getInstanceLabel","props","selectedInstance","label","frames","shape","shapeType","shapeInfo","borderStyle","DASHED","on","CHANGED","s","data","update","editable","selected","push","addShapeToGrid","instanceId","_this$gridCanvasRef$c2","grid","getGrid","addShapeToInstance","_this$gridCanvasRef$c3","_this$gridCanvasRef$c4","originShapes","setGridShapes","delete","frameIndex","_this$gridCanvasRef$c5","pointsDeleted","some","deleteSelectedPoints","deleteShape","_this$gridCanvasRef$c6","updateShapes","grids","updateStyle","_this$gridCanvasRef$c7","updateGridSize","sizeIndex","_this$gridCanvasRef$c8","setState","size","updateCanvas","initialized","length","hasReview","isEnabled","map","frame","index","borderColor","selectedStyle","FILL","reviewResult","getReviewResult","LINE","APPROVE","REJECT","SUSPEND","imageUrl","title","defaultSelected","currentFrame","isKeyFrame","info","componentDidUpdate","prevProps","_this$gridCanvasRef$c9","_this$gridCanvasRef$c0","setGridSelected","scrollTo","labelMode","attributesMode","render","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","translate","values","Object","keys","tooltipVisible","step","min","max","value","onChange","onClick","_this$gridCanvasRef$c1","fitShapes","ref","app","addShape","onGridSelected","setFrame"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking/components/GridView.tsx"],"sourcesContent":["import React from 'react';\nimport { Application, Container, Point } from 'pixi.js';\nimport { Slider } from 'antd';\nimport GridCanvas from '../../common/shapes/canvas/GridCanvas';\nimport { SelectedStyle } from '../../common/shapes/canvas/GridContainer';\nimport { ShapeType, ShapeData } from '../../common/shapes/types';\nimport Shape, { BorderStyle, EventAction } from '../../common/shapes/Shape';\nimport { Frames, Aim } from '../../common/icons';\nimport i18n from '../locales';\nimport { AttributesMode, Instance, ReviewResult } from '../types';\nimport { predictShapeData } from '../utils';\nimport ReviewsStore from '../store/ReviewsStore';\nimport './GridView.scss';\n\ninterface GridViewProps {\n  app: Application;\n  readonly: boolean;\n  labelMode: boolean;\n  attributesMode: AttributesMode;\n  frames: string[];\n  currentFrame: number;\n  instances: { [instanceId: string]: Instance };\n  selectedInstanceId: string;\n  selectedCategoryColor: string;\n  setFrame: (frameIndex: number) => void;\n  addShape: (point: Point, shapeContainer?: Container, imageBounds?: { left: number; top: number; right: number; bottom: number; }) => Shape<ShapeData> | null;\n  createShape: (hexColor: string, label?: string, shapeType?: ShapeType, shapeData?: ShapeData, shapeContainer?: Container, imageBounds?: { left: number; top: number; right: number; bottom: number; }) => Shape<ShapeData>;\n  updateShape: (instanceId: string, shape: Shape<ShapeData>, shapeData: ShapeData, shapeType?: ShapeType) => void;\n  deleteShape: (instanceId: string, frames: number[]) => void;\n  addShapeToInstance: (instanceId: string, shapeContainer?: Container, imageBounds?: { left: number; top: number; right: number; bottom: number; }) => Shape<ShapeData> | null;\n  getInstanceLabel: (instance: Instance) => string;\n}\n\ninterface GridViewState {\n  gridSizeIndex: number;\n}\n\nconst gridSizes = [200, 300, 400, 600, 800];\n\nexport default class GridView extends React.Component<GridViewProps, GridViewState> {\n  state = {\n    gridSizeIndex: 2,\n  };\n\n  /**\n   * grid canvas ref\n   */\n  gridCanvasRef = React.createRef<GridCanvas>();\n\n  /**\n   * whether tool has been initialized\n   */\n  get initialized() {\n    return this.props.frames.length > 0;\n  }\n\n  /**\n   * grid items\n   */\n  get grids() {\n    const hasReview = ReviewsStore.isEnabled;\n    const { instances, selectedInstanceId } = this.props;\n    const { frames = {} } = instances[selectedInstanceId] || {};\n    return this.props.frames.map((frame, index) => {\n      let borderColor = 0x1A1B1E;\n      let selectedStyle = SelectedStyle.FILL;\n\n      if (frames[index]) {\n        borderColor = 0xA4A9BB;\n        if (hasReview) {\n          const reviewResult = ReviewsStore.getReviewResult(index, selectedInstanceId);\n          if (reviewResult) {\n            selectedStyle = SelectedStyle.LINE;\n            if (reviewResult === ReviewResult.APPROVE) {\n              borderColor = 0x3A5F54;\n            } else if (reviewResult === ReviewResult.REJECT) {\n              borderColor = 0x7C433C;\n            } else if (reviewResult === ReviewResult.SUSPEND) {\n              borderColor = 0x897D2E;\n            }\n          }\n        }\n      } else {\n        selectedStyle = SelectedStyle.LINE;\n      }\n\n      return {\n        imageUrl: frame,\n        title: `${index + 1}`,\n        borderColor,\n        selectedStyle,\n        defaultSelected: index === this.props.currentFrame,\n        ...frames[index] && frames[index].isKeyFrame && { info: 'key frame ‚óè' },\n      };\n    });\n  }\n\n  componentDidUpdate(prevProps: GridViewProps) {\n    if (prevProps.currentFrame !== this.props.currentFrame) {\n      // current frame changes\n      this.gridCanvasRef.current?.setGridSelected(this.props.currentFrame);\n      this.gridCanvasRef.current?.scrollTo(this.props.currentFrame);\n    }\n    if (\n      prevProps.selectedInstanceId !== this.props.selectedInstanceId ||\n      prevProps.labelMode !== this.props.labelMode ||\n      prevProps.attributesMode !== this.props.attributesMode\n    ) {\n      this.update();\n    }\n  }\n\n  /**\n   * get shapes in grid\n   * @param gridIndex\n   * @returns\n   */\n  getShapesForGrid = (gridIndex: number) => this.gridCanvasRef.current?.getGridShapes(gridIndex) || [];\n\n  /**\n   * create shapes for grid\n   * @param gridIndex\n   * @param container\n   * @param imageBounds\n   * @returns\n   */\n  createShapesForGrid = (gridIndex: number, container: Container, imageBounds: { left: number; top: number; right: number; bottom: number; }) => {\n    const shapes = [];\n\n    const { readonly, instances, selectedInstanceId, selectedCategoryColor, createShape, updateShape, getInstanceLabel } = this.props;\n    const selectedInstance = instances[selectedInstanceId];\n    if (selectedInstance) {\n      const label = getInstanceLabel(selectedInstance);\n      const { frames } = selectedInstance;\n      let shape;\n      let shapeType: ShapeType | undefined;\n      if (frames[gridIndex]) {\n        shapeType = frames[gridIndex].shapeType;\n        shape = createShape(\n          selectedCategoryColor,\n          label,\n          frames[gridIndex].shapeType,\n          frames[gridIndex].shape,\n          container,\n          imageBounds,\n        );\n      } else {\n        const shapeInfo = predictShapeData(gridIndex, frames, imageBounds);\n        if (shapeInfo) {\n          // create predict shape\n          shapeType = shapeInfo.shapeType;\n          shape = createShape(\n            selectedCategoryColor,\n            label,\n            shapeInfo.shapeType,\n            shapeInfo.shape,\n            container,\n            imageBounds,\n          );\n          shape.borderStyle = BorderStyle.DASHED;\n        }\n      }\n      if (shape && shapeType) {\n        shape.on(EventAction.CHANGED, (s, data) => {\n          updateShape(selectedInstanceId, s, data, shapeType!);\n          this.update();\n        });\n        if (readonly) {\n          shape.editable = false;\n        }\n        shape.selected = true; // always true\n        shapes.push(shape);\n      }\n    }\n\n    return shapes;\n  };\n\n  /**\n   * add shape to grid\n   * @param gridIndex\n   * @param instanceId\n   */\n  addShapeToGrid = (gridIndex: number, instanceId: string) => {\n    const grid = this.gridCanvasRef.current?.getGrid(gridIndex);\n    if (grid) {\n      const shape = this.props.addShapeToInstance(instanceId, grid.container, grid.imageBounds);\n      if (shape) {\n        const originShapes = this.gridCanvasRef.current?.getGridShapes(gridIndex) || [];\n        this.gridCanvasRef.current?.setGridShapes(gridIndex, [...originShapes, shape]);\n      }\n      this.update();\n    }\n  };\n\n  /**\n   * delete shape vertex or shape itself in specific frame\n   * @param frameIndex\n   * @param instanceId\n   */\n  delete = (frameIndex: number, instanceId: string) => {\n    const shapes = this.gridCanvasRef.current?.getGridShapes(frameIndex) || [];\n    const pointsDeleted = shapes.some((shape) => shape.deleteSelectedPoints());\n    if (!pointsDeleted) {\n      this.props.deleteShape(instanceId, [frameIndex]);\n    }\n    this.update();\n  };\n\n  /**\n   * update all grids shapes\n   */\n  update = () => {\n    this.gridCanvasRef.current?.updateShapes(this.grids);\n  };\n\n  /**\n   * update grid style\n   * @param frameIndex\n   */\n  updateStyle = (frameIndex?: number) => {\n    this.gridCanvasRef.current?.updateStyle(frameIndex);\n  };\n\n  /**\n   * update grid size\n   * @param sizeIndex\n   */\n  updateGridSize = (sizeIndex: number) => {\n    this.setState({ gridSizeIndex: sizeIndex });\n    const size = gridSizes[sizeIndex];\n    this.gridCanvasRef.current?.updateCanvas(size);\n  };\n\n  render() {\n    const { currentFrame, instances, selectedInstanceId, selectedCategoryColor, getInstanceLabel } = this.props;\n    const selectedInstance = instances[selectedInstanceId];\n    return this.initialized && (\n      <div className=\"grid-view\">\n        <div className=\"grid-header\">\n          <div>\n            {selectedInstance && (\n              <div className=\"label\">\n                <div\n                  className=\"label-dot\"\n                  style={{ backgroundColor: selectedCategoryColor }}\n                />\n                {getInstanceLabel(selectedInstance)}\n              </div>\n            )}\n            {i18n.translate('GRID_SELECTED_LABEL', { values: { frame: currentFrame + 1 } })}\n            {selectedInstance && (\n              <span className=\"frames\">\n                <Frames />\n                {Object.keys(selectedInstance.frames).length}\n              </span>\n            )}\n          </div>\n          <div>\n            {i18n.translate('GRID_SCALE_LABEL')}\n            <Slider\n              tooltipVisible={false}\n              step={1}\n              min={0}\n              max={gridSizes.length - 1}\n              value={this.state.gridSizeIndex}\n              onChange={this.updateGridSize}\n            />\n            <div\n              className=\"icon-button\"\n              onClick={() => this.gridCanvasRef.current?.fitShapes()}\n            >\n              <Aim />\n            </div>\n          </div>\n        </div>\n        <GridCanvas\n          ref={this.gridCanvasRef}\n          app={this.props.app}\n          grids={this.grids}\n          addShape={this.props.addShape}\n          createShapesForGrid={this.createShapesForGrid}\n          onGridSelected={(index) => this.props.setFrame(index)}\n        />\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}