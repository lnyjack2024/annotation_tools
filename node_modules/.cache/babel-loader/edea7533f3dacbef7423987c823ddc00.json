{"ast":null,"code":"import _applyDecoratedDescriptor from\"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";var _class,_class2;/* eslint-disable no-param-reassign */import React from'react';import{observable,action,makeObservable,computed,reaction}from'mobx';import{observer}from'mobx-react';import Paper from'paper';import{debounce}from'lodash';import hexToRgba from'hex-to-rgba';import imageLoader from'blueimp-load-image';import ImageFilters from'canvas-filters';import ResizeObserver from'resize-observer-polyfill';import{Spin,Button}from'antd';import{LoadingOutlined}from'@ant-design/icons';import Tool from'../tools/Tool';import{AttributesMode}from'../store/SettingsStore';import rootStore from'../store/RootStore';import formatMessage from'../locales';import{CategoryPathShape,LandmarkEditType,LabelStyle,PathStyles}from'../types';import Cursor from'../../common/Cursor';import{resetAttrLabelPosition,getValuesLabel,resizeLabel}from'../utils';import{computeRotatedPosition}from'../../../utils/math';import'./Canvas.scss';const ZOOM_MIN=0.5;const ZOOM_MAX=100;const GRID_GAP=10;const GRID_LINE_WIDTH=1;const FONT_SIZE=12;export const POINT_COLOR='#5cdef0';const KEY_POINT_COLOR='#ffb86d';export const SHAPE_TYPE={KEYPOINT:'keypoint',PATH:'path',KEYPOINT_BOX:'keypoint_box',INSTANCE:'instance',GROUP:'group',RECTANGLE_POINT:'rectangle_point',RECTANGLE_PATH:'rectangle_path',RECTANGLE_GROUP:'rectangle_group',RECTANGLE:'rectangle',WARNGIN:'warning'};var LabelType=/*#__PURE__*/function(LabelType){LabelType[\"KEYPOINT\"]=\"keypoint\";LabelType[\"OBJECT\"]=\"object\";return LabelType;}(LabelType||{});let Canvas=observer(_class=(_class2=class Canvas extends React.Component{constructor(props){var _this;super(props);_this=this;this.cursor=Cursor.DEFAULT;this.canvas=React.createRef();this.canvasContainer=React.createRef();this.imageCanvas=void 0;this.imageData=void 0;this.raster=void 0;this.rasterLayer=void 0;this.gridLayer=void 0;this.labelLayer=void 0;this.attrLayer=void 0;this.mainLayer=void 0;this.warningLayer=void 0;this.tool=void 0;this.hits=void 0;this.selectedHit=void 0;this.warningBtn=void 0;this.selectedPoints=[];this.selectedRectangles=[];this.smoothPath=null;this.shownLabel=null;this.fillOpacity=0.3;this.resizeObserve=null;this.catchZoom=void 0;this.prevRaster=null;this.resizeDebounced=void 0;this.paperZoom=1;this.currentWarnings=[];this.resize=function(){let isWindow=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(_this.canvasContainer.current){// set view size\nconst{offsetWidth:viewWidth,offsetHeight:viewHeight}=_this.canvasContainer.current;Paper.view.viewSize=new Paper.Size(viewWidth,viewHeight);const viewCenter=new Paper.Point({x:viewWidth/2,y:viewHeight/2});if(_this.catchZoom){const{center,zoom}=_this.catchZoom;if(isWindow){Paper.view.center=viewCenter;_this.catchZoom.center=viewCenter;}else{Paper.view.center=center;}Paper.view.zoom=zoom;}else{Paper.view.center=viewCenter;Paper.view.zoom=1;}if(_this.imageCanvas&&_this.raster){// resize image\nconst{width:imgWidth,height:imgHeight}=_this.imageCanvas;const viewRatio=viewWidth/viewHeight;const imgRatio=imgWidth/imgHeight;const scaleFactor=(viewRatio<imgRatio?viewWidth/imgWidth:viewHeight/imgHeight)*0.98;const offsetX=(viewWidth-scaleFactor*imgWidth)/2;const offsetY=(viewHeight-scaleFactor*imgHeight)/2;const matrix=new Paper.Matrix().translate(offsetX,offsetY).scale(scaleFactor);// apply matrix to all layers\nPaper.project.layers.forEach(layer=>{layer.matrix=matrix;});// reset image center\n_this.raster.position=new Paper.Point({x:imgWidth/2,y:imgHeight/2});_this.paperZoom=_this.rasterLayer?Paper.view.zoom*_this.rasterLayer.matrix.scaling.x:Paper.view.zoom;}_this.resizeContent();}};this.resizeContent=()=>{if(this.resizeDebounced){this.resizeDebounced();}else{this.resizeDebounced=debounce(()=>{this.resizeGrid();this.resizeShapes();this.drawWarnings();},50);}};this.zoom=(event,zoom)=>{if(this.canvasContainer.current){const mousePosition=new Paper.Point(event.offsetX,event.offsetY);const viewPosition=Paper.view.viewToProject(mousePosition);const oldZoom=Paper.view.zoom;const oldCenter=Paper.view.center;const{offsetWidth:viewWidth,offsetHeight:viewHeight}=this.canvasContainer.current;let newZoom=event&&event.deltaY>0?Paper.view.zoom*1.1:Paper.view.zoom/1.1;newZoom=zoom||newZoom;if(newZoom<=1){Paper.view.center=new Paper.Point({x:viewWidth/2,y:viewHeight/2});}newZoom=Math.max(Math.min(newZoom,ZOOM_MAX),ZOOM_MIN);if(newZoom!==Paper.view.zoom){Paper.view.zoom=newZoom;const zoomScale=oldZoom/newZoom;const offset=viewPosition.subtract(viewPosition.subtract(oldCenter).multiply(zoomScale)).subtract(oldCenter);Paper.view.center=Paper.view.center.add(offset);}this.catchZoom={zoom:newZoom,center:Paper.view.center};this.paperZoom=newZoom*this.rasterLayer.matrix.scaling.x;this.resizeContent();}};this.drag=center=>{this.catchZoom=this.catchZoom?{...this.catchZoom,center}:{zoom:Paper.view.zoom,center};};this.fitSelected=(instanceId,groupName)=>{var _this$getInstanceCont;const groupBox=groupName?this.getGroupContainerByGroupName(instanceId,groupName):(_this$getInstanceCont=this.getInstanceContainerByInstaceId(instanceId))===null||_this$getInstanceCont===void 0?void 0:_this$getInstanceCont.children.find(g=>g.data.type===SHAPE_TYPE.GROUP);if(groupBox&&this.mainLayer&&this.canvasContainer.current){const{center,width,height}=groupBox.bounds;if(width===0||height===0)return;const point=this.mainLayer.localToGlobal(center);const{width:viewWidth,height:viewHeight}=this.mainLayer.bounds;let zoom=width/height>viewWidth/viewHeight?viewWidth/width:viewHeight/height;zoom=Math.min(18,Math.max(zoom,1));Paper.view.zoom=zoom;Paper.view.center=point;this.catchZoom={zoom,center:point};this.paperZoom=this.rasterLayer?zoom*this.rasterLayer.matrix.scaling.x:zoom;this.resizeContent();}else{this.resize();}};this.fitPoint=point=>{if(this.mainLayer){const center=this.mainLayer.localToGlobal(new Paper.Point(point.x,point.y));Paper.view.center=center;this.catchZoom={zoom:Paper.view.zoom,center};this.resizeContent();}};this.hitTest=event=>{var _this$tool;if(this.mainLayer&&!((_this$tool=this.tool)===null||_this$tool===void 0?void 0:_this$tool.mouseDown)){var _hit;let cursor=Cursor.DEFAULT;const isDrawPoint=this.props.selectedShapeStatus.shapeType===LandmarkEditType.KEYPOINT;if(this.canAddShape()){cursor=isDrawPoint?Cursor.POINTER:Cursor.CROSSHAIR;}if(this.selectedHit){this.selectedHit.selected=false;}const hits=this.mainLayer.hitTestAll(event.point,{fill:true,selected:false,handles:true,stroke:true,tolerance:10/this.paperZoom,match:ht=>{if(ht&&ht.item&&(ht.item.data.type===undefined||ht.item.data.type===SHAPE_TYPE.KEYPOINT_BOX)){return false;}return true;}});let hit;for(let i=0;i<hits.length;i+=1){const h=hits[i];const{type}=h.item.data;if(!type||type!==SHAPE_TYPE.INSTANCE&&type!==SHAPE_TYPE.GROUP&&type!==SHAPE_TYPE.KEYPOINT_BOX&&type!==SHAPE_TYPE.RECTANGLE_GROUP&&(type!==SHAPE_TYPE.PATH||type===SHAPE_TYPE.PATH&&['handle-in','handle-out'].includes(h.type))){// select point | rectangle | rectangle control | path handle\nif(type===SHAPE_TYPE.RECTANGLE||type===SHAPE_TYPE.RECTANGLE_POINT||type===SHAPE_TYPE.RECTANGLE_PATH){if(i===0&&!this.canAddShape()){hit=h;}}else{hit=h;if(type===SHAPE_TYPE.KEYPOINT){break;}}}}if(((_hit=hit)===null||_hit===void 0?void 0:_hit.item)&&!event.event.ctrlKey){var _hit$item$data,_hit$item$data2,_hit$item$data3,_hit$item$data4,_hit$item$data5;if(!this.isShapeInSelectedShapes((_hit$item$data=hit.item.data)===null||_hit$item$data===void 0?void 0:_hit$item$data.instanceId,(_hit$item$data2=hit.item.data)===null||_hit$item$data2===void 0?void 0:_hit$item$data2.groupName,(_hit$item$data3=hit.item.data)===null||_hit$item$data3===void 0?void 0:_hit$item$data3.index)&&((_hit$item$data4=hit.item.data)===null||_hit$item$data4===void 0?void 0:_hit$item$data4.index)!==this.props.selectedShapeStatus.id&&((_hit$item$data5=hit.item.data)===null||_hit$item$data5===void 0?void 0:_hit$item$data5.id)!==this.props.selectedShapeStatus.id){this.selectedHit=hit.item;hit.item.selected=true;}if(hit.item.data.cursor){cursor=hit.item.data.cursor;}else{cursor=Cursor.MOVE;}this.showShapeLabel(hit,event.point);}else if(this.shownLabel){const{point}=this.shownLabel.data;resetAttrLabelPosition(this.shownLabel,{x:point[0],y:point[1]},false);}this.hits=hit;if(this.currentWarnings.length>0){var _this$warningLayer;this.warningBtn=(_this$warningLayer=this.warningLayer)===null||_this$warningLayer===void 0?void 0:_this$warningLayer.hitTest(event.point);}if(this.smoothPath){this.smoothPath.fullySelected=true;}this.setCursor(cursor);}};this.clearHits=()=>{this.hits=undefined;};this.updateGroupBox=(instanceId,category,groupName)=>{let boundRect=this.getShapeByGroup();const{selectedShapeStatus}=this.props;let isRemovebound=false;if(instanceId&&instanceId===selectedShapeStatus.instanceId&&groupName===selectedShapeStatus.groupName){const{ontology,setting:{pointSize,lineWidth,labelItems}}=rootStore;const groupConntainer=this.getGroupContainerByGroupName(instanceId,groupName);const points=groupConntainer&&groupConntainer.children.filter(v=>v.type===CategoryPathShape.CIRCLE).map(v=>[v.position.x,v.position.y]);if(points&&points.length>0){const xList=points.map(v=>v[0]);const yList=points.map(v=>v[1]);const minX=Math.min(...xList);const maxX=Math.max(...xList);const minY=Math.min(...yList);const maxY=Math.max(...yList);if(this.mainLayer){var _instance$children$fi,_groupInfo$label_conf;const zoom=Paper.view.zoom*this.mainLayer.matrix.scaling.x;if(boundRect){boundRect.remove();}const range=pointSize*3/zoom;const fontSize=FONT_SIZE/this.paperZoom;const strokeWitdth=lineWidth/zoom;boundRect=new Paper.Shape.Rectangle({point:[minX-range,minY-range],size:[maxX-minX+2*range,maxY-minY+2*range],strokeColor:new Paper.Color('#FFE600'),strokeWidth:strokeWitdth});boundRect.data.type=SHAPE_TYPE.KEYPOINT_BOX;this.mainLayer.addChild(boundRect);const groupInfo=ontology.getGroupData(category,groupName);const instance=this.props.getInstance(instanceId);const group=instance===null||instance===void 0?void 0:(_instance$children$fi=instance.children.find(g=>g.name===groupName))===null||_instance$children$fi===void 0?void 0:_instance$children$fi.frames[this.props.currentFrame];const attrsLabel=getValuesLabel(groupInfo===null||groupInfo===void 0?void 0:(_groupInfo$label_conf=groupInfo.label_config)===null||_groupInfo$label_conf===void 0?void 0:_groupInfo$label_conf.fields,group===null||group===void 0?void 0:group.attributes,labelItems);const content=\"\".concat((groupInfo===null||groupInfo===void 0?void 0:groupInfo.class_display_name)||'',\" \").concat((instance===null||instance===void 0?void 0:instance.number)||'',\"-\").concat((groupInfo===null||groupInfo===void 0?void 0:groupInfo.display_name)||(groupInfo===null||groupInfo===void 0?void 0:groupInfo.name)||'');const labelGroup=this.getLabelByKey('','','group_label');const groupAttribute=this.getLabelByKey('','','group_attributes');labelGroup===null||labelGroup===void 0?void 0:labelGroup.remove();groupAttribute===null||groupAttribute===void 0?void 0:groupAttribute.remove();const x=minX-range;const y=minY-range-strokeWitdth*2;const w=maxX-minX+2*range;const h=maxY-minY+2*range;this.addLabel(content,{x,y,width:w,height:h},{instanceId:'',category:'',groupName:''},'group_label',true,SHAPE_TYPE.KEYPOINT_BOX);this.addLabel(attrsLabel,{x,y:y-fontSize*1.5,width:w,height:h},{instanceId:'',category:'',groupName:''},'group_attributes',true,SHAPE_TYPE.KEYPOINT_BOX);}}else{isRemovebound=true;}}else{isRemovebound=true;}if(isRemovebound&&boundRect){boundRect.remove();this.removeLabel('','','group_label');this.removeLabel('','','group_attributes');}};makeObservable(this,{cursor:observable,setCursor:action});reaction(()=>rootStore.review.qaWarnings,()=>{this.drawWarnings();});// change frame & undo & redo to update points\nreaction(()=>rootStore.shape.updatedShapes,()=>{this.updateShapes();this.drawWarnings();});}get activeTool(){var _this$props$ontologyG;let tool='';switch((_this$props$ontologyG=this.props.ontologyGroup)===null||_this$props$ontologyG===void 0?void 0:_this$props$ontologyG.type){case LandmarkEditType.KEYPOINT:tool=CategoryPathShape.CIRCLE;break;case LandmarkEditType.RECTANGLE:tool=CategoryPathShape.RECTANGLE;break;default:break;}return tool;}componentDidMount(){if(this.canvas.current){// init canvas\nPaper.setup(this.canvas.current);// setup layers\nthis.setupLayers();// setuo tools\nthis.setupTools();this.canvas.current.addEventListener('wheel',this.zoom,false);this.canvas.current.addEventListener('contextmenu',e=>e.preventDefault(),false);}if(this.canvasContainer.current){this.resizeObserve=new ResizeObserver(()=>{this.resize(true);});this.resizeObserve.observe(this.canvasContainer.current);}}componentDidUpdate(prevProps){if(prevProps.image!==this.props.image){this.loadImage();}// default instances\nif(JSON.stringify(prevProps.defaultInstances)!==JSON.stringify(this.props.defaultInstances)){const defaultInstances=Object.values(this.props.defaultInstances).filter(instance=>instance&&!prevProps.defaultInstances[instance.id]);if(defaultInstances.length>0){defaultInstances.forEach(instance=>{var _this$mainLayer;const instanceContainer=new Paper.Group();(_this$mainLayer=this.mainLayer)===null||_this$mainLayer===void 0?void 0:_this$mainLayer.addChild(instanceContainer);instanceContainer.data={instanceId:instance.id,category:instance.category,type:SHAPE_TYPE.INSTANCE};instance.children.forEach(group=>{const groupContainer=new Paper.Group();groupContainer.data={groupName:group.name,type:SHAPE_TYPE.GROUP,instanceId:instance.id,category:instance.category,displayColor:instance.displayColor||POINT_COLOR};instanceContainer.addChild(groupContainer);});});}}if(JSON.stringify(prevProps.updatedCategories)!==JSON.stringify(this.props.updatedCategories)&&this.props.updatedCategories.length>0){this.props.updatedCategories.forEach(_ref=>{let{pointCategory,frameIndex,instanceId,groupName,category}=_ref;if(frameIndex===this.props.currentFrame){const container={instanceId,groupName,category};const categoryKey=\"\".concat(frameIndex,\"_\").concat(instanceId,\"_\").concat(groupName,\"_\").concat(pointCategory);this.updateCirclePath(pointCategory,this.props.categoryPathShapes[categoryKey]===CategoryPathShape.CIRCLE,container);}});this.props.onCategoriesUpdated();}// selected changes\nconst isSelectedChange=JSON.stringify(prevProps.selectedShapeStatus)!==JSON.stringify(this.props.selectedShapeStatus);if(isSelectedChange){if(this.selectedPoints.length<=0||this.selectedRectangles.length<=0){if(prevProps.selectedShapeStatus&&prevProps.selectedShapeStatus.id!==undefined){const{instanceId,groupName,id,shapeType}=prevProps.selectedShapeStatus;if(!this.isShapeInSelectedShapes(instanceId,groupName,id)){if(shapeType===LandmarkEditType.KEYPOINT){this.setPointSelected(instanceId,groupName,id,false);}else{this.selectShape(instanceId,groupName,id,false);}}}}const{instanceId,groupName,id,shapeType}=this.props.selectedShapeStatus;if(id!==undefined){this.setMultiShapesUnselected();if(shapeType===LandmarkEditType.KEYPOINT){this.setPointSelected(instanceId,groupName,id,true);}else{this.selectShape(instanceId,groupName,id);}}}if((prevProps.selectedShapeInfo||{}).pointCategory!==(this.props.selectedShapeInfo||{}).pointCategory){this.setSmooth(null);if(rootStore.setting.pathStyle===PathStyles.CURVES){this.setSelectedCurves();}}if(this.props.selectedInstance&&(isSelectedChange||JSON.stringify(this.props.selectedInstance)!==JSON.stringify(prevProps.selectedInstance))){const{instanceId,category,groupName}=this.props.selectedShapeStatus;this.updateGroupBox(instanceId,category,groupName);}}componentWillUnmount(){if(this.resizeObserve){this.resizeObserve.disconnect();this.resizeObserve=null;}}setupLayers(){this.rasterLayer=new Paper.Layer();this.rasterLayer.applyMatrix=false;this.rasterLayer.visible=true;this.gridLayer=new Paper.Layer();this.gridLayer.applyMatrix=false;this.gridLayer.visible=rootStore.setting.isGridVisible;this.mainLayer=new Paper.Layer();this.mainLayer.applyMatrix=false;this.mainLayer.visible=false;this.labelLayer=new Paper.Layer();this.labelLayer.applyMatrix=false;this.labelLayer.visible=false;this.attrLayer=new Paper.Layer();this.attrLayer.applyMatrix=false;this.attrLayer.visible=false;this.warningLayer=new Paper.Layer();this.warningLayer.applyMatrix=false;this.warningLayer.visible=false;Paper.view.onMouseMove=this.hitTest;}setupTools(){this.tool=new Tool(this);this.tool.activate();}loadImage(){if(this.rasterLayer&&this.props.image){this.rasterLayer.activate();this.props.changeLoading(true);if(this.raster){this.prevRaster=this.raster;}imageLoader(this.props.image,c=>{var _canvas$getContext;const canvas=c;this.imageCanvas=canvas;this.imageData=(_canvas$getContext=canvas.getContext('2d'))===null||_canvas$getContext===void 0?void 0:_canvas$getContext.getImageData(0,0,canvas.width,canvas.height);this.raster=new Paper.Raster(canvas);this.raster.visible=false;this.raster.onLoad=()=>{var _this$gridLayer,_this$gridLayer$child;if(!((_this$gridLayer=this.gridLayer)===null||_this$gridLayer===void 0?void 0:(_this$gridLayer$child=_this$gridLayer.children)===null||_this$gridLayer$child===void 0?void 0:_this$gridLayer$child.length)){this.labelLayer.visible=rootStore.setting.labelMode;this.mainLayer.visible=true;this.warningLayer.visible=true;this.attrLayer.visible=true;}this.addGrid();// add grid to image\nthis.resize();// resize to fit the container\n// when onload, show all layers\nthis.raster.visible=true;if(this.prevRaster){this.prevRaster.remove();}this.props.changeLoading(false);};},{canvas:true,orientation:true,crossOrigin:'anonymous'});}}updateFilters(){if(this.imageData&&this.raster){let data=this.imageData;const{brightness,contrast,saturation,lightness,hue,rescale}=rootStore.setting.filters;if(brightness||contrast){data=ImageFilters.BrightnessContrastPhotoshop(data,brightness,contrast);}if(rescale!==1){data=ImageFilters.Rescale(data,rescale);}if(hue||saturation||lightness){data=ImageFilters.HSLAdjustment(data,hue,saturation,lightness);}this.raster.setImageData(data,new Paper.Point(0,0));}}addGrid(){if(this.gridLayer&&this.imageCanvas){this.gridLayer.removeChildren();const{width,height}=this.imageCanvas;const rows=Math.ceil(height/GRID_GAP);Array.from({length:rows}).forEach((_,index)=>{var _this$gridLayer2;const path=new Paper.Path.Line({from:[0,index*GRID_GAP],to:[width,index*GRID_GAP],strokeColor:'#333333'});if(index%4===0){path.data.dashed=false;}else{path.data.dashed=true;}(_this$gridLayer2=this.gridLayer)===null||_this$gridLayer2===void 0?void 0:_this$gridLayer2.addChild(path);});const cols=Math.ceil(width/GRID_GAP);Array.from({length:cols}).forEach((_,index)=>{var _this$gridLayer3;const path=new Paper.Path.Line({from:[index*GRID_GAP,0],to:[index*GRID_GAP,height],strokeColor:'#333333'});if(index%4===0){path.data.dashed=false;}else{path.data.dashed=true;}(_this$gridLayer3=this.gridLayer)===null||_this$gridLayer3===void 0?void 0:_this$gridLayer3.addChild(path);});}}resizeGrid(){if(this.gridLayer&&this.gridLayer.children&&this.gridLayer.children.length>0){// keep grid line width looks the same\nconst zoom=Paper.view.zoom*this.gridLayer.matrix.scaling.x;this.gridLayer.children.forEach(path=>{const baseWidth=GRID_LINE_WIDTH/zoom;if(path.data.dashed){path.strokeWidth=baseWidth/2;path.dashArray=[baseWidth*4,baseWidth];}else{path.strokeWidth=baseWidth;path.dashArray=[];}});}}isShapeInSelectedShapes(instanceId,groupName,index){return this.selectedPoints.findIndex(p=>p.data.instanceId===instanceId&&p.data.groupName===groupName&&p.data.index===index)>=0||this.selectedRectangles.findIndex(p=>p.data.instanceId===instanceId&&p.data.groupName===groupName&&p.data.index===index)>=0;}isPointInImage(point){if(!this.imageCanvas||!this.rasterLayer)return false;const localPoint=this.rasterLayer.globalToLocal(Paper.view.viewToProject(point));const{bounds:{x,y,width,height}}=this.rasterLayer;return localPoint.x>=0&&localPoint.x<=x+width&&localPoint.y>=0&&localPoint.y<=y+height;}getPointInImage(point){if(!this.imageCanvas||!this.rasterLayer)return point;const localPoint=this.rasterLayer.globalToLocal(Paper.view.viewToProject(point));/* const { width, height } = this.imageCanvas;\n\n    if (localPoint.x < 0) {\n      localPoint.x = 0;\n    } else if (localPoint.x > width) {\n      localPoint.x = width;\n    }\n    if (localPoint.y < 0) {\n      localPoint.y = 0;\n    } else if (localPoint.y > height) {\n      localPoint.y = height;\n    } */return localPoint;}getInstanceContainerByInstaceId(instaceId){var _this$mainLayer2;return(_this$mainLayer2=this.mainLayer)===null||_this$mainLayer2===void 0?void 0:_this$mainLayer2.children.find(i=>i.data.type===SHAPE_TYPE.INSTANCE&&i.data.instanceId===instaceId);}getGroupContainerByGroupName(instaceId,groupName){const instance=this.getInstanceContainerByInstaceId(instaceId);return instance===null||instance===void 0?void 0:instance.children.find(g=>g.data.type===SHAPE_TYPE.GROUP&&g.data.groupName===groupName);}getShapeByKey(instaceId,groupName,key){const group=this.getGroupContainerByGroupName(instaceId,groupName);return group===null||group===void 0?void 0:group.children.find(p=>p.data.type===SHAPE_TYPE.RECTANGLE_GROUP&&p.data.id===key||p.data.type===SHAPE_TYPE.KEYPOINT&&p.data.index===key);}getLabelByKey(instanceId,groupName,key){var _this$labelLayer;return(_this$labelLayer=this.labelLayer)===null||_this$labelLayer===void 0?void 0:_this$labelLayer.children.find(l=>l.data.instanceId===instanceId&&l.data.groupName===groupName&&l.data.key===key);}getAttrLabelByKey(instanceId,groupName,key){var _this$attrLayer;return(_this$attrLayer=this.attrLayer)===null||_this$attrLayer===void 0?void 0:_this$attrLayer.children.find(l=>l.data.instanceId===instanceId&&l.data.groupName===groupName&&l.data.key===\"attr-\".concat(key));}getShapeByGroup(){var _this$mainLayer3;return(_this$mainLayer3=this.mainLayer)===null||_this$mainLayer3===void 0?void 0:_this$mainLayer3.children.find(l=>l.data.type===SHAPE_TYPE.KEYPOINT_BOX);}getPathByCategory(instaceId,groupName,pointCategory){const group=this.getGroupContainerByGroupName(instaceId,groupName);return group===null||group===void 0?void 0:group.children.find(p=>p.data.type===SHAPE_TYPE.PATH&&p.data.pointCategory===pointCategory);}getPathById(instaceId,groupName,pathId){const group=this.getGroupContainerByGroupName(instaceId,groupName);return group===null||group===void 0?void 0:group.children.find(p=>p.data.type===SHAPE_TYPE.PATH&&p.data.id===pathId);}getPointsByCategory(instaceId,groupName,pointCategory){const group=this.getGroupContainerByGroupName(instaceId,groupName);return group===null||group===void 0?void 0:group.children.filter(p=>p.data.type===SHAPE_TYPE.KEYPOINT&&p.data.pointCategory===pointCategory);}canAddShape(){if(this.props.isReview||this.props.readonly||!rootStore.review.drawMode)return false;if(this.mainLayer&&this.props.selectedShapeInfo){if(this.props.selectedShapeInfo.shapeType===LandmarkEditType.RECTANGLE){if(this.props.ontologyGroup&&this.props.ontologyGroup.count>0){return this.props.annotatedPointOrShapeCount<this.props.ontologyGroup.count;}}else if(this.props.selectedShapeInfo.shapeType===LandmarkEditType.KEYPOINT){const{instanceId,groupName,id}=this.props.selectedShapeStatus;if(id===undefined||id<0)return false;const point=this.getShapeByKey(instanceId,groupName,id);return!point;}}return false;}containerAddPoint(groupData,point,pointCategory,index,isKeyPoint){let visible=arguments.length>5&&arguments[5]!==undefined?arguments[5]:true;let attributes=arguments.length>6?arguments[6]:undefined;const{instanceId,groupName}=groupData;const groupContainer=this.getGroupContainerByGroupName(instanceId,groupName);this.addKeypointShape(point,pointCategory,index,isKeyPoint,groupContainer,visible,attributes);}addKeypoint(point){if(this.mainLayer&&this.props.selectedShapeInfo&&this.props.selectedShapeStatus&&this.props.selectedInstance){const{id,shapeType,frameIndex}=this.props.selectedShapeStatus;const index=shapeType===LandmarkEditType.KEYPOINT&&id||0;const{x,y}=this.mainLayer.globalToLocal(Paper.view.viewToProject(point));const newPoint=new Paper.Point(x,y);const{instanceId,category,groupName,pointCategory,isKeyPoint}=this.props.selectedShapeInfo;const categoryKey=\"\".concat(frameIndex,\"_\").concat(instanceId,\"_\").concat(groupName,\"_\").concat(pointCategory);const groupData={instanceId,groupName,type:LandmarkEditType.KEYPOINT,category:this.props.selectedInstance.category};this.containerAddPoint(groupData,newPoint,pointCategory,index,isKeyPoint);let otherPoints;if(this.props.categoryPathShapes[categoryKey]===CategoryPathShape.CIRCLE){const container={instanceId,category,groupName};otherPoints=this.updateCirclePath(pointCategory,true,container);}this.props.handleShapesChange([{frameIndex,instanceId,category,groupName,index,shapeType:LandmarkEditType.KEYPOINT,shape:{pointCategory,isKeyPoint,position:{x,y},visible:true// default is visible when point added\n}},...(otherPoints||[])]);this.props.setNextEmptyShape();// move next\n}}addKeypointShape(point,pointCategory,pointIndex,isKeyPoint,groupContainer,visible,attributes){if(!groupContainer)return;const{frameIndex}=this.props.selectedShapeStatus;const{instanceId,groupName,category,displayColor}=groupContainer.data;if(this.mainLayer){var _groupInfo$point_labe;const zoom=Paper.view.zoom*this.mainLayer.matrix.scaling.x;// add point\nconst pointColor=isKeyPoint?KEY_POINT_COLOR:displayColor||POINT_COLOR;const fillColor=visible?pointColor:'#3d424d';const pointCircle=new Paper.Shape.Circle({center:point,radius:(rootStore.setting.pointSize+1)/zoom,fillColor,strokeColor:'#ffffff',strokeWidth:1/zoom,selectedColor:'white'});pointCircle.data={frameIndex,type:SHAPE_TYPE.KEYPOINT,cursor:Cursor.MOVE,pointCategory,index:pointIndex,isKeyPoint,visible,instanceId,groupName,category,fillColor};groupContainer.addChild(pointCircle);// add point to path\nconst groupData=rootStore.ontology.getGroupData(category,groupName);const categoryData=groupData&&groupData.categories&&groupData.categories.find(v=>v.name===pointCategory)||undefined;const segment=new Paper.Segment(point);let path=this.getPathByCategory(instanceId,groupName,pointCategory);const lineColor=(categoryData===null||categoryData===void 0?void 0:categoryData.isConnect)===false?new Paper.Color('rgba(0,0,0,0)'):new Paper.Color(displayColor||POINT_COLOR);let index=-1;if(path){const{points,isCircle}=path.data;if(!isCircle){if(rootStore.setting.pathStyle===PathStyles.CURVES){for(let i=0;i<points.length;i+=1){const p=points[i];const nextP=points[i+1];if(pointIndex>p&&nextP>pointIndex){// 2 => 1,3\nindex=i+1;break;}else if(pointIndex<p&&(!nextP||nextP>p||nextP<p&&i!==0)){// 9 => 10 || 10,18 || 10,5(end point)[not (end point)10,5]\nindex=i;break;}}}else{index=path.data.points.findIndex(p=>pointIndex<p);}if(index<0){path.add(segment);index=path.data.points.push(pointIndex)-1;}else{path.insert(index,segment);path.data.points.splice(index,0,pointIndex);}}}else{path=new Paper.Path({segments:[segment],strokeWidth:rootStore.setting.lineWidth/zoom,strokeColor:lineColor,selectedColor:lineColor});path.data={type:SHAPE_TYPE.PATH,pointCategory,points:[pointIndex],instanceId,groupName,id:\"\".concat(frameIndex,\"_\").concat(instanceId,\"_\").concat(groupName,\"_\").concat(pointCategory)};groupContainer.addChild(path);}this.toggleCurves(path);if(path===this.smoothPath){this.setSmooth(path);}if(groupData&&groupData.lines){const lines=groupData.lines.filter(v=>v.points.indexOf(pointIndex)>=0);const linesData=[];lines.forEach(connectPoints=>{if(connectPoints){const{points,color}=connectPoints;const isSource=pointIndex===points[0];const otherEnd=this.getShapeByKey(instanceId,groupName,isSource?points[1]:points[0]);const fromTo=\"\".concat(points[0],\"-\").concat(points[1]);if(rootStore.setting.pathStyle===PathStyles.CURVES){if(otherEnd){const{pointCategory:otherCategory}=otherEnd.data;const[startPoint,endPoint]=isSource?[pointCircle,otherEnd]:[otherEnd,pointCircle];const endSegment=new Paper.Segment(new Paper.Point(endPoint.position.x,endPoint.position.y));const line=isSource?path:this.getPathByCategory(instanceId,groupName,otherCategory!==pointCategory?otherCategory:'');if(line){const sourceIndex=line.data.points.findIndex(p=>points[0]===p);if(sourceIndex===0){line.insert(0,endSegment);line.data.points.unshift(points[1]);}else if(sourceIndex===line.data.points.length-1){line.add(endSegment);line.data.points.push(points[1]);}this.toggleCurves(line);if(!endPoint.data.lines){endPoint.data.lines=[];}endPoint.data.lines.push({isSource:false,fromTo,pathId:line.data.id});startPoint.data.lines=[...(startPoint.data.lines||[]),{isSource:true,fromTo,pathId:line.data.id}];}}}else{linesData.push({isSource,fromTo,pathId:fromTo});if(otherEnd){const segments=isSource?[segment,otherEnd.position]:[otherEnd.position,segment];const line=new Paper.Path({segments,strokeWidth:rootStore.setting.lineWidth/zoom,strokeColor:color,selectedColor:color});line.data={type:SHAPE_TYPE.PATH,pointCategory:fromTo,points,instanceId,groupName,id:fromTo};groupContainer.addChild(line);}}}});if(rootStore.setting.pathStyle!==PathStyles.CURVES){pointCircle.data.lines=linesData;}}path.sendToBack();const groupInfo=rootStore.ontology.getGroupData(category,groupName);const label=\"\".concat(visible?1:0,\"-\").concat(pointIndex);let attrsLabel=getValuesLabel(groupInfo===null||groupInfo===void 0?void 0:(_groupInfo$point_labe=groupInfo.point_label_config)===null||_groupInfo$point_labe===void 0?void 0:_groupInfo$point_labe.fields,attributes,rootStore.setting.labelItems);attrsLabel=\"\".concat(rootStore.setting.displayPointIndex?\"\".concat(pointIndex):'').concat(rootStore.setting.displayPointIndex&&attrsLabel?';':'').concat(attrsLabel);this.addLabel(label,{x:point.x,y:point.y,width:rootStore.setting.pointSize/zoom,height:rootStore.setting.pointSize/zoom},{instanceId,category,groupName},pointIndex,visible,SHAPE_TYPE.KEYPOINT,attrsLabel);}}removePointShape(containerData,pointIndex){const{instanceId,groupName}=containerData;if(this.mainLayer){const point=this.getShapeByKey(instanceId,groupName,pointIndex);if(point){const{lines,pointCategory}=point.data;point.remove();// remove pointCategory path\nconst path=this.getPathByCategory(instanceId,groupName,pointCategory);if(path&&!path.data.isCircle){const index=path.data.points.findIndex(p=>p===pointIndex);if(index>=0){path.removeSegment(index);path.data.points.splice(index,1);}}// remove group connect path\nif(lines){lines.forEach(_ref2=>{let{pathId,fromTo,isSource}=_ref2;const line=this.getPathById(instanceId,groupName,pathId);if(rootStore.setting.pathStyle===PathStyles.CURVES){let index=line===null||line===void 0?void 0:line.data.points.findIndex(p=>p===pointIndex);if(isSource&&index<0){index=line.data.points.findIndex(p=>p===Number(fromTo.split('-')[1]||-1));}if(index>=0){line.removeSegment(index);line.data.points.splice(index,1);this.toggleCurves(line);}}else{line===null||line===void 0?void 0:line.remove();}});}}}this.removeLabel(instanceId,groupName,pointIndex);}resizeShapes(){var _this$labelLayer2,_this$attrLayer2;if(this.mainLayer&&this.mainLayer.children&&this.mainLayer.children.length>0){this.mainLayer.children.forEach(instance=>{if(instance.children&&instance.children.length>0){instance.children.forEach(group=>{if(group.children){group.children.forEach(path=>{if(path.data.type===SHAPE_TYPE.KEYPOINT){path.set({radius:rootStore.setting.pointSize/this.paperZoom});path.strokeWidth=1/this.paperZoom;}else if(path.data.type===SHAPE_TYPE.PATH){path.strokeWidth=rootStore.setting.lineWidth/this.paperZoom;}else if(path.data.type===SHAPE_TYPE.RECTANGLE_GROUP&&path.children){path.children.forEach(shape=>{if(shape.data.type===SHAPE_TYPE.RECTANGLE_POINT){shape.set({radius:rootStore.setting.pointSize/2/this.paperZoom});}else if(shape.data.type===SHAPE_TYPE.RECTANGLE_PATH){shape.strokeWidth=rootStore.setting.lineWidth/this.paperZoom;}});}});}});}else if(instance.data.type===SHAPE_TYPE.KEYPOINT_BOX){instance.strokeWidth=rootStore.setting.lineWidth/this.paperZoom;}});}if(((_this$labelLayer2=this.labelLayer)===null||_this$labelLayer2===void 0?void 0:_this$labelLayer2.children)&&this.labelLayer.children.length>0){this.labelLayer.children.forEach(label=>{const{zoom:oldZoom,width,height,point}=label.data;resizeLabel({width,height,zoom:this.paperZoom,fontSize:FONT_SIZE},oldZoom,point,label,'label');});}if(((_this$attrLayer2=this.attrLayer)===null||_this$attrLayer2===void 0?void 0:_this$attrLayer2.children)&&this.attrLayer.children.length>0){this.attrLayer.children.forEach(label=>{const{zoom:oldZoom,width,height,point}=label.data;resizeLabel({width,height,zoom:this.paperZoom,fontSize:FONT_SIZE},oldZoom,point,label,'attr');});}const{instanceId,groupName,id}=this.props.selectedShapeStatus;this.setPointSelected(instanceId,groupName,id,true);}cleanLayer(){if(this.mainLayer){var _this$mainLayer$child;(_this$mainLayer$child=this.mainLayer.children)===null||_this$mainLayer$child===void 0?void 0:_this$mainLayer$child.forEach(container=>{if(container.data.type===SHAPE_TYPE.KEYPOINT_BOX){container.remove();}else{var _container$children;(_container$children=container.children)===null||_container$children===void 0?void 0:_container$children.forEach(group=>{group===null||group===void 0?void 0:group.removeChildren();});}});}if(this.labelLayer){this.labelLayer.removeChildren();}if(this.attrLayer){this.attrLayer.removeChildren();}if(this.warningLayer){this.warningLayer.removeChildren();}}addLabel(content,shape,groupInfo,key,visible,shapeType,attrsLabel){if(this.labelLayer){const{instanceId,groupName}=groupInfo;const fontSize=FONT_SIZE/this.paperZoom;const label=new Paper.PointText({content,fontSize,fillColor:visible?'white':'red',shadowColor:'#000000',shadowBlur:2/this.paperZoom,shadowOffset:2/this.paperZoom});const width=label.bounds.width+fontSize/2;const height=label.bounds.height+fontSize/2;const labelRect=new Paper.Shape.Rectangle({size:[width,height],fillColor:rootStore.setting.labelBgColor});label.position.x=labelRect.bounds.width/2;label.position.y=labelRect.bounds.height/2;const labelGroup=new Paper.Group();labelGroup.data={point:[shape.x,shape.y],instanceId,groupName,key,type:shapeType===SHAPE_TYPE.KEYPOINT?LabelType.KEYPOINT:LabelType.OBJECT,zoom:this.paperZoom,height,width};if(rootStore.setting.labelStyle===LabelStyle.DEFAULT){labelGroup.addChild(labelRect);}labelGroup.addChild(label);this.labelLayer.addChild(labelGroup);labelGroup.position.x=shape.x+labelRect.bounds.width/2;labelGroup.position.y=shape.y-labelRect.bounds.height/2-rootStore.setting.lineWidth/this.paperZoom;if(shapeType!==SHAPE_TYPE.KEYPOINT_BOX&&this.attrLayer){let center={x:shape.x,y:shape.y};if(SHAPE_TYPE.RECTANGLE){center={x:shape.x+shape.width/2,y:shape.y+shape.height/2};}const arrtLabelGroup=labelGroup.clone();arrtLabelGroup.data.key=\"attr-\".concat(arrtLabelGroup.data.key);arrtLabelGroup.data.point=[center.x,center.y];arrtLabelGroup.children.slice(-1)[0].fillColor=new Paper.Color('#ffffff');arrtLabelGroup.children.slice(-1)[0].content='';this.attrLayer.addChild(arrtLabelGroup);if(attrsLabel){this.updateLabelContent(arrtLabelGroup,attrsLabel,shapeType);}else{arrtLabelGroup.visible=false;}}}}updateLabel(instanceId,groupName,key,position,center){if(this.labelLayer){const label=this.getLabelByKey(instanceId,groupName,key);if(label){label.data.point=[position.x,position.y];label.position.x=position.x+label.bounds.width/2;label.position.y=position.y-label.bounds.height/2;}}if(this.attrLayer){const label=this.getAttrLabelByKey(instanceId,groupName,key);if(label){label.data.point=[center.x,center.y];label.position.x=center.x;label.position.y=center.y;}}}updateAttributeLabel(instanceId,category,groupName,key,attributes,instanceNum){const groupInfo=rootStore.ontology.getGroupData(category,groupName);let label='';if(typeof key==='number'){var _groupInfo$point_labe2;label=getValuesLabel(groupInfo===null||groupInfo===void 0?void 0:(_groupInfo$point_labe2=groupInfo.point_label_config)===null||_groupInfo$point_labe2===void 0?void 0:_groupInfo$point_labe2.fields,attributes,rootStore.setting.pointLabelItems);label=\"\".concat(rootStore.setting.displayPointIndex?\"\".concat(key):'').concat(rootStore.setting.displayPointIndex&&label?';':'').concat(label);}else{var _groupInfo$label_conf2;const categoryLabel=\"\".concat((groupInfo===null||groupInfo===void 0?void 0:groupInfo.class_display_name)||'',\"  \").concat(instanceNum||'',\"-\").concat((groupInfo===null||groupInfo===void 0?void 0:groupInfo.display_name)||(groupInfo===null||groupInfo===void 0?void 0:groupInfo.name)||'');label=getValuesLabel(groupInfo===null||groupInfo===void 0?void 0:(_groupInfo$label_conf2=groupInfo.label_config)===null||_groupInfo$label_conf2===void 0?void 0:_groupInfo$label_conf2.fields,attributes,rootStore.setting.labelItems);label=\"\".concat(rootStore.setting.displayCategory?\"\".concat(categoryLabel):'').concat(rootStore.setting.displayCategory&&label?';':'').concat(label);}const attrLayer=this.getAttrLabelByKey(instanceId,groupName,key);if(attrLayer){if(label){this.updateLabelContent(attrLayer,label,SHAPE_TYPE.KEYPOINT);}else{attrLayer.visible=false;}}}updateLabelContent(label,content,shapeType){if(this.attrLayer&&label){const zoom=Paper.view.zoom*this.attrLayer.matrix.scaling.x;const labelText=label.children.slice(-1)[0];labelText.content=content;const{width,height}=labelText.bounds;const fontSize=FONT_SIZE/zoom;if(rootStore.setting.labelStyle===LabelStyle.DEFAULT){label.children[0].size.height=height+fontSize/2;label.children[0].size.width=width+fontSize/2;}label.data.width=label.children[0].bounds.width;label.data.height=label.children[0].bounds.height;label.data.zoom=this.paperZoom;let visible=false;if(shapeType===SHAPE_TYPE.KEYPOINT){visible=rootStore.setting.activePointAttributesMode===AttributesMode.ALWAYS;}else if(SHAPE_TYPE.RECTANGLE){visible=rootStore.setting.activeAttributesMode===AttributesMode.ALWAYS;}if(visible){const{point}=label.data;resetAttrLabelPosition(label,{x:point[0],y:point[1]},visible);}else{label.visible=false;}}}updatelabelVisible(activeMode){var _this$attrLayer3;let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'object';if(this.shownLabel){this.shownLabel.visible=false;this.shownLabel=null;}if(((_this$attrLayer3=this.attrLayer)===null||_this$attrLayer3===void 0?void 0:_this$attrLayer3.children)&&this.attrLayer.children.length>0){this.attrLayer.children.forEach(label=>{const{type:labelType}=label.data;if(type===labelType){label.visible=activeMode===AttributesMode.ALWAYS;}});}}removeLabel(instanceId,groupName,key){if(this.labelLayer){const label=this.getLabelByKey(instanceId,groupName,key);if(label){label.remove();}}if(this.attrLayer){const label=this.getAttrLabelByKey(instanceId,groupName,key);if(label){label.remove();}}}updateShapes(){const{currentFrame}=this.props;const{shape:{updatedShapes}}=rootStore;updatedShapes.forEach(updatedShape=>{if(updatedShape.frameIndex!==currentFrame)return;switch(updatedShape.shapeType){case LandmarkEditType.KEYPOINT:this.updatePoint(updatedShape);break;case LandmarkEditType.RECTANGLE:this.updateRectangle(updatedShape);break;default:break;}});rootStore.shape.setUpdatedShapes([]);const{instanceId,category,groupName}=this.props.selectedShapeStatus;this.updateGroupBox(instanceId,category,groupName);}updateRectangle(updateShape){const{instanceId,groupName,category,id,shape}=updateShape;if(id!==undefined){const rectangle=shape;const currRectangle=this.getShapeByKey(instanceId,groupName,id);if(currRectangle){// alreay exist, should update\nif(rectangle===undefined){// delete\nthis.removeRectangle(instanceId,groupName,id);}else if(rectangle.x){const{x,y,width,height,displayColor}=rectangle;// update position\nthis.drawRectangle({x,y,width,height,displayColor},{instanceId,category,groupName},id);}}else if(rectangle){//  has been removed, should add\nconst{x,y,width,height,displayColor}=rectangle;const path=new Paper.Path();path.data.id=id;path.add(new Paper.Point(x,y));path.add(new Paper.Point(x+width,y));path.add(new Paper.Point(x+width,y+height));path.add(new Paper.Point(x,y+height));path.closed=true;this.addRectangle(path,{instanceId,groupName,category,shapeType:LandmarkEditType.RECTANGLE,displayColor},false);}}}updatePoint(updateShape){const{frameIndex,instanceId,groupName,category,index,shape}=updateShape;if(index!==undefined){let updatedCategorie;const point=shape;const currPoint=this.getShapeByKey(instanceId,groupName,index);if(currPoint){const currCategory=currPoint.data.pointCategory;updatedCategorie={pointCategory:currCategory,frameIndex,instanceId,groupName,category};const groupData={frameIndex,instanceId,category,groupName};// alreay exist, should update\nif(point===undefined){// delete\nthis.removePointShape(groupData,index);}else if(point.position&&point.pointCategory){// update position\ncurrPoint.position.x=point.position.x;currPoint.position.y=point.position.y;this.updatePath(currPoint,point.position);// update visible\nif(point.visible!==undefined&&currPoint.data.visible!==point.visible){this.changeVisibleStyle(currPoint,index,groupData,point.visible);}if(rootStore.setting.activePointAttributesMode!==AttributesMode.HIDE){this.updateAttributeLabel(instanceId,category,groupName,index,point.attributes);}}}else if(point){//  has been removed, should add\nconst{position,pointCategory,isKeyPoint,visible,attributes}=point;if(position!==undefined&&pointCategory!==undefined&&index!==undefined&&isKeyPoint!==undefined){updatedCategorie={pointCategory,frameIndex,instanceId,groupName,category};const groupData={instanceId,groupName,type:LandmarkEditType.KEYPOINT,category};this.containerAddPoint(groupData,new Paper.Point(position.x,position.y),pointCategory,index,isKeyPoint,visible,attributes);}}if(updatedCategorie){const{pointCategory,...newContainer}=updatedCategorie;const categoryKey=\"\".concat(frameIndex,\"_\").concat(newContainer.instanceId,\"_\").concat(newContainer.groupName,\"_\").concat(pointCategory);if(this.props.categoryPathShapes[categoryKey]===CategoryPathShape.CIRCLE){this.updateCirclePath(pointCategory,this.props.categoryPathShapes[categoryKey]===CategoryPathShape.CIRCLE,newContainer);}}}}updatePath(point,position){const{instanceId,groupName,pointCategory,index,lines}=point.data;const path=this.getPathByCategory(instanceId,groupName,pointCategory);if(path&&!path.data.isCircle){const segmentIndex=path.data.points.findIndex(p=>p===index);path.segments[segmentIndex].point.x=position.x;path.segments[segmentIndex].point.y=position.y;this.toggleCurves(path);}// change connect line position\nif(lines){lines.forEach(_ref3=>{let{isSource,pathId}=_ref3;const line=this.getPathById(instanceId,groupName,pathId);if(line){let n=-1;if(rootStore.setting.pathStyle===PathStyles.CURVES){n=!isSource?line.data.points.findIndex(p=>p===index):-1;}else{n=isSource?0:1;if(!line.segments[n]){n=0;}}if(n>=0){line.segments[n].point.x=position.x;line.segments[n].point.y=position.y;this.toggleCurves(line);}}});}this.updateLabel(instanceId,groupName,index,position,position);}setPointSelected(instanceId,groupName,index,selected){var _this$mainLayer4;if(((_this$mainLayer4=this.mainLayer)===null||_this$mainLayer4===void 0?void 0:_this$mainLayer4.children)&&this.mainLayer.children.length>0){const point=this.getShapeByKey(instanceId,groupName,index);if(point){const zoom=Paper.view.zoom*this.mainLayer.matrix.scaling.x;if(selected){point.strokeWidth=3/zoom;point.radius=(rootStore.setting.pointSize+1)/zoom;}else{point.radius=rootStore.setting.pointSize/zoom;point.strokeWidth=1/zoom;}}}}setMultiShapesSelected(selectedShapes,type){if(selectedShapes.length>0){const{instanceId,groupName}=selectedShapes[0].data;this.props.selectGroup(instanceId,groupName,false);this.props.setSelectedShape(undefined);}if(type===CategoryPathShape.CIRCLE){this.selectedPoints=selectedShapes.sort((a,b)=>a.data.index-b.data.index);rootStore.shape.setMultiSelectedShape(this.selectedPoints.map(point=>point.data.index));this.selectedPoints.forEach(point=>{const pData=point.data;this.setPointSelected(pData.instanceId,pData.groupName,pData.index,true);});}else{this.selectedRectangles=selectedShapes;this.selectedRectangles.forEach(rectangle=>{const rData=rectangle.data;this.selectShape(rData.instanceId,rData.groupName,rData.id);});}}setMultiShapesUnselected(){this.selectedPoints.forEach(point=>{const{instanceId,groupName,index}=point.data;this.setPointSelected(instanceId,groupName,index,false);});this.selectedRectangles.forEach(rectangle=>{const{instanceId,groupName,id}=rectangle.data;this.selectShape(instanceId,groupName,id,false);});this.selectedPoints=[];this.selectedRectangles=[];rootStore.shape.setMultiSelectedShape([]);}updatePointsPosition(shapes){this.props.handleShapesChange(shapes);}// resize and drag, change label position\nupdateRectanglePosition(shapes){this.props.handleShapesChange(shapes);if(this.labelLayer){shapes.forEach(_ref4=>{let{instanceId,groupName,id,shape}=_ref4;if(id&&shape&&shape.x){const{x,y,width,height}=shape;this.updateLabel(instanceId,groupName,id,{x,y},{x:x+width/2,y:y+height/2});}});}}deleteSelectedPoints(){const updatedCategories=[];const points=[];(this.selectedPoints.length>0?this.selectedPoints.map(p=>({frameIndex:this.props.currentFrame,instanceId:p.data.instanceId,category:p.data.category,groupName:p.data.groupName,index:p.data.index,shapeType:LandmarkEditType.KEYPOINT})):[{...this.props.selectedShapeStatus,index:this.props.selectedShapeStatus.id,shapeType:LandmarkEditType.KEYPOINT}]).forEach(selectedShapeStatus=>{let enable=true;const{frameIndex,instanceId,groupName,index}=selectedShapeStatus;const point=typeof index==='number'&&this.getShapeByKey(instanceId,groupName,index);if(point&&point.data){const categoryKey=\"\".concat(frameIndex,\"_\").concat(instanceId,\"_\").concat(groupName,\"_\").concat(point.data.pointCategory);if(this.props.categoryPathShapes[categoryKey]===CategoryPathShape.CIRCLE){const path=this.getPathByCategory(instanceId,groupName,point.data.pointCategory);const instance=this.getInstanceContainerByInstaceId(instanceId);if(instance&&path&&path.data.isCircle){const group=rootStore.ontology.getGroupData(instance.data.category,groupName);const pointCategory=group&&group.categories&&group.categories.length&&group.categories.find(c=>c.name===point.data.pointCategory);if(pointCategory){const sortedKeys=[...pointCategory.keys].sort((a,b)=>a-b);const pIndex1=sortedKeys[0];const pIndex2=sortedKeys[Math.ceil(sortedKeys.length/2)];if(index!==pIndex1&&index!==pIndex2){enable=true;}}}}if(enable){points.push({...selectedShapeStatus,...point.data});}}});this.props.handleShapesRemove(points);rootStore.handle.removeHandles(points);points.forEach(_ref5=>{let{frameIndex,instanceId,category,groupName,index}=_ref5;const instance=this.getInstanceContainerByInstaceId(instanceId);const point=this.getShapeByKey(instanceId,groupName,index);if(instance&&point&&!updatedCategories.includes(point.data.pointCategory)){updatedCategories.push({pointCategory:point.data.pointCategory,frameIndex,instanceId,groupName,category:instance.data.category});}this.removePointShape({instanceId,category,groupName},index);});updatedCategories.forEach(_ref6=>{let{frameIndex,pointCategory,...container}=_ref6;const categoryKey=\"\".concat(frameIndex,\"_\").concat(container.instanceId,\"_\").concat(container.groupName,\"_\").concat(pointCategory);this.updateCirclePath(pointCategory,this.props.categoryPathShapes[categoryKey]===CategoryPathShape.CIRCLE,container);});this.selectedPoints=[];}deleteSelectedRectangle(){const rectangles=(this.selectedRectangles.length>0?this.selectedRectangles.map(rect=>({frameIndex:rect.data.frameIndex,instanceId:rect.data.instanceId,category:rect.data.category,groupName:rect.data.groupName,id:rect.data.id,shapeType:LandmarkEditType.RECTANGLE})):[{...this.props.selectedShapeStatus,id:this.props.selectedShapeStatus.id,shapeType:LandmarkEditType.RECTANGLE}]).filter(v=>typeof v.id==='string');this.props.handleShapesRemove(rectangles);rectangles.forEach(_ref7=>{let{instanceId,groupName,id}=_ref7;this.removeRectangle(instanceId,groupName,id);});this.selectedRectangles=[];}toggleSelectedPointVisibility(){const points=this.selectedPoints.length>0?this.selectedPoints.map(p=>p.data):[{...this.props.selectedShapeStatus,index:this.props.selectedShapeStatus.id}].filter(v=>v.shapeType===LandmarkEditType.KEYPOINT);points.forEach(_ref8=>{let{instanceId,category,groupName,index}=_ref8;const point=this.getShapeByKey(instanceId,groupName,index);this.changeVisibleStyle(point,index,{instanceId,category,groupName,displayColor:point.data.fillColor},!point.data.visible);});this.props.togglePointsVisibility(points);}changeVisibleStyle(point,index,groupData,visible){const{instanceId,groupName}=groupData;const labelGroup=this.getLabelByKey(instanceId,groupName,index);if(point){let fillColor=point.data.isKeyPoint?KEY_POINT_COLOR:(groupData===null||groupData===void 0?void 0:groupData.displayColor)||POINT_COLOR;let strokeColor='#ffffff';if(!visible){strokeColor=fillColor;fillColor='#3d424d';}point.data.visible=visible;point.fillColor=new Paper.Color(fillColor);point.strokeColor=new Paper.Color(strokeColor);}if(this.labelLayer&&labelGroup){const label=labelGroup.children.length===2?labelGroup.children[1]:labelGroup.children[0];label.content=\"\".concat(visible?'1':'0',\"-\").concat(index);label.fillColor=new Paper.Color(visible?'white':'red');}}setCursor(cursor){this.cursor=cursor;}showShapeLabel(hits,point){var _label$children;const{activePointAttributesMode,activeAttributesMode}=rootStore.setting;if(!activePointAttributesMode&&!activeAttributesMode)return;const localPoint=this.getPointInImage(Paper.view.projectToView(point));const{data}=hits.item;let label;if(data.type===SHAPE_TYPE.KEYPOINT&&activePointAttributesMode===AttributesMode.HOVER){label=this.getAttrLabelByKey(data.instanceId,data.groupName,data.index);}else if((data.type===SHAPE_TYPE.RECTANGLE||data.type===SHAPE_TYPE.RECTANGLE_PATH||data.type===SHAPE_TYPE.RECTANGLE_POINT)&&hits.item.parent&&activeAttributesMode===AttributesMode.HOVER){const{instanceId,groupName,id}=hits.item.parent.data;label=this.getAttrLabelByKey(instanceId,groupName,id);}if(label&&((_label$children=label.children)===null||_label$children===void 0?void 0:_label$children.slice(-1)[0]).content){if(this.shownLabel){if(JSON.stringify(label)!==JSON.stringify(this.shownLabel)){const{point:position}=this.shownLabel.data;resetAttrLabelPosition(this.shownLabel,{x:position[0],y:position[1]},false);this.shownLabel=label;}}else{this.shownLabel=label;}this.shownLabel.visible=true;this.shownLabel.position.x=localPoint.x+50/Paper.view.zoom;this.shownLabel.position.y=localPoint.y+50/Paper.view.zoom;}}getNewPointsByKeyPointRange(path,startKey,endKey,instanceId,groupName){const startPosition=this.getShapeByKey(instanceId,groupName,startKey).position;const endPosition=this.getShapeByKey(instanceId,groupName,endKey).position;const segmentLength=(path.getOffsetOf(endPosition)-path.getOffsetOf(startPosition))/(endKey-startKey);let newPoints={};// new points position between start & end\nlet base=startKey;let basePoint=startPosition;while(base<endKey-1){const baseOffset=path.getOffsetOf(basePoint);const nextPoint=path.getPointAt(baseOffset+segmentLength);newPoints={...newPoints,[base+1]:nextPoint};base+=1;basePoint=nextPoint;}return newPoints;}getUpdatedPointsByNewPoints(newPoints,pointCategory,parentData){const{instanceId,groupName,category}=parentData;const updatedShapes=[];const indexs=Object.keys(newPoints).map(v=>Number(v));for(let index=0;index<indexs.length;index+=1){const pointIndex=indexs[index];const existingPoint=this.getShapeByKey(instanceId,groupName,pointIndex);if(newPoints[pointIndex]){const{x,y}=newPoints[pointIndex];const pointInfo={frameIndex:this.props.selectedShapeStatus.frameIndex,instanceId,category,groupName,index:pointIndex,shapeType:LandmarkEditType.KEYPOINT};if(existingPoint){if(existingPoint.position.x!==x||existingPoint.position.y!==y){// update position\nexistingPoint.position.x=x;existingPoint.position.y=y;this.updatePath(existingPoint,{x,y});updatedShapes.push({...pointInfo,shape:{position:{x,y}}});}}else{// add new point\nconst isKeyPoint=pointCategory.keys.includes(pointIndex);const groupContainer=this.getGroupContainerByGroupName(instanceId,groupName);this.addKeypointShape(new Paper.Point(x,y),pointCategory.name,pointIndex,isKeyPoint,groupContainer,true);updatedShapes.push({...pointInfo,shape:{pointCategory:pointCategory.name,isKeyPoint,position:{x,y},visible:true}});}}}return updatedShapes;}autoAdjust(){let point=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props.selectedShapeStatus;if(this.props.selectedShapeInfo){const{id}=point;const{instanceId,category,groupName,pointCategory:categoryName}=this.props.selectedShapeInfo;const categoryKey=\"\".concat(this.props.currentFrame,\"_\").concat(instanceId,\"_\").concat(groupName,\"_\").concat(categoryName);const path=this.getPathByCategory(instanceId,groupName,categoryName);// pointCategory path\nconst pointCategory=this.props.categories.find(c=>c.name===categoryName);// pointCategory definition\nif(path&&pointCategory&&this.props.categoryPathShapes[categoryKey]!==CategoryPathShape.CIRCLE){// calc the prev & next key point index\nlet prevKeyPointIndex;let nextKeyPointIndex;const{points=[]}=path.data;const{keys=[]}=pointCategory;const keysWithTwoSides=[...(keys.includes(points[0])?[]:[points[0]]),...keys,...(keys.includes(points[points.length-1])?[]:[points[points.length-1]])].sort((a,b)=>a-b);let keyIndex=keysWithTwoSides.findIndex(key=>key>Number(id));if(keyIndex<0){// not found, use the last point\nkeyIndex=keysWithTwoSides.length-1;}let i=keyIndex;while(i<keysWithTwoSides.length){if(points.includes(keysWithTwoSides[i])){nextKeyPointIndex=keysWithTwoSides[i];break;}i+=1;}i=keyIndex-1;while(i>=0){if(points.includes(keysWithTwoSides[i])){prevKeyPointIndex=keysWithTwoSides[i];break;}i-=1;}// range found, continue\nif(prevKeyPointIndex!==undefined&&nextKeyPointIndex!==undefined){const newPoints=this.getNewPointsByKeyPointRange(path,prevKeyPointIndex,nextKeyPointIndex,instanceId,groupName);const parentData={instanceId,category,groupName};const updatedShapes=this.getUpdatedPointsByNewPoints(newPoints,pointCategory,parentData);if(updatedShapes.length>0){this.props.handleShapesChange(updatedShapes);}}}}}switchSmoothMode(){if(this.props.selectedShapeInfo&&rootStore.setting.pathStyle!==PathStyles.CURVES){const{instanceId,category,groupName,pointCategory:categoryName}=this.props.selectedShapeInfo;const path=this.getPathByCategory(instanceId,groupName,categoryName);const categoryKey=\"\".concat(this.props.currentFrame,\"_\").concat(instanceId,\"_\").concat(groupName,\"_\").concat(categoryName);if(path&&this.props.categoryPathShapes[categoryKey]!==CategoryPathShape.CIRCLE){if(path===this.smoothPath){// ends\nconst pointCategory=this.props.categories.find(c=>c.name===categoryName);if(pointCategory){const keyPoints=pointCategory.keys.filter(k=>path.data.points.includes(k)).sort((a,b)=>a-b);let updatedShapes=[];for(let i=1;i<keyPoints.length;i+=1){const newPoints=this.getNewPointsByKeyPointRange(path,keyPoints[i-1],keyPoints[i],instanceId,groupName);const parentData={instanceId,category,groupName};updatedShapes=[...updatedShapes,...this.getUpdatedPointsByNewPoints(newPoints,pointCategory,parentData)];}if(updatedShapes.length>0){this.props.handleShapesChange(updatedShapes);}}this.setSmooth(null);}else{// start\nthis.setSmooth(path);}}}}setSmooth(smooth){if(this.smoothPath){this.smoothPath.fullySelected=false;this.smoothPath.segments.forEach(seg=>{seg.clearHandles();});}this.smoothPath=smooth;if(this.smoothPath){this.smoothPath.smooth({type:'continuous'});this.smoothPath.fullySelected=true;}}setSelectedCurves(){if(this.props.selectedShapeInfo){const{selectedShapeInfo}=this.props;const{instanceId,groupName,pointCategory}=selectedShapeInfo;const path=this.getPathByCategory(instanceId,groupName,pointCategory);this.toggleCurves(path);}const{instanceId,groupName,id}=this.props.selectedShapeStatus;if(typeof id==='number'){const point=this.getShapeByKey(instanceId,groupName,id);if(point){const{data:{lines=[]}}=point;lines.forEach(_ref9=>{let{pathId}=_ref9;const path=this.getPathById(instanceId,groupName,pathId);this.toggleCurves(path);});}}}toggleCurves(path){if(rootStore.setting.pathStyle===PathStyles.CURVES&&path){const{data:{instanceId,groupName,id:pathId,points},segments}=path;const{currentFrame}=this.props;path.smooth({type:'continuous'});const map={};// points\npoints.forEach((pointIndex,i)=>{const segment=segments[i];if(segment){const{handleIn,handleOut,point}=segment;map[pointIndex]={frameIndex:currentFrame,pathId,instanceId,groupName,pointIndex,handleIn:{x:handleIn.x,y:handleIn.y},handleOut:{x:handleOut.x,y:handleOut.y},pointPosition:{x:point.x,y:point.y}};}});rootStore.handle.setPathHandles(currentFrame,pathId,map);}}setCategoryAsCircle(){if(this.props.selectedShapeInfo){const{instanceId,category,groupName,pointCategory}=this.props.selectedShapeInfo;if(pointCategory){const container={instanceId,category,groupName};const categoryKey=\"\".concat(this.props.currentFrame,\"_\").concat(instanceId,\"_\").concat(groupName,\"_\").concat(pointCategory);if(this.props.categoryPathShapes[categoryKey]===CategoryPathShape.CIRCLE){this.updateCirclePath(pointCategory,false,container);this.props.setCategoryPathShape(categoryKey);}else{const updatedShapes=this.updateCirclePath(pointCategory,true,container);this.props.setCategoryPathShape(categoryKey,CategoryPathShape.CIRCLE,updatedShapes);}}}}updateCirclePath(categoryName){let isCirclePath=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;let container=arguments.length>2?arguments[2]:undefined;const{instanceId,groupName,category}=container;const updatedShapes=[];const path=this.getPathByCategory(instanceId,groupName,categoryName);const categoryData=rootStore.ontology.getCategoryData(category,groupName,categoryName);const lineColor=(categoryData===null||categoryData===void 0?void 0:categoryData.isConnect)===false?new Paper.Color('rgba(0,0,0,0)'):new Paper.Color((categoryData===null||categoryData===void 0?void 0:categoryData.displayColor)||POINT_COLOR);if(path&&categoryData){const categoryPoints=this.getPointsByCategory(instanceId,groupName,categoryName);if(categoryPoints){const sortedKeys=[...categoryData.keys].sort((a,b)=>a-b);const pIndex1=sortedKeys[0];const pIndex2=sortedKeys[Math.ceil(sortedKeys.length/2)];const point1=categoryPoints.find(p=>p.data.index===pIndex1);const point2=categoryPoints.find(p=>p.data.index===pIndex2);const zoom=Paper.view.zoom*this.mainLayer.matrix.scaling.x;if(point1&&point2){if(isCirclePath){// is a circle & key points all exist\nconst centerX=(point1.position.x+point2.position.x)/2;const centerY=(point1.position.y+point2.position.y)/2;const radius=Math.sqrt((point2.position.x-point1.position.x)**2+(point2.position.y-point1.position.y)**2)/2;const newPath=new Paper.CompoundPath({children:[new Paper.Path.Circle({center:[centerX,centerY],radius}),new Paper.Path.Line({from:[point1.position.x,point1.position.y],to:[point2.position.x,point2.position.y]}),new Paper.Path.Line({from:new Paper.Point(computeRotatedPosition({x:centerX,y:centerY},point1.position,Math.PI/2)),to:new Paper.Point(computeRotatedPosition({x:centerX,y:centerY},point1.position,-Math.PI/2))})],strokeWidth:rootStore.setting.lineWidth/zoom,strokeColor:lineColor,selectedColor:lineColor});newPath.data={...path.data,isCircle:true,instanceId,groupName};path.replaceWith(newPath);// update all points in this pointCategory\nconst update=(index,position)=>{const existingPoint=this.getShapeByKey(instanceId,groupName,index);const pointInfo={frameIndex:this.props.selectedShapeStatus.frameIndex,instanceId,category,groupName,index,shapeType:LandmarkEditType.KEYPOINT};if(existingPoint){// update position\nexistingPoint.position.x=position.x;existingPoint.position.y=position.y;this.updatePath(existingPoint,position);updatedShapes.push({...pointInfo,shape:{position:{x:position.x,y:position.y}}});}else{const isKeyPoint=categoryData.keys.includes(index);const groupContainer=this.getGroupContainerByGroupName(instanceId,groupName);this.addKeypointShape(new Paper.Point(position.x,position.y),categoryData.name,index,isKeyPoint,groupContainer,true);updatedShapes.push({...pointInfo,shape:{pointCategory:categoryData.name,isKeyPoint,position:{x:position.x,y:position.y},visible:true}});}};const[start,end]=categoryData.range;for(let i=pIndex1+1;i<pIndex2;i+=1){const radians=Math.PI/(pIndex2-pIndex1)*(i-pIndex1);const position=computeRotatedPosition({x:centerX,y:centerY},point1.position,radians);update(i,position);}for(let i=pIndex2+1;i<=end;i+=1){const radians=Math.PI/(end+1-pIndex2)*(i-pIndex2);const position=computeRotatedPosition({x:centerX,y:centerY},point2.position,radians);update(i,position);}for(let i=start;i<pIndex1;i+=1){const radians=Math.PI/(end+1-pIndex2)*(start-pIndex1);const position=computeRotatedPosition({x:centerX,y:centerY},point1.position,radians);update(i,position);}}else{const points=[...categoryPoints].sort((a,b)=>a.data.index-b.data.index);const newPath=new Paper.Path({segments:points.map(p=>p.position),strokeWidth:rootStore.setting.lineWidth/zoom,strokeColor:lineColor,selectedColor:lineColor});newPath.data={...path.data,isCircle:false,points:points.map(p=>p.data.index)};path.replaceWith(newPath);this.toggleCurves(newPath);}}}}return updatedShapes;}addRectangle(path,groupInfo){let add=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(this.mainLayer){const{displayColor,instanceId,category,groupName}=groupInfo;const{data:{id},segments}=path;const rectData={x:segments[0].point.x,y:segments[0].point.y,width:segments[2].point.x-segments[0].point.x,height:segments[2].point.y-segments[0].point.y,displayColor};this.drawRectangle(rectData,{instanceId,category,groupName},id);if(add){this.props.setNextEmptyShape();}}}getAlphaColor(color){let opacity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.fillOpacity;return hexToRgba(color,opacity);}drawRectangle(rectData,groupData,id){let visible=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;if(this.props.selectedShapeInfo&&this.mainLayer){const{x,y,width,height,displayColor}=rectData;const{instanceId,category,groupName}=groupData;let instanceContainer=this.getInstanceContainerByInstaceId(instanceId);let groupContainer=this.getGroupContainerByGroupName(instanceId,groupName);if(!instanceContainer){var _this$mainLayer5;instanceContainer=new Paper.Group();instanceContainer.data={instanceId,name:category,type:SHAPE_TYPE.INSTANCE};(_this$mainLayer5=this.mainLayer)===null||_this$mainLayer5===void 0?void 0:_this$mainLayer5.addChild(instanceContainer);}if(!instanceContainer||!groupContainer){groupContainer=new Paper.Group();groupContainer.data={groupName,category,type:SHAPE_TYPE.GROUP,instanceId};instanceContainer.addChild(groupContainer);}const zoom=Paper.view.zoom*this.mainLayer.matrix.scaling.x;let rectangleBox=this.getShapeByKey(instanceId,groupName,id);if(rectangleBox){rectangleBox.removeChildren();}else{rectangleBox=new Paper.Group();rectangleBox.data={frameIndex:this.props.selectedShapeStatus.frameIndex,id,groupName,category,type:SHAPE_TYPE.RECTANGLE_GROUP,instanceId,displayColor,visible};groupContainer.addChild(rectangleBox);}const rectangle=new Paper.Shape.Rectangle({point:[x,y],size:[width,height],fillColor:this.getAlphaColor(displayColor||POINT_COLOR),strokeWidth:rootStore.setting.lineWidth/zoom});rectangle.data={parentShape:id,cursor:Cursor.MOVE,type:SHAPE_TYPE.RECTANGLE};rectangleBox.addChild(rectangle);this.selectShape(instanceId,groupName,id,id===this.props.selectedShapeStatus.id);if(this.labelLayer){var _instance$children$fi2,_groupInfo$label_conf3;const groupInfo=rootStore.ontology.getGroupData(category,groupName);const instance=this.props.getInstance(instanceId);const group=instance===null||instance===void 0?void 0:(_instance$children$fi2=instance.children.find(g=>g.name===groupName))===null||_instance$children$fi2===void 0?void 0:_instance$children$fi2.frames[this.props.currentFrame];const label=\"\".concat((groupInfo===null||groupInfo===void 0?void 0:groupInfo.class_display_name)||'',\" \").concat((instance===null||instance===void 0?void 0:instance.number)||'',\"-\").concat((groupInfo===null||groupInfo===void 0?void 0:groupInfo.display_name)||(groupInfo===null||groupInfo===void 0?void 0:groupInfo.name)||'');let attrsLabel=getValuesLabel(groupInfo===null||groupInfo===void 0?void 0:(_groupInfo$label_conf3=groupInfo.label_config)===null||_groupInfo$label_conf3===void 0?void 0:_groupInfo$label_conf3.fields,group===null||group===void 0?void 0:group.attributes,rootStore.setting.labelItems);attrsLabel=\"\".concat(rootStore.setting.displayCategory?\"\".concat(label,\";\"):'').concat(rootStore.setting.displayCategory&&attrsLabel?';':'').concat(attrsLabel);const labelGroup=this.getLabelByKey(instanceId,groupName,id);if(labelGroup){this.updateLabel(instanceId,groupName,id,{x,y},{x:x+width/2,y:y+height/2});}else{this.addLabel(label,{x,y,width,height},{instanceId,category,groupName},id,visible,SHAPE_TYPE.RECTANGLE,attrsLabel);}}}}removeRectangle(instanceId,groupName,id){const rectangleBox=this.getShapeByKey(instanceId,groupName,id);if(rectangleBox){rectangleBox.removeChildren();rectangleBox.remove();this.removeLabel(instanceId,groupName,id);}}selectShape(instanceId,groupName,id){let selected=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;if(this.mainLayer){const rectangleBox=this.getShapeByKey(instanceId,groupName,id);if(rectangleBox&&rectangleBox.children){const{bounds:{topLeft,topRight,bottomRight,bottomLeft,x,y,height,width}}=rectangleBox.children[0];const points=[topLeft,topRight,bottomRight,bottomLeft];const{displayColor}=rectangleBox.data;const zoom=Paper.view.zoom*this.mainLayer.matrix.scaling.x;if(selected){const radius=rootStore.setting.pointSize/2/zoom;const newColor=new Paper.Color(displayColor||POINT_COLOR);points.forEach((point,index)=>{const sourceSeg=new Paper.Segment(point);const targetSeg=index+1>=points.length?new Paper.Segment(points[0]):new Paper.Segment(points[index+1]);const lineBar=new Paper.Path({segments:[sourceSeg,targetSeg],strokeWidth:rootStore.setting.lineWidth/zoom,fillColor:newColor,strokeColor:newColor,selectedColor:newColor});lineBar.data={parentShape:id,cursor:index%2===0?Cursor.NS_RESIZE:Cursor.EW_RESIZE,type:SHAPE_TYPE.RECTANGLE_PATH,controlIndex:index};rectangleBox.addChild(lineBar);});points.forEach((point,index)=>{const control=new Paper.Shape.Circle(point,radius);control.strokeColor=newColor;control.strokeWidth=rootStore.setting.lineWidth/zoom;control.fillColor=newColor;control.data={parentShape:id,cursor:index%2===0?Cursor.NWSE_RESIZE:Cursor.NESW_RESIZE,type:SHAPE_TYPE.RECTANGLE_POINT,controlIndex:index,displayColor};rectangleBox.addChild(control);});}else{rectangleBox.removeChildren();const rectangle=new Paper.Shape.Rectangle({point:[x,y],size:[width,height],fillColor:this.getAlphaColor(displayColor||POINT_COLOR),strokeWidth:rootStore.setting.lineWidth/zoom});rectangle.data={parentShape:id,cursor:Cursor.MOVE,type:SHAPE_TYPE.RECTANGLE};rectangleBox.addChild(rectangle);}}}}drawWarnings(){var _this$warningLayer2;(_this$warningLayer2=this.warningLayer)===null||_this$warningLayer2===void 0?void 0:_this$warningLayer2.removeChildren();const{qaWarnings:warnings}=rootStore.review;if(warnings.length>0){this.currentWarnings=warnings.filter(warning=>warning.frames[0]===this.props.currentFrame);if(this.warningLayer){const strokeWitdth=2/this.paperZoom;const warningIconSize=8/this.paperZoom;this.currentWarnings.forEach(warning=>{const{id,groupName,shapeIds,data}=warning;if(!groupName||!shapeIds){// missing\nif(data===null||data===void 0?void 0:data.position){const warningIcon=new Paper.Shape.Circle({center:data.position,radius:warningIconSize,fillColor:'#DD4924'});const text=new Paper.PointText({content:'!',fontSize:FONT_SIZE/this.paperZoom,fontWeight:'700',fillColor:'white'});warningIcon.data={id};text.data={id};text.position.set(data.position);const group=new Paper.Group();group.addChild(warningIcon);group.addChild(text);this.warningLayer.addChild(group);}return;}const shapes=[];shapeIds.forEach(shapeId=>{const shape=this.getShapeByKey(id,groupName,shapeId);if(shape){shapes.push(shape);if(shape.data.type!==SHAPE_TYPE.RECTANGLE_GROUP){const{x,y,width,height}=shape.bounds;const boundRect=new Paper.Shape.Rectangle({point:[x-strokeWitdth,y-strokeWitdth],size:[width+2*strokeWitdth,height+2*strokeWitdth],strokeColor:new Paper.Color('#DC4624'),strokeWidth:strokeWitdth});this.warningLayer.addChild(boundRect);}}});let position=[];if(shapes.length>1){const minXList=[];const maxXList=[];const minYList=[];const maxYList=[];shapes.forEach(_ref10=>{let{bounds:{x,y,width,height}}=_ref10;minXList.push(x-strokeWitdth);maxXList.push(x+width+strokeWitdth);minYList.push(y-strokeWitdth);maxYList.push(y+height+strokeWitdth);});const minX=Math.min(...minXList);const maxX=Math.max(...maxXList);const minY=Math.min(...minYList);const maxY=Math.max(...maxYList);const boundRect=new Paper.Shape.Rectangle({point:[minX-2*strokeWitdth,minY-2*strokeWitdth],size:[maxX-minX+4*strokeWitdth,maxY-minY+4*strokeWitdth],strokeColor:new Paper.Color('#DC4624'),strokeWidth:strokeWitdth});this.warningLayer.addChild(boundRect);position=[minX-warningIconSize,minY-warningIconSize];}else if(shapes.length===1){position=[shapes[0].bounds.x-warningIconSize,shapes[0].bounds.y-warningIconSize];}if(shapes.length>0){const warningIcon=new Paper.Shape.Circle({center:new Paper.Point(position[0],position[1]),radius:warningIconSize,fillColor:'#DC4624'});const text=new Paper.PointText({content:'!',fontSize:FONT_SIZE/this.paperZoom,fontWeight:'700',fillColor:'white'});warningIcon.data={instanceId:id,groupName,shapeIds};text.data={instanceId:id,groupName,shapeIds};text.position.x=position[0];text.position.y=position[1];this.warningLayer.addChild(warningIcon);this.warningLayer.addChild(text);}});}}}render(){return/*#__PURE__*/React.createElement(\"div\",{ref:this.canvasContainer,className:\"canvas\",style:{cursor:this.cursor}},/*#__PURE__*/React.createElement(\"canvas\",{ref:this.canvas}),this.props.isReview&&/*#__PURE__*/React.createElement(\"div\",{className:\"layer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"tip\"},/*#__PURE__*/React.createElement(\"span\",null,formatMessage('ORIGINAL_DATA')),/*#__PURE__*/React.createElement(\"span\",null,formatMessage('REVIEW_TIP')),/*#__PURE__*/React.createElement(Button,{className:\"close\",onClick:this.props.setReview,size:\"small\"},formatMessage('REVIEW_CLOSE',{values:{shortcut:'Ctrl+V'}})))),this.props.loading&&/*#__PURE__*/React.createElement(\"div\",{className:\"loading\"},!this.raster&&/*#__PURE__*/React.createElement(Spin,{indicator:/*#__PURE__*/React.createElement(LoadingOutlined,{style:{fontSize:100,color:'#00bad3'},spin:true})})));}},(_applyDecoratedDescriptor(_class2.prototype,\"activeTool\",[computed],Object.getOwnPropertyDescriptor(_class2.prototype,\"activeTool\"),_class2.prototype)),_class2))||_class;export default Canvas;","map":{"version":3,"names":["React","observable","action","makeObservable","computed","reaction","observer","Paper","debounce","hexToRgba","imageLoader","ImageFilters","ResizeObserver","Spin","Button","LoadingOutlined","Tool","AttributesMode","rootStore","formatMessage","CategoryPathShape","LandmarkEditType","LabelStyle","PathStyles","Cursor","resetAttrLabelPosition","getValuesLabel","resizeLabel","computeRotatedPosition","ZOOM_MIN","ZOOM_MAX","GRID_GAP","GRID_LINE_WIDTH","FONT_SIZE","POINT_COLOR","KEY_POINT_COLOR","SHAPE_TYPE","KEYPOINT","PATH","KEYPOINT_BOX","INSTANCE","GROUP","RECTANGLE_POINT","RECTANGLE_PATH","RECTANGLE_GROUP","RECTANGLE","WARNGIN","LabelType","Canvas","_class","_class2","Component","constructor","props","_this","this","cursor","DEFAULT","canvas","createRef","canvasContainer","imageCanvas","imageData","raster","rasterLayer","gridLayer","labelLayer","attrLayer","mainLayer","warningLayer","tool","hits","selectedHit","warningBtn","selectedPoints","selectedRectangles","smoothPath","shownLabel","fillOpacity","resizeObserve","catchZoom","prevRaster","resizeDebounced","paperZoom","currentWarnings","resize","isWindow","arguments","length","undefined","current","offsetWidth","viewWidth","offsetHeight","viewHeight","view","viewSize","Size","viewCenter","Point","x","y","center","zoom","width","imgWidth","height","imgHeight","viewRatio","imgRatio","scaleFactor","offsetX","offsetY","matrix","Matrix","translate","scale","project","layers","forEach","layer","position","scaling","resizeContent","resizeGrid","resizeShapes","drawWarnings","event","mousePosition","viewPosition","viewToProject","oldZoom","oldCenter","newZoom","deltaY","Math","max","min","zoomScale","offset","subtract","multiply","add","drag","fitSelected","instanceId","groupName","_this$getInstanceCont","groupBox","getGroupContainerByGroupName","getInstanceContainerByInstaceId","children","find","g","data","type","bounds","point","localToGlobal","fitPoint","hitTest","_this$tool","mouseDown","_hit","isDrawPoint","selectedShapeStatus","shapeType","canAddShape","POINTER","CROSSHAIR","selected","hitTestAll","fill","handles","stroke","tolerance","match","ht","item","hit","i","h","includes","ctrlKey","_hit$item$data","_hit$item$data2","_hit$item$data3","_hit$item$data4","_hit$item$data5","isShapeInSelectedShapes","index","id","MOVE","showShapeLabel","_this$warningLayer","fullySelected","setCursor","clearHits","updateGroupBox","category","boundRect","getShapeByGroup","isRemovebound","ontology","setting","pointSize","lineWidth","labelItems","groupConntainer","points","filter","v","CIRCLE","map","xList","yList","minX","maxX","minY","maxY","_instance$children$fi","_groupInfo$label_conf","remove","range","fontSize","strokeWitdth","Shape","Rectangle","size","strokeColor","Color","strokeWidth","addChild","groupInfo","getGroupData","instance","getInstance","group","name","frames","currentFrame","attrsLabel","label_config","fields","attributes","content","concat","class_display_name","number","display_name","labelGroup","getLabelByKey","groupAttribute","w","addLabel","removeLabel","review","qaWarnings","shape","updatedShapes","updateShapes","activeTool","_this$props$ontologyG","ontologyGroup","componentDidMount","setup","setupLayers","setupTools","addEventListener","e","preventDefault","observe","componentDidUpdate","prevProps","image","loadImage","JSON","stringify","defaultInstances","Object","values","_this$mainLayer","instanceContainer","Group","groupContainer","displayColor","updatedCategories","_ref","pointCategory","frameIndex","container","categoryKey","updateCirclePath","categoryPathShapes","onCategoriesUpdated","isSelectedChange","setPointSelected","selectShape","setMultiShapesUnselected","selectedShapeInfo","setSmooth","pathStyle","CURVES","setSelectedCurves","selectedInstance","componentWillUnmount","disconnect","Layer","applyMatrix","visible","isGridVisible","onMouseMove","activate","changeLoading","c","_canvas$getContext","getContext","getImageData","Raster","onLoad","_this$gridLayer","_this$gridLayer$child","labelMode","addGrid","orientation","crossOrigin","updateFilters","brightness","contrast","saturation","lightness","hue","rescale","filters","BrightnessContrastPhotoshop","Rescale","HSLAdjustment","setImageData","removeChildren","rows","ceil","Array","from","_","_this$gridLayer2","path","Path","Line","to","dashed","cols","_this$gridLayer3","baseWidth","dashArray","findIndex","p","isPointInImage","localPoint","globalToLocal","getPointInImage","instaceId","_this$mainLayer2","getShapeByKey","key","_this$labelLayer","l","getAttrLabelByKey","_this$attrLayer","_this$mainLayer3","getPathByCategory","getPathById","pathId","getPointsByCategory","isReview","readonly","drawMode","count","annotatedPointOrShapeCount","containerAddPoint","groupData","isKeyPoint","addKeypointShape","addKeypoint","newPoint","otherPoints","handleShapesChange","setNextEmptyShape","pointIndex","_groupInfo$point_labe","pointColor","fillColor","pointCircle","Circle","radius","selectedColor","categoryData","categories","segment","Segment","lineColor","isConnect","isCircle","nextP","push","insert","splice","segments","toggleCurves","lines","indexOf","linesData","connectPoints","color","isSource","otherEnd","fromTo","otherCategory","startPoint","endPoint","endSegment","line","sourceIndex","unshift","sendToBack","label","point_label_config","displayPointIndex","removePointShape","containerData","removeSegment","_ref2","Number","split","_this$labelLayer2","_this$attrLayer2","set","cleanLayer","_this$mainLayer$child","_container$children","PointText","shadowColor","shadowBlur","shadowOffset","labelRect","labelBgColor","OBJECT","labelStyle","arrtLabelGroup","clone","slice","updateLabelContent","updateLabel","updateAttributeLabel","instanceNum","_groupInfo$point_labe2","pointLabelItems","_groupInfo$label_conf2","categoryLabel","displayCategory","labelText","activePointAttributesMode","ALWAYS","activeAttributesMode","updatelabelVisible","activeMode","_this$attrLayer3","labelType","updatedShape","updatePoint","updateRectangle","setUpdatedShapes","updateShape","rectangle","currRectangle","removeRectangle","drawRectangle","closed","addRectangle","updatedCategorie","currPoint","currCategory","updatePath","changeVisibleStyle","HIDE","newContainer","segmentIndex","_ref3","n","_this$mainLayer4","setMultiShapesSelected","selectedShapes","selectGroup","setSelectedShape","sort","a","b","setMultiSelectedShape","pData","rData","updatePointsPosition","shapes","updateRectanglePosition","_ref4","deleteSelectedPoints","enable","sortedKeys","keys","pIndex1","pIndex2","handleShapesRemove","handle","removeHandles","_ref5","_ref6","deleteSelectedRectangle","rectangles","rect","_ref7","toggleSelectedPointVisibility","_ref8","togglePointsVisibility","_label$children","projectToView","HOVER","parent","getNewPointsByKeyPointRange","startKey","endKey","startPosition","endPosition","segmentLength","getOffsetOf","newPoints","base","basePoint","baseOffset","nextPoint","getPointAt","getUpdatedPointsByNewPoints","parentData","indexs","existingPoint","pointInfo","autoAdjust","categoryName","prevKeyPointIndex","nextKeyPointIndex","keysWithTwoSides","keyIndex","switchSmoothMode","keyPoints","k","smooth","seg","clearHandles","_ref9","handleIn","handleOut","pointPosition","setPathHandles","setCategoryAsCircle","setCategoryPathShape","isCirclePath","getCategoryData","categoryPoints","point1","point2","centerX","centerY","sqrt","newPath","CompoundPath","PI","replaceWith","update","start","end","radians","rectData","getAlphaColor","opacity","_this$mainLayer5","rectangleBox","parentShape","_instance$children$fi2","_groupInfo$label_conf3","topLeft","topRight","bottomRight","bottomLeft","newColor","sourceSeg","targetSeg","lineBar","NS_RESIZE","EW_RESIZE","controlIndex","control","NWSE_RESIZE","NESW_RESIZE","_this$warningLayer2","warnings","warning","warningIconSize","shapeIds","warningIcon","text","fontWeight","shapeId","minXList","maxXList","minYList","maxYList","_ref10","render","createElement","ref","className","style","onClick","setReview","shortcut","loading","indicator","spin","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/components/Canvas.tsx"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { observable, action, makeObservable, computed, reaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport Paper from 'paper';\nimport { debounce } from 'lodash';\nimport hexToRgba from 'hex-to-rgba';\nimport imageLoader from 'blueimp-load-image';\nimport ImageFilters from 'canvas-filters';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Spin, Button } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport Tool, { ToolEventExtend, ToolProps } from '../tools/Tool';\nimport { OntologyChild } from '../store/OntologyStore';\nimport { AttributesMode } from '../store/SettingsStore';\nimport rootStore from '../store/RootStore';\nimport formatMessage from '../locales';\nimport {\n  Point, PointStatus, CategoryItem, CategoryPathShape,\n  Group, LandmarkEditType, ShapeInfo, GroupInfo, InstanceAct,\n  PointInfo, UpdatedShape, Rectangle, KeypointCategoryProps,\n  LabelStyle, PathStyles, Handle,\n} from '../types';\nimport Cursor from '../../common/Cursor';\nimport { resetAttrLabelPosition, getValuesLabel, resizeLabel } from '../utils';\nimport { computeRotatedPosition } from '../../../utils/math';\nimport { IWarning } from '../../common/tabs-menu/Validator';\nimport './Canvas.scss';\n\nconst ZOOM_MIN = 0.5;\nconst ZOOM_MAX = 100;\nconst GRID_GAP = 10;\nconst GRID_LINE_WIDTH = 1;\nconst FONT_SIZE = 12;\nexport const POINT_COLOR = '#5cdef0';\nconst KEY_POINT_COLOR = '#ffb86d';\nexport const SHAPE_TYPE = {\n  KEYPOINT: 'keypoint',\n  PATH: 'path',\n  KEYPOINT_BOX: 'keypoint_box',\n  INSTANCE: 'instance',\n  GROUP: 'group',\n  RECTANGLE_POINT: 'rectangle_point',\n  RECTANGLE_PATH: 'rectangle_path',\n  RECTANGLE_GROUP: 'rectangle_group',\n  RECTANGLE: 'rectangle',\n  WARNGIN: 'warning'\n};\n\nenum LabelType {\n  KEYPOINT='keypoint',\n  OBJECT='object'\n}\n\ninterface Props {\n  image: string;\n  readonly: boolean;\n  loading: boolean;\n  currentFrame: number;\n  isReview: boolean;\n  categories: CategoryItem[];\n  updatedCategories: KeypointCategoryProps[];\n  defaultInstances: {[id: string]: InstanceAct};\n  selectedInstance?: InstanceAct;\n  selectedGroupName?: string;\n  ontologyGroup?: OntologyChild;\n  annotatedPointOrShapeCount: number;\n  selectedShapeStatus: ShapeInfo;\n  selectedShapeInfo: PointInfo | GroupInfo | null;\n  categoryPathShapes: {[categoryName: string]: CategoryPathShape};\n  changeLoading: (loading: boolean) => void;\n  selectGroup: (groupId: string, name: string, isFit?: boolean) => void;\n  setSelectedShape: (selectedIndex?: number | string, data?: Group) => void;\n  handleShapesChange: (shape: UpdatedShape[]) => void;\n  handleShapesRemove: (shape: UpdatedShape[]) => void;\n  togglePointsVisibility: (points: PointStatus[]) => void;\n  setNextEmptyShape: () => void;\n  onCategoriesUpdated: () => void;\n  editShapeForm: () => void;\n  editGroupForm: () => void;\n  onSave: () => void;\n  setCategoryPathShape: (categoryName: string, type?: CategoryPathShape, updatedShapes?: UpdatedShape[]) => void;\n  getInstance: (id: string) => InstanceAct | undefined;\n  handleUndo: () => void;\n  handleRedo: () => void;\n  setReview: () => void;\n  handleChangeDrawMode: (mode: boolean) => void;\n}\n\n@observer\nclass Canvas extends React.Component<Props> {\n  cursor = Cursor.DEFAULT;\n\n  canvas: React.RefObject<HTMLCanvasElement> = React.createRef();\n\n  canvasContainer: React.RefObject<HTMLDivElement> = React.createRef();\n\n  imageCanvas: HTMLCanvasElement | undefined;\n\n  imageData: ImageData | undefined;\n\n  raster: paper.Raster | undefined;\n\n  rasterLayer: paper.Layer | undefined;\n\n  gridLayer: paper.Layer | undefined;\n\n  labelLayer: paper.Layer | undefined;\n\n  attrLayer: paper.Layer | undefined;\n\n  mainLayer: paper.Layer | undefined;\n\n  warningLayer: paper.Layer | undefined;\n\n  tool: ToolProps | undefined;\n\n  hits: paper.HitResult | undefined;\n\n  selectedHit: paper.Item | undefined;\n\n  warningBtn: paper.HitResult | undefined;\n\n  selectedPoints: paper.Shape[] = [];\n\n  selectedRectangles: paper.Group[] = [];\n\n  smoothPath: paper.Path | null = null;\n\n  shownLabel: paper.Group | null = null;\n\n  fillOpacity = 0.3;\n\n  resizeObserve: ResizeObserver | null = null;\n\n  catchZoom: { zoom: number, center: paper.Point } | undefined;\n\n  prevRaster: paper.Raster | null = null;\n\n  resizeDebounced: any;\n\n  paperZoom = 1;\n\n  currentWarnings: IWarning[] = [];\n\n  constructor(props: Props) {\n    super(props);\n    makeObservable(this, {\n      cursor: observable,\n      setCursor: action,\n    });\n\n    reaction(\n      () => rootStore.review.qaWarnings,\n      () => {\n        this.drawWarnings();\n      },\n    );\n\n    // change frame & undo & redo to update points\n    reaction(\n      () => rootStore.shape.updatedShapes,\n      () => {\n        this.updateShapes();\n        this.drawWarnings();\n      },\n    );\n  }\n\n  @computed get activeTool() {\n    let tool = '';\n    switch (this.props.ontologyGroup?.type) {\n      case LandmarkEditType.KEYPOINT:\n        tool = CategoryPathShape.CIRCLE;\n        break;\n      case LandmarkEditType.RECTANGLE:\n        tool = CategoryPathShape.RECTANGLE;\n        break;\n      default:\n        break;\n    }\n    return tool;\n  }\n\n  componentDidMount() {\n    if (this.canvas.current) {\n      // init canvas\n      Paper.setup(this.canvas.current);\n      // setup layers\n      this.setupLayers();\n      // setuo tools\n      this.setupTools();\n\n      this.canvas.current.addEventListener('wheel', this.zoom, false);\n      this.canvas.current.addEventListener('contextmenu', (e) => e.preventDefault(), false);\n    }\n    if (this.canvasContainer.current) {\n      this.resizeObserve = new ResizeObserver(() => { this.resize(true); });\n      this.resizeObserve.observe(this.canvasContainer.current);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.image !== this.props.image) {\n      this.loadImage();\n    }\n\n    // default instances\n    if (JSON.stringify(prevProps.defaultInstances) !== JSON.stringify(this.props.defaultInstances)) {\n      const defaultInstances = Object.values(this.props.defaultInstances).filter((instance) => instance && !prevProps.defaultInstances[instance.id]);\n      if (defaultInstances.length > 0) {\n        defaultInstances.forEach((instance) => {\n          const instanceContainer = new Paper.Group();\n          this.mainLayer?.addChild(instanceContainer);\n          instanceContainer.data = {\n            instanceId: instance.id,\n            category: instance.category,\n            type: SHAPE_TYPE.INSTANCE,\n          };\n          instance.children.forEach((group) => {\n            const groupContainer = new Paper.Group();\n            groupContainer.data = {\n              groupName: group.name,\n              type: SHAPE_TYPE.GROUP,\n              instanceId: instance.id,\n              category: instance.category,\n              displayColor: instance.displayColor || POINT_COLOR,\n            };\n            instanceContainer.addChild(groupContainer);\n          });\n        });\n      }\n    }\n\n    if (\n      JSON.stringify(prevProps.updatedCategories) !== JSON.stringify(this.props.updatedCategories) &&\n      this.props.updatedCategories.length > 0\n    ) {\n      this.props.updatedCategories.forEach(({ pointCategory, frameIndex, instanceId, groupName, category }) => {\n        if (frameIndex === this.props.currentFrame) {\n          const container = { instanceId, groupName, category };\n          const categoryKey = `${frameIndex}_${instanceId}_${groupName}_${pointCategory}`;\n          this.updateCirclePath(pointCategory, this.props.categoryPathShapes[categoryKey] === CategoryPathShape.CIRCLE, container);\n        }\n      });\n      this.props.onCategoriesUpdated();\n    }\n\n    // selected changes\n    const isSelectedChange = JSON.stringify(prevProps.selectedShapeStatus) !== JSON.stringify(this.props.selectedShapeStatus);\n    if (isSelectedChange) {\n      if (this.selectedPoints.length <= 0 || this.selectedRectangles.length <= 0) {\n        if (prevProps.selectedShapeStatus && prevProps.selectedShapeStatus.id !== undefined) {\n          const { instanceId, groupName, id, shapeType } = prevProps.selectedShapeStatus;\n          if (!this.isShapeInSelectedShapes(instanceId, groupName, id)) {\n            if (shapeType === LandmarkEditType.KEYPOINT) {\n              this.setPointSelected(instanceId, groupName, id as number, false);\n            } else {\n              this.selectShape(instanceId, groupName, id as string, false);\n            }\n          }\n        }\n      }\n      const { instanceId, groupName, id, shapeType } = this.props.selectedShapeStatus;\n      if (id !== undefined) {\n        this.setMultiShapesUnselected();\n        if (shapeType === LandmarkEditType.KEYPOINT) {\n          this.setPointSelected(instanceId, groupName, id as number, true);\n        } else {\n          this.selectShape(instanceId, groupName, id as string);\n        }\n      }\n    }\n    if ((prevProps.selectedShapeInfo as PointInfo || {}).pointCategory !== (this.props.selectedShapeInfo as PointInfo || {}).pointCategory) {\n      this.setSmooth(null);\n      if (rootStore.setting.pathStyle === PathStyles.CURVES) {\n        this.setSelectedCurves();\n      }\n    }\n    if (\n      this.props.selectedInstance && (\n        isSelectedChange ||\n        JSON.stringify(this.props.selectedInstance) !== JSON.stringify(prevProps.selectedInstance)\n      )\n    ) {\n      const { instanceId, category, groupName } = this.props.selectedShapeStatus;\n      this.updateGroupBox(instanceId, category, groupName);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.resizeObserve) {\n      this.resizeObserve.disconnect();\n      this.resizeObserve = null;\n    }\n  }\n\n  setupLayers() {\n    this.rasterLayer = new Paper.Layer();\n    this.rasterLayer.applyMatrix = false;\n    this.rasterLayer.visible = true;\n\n    this.gridLayer = new Paper.Layer();\n    this.gridLayer.applyMatrix = false;\n    this.gridLayer.visible = rootStore.setting.isGridVisible;\n\n    this.mainLayer = new Paper.Layer();\n    this.mainLayer.applyMatrix = false;\n    this.mainLayer.visible = false;\n\n    this.labelLayer = new Paper.Layer();\n    this.labelLayer.applyMatrix = false;\n    this.labelLayer.visible = false;\n\n    this.attrLayer = new Paper.Layer();\n    this.attrLayer.applyMatrix = false;\n    this.attrLayer.visible = false;\n\n    this.warningLayer = new Paper.Layer();\n    this.warningLayer.applyMatrix = false;\n    this.warningLayer.visible = false;\n\n    Paper.view.onMouseMove = this.hitTest;\n  }\n\n  setupTools() {\n    this.tool = new Tool(this);\n    this.tool.activate();\n  }\n\n  loadImage() {\n    if (this.rasterLayer && this.props.image) {\n      this.rasterLayer.activate();\n      this.props.changeLoading(true);\n      if (this.raster) {\n        this.prevRaster = this.raster;\n      }\n      imageLoader(this.props.image, (c) => {\n        const canvas = c as HTMLCanvasElement;\n        this.imageCanvas = canvas;\n        this.imageData = canvas.getContext('2d')?.getImageData(0, 0, canvas.width, canvas.height);\n        this.raster = new Paper.Raster(canvas);\n        this.raster!.visible = false;\n        this.raster!.onLoad = () => {\n          if (!this.gridLayer?.children?.length) {\n            this.labelLayer!.visible = rootStore.setting.labelMode;\n            this.mainLayer!.visible = true;\n            this.warningLayer!.visible = true;\n            this.attrLayer!.visible = true;\n          }\n          this.addGrid(); // add grid to image\n          this.resize(); // resize to fit the container\n          // when onload, show all layers\n          this.raster!.visible = true;\n          if (this.prevRaster) {\n            this.prevRaster.remove();\n          }\n          this.props.changeLoading(false);\n        };\n      }, {\n        canvas: true,\n        orientation: true,\n        crossOrigin: 'anonymous',\n      });\n    }\n  }\n\n  updateFilters() {\n    if (this.imageData && this.raster) {\n      let data = this.imageData;\n      const { brightness, contrast, saturation, lightness, hue, rescale } = rootStore.setting.filters;\n      if (brightness || contrast) {\n        data = ImageFilters.BrightnessContrastPhotoshop(data, brightness, contrast);\n      }\n      if (rescale !== 1) {\n        data = ImageFilters.Rescale(data, rescale);\n      }\n      if (hue || saturation || lightness) {\n        data = ImageFilters.HSLAdjustment(data, hue, saturation, lightness);\n      }\n      this.raster.setImageData(data, new Paper.Point(0, 0));\n    }\n  }\n\n  resize = (isWindow = false) => {\n    if (this.canvasContainer.current) {\n      // set view size\n      const { offsetWidth: viewWidth, offsetHeight: viewHeight } = this.canvasContainer.current;\n      Paper.view.viewSize = new Paper.Size(viewWidth, viewHeight);\n      const viewCenter = new Paper.Point({ x: viewWidth / 2, y: viewHeight / 2 });\n      if (this.catchZoom) {\n        const { center, zoom } = this.catchZoom;\n        if (isWindow) {\n          Paper.view.center = viewCenter;\n          this.catchZoom.center = viewCenter;\n        } else {\n          Paper.view.center = center;\n        }\n        Paper.view.zoom = zoom;\n      } else {\n        Paper.view.center = viewCenter;\n        Paper.view.zoom = 1;\n      }\n\n      if (this.imageCanvas && this.raster) {\n        // resize image\n        const { width: imgWidth, height: imgHeight } = this.imageCanvas;\n        const viewRatio = viewWidth / viewHeight;\n        const imgRatio = imgWidth / imgHeight;\n        const scaleFactor = (viewRatio < imgRatio ? viewWidth / imgWidth : viewHeight / imgHeight) * 0.98;\n        const offsetX = (viewWidth - scaleFactor * imgWidth) / 2;\n        const offsetY = (viewHeight - scaleFactor * imgHeight) / 2;\n        const matrix = new Paper.Matrix().translate(offsetX, offsetY).scale(scaleFactor);\n        // apply matrix to all layers\n        Paper.project.layers.forEach((layer) => {\n          layer.matrix = matrix;\n        });\n        // reset image center\n        this.raster.position = new Paper.Point({ x: imgWidth / 2, y: imgHeight / 2 });\n        this.paperZoom = this.rasterLayer ? Paper.view.zoom * this.rasterLayer.matrix.scaling.x : Paper.view.zoom;\n      }\n      this.resizeContent();\n    }\n  };\n\n  resizeContent = () => {\n    if (this.resizeDebounced) {\n      this.resizeDebounced();\n    } else {\n      this.resizeDebounced = debounce(() => {\n        this.resizeGrid();\n        this.resizeShapes();\n        this.drawWarnings();\n      }, 50);\n    }\n  };\n\n  zoom = (event: WheelEvent, zoom?: number) => {\n    if (this.canvasContainer.current) {\n      const mousePosition = new Paper.Point(event.offsetX, event.offsetY);\n      const viewPosition = Paper.view.viewToProject(mousePosition);\n      const oldZoom = Paper.view.zoom;\n      const oldCenter = Paper.view.center;\n\n      const { offsetWidth: viewWidth, offsetHeight: viewHeight } = this.canvasContainer.current;\n      let newZoom = event && event.deltaY > 0 ? Paper.view.zoom * 1.1 : Paper.view.zoom / 1.1;\n      newZoom = zoom || newZoom;\n      if (newZoom <= 1) {\n        Paper.view.center = new Paper.Point({ x: viewWidth / 2, y: viewHeight / 2 });\n      }\n      newZoom = Math.max(Math.min(newZoom, ZOOM_MAX), ZOOM_MIN);\n      if (newZoom !== Paper.view.zoom) {\n        Paper.view.zoom = newZoom;\n        const zoomScale = oldZoom / newZoom;\n        const offset = viewPosition.subtract(viewPosition.subtract(oldCenter).multiply(zoomScale)).subtract(oldCenter);\n        Paper.view.center = Paper.view.center.add(offset);\n      }\n      this.catchZoom = { zoom: newZoom, center: Paper.view.center };\n      this.paperZoom = newZoom * this.rasterLayer!.matrix.scaling.x;\n      this.resizeContent();\n    }\n  };\n\n  drag = (center: paper.Point) => {\n    this.catchZoom = this.catchZoom ? {\n      ...this.catchZoom,\n      center,\n    } : {\n      zoom: Paper.view.zoom,\n      center\n    };\n  };\n\n  fitSelected = (instanceId: string, groupName?: string) => {\n    const groupBox = groupName\n      ? this.getGroupContainerByGroupName(instanceId, groupName)\n      : this.getInstanceContainerByInstaceId(instanceId)?.children.find((g) => g.data.type === SHAPE_TYPE.GROUP);\n    if (groupBox && this.mainLayer && this.canvasContainer.current) {\n      const { center, width, height } = groupBox.bounds;\n      if (width === 0 || height === 0) return;\n      const point = this.mainLayer.localToGlobal(center);\n      const { width: viewWidth, height: viewHeight } = this.mainLayer.bounds;\n\n      let zoom = width / height > viewWidth / viewHeight ? viewWidth / width : viewHeight / height;\n      zoom = Math.min(18, Math.max(zoom, 1));\n      Paper.view.zoom = zoom;\n      Paper.view.center = point;\n      this.catchZoom = { zoom, center: point };\n      this.paperZoom = this.rasterLayer ? zoom * this.rasterLayer.matrix.scaling.x : zoom;\n      this.resizeContent();\n    } else {\n      this.resize();\n    }\n  };\n\n\n  fitPoint = (point: { x: number; y: number }) => {\n    if (this.mainLayer) {\n      const center = this.mainLayer.localToGlobal(new Paper.Point(point.x, point.y));\n      Paper.view.center = center;\n      this.catchZoom = { zoom: Paper.view.zoom, center };\n      this.resizeContent();\n    }\n  };\n\n  addGrid() {\n    if (this.gridLayer && this.imageCanvas) {\n      this.gridLayer.removeChildren();\n      const { width, height } = this.imageCanvas;\n      const rows = Math.ceil(height / GRID_GAP);\n      Array.from({ length: rows }).forEach((_, index) => {\n        const path = new Paper.Path.Line({\n          from: [0, index * GRID_GAP],\n          to: [width, index * GRID_GAP],\n          strokeColor: '#333333',\n        });\n        if (index % 4 === 0) {\n          path.data.dashed = false;\n        } else {\n          path.data.dashed = true;\n        }\n        this.gridLayer?.addChild(path);\n      });\n\n      const cols = Math.ceil(width / GRID_GAP);\n      Array.from({ length: cols }).forEach((_, index) => {\n        const path = new Paper.Path.Line({\n          from: [index * GRID_GAP, 0],\n          to: [index * GRID_GAP, height],\n          strokeColor: '#333333',\n        });\n        if (index % 4 === 0) {\n          path.data.dashed = false;\n        } else {\n          path.data.dashed = true;\n        }\n        this.gridLayer?.addChild(path);\n      });\n    }\n  }\n\n  resizeGrid() {\n    if (this.gridLayer && this.gridLayer.children && this.gridLayer.children.length > 0) {\n      // keep grid line width looks the same\n      const zoom = Paper.view.zoom * this.gridLayer.matrix.scaling.x;\n      this.gridLayer.children.forEach((path) => {\n        const baseWidth = GRID_LINE_WIDTH / zoom;\n        if (path.data.dashed) {\n          path.strokeWidth = baseWidth / 2;\n          path.dashArray = [baseWidth * 4, baseWidth];\n        } else {\n          path.strokeWidth = baseWidth;\n          path.dashArray = [];\n        }\n      });\n    }\n  }\n\n  isShapeInSelectedShapes(instanceId: string, groupName: string, index: number | string | undefined) {\n    return this.selectedPoints.findIndex((p) => p.data.instanceId === instanceId && p.data.groupName === groupName && p.data.index === index) >= 0 ||\n    this.selectedRectangles.findIndex((p) => p.data.instanceId === instanceId && p.data.groupName === groupName && p.data.index === index) >= 0;\n  }\n\n  isPointInImage(point: paper.Point) {\n    if (!this.imageCanvas || !this.rasterLayer) return false;\n    const localPoint = this.rasterLayer.globalToLocal(Paper.view.viewToProject(point));\n    const { bounds: { x, y, width, height } } = this.rasterLayer;\n    return localPoint.x >= 0 && localPoint.x <= (x + width) && localPoint.y >= 0 && localPoint.y <= (y + height);\n  }\n\n  getPointInImage(point: paper.Point) {\n    if (!this.imageCanvas || !this.rasterLayer) return point;\n\n    const localPoint = this.rasterLayer.globalToLocal(Paper.view.viewToProject(point));\n    /* const { width, height } = this.imageCanvas;\n\n    if (localPoint.x < 0) {\n      localPoint.x = 0;\n    } else if (localPoint.x > width) {\n      localPoint.x = width;\n    }\n    if (localPoint.y < 0) {\n      localPoint.y = 0;\n    } else if (localPoint.y > height) {\n      localPoint.y = height;\n    } */\n\n    return localPoint;\n  }\n\n  getInstanceContainerByInstaceId(instaceId: string) {\n    return this.mainLayer?.children.find((i) => i.data.type === SHAPE_TYPE.INSTANCE && i.data.instanceId === instaceId) as paper.Group;\n  }\n\n  getGroupContainerByGroupName(instaceId: string, groupName: string) {\n    const instance = this.getInstanceContainerByInstaceId(instaceId);\n    return instance?.children.find((g) => g.data.type === SHAPE_TYPE.GROUP && g.data.groupName === groupName) as paper.Group;\n  }\n\n  getShapeByKey(instaceId: string, groupName: string, key: string | number) {\n    const group = this.getGroupContainerByGroupName(instaceId, groupName);\n    return group?.children.find((p) => (p.data.type === SHAPE_TYPE.RECTANGLE_GROUP && p.data.id === key) ||\n      (p.data.type === SHAPE_TYPE.KEYPOINT && p.data.index === key)) as paper.Group | paper.Shape;\n  }\n\n  getLabelByKey(instanceId: string, groupName: string, key: number | string) {\n    return this.labelLayer?.children.find((l) => l.data.instanceId === instanceId && l.data.groupName === groupName && l.data.key === key) as paper.Group;\n  }\n\n  getAttrLabelByKey(instanceId: string, groupName: string, key: number | string) {\n    return this.attrLayer?.children.find((l) => l.data.instanceId === instanceId && l.data.groupName === groupName && l.data.key === `attr-${key}`) as paper.Group;\n  }\n\n  getShapeByGroup() {\n    return this.mainLayer?.children.find((l) => l.data.type === SHAPE_TYPE.KEYPOINT_BOX);\n  }\n\n  getPathByCategory(instaceId: string, groupName: string, pointCategory: string) {\n    const group = this.getGroupContainerByGroupName(instaceId, groupName);\n    return group?.children.find((p) => p.data.type === SHAPE_TYPE.PATH && p.data.pointCategory === pointCategory) as paper.Path;\n  }\n\n  getPathById(instaceId: string, groupName: string, pathId: string) {\n    const group = this.getGroupContainerByGroupName(instaceId, groupName);\n    return group?.children.find((p) => p.data.type === SHAPE_TYPE.PATH && p.data.id === pathId) as paper.Path;\n  }\n\n  getPointsByCategory(instaceId: string, groupName: string, pointCategory: string) {\n    const group = this.getGroupContainerByGroupName(instaceId, groupName);\n    return group?.children.filter((p) => p.data.type === SHAPE_TYPE.KEYPOINT && p.data.pointCategory === pointCategory);\n  }\n\n  canAddShape() {\n    if (this.props.isReview || this.props.readonly || !rootStore.review.drawMode) return false;\n    if (this.mainLayer && this.props.selectedShapeInfo) {\n      if (this.props.selectedShapeInfo.shapeType === LandmarkEditType.RECTANGLE) {\n        if (this.props.ontologyGroup && this.props.ontologyGroup.count > 0) {\n          return this.props.annotatedPointOrShapeCount < this.props.ontologyGroup.count;\n        }\n      } else if (this.props.selectedShapeInfo.shapeType === LandmarkEditType.KEYPOINT) {\n        const { instanceId, groupName, id } = this.props.selectedShapeStatus;\n        if (id === undefined || id < 0) return false;\n        const point = this.getShapeByKey(instanceId, groupName, id as number);\n        return !point;\n      }\n    }\n    return false;\n  }\n\n  containerAddPoint(groupData: GroupInfo, point: paper.Point, pointCategory: string, index: number, isKeyPoint: boolean, visible = true, attributes?: any) {\n    const { instanceId, groupName } = groupData;\n    const groupContainer = this.getGroupContainerByGroupName(instanceId, groupName);\n    this.addKeypointShape(point, pointCategory, index, isKeyPoint, groupContainer, visible, attributes);\n  };\n\n  addKeypoint(point: paper.Point) {\n    if (this.mainLayer && this.props.selectedShapeInfo && this.props.selectedShapeStatus && this.props.selectedInstance) {\n      const { id, shapeType, frameIndex } = this.props.selectedShapeStatus;\n      const index = (shapeType === LandmarkEditType.KEYPOINT && id as number) || 0;\n      const { x, y } = this.mainLayer.globalToLocal(Paper.view.viewToProject(point));\n      const newPoint = new Paper.Point(x, y);\n      const { instanceId, category, groupName, pointCategory, isKeyPoint } = this.props.selectedShapeInfo as PointInfo;\n\n      const categoryKey = `${frameIndex}_${instanceId}_${groupName}_${pointCategory}`;\n      const groupData = { instanceId, groupName, type: LandmarkEditType.KEYPOINT, category: this.props.selectedInstance.category };\n      this.containerAddPoint(groupData, newPoint, pointCategory, index, isKeyPoint);\n      let otherPoints;\n      if (this.props.categoryPathShapes[categoryKey] === CategoryPathShape.CIRCLE) {\n        const container: Group = { instanceId, category, groupName };\n        otherPoints = this.updateCirclePath(pointCategory, true, container);\n      }\n      this.props.handleShapesChange([{\n        frameIndex,\n        instanceId,\n        category,\n        groupName,\n        index,\n        shapeType: LandmarkEditType.KEYPOINT,\n        shape: {\n          pointCategory,\n          isKeyPoint,\n          position: { x, y },\n          visible: true, // default is visible when point added\n        },\n      }, ...(otherPoints || [])]);\n      this.props.setNextEmptyShape(); // move next\n    }\n  }\n\n  addKeypointShape(point: paper.Point, pointCategory: string, pointIndex: number, isKeyPoint: boolean, groupContainer: paper.Group, visible: boolean, attributes?: any) {\n    if (!groupContainer) return;\n    const { frameIndex } = this.props.selectedShapeStatus;\n    const { instanceId, groupName, category, displayColor } = groupContainer.data;\n    if (this.mainLayer) {\n      const zoom = Paper.view.zoom * this.mainLayer.matrix.scaling.x;\n      // add point\n      const pointColor = isKeyPoint ? KEY_POINT_COLOR : displayColor || POINT_COLOR;\n      const fillColor = visible ? pointColor : '#3d424d';\n      const pointCircle = new Paper.Shape.Circle({\n        center: point,\n        radius: (rootStore.setting.pointSize + 1) / zoom,\n        fillColor,\n        strokeColor: '#ffffff',\n        strokeWidth: 1 / zoom,\n        selectedColor: 'white',\n      });\n      pointCircle.data = {\n        frameIndex,\n        type: SHAPE_TYPE.KEYPOINT,\n        cursor: Cursor.MOVE,\n        pointCategory,\n        index: pointIndex,\n        isKeyPoint,\n        visible,\n        instanceId,\n        groupName,\n        category,\n        fillColor,\n      };\n      groupContainer.addChild(pointCircle);\n\n      // add point to path\n      const groupData = rootStore.ontology.getGroupData(category, groupName);\n      const categoryData = (groupData && groupData.categories && groupData.categories.find((v) => v.name === pointCategory)) || undefined;\n      const segment = new Paper.Segment(point);\n      let path = this.getPathByCategory(instanceId, groupName, pointCategory);\n      const lineColor = categoryData?.isConnect === false ?\n        new Paper.Color('rgba(0,0,0,0)') :\n        new Paper.Color(displayColor || POINT_COLOR);\n      let index = -1;\n      if (path) {\n        const { points, isCircle } = path.data;\n        if (!isCircle) {\n          if (rootStore.setting.pathStyle === PathStyles.CURVES) {\n            for (let i = 0; i < points.length; i += 1) {\n              const p = points[i];\n              const nextP = points[i + 1];\n              if (pointIndex > p && nextP > pointIndex) {\n                // 2 => 1,3\n                index = i + 1;\n                break;\n              } else if (\n                pointIndex < p &&\n                (!nextP || nextP > p || (nextP < p && i !== 0))) {\n                // 9 => 10 || 10,18 || 10,5(end point)[not (end point)10,5]\n                index = i;\n                break;\n              }\n            }\n          } else {\n            index = path.data.points.findIndex((p: number) => pointIndex < p);\n          }\n          if (index < 0) {\n            path.add(segment);\n            index = path.data.points.push(pointIndex) - 1;\n          } else {\n            path.insert(index, segment);\n            path.data.points.splice(index, 0, pointIndex);\n          }\n        }\n      } else {\n        path = new Paper.Path({\n          segments: [segment],\n          strokeWidth: rootStore.setting.lineWidth / zoom,\n          strokeColor: lineColor,\n          selectedColor: lineColor,\n        });\n        path.data = {\n          type: SHAPE_TYPE.PATH,\n          pointCategory,\n          points: [pointIndex],\n          instanceId,\n          groupName,\n          id: `${frameIndex}_${instanceId}_${groupName}_${pointCategory}`,\n        };\n        groupContainer.addChild(path);\n      }\n      this.toggleCurves(path);\n      if (path === this.smoothPath) {\n        this.setSmooth(path);\n      }\n      if (groupData && groupData.lines) {\n        const lines = groupData.lines.filter((v) => v.points.indexOf(pointIndex) >= 0);\n        const linesData: {isSource: boolean, fromTo: string, pathId: string}[] = [];\n        lines.forEach((connectPoints) => {\n          if (connectPoints) {\n            const { points, color } = connectPoints;\n            const isSource = pointIndex === points[0];\n            const otherEnd = this.getShapeByKey(instanceId, groupName, isSource ? points[1] : points[0]);\n            const fromTo = `${points[0]}-${points[1]}`;\n            if (rootStore.setting.pathStyle === PathStyles.CURVES) {\n              if (otherEnd) {\n                const { pointCategory: otherCategory } = otherEnd.data;\n                const [startPoint, endPoint] = isSource ? [pointCircle, otherEnd] : [otherEnd, pointCircle];\n                const endSegment = new Paper.Segment(new Paper.Point(endPoint.position.x, endPoint.position.y));\n                const line = isSource ? path : this.getPathByCategory(instanceId, groupName, otherCategory !== pointCategory ? otherCategory : '');\n                if (line) {\n                  const sourceIndex = line.data.points.findIndex((p: number) => points[0] === p);\n                  if (sourceIndex === 0) {\n                    line.insert(0, endSegment);\n                    line.data.points.unshift(points[1]);\n                  } else if (sourceIndex === line.data.points.length - 1) {\n                    line.add(endSegment);\n                    line.data.points.push(points[1]);\n                  }\n                  this.toggleCurves(line);\n                  if (!endPoint.data.lines) {\n                    endPoint.data.lines = [];\n                  }\n                  endPoint.data.lines.push({ isSource: false, fromTo, pathId: line.data.id });\n                  startPoint.data.lines = [...startPoint.data.lines || [], { isSource: true, fromTo, pathId: line.data.id }];\n                }\n              }\n            } else {\n              linesData.push({ isSource, fromTo, pathId: fromTo });\n              if (otherEnd) {\n                const segments = isSource ? [segment, otherEnd.position] : [otherEnd.position, segment];\n                const line = new Paper.Path({\n                  segments,\n                  strokeWidth: rootStore.setting.lineWidth / zoom,\n                  strokeColor: color,\n                  selectedColor: color,\n                });\n                line.data = {\n                  type: SHAPE_TYPE.PATH,\n                  pointCategory: fromTo,\n                  points,\n                  instanceId,\n                  groupName,\n                  id: fromTo,\n                };\n                groupContainer.addChild(line);\n              }\n            }\n          }\n        });\n        if (rootStore.setting.pathStyle !== PathStyles.CURVES) {\n          pointCircle.data.lines = linesData;\n        }\n      }\n      path.sendToBack();\n      const groupInfo = rootStore.ontology.getGroupData(category, groupName);\n      const label = `${visible ? 1 : 0}-${pointIndex}`;\n      let attrsLabel = getValuesLabel(groupInfo?.point_label_config?.fields, attributes, rootStore.setting.labelItems);\n      attrsLabel = `${rootStore.setting.displayPointIndex ? `${pointIndex}` : ''}${rootStore.setting.displayPointIndex && attrsLabel ? ';' : ''}${attrsLabel}`;\n\n      this.addLabel(\n        label,\n        { x: point.x, y: point.y, width: rootStore.setting.pointSize / zoom, height: rootStore.setting.pointSize / zoom },\n        { instanceId, category, groupName },\n        pointIndex,\n        visible,\n        SHAPE_TYPE.KEYPOINT,\n        attrsLabel\n      );\n    }\n  }\n\n  removePointShape(containerData: Group, pointIndex: number) {\n    const { instanceId, groupName } = containerData;\n    if (this.mainLayer) {\n      const point = this.getShapeByKey(instanceId, groupName, pointIndex);\n      if (point) {\n        const { lines, pointCategory } = point.data;\n        point.remove();\n        // remove pointCategory path\n        const path = this.getPathByCategory(instanceId, groupName, pointCategory);\n        if (path && !path.data.isCircle) {\n          const index = path.data.points.findIndex((p: number) => p === pointIndex);\n          if (index >= 0) {\n            path.removeSegment(index);\n            path.data.points.splice(index, 1);\n          }\n        }\n        // remove group connect path\n        if (lines) {\n          (lines as { isSource: boolean, fromTo: string, pathId: string }[]).forEach(({ pathId, fromTo, isSource }) => {\n            const line = this.getPathById(instanceId, groupName, pathId);\n            if (rootStore.setting.pathStyle === PathStyles.CURVES) {\n              let index = line?.data.points.findIndex((p: number) => p === pointIndex);\n              if (isSource && index < 0) {\n                index = line.data.points.findIndex((p: number) => p === Number(fromTo.split('-')[1] || -1));\n              }\n              if (index >= 0) {\n                line.removeSegment(index);\n                line.data.points.splice(index, 1);\n                this.toggleCurves(line);\n              }\n            } else {\n              line?.remove();\n            }\n          });\n        }\n      }\n    }\n    this.removeLabel(instanceId, groupName, pointIndex);\n  }\n\n  resizeShapes() {\n    if (this.mainLayer && this.mainLayer.children && this.mainLayer.children.length > 0) {\n      this.mainLayer.children.forEach((instance) => {\n        if (instance.children && instance.children.length > 0) {\n          instance.children.forEach((group) => {\n            if (group.children) {\n              group.children.forEach((path) => {\n                if (path.data.type === SHAPE_TYPE.KEYPOINT) {\n                  path.set({ radius: rootStore.setting.pointSize / this.paperZoom });\n                  path.strokeWidth = 1 / this.paperZoom;\n                } else if (path.data.type === SHAPE_TYPE.PATH) {\n                  path.strokeWidth = rootStore.setting.lineWidth / this.paperZoom;\n                } else if (path.data.type === SHAPE_TYPE.RECTANGLE_GROUP && path.children) {\n                  path.children.forEach((shape) => {\n                    if (shape.data.type === SHAPE_TYPE.RECTANGLE_POINT) {\n                      shape.set({ radius: (rootStore.setting.pointSize / 2) / this.paperZoom });\n                    } else if (shape.data.type === SHAPE_TYPE.RECTANGLE_PATH) {\n                      shape.strokeWidth = rootStore.setting.lineWidth / this.paperZoom;\n                    }\n                  });\n                }\n              });\n            }\n          });\n        } else if (instance.data.type === SHAPE_TYPE.KEYPOINT_BOX) {\n          instance.strokeWidth = rootStore.setting.lineWidth / this.paperZoom;\n        }\n      });\n    }\n    if (this.labelLayer?.children && this.labelLayer.children.length > 0) {\n      this.labelLayer.children.forEach((label) => {\n        const { zoom: oldZoom, width, height, point } = label.data;\n        resizeLabel({ width, height, zoom: this.paperZoom, fontSize: FONT_SIZE }, oldZoom, point, label, 'label');\n      });\n    }\n\n    if (this.attrLayer?.children && this.attrLayer.children.length > 0) {\n      this.attrLayer.children.forEach((label) => {\n        const { zoom: oldZoom, width, height, point } = label.data;\n        resizeLabel({ width, height, zoom: this.paperZoom, fontSize: FONT_SIZE }, oldZoom, point, label, 'attr');\n      });\n    }\n    const { instanceId, groupName, id } = this.props.selectedShapeStatus;\n    this.setPointSelected(instanceId, groupName, id as number, true);\n  }\n\n  cleanLayer() {\n    if (this.mainLayer) {\n      this.mainLayer.children?.forEach((container) => {\n        if (container.data.type === SHAPE_TYPE.KEYPOINT_BOX) {\n          container.remove();\n        } else {\n          container.children?.forEach((group) => {\n            group?.removeChildren();\n          });\n        }\n      });\n    }\n    if (this.labelLayer) {\n      this.labelLayer.removeChildren();\n    }\n\n    if (this.attrLayer) {\n      this.attrLayer.removeChildren();\n    }\n\n    if (this.warningLayer) {\n      this.warningLayer.removeChildren();\n    }\n  }\n\n  addLabel(content: string, shape: {x: number, y: number, width: number, height: number}, groupInfo: Group, key: number | string, visible: boolean, shapeType: string, attrsLabel?: string) {\n    if (this.labelLayer) {\n      const { instanceId, groupName } = groupInfo;\n      const fontSize = FONT_SIZE / this.paperZoom;\n      const label = new Paper.PointText({\n        content,\n        fontSize,\n        fillColor: visible ? 'white' : 'red',\n        shadowColor: '#000000',\n        shadowBlur: 2 / this.paperZoom,\n        shadowOffset: 2 / this.paperZoom,\n      });\n      const width = label.bounds.width + fontSize / 2;\n      const height = label.bounds.height + fontSize / 2;\n      const labelRect = new Paper.Shape.Rectangle({\n        size: [width, height],\n        fillColor: rootStore.setting.labelBgColor,\n      });\n      label.position.x = labelRect.bounds.width / 2;\n      label.position.y = labelRect.bounds.height / 2;\n\n      const labelGroup = new Paper.Group();\n      labelGroup.data = {\n        point: [shape.x, shape.y],\n        instanceId,\n        groupName,\n        key,\n        type: shapeType === SHAPE_TYPE.KEYPOINT ? LabelType.KEYPOINT : LabelType.OBJECT,\n        zoom: this.paperZoom,\n        height,\n        width\n      };\n      if (rootStore.setting.labelStyle === LabelStyle.DEFAULT) {\n        labelGroup.addChild(labelRect);\n      }\n      labelGroup.addChild(label);\n      this.labelLayer.addChild(labelGroup);\n      labelGroup.position.x = shape.x + labelRect.bounds.width / 2;\n      labelGroup.position.y = shape.y - labelRect.bounds.height / 2 - rootStore.setting.lineWidth / this.paperZoom;\n\n      if (shapeType !== SHAPE_TYPE.KEYPOINT_BOX && this.attrLayer) {\n        let center = { x: shape.x, y: shape.y };\n\n        if (SHAPE_TYPE.RECTANGLE) {\n          center = { x: shape.x + shape.width / 2, y: shape.y + shape.height / 2 };\n        }\n        const arrtLabelGroup = labelGroup.clone();\n        arrtLabelGroup.data.key = `attr-${arrtLabelGroup.data.key}`;\n        arrtLabelGroup.data.point = [center.x, center.y];\n        arrtLabelGroup.children.slice(-1)[0].fillColor = new Paper.Color('#ffffff');\n        (arrtLabelGroup.children.slice(-1)[0] as paper.PointText).content = '';\n        this.attrLayer.addChild(arrtLabelGroup);\n        if (attrsLabel) {\n          this.updateLabelContent(arrtLabelGroup, attrsLabel, shapeType);\n        } else {\n          arrtLabelGroup.visible = false;\n        }\n      }\n    }\n  }\n\n  updateLabel(instanceId: string, groupName: string, key: number | string, position: { x: number, y: number }, center: { x: number, y: number }) {\n    if (this.labelLayer) {\n      const label = this.getLabelByKey(instanceId, groupName, key);\n      if (label) {\n        label.data.point = [position.x, position.y];\n        label.position.x = position.x + label.bounds.width / 2;\n        label.position.y = position.y - label.bounds.height / 2;\n      }\n    }\n    if (this.attrLayer) {\n      const label = this.getAttrLabelByKey(instanceId, groupName, key);\n      if (label) {\n        label.data.point = [center.x, center.y];\n        label.position.x = center.x;\n        label.position.y = center.y;\n      }\n    }\n  }\n\n  updateAttributeLabel(instanceId: string, category: string, groupName: string, key: number | string, attributes: any, instanceNum?: number) {\n    const groupInfo = rootStore.ontology.getGroupData(category, groupName);\n    let label = '';\n    if (typeof key === 'number') {\n      label = getValuesLabel(groupInfo?.point_label_config?.fields, attributes, rootStore.setting.pointLabelItems);\n      label = `${rootStore.setting.displayPointIndex ? `${key}` : ''}${rootStore.setting.displayPointIndex && label ? ';' : ''}${label}`;\n    } else {\n      const categoryLabel = `${groupInfo?.class_display_name || ''}  ${instanceNum || ''}-${groupInfo?.display_name || groupInfo?.name || ''}`;\n      label = getValuesLabel(groupInfo?.label_config?.fields, attributes, rootStore.setting.labelItems);\n      label = `${rootStore.setting.displayCategory ? `${categoryLabel}` : ''}${rootStore.setting.displayCategory && label ? ';' : ''}${label}`;\n    }\n    const attrLayer = this.getAttrLabelByKey(instanceId, groupName, key);\n    if (attrLayer) {\n      if (label) {\n        this.updateLabelContent(attrLayer, label, SHAPE_TYPE.KEYPOINT);\n      } else {\n        attrLayer.visible = false;\n      }\n    }\n  }\n\n  updateLabelContent(label: paper.Group, content: string, shapeType: string) {\n    if (this.attrLayer && label) {\n      const zoom = Paper.view.zoom * this.attrLayer.matrix.scaling.x;\n      const labelText = label.children.slice(-1)[0];\n      (labelText as paper.PointText).content = content;\n      const { width, height } = labelText.bounds;\n      const fontSize = FONT_SIZE / zoom;\n      if (rootStore.setting.labelStyle === LabelStyle.DEFAULT) {\n        (label.children[0] as paper.Shape).size.height = height + fontSize / 2;\n        (label.children[0] as paper.Shape).size.width = width + fontSize / 2;\n      }\n      label.data.width = label.children[0].bounds.width;\n      label.data.height = label.children[0].bounds.height;\n      label.data.zoom = this.paperZoom;\n\n      let visible = false;\n      if (shapeType === SHAPE_TYPE.KEYPOINT) {\n        visible = rootStore.setting.activePointAttributesMode === AttributesMode.ALWAYS;\n      } else if (SHAPE_TYPE.RECTANGLE) {\n        visible = rootStore.setting.activeAttributesMode === AttributesMode.ALWAYS;\n      }\n      if (visible) {\n        const { point } = label.data;\n        resetAttrLabelPosition(label, { x: point[0], y: point[1] }, visible);\n      } else {\n        label.visible = false;\n      }\n    }\n  }\n\n  updatelabelVisible(activeMode: AttributesMode, type = 'object') {\n    if (this.shownLabel) {\n      this.shownLabel.visible = false;\n      this.shownLabel = null;\n    }\n    if (this.attrLayer?.children && this.attrLayer.children.length > 0) {\n      this.attrLayer.children.forEach((label) => {\n        const { type: labelType } = label.data;\n        if (type === labelType) {\n          label.visible = activeMode === AttributesMode.ALWAYS;\n        }\n      });\n    }\n  }\n\n  removeLabel(instanceId: string, groupName: string, key: string | number) {\n    if (this.labelLayer) {\n      const label = this.getLabelByKey(instanceId, groupName, key);\n      if (label) {\n        label.remove();\n      }\n    }\n    if (this.attrLayer) {\n      const label = this.getAttrLabelByKey(instanceId, groupName, key);\n      if (label) {\n        label.remove();\n      }\n    }\n  }\n\n  updateShapes() {\n    const { currentFrame } = this.props;\n    const { shape: { updatedShapes } } = rootStore;\n    updatedShapes.forEach((updatedShape) => {\n      if (updatedShape.frameIndex !== currentFrame) return;\n      switch (updatedShape.shapeType) {\n        case LandmarkEditType.KEYPOINT:\n          this.updatePoint(updatedShape);\n          break;\n        case LandmarkEditType.RECTANGLE:\n          this.updateRectangle(updatedShape);\n          break;\n        default:\n          break;\n      }\n    });\n    rootStore.shape.setUpdatedShapes([]);\n    const { instanceId, category, groupName } = this.props.selectedShapeStatus;\n    this.updateGroupBox(instanceId, category, groupName);\n  }\n\n  updateRectangle(updateShape: UpdatedShape) {\n    const { instanceId, groupName, category, id, shape } = updateShape;\n    if (id !== undefined) {\n      const rectangle = shape as Rectangle;\n      const currRectangle = this.getShapeByKey(instanceId, groupName, id);\n      if (currRectangle) {\n        // alreay exist, should update\n        if (rectangle === undefined) {\n          // delete\n          this.removeRectangle(instanceId, groupName, id);\n        } else if (rectangle.x) {\n          const { x, y, width, height, displayColor } = rectangle;\n          // update position\n          this.drawRectangle({ x, y, width, height, displayColor }, { instanceId, category, groupName }, id);\n        }\n      } else if (rectangle) {\n        //  has been removed, should add\n        const { x, y, width, height, displayColor } = rectangle;\n        const path = new Paper.Path();\n        path.data.id = id;\n        path.add(new Paper.Point(x, y));\n        path.add(new Paper.Point(x + width, y));\n        path.add(new Paper.Point(x + width, y + height));\n        path.add(new Paper.Point(x, y + height));\n        path.closed = true;\n        this.addRectangle(path, { instanceId, groupName, category, shapeType: LandmarkEditType.RECTANGLE, displayColor }, false);\n      }\n    }\n  }\n\n  updatePoint(updateShape: UpdatedShape) {\n    const { frameIndex, instanceId, groupName, category, index, shape } = updateShape;\n    if (index !== undefined) {\n      let updatedCategorie: KeypointCategoryProps | undefined;\n      const point = shape as Point;\n      const currPoint = this.getShapeByKey(instanceId, groupName, index) as paper.Shape;\n      if (currPoint) {\n        const currCategory = currPoint.data.pointCategory;\n        updatedCategorie = { pointCategory: currCategory, frameIndex, instanceId, groupName, category };\n        const groupData = { frameIndex, instanceId, category, groupName };\n        // alreay exist, should update\n        if (point === undefined) {\n          // delete\n          this.removePointShape(groupData, index);\n        } else if (point.position && point.pointCategory) {\n          // update position\n          currPoint.position.x = point.position.x;\n          currPoint.position.y = point.position.y;\n          this.updatePath(currPoint, point.position);\n          // update visible\n          if (point.visible !== undefined && currPoint.data.visible !== point.visible) {\n            this.changeVisibleStyle(currPoint, index, groupData, point.visible);\n          }\n          if (rootStore.setting.activePointAttributesMode !== AttributesMode.HIDE) {\n            this.updateAttributeLabel(instanceId, category, groupName, index, point.attributes);\n          }\n        }\n      } else if (point) {\n        //  has been removed, should add\n        const { position, pointCategory, isKeyPoint, visible, attributes } = point;\n        if (position !== undefined && pointCategory !== undefined && index !== undefined && isKeyPoint !== undefined) {\n          updatedCategorie = { pointCategory, frameIndex, instanceId, groupName, category };\n          const groupData = { instanceId, groupName, type: LandmarkEditType.KEYPOINT, category };\n          this.containerAddPoint(groupData, new Paper.Point(position.x, position.y), pointCategory, index, isKeyPoint, visible, attributes);\n        }\n      }\n      if (updatedCategorie) {\n        const { pointCategory, ...newContainer } = updatedCategorie;\n        const categoryKey = `${frameIndex}_${newContainer.instanceId}_${newContainer.groupName}_${pointCategory}`;\n        if (this.props.categoryPathShapes[categoryKey] === CategoryPathShape.CIRCLE) {\n          this.updateCirclePath(pointCategory, this.props.categoryPathShapes[categoryKey] === CategoryPathShape.CIRCLE, newContainer);\n        }\n      }\n    }\n  }\n\n  updatePath(\n    point: paper.Shape,\n    position: { x: number, y: number },\n  ) {\n    const { instanceId, groupName, pointCategory, index, lines } = point.data;\n    const path = this.getPathByCategory(instanceId, groupName, pointCategory);\n    if (path && !path.data.isCircle) {\n      const segmentIndex = path.data.points.findIndex((p: number) => p === index);\n      path.segments[segmentIndex].point.x = position.x;\n      path.segments[segmentIndex].point.y = position.y;\n      this.toggleCurves(path);\n    }\n    // change connect line position\n    if (lines) {\n      (lines as {isSource: boolean, pathId: string}[]).forEach(({ isSource, pathId }) => {\n        const line = this.getPathById(instanceId, groupName, pathId);\n        if (line) {\n          let n = -1;\n          if (rootStore.setting.pathStyle === PathStyles.CURVES) {\n            n = !isSource ? line.data.points.findIndex((p: number) => p === index) : -1;\n          } else {\n            n = isSource ? 0 : 1;\n            if (!line.segments[n]) {\n              n = 0;\n            }\n          }\n          if (n >= 0) {\n            line.segments[n].point.x = position.x;\n            line.segments[n].point.y = position.y;\n            this.toggleCurves(line);\n          }\n        }\n      });\n    }\n    this.updateLabel(\n      instanceId,\n      groupName,\n      index,\n      position,\n      position,\n    );\n  }\n\n  setPointSelected(instanceId: string, groupName: string, index: number, selected: boolean) {\n    if (this.mainLayer?.children && this.mainLayer.children.length > 0) {\n      const point = this.getShapeByKey(instanceId, groupName, index) as paper.Shape;\n      if (point) {\n        const zoom = Paper.view.zoom * this.mainLayer.matrix.scaling.x;\n        if (selected) {\n          point.strokeWidth = 3 / zoom;\n          point.radius = (rootStore.setting.pointSize + 1) / zoom;\n        } else {\n          point.radius = rootStore.setting.pointSize / zoom;\n          point.strokeWidth = 1 / zoom;\n        }\n      }\n    }\n  }\n\n  setMultiShapesSelected(selectedShapes: (paper.Shape | paper.Group)[], type: CategoryPathShape) {\n    if (selectedShapes.length > 0) {\n      const { instanceId, groupName } = selectedShapes[0].data;\n      this.props.selectGroup(instanceId, groupName, false);\n      this.props.setSelectedShape(undefined);\n    }\n    if (type === CategoryPathShape.CIRCLE) {\n      this.selectedPoints = (selectedShapes as paper.Shape[]).sort((a, b) => a.data.index - b.data.index);\n      rootStore.shape.setMultiSelectedShape(this.selectedPoints.map((point) => (point as paper.Shape).data.index));\n      this.selectedPoints.forEach((point) => {\n        const pData = point.data;\n        this.setPointSelected(pData.instanceId, pData.groupName, pData.index, true);\n      });\n    } else {\n      this.selectedRectangles = selectedShapes as paper.Group[];\n      this.selectedRectangles.forEach((rectangle) => {\n        const rData = rectangle.data;\n        this.selectShape(rData.instanceId, rData.groupName, rData.id);\n      });\n    }\n  }\n\n  setMultiShapesUnselected() {\n    this.selectedPoints.forEach((point) => {\n      const { instanceId, groupName, index } = point.data;\n      this.setPointSelected(instanceId, groupName, index, false);\n    });\n    this.selectedRectangles.forEach((rectangle) => {\n      const { instanceId, groupName, id } = rectangle.data;\n      this.selectShape(instanceId, groupName, id, false);\n    });\n\n    this.selectedPoints = [];\n    this.selectedRectangles = [];\n    rootStore.shape.setMultiSelectedShape([]);\n  }\n\n  updatePointsPosition(shapes: UpdatedShape[]) {\n    this.props.handleShapesChange(shapes);\n  }\n\n  // resize and drag, change label position\n  updateRectanglePosition(shapes: UpdatedShape[]) {\n    this.props.handleShapesChange(shapes);\n    if (this.labelLayer) {\n      shapes.forEach(({ instanceId, groupName, id, shape }) => {\n        if (id && shape && (shape as Rectangle).x) {\n          const { x, y, width, height } = shape as Rectangle;\n          this.updateLabel(\n            instanceId,\n            groupName,\n            id,\n            { x, y },\n            { x: x + width / 2, y: y + height / 2 },\n          );\n        }\n      });\n    }\n  }\n\n  deleteSelectedPoints() {\n    const updatedCategories: KeypointCategoryProps[] = [];\n    const points: UpdatedShape[] = [];\n    (this.selectedPoints.length > 0 ? this.selectedPoints.map((p) => ({\n      frameIndex: this.props.currentFrame,\n      instanceId: p.data.instanceId,\n      category: p.data.category,\n      groupName: p.data.groupName,\n      index: p.data.index,\n      shapeType: LandmarkEditType.KEYPOINT\n    })) : [{\n      ...this.props.selectedShapeStatus,\n      index: this.props.selectedShapeStatus.id,\n      shapeType: LandmarkEditType.KEYPOINT\n    }]).forEach((selectedShapeStatus) => {\n      let enable = true;\n      const { frameIndex, instanceId, groupName, index } = selectedShapeStatus;\n      const point = typeof index === 'number' && this.getShapeByKey(instanceId, groupName, index);\n      if (point && point.data) {\n        const categoryKey = `${frameIndex}_${instanceId}_${groupName}_${point.data.pointCategory}`;\n        if (this.props.categoryPathShapes[categoryKey] === CategoryPathShape.CIRCLE) {\n          const path = this.getPathByCategory(instanceId, groupName, point.data.pointCategory);\n          const instance = this.getInstanceContainerByInstaceId(instanceId);\n          if (instance && path && path.data.isCircle) {\n            const group = rootStore.ontology.getGroupData(instance.data.category, groupName);\n            const pointCategory = group && group.categories && group.categories.length && group.categories.find((c) => c.name === point.data.pointCategory);\n            if (pointCategory) {\n              const sortedKeys = [...pointCategory.keys].sort((a, b) => a - b);\n              const pIndex1 = sortedKeys[0];\n              const pIndex2 = sortedKeys[Math.ceil(sortedKeys.length / 2)];\n              if (index !== pIndex1 && index !== pIndex2) {\n                enable = true;\n              }\n            }\n          }\n        }\n        if (enable) {\n          points.push({\n            ...selectedShapeStatus,\n            ...point.data\n          });\n        }\n      }\n    });\n    this.props.handleShapesRemove(points);\n    rootStore.handle.removeHandles(points);\n    points.forEach(({ frameIndex, instanceId, category, groupName, index }) => {\n      const instance = this.getInstanceContainerByInstaceId(instanceId);\n      const point = this.getShapeByKey(instanceId, groupName, index!);\n      if (instance && point && !updatedCategories.includes(point.data.pointCategory)) {\n        updatedCategories.push({ pointCategory: point.data.pointCategory, frameIndex, instanceId, groupName, category: instance.data.category });\n      }\n      this.removePointShape({ instanceId, category, groupName }, index!);\n    });\n    updatedCategories.forEach(({ frameIndex, pointCategory, ...container }) => {\n      const categoryKey = `${frameIndex}_${container.instanceId}_${container.groupName}_${pointCategory}`;\n      this.updateCirclePath(pointCategory, this.props.categoryPathShapes[categoryKey] === CategoryPathShape.CIRCLE, container);\n    });\n    this.selectedPoints = [];\n  }\n\n  deleteSelectedRectangle() {\n    const rectangles = (this.selectedRectangles.length > 0 ? this.selectedRectangles.map((rect) => ({\n      frameIndex: rect.data.frameIndex,\n      instanceId: rect.data.instanceId,\n      category: rect.data.category,\n      groupName: rect.data.groupName,\n      id: rect.data.id,\n      shapeType: LandmarkEditType.RECTANGLE\n    })) : [{\n      ...this.props.selectedShapeStatus,\n      id: this.props.selectedShapeStatus.id,\n      shapeType: LandmarkEditType.RECTANGLE\n    }]).filter((v) => typeof v.id === 'string');\n    this.props.handleShapesRemove(rectangles);\n    rectangles.forEach(({ instanceId, groupName, id }) => {\n      this.removeRectangle(instanceId, groupName, id);\n    });\n    this.selectedRectangles = [];\n  };\n\n  toggleSelectedPointVisibility() {\n    const points = this.selectedPoints.length > 0 ?\n      this.selectedPoints.map((p) => p.data) :\n      [{ ...this.props.selectedShapeStatus, index: this.props.selectedShapeStatus.id }]\n        .filter((v) => v.shapeType === LandmarkEditType.KEYPOINT);\n    points.forEach(({ instanceId, category, groupName, index }) => {\n      const point = this.getShapeByKey(instanceId, groupName, index) as paper.Shape;\n      this.changeVisibleStyle(point, index, { instanceId, category, groupName, displayColor: point.data.fillColor }, !point.data.visible);\n    });\n    this.props.togglePointsVisibility(points);\n  }\n\n  changeVisibleStyle(point: paper.Shape, index: number, groupData: Group, visible: boolean) {\n    const { instanceId, groupName } = groupData;\n    const labelGroup = this.getLabelByKey(instanceId, groupName, index);\n    if (point) {\n      let fillColor = point.data.isKeyPoint ?\n        KEY_POINT_COLOR :\n        groupData?.displayColor || POINT_COLOR;\n      let strokeColor = '#ffffff';\n      if (!visible) {\n        strokeColor = fillColor;\n        fillColor = '#3d424d';\n      }\n      point.data.visible = visible;\n      point.fillColor = new Paper.Color(fillColor);\n      point.strokeColor = new Paper.Color(strokeColor);\n    }\n    if (this.labelLayer && labelGroup) {\n      const label = labelGroup.children.length === 2 ? labelGroup.children[1] : labelGroup.children[0];\n      (label as paper.PointText).content = `${visible ? '1' : '0'}-${index}`;\n      label.fillColor = new Paper.Color(visible ? 'white' : 'red');\n    }\n  }\n\n  hitTest = (event: ToolEventExtend) => {\n    if (this.mainLayer && !this.tool?.mouseDown) {\n      let cursor: Cursor = Cursor.DEFAULT;\n      const isDrawPoint = this.props.selectedShapeStatus.shapeType === LandmarkEditType.KEYPOINT;\n      if (this.canAddShape()) {\n        cursor = isDrawPoint ? Cursor.POINTER : Cursor.CROSSHAIR;\n      }\n      if (this.selectedHit) {\n        this.selectedHit.selected = false;\n      }\n\n      const hits = this.mainLayer.hitTestAll(event.point, {\n        fill: true,\n        selected: false,\n        handles: true,\n        stroke: true,\n        tolerance: 10 / this.paperZoom,\n        match: (ht: any) => {\n          if (ht && ht.item && (ht.item.data.type === undefined || ht.item.data.type === SHAPE_TYPE.KEYPOINT_BOX)) {\n            return false;\n          }\n          return true;\n        }\n      });\n      let hit: paper.HitResult | undefined;\n      for (let i = 0; i < hits.length; i += 1) {\n        const h = hits[i];\n        const { type } = h.item.data;\n        if (\n          !type ||\n          (type !== SHAPE_TYPE.INSTANCE &&\n          type !== SHAPE_TYPE.GROUP &&\n          type !== SHAPE_TYPE.KEYPOINT_BOX &&\n          type !== SHAPE_TYPE.RECTANGLE_GROUP) &&\n          (\n            type !== SHAPE_TYPE.PATH ||\n            (type === SHAPE_TYPE.PATH && ['handle-in', 'handle-out'].includes(h.type)))\n        ) {\n          // select point | rectangle | rectangle control | path handle\n          if ((type === SHAPE_TYPE.RECTANGLE || type === SHAPE_TYPE.RECTANGLE_POINT || type === SHAPE_TYPE.RECTANGLE_PATH)) {\n            if ((i === 0) && !this.canAddShape()) {\n              hit = h;\n            }\n          } else {\n            hit = h;\n            if (type === SHAPE_TYPE.KEYPOINT) {\n              break;\n            }\n          }\n        }\n      }\n\n      if (hit?.item && !event.event.ctrlKey) {\n        if (\n          !this.isShapeInSelectedShapes(hit.item.data?.instanceId, hit.item.data?.groupName, hit.item.data?.index) &&\n          hit.item.data?.index !== this.props.selectedShapeStatus.id &&\n          hit.item.data?.id !== this.props.selectedShapeStatus.id\n        ) {\n          this.selectedHit = hit.item;\n          hit.item.selected = true;\n        }\n        if (hit.item.data.cursor) {\n          cursor = hit.item.data.cursor;\n        } else {\n          cursor = Cursor.MOVE;\n        }\n        this.showShapeLabel(hit, event.point);\n      } else if (this.shownLabel) {\n        const { point } = this.shownLabel.data;\n        resetAttrLabelPosition(this.shownLabel, { x: point[0], y: point[1] }, false);\n      }\n      this.hits = hit;\n      if (this.currentWarnings.length > 0) {\n        this.warningBtn = this.warningLayer?.hitTest(event.point);\n      }\n      if (this.smoothPath) {\n        this.smoothPath.fullySelected = true;\n      }\n      this.setCursor(cursor);\n    }\n  };\n\n  setCursor(cursor: Cursor) {\n    this.cursor = cursor;\n  }\n\n  clearHits = () => {\n    this.hits = undefined;\n  };\n\n  showShapeLabel(hits: paper.HitResult, point: paper.Point) {\n    const { activePointAttributesMode, activeAttributesMode } = rootStore.setting;\n    if (!activePointAttributesMode && !activeAttributesMode) return;\n    const localPoint = this.getPointInImage(Paper.view.projectToView(point));\n    const { data } = hits.item;\n    let label;\n    if (data.type === SHAPE_TYPE.KEYPOINT && activePointAttributesMode === AttributesMode.HOVER) {\n      label = this.getAttrLabelByKey(data.instanceId, data.groupName, data.index);\n    } else if (\n      (data.type === SHAPE_TYPE.RECTANGLE || data.type === SHAPE_TYPE.RECTANGLE_PATH || data.type === SHAPE_TYPE.RECTANGLE_POINT) &&\n      hits.item.parent &&\n      activeAttributesMode === AttributesMode.HOVER\n    ) {\n      const { instanceId, groupName, id } = hits.item.parent.data;\n      label = this.getAttrLabelByKey(instanceId, groupName, id);\n    }\n    if (label && (label.children?.slice(-1)[0] as paper.PointText).content) {\n      if (this.shownLabel) {\n        if (JSON.stringify(label) !== JSON.stringify(this.shownLabel)) {\n          const { point: position } = this.shownLabel.data;\n          resetAttrLabelPosition(this.shownLabel, { x: position[0], y: position[1] }, false);\n          this.shownLabel = label;\n        }\n      } else {\n        this.shownLabel = label;\n      }\n      this.shownLabel.visible = true;\n      this.shownLabel.position.x = localPoint.x + 50 / Paper.view.zoom;\n      this.shownLabel.position.y = localPoint.y + 50 / Paper.view.zoom;\n    }\n  }\n\n  getNewPointsByKeyPointRange(path: paper.Path, startKey: number, endKey: number, instanceId: string, groupName: string) {\n    const startPosition = this.getShapeByKey(instanceId, groupName, startKey).position;\n    const endPosition = this.getShapeByKey(instanceId, groupName, endKey).position;\n    const segmentLength = (path.getOffsetOf(endPosition) - path.getOffsetOf(startPosition)) / (endKey - startKey);\n    let newPoints = {}; // new points position between start & end\n    let base = startKey;\n    let basePoint = startPosition;\n    while (base < endKey - 1) {\n      const baseOffset = path.getOffsetOf(basePoint);\n      const nextPoint = path.getPointAt(baseOffset + segmentLength);\n      newPoints = {\n        ...newPoints,\n        [base + 1]: nextPoint\n      };\n      base += 1;\n      basePoint = nextPoint;\n    }\n    return newPoints;\n  }\n\n  getUpdatedPointsByNewPoints(newPoints: {[index: number]: paper.Point}, pointCategory: CategoryItem, parentData: Group) {\n    const { instanceId, groupName, category } = parentData;\n    const updatedShapes: UpdatedShape[] = [];\n    const indexs = Object.keys(newPoints).map((v) => Number(v));\n    for (let index = 0; index < indexs.length; index += 1) {\n      const pointIndex = indexs[index];\n      const existingPoint = this.getShapeByKey(instanceId, groupName, pointIndex) as paper.Shape;\n      if (newPoints[pointIndex]) {\n        const { x, y } = newPoints[pointIndex];\n        const pointInfo = {\n          frameIndex: this.props.selectedShapeStatus.frameIndex,\n          instanceId,\n          category,\n          groupName,\n          index: pointIndex,\n          shapeType: LandmarkEditType.KEYPOINT,\n        };\n        if (existingPoint) {\n          if (existingPoint.position.x !== x || existingPoint.position.y !== y) {\n            // update position\n            existingPoint.position.x = x;\n            existingPoint.position.y = y;\n\n            this.updatePath(existingPoint, { x, y });\n            updatedShapes.push({\n              ...pointInfo,\n              shape: {\n                position: { x, y }\n              },\n            });\n          }\n        } else {\n          // add new point\n          const isKeyPoint = pointCategory.keys.includes(pointIndex);\n          const groupContainer = this.getGroupContainerByGroupName(instanceId, groupName);\n\n          this.addKeypointShape(new Paper.Point(x, y), pointCategory.name, pointIndex, isKeyPoint, groupContainer, true);\n          updatedShapes.push({\n            ...pointInfo,\n            shape: {\n              pointCategory: pointCategory.name,\n              isKeyPoint,\n              position: { x, y },\n              visible: true,\n            },\n          });\n        }\n      }\n    }\n    return updatedShapes;\n  }\n\n  autoAdjust(point = this.props.selectedShapeStatus) {\n    if (this.props.selectedShapeInfo) {\n      const { id } = point;\n      const { instanceId, category, groupName, pointCategory: categoryName } = this.props.selectedShapeInfo as PointInfo;\n      const categoryKey = `${this.props.currentFrame}_${instanceId}_${groupName}_${categoryName}`;\n      const path = this.getPathByCategory(instanceId, groupName, categoryName); // pointCategory path\n      const pointCategory = this.props.categories.find((c) => c.name === categoryName); // pointCategory definition\n      if (path && pointCategory && this.props.categoryPathShapes[categoryKey] !== CategoryPathShape.CIRCLE) {\n        // calc the prev & next key point index\n        let prevKeyPointIndex: number | undefined;\n        let nextKeyPointIndex: number | undefined;\n        const { points = [] } = path.data;\n        const { keys = [] } = pointCategory;\n        const keysWithTwoSides = [\n          ...(keys.includes(points[0]) ? [] : [points[0]]),\n          ...keys,\n          ...(keys.includes(points[points.length - 1]) ? [] : [points[points.length - 1]]),\n        ].sort((a, b) => a - b);\n        let keyIndex = keysWithTwoSides.findIndex((key) => key > Number(id));\n        if (keyIndex < 0) { // not found, use the last point\n          keyIndex = keysWithTwoSides.length - 1;\n        }\n        let i = keyIndex;\n        while (i < keysWithTwoSides.length) {\n          if (points.includes(keysWithTwoSides[i])) {\n            nextKeyPointIndex = keysWithTwoSides[i];\n            break;\n          }\n          i += 1;\n        }\n        i = keyIndex - 1;\n        while (i >= 0) {\n          if (points.includes(keysWithTwoSides[i])) {\n            prevKeyPointIndex = keysWithTwoSides[i];\n            break;\n          }\n          i -= 1;\n        }\n        // range found, continue\n        if (prevKeyPointIndex !== undefined && nextKeyPointIndex !== undefined) {\n          const newPoints = this.getNewPointsByKeyPointRange(path, prevKeyPointIndex, nextKeyPointIndex, instanceId, groupName);\n          const parentData = { instanceId, category, groupName };\n          const updatedShapes = this.getUpdatedPointsByNewPoints(newPoints, pointCategory, parentData);\n          if (updatedShapes.length > 0) {\n            this.props.handleShapesChange(updatedShapes);\n          }\n        }\n      }\n    }\n  }\n\n  switchSmoothMode() {\n    if (this.props.selectedShapeInfo && rootStore.setting.pathStyle !== PathStyles.CURVES) {\n      const { instanceId, category, groupName, pointCategory: categoryName } = this.props.selectedShapeInfo as PointInfo;\n      const path = this.getPathByCategory(instanceId, groupName, categoryName);\n      const categoryKey = `${this.props.currentFrame}_${instanceId}_${groupName}_${categoryName}`;\n      if (path && this.props.categoryPathShapes[categoryKey] !== CategoryPathShape.CIRCLE) {\n        if (path === this.smoothPath) {\n          // ends\n          const pointCategory = this.props.categories.find((c) => c.name === categoryName);\n          if (pointCategory) {\n            const keyPoints = pointCategory.keys.filter((k) => path.data.points.includes(k)).sort((a, b) => a - b);\n            let updatedShapes: UpdatedShape[] = [];\n            for (let i = 1; i < keyPoints.length; i += 1) {\n              const newPoints = this.getNewPointsByKeyPointRange(path, keyPoints[i - 1], keyPoints[i], instanceId, groupName);\n              const parentData = { instanceId, category, groupName };\n              updatedShapes = [\n                ...updatedShapes,\n                ...this.getUpdatedPointsByNewPoints(newPoints, pointCategory, parentData),\n              ];\n            }\n            if (updatedShapes.length > 0) {\n              this.props.handleShapesChange(updatedShapes);\n            }\n          }\n          this.setSmooth(null);\n        } else {\n          // start\n          this.setSmooth(path);\n        }\n      }\n    }\n  }\n\n  setSmooth(smooth: paper.Path | null) {\n    if (this.smoothPath) {\n      this.smoothPath.fullySelected = false;\n      this.smoothPath.segments.forEach((seg) => {\n        seg.clearHandles();\n      });\n    }\n    this.smoothPath = smooth;\n    if (this.smoothPath) {\n      this.smoothPath.smooth({ type: 'continuous' });\n      this.smoothPath.fullySelected = true;\n    }\n  }\n\n  setSelectedCurves() {\n    if (this.props.selectedShapeInfo) {\n      const { selectedShapeInfo } = this.props;\n      const { instanceId, groupName, pointCategory } = selectedShapeInfo as PointInfo;\n      const path = this.getPathByCategory(instanceId, groupName, pointCategory);\n      this.toggleCurves(path);\n    }\n    const { instanceId, groupName, id } = this.props.selectedShapeStatus;\n    if (typeof id === 'number') {\n      const point = this.getShapeByKey(instanceId, groupName, id);\n      if (point) {\n        const { data: { lines = [] } } = point;\n        lines.forEach(({ pathId }: any) => {\n          const path = this.getPathById(instanceId, groupName, pathId);\n          this.toggleCurves(path);\n        });\n      }\n    }\n  }\n\n  toggleCurves(path?: paper.Path) {\n    if (rootStore.setting.pathStyle === PathStyles.CURVES && path) {\n      const { data: { instanceId, groupName, id: pathId, points }, segments } = path;\n      const { currentFrame } = this.props;\n      path.smooth({ type: 'continuous' });\n      const map: {[pointIndex: number]: Handle} = {};\n      // points\n      (points as number[]).forEach((pointIndex, i) => {\n        const segment = segments[i];\n        if (segment) {\n          const { handleIn, handleOut, point } = segment;\n          map[pointIndex] = {\n            frameIndex: currentFrame,\n            pathId,\n            instanceId,\n            groupName,\n            pointIndex,\n            handleIn: { x: handleIn.x, y: handleIn.y },\n            handleOut: { x: handleOut.x, y: handleOut.y },\n            pointPosition: { x: point.x, y: point.y },\n          };\n        }\n      });\n      rootStore.handle.setPathHandles(currentFrame, pathId, map);\n    }\n  }\n\n  setCategoryAsCircle() {\n    if (this.props.selectedShapeInfo) {\n      const { instanceId, category, groupName, pointCategory } = this.props.selectedShapeInfo as PointInfo;\n      if (pointCategory) {\n        const container: Group = { instanceId, category, groupName };\n        const categoryKey = `${this.props.currentFrame}_${instanceId}_${groupName}_${pointCategory}`;\n        if (this.props.categoryPathShapes[categoryKey] === CategoryPathShape.CIRCLE) {\n          this.updateCirclePath(pointCategory, false, container);\n          this.props.setCategoryPathShape(categoryKey);\n        } else {\n          const updatedShapes = this.updateCirclePath(pointCategory, true, container);\n          this.props.setCategoryPathShape(categoryKey, CategoryPathShape.CIRCLE, updatedShapes);\n        }\n      }\n    }\n  }\n\n  updateCirclePath(categoryName: string, isCirclePath = true, container: Group) {\n    const { instanceId, groupName, category } = container;\n    const updatedShapes: UpdatedShape[] = [];\n    const path = this.getPathByCategory(instanceId, groupName, categoryName);\n    const categoryData = rootStore.ontology.getCategoryData(category, groupName, categoryName);\n    const lineColor = categoryData?.isConnect === false ?\n      new Paper.Color('rgba(0,0,0,0)') :\n      new Paper.Color(categoryData?.displayColor || POINT_COLOR);\n    if (path && categoryData) {\n      const categoryPoints = this.getPointsByCategory(instanceId, groupName, categoryName);\n      if (categoryPoints) {\n        const sortedKeys = [...categoryData.keys].sort((a, b) => a - b);\n        const pIndex1 = sortedKeys[0];\n        const pIndex2 = sortedKeys[Math.ceil(sortedKeys.length / 2)];\n        const point1 = categoryPoints.find((p) => p.data.index === pIndex1);\n        const point2 = categoryPoints.find((p) => p.data.index === pIndex2);\n        const zoom = Paper.view.zoom * this.mainLayer!.matrix.scaling.x;\n        if (point1 && point2) {\n          if (isCirclePath) {\n            // is a circle & key points all exist\n            const centerX = (point1.position.x + point2.position.x) / 2;\n            const centerY = (point1.position.y + point2.position.y) / 2;\n            const radius = Math.sqrt((point2.position.x - point1.position.x) ** 2 + (point2.position.y - point1.position.y) ** 2) / 2;\n            const newPath = new Paper.CompoundPath({\n              children: [\n                new Paper.Path.Circle({\n                  center: [centerX, centerY],\n                  radius,\n                }),\n                new Paper.Path.Line({\n                  from: [point1.position.x, point1.position.y],\n                  to: [point2.position.x, point2.position.y],\n                }),\n                new Paper.Path.Line({\n                  from: new Paper.Point(computeRotatedPosition({ x: centerX, y: centerY }, point1.position, Math.PI / 2)),\n                  to: new Paper.Point(computeRotatedPosition({ x: centerX, y: centerY }, point1.position, -Math.PI / 2)),\n                }),\n              ],\n              strokeWidth: rootStore.setting.lineWidth / zoom,\n              strokeColor: lineColor,\n              selectedColor: lineColor,\n            });\n            newPath.data = { ...path.data, isCircle: true, instanceId, groupName };\n            path.replaceWith(newPath);\n\n            // update all points in this pointCategory\n            const update = (index: number, position: { x: number; y: number }) => {\n              const existingPoint = this.getShapeByKey(instanceId, groupName, index) as paper.Shape;\n              const pointInfo = {\n                frameIndex: this.props.selectedShapeStatus.frameIndex,\n                instanceId,\n                category,\n                groupName,\n                index,\n                shapeType: LandmarkEditType.KEYPOINT,\n              };\n              if (existingPoint) {\n                // update position\n                existingPoint.position.x = position.x;\n                existingPoint.position.y = position.y;\n                this.updatePath(existingPoint, position);\n                updatedShapes.push({\n                  ...pointInfo,\n                  shape: {\n                    position: { x: position.x, y: position.y }\n                  },\n                });\n              } else {\n                const isKeyPoint = categoryData.keys.includes(index);\n                const groupContainer = this.getGroupContainerByGroupName(instanceId, groupName);\n\n                this.addKeypointShape(new Paper.Point(position.x, position.y), categoryData.name, index, isKeyPoint, groupContainer, true);\n                updatedShapes.push({\n                  ...pointInfo,\n                  shape: {\n                    pointCategory: categoryData.name,\n                    isKeyPoint,\n                    position: { x: position.x, y: position.y },\n                    visible: true,\n                  },\n                });\n              }\n            };\n            const [start, end] = categoryData.range;\n            for (let i = pIndex1 + 1; i < pIndex2; i += 1) {\n              const radians = (Math.PI / (pIndex2 - pIndex1)) * (i - pIndex1);\n              const position = computeRotatedPosition({ x: centerX, y: centerY }, point1.position, radians);\n              update(i, position);\n            }\n            for (let i = pIndex2 + 1; i <= end; i += 1) {\n              const radians = (Math.PI / (end + 1 - pIndex2)) * (i - pIndex2);\n              const position = computeRotatedPosition({ x: centerX, y: centerY }, point2.position, radians);\n              update(i, position);\n            }\n            for (let i = start; i < pIndex1; i += 1) {\n              const radians = (Math.PI / (end + 1 - pIndex2)) * (start - pIndex1);\n              const position = computeRotatedPosition({ x: centerX, y: centerY }, point1.position, radians);\n              update(i, position);\n            }\n          } else {\n            const points = [...categoryPoints].sort((a, b) => a.data.index - b.data.index);\n            const newPath = new Paper.Path({\n              segments: points.map((p) => p.position),\n              strokeWidth: rootStore.setting.lineWidth / zoom,\n              strokeColor: lineColor,\n              selectedColor: lineColor,\n            });\n            newPath.data = { ...path.data, isCircle: false, points: points.map((p) => p.data.index) };\n            path.replaceWith(newPath);\n            this.toggleCurves(newPath);\n          }\n        }\n      }\n    }\n    return updatedShapes;\n  }\n\n  updateGroupBox = (instanceId: string, category: string, groupName: string) => {\n    let boundRect = this.getShapeByGroup();\n    const { selectedShapeStatus } = this.props;\n    let isRemovebound = false;\n    if (\n      instanceId &&\n      instanceId === selectedShapeStatus.instanceId &&\n      groupName === selectedShapeStatus.groupName\n    ) {\n      const { ontology, setting: { pointSize, lineWidth, labelItems } } = rootStore;\n      const groupConntainer = this.getGroupContainerByGroupName(instanceId, groupName);\n      const points = groupConntainer && groupConntainer.children\n        .filter((v: any) => v.type === CategoryPathShape.CIRCLE)\n        .map((v) => [v.position.x, v.position.y]);\n      if (points && points.length > 0) {\n        const xList = points.map((v) => v[0]);\n        const yList = points.map((v) => v[1]);\n        const minX = Math.min(...xList);\n        const maxX = Math.max(...xList);\n        const minY = Math.min(...yList);\n        const maxY = Math.max(...yList);\n        if (this.mainLayer) {\n          const zoom = Paper.view.zoom * this.mainLayer.matrix.scaling.x;\n          if (boundRect) {\n            boundRect.remove();\n          }\n          const range = (pointSize * 3) / zoom;\n          const fontSize = FONT_SIZE / this.paperZoom;\n          const strokeWitdth = lineWidth / zoom;\n          boundRect = new Paper.Shape.Rectangle({\n            point: [minX - range, minY - range],\n            size: [maxX - minX + 2 * range, maxY - minY + 2 * range],\n            strokeColor: new Paper.Color('#FFE600'),\n            strokeWidth: strokeWitdth\n          });\n          boundRect.data.type = SHAPE_TYPE.KEYPOINT_BOX;\n          this.mainLayer.addChild(boundRect);\n          const groupInfo = ontology.getGroupData(category, groupName);\n          const instance = this.props.getInstance(instanceId);\n          const group = instance?.children.find((g) => g.name === groupName)?.frames[this.props.currentFrame];\n          const attrsLabel = getValuesLabel(groupInfo?.label_config?.fields, group?.attributes, labelItems);\n          const content = `${groupInfo?.class_display_name || ''} ${instance?.number || ''}-${groupInfo?.display_name || groupInfo?.name || ''}`;\n          const labelGroup = this.getLabelByKey('', '', 'group_label');\n          const groupAttribute = this.getLabelByKey('', '', 'group_attributes');\n          labelGroup?.remove();\n          groupAttribute?.remove();\n          const x = minX - range; const y = minY - range - strokeWitdth * 2;\n          const w = maxX - minX + 2 * range; const h = maxY - minY + 2 * range;\n          this.addLabel(\n            content,\n            { x, y, width: w, height: h },\n            { instanceId: '', category: '', groupName: '' },\n            'group_label',\n            true,\n            SHAPE_TYPE.KEYPOINT_BOX\n          );\n          this.addLabel(\n            attrsLabel,\n            { x, y: y - fontSize * 1.5, width: w, height: h },\n            { instanceId: '', category: '', groupName: '' },\n            'group_attributes',\n            true,\n            SHAPE_TYPE.KEYPOINT_BOX\n          );\n        }\n      } else {\n        isRemovebound = true;\n      }\n    } else {\n      isRemovebound = true;\n    }\n    if (isRemovebound && boundRect) {\n      boundRect.remove();\n      this.removeLabel('', '', 'group_label');\n      this.removeLabel('', '', 'group_attributes');\n    }\n  };\n\n  addRectangle(path: paper.Path, groupInfo: GroupInfo, add = true) {\n    if (this.mainLayer) {\n      const { displayColor, instanceId, category, groupName } = groupInfo;\n      const { data: { id }, segments } = path;\n      const rectData = {\n        x: segments[0].point.x,\n        y: segments[0].point.y,\n        width: segments[2].point.x - segments[0].point.x,\n        height: segments[2].point.y - segments[0].point.y,\n        displayColor,\n      };\n      this.drawRectangle(rectData, { instanceId, category, groupName }, id);\n      if (add) {\n        this.props.setNextEmptyShape();\n      }\n    }\n  }\n\n  getAlphaColor(color: string, opacity = this.fillOpacity) {\n    return hexToRgba(color, opacity);\n  }\n\n  drawRectangle(\n    rectData: {x: number, y: number, width: number, height: number, displayColor?: string},\n    groupData: Group,\n    id: string,\n    visible = true\n  ) {\n    if (this.props.selectedShapeInfo && this.mainLayer) {\n      const { x, y, width, height, displayColor } = rectData;\n      const { instanceId, category, groupName } = groupData;\n      let instanceContainer = this.getInstanceContainerByInstaceId(instanceId);\n      let groupContainer = this.getGroupContainerByGroupName(instanceId, groupName);\n      if (!instanceContainer) {\n        instanceContainer = new Paper.Group();\n        instanceContainer.data = {\n          instanceId,\n          name: category,\n          type: SHAPE_TYPE.INSTANCE,\n        };\n        this.mainLayer?.addChild(instanceContainer);\n      }\n      if (!instanceContainer || !groupContainer) {\n        groupContainer = new Paper.Group();\n        groupContainer.data = {\n          groupName,\n          category,\n          type: SHAPE_TYPE.GROUP,\n          instanceId,\n        };\n        instanceContainer.addChild(groupContainer);\n      }\n      const zoom = Paper.view.zoom * this.mainLayer.matrix.scaling.x;\n      let rectangleBox = this.getShapeByKey(instanceId, groupName, id);\n      if (rectangleBox) {\n        rectangleBox.removeChildren();\n      } else {\n        rectangleBox = new Paper.Group();\n        rectangleBox.data = {\n          frameIndex: this.props.selectedShapeStatus.frameIndex,\n          id,\n          groupName,\n          category,\n          type: SHAPE_TYPE.RECTANGLE_GROUP,\n          instanceId,\n          displayColor,\n          visible,\n        };\n        groupContainer.addChild(rectangleBox);\n      }\n      const rectangle = new Paper.Shape.Rectangle({\n        point: [x, y],\n        size: [width, height],\n        fillColor: this.getAlphaColor(displayColor || POINT_COLOR),\n        strokeWidth: rootStore.setting.lineWidth / zoom\n      });\n      rectangle.data = {\n        parentShape: id,\n        cursor: Cursor.MOVE,\n        type: SHAPE_TYPE.RECTANGLE\n      };\n      rectangleBox.addChild(rectangle);\n      this.selectShape(instanceId, groupName, id, id === this.props.selectedShapeStatus.id);\n      if (this.labelLayer) {\n        const groupInfo = rootStore.ontology.getGroupData(category, groupName);\n        const instance = this.props.getInstance(instanceId);\n        const group = instance?.children.find((g) => g.name === groupName)?.frames[this.props.currentFrame];\n        const label = `${groupInfo?.class_display_name || ''} ${instance?.number || ''}-${groupInfo?.display_name || groupInfo?.name || ''}`;\n        let attrsLabel = getValuesLabel(groupInfo?.label_config?.fields, group?.attributes, rootStore.setting.labelItems);\n        attrsLabel = `${rootStore.setting.displayCategory ? `${label};` : ''}${rootStore.setting.displayCategory && attrsLabel ? ';' : ''}${attrsLabel}`;\n        const labelGroup = this.getLabelByKey(instanceId, groupName, id);\n        if (labelGroup) {\n          this.updateLabel(\n            instanceId,\n            groupName,\n            id,\n            { x, y },\n            { x: x + width / 2, y: y + height / 2 },\n          );\n        } else {\n          this.addLabel(\n            label,\n            { x, y, width, height },\n            { instanceId, category, groupName },\n            id,\n            visible,\n            SHAPE_TYPE.RECTANGLE,\n            attrsLabel\n          );\n        }\n      }\n    }\n  }\n\n  removeRectangle(instanceId: string, groupName: string, id: string) {\n    const rectangleBox = this.getShapeByKey(instanceId, groupName, id);\n    if (rectangleBox) {\n      rectangleBox.removeChildren();\n      rectangleBox.remove();\n      this.removeLabel(instanceId, groupName, id);\n    }\n  }\n\n  selectShape(instanceId: string, groupName: string, id: string, selected = true) {\n    if (this.mainLayer) {\n      const rectangleBox = this.getShapeByKey(instanceId, groupName, id);\n      if (rectangleBox && rectangleBox.children) {\n        const { bounds: { topLeft, topRight, bottomRight, bottomLeft, x, y, height, width } } = rectangleBox.children[0];\n        const points = [topLeft, topRight, bottomRight, bottomLeft];\n        const { displayColor } = rectangleBox.data;\n        const zoom = Paper.view.zoom * this.mainLayer.matrix.scaling.x;\n        if (selected) {\n          const radius = (rootStore.setting.pointSize / 2) / zoom;\n          const newColor = new Paper.Color(displayColor || POINT_COLOR);\n          points.forEach((point, index) => {\n            const sourceSeg = new Paper.Segment(point);\n            const targetSeg = index + 1 >= points.length ?\n              new Paper.Segment(points[0]) :\n              new Paper.Segment(points[index + 1]);\n\n            const lineBar = new Paper.Path({\n              segments: [sourceSeg, targetSeg],\n              strokeWidth: rootStore.setting.lineWidth / zoom,\n              fillColor: newColor,\n              strokeColor: newColor,\n              selectedColor: newColor,\n            });\n            lineBar.data = {\n              parentShape: id,\n              cursor: index % 2 === 0 ? Cursor.NS_RESIZE : Cursor.EW_RESIZE,\n              type: SHAPE_TYPE.RECTANGLE_PATH,\n              controlIndex: index,\n            };\n            rectangleBox.addChild(lineBar);\n          });\n          points.forEach((point, index) => {\n            const control = new Paper.Shape.Circle(point, radius);\n            control.strokeColor = newColor;\n            control.strokeWidth = rootStore.setting.lineWidth / zoom;\n            control.fillColor = newColor;\n            control.data = {\n              parentShape: id,\n              cursor: index % 2 === 0 ? Cursor.NWSE_RESIZE : Cursor.NESW_RESIZE,\n              type: SHAPE_TYPE.RECTANGLE_POINT,\n              controlIndex: index,\n              displayColor\n            };\n            rectangleBox.addChild(control);\n          });\n        } else {\n          rectangleBox.removeChildren();\n          const rectangle = new Paper.Shape.Rectangle({\n            point: [x, y],\n            size: [width, height],\n            fillColor: this.getAlphaColor(displayColor || POINT_COLOR),\n            strokeWidth: rootStore.setting.lineWidth / zoom\n          });\n          rectangle.data = {\n            parentShape: id,\n            cursor: Cursor.MOVE,\n            type: SHAPE_TYPE.RECTANGLE\n          };\n          rectangleBox.addChild(rectangle);\n        }\n      }\n    }\n  }\n\n  drawWarnings() {\n    this.warningLayer?.removeChildren();\n    const { qaWarnings: warnings } = rootStore.review;\n    if (warnings.length > 0) {\n      this.currentWarnings = warnings.filter((warning) => warning.frames[0] === this.props.currentFrame);\n      if (this.warningLayer) {\n        const strokeWitdth = 2 / this.paperZoom;\n        const warningIconSize = 8 / this.paperZoom;\n        this.currentWarnings.forEach((warning) => {\n          const { id, groupName, shapeIds, data } = warning;\n          if (!groupName || !shapeIds) {\n            // missing\n            if (data?.position) {\n              const warningIcon = new Paper.Shape.Circle({\n                center: data.position,\n                radius: warningIconSize,\n                fillColor: '#DD4924',\n              });\n              const text = new Paper.PointText({\n                content: '!',\n                fontSize: FONT_SIZE / this.paperZoom,\n                fontWeight: '700',\n                fillColor: 'white',\n              });\n              warningIcon.data = { id };\n              text.data = { id };\n              text.position.set(data.position);\n              const group = new Paper.Group();\n              group.addChild(warningIcon);\n              group.addChild(text);\n              this.warningLayer!.addChild(group);\n            }\n            return;\n          }\n          const shapes: paper.Item[] = [];\n          shapeIds!.forEach((shapeId) => {\n            const shape = this.getShapeByKey(id, groupName!, shapeId);\n            if (shape) {\n              shapes.push(shape);\n              if (shape.data.type !== SHAPE_TYPE.RECTANGLE_GROUP) {\n                const { x, y, width, height } = shape.bounds;\n                const boundRect = new Paper.Shape.Rectangle({\n                  point: [x - strokeWitdth, y - strokeWitdth],\n                  size: [width + 2 * strokeWitdth, height + 2 * strokeWitdth],\n                  strokeColor: new Paper.Color('#DC4624'),\n                  strokeWidth: strokeWitdth\n                });\n                this.warningLayer!.addChild(boundRect);\n              }\n            }\n          });\n          let position: number[] = [];\n          if (shapes.length > 1) {\n            const minXList: number[] = [];\n            const maxXList: number[] = [];\n            const minYList: number[] = [];\n            const maxYList: number[] = [];\n            shapes.forEach(({ bounds: { x, y, width, height } }) => {\n              minXList.push(x - strokeWitdth);\n              maxXList.push(x + width + strokeWitdth);\n              minYList.push(y - strokeWitdth);\n              maxYList.push(y + height + strokeWitdth);\n            });\n            const minX = Math.min(...minXList);\n            const maxX = Math.max(...maxXList);\n            const minY = Math.min(...minYList);\n            const maxY = Math.max(...maxYList);\n            const boundRect = new Paper.Shape.Rectangle({\n              point: [minX - 2 * strokeWitdth, minY - 2 * strokeWitdth],\n              size: [maxX - minX + 4 * strokeWitdth, maxY - minY + 4 * strokeWitdth],\n              strokeColor: new Paper.Color('#DC4624'),\n              strokeWidth: strokeWitdth\n            });\n            this.warningLayer!.addChild(boundRect);\n            position = [minX - warningIconSize, minY - warningIconSize];\n          } else if (shapes.length === 1) {\n            position = [shapes[0].bounds.x - warningIconSize, shapes[0].bounds.y - warningIconSize];\n          }\n          if (shapes.length > 0) {\n            const warningIcon = new Paper.Shape.Circle({\n              center: new Paper.Point(position[0], position[1]),\n              radius: warningIconSize,\n              fillColor: '#DC4624',\n            });\n            const text = new Paper.PointText({\n              content: '!',\n              fontSize: FONT_SIZE / this.paperZoom,\n              fontWeight: '700',\n              fillColor: 'white',\n            });\n            warningIcon.data = { instanceId: id, groupName, shapeIds };\n            text.data = { instanceId: id, groupName, shapeIds };\n            text.position.x = position[0];\n            text.position.y = position[1];\n            this.warningLayer!.addChild(warningIcon);\n            this.warningLayer!.addChild(text);\n          }\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div\n        ref={this.canvasContainer}\n        className=\"canvas\"\n        style={{ cursor: this.cursor }}\n      >\n        <canvas ref={this.canvas} />\n        {this.props.isReview && (\n          <div className=\"layer\">\n            <div className=\"tip\">\n              <span>{formatMessage('ORIGINAL_DATA')}</span>\n              <span>{formatMessage('REVIEW_TIP')}</span>\n              <Button className=\"close\" onClick={this.props.setReview} size=\"small\">\n                {formatMessage('REVIEW_CLOSE', { values: { shortcut: 'Ctrl+V' } })}\n              </Button>\n            </div>\n          </div>\n        )}\n        {(this.props.loading) && (\n          <div className=\"loading\">\n            {!this.raster && <Spin indicator={<LoadingOutlined style={{ fontSize: 100, color: '#00bad3' }} spin />} />}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}