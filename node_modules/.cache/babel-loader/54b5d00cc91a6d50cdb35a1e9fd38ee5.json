{"ast":null,"code":"import _applyDecoratedDescriptor from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nvar _class;\nimport { computed, makeAutoObservable } from 'mobx';\nimport { LabelItem, LabelStyle, LabelFormat, PathStyles } from '../types';\nexport let AttributesMode = /*#__PURE__*/function (AttributesMode) {\n  AttributesMode[\"HIDE\"] = \"hide\";\n  AttributesMode[\"HOVER\"] = \"hover\";\n  AttributesMode[\"ALWAYS\"] = \"always\";\n  return AttributesMode;\n}({});\nlet SettingStore = (_class = class SettingStore {\n  constructor(rootStore) {\n    this.rootStore = void 0;\n    this.isFullScreen = false;\n    this.isGridVisible = false;\n    this.pointSize = 4;\n    this.lineWidth = 1;\n    this.filters = {};\n    this.submitCheck = false;\n    /**\n     * active attributes mode for point\n     */\n    this.activePointAttributesMode = AttributesMode.HIDE;\n    /**\n     * active attributes mode\n     */\n    this.activeAttributesMode = AttributesMode.HIDE;\n    /**\n     * label mode\n     */\n    this.labelMode = true;\n    /**\n     * label items\n     */\n    this.labelItems = [LabelItem.CATEGORY, LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES];\n    /**\n     * label style\n     */\n    this.labelStyle = LabelStyle.DEFAULT;\n    /**\n     * path style\n     */\n    this.pathStyle = PathStyles.DEFAULT;\n    /**\n     * label background color\n     */\n    this.labelBgColor = 'rgba(0,0,0,0.6)';\n    /**\n     * label format\n     */\n    this.labelFormat = LabelFormat.DEFAULT;\n    /**\n     * label items for point\n     */\n    this.pointLabelItems = [LabelItem.NUMBER, LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES];\n    this.displayPointIndex = true;\n    makeAutoObservable(this, {\n      rootStore: false,\n      submitCheck: false,\n      labelBgColor: false,\n      displayPointIndex: false,\n      pathStyle: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n  setPointSize(size) {\n    this.pointSize = size;\n  }\n  setLineWidth(width) {\n    this.lineWidth = width;\n  }\n  setFullScreen(full) {\n    this.isFullScreen = full;\n  }\n  setGridVisible(visible) {\n    this.isGridVisible = visible;\n  }\n  setLabelMode(mode) {\n    this.labelMode = mode;\n  }\n  handleFiltersChange(filters) {\n    this.filters = filters;\n  }\n  get displayCategory() {\n    return this.labelItems.includes(LabelItem.CATEGORY);\n  }\n\n  /**\n   * init by payload\n   * @param payload\n   */\n  initPayload(payload) {\n    return new Promise(resolve => {\n      // parse label mode\n      this.activeAttributesMode = Object.values(AttributesMode).includes(payload.label_mode) ? payload.label_mode : AttributesMode.HIDE;\n      // parse poiny label mode\n      this.activePointAttributesMode = Object.values(AttributesMode).includes(payload.point_label_mode) ? payload.point_label_mode : AttributesMode.ALWAYS;\n      // parse label style\n      this.labelStyle = Object.values(LabelStyle).includes(payload.label_style) ? payload.label_style : LabelStyle.DEFAULT;\n      this.pathStyle = Object.values(PathStyles).includes(payload.path_style) ? payload.path_style : PathStyles.DEFAULT;\n      this.labelBgColor = this.labelStyle === LabelStyle.DEFAULT ? 'rgba(0,0,0,0.6)' : 'rgba(0,0,0,0.0)';\n      // parse label format\n      this.labelFormat = Object.values(LabelFormat).includes(payload.label_format) ? payload.label_format : LabelFormat.DEFAULT;\n      // parse label items\n      if (typeof payload.label_item === 'string' && payload.label_item) {\n        this.labelItems = [];\n        payload.label_item.split(',').forEach(i => {\n          const item = i.trim();\n          if (Object.values(LabelItem).includes(item)) {\n            this.labelItems.push(item);\n          }\n        });\n      }\n      // parse point label items\n      if (typeof payload.point_label_item === 'string' && payload.point_label_item) {\n        this.pointLabelItems = [];\n        payload.point_label_item.split(',').forEach(i => {\n          const item = i.trim();\n          if (Object.values(LabelItem).includes(item)) {\n            this.pointLabelItems.push(item);\n          }\n        });\n        this.displayPointIndex = this.pointLabelItems.includes(LabelItem.NUMBER);\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * set active attributes mode\n   * @param activeMode\n   * @param type point or object\n   */\n  setActiveAttributesMode(activeMode, type = 'object') {\n    if (type === 'keypoint') {\n      this.activePointAttributesMode = activeMode;\n    } else {\n      this.activeAttributesMode = activeMode;\n    }\n  }\n}, (_applyDecoratedDescriptor(_class.prototype, \"displayCategory\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"displayCategory\"), _class.prototype)), _class);\nexport default SettingStore;","map":{"version":3,"names":["computed","makeAutoObservable","LabelItem","LabelStyle","LabelFormat","PathStyles","AttributesMode","SettingStore","_class","constructor","rootStore","isFullScreen","isGridVisible","pointSize","lineWidth","filters","submitCheck","activePointAttributesMode","HIDE","activeAttributesMode","labelMode","labelItems","CATEGORY","ATTRIBUTE_KEYS","ATTRIBUTE_VALUES","labelStyle","DEFAULT","pathStyle","labelBgColor","labelFormat","pointLabelItems","NUMBER","displayPointIndex","autoBind","setPointSize","size","setLineWidth","width","setFullScreen","full","setGridVisible","visible","setLabelMode","mode","handleFiltersChange","displayCategory","includes","initPayload","payload","Promise","resolve","Object","values","label_mode","point_label_mode","ALWAYS","label_style","path_style","label_format","label_item","split","forEach","i","item","trim","push","point_label_item","setActiveAttributesMode","activeMode","type","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/store/SettingsStore.ts"],"sourcesContent":["import { computed, makeAutoObservable } from 'mobx';\nimport { RootStoreType } from './RootStore';\nimport { LabelItem, LabelStyle, LabelFormat, PathStyles } from '../types';\n\nexport enum AttributesMode {\n  HIDE = 'hide',\n  HOVER = 'hover',\n  ALWAYS = 'always',\n}\n\nclass SettingStore {\n  rootStore: RootStoreType;\n\n  isFullScreen = false;\n\n  isGridVisible = false;\n\n  pointSize = 4;\n\n  lineWidth = 1;\n\n  filters: {[key: string]: number;} = {};\n\n  submitCheck = false;\n\n  /**\n   * active attributes mode for point\n   */\n  activePointAttributesMode = AttributesMode.HIDE;\n\n  /**\n   * active attributes mode\n   */\n  activeAttributesMode = AttributesMode.HIDE;\n\n  /**\n   * label mode\n   */\n  labelMode = true;\n\n  /**\n   * label items\n   */\n  labelItems = [LabelItem.CATEGORY, LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES];\n\n  /**\n   * label style\n   */\n  labelStyle = LabelStyle.DEFAULT;\n\n  /**\n   * path style\n   */\n  pathStyle: PathStyles = PathStyles.DEFAULT;\n\n  /**\n   * label background color\n   */\n\n  labelBgColor = 'rgba(0,0,0,0.6)';\n\n  /**\n   * label format\n   */\n  labelFormat = LabelFormat.DEFAULT;\n\n  /**\n   * label items for point\n   */\n  pointLabelItems = [LabelItem.NUMBER, LabelItem.ATTRIBUTE_KEYS, LabelItem.ATTRIBUTE_VALUES];\n\n  displayPointIndex = true;\n\n  constructor(rootStore: RootStoreType) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      submitCheck: false,\n      labelBgColor: false,\n      displayPointIndex: false,\n      pathStyle: false,\n    }, {\n      autoBind: true,\n    });\n    this.rootStore = rootStore;\n  }\n\n  setPointSize(size: number) {\n    this.pointSize = size;\n  }\n\n  setLineWidth(width: number) {\n    this.lineWidth = width;\n  }\n\n  setFullScreen(full: boolean) {\n    this.isFullScreen = full;\n  }\n\n  setGridVisible(visible: boolean) {\n    this.isGridVisible = visible;\n  }\n\n  setLabelMode(mode: boolean) {\n    this.labelMode = mode;\n  }\n\n  handleFiltersChange(filters: {[key: string]: number}) {\n    this.filters = filters;\n  }\n\n  @computed get displayCategory() {\n    return this.labelItems.includes(LabelItem.CATEGORY);\n  }\n\n  /**\n   * init by payload\n   * @param payload\n   */\n  initPayload(payload: {[key: string]: any}) {\n    return new Promise((resolve) => {\n      // parse label mode\n      this.activeAttributesMode = Object.values(AttributesMode).includes(payload.label_mode) ? payload.label_mode : AttributesMode.HIDE;\n      // parse poiny label mode\n      this.activePointAttributesMode = Object.values(AttributesMode).includes(payload.point_label_mode) ? payload.point_label_mode : AttributesMode.ALWAYS;\n      // parse label style\n      this.labelStyle = Object.values(LabelStyle).includes(payload.label_style) ? payload.label_style : LabelStyle.DEFAULT;\n      this.pathStyle = Object.values(PathStyles).includes(payload.path_style as PathStyles) ? payload.path_style as PathStyles : PathStyles.DEFAULT;\n      this.labelBgColor = this.labelStyle === LabelStyle.DEFAULT ? 'rgba(0,0,0,0.6)' : 'rgba(0,0,0,0.0)';\n      // parse label format\n      this.labelFormat = Object.values(LabelFormat).includes(payload.label_format) ? payload.label_format : LabelFormat.DEFAULT;\n      // parse label items\n      if (typeof payload.label_item === 'string' && payload.label_item) {\n        this.labelItems = [];\n        payload.label_item.split(',').forEach((i) => {\n          const item = i.trim();\n          if ((Object.values(LabelItem) as string[]).includes(item)) {\n            this.labelItems.push(item as LabelItem);\n          }\n        });\n      }\n      // parse point label items\n      if (typeof payload.point_label_item === 'string' && payload.point_label_item) {\n        this.pointLabelItems = [];\n        payload.point_label_item.split(',').forEach((i) => {\n          const item = i.trim();\n          if ((Object.values(LabelItem) as string[]).includes(item)) {\n            this.pointLabelItems.push(item as LabelItem);\n          }\n        });\n        this.displayPointIndex = this.pointLabelItems.includes(LabelItem.NUMBER);\n      }\n\n      resolve(true);\n    });\n  }\n\n  /**\n   * set active attributes mode\n   * @param activeMode\n   * @param type point or object\n   */\n  setActiveAttributesMode(activeMode: AttributesMode, type = 'object') {\n    if (type === 'keypoint') {\n      this.activePointAttributesMode = activeMode;\n    } else {\n      this.activeAttributesMode = activeMode;\n    }\n  };\n}\n\nexport default SettingStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}