{"ast":null,"code":"import _applyDecoratedDescriptor from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nvar _class;\nimport { observable, computed, makeObservable, action, toJS } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ReviewResult, ValidationType } from '../types';\nimport { ToolMode, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\n;\n;\n/**\n * reviews stores\n */\nlet ReviewsStore = (_class = class ReviewsStore {\n  /**\n   * qa qarnings\n   */\n  get qaWarnings() {\n    return [...this.reviews, ...this.missingReviews].filter(review => review.result === ReviewResult.REJECT).map(review => {\n      var _review$type;\n      return {\n        id: review.instanceId || review.id,\n        groupName: review.groupName,\n        shapeIds: review.shapeIds,\n        data: review.data,\n        frames: [review.frameIndex],\n        message: ((_review$type = review.type) === null || _review$type === void 0 ? void 0 : _review$type.join(',')) || '',\n        comment: review.comment,\n        warningType: ValidationType.QUALITY\n      };\n    });\n  }\n\n  /**\n   * warnings\n   */\n  get warnings() {\n    return this.customWarnings.length || this.qaWarnings.length ? [...toJS(this.customWarnings), ...this.qaWarnings] : [];\n  }\n\n  /**\n   * frame instance review mapping\n   */\n  get frameReviewsMap() {\n    const reviewsMap = {};\n    this.reviews.forEach(review => {\n      const {\n        frameIndex,\n        instanceId,\n        groupName,\n        shapeIds,\n        result\n      } = review;\n      const results = {};\n      shapeIds.forEach(id => {\n        if (typeof id === 'string') {\n          results[id] = result;\n        } else {\n          results[id] = result;\n        }\n      });\n      if (!reviewsMap[frameIndex]) {\n        reviewsMap[frameIndex] = {\n          [instanceId]: {\n            [groupName]: {}\n          }\n        };\n      }\n      if (!reviewsMap[frameIndex][instanceId]) {\n        reviewsMap[frameIndex][instanceId] = {\n          [groupName]: {}\n        };\n      }\n      if (!reviewsMap[frameIndex][instanceId][groupName]) {\n        reviewsMap[frameIndex][instanceId][groupName] = {};\n      }\n      reviewsMap[frameIndex][instanceId][groupName] = {\n        ...reviewsMap[frameIndex][instanceId][groupName],\n        ...results\n      };\n    });\n    return reviewsMap;\n  }\n  constructor(rootStore) {\n    this.rootStore = void 0;\n    /**\n     * current tool mode\n     */\n    this.toolMode = ToolMode.LABELING;\n    /**\n     * canvas draw\n     */\n    this.drawMode = true;\n    /**\n    * missing name\n    */\n    this.missingName = 'Missing';\n    /**\n     * issue types\n     */\n    this.issueTypes = [];\n    /**\n     * all reviews\n     */\n    this.reviews = [];\n    /**\n    * all missing reviews\n    */\n    this.missingReviews = [];\n    /**\n     * selected review\n     */\n    this.selectedReview = void 0;\n    /**\n    * selected missing review\n    */\n    this.selectedMissingReview = void 0;\n    /**\n     * is selected missing review modal visible\n     */\n    this.selectedMissingReviewModalVisible = false;\n    /**\n     * custom warnings\n     */\n    this.customWarnings = [];\n    /**\n     * has custom error\n     */\n    this.hasCustomError = false;\n    /**\n     * blockSubmitErrors\n     */\n    this.blockSubmitErrors = [];\n    /**\n     * errors\n     */\n    this.errors = void 0;\n    /**\n     * delete review\n     * @param instanceId\n     * @param frameIndex\n     */\n    this.deleteReviewByInstance = (currentReview = this.selectedReview) => {\n      if (this.isEnabled && currentReview) {\n        const {\n          instanceId,\n          frameIndex,\n          groupName,\n          shapeIds\n        } = currentReview;\n        const prevReviews = [...this.reviews];\n        const index = this.reviews.findIndex(review => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n        if (index >= 0) {\n          this.reviews.splice(index, 1);\n          this.changeUndo(prevReviews);\n        }\n        this.setSelectedReview();\n      }\n    };\n    makeObservable(this, {\n      reviews: observable,\n      missingReviews: observable,\n      selectedReview: observable,\n      selectedMissingReview: observable,\n      selectedMissingReviewModalVisible: observable,\n      errors: observable,\n      customWarnings: observable,\n      drawMode: observable,\n      setInitialData: action,\n      setSelectedReview: action,\n      setReview: action,\n      deleteReviewByInstance: action,\n      addMissingReview: action,\n      cancelUnfinishMissingReview: action,\n      finishMissingReview: action,\n      setSelectedMissingReview: action,\n      closeMissingReviewModal: action,\n      updateMissingReview: action,\n      deleteMissingReview: action,\n      setScriptResult: action,\n      setDrawMode: action\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n  * should show reviews\n  */\n  get showReviews() {\n    return this.toolMode !== ToolMode.LABELING;\n  }\n\n  /**\n   * review result types\n   */\n  get reviewResultTypes() {\n    return this.toolMode === ToolMode.AUDIT ? [ReviewResult.APPROVE, ReviewResult.REJECT, ReviewResult.SUSPEND] : [ReviewResult.APPROVE, ReviewResult.REJECT];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes.split(',').map(i => i.trim()).filter(i => !!i);\n    if (this.isEnabled) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(reviews) {\n    if (reviews) {\n      this.reviews = [];\n      Object.values({\n        ...reviews\n      }).filter(v => v && v.result !== undefined && (!this.isEnabled && v.result === ReviewResult.REJECT || this.isEnabled)).forEach(({\n        instanceId,\n        frameIndex,\n        groupName,\n        shapeIds,\n        id,\n        number,\n        data,\n        result,\n        type,\n        comment\n      }) => {\n        if (frameIndex !== undefined && result !== undefined) {\n          if (instanceId !== undefined && groupName !== undefined && Array.isArray(shapeIds) && shapeIds.length > 0) {\n            this.reviews.push({\n              instanceId,\n              groupName,\n              shapeIds,\n              frameIndex,\n              result,\n              type,\n              comment\n            });\n          } else if (data === null || data === void 0 ? void 0 : data.position) {\n            this.missingReviews.push({\n              id,\n              number,\n              frameIndex,\n              data,\n              result,\n              type,\n              comment\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * select review\n   * @param instanceId\n   */\n  setSelectedReview(review) {\n    if (review) {\n      const {\n        frameIndex,\n        instanceId,\n        groupName,\n        shapeIds,\n        result\n      } = review;\n      const oldReview = this.getReview(frameIndex, instanceId, groupName, shapeIds);\n      if (this.isEnabled) {\n        this.selectedReview = oldReview ? {\n          ...oldReview,\n          result\n        } : review;\n      } else if (oldReview) {\n        this.selectedReview = oldReview;\n      }\n    } else {\n      this.selectedReview = undefined;\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    return this.reviews.map(review => ({\n      ...review\n    }));\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(frameIndex, instanceId, groupName, shapeIds) {\n    return this.reviews.find(review => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(results, selectedReview = toJS(this.selectedReview)) {\n    if (!selectedReview || !this.isEnabled) {\n      this.selectedReview = undefined;\n      return;\n    }\n    const {\n      frameIndex,\n      instanceId,\n      groupName,\n      shapeIds\n    } = selectedReview;\n    const prevReviews = toJS(this.reviews);\n    const index = prevReviews.findIndex(review => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n    if (index >= 0) {\n      const reviewItem = this.reviews[index];\n      if (reviewItem.result !== results.result || reviewItem.type !== results.type || reviewItem.comment !== results.comment) {\n        reviewItem.result = results.result;\n        reviewItem.type = results.type;\n        reviewItem.comment = results.comment;\n      }\n    } else if (this.isEnabled) {\n      const currentIds = [...toJS(shapeIds)];\n      shapeIds.forEach(shapeId => {\n        const itemIndex = this.reviews.findIndex(review => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && review.shapeIds.includes(shapeId));\n        const item = this.reviews[itemIndex];\n        if (item) {\n          if (item.result === results.result) {\n            const n = currentIds.findIndex(key => key === shapeId);\n            if (n >= 0) {\n              currentIds.splice(n, 1);\n            }\n          } else {\n            const n = item.shapeIds.findIndex(key => key === shapeId);\n            if (n >= 0) {\n              item.shapeIds.splice(n, 1);\n            }\n          }\n          if (item.shapeIds.length === 0) {\n            this.reviews.splice(itemIndex, 1);\n          }\n        }\n      });\n      if (currentIds.length) {\n        this.reviews.push({\n          instanceId,\n          groupName,\n          shapeIds: currentIds,\n          frameIndex,\n          result: results.result,\n          type: results.type,\n          comment: results.comment\n        });\n      }\n    }\n    this.selectedReview = undefined;\n    if (JSON.stringify(prevReviews) !== JSON.stringify(toJS(this.reviews))) {\n      this.changeUndo(prevReviews);\n    }\n  }\n  addMissingReview(frameIndex) {\n    const maxNumber = Math.max(...this.missingReviews.map(r => r.number), 0);\n    const missingReview = {\n      id: uuidv4(),\n      number: maxNumber + 1,\n      frameIndex,\n      result: ReviewResult.REJECT\n    };\n    this.missingReviews.push(missingReview);\n    this.setSelectedMissingReview(missingReview);\n  }\n  cancelUnfinishMissingReview() {\n    if (this.selectedMissingReview && this.selectedMissingReview.data === undefined) {\n      // remove unfinished review\n      const index = this.missingReviews.findIndex(r => {\n        var _this$selectedMissing;\n        return r.id === ((_this$selectedMissing = this.selectedMissingReview) === null || _this$selectedMissing === void 0 ? void 0 : _this$selectedMissing.id);\n      });\n      if (index >= 0) {\n        this.missingReviews.splice(index, 1);\n      }\n    }\n    this.setSelectedMissingReview();\n    this.closeMissingReviewModal();\n  }\n  finishMissingReview(p) {\n    const review = this.missingReviews.find(r => {\n      var _this$selectedMissing2;\n      return r.id === ((_this$selectedMissing2 = this.selectedMissingReview) === null || _this$selectedMissing2 === void 0 ? void 0 : _this$selectedMissing2.id);\n    });\n    if (review) {\n      review.data = {\n        position: {\n          x: p.x,\n          y: p.y\n        }\n      };\n      this.setSelectedMissingReview(review, true);\n    }\n  }\n  setSelectedMissingReview(review, openReviewModal = false) {\n    this.selectedMissingReview = review;\n    if (review && openReviewModal) {\n      this.selectedMissingReviewModalVisible = true;\n    }\n  }\n  closeMissingReviewModal() {\n    this.selectedMissingReviewModalVisible = false;\n  }\n  updateMissingReview(review) {\n    const index = this.missingReviews.findIndex(r => r.id === review.id);\n    if (index >= 0) {\n      this.missingReviews.splice(index, 1, review);\n    }\n  }\n  deleteMissingReview(review) {\n    const index = this.missingReviews.findIndex(r => r.id === review.id);\n    if (index >= 0) {\n      this.missingReviews.splice(index, 1);\n    }\n    this.setSelectedMissingReview();\n    this.closeMissingReviewModal();\n  }\n  changeUndo(prevReviews) {\n    const before = [];\n    const after = [];\n    before.push({\n      type: 'reviews',\n      status: prevReviews\n    });\n    after.push({\n      type: 'reviews',\n      status: this.reviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n  setDrawMode(mode) {\n    this.cancelUnfinishMissingReview();\n    this.drawMode = mode;\n  }\n}, (_applyDecoratedDescriptor(_class.prototype, \"qaWarnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"qaWarnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"warnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"warnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"frameReviewsMap\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"frameReviewsMap\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEnabled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEnabled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEditable\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEditable\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"showReviews\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"showReviews\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reviewResultTypes\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"reviewResultTypes\"), _class.prototype)), _class);\nexport default ReviewsStore;","map":{"version":3,"names":["observable","computed","makeObservable","action","toJS","v4","uuidv4","ReviewResult","ValidationType","ToolMode","isReviewEditable","isAnnotationReadonly","ReviewsStore","_class","qaWarnings","reviews","missingReviews","filter","review","result","REJECT","map","_review$type","id","instanceId","groupName","shapeIds","data","frames","frameIndex","message","type","join","comment","warningType","QUALITY","warnings","customWarnings","length","frameReviewsMap","reviewsMap","forEach","results","constructor","rootStore","toolMode","LABELING","drawMode","missingName","issueTypes","selectedReview","selectedMissingReview","selectedMissingReviewModalVisible","hasCustomError","blockSubmitErrors","errors","deleteReviewByInstance","currentReview","isEnabled","prevReviews","index","findIndex","JSON","stringify","splice","changeUndo","setSelectedReview","setInitialData","setReview","addMissingReview","cancelUnfinishMissingReview","finishMissingReview","setSelectedMissingReview","closeMissingReviewModal","updateMissingReview","deleteMissingReview","setScriptResult","setDrawMode","readonly","isEditable","showReviews","reviewResultTypes","AUDIT","APPROVE","SUSPEND","init","split","i","trim","Object","values","v","undefined","number","Array","isArray","push","position","oldReview","getReview","getReviewsForSave","find","reviewItem","currentIds","shapeId","itemIndex","includes","item","n","key","maxNumber","Math","max","r","missingReview","_this$selectedMissing","p","_this$selectedMissing2","x","y","openReviewModal","before","after","status","undo","saveStatus","mode","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/store/ReviewsStore.ts"],"sourcesContent":["import { observable, computed, makeObservable, action, toJS } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { RootStoreType } from './RootStore';\nimport { Status } from './UndoStore';\nimport { Review, ReviewResult, ReviewData, ValidationType, MissingReview } from '../types';\nimport { IWarning } from '../../common/tabs-menu/Validator';\nimport { ToolMode, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport formatMessage from '../locales';\n\nexport interface PointReviewResult { [id: number]: ReviewResult };\ninterface ShapeReviewResult { [id: string]: ReviewResult };\nexport interface GroupReviewsMap {\n  [groupName: string]: PointReviewResult | ShapeReviewResult;\n}\nexport interface InstanceReviewsMap {\n  [instanceId: string]: GroupReviewsMap\n}\n\nexport interface FrameReviewsMap {\n  [frameIndex: number]: InstanceReviewsMap\n}\n\n/**\n * reviews stores\n */\nclass ReviewsStore {\n  rootStore: RootStoreType;\n\n  /**\n   * current tool mode\n   */\n  toolMode: ToolMode = ToolMode.LABELING;\n\n  /**\n   * canvas draw\n   */\n  drawMode = true;\n\n  /**\n * missing name\n */\n  missingName = 'Missing';\n\n  /**\n   * issue types\n   */\n  issueTypes: string[] = [];\n\n  /**\n   * all reviews\n   */\n  reviews: Review[] = [];\n\n  /**\n * all missing reviews\n */\n  missingReviews: MissingReview[] = [];\n\n  /**\n   * selected review\n   */\n  selectedReview?: Review;\n\n  /**\n * selected missing review\n */\n  selectedMissingReview?: MissingReview;\n\n  /**\n   * is selected missing review modal visible\n   */\n  selectedMissingReviewModalVisible = false;\n\n  /**\n   * custom warnings\n   */\n  customWarnings: IWarning[] = [];\n\n  /**\n   * has custom error\n   */\n  hasCustomError = false;\n\n  /**\n   * blockSubmitErrors\n   */\n  blockSubmitErrors: IWarning[] = [];\n\n  /**\n   * errors\n   */\n  errors?: {\n    [type: string]: string;\n  };\n\n  /**\n   * qa qarnings\n   */\n  @computed get qaWarnings(): IWarning[] {\n    return [...this.reviews, ...this.missingReviews]\n      .filter((review) => review.result === ReviewResult.REJECT).map((review) => ({\n        id: (review as Review).instanceId || (review as MissingReview).id,\n        groupName: (review as Review).groupName,\n        shapeIds: (review as Review).shapeIds,\n        data: (review as MissingReview).data,\n        frames: [review.frameIndex],\n        message: review.type?.join(',') || '',\n        comment: review.comment,\n        warningType: ValidationType.QUALITY\n      }));\n  }\n\n  /**\n   * warnings\n   */\n  @computed get warnings() {\n    return (this.customWarnings.length || this.qaWarnings.length) ? [...toJS(this.customWarnings), ...this.qaWarnings] : [];\n  }\n\n  /**\n   * frame instance review mapping\n   */\n  @computed get frameReviewsMap() {\n    const reviewsMap: FrameReviewsMap = {};\n    this.reviews.forEach((review) => {\n      const { frameIndex, instanceId, groupName, shapeIds, result } = review;\n      const results: PointReviewResult | ShapeReviewResult = {};\n      shapeIds.forEach((id) => {\n        if (typeof id === 'string') {\n          (results as ShapeReviewResult)[(id as string)] = result;\n        } else {\n          (results as PointReviewResult)[(id as number)] = result;\n        }\n      });\n      if (!reviewsMap[frameIndex]) {\n        reviewsMap[frameIndex] = {\n          [instanceId]: {\n            [groupName]: {}\n          }\n        };\n      }\n      if (!reviewsMap[frameIndex][instanceId]) {\n        reviewsMap[frameIndex][instanceId] = {\n          [groupName]: {}\n        };\n      }\n      if (!reviewsMap[frameIndex][instanceId][groupName]) {\n        reviewsMap[frameIndex][instanceId][groupName] = {};\n      }\n      reviewsMap[frameIndex][instanceId][groupName] = {\n        ...reviewsMap[frameIndex][instanceId][groupName],\n        ...results\n      };\n    });\n    return reviewsMap;\n  }\n\n  constructor(rootStore: RootStoreType) {\n    makeObservable(this, {\n      reviews: observable,\n      missingReviews: observable,\n      selectedReview: observable,\n      selectedMissingReview: observable,\n      selectedMissingReviewModalVisible: observable,\n      errors: observable,\n      customWarnings: observable,\n      drawMode: observable,\n      setInitialData: action,\n      setSelectedReview: action,\n      setReview: action,\n      deleteReviewByInstance: action,\n      addMissingReview: action,\n      cancelUnfinishMissingReview: action,\n      finishMissingReview: action,\n      setSelectedMissingReview: action,\n      closeMissingReviewModal: action,\n      updateMissingReview: action,\n      deleteMissingReview: action,\n      setScriptResult: action,\n      setDrawMode: action,\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  @computed get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  @computed get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n * should show reviews\n */\n  @computed get showReviews() {\n    return this.toolMode !== ToolMode.LABELING;\n  }\n\n  /**\n   * review result types\n   */\n  @computed get reviewResultTypes() {\n    return this.toolMode === ToolMode.AUDIT ? [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n      ReviewResult.SUSPEND,\n    ] : [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n    ];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode: ToolMode, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes.split(',').map((i) => i.trim()).filter((i) => !!i);\n    if (this.isEnabled) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(reviews: any) {\n    if (reviews) {\n      this.reviews = [];\n      Object.values({ ...reviews })\n        .filter((v: any) => v && v.result !== undefined && ((!this.isEnabled && v.result === ReviewResult.REJECT) || this.isEnabled))\n        .forEach(({ instanceId, frameIndex, groupName, shapeIds, id, number, data, result, type, comment }: any) => {\n          if (\n            frameIndex !== undefined &&\n            result !== undefined\n          ) {\n            if (\n              instanceId !== undefined &&\n              groupName !== undefined &&\n              Array.isArray(shapeIds) &&\n              shapeIds.length > 0\n            ) {\n              this.reviews.push({ instanceId, groupName, shapeIds, frameIndex, result, type, comment });\n            } else if (data?.position) {\n              this.missingReviews.push({ id, number, frameIndex, data, result, type, comment });\n            }\n          }\n        });\n    }\n  }\n\n  /**\n   * select review\n   * @param instanceId\n   */\n  setSelectedReview(review?: Review) {\n    if (review) {\n      const { frameIndex, instanceId, groupName, shapeIds, result } = review;\n      const oldReview = this.getReview(frameIndex, instanceId, groupName, shapeIds);\n      if (this.isEnabled) {\n        this.selectedReview = oldReview ? { ...oldReview, result } : review;\n      } else if (oldReview) {\n        this.selectedReview = oldReview;\n      }\n    } else {\n      this.selectedReview = undefined;\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    return this.reviews.map((review) => ({ ...review }));\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(frameIndex: number, instanceId: string, groupName: string, shapeIds: (string | number)[]) {\n    return this.reviews.find((review) => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(results: ReviewData, selectedReview = toJS(this.selectedReview)) {\n    if (!selectedReview || !this.isEnabled) {\n      this.selectedReview = undefined;\n      return;\n    }\n    const { frameIndex, instanceId, groupName, shapeIds } = selectedReview;\n    const prevReviews = toJS(this.reviews);\n    const index = prevReviews.findIndex((review) => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n    if (index >= 0) {\n      const reviewItem = this.reviews[index];\n      if (reviewItem.result !== results.result || reviewItem.type !== results.type || reviewItem.comment !== results.comment) {\n        reviewItem.result = results.result;\n        reviewItem.type = results.type;\n        reviewItem.comment = results.comment;\n      }\n    } else if (this.isEnabled) {\n      const currentIds = [...toJS(shapeIds)];\n      shapeIds.forEach((shapeId) => {\n        const itemIndex = this.reviews.findIndex((review) => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && review.shapeIds.includes(shapeId));\n        const item = this.reviews[itemIndex];\n        if (item) {\n          if (item.result === results.result) {\n            const n = currentIds.findIndex((key) => key === shapeId);\n            if (n >= 0) {\n              currentIds.splice(n, 1);\n            }\n          } else {\n            const n = item.shapeIds.findIndex((key) => key === shapeId);\n            if (n >= 0) {\n              item.shapeIds.splice(n, 1);\n            }\n          }\n          if (item.shapeIds.length === 0) {\n            this.reviews.splice(itemIndex, 1);\n          }\n        }\n      });\n      if (currentIds.length) {\n        this.reviews.push({ instanceId, groupName, shapeIds: currentIds, frameIndex, result: results.result, type: results.type, comment: results.comment });\n      }\n    }\n    this.selectedReview = undefined;\n    if (JSON.stringify(prevReviews) !== JSON.stringify(toJS(this.reviews))) {\n      this.changeUndo(prevReviews);\n    }\n  }\n\n  /**\n   * delete review\n   * @param instanceId\n   * @param frameIndex\n   */\n  deleteReviewByInstance = (currentReview = this.selectedReview) => {\n    if (this.isEnabled && currentReview) {\n      const { instanceId, frameIndex, groupName, shapeIds } = currentReview;\n      const prevReviews = [...this.reviews];\n      const index = this.reviews.findIndex((review) => review.frameIndex === frameIndex && review.instanceId === instanceId && review.groupName === groupName && JSON.stringify(review.shapeIds) === JSON.stringify(shapeIds));\n      if (index >= 0) {\n        this.reviews.splice(index, 1);\n        this.changeUndo(prevReviews);\n      }\n      this.setSelectedReview();\n    }\n  };\n\n  addMissingReview(frameIndex: number) {\n    const maxNumber = Math.max(...this.missingReviews.map((r) => r.number), 0);\n    const missingReview: MissingReview = {\n      id: uuidv4(),\n      number: maxNumber + 1,\n      frameIndex,\n      result: ReviewResult.REJECT,\n    };\n    this.missingReviews.push(missingReview);\n    this.setSelectedMissingReview(missingReview);\n  }\n\n  cancelUnfinishMissingReview() {\n    if (this.selectedMissingReview && this.selectedMissingReview.data === undefined) {\n      // remove unfinished review\n      const index = this.missingReviews.findIndex((r) => r.id === this.selectedMissingReview?.id);\n      if (index >= 0) {\n        this.missingReviews.splice(index, 1);\n      }\n    }\n    this.setSelectedMissingReview();\n    this.closeMissingReviewModal();\n  }\n\n  finishMissingReview(p: { x: number; y: number }) {\n    const review = this.missingReviews.find((r) => r.id === this.selectedMissingReview?.id);\n    if (review) {\n      review.data = {\n        position: { x: p.x, y: p.y },\n      };\n      this.setSelectedMissingReview(review, true);\n    }\n  }\n\n  setSelectedMissingReview(review?: MissingReview, openReviewModal = false) {\n    this.selectedMissingReview = review;\n    if (review && openReviewModal) {\n      this.selectedMissingReviewModalVisible = true;\n    }\n  }\n\n  closeMissingReviewModal() {\n    this.selectedMissingReviewModalVisible = false;\n  }\n\n  updateMissingReview(review: MissingReview) {\n    const index = this.missingReviews.findIndex((r) => r.id === review.id);\n    if (index >= 0) {\n      this.missingReviews.splice(index, 1, review);\n    }\n  }\n\n  deleteMissingReview(review: MissingReview) {\n    const index = this.missingReviews.findIndex((r) => r.id === review.id);\n    if (index >= 0) {\n      this.missingReviews.splice(index, 1);\n    }\n    this.setSelectedMissingReview();\n    this.closeMissingReviewModal();\n  }\n\n  changeUndo(prevReviews: Review[]) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    before.push({\n      type: 'reviews',\n      status: prevReviews\n    });\n    after.push({\n      type: 'reviews',\n      status: this.reviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n\n  setDrawMode(mode: boolean) {\n    this.cancelUnfinishMissingReview();\n    this.drawMode = mode;\n  }\n}\n\nexport default ReviewsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}