{"ast":null,"code":"/*\n * JavaScript Load Image Scaling\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  var originalTransform = loadImage.transform;\n  loadImage.createCanvas = function (width, height, offscreen) {\n    if (offscreen && loadImage.global.OffscreenCanvas) {\n      return new OffscreenCanvas(width, height);\n    }\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  };\n  loadImage.transform = function (img, options, callback, file, data) {\n    originalTransform.call(loadImage, loadImage.scale(img, options, data), options, callback, file, data);\n  };\n\n  // Transform image coordinates, allows to override e.g.\n  // the canvas orientation based on the orientation option,\n  // gets canvas, options and data passed as arguments:\n  loadImage.transformCoordinates = function () {};\n\n  // Returns transformed options, allows to override e.g.\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\n  // gets img, options, data passed as arguments:\n  loadImage.getTransformedOptions = function (img, options) {\n    var aspectRatio = options.aspectRatio;\n    var newOptions;\n    var i;\n    var width;\n    var height;\n    if (!aspectRatio) {\n      return options;\n    }\n    newOptions = {};\n    for (i in options) {\n      if (Object.prototype.hasOwnProperty.call(options, i)) {\n        newOptions[i] = options[i];\n      }\n    }\n    newOptions.crop = true;\n    width = img.naturalWidth || img.width;\n    height = img.naturalHeight || img.height;\n    if (width / height > aspectRatio) {\n      newOptions.maxWidth = height * aspectRatio;\n      newOptions.maxHeight = height;\n    } else {\n      newOptions.maxWidth = width;\n      newOptions.maxHeight = width / aspectRatio;\n    }\n    return newOptions;\n  };\n\n  // Canvas render method, allows to implement a different rendering algorithm:\n  loadImage.drawImage = function (img, canvas, sourceX, sourceY, sourceWidth, sourceHeight, destWidth, destHeight, options) {\n    var ctx = canvas.getContext('2d');\n    if (options.imageSmoothingEnabled === false) {\n      ctx.msImageSmoothingEnabled = false;\n      ctx.imageSmoothingEnabled = false;\n    } else if (options.imageSmoothingQuality) {\n      ctx.imageSmoothingQuality = options.imageSmoothingQuality;\n    }\n    ctx.drawImage(img, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, destWidth, destHeight);\n    return ctx;\n  };\n\n  // Determines if the target image should be a canvas element:\n  loadImage.requiresCanvas = function (options) {\n    return options.canvas || options.crop || !!options.aspectRatio;\n  };\n\n  // Scales and/or crops the given image (img or canvas HTML element)\n  // using the given options:\n  loadImage.scale = function (img, options, data) {\n    // eslint-disable-next-line no-param-reassign\n    options = options || {};\n    // eslint-disable-next-line no-param-reassign\n    data = data || {};\n    var useCanvas = img.getContext || loadImage.requiresCanvas(options) && !!loadImage.global.HTMLCanvasElement;\n    var width = img.naturalWidth || img.width;\n    var height = img.naturalHeight || img.height;\n    var destWidth = width;\n    var destHeight = height;\n    var maxWidth;\n    var maxHeight;\n    var minWidth;\n    var minHeight;\n    var sourceWidth;\n    var sourceHeight;\n    var sourceX;\n    var sourceY;\n    var pixelRatio;\n    var downsamplingRatio;\n    var tmp;\n    var canvas;\n    /**\n     * Scales up image dimensions\n     */\n    function scaleUp() {\n      var scale = Math.max((minWidth || destWidth) / destWidth, (minHeight || destHeight) / destHeight);\n      if (scale > 1) {\n        destWidth *= scale;\n        destHeight *= scale;\n      }\n    }\n    /**\n     * Scales down image dimensions\n     */\n    function scaleDown() {\n      var scale = Math.min((maxWidth || destWidth) / destWidth, (maxHeight || destHeight) / destHeight);\n      if (scale < 1) {\n        destWidth *= scale;\n        destHeight *= scale;\n      }\n    }\n    if (useCanvas) {\n      // eslint-disable-next-line no-param-reassign\n      options = loadImage.getTransformedOptions(img, options, data);\n      sourceX = options.left || 0;\n      sourceY = options.top || 0;\n      if (options.sourceWidth) {\n        sourceWidth = options.sourceWidth;\n        if (options.right !== undefined && options.left === undefined) {\n          sourceX = width - sourceWidth - options.right;\n        }\n      } else {\n        sourceWidth = width - sourceX - (options.right || 0);\n      }\n      if (options.sourceHeight) {\n        sourceHeight = options.sourceHeight;\n        if (options.bottom !== undefined && options.top === undefined) {\n          sourceY = height - sourceHeight - options.bottom;\n        }\n      } else {\n        sourceHeight = height - sourceY - (options.bottom || 0);\n      }\n      destWidth = sourceWidth;\n      destHeight = sourceHeight;\n    }\n    maxWidth = options.maxWidth;\n    maxHeight = options.maxHeight;\n    minWidth = options.minWidth;\n    minHeight = options.minHeight;\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\n      destWidth = maxWidth;\n      destHeight = maxHeight;\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight;\n      if (tmp < 0) {\n        sourceHeight = maxHeight * sourceWidth / maxWidth;\n        if (options.top === undefined && options.bottom === undefined) {\n          sourceY = (height - sourceHeight) / 2;\n        }\n      } else if (tmp > 0) {\n        sourceWidth = maxWidth * sourceHeight / maxHeight;\n        if (options.left === undefined && options.right === undefined) {\n          sourceX = (width - sourceWidth) / 2;\n        }\n      }\n    } else {\n      if (options.contain || options.cover) {\n        minWidth = maxWidth = maxWidth || minWidth;\n        minHeight = maxHeight = maxHeight || minHeight;\n      }\n      if (options.cover) {\n        scaleDown();\n        scaleUp();\n      } else {\n        scaleUp();\n        scaleDown();\n      }\n    }\n    if (useCanvas) {\n      pixelRatio = options.pixelRatio;\n      if (pixelRatio > 1 &&\n      // Check if the image has not yet had the device pixel ratio applied:\n      !(img.style.width && Math.floor(parseFloat(img.style.width, 10)) === Math.floor(width / pixelRatio))) {\n        destWidth *= pixelRatio;\n        destHeight *= pixelRatio;\n      }\n      // Check if workaround for Chromium orientation crop bug is required:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1074354\n      if (loadImage.orientationCropBug && !img.getContext && (sourceX || sourceY || sourceWidth !== width || sourceHeight !== height)) {\n        // Write the complete source image to an intermediate canvas first:\n        tmp = img;\n        // eslint-disable-next-line no-param-reassign\n        img = loadImage.createCanvas(width, height, true);\n        loadImage.drawImage(tmp, img, 0, 0, width, height, width, height, options);\n      }\n      downsamplingRatio = options.downsamplingRatio;\n      if (downsamplingRatio > 0 && downsamplingRatio < 1 && destWidth < sourceWidth && destHeight < sourceHeight) {\n        while (sourceWidth * downsamplingRatio > destWidth) {\n          canvas = loadImage.createCanvas(sourceWidth * downsamplingRatio, sourceHeight * downsamplingRatio, true);\n          loadImage.drawImage(img, canvas, sourceX, sourceY, sourceWidth, sourceHeight, canvas.width, canvas.height, options);\n          sourceX = 0;\n          sourceY = 0;\n          sourceWidth = canvas.width;\n          sourceHeight = canvas.height;\n          // eslint-disable-next-line no-param-reassign\n          img = canvas;\n        }\n      }\n      canvas = loadImage.createCanvas(destWidth, destHeight);\n      loadImage.transformCoordinates(canvas, options, data);\n      if (pixelRatio > 1) {\n        canvas.style.width = canvas.width / pixelRatio + 'px';\n      }\n      loadImage.drawImage(img, canvas, sourceX, sourceY, sourceWidth, sourceHeight, destWidth, destHeight, options).setTransform(1, 0, 0, 1, 0, 0); // reset to the identity matrix\n      return canvas;\n    }\n    img.width = destWidth;\n    img.height = destHeight;\n    return img;\n  };\n});","map":{"version":3,"names":["factory","define","amd","module","exports","require","window","loadImage","originalTransform","transform","createCanvas","width","height","offscreen","global","OffscreenCanvas","canvas","document","createElement","img","options","callback","file","data","call","scale","transformCoordinates","getTransformedOptions","aspectRatio","newOptions","i","Object","prototype","hasOwnProperty","crop","naturalWidth","naturalHeight","maxWidth","maxHeight","drawImage","sourceX","sourceY","sourceWidth","sourceHeight","destWidth","destHeight","ctx","getContext","imageSmoothingEnabled","msImageSmoothingEnabled","imageSmoothingQuality","requiresCanvas","useCanvas","HTMLCanvasElement","minWidth","minHeight","pixelRatio","downsamplingRatio","tmp","scaleUp","Math","max","scaleDown","min","left","top","right","undefined","bottom","contain","cover","style","floor","parseFloat","orientationCropBug","setTransform"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/node_modules/blueimp-load-image/js/load-image-scale.js"],"sourcesContent":["/*\n * JavaScript Load Image Scaling\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  var originalTransform = loadImage.transform\n\n  loadImage.createCanvas = function (width, height, offscreen) {\n    if (offscreen && loadImage.global.OffscreenCanvas) {\n      return new OffscreenCanvas(width, height)\n    }\n    var canvas = document.createElement('canvas')\n    canvas.width = width\n    canvas.height = height\n    return canvas\n  }\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    originalTransform.call(\n      loadImage,\n      loadImage.scale(img, options, data),\n      options,\n      callback,\n      file,\n      data\n    )\n  }\n\n  // Transform image coordinates, allows to override e.g.\n  // the canvas orientation based on the orientation option,\n  // gets canvas, options and data passed as arguments:\n  loadImage.transformCoordinates = function () {}\n\n  // Returns transformed options, allows to override e.g.\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\n  // gets img, options, data passed as arguments:\n  loadImage.getTransformedOptions = function (img, options) {\n    var aspectRatio = options.aspectRatio\n    var newOptions\n    var i\n    var width\n    var height\n    if (!aspectRatio) {\n      return options\n    }\n    newOptions = {}\n    for (i in options) {\n      if (Object.prototype.hasOwnProperty.call(options, i)) {\n        newOptions[i] = options[i]\n      }\n    }\n    newOptions.crop = true\n    width = img.naturalWidth || img.width\n    height = img.naturalHeight || img.height\n    if (width / height > aspectRatio) {\n      newOptions.maxWidth = height * aspectRatio\n      newOptions.maxHeight = height\n    } else {\n      newOptions.maxWidth = width\n      newOptions.maxHeight = width / aspectRatio\n    }\n    return newOptions\n  }\n\n  // Canvas render method, allows to implement a different rendering algorithm:\n  loadImage.drawImage = function (\n    img,\n    canvas,\n    sourceX,\n    sourceY,\n    sourceWidth,\n    sourceHeight,\n    destWidth,\n    destHeight,\n    options\n  ) {\n    var ctx = canvas.getContext('2d')\n    if (options.imageSmoothingEnabled === false) {\n      ctx.msImageSmoothingEnabled = false\n      ctx.imageSmoothingEnabled = false\n    } else if (options.imageSmoothingQuality) {\n      ctx.imageSmoothingQuality = options.imageSmoothingQuality\n    }\n    ctx.drawImage(\n      img,\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      0,\n      0,\n      destWidth,\n      destHeight\n    )\n    return ctx\n  }\n\n  // Determines if the target image should be a canvas element:\n  loadImage.requiresCanvas = function (options) {\n    return options.canvas || options.crop || !!options.aspectRatio\n  }\n\n  // Scales and/or crops the given image (img or canvas HTML element)\n  // using the given options:\n  loadImage.scale = function (img, options, data) {\n    // eslint-disable-next-line no-param-reassign\n    options = options || {}\n    // eslint-disable-next-line no-param-reassign\n    data = data || {}\n    var useCanvas =\n      img.getContext ||\n      (loadImage.requiresCanvas(options) &&\n        !!loadImage.global.HTMLCanvasElement)\n    var width = img.naturalWidth || img.width\n    var height = img.naturalHeight || img.height\n    var destWidth = width\n    var destHeight = height\n    var maxWidth\n    var maxHeight\n    var minWidth\n    var minHeight\n    var sourceWidth\n    var sourceHeight\n    var sourceX\n    var sourceY\n    var pixelRatio\n    var downsamplingRatio\n    var tmp\n    var canvas\n    /**\n     * Scales up image dimensions\n     */\n    function scaleUp() {\n      var scale = Math.max(\n        (minWidth || destWidth) / destWidth,\n        (minHeight || destHeight) / destHeight\n      )\n      if (scale > 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    /**\n     * Scales down image dimensions\n     */\n    function scaleDown() {\n      var scale = Math.min(\n        (maxWidth || destWidth) / destWidth,\n        (maxHeight || destHeight) / destHeight\n      )\n      if (scale < 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    if (useCanvas) {\n      // eslint-disable-next-line no-param-reassign\n      options = loadImage.getTransformedOptions(img, options, data)\n      sourceX = options.left || 0\n      sourceY = options.top || 0\n      if (options.sourceWidth) {\n        sourceWidth = options.sourceWidth\n        if (options.right !== undefined && options.left === undefined) {\n          sourceX = width - sourceWidth - options.right\n        }\n      } else {\n        sourceWidth = width - sourceX - (options.right || 0)\n      }\n      if (options.sourceHeight) {\n        sourceHeight = options.sourceHeight\n        if (options.bottom !== undefined && options.top === undefined) {\n          sourceY = height - sourceHeight - options.bottom\n        }\n      } else {\n        sourceHeight = height - sourceY - (options.bottom || 0)\n      }\n      destWidth = sourceWidth\n      destHeight = sourceHeight\n    }\n    maxWidth = options.maxWidth\n    maxHeight = options.maxHeight\n    minWidth = options.minWidth\n    minHeight = options.minHeight\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\n      destWidth = maxWidth\n      destHeight = maxHeight\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight\n      if (tmp < 0) {\n        sourceHeight = (maxHeight * sourceWidth) / maxWidth\n        if (options.top === undefined && options.bottom === undefined) {\n          sourceY = (height - sourceHeight) / 2\n        }\n      } else if (tmp > 0) {\n        sourceWidth = (maxWidth * sourceHeight) / maxHeight\n        if (options.left === undefined && options.right === undefined) {\n          sourceX = (width - sourceWidth) / 2\n        }\n      }\n    } else {\n      if (options.contain || options.cover) {\n        minWidth = maxWidth = maxWidth || minWidth\n        minHeight = maxHeight = maxHeight || minHeight\n      }\n      if (options.cover) {\n        scaleDown()\n        scaleUp()\n      } else {\n        scaleUp()\n        scaleDown()\n      }\n    }\n    if (useCanvas) {\n      pixelRatio = options.pixelRatio\n      if (\n        pixelRatio > 1 &&\n        // Check if the image has not yet had the device pixel ratio applied:\n        !(\n          img.style.width &&\n          Math.floor(parseFloat(img.style.width, 10)) ===\n            Math.floor(width / pixelRatio)\n        )\n      ) {\n        destWidth *= pixelRatio\n        destHeight *= pixelRatio\n      }\n      // Check if workaround for Chromium orientation crop bug is required:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1074354\n      if (\n        loadImage.orientationCropBug &&\n        !img.getContext &&\n        (sourceX || sourceY || sourceWidth !== width || sourceHeight !== height)\n      ) {\n        // Write the complete source image to an intermediate canvas first:\n        tmp = img\n        // eslint-disable-next-line no-param-reassign\n        img = loadImage.createCanvas(width, height, true)\n        loadImage.drawImage(\n          tmp,\n          img,\n          0,\n          0,\n          width,\n          height,\n          width,\n          height,\n          options\n        )\n      }\n      downsamplingRatio = options.downsamplingRatio\n      if (\n        downsamplingRatio > 0 &&\n        downsamplingRatio < 1 &&\n        destWidth < sourceWidth &&\n        destHeight < sourceHeight\n      ) {\n        while (sourceWidth * downsamplingRatio > destWidth) {\n          canvas = loadImage.createCanvas(\n            sourceWidth * downsamplingRatio,\n            sourceHeight * downsamplingRatio,\n            true\n          )\n          loadImage.drawImage(\n            img,\n            canvas,\n            sourceX,\n            sourceY,\n            sourceWidth,\n            sourceHeight,\n            canvas.width,\n            canvas.height,\n            options\n          )\n          sourceX = 0\n          sourceY = 0\n          sourceWidth = canvas.width\n          sourceHeight = canvas.height\n          // eslint-disable-next-line no-param-reassign\n          img = canvas\n        }\n      }\n      canvas = loadImage.createCanvas(destWidth, destHeight)\n      loadImage.transformCoordinates(canvas, options, data)\n      if (pixelRatio > 1) {\n        canvas.style.width = canvas.width / pixelRatio + 'px'\n      }\n      loadImage\n        .drawImage(\n          img,\n          canvas,\n          sourceX,\n          sourceY,\n          sourceWidth,\n          sourceHeight,\n          destWidth,\n          destHeight,\n          options\n        )\n        .setTransform(1, 0, 0, 1, 0, 0) // reset to the identity matrix\n      return canvas\n    }\n    img.width = destWidth\n    img.height = destHeight\n    return img\n  }\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}