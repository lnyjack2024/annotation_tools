{"ast":null,"code":"import React from'react';import{isEqual}from'lodash';import{checkRunningMode}from'../../utils';import{RunningMode}from'../../types';const DEFAULT_INTERVAL=2*60*1000;// 2 mins\nconst beforeUnload=event=>{event.preventDefault();// eslint-disable-next-line no-param-reassign\nevent.returnValue='';};export default class AutoSaver extends React.Component{constructor(){super(...arguments);this.autoSaveTimer=void 0;this.tempSaved=true;}componentDidMount(){if(checkRunningMode()===RunningMode.IFRAME){this.autoSaveTimer=window.setInterval(async()=>{if(!this.tempSaved){try{await this.props.save();this.setTempSaved(true);if(this.props.onSaved){this.props.onSaved();}}catch(e){// save fail\n}}},this.props.interval||DEFAULT_INTERVAL);}}componentDidUpdate(prevProps){if(this.tempSaved&&!isEqual(prevProps.data,this.props.data)){// when tempSaved is true and data has been changed, need auto save\nthis.setTempSaved(false);}}componentWillUnmount(){if(this.autoSaveTimer){window.clearInterval(this.autoSaveTimer);}this.disableLeaveCheck();}setTempSaved(tempSaved){this.tempSaved=tempSaved;if(this.props.leaveCheck&&checkRunningMode()===RunningMode.IFRAME){if(this.tempSaved){this.disableLeaveCheck();}else{this.enableLeaveCheck();}}}// eslint-disable-next-line class-methods-use-this\ndisableLeaveCheck(){window.removeEventListener('beforeunload',beforeUnload);}// eslint-disable-next-line class-methods-use-this\nenableLeaveCheck(){window.addEventListener('beforeunload',beforeUnload);}render(){return null;}}","map":{"version":3,"names":["React","isEqual","checkRunningMode","RunningMode","DEFAULT_INTERVAL","beforeUnload","event","preventDefault","returnValue","AutoSaver","Component","constructor","arguments","autoSaveTimer","tempSaved","componentDidMount","IFRAME","window","setInterval","props","save","setTempSaved","onSaved","e","interval","componentDidUpdate","prevProps","data","componentWillUnmount","clearInterval","disableLeaveCheck","leaveCheck","enableLeaveCheck","removeEventListener","addEventListener","render"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/AutoSaver.tsx"],"sourcesContent":["import React from 'react';\nimport { isEqual } from 'lodash';\nimport { checkRunningMode } from '../../utils';\nimport { RunningMode } from '../../types';\n\nconst DEFAULT_INTERVAL = 2 * 60 * 1000; // 2 mins\n\ninterface AutoSaverProps {\n  interval?: number;\n  leaveCheck?: boolean;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any;\n  save: () => void;\n  onSaved?: () => void;\n}\n\nconst beforeUnload = (event: BeforeUnloadEvent) => {\n  event.preventDefault();\n  // eslint-disable-next-line no-param-reassign\n  event.returnValue = '';\n};\n\nexport default class AutoSaver extends React.Component<AutoSaverProps> {\n  autoSaveTimer: number | undefined;\n\n  tempSaved = true;\n\n  componentDidMount() {\n    if (checkRunningMode() === RunningMode.IFRAME) {\n      this.autoSaveTimer = window.setInterval(async () => {\n        if (!this.tempSaved) {\n          try {\n            await this.props.save();\n            this.setTempSaved(true);\n            if (this.props.onSaved) {\n              this.props.onSaved();\n            }\n          } catch (e) {\n            // save fail\n          }\n        }\n      }, this.props.interval || DEFAULT_INTERVAL);\n    }\n  }\n\n  componentDidUpdate(prevProps: AutoSaverProps) {\n    if (this.tempSaved && !isEqual(prevProps.data, this.props.data)) {\n      // when tempSaved is true and data has been changed, need auto save\n      this.setTempSaved(false);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.autoSaveTimer) {\n      window.clearInterval(this.autoSaveTimer);\n    }\n    this.disableLeaveCheck();\n  }\n\n  setTempSaved(tempSaved: boolean) {\n    this.tempSaved = tempSaved;\n    if (this.props.leaveCheck && checkRunningMode() === RunningMode.IFRAME) {\n      if (this.tempSaved) {\n        this.disableLeaveCheck();\n      } else {\n        this.enableLeaveCheck();\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  disableLeaveCheck() {\n    window.removeEventListener('beforeunload', beforeUnload);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  enableLeaveCheck() {\n    window.addEventListener('beforeunload', beforeUnload);\n  }\n\n  render() {\n    return null;\n  }\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,OAAO,KAAQ,QAAQ,CAChC,OAASC,gBAAgB,KAAQ,aAAa,CAC9C,OAASC,WAAW,KAAQ,aAAa,CAEzC,KAAM,CAAAC,gBAAgB,CAAG,CAAC,CAAG,EAAE,CAAG,IAAI,CAAE;AAWxC,KAAM,CAAAC,YAAY,CAAIC,KAAwB,EAAK,CACjDA,KAAK,CAACC,cAAc,CAAC,CAAC,CACtB;AACAD,KAAK,CAACE,WAAW,CAAG,EAAE,CACxB,CAAC,CAED,cAAe,MAAM,CAAAC,SAAS,QAAS,CAAAT,KAAK,CAACU,SAA0B,CAAAC,YAAA,WAAAC,SAAA,OACrEC,aAAa,aAEbC,SAAS,CAAG,IAAI,EAEhBC,iBAAiBA,CAAA,CAAG,CAClB,GAAIb,gBAAgB,CAAC,CAAC,GAAKC,WAAW,CAACa,MAAM,CAAE,CAC7C,IAAI,CAACH,aAAa,CAAGI,MAAM,CAACC,WAAW,CAAC,SAAY,CAClD,GAAI,CAAC,IAAI,CAACJ,SAAS,CAAE,CACnB,GAAI,CACF,KAAM,KAAI,CAACK,KAAK,CAACC,IAAI,CAAC,CAAC,CACvB,IAAI,CAACC,YAAY,CAAC,IAAI,CAAC,CACvB,GAAI,IAAI,CAACF,KAAK,CAACG,OAAO,CAAE,CACtB,IAAI,CAACH,KAAK,CAACG,OAAO,CAAC,CAAC,CACtB,CACF,CAAE,MAAOC,CAAC,CAAE,CACV;AAAA,CAEJ,CACF,CAAC,CAAE,IAAI,CAACJ,KAAK,CAACK,QAAQ,EAAIpB,gBAAgB,CAAC,CAC7C,CACF,CAEAqB,kBAAkBA,CAACC,SAAyB,CAAE,CAC5C,GAAI,IAAI,CAACZ,SAAS,EAAI,CAACb,OAAO,CAACyB,SAAS,CAACC,IAAI,CAAE,IAAI,CAACR,KAAK,CAACQ,IAAI,CAAC,CAAE,CAC/D;AACA,IAAI,CAACN,YAAY,CAAC,KAAK,CAAC,CAC1B,CACF,CAEAO,oBAAoBA,CAAA,CAAG,CACrB,GAAI,IAAI,CAACf,aAAa,CAAE,CACtBI,MAAM,CAACY,aAAa,CAAC,IAAI,CAAChB,aAAa,CAAC,CAC1C,CACA,IAAI,CAACiB,iBAAiB,CAAC,CAAC,CAC1B,CAEAT,YAAYA,CAACP,SAAkB,CAAE,CAC/B,IAAI,CAACA,SAAS,CAAGA,SAAS,CAC1B,GAAI,IAAI,CAACK,KAAK,CAACY,UAAU,EAAI7B,gBAAgB,CAAC,CAAC,GAAKC,WAAW,CAACa,MAAM,CAAE,CACtE,GAAI,IAAI,CAACF,SAAS,CAAE,CAClB,IAAI,CAACgB,iBAAiB,CAAC,CAAC,CAC1B,CAAC,IAAM,CACL,IAAI,CAACE,gBAAgB,CAAC,CAAC,CACzB,CACF,CACF,CAEA;AACAF,iBAAiBA,CAAA,CAAG,CAClBb,MAAM,CAACgB,mBAAmB,CAAC,cAAc,CAAE5B,YAAY,CAAC,CAC1D,CAEA;AACA2B,gBAAgBA,CAAA,CAAG,CACjBf,MAAM,CAACiB,gBAAgB,CAAC,cAAc,CAAE7B,YAAY,CAAC,CACvD,CAEA8B,MAAMA,CAAA,CAAG,CACP,MAAO,KAAI,CACb,CACF","ignoreList":[]},"metadata":{},"sourceType":"module"}