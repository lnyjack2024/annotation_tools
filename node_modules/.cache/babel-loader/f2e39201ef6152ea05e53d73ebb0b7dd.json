{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { cloneDeep } from 'lodash';\nimport hexToRgba from 'hex-to-rgba';\nimport Observer from '../utils/observer';\nimport { setStyle } from '../utils';\nimport Cursor from '../../../../common/Cursor';\nimport { colors, SelectBorder } from '../types';\nconst fillOpacity = 0.2;\nexport default class RegionPlugin extends Observer {\n  constructor({\n    container,\n    deviation,\n    disabled: _disabled,\n    dragEnable\n  }) {\n    super();\n    this.name = 'region';\n    /**\n     * wave instance\n     */\n    this.wave = void 0;\n    /**\n    * timeline container\n    */\n    this.container = void 0;\n    /**\n     * drawer\n     */\n    this.drawer = void 0;\n    /**\n    * window pixel ratio\n    */\n    this.pixelRatio = 1;\n    this.deviation = 0;\n    this.canvas = null;\n    this.ctx = null;\n    this.resizeAbled = false;\n    this.selectedId = void 0;\n    this.currentRegionBoundary = [0, 0];\n    this.selectedChannelIndex = -1;\n    this.dragRegion = void 0;\n    this.auditionId = void 0;\n    this.dragTime = void 0;\n    this.regions = {};\n    this.renderRegions = {};\n    this.hoverRegion = void 0;\n    this.resizeBorder = void 0;\n    this.disabled = false;\n    this.dragEnable = true;\n    this.unit = 0;\n    this.isClickRegion = false;\n    this.mouse = {\n      x: 0,\n      y: 0\n    };\n    this.setDisabled = disabled => {\n      this.disabled = disabled;\n      if (this.auditionId) {\n        this.setAuditionId();\n      } else {\n        this.handleRenderRegions();\n      }\n    };\n    this._onReady = () => {\n      this.addCanvas();\n      this.initRegion();\n    };\n    /**\n     * @returns {void}\n     */\n    this._onRedraw = () => {\n      var _this$wave;\n      if (!((_this$wave = this.wave) === null || _this$wave === void 0 ? void 0 : _this$wave.isPlaying())) {\n        this.renderCanvas();\n      }\n    };\n    this.initRegion = () => {\n      if (this.wave) {\n        this.wave.on('mousedown', this.onMousedown);\n        this.wave.on('mousemove', this.onMousemove);\n        this.wave.on('mouseup', this.onMouseUp);\n        this.wave.on('mouseleave', this.onMouseLeave);\n      }\n    };\n    this.onMousedown = (channelIndex, mouse) => {\n      var _this$wave2;\n      this.selectedChannelIndex = channelIndex;\n      this.mouse = mouse;\n      if ((_this$wave2 = this.wave) === null || _this$wave2 === void 0 ? void 0 : _this$wave2.drawer) {\n        this.setCurrentBoundary(channelIndex);\n        this.createRegion(channelIndex);\n      }\n    };\n    this.setCurrentBoundary = channelIndex => {\n      var _this$wave3;\n      if ((_this$wave3 = this.wave) === null || _this$wave3 === void 0 ? void 0 : _this$wave3.drawer) {\n        const {\n          cursorTime\n        } = this.wave.drawer;\n        const sizeRange = [0, this.wave.getDuration()];\n        const regions = this.disabled ? this.renderRegions : this.regions;\n        const channelRegions = Object.values(regions).filter(region => {\n          var _this$hoverRegion;\n          return region.channelIndex === channelIndex && region.id !== ((_this$hoverRegion = this.hoverRegion) === null || _this$hoverRegion === void 0 ? void 0 : _this$hoverRegion.id);\n        });\n        channelRegions.forEach(region => {\n          const left = region.end;\n          const right = region.start;\n          if (left < cursorTime && left > sizeRange[0]) {\n            sizeRange[0] = left;\n          }\n          if (right > cursorTime && right < sizeRange[1]) {\n            sizeRange[1] = right;\n          }\n        });\n        this.currentRegionBoundary = sizeRange;\n      }\n    };\n    this.createRegion = _channelIndex => {\n      var _this$wave4;\n      if ((_this$wave4 = this.wave) === null || _this$wave4 === void 0 ? void 0 : _this$wave4.drawer) {\n        const {\n          cursorTime,\n          channels\n        } = this.wave.drawer;\n        if (this.hoverRegion) {\n          const {\n            channelIndex,\n            audition\n          } = this.hoverRegion;\n          if (!this.disabled || this.disabled && audition) {\n            this.dragRegion = cloneDeep(this.hoverRegion);\n            this.selectedChannelIndex = channelIndex;\n            if (this.resizeBorder) {\n              this.resizeAbled = true;\n            } else {\n              this.dragTime = cursorTime;\n            }\n          }\n        } else {\n          var _channels$_channelInd;\n          this.resizeAbled = true;\n          this.resizeBorder = SelectBorder.RIGHT;\n          this.dragRegion = {\n            id: uuidv4(),\n            channelIndex: _channelIndex,\n            start: cursorTime,\n            end: cursorTime,\n            color: ((_channels$_channelInd = channels[_channelIndex]) === null || _channels$_channelInd === void 0 ? void 0 : _channels$_channelInd.color) || colors[_channelIndex] || '#A1A1A1'\n          };\n          this.hoverRegion = this.dragRegion;\n          // create audition when disabled\n          if (this.disabled) {\n            this.dragRegion.audition = true;\n            this.setAuditionId(this.dragRegion.id);\n          }\n        }\n      }\n    };\n    this.onMousemove = ({\n      cursorTime,\n      channelIndex: _channelIndex\n    }) => {\n      if (this.dragRegion) {\n        if (this.resizeAbled) {\n          this.resizeRegion(cursorTime);\n        }\n        if (this.dragTime !== undefined && this.dragEnable) {\n          this.moveRegion(cursorTime);\n        }\n      } else {\n        var _hoverRegion, _hoverRegion2;\n        let hoverRegion;\n        let resizeBorder;\n        const regions = this.disabled ? this.renderRegions : this.regions;\n        Object.keys(regions).forEach(id => {\n          const {\n            start,\n            end,\n            channelIndex\n          } = regions[id];\n          if (channelIndex === _channelIndex) {\n            const nearLeft = Math.abs((cursorTime - start) * this.unit) <= 3;\n            const nearRight = Math.abs((cursorTime - end) * this.unit) <= 3;\n            if (cursorTime >= start && cursorTime <= end) {\n              hoverRegion = regions[id];\n              if ((nearLeft || nearRight) && id === this.selectedId) {\n                resizeBorder = nearLeft ? SelectBorder.LEFT : SelectBorder.RIGHT;\n              }\n            }\n          }\n        });\n        this.hoverRegion = hoverRegion;\n        this.resizeBorder = resizeBorder;\n        if (!this.disabled && ((_hoverRegion = hoverRegion) === null || _hoverRegion === void 0 ? void 0 : _hoverRegion.audition) !== true || this.disabled && (((_hoverRegion2 = hoverRegion) === null || _hoverRegion2 === void 0 ? void 0 : _hoverRegion2.audition) === true || !hoverRegion)) {\n          let cursor = Cursor.DEFAULT;\n          if (resizeBorder) {\n            cursor = Cursor.COL_RESIZE;\n          } else if (hoverRegion && this.dragEnable) {\n            cursor = Cursor.MOVE;\n          }\n          setStyle(this.container, {\n            cursor\n          });\n        }\n      }\n    };\n    this.getSelectedRegion = () => {\n      const {\n        dragRegion\n      } = this;\n      if (dragRegion) {\n        return this.renderRegions[dragRegion.id];\n      }\n      return undefined;\n    };\n    this.resizeRegion = cursorTime => {\n      if (this.dragRegion && this.resizeAbled) {\n        const {\n          start,\n          end\n        } = this.dragRegion;\n        let selectedRegion = this.getSelectedRegion();\n        if (!selectedRegion) {\n          selectedRegion = cloneDeep(this.dragRegion);\n        }\n        if (cursorTime > this.currentRegionBoundary[0] && cursorTime < this.currentRegionBoundary[1]) {\n          if (this.resizeBorder === SelectBorder.LEFT) {\n            if (cursorTime < end) {\n              selectedRegion.start = cursorTime;\n            } else {\n              selectedRegion.start = end;\n              selectedRegion.end = cursorTime;\n            }\n          } else if (this.resizeBorder === SelectBorder.RIGHT) {\n            if (cursorTime >= start) {\n              selectedRegion.end = cursorTime;\n            } else {\n              selectedRegion.start = cursorTime;\n              selectedRegion.end = start;\n            }\n          }\n          this.updateRegion(selectedRegion.id, selectedRegion);\n        }\n      }\n    };\n    this.moveRegion = cursorTime => {\n      if (this.dragRegion && this.dragTime !== undefined) {\n        const {\n          start,\n          end\n        } = this.dragRegion;\n        const selectedRegion = cloneDeep(this.dragRegion);\n        const moveDuration = cursorTime - this.dragTime;\n        const newStart = start + moveDuration;\n        const newEnd = end + moveDuration;\n        if (newStart >= this.currentRegionBoundary[0] && newStart <= this.currentRegionBoundary[1] && newEnd >= this.currentRegionBoundary[0] && newEnd <= this.currentRegionBoundary[1]) {\n          selectedRegion.start = newStart;\n          selectedRegion.end = newEnd;\n          this.updateRegion(selectedRegion.id, selectedRegion);\n        }\n      }\n    };\n    this.onMouseUp = (e, cursorTime, channelIndex) => {\n      const currentRegion = this.hoverRegion || this.regions[this.selectedId || ''];\n      this.isClickRegion = false;\n      if (currentRegion) {\n        this.isClickRegion = true;\n        const duration = currentRegion.end - currentRegion.start;\n        if (duration < Math.max(2 * this.deviation, 0.1)) {\n          var _this$wave5;\n          this.updateRegion(currentRegion.id);\n          (_this$wave5 = this.wave) === null || _this$wave5 === void 0 ? void 0 : _this$wave5.fireEvent('remove_region', e, currentRegion);\n        }\n        // else if (this.resizeAbled || (this.dragTime && this.dragTime !== cursorTime)) {\n        //   this.wave?.fireEvent('update_region', e, cloneDeep(currentRegion));\n        // }\n        if (currentRegion.audition) this.setAuditionId(currentRegion.id);\n      }\n      const clickRegion = (currentRegion === null || currentRegion === void 0 ? void 0 : currentRegion.start) !== (currentRegion === null || currentRegion === void 0 ? void 0 : currentRegion.end) ? currentRegion : undefined;\n      if (this.dragTime && this.dragTime === cursorTime || this.resizeAbled && !clickRegion || !this.dragTime && !this.resizeAbled) {\n        var _this$wave6;\n        (_this$wave6 = this.wave) === null || _this$wave6 === void 0 ? void 0 : _this$wave6.fireEvent('click_region', e, clickRegion ? cloneDeep(clickRegion) : undefined, channelIndex);\n      }\n      this.onMouseLeave();\n    };\n    this.onMouseLeave = () => {\n      this.dragRegion = undefined;\n      this.resizeAbled = false;\n      this.dragTime = undefined;\n    };\n    this.setSelected = id => {\n      this.selectedId = id;\n      if (this.auditionId && this.auditionId !== id) {\n        this.setAuditionId();\n      } else {\n        this.handleRenderRegions();\n      }\n    };\n    this.setAuditionId = id => {\n      if (id === this.auditionId) return;\n      const region = this.regions[this.auditionId || ''];\n      if (this.auditionId && region) {\n        var _this$wave7;\n        this.updateRegion(this.auditionId);\n        (_this$wave7 = this.wave) === null || _this$wave7 === void 0 ? void 0 : _this$wave7.fireEvent('remove_audition');\n      }\n      this.auditionId = id;\n    };\n    this.updateRegion = (id, region) => {\n      if (region) {\n        var _this$hoverRegion2, _this$wave8;\n        this.regions[id] = region;\n        if (((_this$hoverRegion2 = this.hoverRegion) === null || _this$hoverRegion2 === void 0 ? void 0 : _this$hoverRegion2.id) === region.id) {\n          this.hoverRegion = {\n            ...region\n          };\n        }\n        (_this$wave8 = this.wave) === null || _this$wave8 === void 0 ? void 0 : _this$wave8.fireEvent('update_region', cloneDeep(region));\n      } else if (this.regions[id]) {\n        delete this.regions[id];\n      }\n      this.handleRenderRegions();\n    };\n    this.setRegions = regions => {\n      const newRegions = cloneDeep(this.regions);\n      Object.keys(regions).forEach(id => {\n        const region = regions[id];\n        if (region) {\n          newRegions[id] = {\n            ...region,\n            color: region.color || colors[region.channelIndex] || '#A1A1A1'\n          };\n        } else {\n          delete newRegions[id];\n        }\n      });\n      this.regions = newRegions;\n      this.handleRenderRegions();\n    };\n    this.handleRenderRegions = () => {\n      var _this$wave9;\n      this.renderRegions = cloneDeep(this.regions);\n      if (!((_this$wave9 = this.wave) === null || _this$wave9 === void 0 ? void 0 : _this$wave9.isPlaying())) {\n        this.renderCanvas();\n      }\n    };\n    this.renderCanvas = () => {\n      var _this$wave0;\n      this.resizeCanvas();\n      if (this.ctx && ((_this$wave0 = this.wave) === null || _this$wave0 === void 0 ? void 0 : _this$wave0.drawer)) {\n        const {\n          displayRange,\n          drawer: {\n            waveHeight\n          }\n        } = this.wave;\n        const duration = this.wave.getDuration();\n        const startTime = duration * displayRange.start;\n        const endTime = duration * displayRange.end;\n        const canvasWidth = this.wave.width;\n        this.unit = canvasWidth / (endTime - startTime);\n        // selected region or channel\n        if (this.selectedId) {\n          const region = this.renderRegions[this.selectedId];\n          const drawIndex = this.wave.drawer.drawIndex[region === null || region === void 0 ? void 0 : region.channelIndex];\n          if (drawIndex !== undefined) {\n            this.ctx.lineWidth = 2 * this.pixelRatio;\n            const x = (region.start - startTime) * this.unit;\n            const y = drawIndex * waveHeight;\n            const width = (region.end - region.start) * this.unit;\n            this.ctx.strokeStyle = region.color;\n            this.ctx.strokeRect((x + 1) * this.pixelRatio, (y + 1) * this.pixelRatio, (width - 2) * this.pixelRatio, (waveHeight - 2) * this.pixelRatio);\n          }\n        }\n        this.ctx.lineWidth = 1 * this.pixelRatio;\n        Object.keys(this.renderRegions).forEach(id => {\n          var _this$wave1, _this$wave1$drawer;\n          const {\n            start,\n            end,\n            channelIndex,\n            color\n          } = this.renderRegions[id];\n          const drawIndex = (_this$wave1 = this.wave) === null || _this$wave1 === void 0 ? void 0 : (_this$wave1$drawer = _this$wave1.drawer) === null || _this$wave1$drawer === void 0 ? void 0 : _this$wave1$drawer.drawIndex[channelIndex];\n          if (drawIndex !== undefined && drawIndex >= 0) {\n            const x = (start - startTime) * this.unit;\n            const y = drawIndex * waveHeight;\n            const width = (end - start) * this.unit;\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = color;\n            this.ctx.fillStyle = hexToRgba(color, fillOpacity);\n            this.ctx.fillRect(x * this.pixelRatio, y * this.pixelRatio, width * this.pixelRatio, waveHeight * this.pixelRatio);\n            this.ctx.closePath();\n          }\n        });\n      }\n    };\n    this.container = typeof container === 'string' ? document.querySelector(container) : container;\n    if (!this.container) {\n      throw new Error('No container for wave region');\n    }\n    if (deviation) {\n      this.deviation = deviation;\n    }\n    if (dragEnable !== undefined) {\n      this.dragEnable = dragEnable;\n    }\n    this.setDisabled(_disabled);\n  }\n  init(wave) {\n    const ws = wave;\n    this.wave = ws;\n    this.drawer = ws.drawer;\n    this.pixelRatio = ws.params.pixelRatio;\n    ws.on('draw', this._onRedraw);\n    // Check if ws is ready\n    if (this.wave.isReady) {\n      this._onReady();\n    } else {\n      this.wave.once('ready', this._onReady);\n    }\n  }\n  /**\n   * Add new region canvas\n   *\n   */\n  addCanvas() {\n    const canvas = this.container.appendChild(document.createElement('canvas'));\n    canvas.style.display = 'block';\n    canvas.className = 'wave-region';\n    setStyle(canvas, {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      height: '100%',\n      width: '100%',\n      zIndex: 9,\n      pointerEvents: 'none'\n    });\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n  }\n  resizeCanvas() {\n    if (this.canvas && this.wave) {\n      var _this$wave$drawer;\n      const canvasWidth = this.wave.width;\n      const canvasHeight = ((_this$wave$drawer = this.wave.drawer) === null || _this$wave$drawer === void 0 ? void 0 : _this$wave$drawer.height) || this.wave.height;\n      // set dimensions and style\n      this.canvas.width = canvasWidth * this.pixelRatio;\n      // on certain pixel ratios the canvas appears cut off at the bottom,\n      // therefore leave 1px extra\n      this.canvas.height = canvasHeight * this.pixelRatio;\n    }\n  }\n  destroy() {\n    if (this.wave) {\n      this.wave.un('draw', this._onRedraw);\n      this.wave.un('ready', this._onReady);\n      this.wave.un('mousedown', this.onMousedown);\n      this.wave.un('mousemove', this.onMousemove);\n      this.wave.un('mouseup', this.onMouseUp);\n      this.wave.un('mouseleave', this.onMouseLeave);\n    }\n    if (this.container && this.canvas) {\n      this.container.removeChild(this.canvas);\n    }\n  }\n}\n;","map":{"version":3,"names":["v4","uuidv4","cloneDeep","hexToRgba","Observer","setStyle","Cursor","colors","SelectBorder","fillOpacity","RegionPlugin","constructor","container","deviation","disabled","dragEnable","name","wave","drawer","pixelRatio","canvas","ctx","resizeAbled","selectedId","currentRegionBoundary","selectedChannelIndex","dragRegion","auditionId","dragTime","regions","renderRegions","hoverRegion","resizeBorder","unit","isClickRegion","mouse","x","y","setDisabled","setAuditionId","handleRenderRegions","_onReady","addCanvas","initRegion","_onRedraw","_this$wave","isPlaying","renderCanvas","on","onMousedown","onMousemove","onMouseUp","onMouseLeave","channelIndex","_this$wave2","setCurrentBoundary","createRegion","_this$wave3","cursorTime","sizeRange","getDuration","channelRegions","Object","values","filter","region","_this$hoverRegion","id","forEach","left","end","right","start","_channelIndex","_this$wave4","channels","audition","_channels$_channelInd","RIGHT","color","resizeRegion","undefined","moveRegion","_hoverRegion","_hoverRegion2","keys","nearLeft","Math","abs","nearRight","LEFT","cursor","DEFAULT","COL_RESIZE","MOVE","getSelectedRegion","selectedRegion","updateRegion","moveDuration","newStart","newEnd","e","currentRegion","duration","max","_this$wave5","fireEvent","clickRegion","_this$wave6","setSelected","_this$wave7","_this$hoverRegion2","_this$wave8","setRegions","newRegions","_this$wave9","_this$wave0","resizeCanvas","displayRange","waveHeight","startTime","endTime","canvasWidth","width","drawIndex","lineWidth","strokeStyle","strokeRect","_this$wave1","_this$wave1$drawer","beginPath","fillStyle","fillRect","closePath","document","querySelector","Error","init","ws","params","isReady","once","appendChild","createElement","style","display","className","position","top","height","zIndex","pointerEvents","getContext","_this$wave$drawer","canvasHeight","destroy","un","removeChild"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/common/Wave/Region/index.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { cloneDeep } from 'lodash';\nimport hexToRgba from 'hex-to-rgba';\nimport Wave from '../index';\nimport WaveDrawer from '../waveDrawer';\nimport Observer from '../utils/observer';\nimport { setStyle } from '../utils';\nimport Cursor from '../../../../common/Cursor';\nimport { colors, Region, SelectBorder } from '../types';\n\nconst fillOpacity = 0.2;\n\nexport interface RegionOptions {\n  container: string | HTMLElement;\n  disabled: boolean;\n  dragEnable?: boolean;\n  deviation?: number;\n}\n\nexport default class RegionPlugin extends Observer {\n  name = 'region';\n\n  /**\n   * wave instance\n   */\n  wave?: Wave;\n\n  /**\n  * timeline container\n  */\n  container: HTMLElement;\n\n  /**\n   * drawer\n   */\n  drawer?: WaveDrawer;\n\n  /**\n  * window pixel ratio\n  */\n  pixelRatio = 1;\n\n  deviation = 0;\n\n  canvas: HTMLCanvasElement | null = null;\n\n  ctx: CanvasRenderingContext2D | null = null;\n\n  resizeAbled = false;\n\n  selectedId: string | undefined;\n\n  currentRegionBoundary = [0, 0];\n\n  selectedChannelIndex = -1;\n\n  dragRegion: Region | undefined;\n\n  auditionId?: string;\n\n  dragTime: number | undefined;\n\n  regions: {[key: string]: Region} = {};\n\n  renderRegions: {[key: string]: Region} = {};\n\n  hoverRegion: Region | undefined;\n\n  resizeBorder?: SelectBorder;\n\n  disabled = false;\n\n  dragEnable = true;\n\n  unit = 0;\n\n  isClickRegion = false;\n\n  mouse = { x: 0, y: 0 };\n\n  constructor({ container, deviation, disabled, dragEnable }: RegionOptions) {\n    super();\n\n    this.container = typeof container === 'string'\n      ? document.querySelector(container) as HTMLElement\n      : container;\n\n    if (!this.container) {\n      throw new Error('No container for wave region');\n    }\n    if (deviation) {\n      this.deviation = deviation;\n    }\n    if (dragEnable !== undefined) {\n      this.dragEnable = dragEnable;\n    }\n\n    this.setDisabled(disabled);\n  }\n\n  setDisabled = (disabled: boolean) => {\n    this.disabled = disabled;\n    if (this.auditionId) {\n      this.setAuditionId();\n    } else {\n      this.handleRenderRegions();\n    }\n  };\n\n  init(wave: Wave) {\n    const ws = wave;\n    this.wave = ws;\n    this.drawer = ws.drawer;\n    this.pixelRatio = ws.params.pixelRatio;\n    ws.on('draw', this._onRedraw);\n    // Check if ws is ready\n    if (this.wave.isReady) {\n      this._onReady();\n    } else {\n      this.wave.once('ready', this._onReady);\n    }\n  }\n\n  _onReady = () => {\n    this.addCanvas();\n    this.initRegion();\n  };\n\n  /**\n   * @returns {void}\n   */\n  _onRedraw = () => {\n    if (!this.wave?.isPlaying()) {\n      this.renderCanvas();\n    }\n  };\n\n  /**\n   * Add new region canvas\n   *\n   */\n  addCanvas() {\n    const canvas = this.container.appendChild(\n      document.createElement('canvas')\n    );\n    canvas.style.display = 'block';\n    canvas.className = 'wave-region';\n    setStyle(canvas, {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      height: '100%',\n      width: '100%',\n      zIndex: 9,\n      pointerEvents: 'none',\n    });\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  }\n\n  initRegion = () => {\n    if (this.wave) {\n      this.wave.on('mousedown', this.onMousedown);\n      this.wave.on('mousemove', this.onMousemove);\n      this.wave.on('mouseup', this.onMouseUp);\n      this.wave.on('mouseleave', this.onMouseLeave);\n    }\n  };\n\n  onMousedown = (channelIndex: number, mouse: { x: number, y: number }) => {\n    this.selectedChannelIndex = channelIndex;\n    this.mouse = mouse;\n    if (this.wave?.drawer) {\n      this.setCurrentBoundary(channelIndex);\n      this.createRegion(channelIndex);\n    }\n  };\n\n  setCurrentBoundary = (channelIndex: number) => {\n    if (this.wave?.drawer) {\n      const { cursorTime } = this.wave.drawer;\n      const sizeRange = [0, this.wave.getDuration()];\n      const regions = this.disabled ? this.renderRegions : this.regions;\n      const channelRegions = Object.values(regions).filter((region) => region.channelIndex === channelIndex && region.id !== this.hoverRegion?.id);\n      channelRegions.forEach((region) => {\n        const left = region.end;\n        const right = region.start;\n        if (left < cursorTime && left > sizeRange[0]) {\n          sizeRange[0] = left;\n        }\n        if (right > cursorTime && right < sizeRange[1]) {\n          sizeRange[1] = right;\n        }\n      });\n      this.currentRegionBoundary = sizeRange;\n    }\n  };\n\n  createRegion = (_channelIndex: number) => {\n    if (this.wave?.drawer) {\n      const { cursorTime, channels } = this.wave.drawer;\n      if (this.hoverRegion) {\n        const { channelIndex, audition } = this.hoverRegion;\n        if (!this.disabled || (this.disabled && audition)) {\n          this.dragRegion = cloneDeep(this.hoverRegion);\n          this.selectedChannelIndex = channelIndex;\n          if (this.resizeBorder) {\n            this.resizeAbled = true;\n          } else {\n            this.dragTime = cursorTime;\n          }\n        }\n      } else {\n        this.resizeAbled = true;\n        this.resizeBorder = SelectBorder.RIGHT;\n        this.dragRegion = {\n          id: uuidv4(),\n          channelIndex: _channelIndex,\n          start: cursorTime,\n          end: cursorTime,\n          color: channels[_channelIndex]?.color || colors[_channelIndex] || '#A1A1A1',\n        };\n        this.hoverRegion = this.dragRegion;\n        // create audition when disabled\n        if (this.disabled) {\n          this.dragRegion.audition = true;\n          this.setAuditionId(this.dragRegion.id);\n        }\n      }\n    }\n  };\n\n  onMousemove = ({ cursorTime, channelIndex: _channelIndex }: {\n    cursorTime: number;\n    mouse: {x: number; y: number},\n    channelIndex: number\n  }) => {\n    if (this.dragRegion) {\n      if (this.resizeAbled) {\n        this.resizeRegion(cursorTime);\n      }\n      if (this.dragTime !== undefined && this.dragEnable) {\n        this.moveRegion(cursorTime);\n      }\n    } else {\n      let hoverRegion: Region | undefined;\n      let resizeBorder: SelectBorder | undefined;\n      const regions = this.disabled ? this.renderRegions : this.regions;\n      Object.keys(regions).forEach((id) => {\n        const { start, end, channelIndex } = regions[id];\n        if (channelIndex === _channelIndex) {\n          const nearLeft = Math.abs((cursorTime - start) * this.unit) <= 3;\n          const nearRight = Math.abs((cursorTime - end) * this.unit) <= 3;\n          if (cursorTime >= start && cursorTime <= end) {\n            hoverRegion = regions[id];\n            if (\n              (nearLeft || nearRight) &&\n              id === this.selectedId\n            ) {\n              resizeBorder = nearLeft ? SelectBorder.LEFT : SelectBorder.RIGHT;\n            }\n          }\n        }\n      });\n      this.hoverRegion = hoverRegion;\n      this.resizeBorder = resizeBorder;\n      if ((!this.disabled && (hoverRegion?.audition !== true)) || (this.disabled && (hoverRegion?.audition === true || !hoverRegion))) {\n        let cursor = Cursor.DEFAULT;\n        if (resizeBorder) {\n          cursor = Cursor.COL_RESIZE;\n        } else if (hoverRegion && this.dragEnable) {\n          cursor = Cursor.MOVE;\n        }\n        setStyle(this.container, { cursor });\n      }\n    }\n  };\n\n  getSelectedRegion = () => {\n    const { dragRegion } = this;\n    if (dragRegion) {\n      return this.renderRegions[dragRegion.id];\n    }\n    return undefined;\n  };\n\n  resizeRegion = (cursorTime: number) => {\n    if (this.dragRegion && this.resizeAbled) {\n      const { start, end } = this.dragRegion;\n      let selectedRegion = this.getSelectedRegion();\n      if (!selectedRegion) {\n        selectedRegion = cloneDeep(this.dragRegion);\n      }\n      if (\n        cursorTime > this.currentRegionBoundary[0] &&\n        cursorTime < this.currentRegionBoundary[1]\n      ) {\n        if (this.resizeBorder === SelectBorder.LEFT) {\n          if (cursorTime < end) {\n            selectedRegion.start = cursorTime;\n          } else {\n            selectedRegion.start = end;\n            selectedRegion.end = cursorTime;\n          }\n        } else if (this.resizeBorder === SelectBorder.RIGHT) {\n          if (cursorTime >= start) {\n            selectedRegion.end = cursorTime;\n          } else {\n            selectedRegion.start = cursorTime;\n            selectedRegion.end = start;\n          }\n        }\n        this.updateRegion(selectedRegion.id, selectedRegion);\n      }\n    }\n  };\n\n  moveRegion = (cursorTime: number) => {\n    if (this.dragRegion && this.dragTime !== undefined) {\n      const { start, end } = this.dragRegion;\n      const selectedRegion = cloneDeep(this.dragRegion);\n      const moveDuration = cursorTime - this.dragTime;\n      const newStart = start + moveDuration;\n      const newEnd = end + moveDuration;\n      if (\n        newStart >= this.currentRegionBoundary[0] &&\n        newStart <= this.currentRegionBoundary[1] &&\n        newEnd >= this.currentRegionBoundary[0] &&\n        newEnd <= this.currentRegionBoundary[1]\n      ) {\n        selectedRegion.start = newStart;\n        selectedRegion.end = newEnd;\n        this.updateRegion(selectedRegion.id, selectedRegion);\n      }\n    }\n  };\n\n  onMouseUp = (e: MouseEvent, cursorTime: number, channelIndex: number) => {\n    const currentRegion = this.hoverRegion || this.regions[this.selectedId || ''];\n    this.isClickRegion = false;\n    if (currentRegion) {\n      this.isClickRegion = true;\n      const duration = currentRegion.end - currentRegion.start;\n      if (duration < Math.max(2 * this.deviation, 0.1)) {\n        this.updateRegion(currentRegion.id);\n        this.wave?.fireEvent('remove_region', e, currentRegion);\n      }\n      // else if (this.resizeAbled || (this.dragTime && this.dragTime !== cursorTime)) {\n      //   this.wave?.fireEvent('update_region', e, cloneDeep(currentRegion));\n      // }\n      if (currentRegion.audition) this.setAuditionId(currentRegion.id);\n    }\n\n    const clickRegion = currentRegion?.start !== currentRegion?.end ? currentRegion : undefined;\n    if ((this.dragTime && this.dragTime === cursorTime) || (this.resizeAbled && !clickRegion) || (!this.dragTime && !this.resizeAbled)) {\n      this.wave?.fireEvent('click_region', e, clickRegion ? cloneDeep(clickRegion) : undefined, channelIndex);\n    }\n    this.onMouseLeave();\n  };\n\n  onMouseLeave = () => {\n    this.dragRegion = undefined;\n    this.resizeAbled = false;\n    this.dragTime = undefined;\n  };\n\n  setSelected = (id?: string) => {\n    this.selectedId = id;\n    if (this.auditionId && this.auditionId !== id) {\n      this.setAuditionId();\n    } else {\n      this.handleRenderRegions();\n    }\n  };\n\n  setAuditionId = (id?: string) => {\n    if (id === this.auditionId) return;\n    const region = this.regions[this.auditionId || ''];\n    if (this.auditionId && region) {\n      this.updateRegion(this.auditionId);\n      this.wave?.fireEvent('remove_audition');\n    }\n    this.auditionId = id;\n  };\n\n  resizeCanvas() {\n    if (this.canvas && this.wave) {\n      const canvasWidth = this.wave.width;\n      const canvasHeight = this.wave.drawer?.height || this.wave.height;\n      // set dimensions and style\n      this.canvas.width = canvasWidth * this.pixelRatio;\n      // on certain pixel ratios the canvas appears cut off at the bottom,\n      // therefore leave 1px extra\n      this.canvas.height = canvasHeight * this.pixelRatio;\n    }\n  }\n\n  updateRegion = (id: string, region?: Region) => {\n    if (region) {\n      this.regions[id] = region;\n      if (this.hoverRegion?.id === region.id) {\n        this.hoverRegion = { ...region };\n      }\n      this.wave?.fireEvent('update_region', cloneDeep(region));\n    } else if (this.regions[id]) {\n      delete this.regions[id];\n    }\n    this.handleRenderRegions();\n  };\n\n  setRegions = (regions: {[id:string]: Region | null}) => {\n    const newRegions = cloneDeep(this.regions);\n    Object.keys(regions).forEach((id) => {\n      const region = regions[id];\n      if (region) {\n        newRegions[id] = {\n          ...region,\n          color: region.color || colors[region.channelIndex] || '#A1A1A1',\n        };\n      } else {\n        delete newRegions[id];\n      }\n    });\n    this.regions = newRegions;\n    this.handleRenderRegions();\n  };\n\n  handleRenderRegions = () => {\n    this.renderRegions = cloneDeep(this.regions);\n    if (!this.wave?.isPlaying()) {\n      this.renderCanvas();\n    }\n  };\n\n  renderCanvas = () => {\n    this.resizeCanvas();\n    if (this.ctx && this.wave?.drawer) {\n      const { displayRange, drawer: { waveHeight } } = this.wave;\n      const duration = this.wave.getDuration();\n      const startTime = duration * displayRange.start;\n      const endTime = duration * displayRange.end;\n      const canvasWidth = this.wave.width;\n      this.unit = canvasWidth / (endTime - startTime);\n      // selected region or channel\n      if (this.selectedId) {\n        const region = this.renderRegions[this.selectedId];\n        const drawIndex = this.wave.drawer.drawIndex[region?.channelIndex];\n        if (drawIndex !== undefined) {\n          this.ctx.lineWidth = 2 * this.pixelRatio;\n          const x = (region.start - startTime) * this.unit;\n          const y = drawIndex * waveHeight;\n          const width = (region.end - region.start) * this.unit;\n          this.ctx!.strokeStyle = region.color;\n          this.ctx!.strokeRect((x + 1) * this.pixelRatio, (y + 1) * this.pixelRatio, (width - 2) * this.pixelRatio, (waveHeight - 2) * this.pixelRatio);\n        }\n      }\n      this.ctx.lineWidth = 1 * this.pixelRatio;\n      Object.keys(this.renderRegions).forEach((id) => {\n        const { start, end, channelIndex, color } = this.renderRegions[id];\n        const drawIndex = this.wave?.drawer?.drawIndex[channelIndex];\n        if (drawIndex !== undefined && drawIndex >= 0) {\n          const x = (start - startTime) * this.unit;\n          const y = drawIndex * waveHeight;\n          const width = (end - start) * this.unit;\n          this.ctx!.beginPath();\n          this.ctx!.strokeStyle = color;\n          this.ctx!.fillStyle = hexToRgba(color, fillOpacity);\n          this.ctx!.fillRect(x * this.pixelRatio, y * this.pixelRatio, width * this.pixelRatio, waveHeight * this.pixelRatio);\n          this.ctx!.closePath();\n        }\n      });\n    }\n  };\n\n  destroy() {\n    if (this.wave) {\n      this.wave.un('draw', this._onRedraw);\n      this.wave.un('ready', this._onReady);\n      this.wave.un('mousedown', this.onMousedown);\n      this.wave.un('mousemove', this.onMousemove);\n      this.wave.un('mouseup', this.onMouseUp);\n      this.wave.un('mouseleave', this.onMouseLeave);\n    }\n    if (this.container && this.canvas) {\n      this.container.removeChild(this.canvas);\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}