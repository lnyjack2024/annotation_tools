{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nimport i18n from '../locales';\nimport { ViewMode } from '../types';\nimport { REJECT_ALL_REVIEW_ID } from '../constants';\nimport ReviewItem from '../model/ReviewItem';\nimport { ShapeType } from '../../common/shapes/types';\nimport { Plane } from '../../../libs/nifti/NIFTIParser';\nconst STACK_SIZE = 20;\n;\n/**\n * undo & redo store\n * @class\n */\nexport default class UndoStore {\n  /**\n   * is undo disabled\n   * @getter\n   */\n  get undoDisabled() {\n    return this.pointer <= 0;\n  }\n\n  /**\n   * is redo disabled\n   * @getter\n   */\n  get redoDisabled() {\n    return this.pointer >= this.stack.length;\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * current pointer\n     */\n    this.pointer = 0;\n    /**\n     * last stored data uuid\n     */\n    this.lastStoreId = '';\n    /**\n     * saved status\n     */\n    this.stack = [];\n    /**\n     * current data uuid\n     */\n    this.storeId = '';\n    /**\n     * saved data copy\n     */\n    this.savedData = {};\n    makeAutoObservable(this, {\n      rootStore: false,\n      stack: false,\n      storeId: false,\n      savedData: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * preserve current data\n   * @param data\n   */\n  preserve(data = {}) {\n    this.storeId = uuidv4();\n    this.savedData = cloneDeep(data);\n    return this.storeId;\n  }\n\n  /**\n   * save to stack\n   * @param uid\n   * @param data\n   */\n  save(uid, data = {}) {\n    if (uid === this.storeId) {\n      // same command\n      this.stack = this.stack.slice(0, this.pointer);\n      this.stack.push({\n        before: this.savedData,\n        after: cloneDeep(data)\n      });\n      if (this.stack.length > STACK_SIZE) {\n        this.stack.shift();\n      } else {\n        this.pointer += 1;\n      }\n      this.lastStoreId = uid;\n    }\n    this.storeId = '';\n    this.savedData = {};\n  }\n\n  /**\n   * push state by prev & curr state\n   * @param prevState\n   * @param currState\n   */\n  push(prevState, currState) {\n    this.stack = this.stack.slice(0, this.pointer);\n    this.stack.push({\n      before: cloneDeep(prevState),\n      after: cloneDeep(currState)\n    });\n    if (this.stack.length > STACK_SIZE) {\n      this.stack.shift();\n    } else {\n      this.pointer += 1;\n    }\n    this.lastStoreId = uuidv4();\n  }\n\n  /**\n   * undo\n   */\n  undo() {\n    if (this.undoDisabled || this.rootStore.config.isAnyModalOpened || this.rootStore.shape.isDrawing) {\n      return;\n    }\n    if (this.pointer > 0) {\n      this.pointer -= 1;\n      const item = this.stack[this.pointer];\n      if (item && item.before) {\n        this.updateData(item.before, item.after);\n        message.success(i18n.translate('UNDO_SUCCESS'));\n      }\n    }\n  }\n\n  /**\n   * redo\n   */\n  redo() {\n    if (this.redoDisabled || this.rootStore.config.isAnyModalOpened || this.rootStore.shape.isDrawing) {\n      return;\n    }\n    if (this.pointer < this.stack.length) {\n      this.pointer += 1;\n      const item = this.stack[this.pointer - 1];\n      if (item && item.after) {\n        this.updateData(item.after, item.before);\n        message.success(i18n.translate('REDO_SUCCESS'));\n      }\n    }\n  }\n\n  /**\n   * update data (used for undo / redo)\n   * @param curr\n   * @param prev\n   */\n  updateData(curr, prev) {\n    var _prev$frames, _curr$frames, _prev$instances, _curr$instances, _prev$reviews, _curr$reviews, _prev$relationships, _curr$relationships, _prev$attributes, _prev$attributes$fram, _curr$attributes, _curr$attributes$fram;\n    const {\n      selectedInstances,\n      selectedInstanceItems,\n      getInstanceById,\n      deleteInstance,\n      deleteInstanceItem,\n      createInstanceFromData\n    } = this.rootStore.instance;\n    const {\n      getShapeByInstanceItem,\n      deleteShape,\n      setupShape,\n      getShapesForCamera\n    } = this.rootStore.shape;\n    const {\n      currentFrame,\n      currentCamera,\n      cameraViews,\n      getFrameRotationForCamera,\n      getImageBoundsForCamera\n    } = this.rootStore.frame;\n    const {\n      update: updatePixelInfo\n    } = this.rootStore.segmentation;\n    const selectedInstanceMap = {};\n    selectedInstances.forEach(instance => {\n      selectedInstanceMap[instance.id] = selectedInstanceItems.filter(i => i.instance === instance).map(i => i.id);\n    });\n    this.rootStore.cancelShapeWorking();\n    (_prev$frames = prev.frames) === null || _prev$frames === void 0 ? void 0 : _prev$frames.forEach(affectedCamera => {\n      const {\n        camera,\n        frames\n      } = affectedCamera;\n      if (this.rootStore.frame.attributes[camera]) {\n        frames.forEach(({\n          frameIndex\n        }) => {\n          delete this.rootStore.frame.attributes[camera][frameIndex];\n        });\n      }\n    });\n    (_curr$frames = curr.frames) === null || _curr$frames === void 0 ? void 0 : _curr$frames.forEach(affectedCamera => {\n      const {\n        camera,\n        frames\n      } = affectedCamera;\n      if (!this.rootStore.frame.attributes[camera]) {\n        this.rootStore.frame.attributes[camera] = {};\n      }\n      frames.forEach(({\n        frameIndex,\n        ...attributes\n      }) => {\n        this.rootStore.frame.attributes[camera][frameIndex] = {\n          frameIndex,\n          ...attributes\n        };\n      });\n    });\n    const isGridView = this.rootStore.config.viewMode === ViewMode.GRID;\n    (_prev$instances = prev.instances) === null || _prev$instances === void 0 ? void 0 : _prev$instances.forEach(affectedInstance => {\n      if (affectedInstance) {\n        const instance = getInstanceById(affectedInstance.id);\n        if (instance) {\n          affectedInstance.children.forEach(affectedItem => {\n            const item = instance.items[affectedItem.id];\n            if (item) {\n              affectedItem.cameras.forEach(affectedCamera => {\n                const camera = item.cameras[affectedCamera.camera];\n                if (camera) {\n                  // delete frame\n                  affectedCamera.frames.forEach(affectedFrame => {\n                    if (affectedFrame.frameIndex === currentFrame) {\n                      // update pixel info\n                      if (affectedFrame.shapeType === ShapeType.PIXEL && camera.camera === currentCamera) {\n                        updatePixelInfo(item, affectedFrame.layer);\n                      }\n                      // remove shapes if needed\n                      if (!isGridView) {\n                        const shape = getShapeByInstanceItem(item, camera.camera);\n                        if (shape) {\n                          deleteShape(shape);\n                        }\n                      }\n                    }\n                    // delete frame data\n                    delete camera.frames[affectedFrame.frameIndex];\n                  });\n                  // 更新 nifti store (当前仅在axial变化时生效)\n                  if (camera.camera === Plane.AXIAL) {\n                    var _this$rootStore$nifti;\n                    (_this$rootStore$nifti = this.rootStore.nifti) === null || _this$rootStore$nifti === void 0 ? void 0 : _this$rootStore$nifti.updateShape(item, affectedCamera.frames.map(f => f.frameIndex));\n                  }\n                  // delete camera if needed\n                  if (camera.isEmpty) {\n                    delete item.cameras[camera.camera];\n                  }\n                  // delete instance item if needed\n                  if (item.isEmpty) {\n                    deleteInstanceItem(item);\n                  }\n                  // delete instance if needed\n                  if (instance.isEmpty) {\n                    deleteInstance(instance);\n                  }\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n    (_curr$instances = curr.instances) === null || _curr$instances === void 0 ? void 0 : _curr$instances.forEach(affectedInstance => {\n      if (affectedInstance) {\n        const instance = getInstanceById(affectedInstance.id);\n        if (instance) {\n          instance.attributes = cloneDeep(affectedInstance.attributes);\n          instance.setDynamicAttributes(affectedInstance.dynamicAttributes);\n          affectedInstance.children.forEach(affectedItem => {\n            const item = instance.items[affectedItem.id];\n            if (item) {\n              affectedItem.cameras.forEach(affectedCamera => {\n                const camera = item.cameras[affectedCamera.camera];\n                if (camera) {\n                  // update frame\n                  affectedCamera.frames.forEach(affectedFrame => {\n                    camera.createFrameFromData(affectedFrame);\n                  });\n                } else {\n                  // no camera, create\n                  item.createCameraFromData(affectedCamera);\n                  this.rootStore.relationship.setupRelationshipsForInstanceItem(item, affectedCamera.camera);\n                }\n                // readd shape\n                if (!isGridView) {\n                  setupShape(item, affectedCamera.camera);\n                }\n                // 更新 nifti store (当前仅在axial变化时生效)\n                if (camera.camera === Plane.AXIAL) {\n                  var _this$rootStore$nifti2;\n                  (_this$rootStore$nifti2 = this.rootStore.nifti) === null || _this$rootStore$nifti2 === void 0 ? void 0 : _this$rootStore$nifti2.updateShape(item, affectedCamera.frames.map(f => f.frameIndex));\n                }\n                // update pixel info\n                // ***** MUST DO PIXEL INFO UPDATE AFTER SETUP SHAPE *****\n                // ***** ensure get exact shape instance in update func *****\n                if (affectedCamera.camera === currentCamera) {\n                  var _item$cameras$affecte;\n                  const currentFrameData = (_item$cameras$affecte = item.cameras[affectedCamera.camera]) === null || _item$cameras$affecte === void 0 ? void 0 : _item$cameras$affecte.frames[currentFrame];\n                  if ((currentFrameData === null || currentFrameData === void 0 ? void 0 : currentFrameData.shapeType) === ShapeType.PIXEL) {\n                    updatePixelInfo(item, currentFrameData.layer, currentFrameData.shape);\n                  }\n                }\n              });\n            } else {\n              // no instance item, create\n              instance.createItemFromData(affectedItem);\n              const createdItem = instance.items[affectedItem.id];\n              this.rootStore.relationship.setupRelationshipsForInstanceItem(createdItem);\n              // readd shapes\n              if (!isGridView) {\n                affectedItem.cameras.forEach(affectedCamera => {\n                  setupShape(createdItem, affectedCamera.camera);\n                });\n              }\n              // 更新 nifti store (当前仅在axial变化时生效)\n              const axialCameraData = affectedItem.cameras.find(c => c.camera === Plane.AXIAL);\n              if (axialCameraData) {\n                var _this$rootStore$nifti3;\n                (_this$rootStore$nifti3 = this.rootStore.nifti) === null || _this$rootStore$nifti3 === void 0 ? void 0 : _this$rootStore$nifti3.updateShape(item, axialCameraData.frames.map(f => f.frameIndex));\n              }\n              // update pixel info\n              const currentCameraData = affectedItem.cameras.find(c => c.camera === currentCamera);\n              const currentFrameData = currentCameraData === null || currentCameraData === void 0 ? void 0 : currentCameraData.frames.find(f => f.frameIndex === currentFrame);\n              if ((currentFrameData === null || currentFrameData === void 0 ? void 0 : currentFrameData.shapeType) === ShapeType.PIXEL) {\n                updatePixelInfo(createdItem, currentFrameData.layer, currentFrameData.shape);\n              }\n            }\n          });\n          if (instance.number !== affectedInstance.number) {\n            instance.number = affectedInstance.number;\n            Object.values(instance.items).forEach(item => {\n              Object.keys(item.cameras).forEach(camera => {\n                setupShape(item, camera);\n              });\n            });\n          }\n        } else {\n          // no instance, create\n          createInstanceFromData(affectedInstance);\n          const createdInstance = getInstanceById(affectedInstance.id);\n          if (createdInstance.isEmpty) {\n            deleteInstance(createdInstance);\n          } else {\n            affectedInstance.children.forEach(affectedItem => {\n              const item = createdInstance.items[affectedItem.id];\n              this.rootStore.relationship.setupRelationshipsForInstanceItem(item);\n              // readd shapes\n              if (!isGridView) {\n                affectedItem.cameras.forEach(affectedCamera => {\n                  setupShape(item, affectedCamera.camera);\n                });\n              }\n              // 更新 nifti store (当前仅在axial变化时生效)\n              const axialCameraData = affectedItem.cameras.find(c => c.camera === Plane.AXIAL);\n              if (axialCameraData) {\n                var _this$rootStore$nifti4;\n                (_this$rootStore$nifti4 = this.rootStore.nifti) === null || _this$rootStore$nifti4 === void 0 ? void 0 : _this$rootStore$nifti4.updateShape(item, axialCameraData.frames.map(f => f.frameIndex));\n              }\n              // update pixel info\n              const currentCameraData = affectedItem.cameras.find(c => c.camera === currentCamera);\n              const currentFrameData = currentCameraData === null || currentCameraData === void 0 ? void 0 : currentCameraData.frames.find(f => f.frameIndex === currentFrame);\n              if ((currentFrameData === null || currentFrameData === void 0 ? void 0 : currentFrameData.shapeType) === ShapeType.PIXEL) {\n                updatePixelInfo(item, currentFrameData.layer, currentFrameData.shape);\n              }\n            });\n          }\n        }\n      }\n    });\n    (_prev$reviews = prev.reviews) === null || _prev$reviews === void 0 ? void 0 : _prev$reviews.forEach(affectedReview => {\n      const {\n        id,\n        frameIndex\n      } = affectedReview;\n      if (id === REJECT_ALL_REVIEW_ID) {\n        this.rootStore.review.rejectAllReview = null;\n        return;\n      }\n      const frameReviews = this.rootStore.review.reviews[frameIndex] || [];\n      const index = frameReviews.findIndex(r => r.id === id);\n      if (index >= 0) {\n        frameReviews.splice(index, 1);\n      }\n      const {\n        anchor\n      } = this.rootStore.review.anchors[id] || {};\n      if (anchor) {\n        delete this.rootStore.review.anchors[id];\n        anchor.destroy();\n      }\n    });\n    (_curr$reviews = curr.reviews) === null || _curr$reviews === void 0 ? void 0 : _curr$reviews.forEach(affectedReview => {\n      const {\n        id,\n        frameIndex,\n        camera\n      } = affectedReview;\n      if (id === REJECT_ALL_REVIEW_ID) {\n        this.rootStore.review.rejectAllReview = new ReviewItem(affectedReview);\n        return;\n      }\n      const review = new ReviewItem(affectedReview);\n      if (!this.rootStore.review.reviews[frameIndex]) {\n        this.rootStore.review.reviews[frameIndex] = [];\n      }\n      this.rootStore.review.reviews[frameIndex].push(review);\n      if (frameIndex === currentFrame && this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        const cameraView = this.rootStore.frame.cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.rootStore.review.createReviewAnchor(review.result, review.x, review.y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.rootStore.review.anchors[review.id] = {\n              anchor,\n              camera\n            };\n          }\n        }\n      }\n    });\n    (_prev$relationships = prev.relationships) === null || _prev$relationships === void 0 ? void 0 : _prev$relationships.forEach(affectedRelationship => {\n      const relationship = this.rootStore.relationship.relationships.find(r => r.id === affectedRelationship.id);\n      if (relationship) {\n        this.rootStore.relationship.deleteRelationship(relationship);\n        this.rootStore.relationship.deleteConnection(relationship);\n      }\n    });\n    (_curr$relationships = curr.relationships) === null || _curr$relationships === void 0 ? void 0 : _curr$relationships.forEach(affectedRelationship => {\n      this.rootStore.relationship.createRelationship(affectedRelationship);\n      const relationship = this.rootStore.relationship.relationships.find(r => r.id === affectedRelationship.id);\n      if (relationship && relationship.frames[currentFrame]) {\n        this.rootStore.relationship.createConnection(relationship);\n      }\n    });\n    (_prev$attributes = prev.attributes) === null || _prev$attributes === void 0 ? void 0 : (_prev$attributes$fram = _prev$attributes.frames) === null || _prev$attributes$fram === void 0 ? void 0 : _prev$attributes$fram.forEach(affectedFrame => {\n      const {\n        frameIndex\n      } = affectedFrame;\n      delete this.rootStore.frame.frameAttributes[frameIndex];\n    });\n    (_curr$attributes = curr.attributes) === null || _curr$attributes === void 0 ? void 0 : (_curr$attributes$fram = _curr$attributes.frames) === null || _curr$attributes$fram === void 0 ? void 0 : _curr$attributes$fram.forEach(affectedFrame => {\n      const {\n        frameIndex,\n        attributes\n      } = affectedFrame;\n      this.rootStore.frame.frameAttributes[frameIndex] = cloneDeep(attributes);\n    });\n\n    // update camera views rotation\n    Object.keys(cameraViews).forEach(camera => {\n      const view = cameraViews[camera];\n      const rotation = getFrameRotationForCamera(camera, currentFrame);\n      if (rotation !== view.imageRotation) {\n        view.imageRotation = rotation;\n        view.rotate();\n        this.rootStore.shape.reprojectShapesByCamera(camera);\n      }\n      if (this.rootStore.config.boundaryCheck) {\n        const imageBounds = getImageBoundsForCamera(camera, currentFrame);\n        getShapesForCamera(camera).forEach(({\n          shape\n        }) => {\n          shape.bounds = imageBounds;\n        });\n      }\n    });\n\n    // reselect instance or instance item\n    if (Object.keys(selectedInstanceMap).length > 0) {\n      const instances = [];\n      const instanceItems = [];\n      Object.keys(selectedInstanceMap).forEach(instanceId => {\n        const instance = getInstanceById(instanceId);\n        if (instance) {\n          instances.push(instance);\n          const itemIds = selectedInstanceMap[instanceId];\n          Object.values(instance.items).forEach(item => {\n            if (itemIds.includes(item.id)) {\n              instanceItems.push(item);\n            }\n          });\n        }\n      });\n      if (instanceItems.length > 0) {\n        this.rootStore.instance.selectInstanceItem(instanceItems, false, false);\n      } else if (instances.length > 0) {\n        this.rootStore.instance.selectInstance(instances);\n      }\n    }\n    this.rootStore.shape.predict();\n\n    // reselect review item\n    if (this.rootStore.review.selectedReviewId) {\n      const review = this.rootStore.review.allReviews.find(r => r.id === this.rootStore.review.selectedReviewId);\n      if (review) {\n        if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n          const {\n            anchor\n          } = this.rootStore.review.anchors[review.id] || {};\n          if (anchor) {\n            this.rootStore.review.selectReview(review, anchor);\n          }\n        }\n      }\n    }\n    this.rootStore.filter.filterInstances();\n  }\n}","map":{"version":3,"names":["makeAutoObservable","v4","uuidv4","cloneDeep","message","i18n","ViewMode","REJECT_ALL_REVIEW_ID","ReviewItem","ShapeType","Plane","STACK_SIZE","UndoStore","undoDisabled","pointer","redoDisabled","stack","length","constructor","rootStore","lastStoreId","storeId","savedData","autoBind","preserve","data","save","uid","slice","push","before","after","shift","prevState","currState","undo","config","isAnyModalOpened","shape","isDrawing","item","updateData","success","translate","redo","curr","prev","_prev$frames","_curr$frames","_prev$instances","_curr$instances","_prev$reviews","_curr$reviews","_prev$relationships","_curr$relationships","_prev$attributes","_prev$attributes$fram","_curr$attributes","_curr$attributes$fram","selectedInstances","selectedInstanceItems","getInstanceById","deleteInstance","deleteInstanceItem","createInstanceFromData","instance","getShapeByInstanceItem","deleteShape","setupShape","getShapesForCamera","currentFrame","currentCamera","cameraViews","getFrameRotationForCamera","getImageBoundsForCamera","frame","update","updatePixelInfo","segmentation","selectedInstanceMap","forEach","id","filter","i","map","cancelShapeWorking","frames","affectedCamera","camera","attributes","frameIndex","isGridView","viewMode","GRID","instances","affectedInstance","children","affectedItem","items","cameras","affectedFrame","shapeType","PIXEL","layer","AXIAL","_this$rootStore$nifti","nifti","updateShape","f","isEmpty","setDynamicAttributes","dynamicAttributes","createFrameFromData","createCameraFromData","relationship","setupRelationshipsForInstanceItem","_this$rootStore$nifti2","_item$cameras$affecte","currentFrameData","createItemFromData","createdItem","axialCameraData","find","c","_this$rootStore$nifti3","currentCameraData","number","Object","values","keys","createdInstance","_this$rootStore$nifti4","reviews","affectedReview","review","rejectAllReview","frameReviews","index","findIndex","r","splice","anchor","anchors","destroy","DEFAULT","cameraView","reviewLayer","createReviewAnchor","result","x","y","viewScale","relationships","affectedRelationship","deleteRelationship","deleteConnection","createRelationship","createConnection","frameAttributes","view","rotation","imageRotation","rotate","reprojectShapesByCamera","boundaryCheck","imageBounds","bounds","instanceItems","instanceId","itemIds","includes","selectInstanceItem","selectInstance","predict","selectedReviewId","allReviews","selectReview","filterInstances"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/UndoStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nimport RootStore from './RootStore';\nimport i18n from '../locales';\nimport { Instance, Review, CameraFrameAttributes, Relationship, ViewMode, Attributes } from '../types';\nimport { REJECT_ALL_REVIEW_ID } from '../constants';\nimport ReviewItem from '../model/ReviewItem';\nimport MInstance from '../model/Instance';\nimport MInstanceItem from '../model/InstanceItem';\nimport { ShapeType } from '../../common/shapes/types';\nimport { PixelData } from '../../common/shapes/Pixel';\nimport { Plane } from '../../../libs/nifti/NIFTIParser';\n\nconst STACK_SIZE = 20;\n\nexport interface StoreData {\n  // for instances\n  instances?: Instance[];\n  // for reviews\n  reviews?: Review[];\n  // for frame attributes\n  frames?: CameraFrameAttributes[];\n  // for relationships\n  relationships?: Relationship[];\n  // for attributes\n  attributes?: Attributes;\n};\n\ninterface StoreItem {\n  before: StoreData;\n  after: StoreData;\n}\n\n/**\n * undo & redo store\n * @class\n */\nexport default class UndoStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * current pointer\n   */\n  pointer = 0;\n\n  /**\n   * last stored data uuid\n   */\n  lastStoreId = '';\n\n  /**\n   * saved status\n   */\n  stack: StoreItem[] = [];\n\n  /**\n   * current data uuid\n   */\n  storeId = '';\n\n  /**\n   * saved data copy\n   */\n  savedData: StoreData = {};\n\n  /**\n   * is undo disabled\n   * @getter\n   */\n  get undoDisabled() {\n    return this.pointer <= 0;\n  }\n\n  /**\n   * is redo disabled\n   * @getter\n   */\n  get redoDisabled() {\n    return this.pointer >= this.stack.length;\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      stack: false,\n      storeId: false,\n      savedData: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * preserve current data\n   * @param data\n   */\n  preserve(data: StoreData = {}) {\n    this.storeId = uuidv4();\n    this.savedData = cloneDeep(data);\n    return this.storeId;\n  }\n\n  /**\n   * save to stack\n   * @param uid\n   * @param data\n   */\n  save(uid: string, data: StoreData = {}) {\n    if (uid === this.storeId) { // same command\n      this.stack = this.stack.slice(0, this.pointer);\n      this.stack.push({\n        before: this.savedData,\n        after: cloneDeep(data),\n      });\n      if (this.stack.length > STACK_SIZE) {\n        this.stack.shift();\n      } else {\n        this.pointer += 1;\n      }\n      this.lastStoreId = uid;\n    }\n    this.storeId = '';\n    this.savedData = {};\n  }\n\n  /**\n   * push state by prev & curr state\n   * @param prevState\n   * @param currState\n   */\n  push(prevState: StoreData, currState: StoreData) {\n    this.stack = this.stack.slice(0, this.pointer);\n    this.stack.push({\n      before: cloneDeep(prevState),\n      after: cloneDeep(currState),\n    });\n    if (this.stack.length > STACK_SIZE) {\n      this.stack.shift();\n    } else {\n      this.pointer += 1;\n    }\n    this.lastStoreId = uuidv4();\n  }\n\n  /**\n   * undo\n   */\n  undo() {\n    if (this.undoDisabled || this.rootStore.config.isAnyModalOpened || this.rootStore.shape.isDrawing) {\n      return;\n    }\n    if (this.pointer > 0) {\n      this.pointer -= 1;\n      const item = this.stack[this.pointer];\n      if (item && item.before) {\n        this.updateData(item.before, item.after);\n        message.success(i18n.translate('UNDO_SUCCESS'));\n      }\n    }\n  }\n\n  /**\n   * redo\n   */\n  redo() {\n    if (this.redoDisabled || this.rootStore.config.isAnyModalOpened || this.rootStore.shape.isDrawing) {\n      return;\n    }\n    if (this.pointer < this.stack.length) {\n      this.pointer += 1;\n      const item = this.stack[this.pointer - 1];\n      if (item && item.after) {\n        this.updateData(item.after, item.before);\n        message.success(i18n.translate('REDO_SUCCESS'));\n      }\n    }\n  }\n\n  /**\n   * update data (used for undo / redo)\n   * @param curr\n   * @param prev\n   */\n  updateData(curr: StoreData, prev: StoreData) {\n    const {\n      selectedInstances,\n      selectedInstanceItems,\n      getInstanceById,\n      deleteInstance,\n      deleteInstanceItem,\n      createInstanceFromData,\n    } = this.rootStore.instance;\n    const {\n      getShapeByInstanceItem,\n      deleteShape,\n      setupShape,\n      getShapesForCamera,\n    } = this.rootStore.shape;\n    const {\n      currentFrame,\n      currentCamera,\n      cameraViews,\n      getFrameRotationForCamera,\n      getImageBoundsForCamera,\n    } = this.rootStore.frame;\n    const { update: updatePixelInfo } = this.rootStore.segmentation;\n    const selectedInstanceMap: { [instanceId: string]: string[] } = {};\n    selectedInstances.forEach((instance) => {\n      selectedInstanceMap[instance.id] = selectedInstanceItems.filter((i) => i.instance === instance).map((i) => i.id);\n    });\n\n    this.rootStore.cancelShapeWorking();\n\n    prev.frames?.forEach((affectedCamera) => {\n      const { camera, frames } = affectedCamera;\n      if (this.rootStore.frame.attributes[camera]) {\n        frames.forEach(({ frameIndex }) => {\n          delete this.rootStore.frame.attributes[camera][frameIndex];\n        });\n      }\n    });\n    curr.frames?.forEach((affectedCamera) => {\n      const { camera, frames } = affectedCamera;\n      if (!this.rootStore.frame.attributes[camera]) {\n        this.rootStore.frame.attributes[camera] = {};\n      }\n      frames.forEach(({ frameIndex, ...attributes }) => {\n        this.rootStore.frame.attributes[camera][frameIndex] = { frameIndex, ...attributes };\n      });\n    });\n\n    const isGridView = this.rootStore.config.viewMode === ViewMode.GRID;\n    prev.instances?.forEach((affectedInstance) => {\n      if (affectedInstance) {\n        const instance = getInstanceById(affectedInstance.id);\n        if (instance) {\n          affectedInstance.children.forEach((affectedItem) => {\n            const item = instance.items[affectedItem.id];\n            if (item) {\n              affectedItem.cameras.forEach((affectedCamera) => {\n                const camera = item.cameras[affectedCamera.camera];\n                if (camera) {\n                  // delete frame\n                  affectedCamera.frames.forEach((affectedFrame) => {\n                    if (affectedFrame.frameIndex === currentFrame) {\n                      // update pixel info\n                      if (affectedFrame.shapeType === ShapeType.PIXEL && camera.camera === currentCamera) {\n                        updatePixelInfo(item, affectedFrame.layer);\n                      }\n                      // remove shapes if needed\n                      if (!isGridView) {\n                        const shape = getShapeByInstanceItem(item, camera.camera);\n                        if (shape) {\n                          deleteShape(shape);\n                        }\n                      }\n                    }\n                    // delete frame data\n                    delete camera.frames[affectedFrame.frameIndex];\n                  });\n                  // 更新 nifti store (当前仅在axial变化时生效)\n                  if (camera.camera === Plane.AXIAL) {\n                    this.rootStore.nifti?.updateShape(item, affectedCamera.frames.map((f) => f.frameIndex));\n                  }\n                  // delete camera if needed\n                  if (camera.isEmpty) {\n                    delete item.cameras[camera.camera];\n                  }\n                  // delete instance item if needed\n                  if (item.isEmpty) {\n                    deleteInstanceItem(item);\n                  }\n                  // delete instance if needed\n                  if (instance.isEmpty) {\n                    deleteInstance(instance);\n                  }\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n    curr.instances?.forEach((affectedInstance) => {\n      if (affectedInstance) {\n        const instance = getInstanceById(affectedInstance.id);\n        if (instance) {\n          instance.attributes = cloneDeep(affectedInstance.attributes);\n          instance.setDynamicAttributes(affectedInstance.dynamicAttributes);\n          affectedInstance.children.forEach((affectedItem) => {\n            const item = instance.items[affectedItem.id];\n            if (item) {\n              affectedItem.cameras.forEach((affectedCamera) => {\n                const camera = item.cameras[affectedCamera.camera];\n                if (camera) {\n                  // update frame\n                  affectedCamera.frames.forEach((affectedFrame) => {\n                    camera.createFrameFromData(affectedFrame);\n                  });\n                } else {\n                  // no camera, create\n                  item.createCameraFromData(affectedCamera);\n                  this.rootStore.relationship.setupRelationshipsForInstanceItem(item, affectedCamera.camera);\n                }\n                // readd shape\n                if (!isGridView) {\n                  setupShape(item, affectedCamera.camera);\n                }\n                // 更新 nifti store (当前仅在axial变化时生效)\n                if (camera.camera === Plane.AXIAL) {\n                  this.rootStore.nifti?.updateShape(item, affectedCamera.frames.map((f) => f.frameIndex));\n                }\n                // update pixel info\n                // ***** MUST DO PIXEL INFO UPDATE AFTER SETUP SHAPE *****\n                // ***** ensure get exact shape instance in update func *****\n                if (affectedCamera.camera === currentCamera) {\n                  const currentFrameData = item.cameras[affectedCamera.camera]?.frames[currentFrame];\n                  if (currentFrameData?.shapeType === ShapeType.PIXEL) {\n                    updatePixelInfo(item, currentFrameData.layer, currentFrameData.shape as PixelData);\n                  }\n                }\n              });\n            } else {\n              // no instance item, create\n              instance.createItemFromData(affectedItem);\n              const createdItem = instance.items[affectedItem.id];\n              this.rootStore.relationship.setupRelationshipsForInstanceItem(createdItem);\n              // readd shapes\n              if (!isGridView) {\n                affectedItem.cameras.forEach((affectedCamera) => {\n                  setupShape(createdItem, affectedCamera.camera);\n                });\n              }\n              // 更新 nifti store (当前仅在axial变化时生效)\n              const axialCameraData = affectedItem.cameras.find((c) => c.camera === Plane.AXIAL);\n              if (axialCameraData) {\n                this.rootStore.nifti?.updateShape(item, axialCameraData.frames.map((f) => f.frameIndex));\n              }\n              // update pixel info\n              const currentCameraData = affectedItem.cameras.find((c) => c.camera === currentCamera);\n              const currentFrameData = currentCameraData?.frames.find((f) => f.frameIndex === currentFrame);\n              if (currentFrameData?.shapeType === ShapeType.PIXEL) {\n                updatePixelInfo(createdItem, currentFrameData.layer, currentFrameData.shape as PixelData);\n              }\n            }\n          });\n          if (instance.number !== affectedInstance.number) {\n            instance.number = affectedInstance.number;\n            Object.values(instance.items).forEach((item) => {\n              Object.keys(item.cameras).forEach((camera) => {\n                setupShape(item, camera);\n              });\n            });\n          }\n        } else {\n          // no instance, create\n          createInstanceFromData(affectedInstance);\n          const createdInstance = getInstanceById(affectedInstance.id);\n          if (createdInstance.isEmpty) {\n            deleteInstance(createdInstance);\n          } else {\n            affectedInstance.children.forEach((affectedItem) => {\n              const item = createdInstance.items[affectedItem.id];\n              this.rootStore.relationship.setupRelationshipsForInstanceItem(item);\n              // readd shapes\n              if (!isGridView) {\n                affectedItem.cameras.forEach((affectedCamera) => {\n                  setupShape(item, affectedCamera.camera);\n                });\n              }\n              // 更新 nifti store (当前仅在axial变化时生效)\n              const axialCameraData = affectedItem.cameras.find((c) => c.camera === Plane.AXIAL);\n              if (axialCameraData) {\n                this.rootStore.nifti?.updateShape(item, axialCameraData.frames.map((f) => f.frameIndex));\n              }\n              // update pixel info\n              const currentCameraData = affectedItem.cameras.find((c) => c.camera === currentCamera);\n              const currentFrameData = currentCameraData?.frames.find((f) => f.frameIndex === currentFrame);\n              if (currentFrameData?.shapeType === ShapeType.PIXEL) {\n                updatePixelInfo(item, currentFrameData.layer, currentFrameData.shape as PixelData);\n              }\n            });\n          }\n        }\n      }\n    });\n\n    prev.reviews?.forEach((affectedReview) => {\n      const { id, frameIndex } = affectedReview;\n      if (id === REJECT_ALL_REVIEW_ID) {\n        this.rootStore.review.rejectAllReview = null;\n        return;\n      }\n      const frameReviews = this.rootStore.review.reviews[frameIndex] || [];\n      const index = frameReviews.findIndex((r) => r.id === id);\n      if (index >= 0) {\n        frameReviews.splice(index, 1);\n      }\n      const { anchor } = this.rootStore.review.anchors[id] || {};\n      if (anchor) {\n        delete this.rootStore.review.anchors[id];\n        anchor.destroy();\n      }\n    });\n    curr.reviews?.forEach((affectedReview) => {\n      const { id, frameIndex, camera } = affectedReview;\n      if (id === REJECT_ALL_REVIEW_ID) {\n        this.rootStore.review.rejectAllReview = new ReviewItem(affectedReview);\n        return;\n      }\n      const review = new ReviewItem(affectedReview);\n      if (!this.rootStore.review.reviews[frameIndex]) {\n        this.rootStore.review.reviews[frameIndex] = [];\n      }\n      this.rootStore.review.reviews[frameIndex].push(review);\n      if (frameIndex === currentFrame && this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        const cameraView = this.rootStore.frame.cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.rootStore.review.createReviewAnchor(review.result, review.x, review.y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.rootStore.review.anchors[review.id] = {\n              anchor,\n              camera,\n            };\n          }\n        }\n      }\n    });\n\n    prev.relationships?.forEach((affectedRelationship) => {\n      const relationship = this.rootStore.relationship.relationships.find((r) => r.id === affectedRelationship.id);\n      if (relationship) {\n        this.rootStore.relationship.deleteRelationship(relationship);\n        this.rootStore.relationship.deleteConnection(relationship);\n      }\n    });\n    curr.relationships?.forEach((affectedRelationship) => {\n      this.rootStore.relationship.createRelationship(affectedRelationship);\n      const relationship = this.rootStore.relationship.relationships.find((r) => r.id === affectedRelationship.id);\n      if (relationship && relationship.frames[currentFrame]) {\n        this.rootStore.relationship.createConnection(relationship);\n      }\n    });\n\n    prev.attributes?.frames?.forEach((affectedFrame) => {\n      const { frameIndex } = affectedFrame;\n      delete this.rootStore.frame.frameAttributes[frameIndex];\n    });\n    curr.attributes?.frames?.forEach((affectedFrame) => {\n      const { frameIndex, attributes } = affectedFrame;\n      this.rootStore.frame.frameAttributes[frameIndex] = cloneDeep(attributes);\n    });\n\n    // update camera views rotation\n    Object.keys(cameraViews).forEach((camera) => {\n      const view = cameraViews[camera];\n      const rotation = getFrameRotationForCamera(camera, currentFrame);\n      if (rotation !== view.imageRotation) {\n        view.imageRotation = rotation;\n        view.rotate();\n        this.rootStore.shape.reprojectShapesByCamera(camera);\n      }\n      if (this.rootStore.config.boundaryCheck) {\n        const imageBounds = getImageBoundsForCamera(camera, currentFrame);\n        getShapesForCamera(camera).forEach(({ shape }) => {\n          shape.bounds = imageBounds;\n        });\n      }\n    });\n\n    // reselect instance or instance item\n    if (Object.keys(selectedInstanceMap).length > 0) {\n      const instances: MInstance[] = [];\n      const instanceItems: MInstanceItem[] = [];\n      Object.keys(selectedInstanceMap).forEach((instanceId) => {\n        const instance = getInstanceById(instanceId);\n        if (instance) {\n          instances.push(instance);\n          const itemIds = selectedInstanceMap[instanceId];\n          Object.values(instance.items).forEach((item) => {\n            if (itemIds.includes(item.id)) {\n              instanceItems.push(item);\n            }\n          });\n        }\n      });\n      if (instanceItems.length > 0) {\n        this.rootStore.instance.selectInstanceItem(instanceItems, false, false);\n      } else if (instances.length > 0) {\n        this.rootStore.instance.selectInstance(instances);\n      }\n    }\n    this.rootStore.shape.predict();\n\n    // reselect review item\n    if (this.rootStore.review.selectedReviewId) {\n      const review = this.rootStore.review.allReviews.find((r) => r.id === this.rootStore.review.selectedReviewId);\n      if (review) {\n        if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n          const { anchor } = this.rootStore.review.anchors[review.id] || {};\n          if (anchor) {\n            this.rootStore.review.selectReview(review, anchor);\n          }\n        }\n      }\n    }\n\n    this.rootStore.filter.filterInstances();\n  };\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,OAAO,QAAQ,MAAM;AAE9B,OAAOC,IAAI,MAAM,YAAY;AAC7B,SAAgEC,QAAQ,QAAoB,UAAU;AACtG,SAASC,oBAAoB,QAAQ,cAAc;AACnD,OAAOC,UAAU,MAAM,qBAAqB;AAG5C,SAASC,SAAS,QAAQ,2BAA2B;AAErD,SAASC,KAAK,QAAQ,iCAAiC;AAEvD,MAAMC,UAAU,GAAG,EAAE;AAapB;AAOD;AACA;AACA;AACA;AACA,eAAe,MAAMC,SAAS,CAAC;EA+B7B;AACF;AACA;AACA;EACE,IAAIC,YAAYA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACC,OAAO,IAAI,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;EACE,IAAIC,YAAYA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACD,OAAO,IAAI,IAAI,CAACE,KAAK,CAACC,MAAM;EAC1C;EAEAC,WAAWA,CAACC,SAA2B,EAAE;IA9CzC;AACF;AACA;IAFE,KAGAA,SAAS;IAET;AACF;AACA;IAFE,KAGAL,OAAO,GAAG,CAAC;IAEX;AACF;AACA;IAFE,KAGAM,WAAW,GAAG,EAAE;IAEhB;AACF;AACA;IAFE,KAGAJ,KAAK,GAAgB,EAAE;IAEvB;AACF;AACA;IAFE,KAGAK,OAAO,GAAG,EAAE;IAEZ;AACF;AACA;IAFE,KAGAC,SAAS,GAAc,CAAC,CAAC;IAmBvBtB,kBAAkB,CAAC,IAAI,EAAE;MACvBmB,SAAS,EAAE,KAAK;MAChBH,KAAK,EAAE,KAAK;MACZK,OAAO,EAAE,KAAK;MACdC,SAAS,EAAE;IACb,CAAC,EAAE;MACDC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,IAAI,CAACJ,SAAS,GAAGA,SAAS;EAC5B;;EAEA;AACF;AACA;AACA;EACEK,QAAQA,CAACC,IAAe,GAAG,CAAC,CAAC,EAAE;IAC7B,IAAI,CAACJ,OAAO,GAAGnB,MAAM,CAAC,CAAC;IACvB,IAAI,CAACoB,SAAS,GAAGnB,SAAS,CAACsB,IAAI,CAAC;IAChC,OAAO,IAAI,CAACJ,OAAO;EACrB;;EAEA;AACF;AACA;AACA;AACA;EACEK,IAAIA,CAACC,GAAW,EAAEF,IAAe,GAAG,CAAC,CAAC,EAAE;IACtC,IAAIE,GAAG,KAAK,IAAI,CAACN,OAAO,EAAE;MAAE;MAC1B,IAAI,CAACL,KAAK,GAAG,IAAI,CAACA,KAAK,CAACY,KAAK,CAAC,CAAC,EAAE,IAAI,CAACd,OAAO,CAAC;MAC9C,IAAI,CAACE,KAAK,CAACa,IAAI,CAAC;QACdC,MAAM,EAAE,IAAI,CAACR,SAAS;QACtBS,KAAK,EAAE5B,SAAS,CAACsB,IAAI;MACvB,CAAC,CAAC;MACF,IAAI,IAAI,CAACT,KAAK,CAACC,MAAM,GAAGN,UAAU,EAAE;QAClC,IAAI,CAACK,KAAK,CAACgB,KAAK,CAAC,CAAC;MACpB,CAAC,MAAM;QACL,IAAI,CAAClB,OAAO,IAAI,CAAC;MACnB;MACA,IAAI,CAACM,WAAW,GAAGO,GAAG;IACxB;IACA,IAAI,CAACN,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;EACEO,IAAIA,CAACI,SAAoB,EAAEC,SAAoB,EAAE;IAC/C,IAAI,CAAClB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACY,KAAK,CAAC,CAAC,EAAE,IAAI,CAACd,OAAO,CAAC;IAC9C,IAAI,CAACE,KAAK,CAACa,IAAI,CAAC;MACdC,MAAM,EAAE3B,SAAS,CAAC8B,SAAS,CAAC;MAC5BF,KAAK,EAAE5B,SAAS,CAAC+B,SAAS;IAC5B,CAAC,CAAC;IACF,IAAI,IAAI,CAAClB,KAAK,CAACC,MAAM,GAAGN,UAAU,EAAE;MAClC,IAAI,CAACK,KAAK,CAACgB,KAAK,CAAC,CAAC;IACpB,CAAC,MAAM;MACL,IAAI,CAAClB,OAAO,IAAI,CAAC;IACnB;IACA,IAAI,CAACM,WAAW,GAAGlB,MAAM,CAAC,CAAC;EAC7B;;EAEA;AACF;AACA;EACEiC,IAAIA,CAAA,EAAG;IACL,IAAI,IAAI,CAACtB,YAAY,IAAI,IAAI,CAACM,SAAS,CAACiB,MAAM,CAACC,gBAAgB,IAAI,IAAI,CAAClB,SAAS,CAACmB,KAAK,CAACC,SAAS,EAAE;MACjG;IACF;IACA,IAAI,IAAI,CAACzB,OAAO,GAAG,CAAC,EAAE;MACpB,IAAI,CAACA,OAAO,IAAI,CAAC;MACjB,MAAM0B,IAAI,GAAG,IAAI,CAACxB,KAAK,CAAC,IAAI,CAACF,OAAO,CAAC;MACrC,IAAI0B,IAAI,IAAIA,IAAI,CAACV,MAAM,EAAE;QACvB,IAAI,CAACW,UAAU,CAACD,IAAI,CAACV,MAAM,EAAEU,IAAI,CAACT,KAAK,CAAC;QACxC3B,OAAO,CAACsC,OAAO,CAACrC,IAAI,CAACsC,SAAS,CAAC,cAAc,CAAC,CAAC;MACjD;IACF;EACF;;EAEA;AACF;AACA;EACEC,IAAIA,CAAA,EAAG;IACL,IAAI,IAAI,CAAC7B,YAAY,IAAI,IAAI,CAACI,SAAS,CAACiB,MAAM,CAACC,gBAAgB,IAAI,IAAI,CAAClB,SAAS,CAACmB,KAAK,CAACC,SAAS,EAAE;MACjG;IACF;IACA,IAAI,IAAI,CAACzB,OAAO,GAAG,IAAI,CAACE,KAAK,CAACC,MAAM,EAAE;MACpC,IAAI,CAACH,OAAO,IAAI,CAAC;MACjB,MAAM0B,IAAI,GAAG,IAAI,CAACxB,KAAK,CAAC,IAAI,CAACF,OAAO,GAAG,CAAC,CAAC;MACzC,IAAI0B,IAAI,IAAIA,IAAI,CAACT,KAAK,EAAE;QACtB,IAAI,CAACU,UAAU,CAACD,IAAI,CAACT,KAAK,EAAES,IAAI,CAACV,MAAM,CAAC;QACxC1B,OAAO,CAACsC,OAAO,CAACrC,IAAI,CAACsC,SAAS,CAAC,cAAc,CAAC,CAAC;MACjD;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEF,UAAUA,CAACI,IAAe,EAAEC,IAAe,EAAE;IAAA,IAAAC,YAAA,EAAAC,YAAA,EAAAC,eAAA,EAAAC,eAAA,EAAAC,aAAA,EAAAC,aAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IAC3C,MAAM;MACJC,iBAAiB;MACjBC,qBAAqB;MACrBC,eAAe;MACfC,cAAc;MACdC,kBAAkB;MAClBC;IACF,CAAC,GAAG,IAAI,CAAC7C,SAAS,CAAC8C,QAAQ;IAC3B,MAAM;MACJC,sBAAsB;MACtBC,WAAW;MACXC,UAAU;MACVC;IACF,CAAC,GAAG,IAAI,CAAClD,SAAS,CAACmB,KAAK;IACxB,MAAM;MACJgC,YAAY;MACZC,aAAa;MACbC,WAAW;MACXC,yBAAyB;MACzBC;IACF,CAAC,GAAG,IAAI,CAACvD,SAAS,CAACwD,KAAK;IACxB,MAAM;MAAEC,MAAM,EAAEC;IAAgB,CAAC,GAAG,IAAI,CAAC1D,SAAS,CAAC2D,YAAY;IAC/D,MAAMC,mBAAuD,GAAG,CAAC,CAAC;IAClEpB,iBAAiB,CAACqB,OAAO,CAAEf,QAAQ,IAAK;MACtCc,mBAAmB,CAACd,QAAQ,CAACgB,EAAE,CAAC,GAAGrB,qBAAqB,CAACsB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAClB,QAAQ,KAAKA,QAAQ,CAAC,CAACmB,GAAG,CAAED,CAAC,IAAKA,CAAC,CAACF,EAAE,CAAC;IAClH,CAAC,CAAC;IAEF,IAAI,CAAC9D,SAAS,CAACkE,kBAAkB,CAAC,CAAC;IAEnC,CAAAtC,YAAA,GAAAD,IAAI,CAACwC,MAAM,cAAAvC,YAAA,uBAAXA,YAAA,CAAaiC,OAAO,CAAEO,cAAc,IAAK;MACvC,MAAM;QAAEC,MAAM;QAAEF;MAAO,CAAC,GAAGC,cAAc;MACzC,IAAI,IAAI,CAACpE,SAAS,CAACwD,KAAK,CAACc,UAAU,CAACD,MAAM,CAAC,EAAE;QAC3CF,MAAM,CAACN,OAAO,CAAC,CAAC;UAAEU;QAAW,CAAC,KAAK;UACjC,OAAO,IAAI,CAACvE,SAAS,CAACwD,KAAK,CAACc,UAAU,CAACD,MAAM,CAAC,CAACE,UAAU,CAAC;QAC5D,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IACF,CAAA1C,YAAA,GAAAH,IAAI,CAACyC,MAAM,cAAAtC,YAAA,uBAAXA,YAAA,CAAagC,OAAO,CAAEO,cAAc,IAAK;MACvC,MAAM;QAAEC,MAAM;QAAEF;MAAO,CAAC,GAAGC,cAAc;MACzC,IAAI,CAAC,IAAI,CAACpE,SAAS,CAACwD,KAAK,CAACc,UAAU,CAACD,MAAM,CAAC,EAAE;QAC5C,IAAI,CAACrE,SAAS,CAACwD,KAAK,CAACc,UAAU,CAACD,MAAM,CAAC,GAAG,CAAC,CAAC;MAC9C;MACAF,MAAM,CAACN,OAAO,CAAC,CAAC;QAAEU,UAAU;QAAE,GAAGD;MAAW,CAAC,KAAK;QAChD,IAAI,CAACtE,SAAS,CAACwD,KAAK,CAACc,UAAU,CAACD,MAAM,CAAC,CAACE,UAAU,CAAC,GAAG;UAAEA,UAAU;UAAE,GAAGD;QAAW,CAAC;MACrF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAME,UAAU,GAAG,IAAI,CAACxE,SAAS,CAACiB,MAAM,CAACwD,QAAQ,KAAKtF,QAAQ,CAACuF,IAAI;IACnE,CAAA5C,eAAA,GAAAH,IAAI,CAACgD,SAAS,cAAA7C,eAAA,uBAAdA,eAAA,CAAgB+B,OAAO,CAAEe,gBAAgB,IAAK;MAC5C,IAAIA,gBAAgB,EAAE;QACpB,MAAM9B,QAAQ,GAAGJ,eAAe,CAACkC,gBAAgB,CAACd,EAAE,CAAC;QACrD,IAAIhB,QAAQ,EAAE;UACZ8B,gBAAgB,CAACC,QAAQ,CAAChB,OAAO,CAAEiB,YAAY,IAAK;YAClD,MAAMzD,IAAI,GAAGyB,QAAQ,CAACiC,KAAK,CAACD,YAAY,CAAChB,EAAE,CAAC;YAC5C,IAAIzC,IAAI,EAAE;cACRyD,YAAY,CAACE,OAAO,CAACnB,OAAO,CAAEO,cAAc,IAAK;gBAC/C,MAAMC,MAAM,GAAGhD,IAAI,CAAC2D,OAAO,CAACZ,cAAc,CAACC,MAAM,CAAC;gBAClD,IAAIA,MAAM,EAAE;kBACV;kBACAD,cAAc,CAACD,MAAM,CAACN,OAAO,CAAEoB,aAAa,IAAK;oBAC/C,IAAIA,aAAa,CAACV,UAAU,KAAKpB,YAAY,EAAE;sBAC7C;sBACA,IAAI8B,aAAa,CAACC,SAAS,KAAK5F,SAAS,CAAC6F,KAAK,IAAId,MAAM,CAACA,MAAM,KAAKjB,aAAa,EAAE;wBAClFM,eAAe,CAACrC,IAAI,EAAE4D,aAAa,CAACG,KAAK,CAAC;sBAC5C;sBACA;sBACA,IAAI,CAACZ,UAAU,EAAE;wBACf,MAAMrD,KAAK,GAAG4B,sBAAsB,CAAC1B,IAAI,EAAEgD,MAAM,CAACA,MAAM,CAAC;wBACzD,IAAIlD,KAAK,EAAE;0BACT6B,WAAW,CAAC7B,KAAK,CAAC;wBACpB;sBACF;oBACF;oBACA;oBACA,OAAOkD,MAAM,CAACF,MAAM,CAACc,aAAa,CAACV,UAAU,CAAC;kBAChD,CAAC,CAAC;kBACF;kBACA,IAAIF,MAAM,CAACA,MAAM,KAAK9E,KAAK,CAAC8F,KAAK,EAAE;oBAAA,IAAAC,qBAAA;oBACjC,CAAAA,qBAAA,OAAI,CAACtF,SAAS,CAACuF,KAAK,cAAAD,qBAAA,uBAApBA,qBAAA,CAAsBE,WAAW,CAACnE,IAAI,EAAE+C,cAAc,CAACD,MAAM,CAACF,GAAG,CAAEwB,CAAC,IAAKA,CAAC,CAAClB,UAAU,CAAC,CAAC;kBACzF;kBACA;kBACA,IAAIF,MAAM,CAACqB,OAAO,EAAE;oBAClB,OAAOrE,IAAI,CAAC2D,OAAO,CAACX,MAAM,CAACA,MAAM,CAAC;kBACpC;kBACA;kBACA,IAAIhD,IAAI,CAACqE,OAAO,EAAE;oBAChB9C,kBAAkB,CAACvB,IAAI,CAAC;kBAC1B;kBACA;kBACA,IAAIyB,QAAQ,CAAC4C,OAAO,EAAE;oBACpB/C,cAAc,CAACG,QAAQ,CAAC;kBAC1B;gBACF;cACF,CAAC,CAAC;YACJ;UACF,CAAC,CAAC;QACJ;MACF;IACF,CAAC,CAAC;IACF,CAAAf,eAAA,GAAAL,IAAI,CAACiD,SAAS,cAAA5C,eAAA,uBAAdA,eAAA,CAAgB8B,OAAO,CAAEe,gBAAgB,IAAK;MAC5C,IAAIA,gBAAgB,EAAE;QACpB,MAAM9B,QAAQ,GAAGJ,eAAe,CAACkC,gBAAgB,CAACd,EAAE,CAAC;QACrD,IAAIhB,QAAQ,EAAE;UACZA,QAAQ,CAACwB,UAAU,GAAGtF,SAAS,CAAC4F,gBAAgB,CAACN,UAAU,CAAC;UAC5DxB,QAAQ,CAAC6C,oBAAoB,CAACf,gBAAgB,CAACgB,iBAAiB,CAAC;UACjEhB,gBAAgB,CAACC,QAAQ,CAAChB,OAAO,CAAEiB,YAAY,IAAK;YAClD,MAAMzD,IAAI,GAAGyB,QAAQ,CAACiC,KAAK,CAACD,YAAY,CAAChB,EAAE,CAAC;YAC5C,IAAIzC,IAAI,EAAE;cACRyD,YAAY,CAACE,OAAO,CAACnB,OAAO,CAAEO,cAAc,IAAK;gBAC/C,MAAMC,MAAM,GAAGhD,IAAI,CAAC2D,OAAO,CAACZ,cAAc,CAACC,MAAM,CAAC;gBAClD,IAAIA,MAAM,EAAE;kBACV;kBACAD,cAAc,CAACD,MAAM,CAACN,OAAO,CAAEoB,aAAa,IAAK;oBAC/CZ,MAAM,CAACwB,mBAAmB,CAACZ,aAAa,CAAC;kBAC3C,CAAC,CAAC;gBACJ,CAAC,MAAM;kBACL;kBACA5D,IAAI,CAACyE,oBAAoB,CAAC1B,cAAc,CAAC;kBACzC,IAAI,CAACpE,SAAS,CAAC+F,YAAY,CAACC,iCAAiC,CAAC3E,IAAI,EAAE+C,cAAc,CAACC,MAAM,CAAC;gBAC5F;gBACA;gBACA,IAAI,CAACG,UAAU,EAAE;kBACfvB,UAAU,CAAC5B,IAAI,EAAE+C,cAAc,CAACC,MAAM,CAAC;gBACzC;gBACA;gBACA,IAAIA,MAAM,CAACA,MAAM,KAAK9E,KAAK,CAAC8F,KAAK,EAAE;kBAAA,IAAAY,sBAAA;kBACjC,CAAAA,sBAAA,OAAI,CAACjG,SAAS,CAACuF,KAAK,cAAAU,sBAAA,uBAApBA,sBAAA,CAAsBT,WAAW,CAACnE,IAAI,EAAE+C,cAAc,CAACD,MAAM,CAACF,GAAG,CAAEwB,CAAC,IAAKA,CAAC,CAAClB,UAAU,CAAC,CAAC;gBACzF;gBACA;gBACA;gBACA;gBACA,IAAIH,cAAc,CAACC,MAAM,KAAKjB,aAAa,EAAE;kBAAA,IAAA8C,qBAAA;kBAC3C,MAAMC,gBAAgB,IAAAD,qBAAA,GAAG7E,IAAI,CAAC2D,OAAO,CAACZ,cAAc,CAACC,MAAM,CAAC,cAAA6B,qBAAA,uBAAnCA,qBAAA,CAAqC/B,MAAM,CAAChB,YAAY,CAAC;kBAClF,IAAI,CAAAgD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEjB,SAAS,MAAK5F,SAAS,CAAC6F,KAAK,EAAE;oBACnDzB,eAAe,CAACrC,IAAI,EAAE8E,gBAAgB,CAACf,KAAK,EAAEe,gBAAgB,CAAChF,KAAkB,CAAC;kBACpF;gBACF;cACF,CAAC,CAAC;YACJ,CAAC,MAAM;cACL;cACA2B,QAAQ,CAACsD,kBAAkB,CAACtB,YAAY,CAAC;cACzC,MAAMuB,WAAW,GAAGvD,QAAQ,CAACiC,KAAK,CAACD,YAAY,CAAChB,EAAE,CAAC;cACnD,IAAI,CAAC9D,SAAS,CAAC+F,YAAY,CAACC,iCAAiC,CAACK,WAAW,CAAC;cAC1E;cACA,IAAI,CAAC7B,UAAU,EAAE;gBACfM,YAAY,CAACE,OAAO,CAACnB,OAAO,CAAEO,cAAc,IAAK;kBAC/CnB,UAAU,CAACoD,WAAW,EAAEjC,cAAc,CAACC,MAAM,CAAC;gBAChD,CAAC,CAAC;cACJ;cACA;cACA,MAAMiC,eAAe,GAAGxB,YAAY,CAACE,OAAO,CAACuB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACnC,MAAM,KAAK9E,KAAK,CAAC8F,KAAK,CAAC;cAClF,IAAIiB,eAAe,EAAE;gBAAA,IAAAG,sBAAA;gBACnB,CAAAA,sBAAA,OAAI,CAACzG,SAAS,CAACuF,KAAK,cAAAkB,sBAAA,uBAApBA,sBAAA,CAAsBjB,WAAW,CAACnE,IAAI,EAAEiF,eAAe,CAACnC,MAAM,CAACF,GAAG,CAAEwB,CAAC,IAAKA,CAAC,CAAClB,UAAU,CAAC,CAAC;cAC1F;cACA;cACA,MAAMmC,iBAAiB,GAAG5B,YAAY,CAACE,OAAO,CAACuB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACnC,MAAM,KAAKjB,aAAa,CAAC;cACtF,MAAM+C,gBAAgB,GAAGO,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEvC,MAAM,CAACoC,IAAI,CAAEd,CAAC,IAAKA,CAAC,CAAClB,UAAU,KAAKpB,YAAY,CAAC;cAC7F,IAAI,CAAAgD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEjB,SAAS,MAAK5F,SAAS,CAAC6F,KAAK,EAAE;gBACnDzB,eAAe,CAAC2C,WAAW,EAAEF,gBAAgB,CAACf,KAAK,EAAEe,gBAAgB,CAAChF,KAAkB,CAAC;cAC3F;YACF;UACF,CAAC,CAAC;UACF,IAAI2B,QAAQ,CAAC6D,MAAM,KAAK/B,gBAAgB,CAAC+B,MAAM,EAAE;YAC/C7D,QAAQ,CAAC6D,MAAM,GAAG/B,gBAAgB,CAAC+B,MAAM;YACzCC,MAAM,CAACC,MAAM,CAAC/D,QAAQ,CAACiC,KAAK,CAAC,CAAClB,OAAO,CAAExC,IAAI,IAAK;cAC9CuF,MAAM,CAACE,IAAI,CAACzF,IAAI,CAAC2D,OAAO,CAAC,CAACnB,OAAO,CAAEQ,MAAM,IAAK;gBAC5CpB,UAAU,CAAC5B,IAAI,EAAEgD,MAAM,CAAC;cAC1B,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ;QACF,CAAC,MAAM;UACL;UACAxB,sBAAsB,CAAC+B,gBAAgB,CAAC;UACxC,MAAMmC,eAAe,GAAGrE,eAAe,CAACkC,gBAAgB,CAACd,EAAE,CAAC;UAC5D,IAAIiD,eAAe,CAACrB,OAAO,EAAE;YAC3B/C,cAAc,CAACoE,eAAe,CAAC;UACjC,CAAC,MAAM;YACLnC,gBAAgB,CAACC,QAAQ,CAAChB,OAAO,CAAEiB,YAAY,IAAK;cAClD,MAAMzD,IAAI,GAAG0F,eAAe,CAAChC,KAAK,CAACD,YAAY,CAAChB,EAAE,CAAC;cACnD,IAAI,CAAC9D,SAAS,CAAC+F,YAAY,CAACC,iCAAiC,CAAC3E,IAAI,CAAC;cACnE;cACA,IAAI,CAACmD,UAAU,EAAE;gBACfM,YAAY,CAACE,OAAO,CAACnB,OAAO,CAAEO,cAAc,IAAK;kBAC/CnB,UAAU,CAAC5B,IAAI,EAAE+C,cAAc,CAACC,MAAM,CAAC;gBACzC,CAAC,CAAC;cACJ;cACA;cACA,MAAMiC,eAAe,GAAGxB,YAAY,CAACE,OAAO,CAACuB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACnC,MAAM,KAAK9E,KAAK,CAAC8F,KAAK,CAAC;cAClF,IAAIiB,eAAe,EAAE;gBAAA,IAAAU,sBAAA;gBACnB,CAAAA,sBAAA,OAAI,CAAChH,SAAS,CAACuF,KAAK,cAAAyB,sBAAA,uBAApBA,sBAAA,CAAsBxB,WAAW,CAACnE,IAAI,EAAEiF,eAAe,CAACnC,MAAM,CAACF,GAAG,CAAEwB,CAAC,IAAKA,CAAC,CAAClB,UAAU,CAAC,CAAC;cAC1F;cACA;cACA,MAAMmC,iBAAiB,GAAG5B,YAAY,CAACE,OAAO,CAACuB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACnC,MAAM,KAAKjB,aAAa,CAAC;cACtF,MAAM+C,gBAAgB,GAAGO,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEvC,MAAM,CAACoC,IAAI,CAAEd,CAAC,IAAKA,CAAC,CAAClB,UAAU,KAAKpB,YAAY,CAAC;cAC7F,IAAI,CAAAgD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEjB,SAAS,MAAK5F,SAAS,CAAC6F,KAAK,EAAE;gBACnDzB,eAAe,CAACrC,IAAI,EAAE8E,gBAAgB,CAACf,KAAK,EAAEe,gBAAgB,CAAChF,KAAkB,CAAC;cACpF;YACF,CAAC,CAAC;UACJ;QACF;MACF;IACF,CAAC,CAAC;IAEF,CAAAa,aAAA,GAAAL,IAAI,CAACsF,OAAO,cAAAjF,aAAA,uBAAZA,aAAA,CAAc6B,OAAO,CAAEqD,cAAc,IAAK;MACxC,MAAM;QAAEpD,EAAE;QAAES;MAAW,CAAC,GAAG2C,cAAc;MACzC,IAAIpD,EAAE,KAAK1E,oBAAoB,EAAE;QAC/B,IAAI,CAACY,SAAS,CAACmH,MAAM,CAACC,eAAe,GAAG,IAAI;QAC5C;MACF;MACA,MAAMC,YAAY,GAAG,IAAI,CAACrH,SAAS,CAACmH,MAAM,CAACF,OAAO,CAAC1C,UAAU,CAAC,IAAI,EAAE;MACpE,MAAM+C,KAAK,GAAGD,YAAY,CAACE,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAAC1D,EAAE,KAAKA,EAAE,CAAC;MACxD,IAAIwD,KAAK,IAAI,CAAC,EAAE;QACdD,YAAY,CAACI,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MAC/B;MACA,MAAM;QAAEI;MAAO,CAAC,GAAG,IAAI,CAAC1H,SAAS,CAACmH,MAAM,CAACQ,OAAO,CAAC7D,EAAE,CAAC,IAAI,CAAC,CAAC;MAC1D,IAAI4D,MAAM,EAAE;QACV,OAAO,IAAI,CAAC1H,SAAS,CAACmH,MAAM,CAACQ,OAAO,CAAC7D,EAAE,CAAC;QACxC4D,MAAM,CAACE,OAAO,CAAC,CAAC;MAClB;IACF,CAAC,CAAC;IACF,CAAA3F,aAAA,GAAAP,IAAI,CAACuF,OAAO,cAAAhF,aAAA,uBAAZA,aAAA,CAAc4B,OAAO,CAAEqD,cAAc,IAAK;MACxC,MAAM;QAAEpD,EAAE;QAAES,UAAU;QAAEF;MAAO,CAAC,GAAG6C,cAAc;MACjD,IAAIpD,EAAE,KAAK1E,oBAAoB,EAAE;QAC/B,IAAI,CAACY,SAAS,CAACmH,MAAM,CAACC,eAAe,GAAG,IAAI/H,UAAU,CAAC6H,cAAc,CAAC;QACtE;MACF;MACA,MAAMC,MAAM,GAAG,IAAI9H,UAAU,CAAC6H,cAAc,CAAC;MAC7C,IAAI,CAAC,IAAI,CAAClH,SAAS,CAACmH,MAAM,CAACF,OAAO,CAAC1C,UAAU,CAAC,EAAE;QAC9C,IAAI,CAACvE,SAAS,CAACmH,MAAM,CAACF,OAAO,CAAC1C,UAAU,CAAC,GAAG,EAAE;MAChD;MACA,IAAI,CAACvE,SAAS,CAACmH,MAAM,CAACF,OAAO,CAAC1C,UAAU,CAAC,CAAC7D,IAAI,CAACyG,MAAM,CAAC;MACtD,IAAI5C,UAAU,KAAKpB,YAAY,IAAI,IAAI,CAACnD,SAAS,CAACiB,MAAM,CAACwD,QAAQ,KAAKtF,QAAQ,CAAC0I,OAAO,EAAE;QACtF,MAAMC,UAAU,GAAG,IAAI,CAAC9H,SAAS,CAACwD,KAAK,CAACH,WAAW,CAACgB,MAAM,CAAC;QAC3D,IAAIyD,UAAU,IAAIA,UAAU,CAACC,WAAW,EAAE;UACxC,MAAML,MAAM,GAAG,IAAI,CAAC1H,SAAS,CAACmH,MAAM,CAACa,kBAAkB,CAACb,MAAM,CAACc,MAAM,EAAEd,MAAM,CAACe,CAAC,EAAEf,MAAM,CAACgB,CAAC,EAAEL,UAAU,CAACC,WAAW,EAAED,UAAU,CAACM,SAAS,CAAC;UACxI,IAAIV,MAAM,EAAE;YACV,IAAI,CAAC1H,SAAS,CAACmH,MAAM,CAACQ,OAAO,CAACR,MAAM,CAACrD,EAAE,CAAC,GAAG;cACzC4D,MAAM;cACNrD;YACF,CAAC;UACH;QACF;MACF;IACF,CAAC,CAAC;IAEF,CAAAnC,mBAAA,GAAAP,IAAI,CAAC0G,aAAa,cAAAnG,mBAAA,uBAAlBA,mBAAA,CAAoB2B,OAAO,CAAEyE,oBAAoB,IAAK;MACpD,MAAMvC,YAAY,GAAG,IAAI,CAAC/F,SAAS,CAAC+F,YAAY,CAACsC,aAAa,CAAC9B,IAAI,CAAEiB,CAAC,IAAKA,CAAC,CAAC1D,EAAE,KAAKwE,oBAAoB,CAACxE,EAAE,CAAC;MAC5G,IAAIiC,YAAY,EAAE;QAChB,IAAI,CAAC/F,SAAS,CAAC+F,YAAY,CAACwC,kBAAkB,CAACxC,YAAY,CAAC;QAC5D,IAAI,CAAC/F,SAAS,CAAC+F,YAAY,CAACyC,gBAAgB,CAACzC,YAAY,CAAC;MAC5D;IACF,CAAC,CAAC;IACF,CAAA5D,mBAAA,GAAAT,IAAI,CAAC2G,aAAa,cAAAlG,mBAAA,uBAAlBA,mBAAA,CAAoB0B,OAAO,CAAEyE,oBAAoB,IAAK;MACpD,IAAI,CAACtI,SAAS,CAAC+F,YAAY,CAAC0C,kBAAkB,CAACH,oBAAoB,CAAC;MACpE,MAAMvC,YAAY,GAAG,IAAI,CAAC/F,SAAS,CAAC+F,YAAY,CAACsC,aAAa,CAAC9B,IAAI,CAAEiB,CAAC,IAAKA,CAAC,CAAC1D,EAAE,KAAKwE,oBAAoB,CAACxE,EAAE,CAAC;MAC5G,IAAIiC,YAAY,IAAIA,YAAY,CAAC5B,MAAM,CAAChB,YAAY,CAAC,EAAE;QACrD,IAAI,CAACnD,SAAS,CAAC+F,YAAY,CAAC2C,gBAAgB,CAAC3C,YAAY,CAAC;MAC5D;IACF,CAAC,CAAC;IAEF,CAAA3D,gBAAA,GAAAT,IAAI,CAAC2C,UAAU,cAAAlC,gBAAA,wBAAAC,qBAAA,GAAfD,gBAAA,CAAiB+B,MAAM,cAAA9B,qBAAA,uBAAvBA,qBAAA,CAAyBwB,OAAO,CAAEoB,aAAa,IAAK;MAClD,MAAM;QAAEV;MAAW,CAAC,GAAGU,aAAa;MACpC,OAAO,IAAI,CAACjF,SAAS,CAACwD,KAAK,CAACmF,eAAe,CAACpE,UAAU,CAAC;IACzD,CAAC,CAAC;IACF,CAAAjC,gBAAA,GAAAZ,IAAI,CAAC4C,UAAU,cAAAhC,gBAAA,wBAAAC,qBAAA,GAAfD,gBAAA,CAAiB6B,MAAM,cAAA5B,qBAAA,uBAAvBA,qBAAA,CAAyBsB,OAAO,CAAEoB,aAAa,IAAK;MAClD,MAAM;QAAEV,UAAU;QAAED;MAAW,CAAC,GAAGW,aAAa;MAChD,IAAI,CAACjF,SAAS,CAACwD,KAAK,CAACmF,eAAe,CAACpE,UAAU,CAAC,GAAGvF,SAAS,CAACsF,UAAU,CAAC;IAC1E,CAAC,CAAC;;IAEF;IACAsC,MAAM,CAACE,IAAI,CAACzD,WAAW,CAAC,CAACQ,OAAO,CAAEQ,MAAM,IAAK;MAC3C,MAAMuE,IAAI,GAAGvF,WAAW,CAACgB,MAAM,CAAC;MAChC,MAAMwE,QAAQ,GAAGvF,yBAAyB,CAACe,MAAM,EAAElB,YAAY,CAAC;MAChE,IAAI0F,QAAQ,KAAKD,IAAI,CAACE,aAAa,EAAE;QACnCF,IAAI,CAACE,aAAa,GAAGD,QAAQ;QAC7BD,IAAI,CAACG,MAAM,CAAC,CAAC;QACb,IAAI,CAAC/I,SAAS,CAACmB,KAAK,CAAC6H,uBAAuB,CAAC3E,MAAM,CAAC;MACtD;MACA,IAAI,IAAI,CAACrE,SAAS,CAACiB,MAAM,CAACgI,aAAa,EAAE;QACvC,MAAMC,WAAW,GAAG3F,uBAAuB,CAACc,MAAM,EAAElB,YAAY,CAAC;QACjED,kBAAkB,CAACmB,MAAM,CAAC,CAACR,OAAO,CAAC,CAAC;UAAE1C;QAAM,CAAC,KAAK;UAChDA,KAAK,CAACgI,MAAM,GAAGD,WAAW;QAC5B,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACA,IAAItC,MAAM,CAACE,IAAI,CAAClD,mBAAmB,CAAC,CAAC9D,MAAM,GAAG,CAAC,EAAE;MAC/C,MAAM6E,SAAsB,GAAG,EAAE;MACjC,MAAMyE,aAA8B,GAAG,EAAE;MACzCxC,MAAM,CAACE,IAAI,CAAClD,mBAAmB,CAAC,CAACC,OAAO,CAAEwF,UAAU,IAAK;QACvD,MAAMvG,QAAQ,GAAGJ,eAAe,CAAC2G,UAAU,CAAC;QAC5C,IAAIvG,QAAQ,EAAE;UACZ6B,SAAS,CAACjE,IAAI,CAACoC,QAAQ,CAAC;UACxB,MAAMwG,OAAO,GAAG1F,mBAAmB,CAACyF,UAAU,CAAC;UAC/CzC,MAAM,CAACC,MAAM,CAAC/D,QAAQ,CAACiC,KAAK,CAAC,CAAClB,OAAO,CAAExC,IAAI,IAAK;YAC9C,IAAIiI,OAAO,CAACC,QAAQ,CAAClI,IAAI,CAACyC,EAAE,CAAC,EAAE;cAC7BsF,aAAa,CAAC1I,IAAI,CAACW,IAAI,CAAC;YAC1B;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MACF,IAAI+H,aAAa,CAACtJ,MAAM,GAAG,CAAC,EAAE;QAC5B,IAAI,CAACE,SAAS,CAAC8C,QAAQ,CAAC0G,kBAAkB,CAACJ,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC;MACzE,CAAC,MAAM,IAAIzE,SAAS,CAAC7E,MAAM,GAAG,CAAC,EAAE;QAC/B,IAAI,CAACE,SAAS,CAAC8C,QAAQ,CAAC2G,cAAc,CAAC9E,SAAS,CAAC;MACnD;IACF;IACA,IAAI,CAAC3E,SAAS,CAACmB,KAAK,CAACuI,OAAO,CAAC,CAAC;;IAE9B;IACA,IAAI,IAAI,CAAC1J,SAAS,CAACmH,MAAM,CAACwC,gBAAgB,EAAE;MAC1C,MAAMxC,MAAM,GAAG,IAAI,CAACnH,SAAS,CAACmH,MAAM,CAACyC,UAAU,CAACrD,IAAI,CAAEiB,CAAC,IAAKA,CAAC,CAAC1D,EAAE,KAAK,IAAI,CAAC9D,SAAS,CAACmH,MAAM,CAACwC,gBAAgB,CAAC;MAC5G,IAAIxC,MAAM,EAAE;QACV,IAAI,IAAI,CAACnH,SAAS,CAACiB,MAAM,CAACwD,QAAQ,KAAKtF,QAAQ,CAAC0I,OAAO,EAAE;UACvD,MAAM;YAAEH;UAAO,CAAC,GAAG,IAAI,CAAC1H,SAAS,CAACmH,MAAM,CAACQ,OAAO,CAACR,MAAM,CAACrD,EAAE,CAAC,IAAI,CAAC,CAAC;UACjE,IAAI4D,MAAM,EAAE;YACV,IAAI,CAAC1H,SAAS,CAACmH,MAAM,CAAC0C,YAAY,CAAC1C,MAAM,EAAEO,MAAM,CAAC;UACpD;QACF;MACF;IACF;IAEA,IAAI,CAAC1H,SAAS,CAAC+D,MAAM,CAAC+F,eAAe,CAAC,CAAC;EACzC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}