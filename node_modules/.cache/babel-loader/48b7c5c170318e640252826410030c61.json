{"ast":null,"code":"import _applyDecoratedDescriptor from \"/Users/qzheng/Documents/webroot/annotation_tools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nvar _class;\nimport { observable, computed, makeObservable, action, toJS } from 'mobx';\nimport { ReviewResult, ValidationType, UpdateType } from '../types';\nimport { TOOL_MODE, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport i18n from '../locales';\n;\n;\n/**\n * reviews stores\n */\nlet ReviewsStore = (_class = class ReviewsStore {\n  /**\n   * selected review\n   */\n  get selectedReview() {\n    const {\n      selectedInstanceId\n    } = this.rootStore.instance;\n    const review = selectedInstanceId ? this.getReview(selectedInstanceId) : undefined;\n    return review;\n  }\n\n  /**\n   * qa qarnings\n   */\n  get qaWarnings() {\n    return this.reviewsResult.length ? this.reviewsResult.filter(review => review.result === ReviewResult.REJECT && review.type).map(review => ({\n      id: review.instanceId,\n      message: review.type.join(','),\n      comment: review.comment,\n      warningType: ValidationType.QUALITY\n    })) : [];\n  }\n\n  /**\n   * warnings\n   */\n  get warnings() {\n    return this.customWarnings.length || this.qaWarnings.length ? [...toJS(this.customWarnings), ...this.qaWarnings] : [];\n  }\n  get reviewsResult() {\n    const list = this.getReviewsForSave();\n    const currentReview = this.currentReview ? toJS(this.currentReview) : undefined;\n    if (currentReview && currentReview.validationType !== ValidationType.CUSTOM && this.isSelectInstanceEnable) {\n      const index = list.findIndex(r => r.instanceId === currentReview.instanceId);\n      if (index >= 0) {\n        list.splice(index, 1, currentReview);\n      } else {\n        list.push(currentReview);\n      }\n    }\n    return list;\n  }\n  constructor(rootStore) {\n    this.rootStore = void 0;\n    /**\n     * current tool mode\n     */\n    this.toolMode = TOOL_MODE.LABELING;\n    /**\n     * canvas draw\n     */\n    this.drawMode = true;\n    /**\n     * issue types\n     */\n    this.issueTypes = [];\n    /**\n     * all reviews\n     */\n    this.reviews = [];\n    /**\n     * current review\n     */\n    this.currentReview = void 0;\n    /**\n     * current view is new\n     */\n    this.isNewReview = true;\n    /**\n     * is select instance enable\n     */\n    this.isSelectInstanceEnable = true;\n    /**\n     * custom warnings\n     */\n    this.customWarnings = [];\n    /**\n     * has custom error\n     */\n    this.hasCustomError = false;\n    /**\n     * blockSubmitErrors\n     */\n    this.blockSubmitErrors = [];\n    /**\n     * errors\n     */\n    this.errors = void 0;\n    /**\n     * updated reviews\n     */\n    this.updatedReviews = {};\n    /**\n     * delete review\n     * @param instanceId\n     * @param frameIndex\n     */\n    this.deleteReviewByInstance = (id, type = UpdateType.MODIFY) => {\n      if (this.isEnabled) {\n        var _this$currentReview;\n        const index = this.reviews.findIndex(review => review.instanceId === id);\n        if (index >= 0) {\n          this.reviews.splice(index, 1);\n          const changeReviews = {\n            [id]: undefined\n          };\n          const previewReviews = {\n            [id]: toJS(this.reviews[index])\n          };\n          if (type === UpdateType.MODIFY) {\n            this.changeUndo(changeReviews, previewReviews);\n          }\n        }\n        if (id === ((_this$currentReview = this.currentReview) === null || _this$currentReview === void 0 ? void 0 : _this$currentReview.instanceId)) {\n          this.setCurrentReview();\n        }\n      }\n    };\n    /**\n     * review form whether complete\n     * @param enable\n     */\n    this.setIsSelectInstanceEnable = enable => {\n      this.isSelectInstanceEnable = enable;\n    };\n    /**\n     * change selected review\n     * @param id review id\n     */\n    this.handleChangeReview = id => {\n      if (this.currentReview) {\n        this.setReview(this.currentReview);\n      }\n      const currentReview = this.getReview(id);\n      this.setCurrentReview(currentReview ? toJS(currentReview) : undefined);\n    };\n    /**\n     * update reviews\n     * @param reviews reviews\n     */\n    this.updateReviews = reviews => {\n      Object.keys(reviews).forEach(id => {\n        var _this$currentReview2;\n        const review = reviews[id];\n        if (review) {\n          this.setReview(review, UpdateType.UNDOREDO);\n        } else {\n          this.deleteReviewByInstance(id, UpdateType.UNDOREDO);\n        }\n        if (id === ((_this$currentReview2 = this.currentReview) === null || _this$currentReview2 === void 0 ? void 0 : _this$currentReview2.instanceId)) {\n          this.setCurrentReview(review, UpdateType.UNDOREDO);\n        }\n      });\n      this.setUpdatedReviews(reviews);\n    };\n    /**\n     * set updated reviews\n     * @param reviews\n     */\n    this.setUpdatedReviews = reviews => {\n      this.updatedReviews = reviews;\n    };\n    this.shortcutAction = result => {\n      var _this$currentReview3;\n      if (this.isEnabled && !this.drawMode && this.rootStore.instance.selectedInstanceId && ((_this$currentReview3 = this.currentReview) === null || _this$currentReview3 === void 0 ? void 0 : _this$currentReview3.result) !== result) {\n        this.setCurrentReview({\n          instanceId: this.rootStore.instance.selectedInstanceId,\n          result\n        });\n      }\n    };\n    makeObservable(this, {\n      currentReview: observable,\n      reviews: observable,\n      errors: observable,\n      customWarnings: observable,\n      drawMode: observable,\n      toolMode: observable,\n      updatedReviews: observable,\n      setInitialData: action,\n      setReview: action,\n      deleteReviewByInstance: action,\n      setScriptResult: action,\n      setDrawMode: action,\n      setCurrentReview: action,\n      setUpdatedReviews: action\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * review result types\n   */\n  get reviewResultTypes() {\n    return this.toolMode === TOOL_MODE.AUDIT ? [ReviewResult.APPROVE, ReviewResult.REJECT, ReviewResult.SUSPEND] : [ReviewResult.APPROVE, ReviewResult.REJECT];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes && typeof issueTypes === 'string' ? issueTypes.split(',').map(i => i.trim()).filter(i => !!i) : [];\n    if (this.isEnabled || this.rootStore.isPreview) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(list) {\n    if (list && Array.isArray(list)) {\n      const reviews = [];\n      const updatedReviews = {};\n      list.filter(v => !this.isEnabled && v.result === ReviewResult.REJECT || this.isEnabled).forEach(({\n        instanceId,\n        result,\n        type,\n        comment\n      }) => {\n        if (instanceId !== undefined && result !== undefined) {\n          reviews.push({\n            instanceId,\n            result,\n            type,\n            comment\n          });\n          updatedReviews[instanceId] = {\n            instanceId,\n            result,\n            type,\n            comment\n          };\n        }\n      });\n      this.reviews = reviews;\n      this.setUpdatedReviews(updatedReviews);\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    return this.reviews.map(review => ({\n      ...review\n    }));\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(instanceId) {\n    return instanceId ? this.reviews.find(review => review.instanceId === instanceId) : undefined;\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(reviewData, handleType = UpdateType.MODIFY) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const {\n      instanceId,\n      result,\n      type,\n      comment\n    } = reviewData;\n    const index = this.reviews.findIndex(review => review.instanceId === instanceId);\n    const previewReviews = {};\n    const changeReviews = {};\n    if (index >= 0) {\n      const reviewItem = this.reviews[index];\n      if (reviewItem.result !== result || reviewItem.type !== type || reviewItem.comment !== comment) {\n        previewReviews[instanceId] = toJS(reviewItem);\n        reviewItem.result = result;\n        reviewItem.type = type;\n        reviewItem.comment = comment;\n        changeReviews[instanceId] = {\n          ...reviewData\n        };\n      }\n    } else {\n      this.reviews.push({\n        ...reviewData\n      });\n      previewReviews[instanceId] = undefined;\n      changeReviews[instanceId] = {\n        ...reviewData\n      };\n    }\n    if (Object.keys(changeReviews).length > 0 && handleType === UpdateType.MODIFY) {\n      this.changeUndo(changeReviews, previewReviews);\n    }\n  }\n  changeUndo(changeReviews, previewReviews) {\n    const before = [];\n    const after = [];\n    before.push({\n      type: 'review',\n      status: previewReviews\n    });\n    after.push({\n      type: 'review',\n      status: changeReviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n  setScriptResult(result) {\n    if (result) {\n      const {\n        results,\n        hasCustomError\n      } = result;\n      this.customWarnings = results;\n      this.hasCustomError = hasCustomError;\n    } else {\n      this.customWarnings = [];\n      this.hasCustomError = false;\n    }\n    if (this.hasCustomError) {\n      this.errors = {\n        [ValidationType.CUSTOM]: this.hasCustomError ? i18n.translate('VALIDATION_CUSTOM_ERROR') : ''\n      };\n    }\n    this.blockSubmitErrors = this.customWarnings.filter(warning => warning.warningType === ValidationType.CUSTOM && warning.blockSubmit === true);\n    const updatedReviews = {};\n    this.reviews.forEach(({\n      instanceId,\n      result: rResult,\n      type,\n      comment\n    }) => {\n      if (instanceId !== undefined && result !== undefined) {\n        updatedReviews[instanceId] = {\n          instanceId,\n          result: rResult,\n          type,\n          comment\n        };\n      }\n    });\n    this.blockSubmitErrors.forEach(({\n      id,\n      message\n    }) => {\n      updatedReviews[id] = {\n        instanceId: id,\n        result: ReviewResult.REJECT,\n        comment: message,\n        validationType: ValidationType.CUSTOM\n      };\n    });\n    this.setUpdatedReviews(updatedReviews);\n  }\n\n  /**\n   * switch draw mode\n   * @param mode\n   */\n  setDrawMode(mode) {\n    if (this.isEditable) {\n      this.drawMode = mode;\n      this.setCurrentReview();\n    }\n  }\n  /**\n   * set current review\n   * @param review\n   * @param type action type\n   */\n  setCurrentReview(review, type) {\n    const currentReview = review ? this.getReview(review.instanceId) : this.getReview(this.rootStore.instance.selectedInstanceId);\n    let isNew = true;\n    if (review && currentReview) {\n      isNew = false;\n    }\n    this.isNewReview = isNew;\n    this.currentReview = review || currentReview;\n    if (type !== UpdateType.UNDOREDO && (review === null || review === void 0 ? void 0 : review.instanceId)) {\n      this.setUpdatedReviews({\n        [review === null || review === void 0 ? void 0 : review.instanceId]: review\n      });\n    }\n  }\n}, _applyDecoratedDescriptor(_class.prototype, \"selectedReview\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"selectedReview\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"qaWarnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"qaWarnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"warnings\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"warnings\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reviewsResult\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"reviewsResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEnabled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEnabled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isEditable\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEditable\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reviewResultTypes\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"reviewResultTypes\"), _class.prototype), _class);\nexport default ReviewsStore;","map":{"version":3,"names":["observable","computed","makeObservable","action","toJS","ReviewResult","ValidationType","UpdateType","TOOL_MODE","isReviewEditable","isAnnotationReadonly","i18n","ReviewsStore","_class","selectedReview","selectedInstanceId","rootStore","instance","review","getReview","undefined","qaWarnings","reviewsResult","length","filter","result","REJECT","type","map","id","instanceId","message","join","comment","warningType","QUALITY","warnings","customWarnings","list","getReviewsForSave","currentReview","validationType","CUSTOM","isSelectInstanceEnable","index","findIndex","r","splice","push","constructor","toolMode","LABELING","drawMode","issueTypes","reviews","isNewReview","hasCustomError","blockSubmitErrors","errors","updatedReviews","deleteReviewByInstance","MODIFY","isEnabled","_this$currentReview","changeReviews","previewReviews","changeUndo","setCurrentReview","setIsSelectInstanceEnable","enable","handleChangeReview","setReview","updateReviews","Object","keys","forEach","_this$currentReview2","UNDOREDO","setUpdatedReviews","shortcutAction","_this$currentReview3","setInitialData","setScriptResult","setDrawMode","isEditable","reviewResultTypes","AUDIT","APPROVE","SUSPEND","init","split","i","trim","isPreview","Array","isArray","v","find","reviewData","handleType","reviewItem","before","after","status","undo","saveStatus","results","translate","warning","blockSubmit","rResult","mode","isNew","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/phonetic-transcription/store/ReviewsStore.ts"],"sourcesContent":["import { observable, computed, makeObservable, action, toJS } from 'mobx';\nimport { RootStoreType } from './RootStore';\nimport { Status } from './UndoStore';\nimport { Review, ReviewResult, ValidationType, UpdateType } from '../types';\nimport { IWarning } from '../../common/tabs-menu/Validator';\nimport { TOOL_MODE, isReviewEditable, isAnnotationReadonly } from '../../../utils/tool-mode';\nimport i18n from '../locales';\n\nexport interface PointReviewResult {[id: number]: ReviewResult};\ninterface ShapeReviewResult {[id: string]: ReviewResult};\nexport interface GroupReviewsMap {\n  [groupName: string]: PointReviewResult | ShapeReviewResult;\n}\nexport interface InstanceReviewsMap {\n  [instanceId: string]: GroupReviewsMap\n}\n\nexport interface FrameReviewsMap {\n  [frameIndex: number]: InstanceReviewsMap\n}\n\n/**\n * reviews stores\n */\nclass ReviewsStore {\n  rootStore: RootStoreType;\n\n  /**\n   * current tool mode\n   */\n  toolMode: TOOL_MODE = TOOL_MODE.LABELING;\n\n  /**\n   * canvas draw\n   */\n  drawMode = true;\n\n  /**\n   * issue types\n   */\n  issueTypes: string[] = [];\n\n  /**\n   * all reviews\n   */\n  reviews: Review[] = [];\n\n  /**\n   * current review\n   */\n  currentReview?: Review;\n\n  /**\n   * current view is new\n   */\n  isNewReview = true;\n\n  /**\n   * is select instance enable\n   */\n  isSelectInstanceEnable = true;\n\n  /**\n   * custom warnings\n   */\n  customWarnings: IWarning[] = [];\n\n  /**\n   * has custom error\n   */\n  hasCustomError = false;\n\n  /**\n   * blockSubmitErrors\n   */\n  blockSubmitErrors: IWarning[] = [];\n\n  /**\n   * errors\n   */\n  errors?: {\n    [type: string]: string;\n  };\n\n  /**\n   * updated reviews\n   */\n  updatedReviews: { [id: string]: Review | undefined } = {};\n\n  /**\n   * selected review\n   */\n  @computed get selectedReview() {\n    const { selectedInstanceId } = this.rootStore.instance;\n    const review = selectedInstanceId ? this.getReview(selectedInstanceId) : undefined;\n    return review;\n  }\n\n  /**\n   * qa qarnings\n   */\n  @computed get qaWarnings() {\n    return this.reviewsResult.length ? this.reviewsResult\n      .filter((review) => review.result === ReviewResult.REJECT && review.type).map((review) => ({\n        id: review.instanceId,\n        message: review.type!.join(','),\n        comment: review.comment,\n        warningType: ValidationType.QUALITY\n      })) : [];\n  }\n\n  /**\n   * warnings\n   */\n  @computed get warnings() {\n    return (this.customWarnings.length || this.qaWarnings.length) ? [...toJS(this.customWarnings), ...this.qaWarnings] : [];\n  }\n\n  @computed get reviewsResult() {\n    const list = this.getReviewsForSave();\n    const currentReview = this.currentReview ? toJS(this.currentReview) : undefined;\n    if (currentReview && currentReview.validationType !== ValidationType.CUSTOM && this.isSelectInstanceEnable) {\n      const index = list.findIndex((r) => r.instanceId === currentReview.instanceId);\n      if (index >= 0) {\n        list.splice(index, 1, currentReview);\n      } else {\n        list.push(currentReview);\n      }\n    }\n    return list;\n  }\n\n  constructor(rootStore: RootStoreType) {\n    makeObservable(this, {\n      currentReview: observable,\n      reviews: observable,\n      errors: observable,\n      customWarnings: observable,\n      drawMode: observable,\n      toolMode: observable,\n      updatedReviews: observable,\n      setInitialData: action,\n      setReview: action,\n      deleteReviewByInstance: action,\n      setScriptResult: action,\n      setDrawMode: action,\n      setCurrentReview: action,\n      setUpdatedReviews: action,\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * is review enabled\n   * @returns\n   */\n  @computed get isEnabled() {\n    return isReviewEditable(this.toolMode);\n  }\n\n  /**\n   * is review editable\n   * @returns\n   */\n  @computed get isEditable() {\n    return isReviewEditable(this.toolMode) && !isAnnotationReadonly(this.toolMode);\n  }\n\n  /**\n   * review result types\n   */\n  @computed get reviewResultTypes() {\n    return this.toolMode === TOOL_MODE.AUDIT ? [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n      ReviewResult.SUSPEND,\n    ] : [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n    ];\n  }\n\n  /**\n   * init tool mode\n   * @param toolMode\n   */\n  init(toolMode: TOOL_MODE, issueTypes = '') {\n    this.toolMode = toolMode;\n    this.issueTypes = issueTypes && typeof issueTypes === 'string' ?\n      issueTypes.split(',').map((i) => i.trim()).filter((i) => !!i) :\n      [];\n    if (this.isEnabled || this.rootStore.isPreview) {\n      this.drawMode = false;\n    }\n  }\n\n  /**\n   * set initial data\n   * @param reviews\n   */\n  setInitialData(list: any) {\n    if (list && Array.isArray(list)) {\n      const reviews: Review[] = [];\n      const updatedReviews: { [id: string]: Review } = {};\n      list\n        .filter((v) => (!this.isEnabled && v.result === ReviewResult.REJECT) || this.isEnabled)\n        .forEach(({ instanceId, result, type, comment }: Review) => {\n          if (instanceId !== undefined && result !== undefined) {\n            reviews.push({ instanceId, result, type, comment });\n            updatedReviews[instanceId] = { instanceId, result, type, comment };\n          }\n        });\n      this.reviews = reviews;\n      this.setUpdatedReviews(updatedReviews);\n    }\n  }\n\n  /**\n   * get reviews for save\n   * @returns\n   */\n  getReviewsForSave() {\n    return this.reviews.map((review) => ({ ...review }));\n  }\n\n  /**\n   * get review result\n   * @param frameIndex\n   * @param instanceId\n   * @returns\n   */\n  getReview(instanceId?: string | null) {\n    return instanceId ? this.reviews.find((review) => review.instanceId === instanceId) : undefined;\n  }\n\n  /**\n   * set review\n   * @param results\n   */\n  setReview(reviewData: Review, handleType = UpdateType.MODIFY) {\n    if (!this.isEnabled) {\n      return;\n    }\n    const { instanceId, result, type, comment } = reviewData;\n    const index = this.reviews.findIndex((review) => review.instanceId === instanceId);\n    const previewReviews: {[id:string]: Review | undefined} = {};\n    const changeReviews: {[id:string]: Review | undefined} = {};\n    if (index >= 0) {\n      const reviewItem = this.reviews[index];\n      if (reviewItem.result !== result || reviewItem.type !== type || reviewItem.comment !== comment) {\n        previewReviews[instanceId] = toJS(reviewItem);\n        reviewItem.result = result;\n        reviewItem.type = type;\n        reviewItem.comment = comment;\n        changeReviews[instanceId] = { ...reviewData };\n      }\n    } else {\n      this.reviews.push({ ...reviewData });\n      previewReviews[instanceId] = undefined;\n      changeReviews[instanceId] = { ...reviewData };\n    }\n    if (Object.keys(changeReviews).length > 0 && handleType === UpdateType.MODIFY) {\n      this.changeUndo(changeReviews, previewReviews);\n    }\n  }\n\n  /**\n   * delete review\n   * @param instanceId\n   * @param frameIndex\n   */\n  deleteReviewByInstance = (id: string, type = UpdateType.MODIFY) => {\n    if (this.isEnabled) {\n      const index = this.reviews.findIndex((review) => review.instanceId === id);\n      if (index >= 0) {\n        this.reviews.splice(index, 1);\n        const changeReviews = { [id]: undefined };\n        const previewReviews = { [id]: toJS(this.reviews[index]) };\n        if (type === UpdateType.MODIFY) {\n          this.changeUndo(changeReviews, previewReviews);\n        }\n      }\n      if (id === this.currentReview?.instanceId) {\n        this.setCurrentReview();\n      }\n    }\n  };\n\n  changeUndo(\n    changeReviews: {[id:string]: Review | undefined},\n    previewReviews: {[id:string]: Review | undefined}\n  ) {\n    const before: Status[] = [];\n    const after: Status[] = [];\n    before.push({ type: 'review',\n      status: previewReviews\n    });\n    after.push({ type: 'review',\n      status: changeReviews\n    });\n    this.rootStore.undo.saveStatus(before, after);\n  }\n\n  setScriptResult(result?: {results: IWarning[]; hasCustomError: boolean}) {\n    if (result) {\n      const { results, hasCustomError } = result as {results: IWarning[]; hasCustomError: boolean};\n      this.customWarnings = results;\n      this.hasCustomError = hasCustomError;\n    } else {\n      this.customWarnings = [];\n      this.hasCustomError = false;\n    }\n    if (this.hasCustomError) {\n      this.errors = {\n        [ValidationType.CUSTOM]: this.hasCustomError ? i18n.translate('VALIDATION_CUSTOM_ERROR') : '',\n      };\n    }\n    this.blockSubmitErrors = this.customWarnings.filter((warning) => warning.warningType === ValidationType.CUSTOM && warning.blockSubmit === true);\n    const updatedReviews: { [id: string]: Review } = {};\n    this.reviews.forEach(({ instanceId, result: rResult, type, comment }: Review) => {\n      if (instanceId !== undefined && result !== undefined) {\n        updatedReviews[instanceId] = { instanceId, result: rResult, type, comment };\n      }\n    });\n    this.blockSubmitErrors.forEach(({ id, message }) => {\n      updatedReviews[id] = { instanceId: id, result: ReviewResult.REJECT, comment: message, validationType: ValidationType.CUSTOM };\n    });\n    this.setUpdatedReviews(updatedReviews);\n  }\n\n  /**\n   * switch draw mode\n   * @param mode\n   */\n  setDrawMode(mode: boolean) {\n    if (this.isEditable) {\n      this.drawMode = mode;\n      this.setCurrentReview();\n    }\n  }\n\n  /**\n   * review form whether complete\n   * @param enable\n   */\n  setIsSelectInstanceEnable = (enable: boolean) => {\n    this.isSelectInstanceEnable = enable;\n  };\n\n  /**\n   * set current review\n   * @param review\n   * @param type action type\n   */\n  setCurrentReview(review?: Review, type?: UpdateType) {\n    const currentReview = review ?\n      this.getReview(review.instanceId) :\n      this.getReview(this.rootStore.instance.selectedInstanceId);\n    let isNew = true;\n    if (review && currentReview) {\n      isNew = false;\n    }\n    this.isNewReview = isNew;\n    this.currentReview = review || currentReview;\n\n    if (type !== UpdateType.UNDOREDO && review?.instanceId) {\n      this.setUpdatedReviews({ [review?.instanceId]: review });\n    }\n  };\n\n  /**\n   * change selected review\n   * @param id review id\n   */\n  handleChangeReview = (id: string) => {\n    if (this.currentReview) {\n      this.setReview(this.currentReview);\n    }\n    const currentReview = this.getReview(id);\n    this.setCurrentReview(currentReview ? toJS(currentReview) : undefined);\n  };\n\n  /**\n   * update reviews\n   * @param reviews reviews\n   */\n  updateReviews = (reviews: { [id:string]: Review | undefined }) => {\n    Object.keys(reviews).forEach((id) => {\n      const review = reviews[id];\n      if (review) {\n        this.setReview(review, UpdateType.UNDOREDO);\n      } else {\n        this.deleteReviewByInstance(id, UpdateType.UNDOREDO);\n      }\n      if (id === this.currentReview?.instanceId) {\n        this.setCurrentReview(review, UpdateType.UNDOREDO);\n      }\n    });\n    this.setUpdatedReviews(reviews);\n  };\n\n  /**\n   * set updated reviews\n   * @param reviews\n   */\n  setUpdatedReviews = (reviews: {[id: string]: Review | undefined}) => {\n    this.updatedReviews = reviews;\n  };\n\n  shortcutAction = (result: ReviewResult) => {\n    if (\n      this.isEnabled &&\n      !this.drawMode &&\n      this.rootStore.instance.selectedInstanceId &&\n      this.currentReview?.result !== result\n    ) {\n      this.setCurrentReview({\n        instanceId: this.rootStore.instance.selectedInstanceId,\n        result,\n      });\n    }\n  };\n}\n\nexport default ReviewsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}