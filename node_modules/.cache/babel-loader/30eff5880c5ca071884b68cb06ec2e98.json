{"ast":null,"code":"import { convertFromRaw, convertToRaw } from 'draft-js';\nimport { customAlphabet } from 'nanoid';\nimport { ContentItemType } from '../types';\nimport { UNSTYLED_TYPE } from './constants';\nconst nanoid = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyz', 5);\nexport function contentToContentState(content) {\n  const raw = {\n    entityMap: {},\n    blocks: []\n  };\n  for (let i = 0; i < content.length; i += 1) {\n    const item = content[i];\n    switch (item.type) {\n      case ContentItemType.UNSTYLED:\n        {\n          raw.blocks.push({\n            key: nanoid(),\n            type: item.type,\n            text: item.content,\n            depth: 0,\n            inlineStyleRanges: [],\n            entityRanges: [],\n            data: item.data\n          });\n          break;\n        }\n      default:\n    }\n  }\n\n  // always add empty line\n  raw.blocks.push({\n    key: nanoid(),\n    type: UNSTYLED_TYPE,\n    text: '',\n    depth: 0,\n    inlineStyleRanges: [],\n    entityRanges: []\n  });\n  return convertFromRaw(raw);\n}\nexport function contentStateToContent(contentState) {\n  const {\n    blocks,\n    entityMap\n  } = convertToRaw(contentState);\n  const content = [];\n  for (let i = 0; i < blocks.length; i += 1) {\n    const block = blocks[i];\n    switch (block.type) {\n      case UNSTYLED_TYPE:\n        {\n          content.push({\n            type: ContentItemType.UNSTYLED,\n            content: block.text\n          });\n          break;\n        }\n      default:\n    }\n  }\n\n  // remove last empty line\n  const last = content[content.length - 1];\n  if (last.type === ContentItemType.UNSTYLED && !last.content) {\n    content.pop();\n  }\n  return content;\n}","map":{"version":3,"names":["convertFromRaw","convertToRaw","customAlphabet","ContentItemType","UNSTYLED_TYPE","nanoid","contentToContentState","content","raw","entityMap","blocks","i","length","item","type","UNSTYLED","push","key","text","depth","inlineStyleRanges","entityRanges","data","contentStateToContent","contentState","block","last","pop"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/common/llm/input/utils.ts"],"sourcesContent":["import { ContentState, RawDraftContentState, convertFromRaw, convertToRaw } from 'draft-js';\nimport { customAlphabet } from 'nanoid';\nimport { Content, ContentItemType } from '../types';\nimport { UNSTYLED_TYPE } from './constants';\n\nconst nanoid = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyz', 5);\n\nexport function contentToContentState(content: Content): ContentState {\n  const raw: RawDraftContentState = {\n    entityMap: {},\n    blocks: [],\n  };\n\n  for (let i = 0; i < content.length; i += 1) {\n    const item = content[i];\n\n    switch (item.type) {\n      case ContentItemType.UNSTYLED: {\n        raw.blocks.push({\n          key: nanoid(),\n          type: item.type,\n          text: item.content,\n          depth: 0,\n          inlineStyleRanges: [],\n          entityRanges: [],\n          data: item.data,\n        });\n        break;\n      }\n\n      default:\n    }\n  }\n\n  // always add empty line\n  raw.blocks.push({\n    key: nanoid(),\n    type: UNSTYLED_TYPE,\n    text: '',\n    depth: 0,\n    inlineStyleRanges: [],\n    entityRanges: [],\n  });\n  return convertFromRaw(raw);\n}\n\nexport function contentStateToContent(contentState: ContentState): Content {\n  const { blocks, entityMap } = convertToRaw(contentState);\n\n  const content: Content = [];\n  for (let i = 0; i < blocks.length; i += 1) {\n    const block = blocks[i];\n    switch (block.type) {\n      case UNSTYLED_TYPE: {\n        content.push({\n          type: ContentItemType.UNSTYLED,\n          content: block.text,\n        });\n        break;\n      }\n\n      default:\n    }\n  }\n\n  // remove last empty line\n  const last = content[content.length - 1];\n  if (last.type === ContentItemType.UNSTYLED && !last.content) {\n    content.pop();\n  }\n\n  return content;\n}\n"],"mappings":"AAAA,SAA6CA,cAAc,EAAEC,YAAY,QAAQ,UAAU;AAC3F,SAASC,cAAc,QAAQ,QAAQ;AACvC,SAAkBC,eAAe,QAAQ,UAAU;AACnD,SAASC,aAAa,QAAQ,aAAa;AAE3C,MAAMC,MAAM,GAAGH,cAAc,CAAC,sCAAsC,EAAE,CAAC,CAAC;AAExE,OAAO,SAASI,qBAAqBA,CAACC,OAAgB,EAAgB;EACpE,MAAMC,GAAyB,GAAG;IAChCC,SAAS,EAAE,CAAC,CAAC;IACbC,MAAM,EAAE;EACV,CAAC;EAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC1C,MAAME,IAAI,GAAGN,OAAO,CAACI,CAAC,CAAC;IAEvB,QAAQE,IAAI,CAACC,IAAI;MACf,KAAKX,eAAe,CAACY,QAAQ;QAAE;UAC7BP,GAAG,CAACE,MAAM,CAACM,IAAI,CAAC;YACdC,GAAG,EAAEZ,MAAM,CAAC,CAAC;YACbS,IAAI,EAAED,IAAI,CAACC,IAAI;YACfI,IAAI,EAAEL,IAAI,CAACN,OAAO;YAClBY,KAAK,EAAE,CAAC;YACRC,iBAAiB,EAAE,EAAE;YACrBC,YAAY,EAAE,EAAE;YAChBC,IAAI,EAAET,IAAI,CAACS;UACb,CAAC,CAAC;UACF;QACF;MAEA;IACF;EACF;;EAEA;EACAd,GAAG,CAACE,MAAM,CAACM,IAAI,CAAC;IACdC,GAAG,EAAEZ,MAAM,CAAC,CAAC;IACbS,IAAI,EAAEV,aAAa;IACnBc,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,CAAC;IACRC,iBAAiB,EAAE,EAAE;IACrBC,YAAY,EAAE;EAChB,CAAC,CAAC;EACF,OAAOrB,cAAc,CAACQ,GAAG,CAAC;AAC5B;AAEA,OAAO,SAASe,qBAAqBA,CAACC,YAA0B,EAAW;EACzE,MAAM;IAAEd,MAAM;IAAED;EAAU,CAAC,GAAGR,YAAY,CAACuB,YAAY,CAAC;EAExD,MAAMjB,OAAgB,GAAG,EAAE;EAC3B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACzC,MAAMc,KAAK,GAAGf,MAAM,CAACC,CAAC,CAAC;IACvB,QAAQc,KAAK,CAACX,IAAI;MAChB,KAAKV,aAAa;QAAE;UAClBG,OAAO,CAACS,IAAI,CAAC;YACXF,IAAI,EAAEX,eAAe,CAACY,QAAQ;YAC9BR,OAAO,EAAEkB,KAAK,CAACP;UACjB,CAAC,CAAC;UACF;QACF;MAEA;IACF;EACF;;EAEA;EACA,MAAMQ,IAAI,GAAGnB,OAAO,CAACA,OAAO,CAACK,MAAM,GAAG,CAAC,CAAC;EACxC,IAAIc,IAAI,CAACZ,IAAI,KAAKX,eAAe,CAACY,QAAQ,IAAI,CAACW,IAAI,CAACnB,OAAO,EAAE;IAC3DA,OAAO,CAACoB,GAAG,CAAC,CAAC;EACf;EAEA,OAAOpB,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module"}