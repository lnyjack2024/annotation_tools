{"ast":null,"code":"import { action, makeObservable, observable } from 'mobx';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nimport OntologyStore from './OntologyStore';\nimport ConfigStore from './ConfigStore';\nimport FrameStore from './FrameStore';\nimport InstanceStore from './InstanceStore';\nimport RelationshipStore from './RelationshipStore';\nimport ShapeStore from './ShapeStore';\nimport UndoStore from './UndoStore';\nimport ValidationStore from './ValidationStore';\nimport ReviewsStore from './ReviewStore';\nimport GridStore from './GridStore';\nimport i18n from '../locales';\nimport { loadInstancesFromResult, getToolTypeFromFrameData } from '../utils';\nimport { ViewMode, Tool, ReviewMode } from '../types';\nimport { ShapeType } from '../../common/shapes/types';\nimport Rectangle from '../../common/shapes/Rectangle';\nimport { isAnnotationReadonly, isReviewEditable, isRework, isPreview, TOOL_MODE } from '../../../utils/tool-mode';\n\n/**\n * root store\n * @class\n */\nclass RootStore {\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.jobProxy.toolMode) || this.config.reviewMode === ReviewMode.REVIEW;\n  }\n\n  /**\n   * is tool review enabled\n   */\n  get reviewable() {\n    return isReviewEditable(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool in labeling mode\n   */\n  get isLabeling() {\n    return this.jobProxy.toolMode === TOOL_MODE.LABELING;\n  }\n\n  /**\n   * is tool in rework mode\n   */\n  get isRework() {\n    return isRework(this.jobProxy.toolMode);\n  }\n\n  /**\n   * is tool in preview mode\n   */\n  get isPreview() {\n    return isPreview(this.jobProxy.toolMode);\n  }\n  constructor() {\n    this.ontology = void 0;\n    this.config = void 0;\n    this.frame = void 0;\n    this.instance = void 0;\n    this.relationship = void 0;\n    this.shape = void 0;\n    this.undo = void 0;\n    this.validation = void 0;\n    this.review = void 0;\n    this.grid = void 0;\n    /**\n     * job proxy\n     */\n    this.jobProxy = void 0;\n    /**\n     * initial data copy\n     */\n    this.initialData = null;\n    /**\n     * is tool initialized\n     */\n    this.initialized = false;\n    /**\n     * current mouse position on canvas\n     */\n    this.currPosition = void 0;\n    /**\n     * copied shape info\n     */\n    this.copiedShapeInfo = void 0;\n    /**\n     * get instance statistics\n     */\n    this.getInstanceStatistics = () => {\n      const {\n        categories\n      } = this.ontology;\n      const data = {\n        elements: [],\n        categories: categories.map(({\n          className\n        }) => className),\n        shapes: new Set(),\n        summary: {},\n        frameCount: this.frame.frameCount,\n        validFrames: new Set(),\n        annotatedFrames: new Set()\n      };\n      const instances = Object.values(this.instance.instances);\n      for (let i = 0; i < instances.length; i += 1) {\n        const {\n          id,\n          category,\n          items: objItems,\n          attributes\n        } = instances[i];\n        const items = Object.values(objItems);\n        for (let j = 0; j < items.length; j += 1) {\n          const item = items[j];\n          const cameras = Object.values(item.cameras);\n          for (let k = 0; k < cameras.length; k += 1) {\n            const camera = cameras[k];\n            const frames = Object.values(camera.frames);\n            for (let l = 0; l < frames.length; l += 1) {\n              const frame = frames[l];\n              const shape = getToolTypeFromFrameData(frame);\n              data.shapes.add(shape);\n              const key = `${shape}_${category}`;\n              if (!data.summary[key]) {\n                data.summary[key] = {\n                  ids: [id],\n                  category,\n                  shape,\n                  count: 1,\n                  distinctCount: 0\n                };\n              } else {\n                data.summary[key].count += 1;\n                if (!data.summary[key].ids.includes(id)) {\n                  data.summary[key].distinctCount += 1;\n                  data.summary[key].ids.push(id);\n                }\n              }\n              data.annotatedFrames.add(frame.frameIndex);\n              data.elements.push({\n                id,\n                shape,\n                frame: frame.frameIndex + 1,\n                category,\n                label: attributes\n              });\n            }\n          }\n        }\n      }\n      const {\n        cameras,\n        frameCount,\n        isFrameValid\n      } = this.frame;\n      const allCameras = Object.keys(cameras);\n      Array.from({\n        length: frameCount\n      }).forEach((_, index) => {\n        if (allCameras.every(c => isFrameValid(c, index))) {\n          data.validFrames.add(index);\n        }\n      });\n      return {\n        ...data,\n        shapes: Array.from(data.shapes),\n        summary: Object.values(data.summary).map(({\n          category,\n          shape,\n          count,\n          distinctCount\n        }) => ({\n          category,\n          shape,\n          count,\n          distinctCount\n        })),\n        annotatedFrames: Array.from(data.annotatedFrames),\n        validFrames: Array.from(data.validFrames),\n        annotatedFrameCount: data.annotatedFrames.size,\n        validFrameCount: data.validFrames.size\n      };\n    };\n    /**\n     * save file\n     * @param file\n     */\n    this.saveFile = file => this.jobProxy.saveFile(file);\n    /**\n     * delete selected shape point or instance if possible\n     */\n    this.delete = () => {\n      if (this.readonly || this.config.isAnyModalOpened || this.shape.isDrawing) {\n        return;\n      }\n      this.cancelShapeWorking();\n      if (this.config.viewMode === ViewMode.DEFAULT) {\n        this.shape.delete();\n      } else if (this.config.viewMode === ViewMode.GRID) {\n        this.grid.delete();\n      }\n    };\n    /**\n     * add instance item to current frame\n     * @param instanceItem\n     * @param camera\n     */\n    this.addToCurrentFrame = (instanceItem, camera = this.frame.currentCamera) => {\n      if (this.config.viewMode === ViewMode.DEFAULT) {\n        this.shape.addShapeToInstanceItem(instanceItem, camera);\n      } else if (this.config.viewMode === ViewMode.GRID) {\n        this.grid.addShapeToInstanceItem(instanceItem, camera);\n      }\n    };\n    /**\n     * add instance to current frame\n     * @param instance\n     * @param camera\n     */\n    this.addToCurrentFrameByInstance = (instance, camera = this.frame.currentCamera) => {\n      if (this.config.viewMode === ViewMode.DEFAULT) {\n        this.shape.addShapesToInstance(instance, camera);\n      } else if (this.config.viewMode === ViewMode.GRID) {\n        this.grid.addShapesToInstance(instance, camera);\n      }\n    };\n    /**\n     * convert shape to polygon type\n     */\n    this.convertShapeToPolygon = () => {\n      if (this.readonly || this.config.isAnyModalOpened || this.shape.isDrawing || !this.instance.isSingleSelected) {\n        return;\n      }\n      const {\n        selectedCategoryItem\n      } = this.ontology;\n      if (selectedCategoryItem) {\n        const {\n          tools\n        } = selectedCategoryItem;\n        const toolTypes = tools.map(t => t.type);\n        if (toolTypes.includes(Tool.POLYGON) || toolTypes.includes(Tool.OCR_POLYGON) || toolTypes.includes(Tool.FORMULA_POLYGON)) {\n          // can convert\n          let selectedShape;\n          if (this.config.viewMode === ViewMode.DEFAULT) {\n            selectedShape = this.shape.selectedShapes[0];\n          } else if (this.config.viewMode === ViewMode.GRID) {\n            selectedShape = this.grid.getCurrentSelectedShape();\n          }\n          if (selectedShape && selectedShape instanceof Rectangle) {\n            const selectedInstanceItem = this.instance.selectedInstanceItems[0];\n            const points = selectedShape.getPoints();\n            const {\n              currentCamera,\n              currentFrame\n            } = this.frame;\n            const frameData = selectedInstanceItem.cameras[currentCamera].frames[currentFrame].toJSON();\n            frameData.shapeType = ShapeType.POLYGON;\n            frameData.shape = {\n              points\n            };\n            const {\n              prevState,\n              currState\n            } = selectedInstanceItem.updateFramesFromData(currentCamera, [frameData]);\n            const basicInfo = selectedInstanceItem.instance.getBasicInfo();\n            this.undo.push({\n              instances: [...(prevState ? [{\n                ...basicInfo,\n                children: [prevState]\n              }] : [])]\n            }, {\n              instances: [...(currState ? [{\n                ...basicInfo,\n                children: [currState]\n              }] : [])]\n            });\n            if (this.config.viewMode === ViewMode.DEFAULT) {\n              this.shape.setupShape(selectedInstanceItem);\n              this.shape.selectShapeByInstanceItem(selectedInstanceItem);\n            }\n            message.success(i18n.translate('CONVERT_TO_POLYGON'));\n          }\n        }\n      }\n    };\n    /**\n     * move shape up\n     * @param toTop\n     */\n    this.moveFront = (toTop = false) => {\n      if (this.readonly || this.config.isAnyModalOpened || this.shape.isDrawing || !this.instance.isSingleSelected) {\n        return;\n      }\n      this.cancelShapeWorking();\n      if (this.config.viewMode === ViewMode.DEFAULT) {\n        this.shape.moveFront(toTop);\n      } else if (this.config.viewMode === ViewMode.GRID) {\n        this.grid.moveFront(toTop);\n      }\n    };\n    /**\n     * move shape down\n     * @param toBottom\n     */\n    this.moveBack = (toBottom = false) => {\n      if (this.readonly || this.config.isAnyModalOpened || this.shape.isDrawing || !this.instance.isSingleSelected) {\n        return;\n      }\n      this.cancelShapeWorking();\n      if (this.config.viewMode === ViewMode.DEFAULT) {\n        this.shape.moveBack(toBottom);\n      } else if (this.config.viewMode === ViewMode.GRID) {\n        this.grid.moveBack(toBottom);\n      }\n    };\n    /**\n     * copy shape\n     */\n    this.copy = () => {\n      let selectedShape;\n      if (this.config.viewMode === ViewMode.DEFAULT) {\n        const {\n          selectedShapes\n        } = this.shape;\n        if (selectedShapes.length === 1) {\n          selectedShape = selectedShapes[0];\n        }\n      } else if (this.config.viewMode === ViewMode.GRID) {\n        selectedShape = this.grid.getCurrentSelectedShape();\n      }\n      if (selectedShape) {\n        this.copiedShapeInfo = {\n          shapeType: selectedShape.shapeType,\n          shape: selectedShape.getData()\n        };\n        message.success(i18n.translate('SHAPE_COPIED'));\n      }\n    };\n    /**\n     * paste shape\n     */\n    this.paste = () => {\n      var _this$frame$currentCa;\n      if (this.copiedShapeInfo && this.currPosition && !((_this$frame$currentCa = this.frame.currentCameraView) === null || _this$frame$currentCa === void 0 ? void 0 : _this$frame$currentCa.imageLoadError)) {\n        const {\n          shapeType,\n          shape\n        } = this.copiedShapeInfo;\n        let container;\n        let imageBounds;\n        if (this.config.viewMode === ViewMode.DEFAULT) {\n          container = this.shape.currentLayer;\n          imageBounds = this.frame.imageBounds;\n        } else if (this.config.viewMode === ViewMode.GRID) {\n          var _this$grid$gridCanvas;\n          const grid = (_this$grid$gridCanvas = this.grid.gridCanvas) === null || _this$grid$gridCanvas === void 0 ? void 0 : _this$grid$gridCanvas.getGrid(this.frame.currentFrame);\n          if (grid) {\n            container = grid.container;\n            imageBounds = grid.imageBounds;\n          }\n        }\n        if (container && imageBounds) {\n          const instanceItem = this.instance.getInstanceItemForPaste(shapeType);\n          if (!instanceItem) {\n            message.warning(i18n.translate('SHAPE_PASTE_CANCEL'));\n            return;\n          }\n          const {\n            displayColor,\n            tools = []\n          } = instanceItem.categoryItemRef;\n          const isOCRTool = tools[0].type === Tool.OCR || tools[0].type === Tool.OCR_POLYGON;\n          const isFormulaTool = tools[0].type === Tool.FORMULA_POLYGON;\n          const pastedShape = this.shape.createShape(container, imageBounds, displayColor, instanceItem.instance.category, instanceItem.name, shapeType, shape, this.frame.getNextShapeOrder(), instanceItem.label);\n          const centerX = (pastedShape.shapeBounds.left + pastedShape.shapeBounds.right) / 2;\n          const centerY = (pastedShape.shapeBounds.top + pastedShape.shapeBounds.bottom) / 2;\n          pastedShape.updatePosition(pastedShape.position.x - centerX + this.currPosition.x, pastedShape.position.y - centerY + this.currPosition.y);\n          const {\n            prevState,\n            currState\n          } = instanceItem.addShape(this.frame.currentCamera, this.frame.currentFrame, this.config.autoInterpolation, shapeType, pastedShape.getData(), pastedShape.order, isOCRTool, isFormulaTool);\n          const basicInfo = instanceItem.instance.getBasicInfo();\n          this.undo.push({\n            instances: prevState ? [{\n              ...basicInfo,\n              children: [prevState]\n            }] : []\n          }, {\n            instances: currState ? [{\n              ...basicInfo,\n              children: [currState]\n            }] : []\n          });\n          if (this.config.viewMode === ViewMode.DEFAULT) {\n            this.shape.addShapeListeners(pastedShape);\n            this.shape.shapes[pastedShape.uid] = {\n              shape: pastedShape,\n              camera: this.frame.currentCamera,\n              instanceItem\n            };\n          } else {\n            pastedShape.destroy();\n          }\n          message.success(i18n.translate('SHAPE_PASTED'));\n          this.instance.selectInstanceItem(instanceItem);\n          this.instance.autoOpenAttributesModal();\n        }\n      }\n    };\n    /**\n     * cancel shape working status, including merge, cut and set relationship\n     */\n    this.cancelShapeWorking = () => {\n      // cancel merge\n      this.shape.clearPending();\n      // cancel cutting\n      this.shape.endPolygonCutting();\n      // cancel set relationship\n      this.relationship.cancel();\n    };\n    this.toggleAddMode = () => {\n      if (this.config.reviewMode === ReviewMode.LABELING) {\n        this.config.setAddMode(!this.config.addMode);\n      } else {\n        this.review.setAddMode(!this.review.addMode);\n      }\n    };\n    this.activateTool = num => {\n      if (this.config.reviewMode === ReviewMode.LABELING) {\n        this.ontology.activateCategoryItemByIndex(num === 0 ? 9 : num - 1);\n      } else {\n        this.review.activateReviewByHotkey(num);\n      }\n    };\n    this.openAttributesModal = () => {\n      if (this.readonly || this.shape.isDrawing) {\n        return;\n      }\n\n      // open point attributes modal\n      const {\n        selectedShapes,\n        selectedPointIndex,\n        shapes\n      } = this.shape;\n      if (selectedShapes.length === 1 && selectedPointIndex >= 0) {\n        const selectedShape = selectedShapes[0];\n        const {\n          instanceItem\n        } = shapes[selectedShape.uid];\n        const frameData = instanceItem.cameras[this.frame.currentCamera].frames[this.frame.currentFrame];\n        const {\n          pointLabelConfig\n        } = instanceItem.categoryItemRef;\n        if (frameData && pointLabelConfig) {\n          this.config.setPointAttributesModalVisible(true);\n          return;\n        }\n      }\n\n      // open instance & items attributes modal\n      if (this.instance.selectedInstanceAttributesEnabled) {\n        this.config.setAttributesModalVisible(true);\n      }\n    };\n    this.ontology = new OntologyStore(this);\n    this.config = new ConfigStore(this);\n    this.frame = new FrameStore(this);\n    this.instance = new InstanceStore(this);\n    this.relationship = new RelationshipStore(this);\n    this.shape = new ShapeStore(this);\n    this.undo = new UndoStore(this);\n    this.validation = new ValidationStore(this);\n    this.review = new ReviewsStore(this);\n    this.grid = new GridStore(this);\n    makeObservable(this, {\n      initialized: observable,\n      init: action\n    });\n  }\n  async init(payload) {\n    let initError = '';\n    const appendError = msg => {\n      initError = `${initError ? '; ' : ''}${msg}`;\n    };\n\n    // init common stores\n    this.ontology.init(payload);\n    this.config.init(payload);\n    // init relationship settings\n    this.relationship.init(payload);\n\n    // load frames\n    await this.frame.init(payload);\n\n    // load result & init instances\n    try {\n      await this.loadResult();\n    } catch (e) {\n      appendError(i18n.translate('ANNOTATION_DATA_LOAD_ERROR'));\n    }\n\n    // load & init reviews\n    try {\n      await this.loadReviews(payload);\n    } catch (e) {\n      appendError(i18n.translate('REVIEW_DATA_LOAD_ERROR'));\n    }\n\n    // init shapes\n    this.shape.init(payload);\n    this.initialized = true;\n\n    // throw error\n    if (initError) {\n      throw new Error(initError);\n    }\n  }\n  terminate() {\n    this.validation.terminate();\n  }\n\n  /**\n   * load annotation result\n   */\n  async loadResult() {\n    const savedResult = await this.jobProxy.loadSavedResult();\n    const reviewFromResult = await this.jobProxy.loadReviewFrom();\n\n    // copy initial data\n    if (reviewFromResult) {\n      this.initialData = cloneDeep({\n        instances: reviewFromResult.instances,\n        frames: reviewFromResult.frames\n      });\n    }\n    const result = savedResult || reviewFromResult;\n    if (!result) {\n      return;\n    }\n    if (result.auditId) {\n      this.jobProxy.setAuditId(result.auditId);\n    }\n    // set frame attributes\n    this.frame.initAttributes(result.frames);\n    // load instance\n    this.instance.init(loadInstancesFromResult(result));\n    // load relationships\n    this.relationship.initRelationships(result.relationships);\n  }\n\n  /**\n   * save annotation result\n   */\n  async saveResult(submit = false) {\n    if (submit) {\n      // generate if no image width & height\n      await this.frame.fixImageSize();\n    }\n    const statData = this.getInstanceStatistics();\n    const statistics = await this.jobProxy.saveResultStat(statData);\n    const instances = this.instance.instancesJSON();\n    const frames = this.frame.framesJSON();\n    const relationships = this.relationship.relationshipsJSON();\n    return this.jobProxy.saveResult({\n      auditId: this.jobProxy.auditId,\n      instances,\n      frames,\n      relationships,\n      statistics\n    }, submit);\n  }\n\n  /**\n   * load reviews result\n   * @param payload\n   */\n  async loadReviews(payload) {\n    const result = await this.jobProxy.loadReviews();\n    this.review.init(payload, (result === null || result === void 0 ? void 0 : result.reviews) || result);\n  }\n\n  /**\n   * save review result\n   */\n  async saveReviews() {\n    const reviews = this.review.reviewsJSON();\n    const statData = this.review.getReviewStatistics();\n    const statistics = await this.jobProxy.saveReviewStat(statData);\n    return this.jobProxy.saveReviews({\n      reviews,\n      review_statistics: statistics\n    });\n  }\n}\nconst rootStore = new RootStore();\nexport default rootStore;","map":{"version":3,"names":["action","makeObservable","observable","cloneDeep","message","OntologyStore","ConfigStore","FrameStore","InstanceStore","RelationshipStore","ShapeStore","UndoStore","ValidationStore","ReviewsStore","GridStore","i18n","loadInstancesFromResult","getToolTypeFromFrameData","ViewMode","Tool","ReviewMode","ShapeType","Rectangle","isAnnotationReadonly","isReviewEditable","isRework","isPreview","TOOL_MODE","RootStore","readonly","jobProxy","toolMode","config","reviewMode","REVIEW","reviewable","isLabeling","LABELING","constructor","ontology","frame","instance","relationship","shape","undo","validation","review","grid","initialData","initialized","currPosition","copiedShapeInfo","getInstanceStatistics","categories","data","elements","map","className","shapes","Set","summary","frameCount","validFrames","annotatedFrames","instances","Object","values","i","length","id","category","items","objItems","attributes","j","item","cameras","k","camera","frames","l","add","key","ids","count","distinctCount","includes","push","frameIndex","label","isFrameValid","allCameras","keys","Array","from","forEach","_","index","every","c","annotatedFrameCount","size","validFrameCount","saveFile","file","delete","isAnyModalOpened","isDrawing","cancelShapeWorking","viewMode","DEFAULT","GRID","addToCurrentFrame","instanceItem","currentCamera","addShapeToInstanceItem","addToCurrentFrameByInstance","addShapesToInstance","convertShapeToPolygon","isSingleSelected","selectedCategoryItem","tools","toolTypes","t","type","POLYGON","OCR_POLYGON","FORMULA_POLYGON","selectedShape","selectedShapes","getCurrentSelectedShape","selectedInstanceItem","selectedInstanceItems","points","getPoints","currentFrame","frameData","toJSON","shapeType","prevState","currState","updateFramesFromData","basicInfo","getBasicInfo","children","setupShape","selectShapeByInstanceItem","success","translate","moveFront","toTop","moveBack","toBottom","copy","getData","paste","_this$frame$currentCa","currentCameraView","imageLoadError","container","imageBounds","currentLayer","_this$grid$gridCanvas","gridCanvas","getGrid","getInstanceItemForPaste","warning","displayColor","categoryItemRef","isOCRTool","OCR","isFormulaTool","pastedShape","createShape","name","getNextShapeOrder","centerX","shapeBounds","left","right","centerY","top","bottom","updatePosition","position","x","y","addShape","autoInterpolation","order","addShapeListeners","uid","destroy","selectInstanceItem","autoOpenAttributesModal","clearPending","endPolygonCutting","cancel","toggleAddMode","setAddMode","addMode","activateTool","num","activateCategoryItemByIndex","activateReviewByHotkey","openAttributesModal","selectedPointIndex","pointLabelConfig","setPointAttributesModalVisible","selectedInstanceAttributesEnabled","setAttributesModalVisible","init","payload","initError","appendError","msg","loadResult","e","loadReviews","Error","terminate","savedResult","loadSavedResult","reviewFromResult","loadReviewFrom","result","auditId","setAuditId","initAttributes","initRelationships","relationships","saveResult","submit","fixImageSize","statData","statistics","saveResultStat","instancesJSON","framesJSON","relationshipsJSON","reviews","saveReviews","reviewsJSON","getReviewStatistics","saveReviewStat","review_statistics","rootStore"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/RootStore.ts"],"sourcesContent":["import { action, makeObservable, observable } from 'mobx';\nimport { cloneDeep } from 'lodash';\nimport { message } from 'antd';\nimport OntologyStore from './OntologyStore';\nimport ConfigStore from './ConfigStore';\nimport FrameStore from './FrameStore';\nimport InstanceStore from './InstanceStore';\nimport RelationshipStore from './RelationshipStore';\nimport ShapeStore from './ShapeStore';\nimport UndoStore from './UndoStore';\nimport ValidationStore from './ValidationStore';\nimport ReviewsStore from './ReviewStore';\nimport GridStore from './GridStore';\nimport Instance from '../model/Instance';\nimport InstanceItem from '../model/InstanceItem';\nimport i18n from '../locales';\nimport { loadInstancesFromResult, getToolTypeFromFrameData } from '../utils';\nimport { Payload, ViewMode, Tool, Statistic, ReviewMode } from '../types';\nimport { ShapeType, ShapeData } from '../../common/shapes/types';\nimport Rectangle from '../../common/shapes/Rectangle';\nimport JobProxy from '../../../libs/JobProxy';\nimport { isAnnotationReadonly, isReviewEditable, isRework, isPreview, TOOL_MODE } from '../../../utils/tool-mode';\n\n/**\n * root store\n * @class\n */\nclass RootStore {\n  ontology: OntologyStore;\n\n  config: ConfigStore;\n\n  frame: FrameStore;\n\n  instance: InstanceStore;\n\n  relationship: RelationshipStore;\n\n  shape: ShapeStore;\n\n  undo: UndoStore;\n\n  validation: ValidationStore;\n\n  review: ReviewsStore;\n\n  grid: GridStore;\n\n  /**\n   * job proxy\n   */\n  jobProxy?: JobProxy;\n\n  /**\n   * initial data copy\n   */\n  initialData: any = null;\n\n  /**\n   * is tool initialized\n   */\n  initialized = false;\n\n  /**\n   * current mouse position on canvas\n   */\n  currPosition?: {\n    x: number;\n    y: number;\n  };\n\n  /**\n   * copied shape info\n   */\n  copiedShapeInfo?: {\n    shapeType: ShapeType;\n    shape: ShapeData;\n  };\n\n  /**\n   * is tool readonly (annotate not allowed)\n   */\n  get readonly() {\n    return isAnnotationReadonly(this.jobProxy!.toolMode) || this.config.reviewMode === ReviewMode.REVIEW;\n  }\n\n  /**\n   * is tool review enabled\n   */\n  get reviewable() {\n    return isReviewEditable(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool in labeling mode\n   */\n  get isLabeling() {\n    return this.jobProxy!.toolMode === TOOL_MODE.LABELING;\n  }\n\n  /**\n   * is tool in rework mode\n   */\n  get isRework() {\n    return isRework(this.jobProxy!.toolMode);\n  }\n\n  /**\n   * is tool in preview mode\n   */\n  get isPreview() {\n    return isPreview(this.jobProxy!.toolMode);\n  }\n\n  constructor() {\n    this.ontology = new OntologyStore(this);\n    this.config = new ConfigStore(this);\n    this.frame = new FrameStore(this);\n    this.instance = new InstanceStore(this);\n    this.relationship = new RelationshipStore(this);\n    this.shape = new ShapeStore(this);\n    this.undo = new UndoStore(this);\n    this.validation = new ValidationStore(this);\n    this.review = new ReviewsStore(this);\n    this.grid = new GridStore(this);\n\n    makeObservable(this, {\n      initialized: observable,\n      init: action,\n    });\n  }\n\n  async init(payload: Payload) {\n    let initError = '';\n    const appendError = (msg: string) => {\n      initError = `${initError ? '; ' : ''}${msg}`;\n    };\n\n    // init common stores\n    this.ontology.init(payload);\n    this.config.init(payload);\n    // init relationship settings\n    this.relationship.init(payload);\n\n    // load frames\n    await this.frame.init(payload);\n\n    // load result & init instances\n    try {\n      await this.loadResult();\n    } catch (e) {\n      appendError(i18n.translate('ANNOTATION_DATA_LOAD_ERROR'));\n    }\n\n    // load & init reviews\n    try {\n      await this.loadReviews(payload);\n    } catch (e) {\n      appendError(i18n.translate('REVIEW_DATA_LOAD_ERROR'));\n    }\n\n    // init shapes\n    this.shape.init(payload);\n    this.initialized = true;\n\n    // throw error\n    if (initError) {\n      throw new Error(initError);\n    }\n  }\n\n  terminate() {\n    this.validation.terminate();\n  }\n\n  /**\n   * load annotation result\n   */\n  async loadResult() {\n    const savedResult = await this.jobProxy!.loadSavedResult();\n    const reviewFromResult = await this.jobProxy!.loadReviewFrom();\n\n    // copy initial data\n    if (reviewFromResult) {\n      this.initialData = cloneDeep({\n        instances: reviewFromResult.instances,\n        frames: reviewFromResult.frames,\n      });\n    }\n\n    const result = savedResult || reviewFromResult;\n    if (!result) {\n      return;\n    }\n    if (result.auditId) {\n      this.jobProxy!.setAuditId(result.auditId);\n    }\n    // set frame attributes\n    this.frame.initAttributes(result.frames);\n    // load instance\n    this.instance.init(loadInstancesFromResult(result));\n    // load relationships\n    this.relationship.initRelationships(result.relationships);\n  }\n\n  /**\n   * save annotation result\n   */\n  async saveResult(submit = false) {\n    if (submit) {\n      // generate if no image width & height\n      await this.frame.fixImageSize();\n    }\n    const statData = this.getInstanceStatistics();\n    const statistics = await this.jobProxy!.saveResultStat(statData);\n    const instances = this.instance.instancesJSON();\n    const frames = this.frame.framesJSON();\n    const relationships = this.relationship.relationshipsJSON();\n    return this.jobProxy!.saveResult({\n      auditId: this.jobProxy!.auditId,\n      instances,\n      frames,\n      relationships,\n      statistics,\n    }, submit);\n  }\n\n  /**\n   * load reviews result\n   * @param payload\n   */\n  async loadReviews(payload: Payload) {\n    const result = await this.jobProxy!.loadReviews();\n    this.review.init(payload, result?.reviews || result);\n  }\n\n  /**\n   * save review result\n   */\n  async saveReviews() {\n    const reviews = this.review.reviewsJSON();\n    const statData = this.review.getReviewStatistics();\n    const statistics = await this.jobProxy!.saveReviewStat(statData);\n    return this.jobProxy!.saveReviews({\n      reviews,\n      review_statistics: statistics,\n    });\n  }\n\n  /**\n   * get instance statistics\n   */\n  getInstanceStatistics = () => {\n    const { categories } = this.ontology;\n    const data: Statistic = {\n      elements: [],\n      categories: categories.map(({ className }) => className),\n      shapes: new Set(),\n      summary: {},\n      frameCount: this.frame.frameCount,\n      validFrames: new Set(),\n      annotatedFrames: new Set(),\n    };\n\n    const instances = Object.values(this.instance.instances);\n    for (let i = 0; i < instances.length; i += 1) {\n      const { id, category, items: objItems, attributes } = instances[i];\n      const items = Object.values(objItems);\n      for (let j = 0; j < items.length; j += 1) {\n        const item = items[j];\n        const cameras = Object.values(item.cameras);\n        for (let k = 0; k < cameras.length; k += 1) {\n          const camera = cameras[k];\n          const frames = Object.values(camera.frames);\n          for (let l = 0; l < frames.length; l += 1) {\n            const frame = frames[l];\n            const shape = getToolTypeFromFrameData(frame);\n            data.shapes.add(shape);\n            const key = `${shape}_${category}`;\n            if (!data.summary[key]) {\n              data.summary[key] = {\n                ids: [id],\n                category,\n                shape,\n                count: 1,\n                distinctCount: 0,\n              };\n            } else {\n              data.summary[key].count += 1;\n              if (!data.summary[key].ids.includes(id)) {\n                data.summary[key].distinctCount += 1;\n                data.summary[key].ids.push(id);\n              }\n            }\n\n            data.annotatedFrames.add(frame.frameIndex);\n            data.elements.push({\n              id,\n              shape,\n              frame: frame.frameIndex + 1,\n              category,\n              label: attributes,\n            });\n          }\n        }\n      }\n    }\n\n    const { cameras, frameCount, isFrameValid } = this.frame;\n    const allCameras = Object.keys(cameras);\n    Array.from({ length: frameCount }).forEach((_, index) => {\n      if (allCameras.every((c) => isFrameValid(c, index))) {\n        data.validFrames.add(index);\n      }\n    });\n\n    return {\n      ...data,\n      shapes: Array.from(data.shapes),\n      summary: Object.values(data.summary).map(({ category, shape, count, distinctCount }) => ({\n        category,\n        shape,\n        count,\n        distinctCount,\n      })),\n      annotatedFrames: Array.from(data.annotatedFrames),\n      validFrames: Array.from(data.validFrames),\n      annotatedFrameCount: data.annotatedFrames.size,\n      validFrameCount: data.validFrames.size,\n    };\n  };\n\n  /**\n   * save file\n   * @param file\n   */\n  saveFile = (file: File) => this.jobProxy!.saveFile(file);\n\n  /**\n   * delete selected shape point or instance if possible\n   */\n  delete = () => {\n    if (this.readonly || this.config.isAnyModalOpened || this.shape.isDrawing) {\n      return;\n    }\n    this.cancelShapeWorking();\n    if (this.config.viewMode === ViewMode.DEFAULT) {\n      this.shape.delete();\n    } else if (this.config.viewMode === ViewMode.GRID) {\n      this.grid.delete();\n    }\n  };\n\n  /**\n   * add instance item to current frame\n   * @param instanceItem\n   * @param camera\n   */\n  addToCurrentFrame = (instanceItem: InstanceItem, camera = this.frame.currentCamera) => {\n    if (this.config.viewMode === ViewMode.DEFAULT) {\n      this.shape.addShapeToInstanceItem(instanceItem, camera);\n    } else if (this.config.viewMode === ViewMode.GRID) {\n      this.grid.addShapeToInstanceItem(instanceItem, camera);\n    }\n  };\n\n  /**\n   * add instance to current frame\n   * @param instance\n   * @param camera\n   */\n  addToCurrentFrameByInstance = (instance: Instance, camera = this.frame.currentCamera) => {\n    if (this.config.viewMode === ViewMode.DEFAULT) {\n      this.shape.addShapesToInstance(instance, camera);\n    } else if (this.config.viewMode === ViewMode.GRID) {\n      this.grid.addShapesToInstance(instance, camera);\n    }\n  };\n\n  /**\n   * convert shape to polygon type\n   */\n  convertShapeToPolygon = () => {\n    if (this.readonly || this.config.isAnyModalOpened || this.shape.isDrawing || !this.instance.isSingleSelected) {\n      return;\n    }\n\n    const { selectedCategoryItem } = this.ontology;\n    if (selectedCategoryItem) {\n      const { tools } = selectedCategoryItem;\n      const toolTypes = tools.map((t) => t.type);\n      if (toolTypes.includes(Tool.POLYGON) || toolTypes.includes(Tool.OCR_POLYGON) || toolTypes.includes(Tool.FORMULA_POLYGON)) {\n        // can convert\n        let selectedShape;\n        if (this.config.viewMode === ViewMode.DEFAULT) {\n          selectedShape = this.shape.selectedShapes[0];\n        } else if (this.config.viewMode === ViewMode.GRID) {\n          selectedShape = this.grid.getCurrentSelectedShape();\n        }\n\n        if (selectedShape && selectedShape instanceof Rectangle) {\n          const selectedInstanceItem = this.instance.selectedInstanceItems[0];\n          const points = selectedShape.getPoints();\n          const { currentCamera, currentFrame } = this.frame;\n          const frameData = selectedInstanceItem.cameras[currentCamera].frames[currentFrame].toJSON();\n          frameData.shapeType = ShapeType.POLYGON;\n          frameData.shape = { points };\n          const { prevState, currState } = selectedInstanceItem.updateFramesFromData(currentCamera, [frameData]);\n          const basicInfo = selectedInstanceItem.instance.getBasicInfo();\n          this.undo.push({\n            instances: [...prevState ? [{ ...basicInfo, children: [prevState] }] : []],\n          }, {\n            instances: [...currState ? [{ ...basicInfo, children: [currState] }] : []],\n          });\n\n          if (this.config.viewMode === ViewMode.DEFAULT) {\n            this.shape.setupShape(selectedInstanceItem);\n            this.shape.selectShapeByInstanceItem(selectedInstanceItem);\n          }\n          message.success(i18n.translate('CONVERT_TO_POLYGON'));\n        }\n      }\n    }\n  };\n\n  /**\n   * move shape up\n   * @param toTop\n   */\n  moveFront = (toTop = false) => {\n    if (this.readonly || this.config.isAnyModalOpened || this.shape.isDrawing || !this.instance.isSingleSelected) {\n      return;\n    }\n    this.cancelShapeWorking();\n    if (this.config.viewMode === ViewMode.DEFAULT) {\n      this.shape.moveFront(toTop);\n    } else if (this.config.viewMode === ViewMode.GRID) {\n      this.grid.moveFront(toTop);\n    }\n  };\n\n  /**\n   * move shape down\n   * @param toBottom\n   */\n  moveBack = (toBottom = false) => {\n    if (this.readonly || this.config.isAnyModalOpened || this.shape.isDrawing || !this.instance.isSingleSelected) {\n      return;\n    }\n    this.cancelShapeWorking();\n    if (this.config.viewMode === ViewMode.DEFAULT) {\n      this.shape.moveBack(toBottom);\n    } else if (this.config.viewMode === ViewMode.GRID) {\n      this.grid.moveBack(toBottom);\n    }\n  };\n\n  /**\n   * copy shape\n   */\n  copy = () => {\n    let selectedShape;\n    if (this.config.viewMode === ViewMode.DEFAULT) {\n      const { selectedShapes } = this.shape;\n      if (selectedShapes.length === 1) {\n        selectedShape = selectedShapes[0];\n      }\n    } else if (this.config.viewMode === ViewMode.GRID) {\n      selectedShape = this.grid.getCurrentSelectedShape();\n    }\n\n    if (selectedShape) {\n      this.copiedShapeInfo = {\n        shapeType: selectedShape.shapeType,\n        shape: selectedShape.getData(),\n      };\n      message.success(i18n.translate('SHAPE_COPIED'));\n    }\n  };\n\n  /**\n   * paste shape\n   */\n  paste = () => {\n    if (this.copiedShapeInfo && this.currPosition && !this.frame.currentCameraView?.imageLoadError) {\n      const { shapeType, shape } = this.copiedShapeInfo;\n\n      let container;\n      let imageBounds;\n      if (this.config.viewMode === ViewMode.DEFAULT) {\n        container = this.shape.currentLayer;\n        imageBounds = this.frame.imageBounds;\n      } else if (this.config.viewMode === ViewMode.GRID) {\n        const grid = this.grid.gridCanvas?.getGrid(this.frame.currentFrame);\n        if (grid) {\n          container = grid.container;\n          imageBounds = grid.imageBounds;\n        }\n      }\n      if (container && imageBounds) {\n        const instanceItem = this.instance.getInstanceItemForPaste(shapeType);\n        if (!instanceItem) {\n          message.warning(i18n.translate('SHAPE_PASTE_CANCEL'));\n          return;\n        }\n\n        const { displayColor, tools = [] } = instanceItem.categoryItemRef;\n        const isOCRTool = tools[0].type === Tool.OCR || tools[0].type === Tool.OCR_POLYGON;\n        const isFormulaTool = tools[0].type === Tool.FORMULA_POLYGON;\n\n        const pastedShape = this.shape.createShape(\n          container,\n          imageBounds,\n          displayColor,\n          instanceItem.instance.category,\n          instanceItem.name,\n          shapeType,\n          shape,\n          this.frame.getNextShapeOrder(),\n          instanceItem.label,\n        );\n        const centerX = (pastedShape.shapeBounds.left + pastedShape.shapeBounds.right) / 2;\n        const centerY = (pastedShape.shapeBounds.top + pastedShape.shapeBounds.bottom) / 2;\n        pastedShape.updatePosition(\n          pastedShape.position.x - centerX + this.currPosition.x,\n          pastedShape.position.y - centerY + this.currPosition.y,\n        );\n        const { prevState, currState } = instanceItem.addShape(\n          this.frame.currentCamera,\n          this.frame.currentFrame,\n          this.config.autoInterpolation,\n          shapeType,\n          pastedShape.getData(),\n          pastedShape.order,\n          isOCRTool,\n          isFormulaTool,\n        );\n        const basicInfo = instanceItem.instance.getBasicInfo();\n        this.undo.push({\n          instances: prevState ? [{ ...basicInfo, children: [prevState] }] : [],\n        }, {\n          instances: currState ? [{ ...basicInfo, children: [currState] }] : [],\n        });\n\n        if (this.config.viewMode === ViewMode.DEFAULT) {\n          this.shape.addShapeListeners(pastedShape);\n          this.shape.shapes[pastedShape.uid] = { shape: pastedShape, camera: this.frame.currentCamera, instanceItem };\n        } else {\n          pastedShape.destroy();\n        }\n\n        message.success(i18n.translate('SHAPE_PASTED'));\n        this.instance.selectInstanceItem(instanceItem);\n        this.instance.autoOpenAttributesModal();\n      }\n    }\n  };\n\n  /**\n   * cancel shape working status, including merge, cut and set relationship\n   */\n  cancelShapeWorking = () => {\n    // cancel merge\n    this.shape.clearPending();\n    // cancel cutting\n    this.shape.endPolygonCutting();\n    // cancel set relationship\n    this.relationship.cancel();\n  };\n\n  toggleAddMode = () => {\n    if (this.config.reviewMode === ReviewMode.LABELING) {\n      this.config.setAddMode(!this.config.addMode);\n    } else {\n      this.review.setAddMode(!this.review.addMode);\n    }\n  };\n\n  activateTool = (num: number) => {\n    if (this.config.reviewMode === ReviewMode.LABELING) {\n      this.ontology.activateCategoryItemByIndex(num === 0 ? 9 : num - 1);\n    } else {\n      this.review.activateReviewByHotkey(num);\n    }\n  };\n\n  openAttributesModal = () => {\n    if (this.readonly || this.shape.isDrawing) {\n      return;\n    }\n\n    // open point attributes modal\n    const { selectedShapes, selectedPointIndex, shapes } = this.shape;\n    if (selectedShapes.length === 1 && selectedPointIndex >= 0) {\n      const selectedShape = selectedShapes[0];\n      const { instanceItem } = shapes[selectedShape.uid];\n      const frameData = instanceItem.cameras[this.frame.currentCamera].frames[this.frame.currentFrame];\n      const { pointLabelConfig } = instanceItem.categoryItemRef;\n      if (frameData && pointLabelConfig) {\n        this.config.setPointAttributesModalVisible(true);\n        return;\n      }\n    }\n\n    // open instance & items attributes modal\n    if (this.instance.selectedInstanceAttributesEnabled) {\n      this.config.setAttributesModalVisible(true);\n    }\n  };\n}\n\nconst rootStore = new RootStore();\nexport default rootStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}