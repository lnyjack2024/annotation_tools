{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { message } from 'antd';\nimport { cloneDeep } from 'lodash';\nimport RootStore from './RootStore';\nimport ReviewItem from '../model/ReviewItem';\nimport { ReviewMode, ReviewResult, ViewMode } from '../types';\nimport { TOOLBAR_HEIGHT, SIDEBAR_WIDTH, REJECT_ALL_REVIEW_ID } from '../constants';\nimport i18n from '../locales';\nimport { calcShapeBounds, formatFrames, getToolTypeFromFrameData } from '../utils';\nimport Anchor, { EventAction } from '../../common/shapes/anchors/Anchor';\nimport Cursor from '../../common/Cursor';\nimport ApproveIcon from '../images/approve.png';\nimport RejectIcon from '../images/reject.png';\nimport SuspendIcon from '../images/suspend.png';\nimport ApproveSelectedIcon from '../images/approve_selected.png';\nimport RejectSelectedIcon from '../images/reject_selected.png';\nimport SuspendSelectedIcon from '../images/suspend_selected.png';\nimport { getReviewRelatedInstanceInfo } from '../components/review/ReviewModal';\nfunction getCenterPos({\n  left,\n  top,\n  right,\n  bottom\n}) {\n  const newPos = {};\n  newPos.x = (right + left) / 2;\n  newPos.y = (bottom + top) / 2;\n  return newPos;\n}\nfunction getIconByReviewResultType(type) {\n  switch (type) {\n    case ReviewResult.APPROVE:\n      return {\n        icon: ApproveIcon,\n        selectedIcon: ApproveSelectedIcon\n      };\n    case ReviewResult.REJECT:\n      return {\n        icon: RejectIcon,\n        selectedIcon: RejectSelectedIcon\n      };\n    case ReviewResult.SUSPEND:\n      return {\n        icon: SuspendIcon,\n        selectedIcon: SuspendSelectedIcon\n      };\n    default:\n  }\n  return {};\n}\nfunction getReviewResultSummary(reviews) {\n  const allResults = new Set(reviews.map(r => r.result));\n  if (allResults.has(ReviewResult.REJECT)) {\n    return ReviewResult.REJECT;\n  }\n  if (allResults.has(ReviewResult.SUSPEND)) {\n    return ReviewResult.SUSPEND;\n  }\n  if (allResults.has(ReviewResult.APPROVE)) {\n    return ReviewResult.APPROVE;\n  }\n  return undefined;\n}\n\n/**\n * store for reviews\n * @class\n */\nexport default class ReviewsStore {\n  /**\n   * review result types based on tool mode\n   * @getter\n   */\n  get reviewResultTypes() {\n    return this.rootStore.isAudit ? [ReviewResult.APPROVE, ReviewResult.REJECT, ReviewResult.SUSPEND] : [ReviewResult.APPROVE, ReviewResult.REJECT];\n  }\n\n  /**\n   * all reviews\n   * @getter\n   */\n  get allReviews() {\n    return Object.values(this.reviews).flatMap(frameReviews => frameReviews);\n  }\n\n  /**\n   * rejected count\n   * @getter\n   */\n  get rejectedCount() {\n    const reviews = this.allReviews.filter(r => r.result === ReviewResult.REJECT);\n    return reviews.length + (this.rejectAllReview && !this.rejectAllReview.temp ? 1 : 0);\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * initial data copy\n     */\n    this.initialData = null;\n    /**\n     * issue types\n     */\n    this.issueTypes = [];\n    /**\n     * reject all review item\n     */\n    this.rejectAllReview = null;\n    /**\n     * all reviews\n     */\n    this.reviews = {};\n    /**\n     * layer for reviews\n     */\n    this.reviewLayer = void 0;\n    /**\n     * review layer offset (according to document body)\n     */\n    this.reviewLayerOffset = {\n      x: SIDEBAR_WIDTH,\n      y: TOOLBAR_HEIGHT * 2\n    };\n    /**\n     * review anchors\n     */\n    this.anchors = {};\n    /**\n     * selected review id\n     */\n    this.selectedReviewId = '';\n    /**\n     * selected anchor\n     */\n    this.selectedAnchor = null;\n    /**\n     * selected review result type (default is approve)\n     */\n    this.selectedReviewResultType = ReviewResult.APPROVE;\n    /**\n     * is adding review anchor\n     */\n    this.addMode = false;\n    /**\n     * anchors visible\n     */\n    this.visible = true;\n    /**\n     * current editing review instance\n     */\n    this.editingReview = null;\n    /**\n     * current hovered review instance\n     */\n    this.hoveredReview = null;\n    /**\n     * hovered anchor\n     */\n    this.hoveredAnchor = null;\n    /**\n     * store id preserved before review edit\n     */\n    this.reviewStoreId = '';\n    /**\n     * hide or show reviews\n     */\n    this.hideOrShowReviews = () => {\n      const {\n        currentFrame\n      } = this.rootStore.frame;\n      if (!this.reviews[currentFrame]) {\n        return;\n      }\n      const {\n        visibleShapeIds,\n        getShapeByInstanceItem\n      } = this.rootStore.shape;\n      const {\n        instances\n      } = this.rootStore.instance;\n      this.reviews[currentFrame].forEach(review => {\n        const {\n          id,\n          instanceId,\n          instanceItemId,\n          camera\n        } = review;\n        let instance;\n        let instanceItem;\n        if (instanceId) {\n          instance = instances[instanceId];\n        }\n        if (instanceItemId && instance) {\n          instanceItem = instance.items[instanceItemId];\n        }\n        let shape;\n        if (instanceItem) {\n          shape = getShapeByInstanceItem(instanceItem, camera);\n        }\n        const anchor = this.anchors[id];\n        if (anchor) {\n          if (!this.visible || shape && visibleShapeIds.indexOf(shape.uid) < 0) {\n            this.anchors[id].anchor.visible = false;\n          } else {\n            this.anchors[id].anchor.visible = true;\n          }\n        }\n      });\n    };\n    /**\n     * focus review\n     * @param id\n     */\n    this.focusReview = id => {\n      if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n        const {\n          anchor\n        } = this.anchors[id] || {};\n        if (anchor) {\n          var _this$rootStore$frame;\n          const {\n            x,\n            y\n          } = anchor;\n          const offset = 250;\n          const anchorBounds = {\n            left: x - offset,\n            right: x + offset,\n            top: y - offset,\n            bottom: y + offset\n          };\n          (_this$rootStore$frame = this.rootStore.frame.currentCameraView) === null || _this$rootStore$frame === void 0 ? void 0 : _this$rootStore$frame.fitShapeToView(anchorBounds);\n        }\n      }\n    };\n    /**\n     * set anchors visibility\n     * @param visible\n     */\n    this.setAnchorsVisible = visible => {\n      this.visible = visible;\n      this.hideOrShowReviews();\n      if (this.rootStore.config.viewMode === ViewMode.GRID) {\n        this.rootStore.grid.hideOrShowReviews();\n      }\n    };\n    /**\n     * update reject all review info\n     */\n    this.updateRejectAllReviewInfo = ({\n      type,\n      comment\n    }) => {\n      if (!this.reviewStoreId) {\n        // start to update reject all review\n        this.reviewStoreId = this.rootStore.undo.preserve({\n          reviews: this.rejectAllReview && !this.rejectAllReview.temp ? [this.rejectAllReview.toJSON()] : []\n        });\n      }\n      if (!this.rejectAllReview) {\n        var _RootStore$jobProxy;\n        this.rejectAllReview = new ReviewItem({\n          id: REJECT_ALL_REVIEW_ID,\n          result: ReviewResult.REJECT,\n          camera: '',\n          frameIndex: -1,\n          position: {\n            x: 0,\n            y: 0\n          },\n          workerName: (_RootStore$jobProxy = RootStore.jobProxy) === null || _RootStore$jobProxy === void 0 ? void 0 : _RootStore$jobProxy.advanceWorkerName\n        });\n        // set to temp\n        this.rejectAllReview.temp = true;\n      }\n      if (type !== undefined) {\n        this.rejectAllReview.type = [...type];\n      }\n      if (comment !== undefined) {\n        this.rejectAllReview.comment = comment;\n      }\n    };\n    /**\n     * update & save reject all review\n     */\n    this.updateRejectAllReview = () => {\n      if (this.reviewStoreId && this.rejectAllReview) {\n        this.rootStore.undo.save(this.reviewStoreId, {\n          reviews: [this.rejectAllReview.toJSON()]\n        });\n        this.rejectAllReview.temp = false;\n        this.reviewStoreId = '';\n      }\n    };\n    /**\n     * delete reject all review\n     */\n    this.deleteRejectAllReview = () => {\n      if (this.rejectAllReview) {\n        this.rootStore.undo.push({\n          reviews: [this.rejectAllReview.toJSON()]\n        }, {\n          reviews: []\n        });\n        this.rejectAllReview = null;\n        this.reviewStoreId = '';\n      }\n    };\n    makeAutoObservable(this, {\n      rootStore: false,\n      initialData: false,\n      reviewLayer: false,\n      reviewLayerOffset: false,\n      anchors: false,\n      selectedReviewId: false,\n      selectedAnchor: false,\n      reviewStoreId: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * set intial data\n   * @param initialData\n   */\n  setInitialData(initialData) {\n    if (initialData) {\n      this.initialData = cloneDeep(initialData);\n    }\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   * @param initialReviews\n   */\n  init(payload, initialReviews) {\n    if (typeof payload.issue_types === 'string') {\n      this.issueTypes = payload.issue_types.split(',').map(i => i.trim()).filter(i => !!i);\n    }\n    this.initReviews(initialReviews);\n  }\n  initReviews(initialReviews) {\n    var _this$rootStore$jobPr;\n    this.clearReviewsAndAnchors();\n    if (((_this$rootStore$jobPr = this.rootStore.jobProxy) === null || _this$rootStore$jobPr === void 0 ? void 0 : _this$rootStore$jobPr.loadReviewEnabled) && initialReviews && Array.isArray(initialReviews)) {\n      const reviews = {};\n      initialReviews.forEach(review => {\n        const {\n          id,\n          frameIndex\n        } = review;\n        if (id === REJECT_ALL_REVIEW_ID) {\n          this.rejectAllReview = new ReviewItem(review);\n        } else {\n          if (!reviews[frameIndex]) {\n            reviews[frameIndex] = [];\n          }\n          const reviewItem = new ReviewItem(review);\n          reviews[frameIndex].push(reviewItem);\n        }\n      });\n      this.reviews = reviews;\n    }\n  }\n\n  /**\n   * get review in current frame by instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewForInstanceItem(instanceItem, camera = this.rootStore.frame.currentCamera, frameIndex = this.rootStore.frame.currentFrame) {\n    if (instanceItem) {\n      if (this.reviews[frameIndex]) {\n        const reviews = this.reviews[frameIndex].filter(r => r.camera === camera && r.instanceItemId === instanceItem.id && r.instanceId === instanceItem.instance.id);\n        return getReviewResultSummary(reviews);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * get total review result for instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewResultForInstanceItem(instanceItem, camera = this.rootStore.frame.currentCamera) {\n    const reviews = this.allReviews.filter(r => r.camera === camera && r.instanceItemId === instanceItem.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get total review result for instance\n   * @param instance\n   */\n  getReviewResultForInstance(instance) {\n    const reviews = this.allReviews.filter(r => r.instanceId === instance.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get reviews json data (for save)\n   */\n  reviewsJSON() {\n    const list = Object.values(this.reviews).flatMap(reviews => reviews.map(r => {\n      const review = r.toJSON();\n      const {\n        instanceId,\n        instanceItemId\n      } = review;\n      const {\n        infoStr,\n        instance,\n        instanceItem\n      } = getReviewRelatedInstanceInfo(r);\n      let label = infoStr;\n      if (!(instanceId || instanceItemId)) {\n        label = 'Missed';\n      } else if (!(instance || instanceItem)) {\n        label = 'Deleted';\n      }\n      return {\n        ...review,\n        label\n      };\n    }));\n    if (this.rejectAllReview && !this.rejectAllReview.temp) {\n      list.unshift({\n        ...this.rejectAllReview.toJSON(),\n        label: 'AllRejected'\n      });\n    }\n    return list;\n  }\n\n  /**\n   * get review statistics\n   */\n  getReviewStatistics(submit = false) {\n    const approvedFrameSet = new Set();\n    const rejectedFrameSet = new Set();\n    const rejectedElements = new Set();\n    const issueMap = {};\n    const approvedEleMap = {};\n    const rejectedEleMap = {};\n    // let modifiedCount = 0;\n\n    // const originRejectAll = this.initialData?.find((r: Review) => r.id === REJECT_ALL_REVIEW_ID);\n    // const originReviews = this.initialData?.filter((r: Review) => r.id !== REJECT_ALL_REVIEW_ID);\n    // const exitsingReviewIds: string[] = [];\n\n    const rejectAll = this.rejectAllReview && !this.rejectAllReview.temp;\n    const {\n      frameCount\n    } = this.rootStore.frame;\n    const {\n      instances\n    } = this.rootStore.instance;\n    Object.values(this.reviews).forEach(reviews => {\n      reviews.forEach(review => {\n        const {\n          result,\n          type,\n          instanceId,\n          instanceItemId,\n          camera,\n          frameIndex\n        } = review;\n        if (result === ReviewResult.REJECT) {\n          // reject\n          let eleKey = '';\n          let instance;\n          let frameData;\n          if (instanceId && instanceItemId) {\n            var _instance, _instance$items$insta, _instance$items$insta2;\n            instance = instances[instanceId];\n            frameData = (_instance = instance) === null || _instance === void 0 ? void 0 : (_instance$items$insta = _instance.items[instanceItemId]) === null || _instance$items$insta === void 0 ? void 0 : (_instance$items$insta2 = _instance$items$insta.cameras[camera]) === null || _instance$items$insta2 === void 0 ? void 0 : _instance$items$insta2.frames[frameIndex];\n            if (frameData) {\n              // shape exists\n              eleKey = `${instanceId}-${instanceItemId}-${camera}-${frameIndex}`;\n            }\n          }\n          rejectedFrameSet.add(frameIndex);\n          if (eleKey) {\n            rejectedElements.add(eleKey);\n          }\n          type === null || type === void 0 ? void 0 : type.forEach(t => {\n            if (!issueMap[t]) {\n              issueMap[t] = {\n                count: 0,\n                eleSet: new Set(),\n                categories: {}\n              };\n            }\n            issueMap[t].count += 1;\n            if (eleKey) {\n              issueMap[t].eleSet.add(eleKey);\n            }\n            if (instance && frameData) {\n              if (!issueMap[t].categories[instance.category]) {\n                issueMap[t].categories[instance.category] = {\n                  count: 0,\n                  shapes: {}\n                };\n              }\n              issueMap[t].categories[instance.category].count += 1;\n              if (issueMap[t].categories[instance.category].shapes[frameData.shapeType] === undefined) {\n                issueMap[t].categories[instance.category].shapes[frameData.shapeType] = 0;\n              }\n              issueMap[t].categories[instance.category].shapes[frameData.shapeType] += 1;\n            }\n          });\n        } else {\n          // approve, or suspend\n          approvedFrameSet.add(frameIndex);\n        }\n\n        // if (submit) {\n        //   const originReview = originReviews?.find((r: Review) => r.id === review.id);\n        //   delete originReview?.label; // remove label before compare\n        //   if (!originReview || !isEqual(originReview, removeUndefinedKeys(review.toJSON()))) {\n        //     modifiedCount += 1;\n        //   }\n        // }\n        // exitsingReviewIds.push(review.id);\n      });\n    });\n    if (rejectAll) {\n      var _this$rejectAllReview, _this$rejectAllReview2;\n      (_this$rejectAllReview = this.rejectAllReview) === null || _this$rejectAllReview === void 0 ? void 0 : (_this$rejectAllReview2 = _this$rejectAllReview.type) === null || _this$rejectAllReview2 === void 0 ? void 0 : _this$rejectAllReview2.forEach(t => {\n        if (!issueMap[t]) {\n          issueMap[t] = {\n            count: 0,\n            eleSet: new Set(),\n            categories: {}\n          };\n        }\n        issueMap[t].count += 1;\n      });\n    }\n    // if (submit) {\n    //   // check deleted reviews\n    //   const deletedReviews = originReviews?.filter((r: Review) => exitsingReviewIds.indexOf(r.id) < 0);\n    //   if (deletedReviews?.length > 0) {\n    //     modifiedCount += deletedReviews.length;\n    //   }\n\n    //   // check reject all\n    //   if ((!originRejectAll && rejectAll) || (originRejectAll && !rejectAll)) {\n    //     // one of origin reject all & reject all not exists\n    //     modifiedCount += 1;\n    //   } else if (originRejectAll && rejectAll) {\n    //     // compare\n    //     delete originRejectAll.label;\n    //     if (!isEqual(originRejectAll, removeUndefinedKeys(this.rejectAllReview!.toJSON()))) {\n    //       modifiedCount += 1;\n    //     }\n    //   }\n    // }\n\n    // filter out rejected frames\n    new Set(approvedFrameSet).forEach(frame => {\n      if (rejectedFrameSet.has(frame)) {\n        approvedFrameSet.delete(frame);\n      }\n    });\n    const allInstances = Object.values(instances);\n    for (let i = 0; i < allInstances.length; i += 1) {\n      const instance = allInstances[i];\n      const items = Object.values(instance.items);\n      for (let j = 0; j < items.length; j += 1) {\n        const item = items[j];\n        const cameras = Object.values(item.cameras);\n        for (let k = 0; k < cameras.length; k += 1) {\n          const camera = cameras[k];\n          const frames = Object.values(camera.frames);\n          for (let l = 0; l < frames.length; l += 1) {\n            const frame = frames[l];\n            const shape = getToolTypeFromFrameData(frame);\n            if (shape) {\n              const {\n                frameIndex\n              } = frame;\n              const eleKey = `${instance.id}-${item.id}-${camera.camera}-${frameIndex}`;\n              if (rejectAll || rejectedElements.has(eleKey)) {\n                // shape rejected\n                if (!rejectedEleMap[shape]) {\n                  rejectedEleMap[shape] = 0;\n                }\n                rejectedEleMap[shape] += 1;\n              } else if (approvedFrameSet.has(frameIndex) || rejectedFrameSet.has(frameIndex)) {\n                // shape approved\n                // or not reviewed but in frames with review status\n                if (!approvedEleMap[shape]) {\n                  approvedEleMap[shape] = 0;\n                }\n                approvedEleMap[shape] += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n    const issues = {};\n    const issuesByCategory = {};\n    Object.keys(issueMap).forEach(key => {\n      const {\n        count,\n        eleSet,\n        categories\n      } = issueMap[key];\n      const elements = eleSet.size;\n      issues[key] = {\n        count,\n        elements\n      };\n      issuesByCategory[key] = {\n        count,\n        elements,\n        categories\n      };\n    });\n    return {\n      issues,\n      issuesByCategory,\n      frames: {\n        approved: rejectAll ? 0 : approvedFrameSet.size,\n        rejected: rejectAll ? frameCount : rejectedFrameSet.size\n      },\n      elements: {\n        approved: {\n          ...approvedEleMap\n        },\n        rejected: {\n          ...rejectedEleMap\n        }\n      }\n      // ...submit && { modifiedCount },\n    };\n  }\n\n  /**\n   * set layer for review anchors\n   * @param layer\n   */\n  setReviewLayer(layer) {\n    this.reviewLayer = layer;\n  }\n\n  /**\n   * set layer offset\n   * @param x\n   * @param y\n   */\n  setReviewLayerOffset(x, y) {\n    this.reviewLayerOffset.x = x;\n    this.reviewLayerOffset.y = y;\n  }\n  setAnchorCenter(review) {\n    let pos = {};\n    const {\n      camera,\n      frameIndex,\n      instanceId,\n      instanceItemId\n    } = review;\n    if (instanceId && instanceItemId) {\n      var _this$rootStore$insta, _this$rootStore$insta2, _this$rootStore$insta3;\n      const frameData = (_this$rootStore$insta = this.rootStore.instance.instances[instanceId]) === null || _this$rootStore$insta === void 0 ? void 0 : (_this$rootStore$insta2 = _this$rootStore$insta.items[instanceItemId]) === null || _this$rootStore$insta2 === void 0 ? void 0 : (_this$rootStore$insta3 = _this$rootStore$insta2.cameras[camera]) === null || _this$rootStore$insta3 === void 0 ? void 0 : _this$rootStore$insta3.frames[frameIndex];\n      if (frameData) {\n        const {\n          shapeType,\n          shape\n        } = frameData;\n        const shapeBounds = calcShapeBounds(shapeType, shape);\n        if (shapeBounds) {\n          pos = getCenterPos(shapeBounds);\n        }\n      }\n    }\n    return pos;\n  }\n\n  /**\n   * setup anchors in current frame & current camera\n   */\n  setupReviewAnchors() {\n    this.clearAnchors();\n    const {\n      cameraViews,\n      currentFrame\n    } = this.rootStore.frame;\n    (this.reviews[currentFrame] || []).forEach(review => {\n      const {\n        id,\n        camera,\n        result,\n        isFromCopy\n      } = review;\n      let {\n        x,\n        y\n      } = review;\n      if (isFromCopy) {\n        review.isFromCopy = false;\n        const {\n          x: centerX,\n          y: centerY\n        } = this.setAnchorCenter(review);\n        if (centerX) {\n          x = centerX;\n          review.x = centerX;\n        }\n        if (centerY) {\n          y = centerY;\n          review.y = centerY;\n        }\n      }\n      if (!this.rootStore.isRework || result === ReviewResult.REJECT) {\n        // only show reject anchors when rework\n        const cameraView = cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.createReviewAnchor(result, x, y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.anchors[id] = {\n              anchor,\n              camera\n            };\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * create anchor instance\n   * @param type\n   * @param x\n   * @param y\n   * @param container\n   * @param viewScale\n   */\n  createReviewAnchor(type, x, y, container = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (container) {\n      const {\n        icon,\n        selectedIcon\n      } = getIconByReviewResultType(type);\n      if (icon && selectedIcon) {\n        const anchor = new Anchor({\n          container,\n          scale: viewScale,\n          x,\n          y,\n          img: icon,\n          selectedImg: selectedIcon\n        });\n        this.addAnchorListeners(anchor);\n        return anchor;\n      }\n    }\n    return null;\n  }\n  createReviewAnchorByReview(review, container = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    let {\n      x,\n      y\n    } = review;\n    if (review.isFromCopy) {\n      review.isFromCopy = false;\n      const {\n        x: centerX,\n        y: centerY\n      } = this.setAnchorCenter(review);\n      if (centerX) {\n        x = centerX;\n        review.x = centerX;\n      }\n      if (centerY) {\n        y = centerY;\n        review.y = centerY;\n      }\n    }\n    return this.createReviewAnchor(review.result, x, y, container, viewScale);\n  }\n\n  /**\n   * get review instance by anchor instance\n   * @param anchor\n   */\n  getReviewByAnchor(anchor) {\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      const reviewId = Object.keys(this.anchors).find(id => this.anchors[id].anchor === anchor);\n      if (reviewId) {\n        return this.reviews[this.rootStore.frame.currentFrame].find(r => r.id === reviewId);\n      }\n    } else if (this.rootStore.config.viewMode === ViewMode.GRID) {\n      return anchor.data;\n    }\n    return undefined;\n  }\n\n  /**\n   * add listeners for anchor\n   * @param anchor\n   */\n  addAnchorListeners(anchor) {\n    anchor.on(EventAction.SELECTED, a => {\n      if (this.addMode) {\n        return;\n      }\n      const review = this.getReviewByAnchor(a);\n      if (review) {\n        this.selectReview(review, a);\n\n        // select related instance\n        let instance;\n        let instanceItem;\n        if (review.instanceId) {\n          instance = this.rootStore.instance.getInstanceById(review.instanceId);\n          if (instance && review.instanceItemId) {\n            instanceItem = instance.items[review.instanceItemId];\n          }\n        }\n        if (instanceItem) {\n          this.rootStore.instance.selectInstanceItem(instanceItem);\n        } else if (instance) {\n          this.rootStore.instance.selectInstance(instance);\n        }\n\n        // open modal in review mode\n        if (this.rootStore.config.reviewMode === ReviewMode.REVIEW) {\n          this.reviewStoreId = this.rootStore.undo.preserve({\n            reviews: [review.toJSON()]\n          });\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OVER, a => {\n      if (this.rootStore.config.reviewMode === ReviewMode.LABELING) {\n        // only show comment in labeling mode\n        const review = this.getReviewByAnchor(a);\n        if (review) {\n          this.setHoveredReview(review, a);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OUT, () => {\n      this.setHoveredReview(null, null);\n    });\n  }\n\n  /**\n   * set editing review\n   * @param review\n   */\n  setEditingReview(review) {\n    this.editingReview = review;\n  }\n\n  /**\n   * set hovered review\n   * @param review\n   */\n  setHoveredReview(review, anchor) {\n    this.hoveredReview = review;\n    this.hoveredAnchor = anchor;\n  }\n\n  /**\n   * select review\n   * @param review\n   * @param anchor\n   */\n  selectReview(review, anchor) {\n    if (review.camera !== this.rootStore.frame.currentCamera) {\n      this.rootStore.frame.setCamera(review.camera);\n    }\n    if (review.frameIndex !== this.rootStore.frame.currentFrame) {\n      this.rootStore.frame.setFrame(review.frameIndex);\n    }\n    if (this.selectedAnchor && this.selectedAnchor !== anchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = review.id;\n    this.selectedAnchor = anchor;\n    this.selectedAnchor.selected = true;\n  }\n\n  /**\n   * unselect review\n   */\n  unselectReview() {\n    if (this.selectedAnchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n  }\n\n  /**\n   * clear all anchors\n   */\n  clearAnchors() {\n    Object.values(this.anchors).forEach(({\n      anchor\n    }) => {\n      anchor.destroy();\n    });\n    this.anchors = {};\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n    this.setEditingReview(null);\n    this.setHoveredReview(null, null);\n    this.reviewStoreId = '';\n  }\n\n  /**\n   * get anchors for camera\n   * @param camera\n   */\n  getAnchorsForCamera(camera = this.rootStore.frame.currentCamera) {\n    return Object.values(this.anchors).filter(i => i.camera === camera);\n  }\n\n  /**\n   * update anchors' scale\n   * @param scale\n   * @param camera\n   */\n  updateAnchorsScale(scale, camera) {\n    this.getAnchorsForCamera(camera).forEach(({\n      anchor\n    }) => {\n      anchor.setScale(scale);\n    });\n  }\n\n  /**\n   * update anchors' interactive\n   * @param interactive\n   */\n  updateAnchorsInteractive(interactive) {\n    Object.values(this.anchors).forEach(({\n      anchor\n    }) => {\n      anchor.interactive = interactive;\n    });\n  }\n  /**\n   * activate review tool\n   * @param type\n   */\n  activateReview(type) {\n    this.selectedReviewResultType = type;\n    this.setAddMode(true);\n  }\n\n  /**\n   * activate review tool by hotkey\n   * @param hotkey\n   */\n  activateReviewByHotkey(hotkey) {\n    if (hotkey === 1) {\n      // approve\n      this.activateReview(ReviewResult.APPROVE);\n    } else if (hotkey === 2) {\n      // reject\n      this.activateReview(ReviewResult.REJECT);\n    } else if (hotkey === 3 && this.reviewResultTypes.includes(ReviewResult.SUSPEND)) {\n      // suspend\n      this.activateReview(ReviewResult.SUSPEND);\n    }\n  }\n\n  /**\n   * set review add mode\n   * @param addMode\n   */\n  setAddMode(addMode) {\n    this.addMode = addMode;\n    this.rootStore.config.setMeasureMode(false);\n    this.rootStore.config.setCursor(addMode ? Cursor.POINTER : Cursor.DEFAULT);\n    this.updateAnchorsInteractive(!addMode);\n    if (addMode && !this.visible) {\n      this.setAnchorsVisible(true);\n    }\n  }\n  /**\n   * set review position center for grid mode\n   * @param review\n   * @param pos : default position\n   */\n\n  setCenterPosForGrid(review, pos) {\n    const {\n      frameIndex,\n      instanceItemId\n    } = review;\n    // const { gridCanvas } = this.rootStore.grid;\n    // if (gridCanvas) {\n    //   const shapeList: Shape<ShapeData>[] = gridCanvas.getGridShapes(frameIndex);\n    //   if (shapeList && shapeList.length > 0) {\n    //     const shape = shapeList.find((i) => i.data?.id === instanceItemId);\n    //     if (shape?.shapeBounds) {\n    //       const { x: centerX, y: centerY } = getCenterPos(shape.shapeBounds);\n    //       review.isFromCopy = false;\n    //       if (centerX) {\n    //         pos.x = centerX;\n    //         review.x = centerX;\n    //       }\n    //       if (centerY) {\n    //         pos.y = centerY;\n    //         review.y = centerY;\n    //       }\n    //     }\n    //   }\n    // }\n    return pos;\n  }\n  copyReview(review, frameIndex, camera) {\n    var _RootStore$jobProxy2;\n    const {\n      instanceId: reviewInstanceId,\n      instanceItemId: reviewInstanceItemId,\n      x,\n      y,\n      comment,\n      type,\n      result\n    } = review;\n    const newReview = new ReviewItem({\n      isFromCopy: true,\n      camera,\n      frameIndex,\n      comment,\n      result,\n      type,\n      instanceId: reviewInstanceId,\n      instanceItemId: reviewInstanceItemId,\n      position: {\n        x,\n        y\n      },\n      workerName: (_RootStore$jobProxy2 = RootStore.jobProxy) === null || _RootStore$jobProxy2 === void 0 ? void 0 : _RootStore$jobProxy2.advanceWorkerName\n    });\n    if (this.rootStore.config.viewMode === ViewMode.GRID) {\n      const pos = this.setCenterPosForGrid(newReview, {\n        x,\n        y\n      });\n      // const { gridCanvas } = this.rootStore.grid;\n      // if (gridCanvas) {\n      //   const grid = gridCanvas.cachedGrids[frameIndex];\n      //   if (grid) {\n      //     const anchor = this.createReviewAnchor(this.selectedReviewResultType, pos.x, pos.y, grid.view, grid.viewScale);\n      //     if (anchor) {\n      //       anchor.data = newReview;\n      //       grid.reviews.push(anchor);\n      //     }\n      //   }\n      // }\n    }\n    return newReview;\n  }\n\n  /**\n   * add review when click canvas\n   * @param point\n   * @param layer\n   * @param viewScale\n   */\n  addReview(point, layer = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (this.addMode) {\n      let instanceId;\n      let instanceItemId;\n      const {\n        isSingleSelected,\n        selectedInstances,\n        selectedInstanceItems\n      } = this.rootStore.instance;\n      if (isSingleSelected) {\n        // link to the shape\n        instanceItemId = selectedInstanceItems[0].id;\n        instanceId = selectedInstances[0].id;\n      }\n      const anchor = this.createReviewAnchor(this.selectedReviewResultType, point.x, point.y, layer, viewScale);\n      if (anchor) {\n        var _RootStore$jobProxy3;\n        const {\n          currentCamera,\n          currentFrame\n        } = this.rootStore.frame;\n        const review = new ReviewItem({\n          camera: currentCamera,\n          frameIndex: currentFrame,\n          result: this.selectedReviewResultType,\n          instanceId,\n          instanceItemId,\n          position: {\n            x: point.x,\n            y: point.y\n          },\n          workerName: (_RootStore$jobProxy3 = RootStore.jobProxy) === null || _RootStore$jobProxy3 === void 0 ? void 0 : _RootStore$jobProxy3.advanceWorkerName\n        });\n        if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n          this.anchors[review.id] = {\n            anchor,\n            camera: currentCamera\n          };\n        } else {\n          anchor.data = review;\n        }\n        this.selectReview(review, anchor);\n        if (!this.rootStore.config.continuousMode) {\n          this.setAddMode(false);\n        } else {\n          anchor.interactive = false;\n        }\n        if (review.result === ReviewResult.REJECT) {\n          var _this$issueTypes;\n          // open modal\n          this.reviewStoreId = this.rootStore.undo.preserve();\n          if (this.rootStore.config.defaultIssueType && ((_this$issueTypes = this.issueTypes) === null || _this$issueTypes === void 0 ? void 0 : _this$issueTypes[0])) {\n            review.type = [this.issueTypes[0]];\n          }\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        } else {\n          // save directly\n          this.insertReview(review);\n          this.unselectReview();\n        }\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * insert review\n   * @param review\n   */\n  insertReview(review) {\n    const storeId = this.rootStore.undo.preserve();\n    const {\n      frameIndex\n    } = review;\n    if (!this.reviews[frameIndex]) {\n      this.reviews[frameIndex] = [];\n    }\n    this.reviews[frameIndex].push(review);\n    this.rootStore.undo.save(storeId, {\n      reviews: [review.toJSON()]\n    });\n  }\n\n  /**\n   * update review\n   * @param review  is editing review item\n   * @param copyToFrames copy to frames index\n   */\n  updateReview(review, copyToFrames = []) {\n    if (this.reviewStoreId) {\n      const changedReviews = [review.toJSON()];\n      const handledFrames = [];\n      const {\n        frameIndex,\n        result\n      } = review;\n      if (!this.reviews[frameIndex]) {\n        this.reviews[frameIndex] = [];\n      }\n      if (this.reviews[frameIndex].indexOf(review) < 0) {\n        this.reviews[frameIndex].push(review);\n      }\n      const {\n        camera\n      } = review;\n      const {\n        instanceItem: reviewInstanceItem\n      } = getReviewRelatedInstanceInfo(review);\n      if (reviewInstanceItem) {\n        const reviewInstanceItemFrames = reviewInstanceItem.cameras[camera].frames;\n        const framesArr = Object.keys(reviewInstanceItemFrames);\n        copyToFrames.forEach(_frameIndex => {\n          if (!this.reviews[_frameIndex]) {\n            this.reviews[_frameIndex] = [];\n          }\n          if (framesArr.indexOf(_frameIndex.toString()) > -1) {\n            if (this.reviews[_frameIndex].indexOf(review) < 0) {\n              const copyedReview = this.copyReview(review, _frameIndex, camera);\n              if (copyedReview) {\n                this.reviews[_frameIndex].push(copyedReview);\n                handledFrames.push(_frameIndex);\n                changedReviews.push(copyedReview.toJSON());\n              }\n            } else {\n              handledFrames.push(_frameIndex);\n            }\n          }\n        });\n        if (result === ReviewResult.REJECT && (handledFrames.length === 1 && handledFrames[0] !== frameIndex || handledFrames.length > 1)) {\n          message.info(i18n.translate('APPLY_FRAMES_RANGE_FRAMES_REJECTED', {\n            values: {\n              label: reviewInstanceItem.label,\n              frames: formatFrames(handledFrames)\n            }\n          }));\n        }\n      }\n      this.rootStore.undo.save(this.reviewStoreId, {\n        reviews: changedReviews\n      });\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete review\n   * @param review\n   * @param anchor\n   */\n  deleteReview(review, anchor) {\n    const {\n      id,\n      frameIndex\n    } = review;\n    const frameReviews = this.reviews[frameIndex] || [];\n    const index = frameReviews.findIndex(r => r.id === id);\n    let existed = false;\n    if (index >= 0) {\n      existed = true;\n      frameReviews.splice(index, 1);\n    }\n    anchor.destroy();\n    if (this.anchors[id]) {\n      delete this.anchors[id];\n    }\n    if (existed && this.reviewStoreId) {\n      this.rootStore.undo.save(this.reviewStoreId);\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete reviews by reviewIds\n   * @param reviewResObj\n   */\n  deleteReviews(reviewResObj) {\n    const reviewStoreId = this.rootStore.undo.preserve({\n      reviews: this.reviewsJSON()\n    });\n    const reviewIds = Object.keys(reviewResObj);\n    for (let index = 0; index < reviewIds.length; index += 1) {\n      var _this$rejectAllReview3;\n      const reviewItemId = reviewIds[index];\n      if (reviewItemId === ((_this$rejectAllReview3 = this.rejectAllReview) === null || _this$rejectAllReview3 === void 0 ? void 0 : _this$rejectAllReview3.id)) {\n        this.rejectAllReview = null;\n      } else {\n        const review = reviewResObj[reviewItemId];\n        const {\n          frameIndex\n        } = review;\n        const frameReviews = this.reviews[frameIndex] || [];\n        const frameReviewIndex = frameReviews.findIndex(r => r.id === reviewItemId);\n        if (frameReviewIndex >= 0) {\n          frameReviews.splice(frameReviewIndex, 1);\n        }\n        if (this.anchors[reviewItemId]) {\n          const anchor = this.anchors[reviewItemId].anchor;\n          anchor.destroy();\n          delete this.anchors[reviewItemId];\n        }\n      }\n    }\n    if (reviewStoreId) {\n      this.rootStore.undo.save(reviewStoreId, {\n        reviews: this.reviewsJSON()\n      });\n    }\n  }\n\n  /**\n   * clear all reviews and anchors\n   */\n  clearReviewsAndAnchors() {\n    const reviewStoreId = this.rootStore.undo.preserve({\n      reviews: this.reviewsJSON()\n    });\n    this.reviews = {};\n    this.clearAnchors();\n    if (reviewStoreId) {\n      this.rootStore.undo.save(reviewStoreId, {\n        reviews: []\n      });\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewResult(review, result, anchor) {\n    if (review.result !== result) {\n      review.result = result;\n      if (result === ReviewResult.APPROVE) {\n        review.type = [];\n        review.comment = '';\n      }\n      // update anchor\n      const {\n        icon,\n        selectedIcon\n      } = getIconByReviewResultType(result);\n      if (icon && selectedIcon) {\n        anchor.setImage(icon, selectedIcon);\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewInfo(review, {\n    type,\n    comment,\n    x,\n    y\n  }) {\n    if (type !== undefined) {\n      review.type = [...type];\n    }\n    if (comment !== undefined) {\n      review.comment = comment;\n    }\n    if (x !== undefined) {\n      review.x = x;\n    }\n    if (y !== undefined) {\n      review.y = y;\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","message","cloneDeep","RootStore","ReviewItem","ReviewMode","ReviewResult","ViewMode","TOOLBAR_HEIGHT","SIDEBAR_WIDTH","REJECT_ALL_REVIEW_ID","i18n","calcShapeBounds","formatFrames","getToolTypeFromFrameData","Anchor","EventAction","Cursor","ApproveIcon","RejectIcon","SuspendIcon","ApproveSelectedIcon","RejectSelectedIcon","SuspendSelectedIcon","getReviewRelatedInstanceInfo","getCenterPos","left","top","right","bottom","newPos","x","y","getIconByReviewResultType","type","APPROVE","icon","selectedIcon","REJECT","SUSPEND","getReviewResultSummary","reviews","allResults","Set","map","r","result","has","undefined","ReviewsStore","reviewResultTypes","rootStore","isAudit","allReviews","Object","values","flatMap","frameReviews","rejectedCount","filter","length","rejectAllReview","temp","constructor","initialData","issueTypes","reviewLayer","reviewLayerOffset","anchors","selectedReviewId","selectedAnchor","selectedReviewResultType","addMode","visible","editingReview","hoveredReview","hoveredAnchor","reviewStoreId","hideOrShowReviews","currentFrame","frame","visibleShapeIds","getShapeByInstanceItem","shape","instances","instance","forEach","review","id","instanceId","instanceItemId","camera","instanceItem","items","anchor","indexOf","uid","focusReview","config","viewMode","DEFAULT","_this$rootStore$frame","offset","anchorBounds","currentCameraView","fitShapeToView","setAnchorsVisible","GRID","grid","updateRejectAllReviewInfo","comment","undo","preserve","toJSON","_RootStore$jobProxy","frameIndex","position","workerName","jobProxy","advanceWorkerName","updateRejectAllReview","save","deleteRejectAllReview","push","autoBind","setInitialData","init","payload","initialReviews","issue_types","split","i","trim","initReviews","_this$rootStore$jobPr","clearReviewsAndAnchors","loadReviewEnabled","Array","isArray","reviewItem","getReviewForInstanceItem","currentCamera","getReviewResultForInstanceItem","getReviewResultForInstance","reviewsJSON","list","infoStr","label","unshift","getReviewStatistics","submit","approvedFrameSet","rejectedFrameSet","rejectedElements","issueMap","approvedEleMap","rejectedEleMap","rejectAll","frameCount","eleKey","frameData","_instance","_instance$items$insta","_instance$items$insta2","cameras","frames","add","t","count","eleSet","categories","category","shapes","shapeType","_this$rejectAllReview","_this$rejectAllReview2","delete","allInstances","j","item","k","l","issues","issuesByCategory","keys","key","elements","size","approved","rejected","setReviewLayer","layer","setReviewLayerOffset","setAnchorCenter","pos","_this$rootStore$insta","_this$rootStore$insta2","_this$rootStore$insta3","shapeBounds","setupReviewAnchors","clearAnchors","cameraViews","isFromCopy","centerX","centerY","isRework","cameraView","createReviewAnchor","viewScale","container","scale","img","selectedImg","addAnchorListeners","createReviewAnchorByReview","getReviewByAnchor","reviewId","find","data","on","SELECTED","a","selectReview","getInstanceById","selectInstanceItem","selectInstance","reviewMode","REVIEW","setEditingReview","setReviewModalVisible","POINTER_OVER","LABELING","setHoveredReview","POINTER_OUT","setCamera","setFrame","selected","unselectReview","destroy","getAnchorsForCamera","updateAnchorsScale","setScale","updateAnchorsInteractive","interactive","activateReview","setAddMode","activateReviewByHotkey","hotkey","includes","setMeasureMode","setCursor","POINTER","setCenterPosForGrid","copyReview","_RootStore$jobProxy2","reviewInstanceId","reviewInstanceItemId","newReview","addReview","point","isSingleSelected","selectedInstances","selectedInstanceItems","_RootStore$jobProxy3","continuousMode","_this$issueTypes","defaultIssueType","insertReview","storeId","updateReview","copyToFrames","changedReviews","handledFrames","reviewInstanceItem","reviewInstanceItemFrames","framesArr","_frameIndex","toString","copyedReview","info","translate","deleteReview","index","findIndex","existed","splice","deleteReviews","reviewResObj","reviewIds","_this$rejectAllReview3","reviewItemId","frameReviewIndex","updateReviewResult","setImage","updateReviewInfo"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/ReviewStore.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { Container, Point } from 'pixi.js';\nimport { message } from 'antd';\nimport { cloneDeep, isEqual } from 'lodash';\nimport RootStore from './RootStore';\nimport ReviewItem from '../model/ReviewItem';\nimport Instance from '../model/Instance';\nimport InstanceItem from '../model/InstanceItem';\nimport FrameData from '../model/FrameData';\nimport { Payload, Review, ReviewMode, ReviewResult, ViewMode } from '../types';\nimport { TOOLBAR_HEIGHT, SIDEBAR_WIDTH, REJECT_ALL_REVIEW_ID } from '../constants';\nimport i18n from '../locales';\nimport { calcShapeBounds, formatFrames, getToolTypeFromFrameData } from '../utils';\nimport Anchor, { EventAction } from '../../common/shapes/anchors/Anchor';\nimport Cursor from '../../common/Cursor';\nimport ApproveIcon from '../images/approve.png';\nimport RejectIcon from '../images/reject.png';\nimport SuspendIcon from '../images/suspend.png';\nimport ApproveSelectedIcon from '../images/approve_selected.png';\nimport RejectSelectedIcon from '../images/reject_selected.png';\nimport SuspendSelectedIcon from '../images/suspend_selected.png';\nimport { getReviewRelatedInstanceInfo } from '../components/review/ReviewModal';\nimport { removeUndefinedKeys } from '../../../utils';\n\nfunction getCenterPos({ left, top, right, bottom }: { left: number, top: number, right: number, bottom: number }) {\n  const newPos: { x?: number, y?: number } = {};\n  newPos.x = (right + left) / 2;\n  newPos.y = (bottom + top) / 2;\n  return newPos;\n}\n\nfunction getIconByReviewResultType(type: ReviewResult) {\n  switch (type) {\n    case ReviewResult.APPROVE:\n      return { icon: ApproveIcon, selectedIcon: ApproveSelectedIcon };\n    case ReviewResult.REJECT:\n      return { icon: RejectIcon, selectedIcon: RejectSelectedIcon };\n    case ReviewResult.SUSPEND:\n      return { icon: SuspendIcon, selectedIcon: SuspendSelectedIcon };\n    default:\n  }\n  return {};\n}\n\nfunction getReviewResultSummary(reviews: ReviewItem[]) {\n  const allResults = new Set(reviews.map((r) => r.result));\n  if (allResults.has(ReviewResult.REJECT)) {\n    return ReviewResult.REJECT;\n  }\n  if (allResults.has(ReviewResult.SUSPEND)) {\n    return ReviewResult.SUSPEND;\n  }\n  if (allResults.has(ReviewResult.APPROVE)) {\n    return ReviewResult.APPROVE;\n  }\n  return undefined;\n}\n\n/**\n * store for reviews\n * @class\n */\nexport default class ReviewsStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * initial data copy\n   */\n  initialData: any = null;\n\n  /**\n   * issue types\n   */\n  issueTypes: string[] = [];\n\n  /**\n   * reject all review item\n   */\n  rejectAllReview: ReviewItem | null = null;\n\n  /**\n   * all reviews\n   */\n  reviews: { [frameIndex: number]: ReviewItem[] } = {};\n\n  /**\n   * layer for reviews\n   */\n  reviewLayer?: Container;\n\n  /**\n   * review layer offset (according to document body)\n   */\n  reviewLayerOffset = { x: SIDEBAR_WIDTH, y: TOOLBAR_HEIGHT * 2 };\n\n  /**\n   * review anchors\n   */\n  anchors: {\n    [reviewId: string]: {\n      anchor: Anchor;\n      camera: string;\n    };\n  } = {};\n\n  /**\n   * selected review id\n   */\n  selectedReviewId = '';\n\n  /**\n   * selected anchor\n   */\n  selectedAnchor: Anchor | null = null;\n\n  /**\n   * selected review result type (default is approve)\n   */\n  selectedReviewResultType: ReviewResult = ReviewResult.APPROVE;\n\n  /**\n   * is adding review anchor\n   */\n  addMode = false;\n\n  /**\n   * anchors visible\n   */\n  visible = true;\n\n  /**\n   * current editing review instance\n   */\n  editingReview: ReviewItem | null = null;\n\n  /**\n   * current hovered review instance\n   */\n  hoveredReview: ReviewItem | null = null;\n\n  /**\n   * hovered anchor\n   */\n  hoveredAnchor: Anchor | null = null;\n\n  /**\n   * store id preserved before review edit\n   */\n  reviewStoreId = '';\n\n  /**\n   * review result types based on tool mode\n   * @getter\n   */\n  get reviewResultTypes() {\n    return this.rootStore.isAudit ? [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n      ReviewResult.SUSPEND,\n    ] : [\n      ReviewResult.APPROVE,\n      ReviewResult.REJECT,\n    ];\n  }\n\n  /**\n   * all reviews\n   * @getter\n   */\n  get allReviews() {\n    return Object.values(this.reviews).flatMap((frameReviews) => frameReviews);\n  }\n\n  /**\n   * rejected count\n   * @getter\n   */\n  get rejectedCount() {\n    const reviews = this.allReviews.filter((r) => r.result === ReviewResult.REJECT);\n    return reviews.length + (this.rejectAllReview && !this.rejectAllReview.temp ? 1 : 0);\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n      initialData: false,\n      reviewLayer: false,\n      reviewLayerOffset: false,\n      anchors: false,\n      selectedReviewId: false,\n      selectedAnchor: false,\n      reviewStoreId: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * set intial data\n   * @param initialData\n   */\n  setInitialData(initialData: any) {\n    if (initialData) {\n      this.initialData = cloneDeep(initialData);\n    }\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   * @param initialReviews\n   */\n  init(payload: Payload, initialReviews?: Review[]) {\n    if (typeof payload.issue_types === 'string') {\n      this.issueTypes = payload.issue_types.split(',').map((i) => i.trim()).filter((i) => !!i);\n    }\n    this.initReviews(initialReviews);\n  }\n\n  initReviews(initialReviews?: Review[]) {\n    this.clearReviewsAndAnchors();\n    if (\n      this.rootStore.jobProxy?.loadReviewEnabled\n      && initialReviews\n      && Array.isArray(initialReviews)\n    ) {\n      const reviews: { [frameIndex: number]: ReviewItem[] } = {};\n      initialReviews.forEach((review) => {\n        const { id, frameIndex } = review;\n        if (id === REJECT_ALL_REVIEW_ID) {\n          this.rejectAllReview = new ReviewItem(review);\n        } else {\n          if (!reviews[frameIndex]) {\n            reviews[frameIndex] = [];\n          }\n          const reviewItem = new ReviewItem(review);\n          reviews[frameIndex].push(reviewItem);\n        }\n      });\n      this.reviews = reviews;\n    }\n  }\n\n  /**\n   * get review in current frame by instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewForInstanceItem(\n    instanceItem?: InstanceItem | null,\n    camera = this.rootStore.frame.currentCamera,\n    frameIndex = this.rootStore.frame.currentFrame,\n  ) {\n    if (instanceItem) {\n      if (this.reviews[frameIndex]) {\n        const reviews = this.reviews[frameIndex].filter((r) => (\n          r.camera === camera &&\n          r.instanceItemId === instanceItem.id &&\n          r.instanceId === instanceItem.instance.id\n        ));\n        return getReviewResultSummary(reviews);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * get total review result for instance item\n   * @param instanceItem\n   * @param camera\n   */\n  getReviewResultForInstanceItem(\n    instanceItem: InstanceItem,\n    camera = this.rootStore.frame.currentCamera,\n  ) {\n    const reviews = this.allReviews.filter((r) => r.camera === camera && r.instanceItemId === instanceItem.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get total review result for instance\n   * @param instance\n   */\n  getReviewResultForInstance(instance: Instance) {\n    const reviews = this.allReviews.filter((r) => r.instanceId === instance.id);\n    return getReviewResultSummary(reviews);\n  }\n\n  /**\n   * get reviews json data (for save)\n   */\n  reviewsJSON() {\n    const list = Object.values(this.reviews)\n      .flatMap((reviews) => reviews.map((r) => {\n        const review = r.toJSON();\n        const { instanceId, instanceItemId } = review;\n        const { infoStr, instance, instanceItem } = getReviewRelatedInstanceInfo(r);\n        let label = infoStr;\n        if (!(instanceId || instanceItemId)) {\n          label = 'Missed';\n        } else if (!(instance || instanceItem)) {\n          label = 'Deleted';\n        }\n        return {\n          ...review,\n          label,\n        };\n      }));\n    if (this.rejectAllReview && !this.rejectAllReview.temp) {\n      list.unshift({\n        ...this.rejectAllReview.toJSON(),\n        label: 'AllRejected',\n      });\n    }\n    return list;\n  }\n\n  /**\n   * get review statistics\n   */\n  getReviewStatistics(submit = false) {\n    const approvedFrameSet = new Set<number>();\n    const rejectedFrameSet = new Set<number>();\n    const rejectedElements = new Set<string>();\n    const issueMap: {\n      [type: string]: {\n        count: number;\n        eleSet: Set<string>;\n        categories: {\n          [category: string]: {\n            count: number;\n            shapes: {\n              [shapeType: string]: number;\n            }\n          }\n        }\n      }\n    } = {};\n    const approvedEleMap: {\n      [type: string]: number;\n    } = {};\n    const rejectedEleMap: {\n      [type: string]: number;\n    } = {};\n    // let modifiedCount = 0;\n\n    // const originRejectAll = this.initialData?.find((r: Review) => r.id === REJECT_ALL_REVIEW_ID);\n    // const originReviews = this.initialData?.filter((r: Review) => r.id !== REJECT_ALL_REVIEW_ID);\n    // const exitsingReviewIds: string[] = [];\n\n    const rejectAll = this.rejectAllReview && !this.rejectAllReview.temp;\n    const { frameCount } = this.rootStore.frame;\n    const { instances } = this.rootStore.instance;\n    Object.values(this.reviews).forEach((reviews) => {\n      reviews.forEach((review) => {\n        const { result, type, instanceId, instanceItemId, camera, frameIndex } = review;\n        if (result === ReviewResult.REJECT) {\n          // reject\n          let eleKey = '';\n          let instance: Instance | undefined;\n          let frameData: FrameData | undefined;\n          if (instanceId && instanceItemId) {\n            instance = instances[instanceId];\n            frameData = instance?.items[instanceItemId]?.cameras[camera]?.frames[frameIndex];\n            if (frameData) {\n              // shape exists\n              eleKey = `${instanceId}-${instanceItemId}-${camera}-${frameIndex}`;\n            }\n          }\n          rejectedFrameSet.add(frameIndex);\n          if (eleKey) {\n            rejectedElements.add(eleKey);\n          }\n          type?.forEach((t) => {\n            if (!issueMap[t]) {\n              issueMap[t] = {\n                count: 0,\n                eleSet: new Set(),\n                categories: {},\n              };\n            }\n            issueMap[t].count += 1;\n            if (eleKey) {\n              issueMap[t].eleSet.add(eleKey);\n            }\n            if (instance && frameData) {\n              if (!issueMap[t].categories[instance.category]) {\n                issueMap[t].categories[instance.category] = {\n                  count: 0,\n                  shapes: {},\n                };\n              }\n              issueMap[t].categories[instance.category].count += 1;\n              if (issueMap[t].categories[instance.category].shapes[frameData.shapeType] === undefined) {\n                issueMap[t].categories[instance.category].shapes[frameData.shapeType] = 0;\n              }\n              issueMap[t].categories[instance.category].shapes[frameData.shapeType] += 1;\n            }\n          });\n        } else {\n          // approve, or suspend\n          approvedFrameSet.add(frameIndex);\n        }\n\n        // if (submit) {\n        //   const originReview = originReviews?.find((r: Review) => r.id === review.id);\n        //   delete originReview?.label; // remove label before compare\n        //   if (!originReview || !isEqual(originReview, removeUndefinedKeys(review.toJSON()))) {\n        //     modifiedCount += 1;\n        //   }\n        // }\n        // exitsingReviewIds.push(review.id);\n      });\n    });\n    if (rejectAll) {\n      this.rejectAllReview?.type?.forEach((t) => {\n        if (!issueMap[t]) {\n          issueMap[t] = {\n            count: 0,\n            eleSet: new Set(),\n            categories: {},\n          };\n        }\n        issueMap[t].count += 1;\n      });\n    }\n    // if (submit) {\n    //   // check deleted reviews\n    //   const deletedReviews = originReviews?.filter((r: Review) => exitsingReviewIds.indexOf(r.id) < 0);\n    //   if (deletedReviews?.length > 0) {\n    //     modifiedCount += deletedReviews.length;\n    //   }\n\n    //   // check reject all\n    //   if ((!originRejectAll && rejectAll) || (originRejectAll && !rejectAll)) {\n    //     // one of origin reject all & reject all not exists\n    //     modifiedCount += 1;\n    //   } else if (originRejectAll && rejectAll) {\n    //     // compare\n    //     delete originRejectAll.label;\n    //     if (!isEqual(originRejectAll, removeUndefinedKeys(this.rejectAllReview!.toJSON()))) {\n    //       modifiedCount += 1;\n    //     }\n    //   }\n    // }\n\n    // filter out rejected frames\n    new Set(approvedFrameSet).forEach((frame) => {\n      if (rejectedFrameSet.has(frame)) {\n        approvedFrameSet.delete(frame);\n      }\n    });\n\n    const allInstances = Object.values(instances);\n    for (let i = 0; i < allInstances.length; i += 1) {\n      const instance = allInstances[i];\n      const items = Object.values(instance.items);\n      for (let j = 0; j < items.length; j += 1) {\n        const item = items[j];\n        const cameras = Object.values(item.cameras);\n        for (let k = 0; k < cameras.length; k += 1) {\n          const camera = cameras[k];\n          const frames = Object.values(camera.frames);\n          for (let l = 0; l < frames.length; l += 1) {\n            const frame = frames[l];\n            const shape = getToolTypeFromFrameData(frame);\n            if (shape) {\n              const { frameIndex } = frame;\n              const eleKey = `${instance.id}-${item.id}-${camera.camera}-${frameIndex}`;\n              if (rejectAll || rejectedElements.has(eleKey)) {\n                // shape rejected\n                if (!rejectedEleMap[shape]) {\n                  rejectedEleMap[shape] = 0;\n                }\n                rejectedEleMap[shape] += 1;\n              } else if (approvedFrameSet.has(frameIndex) || rejectedFrameSet.has(frameIndex)) {\n                // shape approved\n                // or not reviewed but in frames with review status\n                if (!approvedEleMap[shape]) {\n                  approvedEleMap[shape] = 0;\n                }\n                approvedEleMap[shape] += 1;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    const issues: {\n      [type: string]: {\n        count: number;\n        elements: number;\n      }\n    } = {};\n    const issuesByCategory: {\n      [type: string]: {\n        count: number;\n        elements: number;\n        categories: {\n          [category: string]: {\n            count: number;\n            shapes: {\n              [shapeType: string]: number;\n            }\n          }\n        }\n      }\n    } = {};\n    Object.keys(issueMap).forEach((key) => {\n      const { count, eleSet, categories } = issueMap[key];\n      const elements = eleSet.size;\n      issues[key] = { count, elements };\n      issuesByCategory[key] = { count, elements, categories };\n    });\n    return {\n      issues,\n      issuesByCategory,\n      frames: {\n        approved: rejectAll ? 0 : approvedFrameSet.size,\n        rejected: rejectAll ? frameCount : rejectedFrameSet.size,\n      },\n      elements: {\n        approved: { ...approvedEleMap },\n        rejected: { ...rejectedEleMap },\n      },\n      // ...submit && { modifiedCount },\n    };\n  }\n\n  /**\n   * set layer for review anchors\n   * @param layer\n   */\n  setReviewLayer(layer: Container) {\n    this.reviewLayer = layer;\n  }\n\n  /**\n   * set layer offset\n   * @param x\n   * @param y\n   */\n  setReviewLayerOffset(x: number, y: number) {\n    this.reviewLayerOffset.x = x;\n    this.reviewLayerOffset.y = y;\n  }\n\n  setAnchorCenter(review: ReviewItem) {\n    let pos: { x?: number, y?: number } = {};\n\n    const { camera, frameIndex, instanceId, instanceItemId } = review;\n    if (instanceId && instanceItemId) {\n      const frameData = this.rootStore.instance.instances[instanceId]?.items[instanceItemId]?.cameras[camera]?.frames[frameIndex];\n      if (frameData) {\n        const { shapeType, shape } = frameData;\n        const shapeBounds = calcShapeBounds(shapeType, shape);\n        if (shapeBounds) {\n          pos = getCenterPos(shapeBounds);\n        }\n      }\n    }\n\n    return pos;\n  }\n\n  /**\n   * setup anchors in current frame & current camera\n   */\n  setupReviewAnchors() {\n    this.clearAnchors();\n    const { cameraViews, currentFrame } = this.rootStore.frame;\n    (this.reviews[currentFrame] || []).forEach((review) => {\n      const { id, camera, result, isFromCopy } = review;\n      let { x, y } = review;\n      if (isFromCopy) {\n        review.isFromCopy = false;\n        const { x: centerX, y: centerY } = this.setAnchorCenter(review);\n        if (centerX) {\n          x = centerX;\n          review.x = centerX;\n        }\n        if (centerY) {\n          y = centerY;\n          review.y = centerY;\n        }\n      }\n\n      if (!this.rootStore.isRework || result === ReviewResult.REJECT) {\n        // only show reject anchors when rework\n        const cameraView = cameraViews[camera];\n        if (cameraView && cameraView.reviewLayer) {\n          const anchor = this.createReviewAnchor(result, x, y, cameraView.reviewLayer, cameraView.viewScale);\n          if (anchor) {\n            this.anchors[id] = {\n              anchor,\n              camera,\n            };\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * create anchor instance\n   * @param type\n   * @param x\n   * @param y\n   * @param container\n   * @param viewScale\n   */\n  createReviewAnchor(type: ReviewResult, x: number, y: number, container = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (container) {\n      const { icon, selectedIcon } = getIconByReviewResultType(type);\n      if (icon && selectedIcon) {\n        const anchor = new Anchor({\n          container,\n          scale: viewScale,\n          x,\n          y,\n          img: icon,\n          selectedImg: selectedIcon,\n        });\n        this.addAnchorListeners(anchor);\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  createReviewAnchorByReview(review: ReviewItem, container = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    let { x, y } = review;\n    if (review.isFromCopy) {\n      review.isFromCopy = false;\n      const { x: centerX, y: centerY } = this.setAnchorCenter(review);\n      if (centerX) {\n        x = centerX;\n        review.x = centerX;\n      }\n      if (centerY) {\n        y = centerY;\n        review.y = centerY;\n      }\n    }\n    return this.createReviewAnchor(review.result, x, y, container, viewScale);\n  }\n\n  /**\n   * get review instance by anchor instance\n   * @param anchor\n   */\n  getReviewByAnchor(anchor: Anchor) {\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      const reviewId = Object.keys(this.anchors).find((id) => this.anchors[id].anchor === anchor);\n      if (reviewId) {\n        return this.reviews[this.rootStore.frame.currentFrame].find((r) => r.id === reviewId);\n      }\n    } else if (this.rootStore.config.viewMode === ViewMode.GRID) {\n      return anchor.data;\n    }\n    return undefined;\n  }\n\n  /**\n   * add listeners for anchor\n   * @param anchor\n   */\n  addAnchorListeners(anchor: Anchor) {\n    anchor.on(EventAction.SELECTED, (a) => {\n      if (this.addMode) {\n        return;\n      }\n      const review = this.getReviewByAnchor(a);\n      if (review) {\n        this.selectReview(review, a);\n\n        // select related instance\n        let instance;\n        let instanceItem;\n        if (review.instanceId) {\n          instance = this.rootStore.instance.getInstanceById(review.instanceId);\n          if (instance && review.instanceItemId) {\n            instanceItem = instance.items[review.instanceItemId];\n          }\n        }\n        if (instanceItem) {\n          this.rootStore.instance.selectInstanceItem(instanceItem);\n        } else if (instance) {\n          this.rootStore.instance.selectInstance(instance);\n        }\n\n        // open modal in review mode\n        if (this.rootStore.config.reviewMode === ReviewMode.REVIEW) {\n          this.reviewStoreId = this.rootStore.undo.preserve({ reviews: [review.toJSON()] });\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OVER, (a) => {\n      if (this.rootStore.config.reviewMode === ReviewMode.LABELING) { // only show comment in labeling mode\n        const review = this.getReviewByAnchor(a);\n        if (review) {\n          this.setHoveredReview(review, a);\n        }\n      }\n    });\n    anchor.on(EventAction.POINTER_OUT, () => {\n      this.setHoveredReview(null, null);\n    });\n  }\n\n  /**\n   * set editing review\n   * @param review\n   */\n  setEditingReview(review: ReviewItem | null) {\n    this.editingReview = review;\n  }\n\n  /**\n   * set hovered review\n   * @param review\n   */\n  setHoveredReview(review: ReviewItem | null, anchor: Anchor | null) {\n    this.hoveredReview = review;\n    this.hoveredAnchor = anchor;\n  }\n\n  /**\n   * select review\n   * @param review\n   * @param anchor\n   */\n  selectReview(review: ReviewItem, anchor: Anchor) {\n    if (review.camera !== this.rootStore.frame.currentCamera) {\n      this.rootStore.frame.setCamera(review.camera);\n    }\n    if (review.frameIndex !== this.rootStore.frame.currentFrame) {\n      this.rootStore.frame.setFrame(review.frameIndex);\n    }\n    if (this.selectedAnchor && this.selectedAnchor !== anchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = review.id;\n    this.selectedAnchor = anchor;\n    this.selectedAnchor.selected = true;\n  }\n\n  /**\n   * unselect review\n   */\n  unselectReview() {\n    if (this.selectedAnchor) {\n      this.selectedAnchor.selected = false;\n    }\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n  }\n\n  /**\n   * clear all anchors\n   */\n  clearAnchors() {\n    Object.values(this.anchors).forEach(({ anchor }) => {\n      anchor.destroy();\n    });\n    this.anchors = {};\n    this.selectedReviewId = '';\n    this.selectedAnchor = null;\n    this.setEditingReview(null);\n    this.setHoveredReview(null, null);\n    this.reviewStoreId = '';\n  }\n\n  /**\n   * get anchors for camera\n   * @param camera\n   */\n  getAnchorsForCamera(camera = this.rootStore.frame.currentCamera) {\n    return Object.values(this.anchors).filter((i) => i.camera === camera);\n  }\n\n  /**\n   * update anchors' scale\n   * @param scale\n   * @param camera\n   */\n  updateAnchorsScale(scale: number, camera: string) {\n    this.getAnchorsForCamera(camera).forEach(({ anchor }) => {\n      anchor.setScale(scale);\n    });\n  }\n\n  /**\n   * update anchors' interactive\n   * @param interactive\n   */\n  updateAnchorsInteractive(interactive: boolean) {\n    Object.values(this.anchors).forEach(({ anchor }) => {\n      anchor.interactive = interactive;\n    });\n  };\n\n  /**\n   * activate review tool\n   * @param type\n   */\n  activateReview(type: ReviewResult) {\n    this.selectedReviewResultType = type;\n    this.setAddMode(true);\n  }\n\n  /**\n   * activate review tool by hotkey\n   * @param hotkey\n   */\n  activateReviewByHotkey(hotkey: number) {\n    if (hotkey === 1) {\n      // approve\n      this.activateReview(ReviewResult.APPROVE);\n    } else if (hotkey === 2) {\n      // reject\n      this.activateReview(ReviewResult.REJECT);\n    } else if (hotkey === 3 && this.reviewResultTypes.includes(ReviewResult.SUSPEND)) {\n      // suspend\n      this.activateReview(ReviewResult.SUSPEND);\n    }\n  }\n\n  /**\n   * set review add mode\n   * @param addMode\n   */\n  setAddMode(addMode: boolean) {\n    this.addMode = addMode;\n    this.rootStore.config.setMeasureMode(false);\n    this.rootStore.config.setCursor(addMode ? Cursor.POINTER : Cursor.DEFAULT);\n    this.updateAnchorsInteractive(!addMode);\n    if (addMode && !this.visible) {\n      this.setAnchorsVisible(true);\n    }\n  }\n  /**\n   * set review position center for grid mode\n   * @param review\n   * @param pos : default position\n   */\n\n  setCenterPosForGrid(review: ReviewItem, pos: {x: number, y: number}): {x: number, y: number} {\n    const { frameIndex, instanceItemId } = review;\n    // const { gridCanvas } = this.rootStore.grid;\n    // if (gridCanvas) {\n    //   const shapeList: Shape<ShapeData>[] = gridCanvas.getGridShapes(frameIndex);\n    //   if (shapeList && shapeList.length > 0) {\n    //     const shape = shapeList.find((i) => i.data?.id === instanceItemId);\n    //     if (shape?.shapeBounds) {\n    //       const { x: centerX, y: centerY } = getCenterPos(shape.shapeBounds);\n    //       review.isFromCopy = false;\n    //       if (centerX) {\n    //         pos.x = centerX;\n    //         review.x = centerX;\n    //       }\n    //       if (centerY) {\n    //         pos.y = centerY;\n    //         review.y = centerY;\n    //       }\n    //     }\n    //   }\n    // }\n    return pos;\n  }\n\n  copyReview(review: ReviewItem, frameIndex: number, camera: string): ReviewItem {\n    const { instanceId: reviewInstanceId, instanceItemId: reviewInstanceItemId, x, y, comment, type, result } = review;\n    const newReview = new ReviewItem({\n      isFromCopy: true,\n      camera,\n      frameIndex,\n      comment,\n      result,\n      type,\n      instanceId: reviewInstanceId,\n      instanceItemId: reviewInstanceItemId,\n      position: { x, y },\n      workerName: RootStore.jobProxy?.advanceWorkerName,\n    });\n\n    if (this.rootStore.config.viewMode === ViewMode.GRID) {\n      const pos = this.setCenterPosForGrid(newReview, { x, y });\n      // const { gridCanvas } = this.rootStore.grid;\n      // if (gridCanvas) {\n      //   const grid = gridCanvas.cachedGrids[frameIndex];\n      //   if (grid) {\n      //     const anchor = this.createReviewAnchor(this.selectedReviewResultType, pos.x, pos.y, grid.view, grid.viewScale);\n      //     if (anchor) {\n      //       anchor.data = newReview;\n      //       grid.reviews.push(anchor);\n      //     }\n      //   }\n      // }\n    }\n    return newReview;\n  }\n\n  /**\n   * add review when click canvas\n   * @param point\n   * @param layer\n   * @param viewScale\n   */\n  addReview(point: Point, layer = this.reviewLayer, viewScale = this.rootStore.config.viewScale) {\n    if (this.addMode) {\n      let instanceId;\n      let instanceItemId;\n      const { isSingleSelected, selectedInstances, selectedInstanceItems } = this.rootStore.instance;\n      if (isSingleSelected) {\n        // link to the shape\n        instanceItemId = selectedInstanceItems[0].id;\n        instanceId = selectedInstances[0].id;\n      }\n      const anchor = this.createReviewAnchor(this.selectedReviewResultType, point.x, point.y, layer, viewScale);\n      if (anchor) {\n        const { currentCamera, currentFrame } = this.rootStore.frame;\n        const review = new ReviewItem({\n          camera: currentCamera,\n          frameIndex: currentFrame,\n          result: this.selectedReviewResultType,\n          instanceId,\n          instanceItemId,\n          position: { x: point.x, y: point.y },\n          workerName: RootStore.jobProxy?.advanceWorkerName,\n        });\n        if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n          this.anchors[review.id] = {\n            anchor,\n            camera: currentCamera,\n          };\n        } else {\n          anchor.data = review;\n        }\n        this.selectReview(review, anchor);\n        if (!this.rootStore.config.continuousMode) {\n          this.setAddMode(false);\n        } else {\n          anchor.interactive = false;\n        }\n        if (review.result === ReviewResult.REJECT) {\n          // open modal\n          this.reviewStoreId = this.rootStore.undo.preserve();\n          if (this.rootStore.config.defaultIssueType && this.issueTypes?.[0]) {\n            review.type = [this.issueTypes[0]];\n          }\n          this.setEditingReview(review);\n          this.rootStore.config.setReviewModalVisible(true);\n        } else {\n          // save directly\n          this.insertReview(review);\n          this.unselectReview();\n        }\n        return anchor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * insert review\n   * @param review\n   */\n  insertReview(review: ReviewItem) {\n    const storeId = this.rootStore.undo.preserve();\n    const { frameIndex } = review;\n    if (!this.reviews[frameIndex]) {\n      this.reviews[frameIndex] = [];\n    }\n    this.reviews[frameIndex].push(review);\n    this.rootStore.undo.save(storeId, { reviews: [review.toJSON()] });\n  }\n\n  /**\n   * update review\n   * @param review  is editing review item\n   * @param copyToFrames copy to frames index\n   */\n  updateReview(review: ReviewItem, copyToFrames: number[] = []) {\n    if (this.reviewStoreId) {\n      const changedReviews = [review.toJSON()];\n      const handledFrames: number[] = [];\n      const { frameIndex, result } = review;\n      if (!this.reviews[frameIndex]) {\n        this.reviews[frameIndex] = [];\n      }\n      if (this.reviews[frameIndex].indexOf(review) < 0) {\n        this.reviews[frameIndex].push(review);\n      }\n\n      const { camera } = review;\n      const { instanceItem: reviewInstanceItem } = getReviewRelatedInstanceInfo(review);\n      if (reviewInstanceItem) {\n        const reviewInstanceItemFrames = reviewInstanceItem.cameras[camera].frames;\n        const framesArr = Object.keys(reviewInstanceItemFrames);\n        copyToFrames.forEach((_frameIndex) => {\n          if (!this.reviews[_frameIndex]) {\n            this.reviews[_frameIndex] = [];\n          }\n          if (framesArr.indexOf(_frameIndex.toString()) > -1) {\n            if (this.reviews[_frameIndex].indexOf(review) < 0) {\n              const copyedReview = this.copyReview(review, _frameIndex, camera);\n              if (copyedReview) {\n                this.reviews[_frameIndex].push(copyedReview);\n                handledFrames.push(_frameIndex);\n                changedReviews.push(copyedReview.toJSON());\n              }\n            } else {\n              handledFrames.push(_frameIndex);\n            }\n          }\n        });\n        if (\n          result === ReviewResult.REJECT &&\n          ((handledFrames.length === 1 && handledFrames[0] !== frameIndex) || handledFrames.length > 1)\n        ) {\n          message.info(i18n.translate('APPLY_FRAMES_RANGE_FRAMES_REJECTED', {\n            values: {\n              label: reviewInstanceItem.label,\n              frames: formatFrames(handledFrames),\n            }\n          }));\n        }\n      }\n      this.rootStore.undo.save(this.reviewStoreId, { reviews: changedReviews });\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete review\n   * @param review\n   * @param anchor\n   */\n  deleteReview(review: ReviewItem, anchor: Anchor) {\n    const { id, frameIndex } = review;\n    const frameReviews = this.reviews[frameIndex] || [];\n    const index = frameReviews.findIndex((r) => r.id === id);\n    let existed = false;\n    if (index >= 0) {\n      existed = true;\n      frameReviews.splice(index, 1);\n    }\n    anchor.destroy();\n    if (this.anchors[id]) {\n      delete this.anchors[id];\n    }\n    if (existed && this.reviewStoreId) {\n      this.rootStore.undo.save(this.reviewStoreId);\n      this.reviewStoreId = '';\n    }\n  }\n\n  /**\n   * delete reviews by reviewIds\n   * @param reviewResObj\n   */\n  deleteReviews(reviewResObj: { [key: string]: ReviewItem }) {\n    const reviewStoreId = this.rootStore.undo.preserve({ reviews: this.reviewsJSON() });\n    const reviewIds = Object.keys(reviewResObj);\n    for (let index = 0; index < reviewIds.length; index += 1) {\n      const reviewItemId = reviewIds[index];\n      if (reviewItemId === this.rejectAllReview?.id) {\n        this.rejectAllReview = null;\n      } else {\n        const review = reviewResObj[reviewItemId];\n        const { frameIndex } = review;\n        const frameReviews = this.reviews[frameIndex] || [];\n        const frameReviewIndex = frameReviews.findIndex((r) => r.id === reviewItemId);\n        if (frameReviewIndex >= 0) {\n          frameReviews.splice(frameReviewIndex, 1);\n        }\n        if (this.anchors[reviewItemId]) {\n          const anchor = this.anchors[reviewItemId].anchor;\n          anchor.destroy();\n          delete this.anchors[reviewItemId];\n        }\n      }\n    }\n    if (reviewStoreId) {\n      this.rootStore.undo.save(reviewStoreId, { reviews: this.reviewsJSON() });\n    }\n  }\n\n  /**\n   * clear all reviews and anchors\n   */\n  clearReviewsAndAnchors() {\n    const reviewStoreId = this.rootStore.undo.preserve({ reviews: this.reviewsJSON() });\n    this.reviews = {};\n    this.clearAnchors();\n    if (reviewStoreId) {\n      this.rootStore.undo.save(reviewStoreId, { reviews: [] });\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewResult(review: ReviewItem, result: ReviewResult, anchor: Anchor) {\n    if (review.result !== result) {\n      review.result = result;\n      if (result === ReviewResult.APPROVE) {\n        review.type = [];\n        review.comment = '';\n      }\n      // update anchor\n      const { icon, selectedIcon } = getIconByReviewResultType(result);\n      if (icon && selectedIcon) {\n        anchor.setImage(icon, selectedIcon);\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  updateReviewInfo(review: ReviewItem, { type, comment, x, y }: { type?: string[], comment?: string, x?: number, y?: number }) {\n    if (type !== undefined) {\n      review.type = [...type];\n    }\n    if (comment !== undefined) {\n      review.comment = comment;\n    }\n    if (x !== undefined) {\n      review.x = x;\n    }\n    if (y !== undefined) {\n      review.y = y;\n    }\n  }\n\n  /**\n   * hide or show reviews\n   */\n  hideOrShowReviews = () => {\n    const { currentFrame } = this.rootStore.frame;\n    if (!this.reviews[currentFrame]) {\n      return;\n    }\n\n    const { visibleShapeIds, getShapeByInstanceItem } = this.rootStore.shape;\n    const { instances } = this.rootStore.instance;\n    this.reviews[currentFrame].forEach((review) => {\n      const { id, instanceId, instanceItemId, camera } = review;\n\n      let instance: Instance | undefined;\n      let instanceItem: InstanceItem | undefined;\n      if (instanceId) {\n        instance = instances[instanceId];\n      }\n      if (instanceItemId && instance) {\n        instanceItem = instance.items[instanceItemId];\n      }\n\n      let shape;\n      if (instanceItem) {\n        shape = getShapeByInstanceItem(instanceItem, camera);\n      }\n      const anchor = this.anchors[id];\n      if (anchor) {\n        if (!this.visible || (shape && visibleShapeIds.indexOf(shape.uid) < 0)) {\n          this.anchors[id].anchor.visible = false;\n        } else {\n          this.anchors[id].anchor.visible = true;\n        }\n      }\n    });\n  };\n\n  /**\n   * focus review\n   * @param id\n   */\n  focusReview = (id: string) => {\n    if (this.rootStore.config.viewMode === ViewMode.DEFAULT) {\n      const { anchor } = this.anchors[id] || {};\n      if (anchor) {\n        const { x, y } = anchor;\n        const offset = 250;\n        const anchorBounds = {\n          left: x - offset,\n          right: x + offset,\n          top: y - offset,\n          bottom: y + offset,\n        };\n        this.rootStore.frame.currentCameraView?.fitShapeToView(anchorBounds);\n      }\n    }\n  };\n\n  /**\n   * set anchors visibility\n   * @param visible\n   */\n  setAnchorsVisible = (visible: boolean) => {\n    this.visible = visible;\n    this.hideOrShowReviews();\n    if (this.rootStore.config.viewMode === ViewMode.GRID) {\n      this.rootStore.grid.hideOrShowReviews();\n    }\n  };\n\n  /**\n   * update reject all review info\n   */\n  updateRejectAllReviewInfo = ({ type, comment }: { type?: string[], comment?: string }) => {\n    if (!this.reviewStoreId) {\n      // start to update reject all review\n      this.reviewStoreId = this.rootStore.undo.preserve({\n        reviews: this.rejectAllReview && !this.rejectAllReview.temp ? [this.rejectAllReview.toJSON()] : [],\n      });\n    }\n    if (!this.rejectAllReview) {\n      this.rejectAllReview = new ReviewItem({\n        id: REJECT_ALL_REVIEW_ID,\n        result: ReviewResult.REJECT,\n        camera: '',\n        frameIndex: -1,\n        position: { x: 0, y: 0 },\n        workerName: RootStore.jobProxy?.advanceWorkerName,\n      });\n      // set to temp\n      this.rejectAllReview.temp = true;\n    }\n    if (type !== undefined) {\n      this.rejectAllReview.type = [...type];\n    }\n    if (comment !== undefined) {\n      this.rejectAllReview.comment = comment;\n    }\n  };\n\n  /**\n   * update & save reject all review\n   */\n  updateRejectAllReview = () => {\n    if (this.reviewStoreId && this.rejectAllReview) {\n      this.rootStore.undo.save(this.reviewStoreId, {\n        reviews: [this.rejectAllReview.toJSON()],\n      });\n      this.rejectAllReview.temp = false;\n      this.reviewStoreId = '';\n    }\n  };\n\n  /**\n   * delete reject all review\n   */\n  deleteRejectAllReview = () => {\n    if (this.rejectAllReview) {\n      this.rootStore.undo.push({\n        reviews: [this.rejectAllReview.toJSON()],\n      }, {\n        reviews: [],\n      });\n      this.rejectAllReview = null;\n      this.reviewStoreId = '';\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}