{"ast":null,"code":"import en from './en-US';\nimport cn from './zh-CN';\nclass I18n {\n  constructor() {\n    this.locale = 'zh-CN';\n  }\n  setLocale(locale) {\n    if (locale !== undefined) {\n      // get from props\n      if (locale === 'zh-CN') {\n        this.locale = 'zh-CN';\n      }\n    } else if (navigator.language && navigator.language.startsWith('zh')) {\n      // get from browser\n      this.locale = 'zh-CN';\n    }\n  }\n}\nexport const i18n = new I18n();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function formatMessage(key, options = {}) {\n  const message = i18n.locale.startsWith('zh') ? cn[key] : en[key];\n  if (message) {\n    let msg = message;\n    if (options.values) {\n      Object.keys(options.values).forEach(k => {\n        msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n      });\n    }\n    return msg;\n  }\n  return key;\n}","map":{"version":3,"names":["en","cn","I18n","constructor","locale","setLocale","undefined","navigator","language","startsWith","i18n","formatMessage","key","options","message","msg","values","Object","keys","forEach","k","replace","RegExp"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/keypoint/locales/index.ts"],"sourcesContent":["import en from './en-US';\nimport cn from './zh-CN';\n\nclass I18n {\n  locale = 'zh-CN';\n\n  setLocale(locale?: string) {\n    if (locale !== undefined) {\n      // get from props\n      if (locale === 'zh-CN') {\n        this.locale = 'zh-CN';\n      }\n    } else if (navigator.language && navigator.language.startsWith('zh')) {\n      // get from browser\n      this.locale = 'zh-CN';\n    }\n  };\n}\n\nexport const i18n = new I18n();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function formatMessage(key: string, options: any = {}) {\n  const message = i18n.locale.startsWith('zh') ? cn[key] : en[key];\n  if (message) {\n    let msg = message;\n    if (options.values) {\n      Object.keys(options.values).forEach((k) => {\n        msg = msg.replace(new RegExp(`{${k}}`, 'g'), options.values[k]);\n      });\n    }\n    return msg;\n  }\n  return key;\n}\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,SAAS;AACxB,OAAOC,EAAE,MAAM,SAAS;AAExB,MAAMC,IAAI,CAAC;EAAAC,YAAA;IAAA,KACTC,MAAM,GAAG,OAAO;EAAA;EAEhBC,SAASA,CAACD,MAAe,EAAE;IACzB,IAAIA,MAAM,KAAKE,SAAS,EAAE;MACxB;MACA,IAAIF,MAAM,KAAK,OAAO,EAAE;QACtB,IAAI,CAACA,MAAM,GAAG,OAAO;MACvB;IACF,CAAC,MAAM,IAAIG,SAAS,CAACC,QAAQ,IAAID,SAAS,CAACC,QAAQ,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;MACpE;MACA,IAAI,CAACL,MAAM,GAAG,OAAO;IACvB;EACF;AACF;AAEA,OAAO,MAAMM,IAAI,GAAG,IAAIR,IAAI,CAAC,CAAC;;AAE9B;AACA,eAAe,SAASS,aAAaA,CAACC,GAAW,EAAEC,OAAY,GAAG,CAAC,CAAC,EAAE;EACpE,MAAMC,OAAO,GAAGJ,IAAI,CAACN,MAAM,CAACK,UAAU,CAAC,IAAI,CAAC,GAAGR,EAAE,CAACW,GAAG,CAAC,GAAGZ,EAAE,CAACY,GAAG,CAAC;EAChE,IAAIE,OAAO,EAAE;IACX,IAAIC,GAAG,GAAGD,OAAO;IACjB,IAAID,OAAO,CAACG,MAAM,EAAE;MAClBC,MAAM,CAACC,IAAI,CAACL,OAAO,CAACG,MAAM,CAAC,CAACG,OAAO,CAAEC,CAAC,IAAK;QACzCL,GAAG,GAAGA,GAAG,CAACM,OAAO,CAAC,IAAIC,MAAM,CAAC,IAAIF,CAAC,GAAG,EAAE,GAAG,CAAC,EAAEP,OAAO,CAACG,MAAM,CAACI,CAAC,CAAC,CAAC;MACjE,CAAC,CAAC;IACJ;IACA,OAAOL,GAAG;EACZ;EACA,OAAOH,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module"}