{"ast":null,"code":"import Paper from 'paper';\nimport screenfull from 'screenfull';\nimport { SHAPE_TYPE } from '../components/Canvas';\nimport { CategoryPathShape } from '../types';\nexport default class Tool extends Paper.Tool {\n  constructor(editor) {\n    super();\n    this.editor = void 0;\n    this.downPoint = null;\n    this.downCenter = null;\n    this.dragging = false;\n    this.movingPoints = [];\n    this.movingSegments = [];\n    this.movingHandles = {};\n    this.affectedCategories = [];\n    this.selectPath = null;\n    this.isRightButton = event => event.event.which === 3 || event.modifiers.space;\n    this.isCtrlKey = event => event.event.ctrlKey;\n    this.onMouseDown = event => {\n      if (this.isRightButton(event)) {\n        this.downPoint = Paper.view.projectToView(event.point);\n        this.downCenter = Paper.view.center;\n        return;\n      }\n      if (this.editor) {\n        if (!this.isCtrlKey(event) && this.editor.hits) {\n          // move start\n          if (this.editor.selectedPoints.length > 0 && this.editor.isPointInSelectedPoints(this.editor.hits.item.data.pointIndex)) {\n            // multi points\n            this.movingPoints = this.editor.selectedPoints;\n          } else if (this.editor.hits.item && this.editor.hits.item instanceof Paper.Shape) {\n            // single point\n            this.movingPoints = [this.editor.hits.item];\n          } else if (['handle-in', 'handle-out'].includes(this.editor.hits.type)) {\n            const {\n              handleIn,\n              handleOut\n            } = this.editor.hits.segment;\n            this.movingHandles.actual = this.editor.hits.type === 'handle-in' ? handleIn : handleOut;\n            this.movingHandles.opposite = this.editor.hits.type === 'handle-in' ? handleOut : handleIn;\n          }\n          this.affectedCategories = [];\n          this.movingSegments = [];\n          this.movingPoints.forEach(movingPoint => {\n            var _this$editor;\n            const path = (_this$editor = this.editor) === null || _this$editor === void 0 ? void 0 : _this$editor.getPathByCategory(movingPoint.data.category);\n            if (path && !path.data.isCircle) {\n              const index = path.data.points.findIndex(p => p === movingPoint.data.pointIndex);\n              if (index >= 0) {\n                this.movingSegments.push(path.segments[index]);\n              }\n            }\n          });\n        } else {\n          // select start\n          this.editor.setMultiPointsUnselected();\n          const localPoint = this.editor.getPointInImage(Paper.view.projectToView(event.point));\n          this.selectPath = new Paper.Path({\n            segments: [localPoint],\n            strokeColor: 'red',\n            strokeWidth: 2,\n            strokeScaling: false\n          });\n        }\n      }\n    };\n    this.onMouseDrag = event => {\n      if (this.isRightButton(event)) {\n        if (!this.downPoint || !this.downCenter) {\n          this.downPoint = Paper.view.projectToView(event.point);\n          this.downCenter = Paper.view.center;\n        }\n        const rotation = Math.round(Paper.view.rotation);\n        const targetPoint = Paper.view.projectToView(event.point).rotate(-rotation, this.downPoint);\n        const deltaPixel = targetPoint.subtract(this.downPoint);\n        const candidateCenter = this.downCenter.subtract(deltaPixel.divide(Paper.view.zoom));\n        Paper.view.center = candidateCenter;\n        return;\n      }\n      if (this.editor) {\n        const localPoint = this.editor.getPointInImage(Paper.view.projectToView(event.point));\n        const localLastPoint = this.editor.getPointInImage(Paper.view.projectToView(event.lastPoint));\n        const offsetX = localPoint.x - localLastPoint.x;\n        const offsetY = localPoint.y - localLastPoint.y;\n        if (Math.abs(offsetX) > 0 || Math.abs(offsetY) > 0) {\n          this.dragging = true;\n        }\n        if (this.movingPoints.length > 0) {\n          // moving\n          /* eslint-disable no-param-reassign */\n          this.movingPoints.forEach(movingPoint => {\n            var _this$editor2;\n            if (((_this$editor2 = this.editor) === null || _this$editor2 === void 0 ? void 0 : _this$editor2.props.categoryPathShapes[movingPoint.data.category]) === CategoryPathShape.CIRCLE) {\n              const path = this.editor.getPathByCategory(movingPoint.data.category);\n              if (path && path.data.isCircle) {\n                const category = this.editor.props.categories.find(c => c.name === movingPoint.data.category);\n                if (category) {\n                  if (!this.affectedCategories.includes(category.name)) {\n                    this.affectedCategories.push(category.name);\n                  }\n                  const sortedKeys = [...category.keys].sort((a, b) => a - b);\n                  const pIndex1 = sortedKeys[0];\n                  const pIndex2 = sortedKeys[Math.ceil(sortedKeys.length / 2)];\n                  if (movingPoint.data.pointIndex !== pIndex1 && movingPoint.data.pointIndex !== pIndex2) {\n                    return;\n                  }\n                }\n              }\n            }\n            movingPoint.position.x += offsetX;\n            movingPoint.position.y += offsetY;\n          });\n          this.movingSegments.forEach(movingSegment => {\n            movingSegment.point.x += offsetX;\n            movingSegment.point.y += offsetY;\n          });\n          this.affectedCategories.forEach(category => {\n            var _this$editor3;\n            (_this$editor3 = this.editor) === null || _this$editor3 === void 0 ? void 0 : _this$editor3.updateCirclePath(category);\n          });\n          /* eslint-enable no-param-reassign */\n        } else if (this.movingHandles.actual && this.movingHandles.opposite) {\n          // moving handle point\n          this.movingHandles.actual.x += offsetX;\n          this.movingHandles.actual.y += offsetY;\n          this.movingHandles.opposite.x = -this.movingHandles.actual.x;\n          this.movingHandles.opposite.y = -this.movingHandles.actual.y;\n        } else if (this.selectPath) {\n          // draw select path\n          this.selectPath.add(localPoint);\n        }\n      }\n    };\n    this.onMouseUp = event => {\n      var _this$editor8;\n      if (this.isRightButton(event)) {\n        this.downPoint = null;\n        this.downCenter = null;\n        return;\n      }\n      if (!this.isCtrlKey(event) && this.movingPoints.length > 0) {\n        var _this$editor6;\n        // move ends\n        if (this.dragging) {\n          var _this$editor5;\n          const otherPoints = [];\n          this.affectedCategories.forEach(category => {\n            var _this$editor4;\n            const updatedPoints = (_this$editor4 = this.editor) === null || _this$editor4 === void 0 ? void 0 : _this$editor4.updateCirclePath(category);\n            if (updatedPoints) {\n              updatedPoints.forEach(p => {\n                otherPoints.push({\n                  pointIndex: p.pointIndex,\n                  position: {\n                    ...p.point.position\n                  }\n                });\n              });\n            }\n          });\n          (_this$editor5 = this.editor) === null || _this$editor5 === void 0 ? void 0 : _this$editor5.updatePointsPosition([...this.movingPoints.map(movingPoint => ({\n            pointIndex: movingPoint.data.pointIndex,\n            position: {\n              x: movingPoint.position.x,\n              y: movingPoint.position.y\n            }\n          })), ...otherPoints]);\n        }\n        (_this$editor6 = this.editor) === null || _this$editor6 === void 0 ? void 0 : _this$editor6.props.setSelectedPoint(this.movingPoints[0].data.pointIndex);\n        this.movingPoints = [];\n        this.movingSegments = [];\n        this.affectedCategories = [];\n      } else if (this.movingHandles.actual && this.movingHandles.opposite) {\n        // handle move ends\n        this.movingHandles = {};\n      } else if (this.selectPath && this.dragging) {\n        var _this$editor7;\n        // select ends\n        if ((_this$editor7 = this.editor) === null || _this$editor7 === void 0 ? void 0 : _this$editor7.mainLayer) {\n          const center = this.editor.mainLayer.localToGlobal(this.selectPath.bounds.center);\n          const hits = this.editor.mainLayer.hitTestAll(center, {\n            fill: true,\n            segments: true,\n            tolerance: this.selectPath.bounds.topLeft.getDistance(this.selectPath.bounds.bottomRight) / 2\n          });\n          const selectedPoints = new Set();\n          hits.forEach(seg => {\n            var _this$selectPath;\n            if (seg.item.data.type === SHAPE_TYPE.POINT && ((_this$selectPath = this.selectPath) === null || _this$selectPath === void 0 ? void 0 : _this$selectPath.bounds.contains(seg.item.position))) {\n              selectedPoints.add(seg.item);\n            }\n          });\n          this.editor.setMultiPointsSelected(Array.from(selectedPoints));\n        }\n        this.selectPath.remove();\n        this.selectPath = null;\n      } else if ((_this$editor8 = this.editor) === null || _this$editor8 === void 0 ? void 0 : _this$editor8.canAddPoint()) {\n        // add point\n        const point = Paper.view.projectToView(event.point);\n        // if (this.editor?.isPointInImage(point)) {\n        this.editor.addPoint(point);\n        // }\n      } else {\n        var _this$editor9;\n        // clear selection and move next\n        (_this$editor9 = this.editor) === null || _this$editor9 === void 0 ? void 0 : _this$editor9.props.setNextEmptyPoint();\n      }\n      this.dragging = false;\n    };\n    this.onKeyDown = event => {\n      var _this$editor0, _this$editor1, _this$editor10, _this$editor11, _this$editor15, _this$editor16, _this$editor17, _this$editor18, _this$editor19, _this$editor20, _this$editor21, _this$editor22;\n      switch (event.key.toLowerCase()) {\n        case 'delete':\n        case 'backspace':\n          event.preventDefault();\n          (_this$editor0 = this.editor) === null || _this$editor0 === void 0 ? void 0 : _this$editor0.deleteSelectedPoints();\n          break;\n        case 'a':\n          event.preventDefault();\n          (_this$editor1 = this.editor) === null || _this$editor1 === void 0 ? void 0 : _this$editor1.autoAdjust();\n          break;\n        case 'c':\n          event.preventDefault();\n          (_this$editor10 = this.editor) === null || _this$editor10 === void 0 ? void 0 : _this$editor10.switchSmoothMode();\n          break;\n        case 'o':\n          event.preventDefault();\n          (_this$editor11 = this.editor) === null || _this$editor11 === void 0 ? void 0 : _this$editor11.setCategoryAsCircle();\n          break;\n        case 'f':\n          event.preventDefault();\n          if (screenfull.isEnabled) {\n            var _this$editor12, _this$editor13, _this$editor14;\n            if ((_this$editor12 = this.editor) === null || _this$editor12 === void 0 ? void 0 : _this$editor12.props.isFullScreen) {\n              screenfull.exit();\n            } else {\n              screenfull.request();\n            }\n            (_this$editor13 = this.editor) === null || _this$editor13 === void 0 ? void 0 : _this$editor13.props.setFullScreen(!((_this$editor14 = this.editor) === null || _this$editor14 === void 0 ? void 0 : _this$editor14.props.isFullScreen));\n          }\n          break;\n        case 'g':\n          event.preventDefault();\n          (_this$editor15 = this.editor) === null || _this$editor15 === void 0 ? void 0 : _this$editor15.props.setGridVisible(!((_this$editor16 = this.editor) === null || _this$editor16 === void 0 ? void 0 : _this$editor16.props.isGridVisible));\n          break;\n        case 'l':\n          event.preventDefault();\n          (_this$editor17 = this.editor) === null || _this$editor17 === void 0 ? void 0 : _this$editor17.props.setLabelVisible(!((_this$editor18 = this.editor) === null || _this$editor18 === void 0 ? void 0 : _this$editor18.props.isLabelVisible));\n          break;\n        case 's':\n          event.preventDefault();\n          (_this$editor19 = this.editor) === null || _this$editor19 === void 0 ? void 0 : _this$editor19.props.onSave();\n          break;\n        case 'v':\n          event.preventDefault();\n          (_this$editor20 = this.editor) === null || _this$editor20 === void 0 ? void 0 : _this$editor20.toggleSelectedPointVisibility();\n          break;\n        case 'z':\n          event.preventDefault();\n          (_this$editor21 = this.editor) === null || _this$editor21 === void 0 ? void 0 : _this$editor21.props.undo();\n          break;\n        case 'y':\n          event.preventDefault();\n          (_this$editor22 = this.editor) === null || _this$editor22 === void 0 ? void 0 : _this$editor22.props.redo();\n          break;\n        default:\n      }\n    };\n    this.editor = editor;\n  }\n}","map":{"version":3,"names":["Paper","screenfull","SHAPE_TYPE","CategoryPathShape","Tool","constructor","editor","downPoint","downCenter","dragging","movingPoints","movingSegments","movingHandles","affectedCategories","selectPath","isRightButton","event","which","modifiers","space","isCtrlKey","ctrlKey","onMouseDown","view","projectToView","point","center","hits","selectedPoints","length","isPointInSelectedPoints","item","data","pointIndex","Shape","includes","type","handleIn","handleOut","segment","actual","opposite","forEach","movingPoint","_this$editor","path","getPathByCategory","category","isCircle","index","points","findIndex","p","push","segments","setMultiPointsUnselected","localPoint","getPointInImage","Path","strokeColor","strokeWidth","strokeScaling","onMouseDrag","rotation","Math","round","targetPoint","rotate","deltaPixel","subtract","candidateCenter","divide","zoom","localLastPoint","lastPoint","offsetX","x","offsetY","y","abs","_this$editor2","props","categoryPathShapes","CIRCLE","categories","find","c","name","sortedKeys","keys","sort","a","b","pIndex1","pIndex2","ceil","position","movingSegment","_this$editor3","updateCirclePath","add","onMouseUp","_this$editor8","_this$editor6","_this$editor5","otherPoints","_this$editor4","updatedPoints","updatePointsPosition","map","setSelectedPoint","_this$editor7","mainLayer","localToGlobal","bounds","hitTestAll","fill","tolerance","topLeft","getDistance","bottomRight","Set","seg","_this$selectPath","POINT","contains","setMultiPointsSelected","Array","from","remove","canAddPoint","addPoint","_this$editor9","setNextEmptyPoint","onKeyDown","_this$editor0","_this$editor1","_this$editor10","_this$editor11","_this$editor15","_this$editor16","_this$editor17","_this$editor18","_this$editor19","_this$editor20","_this$editor21","_this$editor22","key","toLowerCase","preventDefault","deleteSelectedPoints","autoAdjust","switchSmoothMode","setCategoryAsCircle","isEnabled","_this$editor12","_this$editor13","_this$editor14","isFullScreen","exit","request","setFullScreen","setGridVisible","isGridVisible","setLabelVisible","isLabelVisible","onSave","toggleSelectedPointVisibility","undo","redo"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/landmark-annotation/tools/Tool.ts"],"sourcesContent":["import Paper from 'paper';\nimport screenfull from 'screenfull';\nimport Canvas, { SHAPE_TYPE } from '../components/Canvas';\nimport { CategoryPathShape } from '../types';\n\nexport interface ToolEventExtend extends paper.ToolEvent {\n  event: MouseEvent;\n}\n\nexport default class Tool extends Paper.Tool {\n  editor: Canvas | undefined;\n\n  downPoint: paper.Point | null = null;\n\n  downCenter: paper.Point | null = null;\n\n  dragging = false;\n\n  movingPoints: paper.Item[] = [];\n\n  movingSegments: paper.Segment[] = [];\n\n  movingHandles: { actual?: paper.Point; opposite?: paper.Point } = {};\n\n  affectedCategories: string[] = [];\n\n  selectPath: paper.Path | null = null;\n\n  constructor(editor: Canvas) {\n    super();\n    this.editor = editor;\n  }\n\n  isRightButton = (event: ToolEventExtend) => event.event.which === 3 || event.modifiers.space;\n\n  isCtrlKey = (event: ToolEventExtend) => event.event.ctrlKey;\n\n  onMouseDown = (event: ToolEventExtend) => {\n    if (this.isRightButton(event)) {\n      this.downPoint = Paper.view.projectToView(event.point);\n      this.downCenter = Paper.view.center;\n      return;\n    }\n\n    if (this.editor) {\n      if (!this.isCtrlKey(event) && this.editor.hits) {\n        // move start\n        if (this.editor.selectedPoints.length > 0 && this.editor.isPointInSelectedPoints(this.editor.hits.item.data.pointIndex)) {\n          // multi points\n          this.movingPoints = this.editor.selectedPoints;\n        } else if (this.editor.hits.item && this.editor.hits.item instanceof Paper.Shape) {\n          // single point\n          this.movingPoints = [this.editor.hits.item];\n        } else if (['handle-in', 'handle-out'].includes(this.editor.hits.type)) {\n          const { handleIn, handleOut } = this.editor.hits.segment;\n          this.movingHandles.actual = this.editor.hits.type === 'handle-in' ? handleIn : handleOut;\n          this.movingHandles.opposite = this.editor.hits.type === 'handle-in' ? handleOut : handleIn;\n        }\n        this.affectedCategories = [];\n        this.movingSegments = [];\n        this.movingPoints.forEach((movingPoint) => {\n          const path = this.editor?.getPathByCategory(movingPoint.data.category);\n          if (path && !path.data.isCircle) {\n            const index = path.data.points.findIndex((p: number) => p === movingPoint.data.pointIndex);\n            if (index >= 0) {\n              this.movingSegments.push(path.segments[index]);\n            }\n          }\n        });\n      } else {\n        // select start\n        this.editor.setMultiPointsUnselected();\n        const localPoint = this.editor.getPointInImage(Paper.view.projectToView(event.point));\n        this.selectPath = new Paper.Path({\n          segments: [localPoint],\n          strokeColor: 'red',\n          strokeWidth: 2,\n          strokeScaling: false,\n        });\n      }\n    }\n  };\n\n  onMouseDrag = (event: ToolEventExtend) => {\n    if (this.isRightButton(event)) {\n      if (!this.downPoint || !this.downCenter) {\n        this.downPoint = Paper.view.projectToView(event.point);\n        this.downCenter = Paper.view.center;\n      }\n\n      const rotation = Math.round(Paper.view.rotation);\n      const targetPoint = Paper.view.projectToView(event.point).rotate(-rotation, this.downPoint);\n      const deltaPixel = targetPoint.subtract(this.downPoint);\n      const candidateCenter = this.downCenter.subtract(deltaPixel.divide(Paper.view.zoom));\n      Paper.view.center = candidateCenter;\n      return;\n    }\n\n    if (this.editor) {\n      const localPoint = this.editor.getPointInImage(Paper.view.projectToView(event.point));\n      const localLastPoint = this.editor.getPointInImage(Paper.view.projectToView(event.lastPoint));\n      const offsetX = localPoint.x - localLastPoint.x;\n      const offsetY = localPoint.y - localLastPoint.y;\n      if (Math.abs(offsetX) > 0 || Math.abs(offsetY) > 0) {\n        this.dragging = true;\n      }\n\n      if (this.movingPoints.length > 0) {\n        // moving\n        /* eslint-disable no-param-reassign */\n        this.movingPoints.forEach((movingPoint) => {\n          if (this.editor?.props.categoryPathShapes[movingPoint.data.category] === CategoryPathShape.CIRCLE) {\n            const path = this.editor.getPathByCategory(movingPoint.data.category);\n            if (path && path.data.isCircle) {\n              const category = this.editor.props.categories.find((c) => c.name === movingPoint.data.category);\n              if (category) {\n                if (!this.affectedCategories.includes(category.name)) {\n                  this.affectedCategories.push(category.name);\n                }\n                const sortedKeys = [...category.keys].sort((a, b) => a - b);\n                const pIndex1 = sortedKeys[0];\n                const pIndex2 = sortedKeys[Math.ceil(sortedKeys.length / 2)];\n                if (movingPoint.data.pointIndex !== pIndex1 && movingPoint.data.pointIndex !== pIndex2) {\n                  return;\n                }\n              }\n            }\n          }\n          movingPoint.position.x += offsetX;\n          movingPoint.position.y += offsetY;\n        });\n        this.movingSegments.forEach((movingSegment) => {\n          movingSegment.point.x += offsetX;\n          movingSegment.point.y += offsetY;\n        });\n        this.affectedCategories.forEach((category) => {\n          this.editor?.updateCirclePath(category);\n        });\n        /* eslint-enable no-param-reassign */\n      } else if (this.movingHandles.actual && this.movingHandles.opposite) {\n        // moving handle point\n        this.movingHandles.actual.x += offsetX;\n        this.movingHandles.actual.y += offsetY;\n        this.movingHandles.opposite.x = -this.movingHandles.actual.x;\n        this.movingHandles.opposite.y = -this.movingHandles.actual.y;\n      } else if (this.selectPath) {\n        // draw select path\n        this.selectPath.add(localPoint);\n      }\n    }\n  };\n\n  onMouseUp = (event: ToolEventExtend) => {\n    if (this.isRightButton(event)) {\n      this.downPoint = null;\n      this.downCenter = null;\n      return;\n    }\n\n    if (!this.isCtrlKey(event) && this.movingPoints.length > 0) {\n      // move ends\n      if (this.dragging) {\n        const otherPoints: { pointIndex: number, position: { x: number; y: number } }[] = [];\n        this.affectedCategories.forEach((category) => {\n          const updatedPoints = this.editor?.updateCirclePath(category);\n          if (updatedPoints) {\n            updatedPoints.forEach((p) => {\n              otherPoints.push({ pointIndex: p.pointIndex, position: { ...p.point.position } as { x: number, y: number } });\n            });\n          }\n        });\n        this.editor?.updatePointsPosition([...this.movingPoints.map((movingPoint) => ({\n          pointIndex: movingPoint.data.pointIndex,\n          position: { x: movingPoint.position.x, y: movingPoint.position.y },\n        })), ...otherPoints]);\n      }\n      this.editor?.props.setSelectedPoint(this.movingPoints[0].data.pointIndex);\n      this.movingPoints = [];\n      this.movingSegments = [];\n      this.affectedCategories = [];\n    } else if (this.movingHandles.actual && this.movingHandles.opposite) {\n      // handle move ends\n      this.movingHandles = {};\n    } else if (this.selectPath && this.dragging) {\n      // select ends\n      if (this.editor?.mainLayer) {\n        const center = this.editor.mainLayer.localToGlobal(this.selectPath.bounds.center);\n        const hits = this.editor.mainLayer.hitTestAll(center, {\n          fill: true,\n          segments: true,\n          tolerance: this.selectPath.bounds.topLeft.getDistance(this.selectPath.bounds.bottomRight) / 2,\n        });\n        const selectedPoints: Set<paper.Shape> = new Set();\n        hits.forEach((seg) => {\n          if (seg.item.data.type === SHAPE_TYPE.POINT && this.selectPath?.bounds.contains(seg.item.position)) {\n            selectedPoints.add(seg.item as paper.Shape);\n          }\n        });\n        this.editor.setMultiPointsSelected(Array.from(selectedPoints));\n      }\n      this.selectPath.remove();\n      this.selectPath = null;\n    } else if (this.editor?.canAddPoint()) {\n      // add point\n      const point = Paper.view.projectToView(event.point);\n      // if (this.editor?.isPointInImage(point)) {\n      this.editor.addPoint(point);\n      // }\n    } else {\n      // clear selection and move next\n      this.editor?.props.setNextEmptyPoint();\n    }\n\n    this.dragging = false;\n  };\n\n  onKeyDown = (event: paper.KeyEvent) => {\n    switch (event.key.toLowerCase()) {\n      case 'delete':\n      case 'backspace':\n        event.preventDefault();\n        this.editor?.deleteSelectedPoints();\n        break;\n      case 'a':\n        event.preventDefault();\n        this.editor?.autoAdjust();\n        break;\n      case 'c':\n        event.preventDefault();\n        this.editor?.switchSmoothMode();\n        break;\n      case 'o':\n        event.preventDefault();\n        this.editor?.setCategoryAsCircle();\n        break;\n      case 'f':\n        event.preventDefault();\n        if (screenfull.isEnabled) {\n          if (this.editor?.props.isFullScreen) {\n            screenfull.exit();\n          } else {\n            screenfull.request();\n          }\n          this.editor?.props.setFullScreen(!this.editor?.props.isFullScreen);\n        }\n        break;\n      case 'g':\n        event.preventDefault();\n        this.editor?.props.setGridVisible(!this.editor?.props.isGridVisible);\n        break;\n      case 'l':\n        event.preventDefault();\n        this.editor?.props.setLabelVisible(!this.editor?.props.isLabelVisible);\n        break;\n      case 's':\n        event.preventDefault();\n        this.editor?.props.onSave();\n        break;\n      case 'v':\n        event.preventDefault();\n        this.editor?.toggleSelectedPointVisibility();\n        break;\n      case 'z':\n        event.preventDefault();\n        this.editor?.props.undo();\n        break;\n      case 'y':\n        event.preventDefault();\n        this.editor?.props.redo();\n        break;\n      default:\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}