{"ast":null,"code":"import { makeAutoObservable, toJS } from 'mobx';\nimport { ReviewMode } from '../types';\nimport Cursor from '../../common/Cursor';\nimport { isReviewEditable } from '../../../utils/tool-mode';\n\n/**\n * store for config\n * @class\n */\nexport default class ConfigStore {\n  /**\n   * active measurement box\n   * @getter\n   */\n  get activeMeasurementBox() {\n    return (toJS(this.measurementBoxList) || [])[this.activeMeasurementBoxIndex];\n  }\n\n  /**\n   * is there any modal opened\n   * @getter\n   */\n  get isAnyModalOpened() {\n    return this.attributesModalVisible || this.reviewModalVisible || this.pointAttributesModalVisible || this.frameAttributesModalVisible;\n  }\n  constructor(rootStore) {\n    /**\n     * root store\n     */\n    this.rootStore = void 0;\n    /**\n     * add mode, true means adding active\n     */\n    this.addMode = false;\n    /**\n     * review mode\n     */\n    this.reviewMode = ReviewMode.LABELING;\n    /**\n     * current cursor\n     */\n    this.cursor = Cursor.INHERIT;\n    /**\n     * canvas view scale factor\n     */\n    this.viewScale = 1;\n    /**\n     * canvas view position\n     */\n    this.viewPosition = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * whether cross line visible\n     */\n    this.crossLineVisible = true;\n    /**\n     * is attributes modal visible\n     */\n    this.attributesModalVisible = false;\n    /**\n     * point attributes modal visible\n     */\n    this.pointAttributesModalVisible = false;\n    /**\n     * frame attributes modal visible\n     */\n    this.frameAttributesModalVisible = false;\n    /**\n     * is review modal visible\n     */\n    this.reviewModalVisible = false;\n    /**\n     * measurement box list\n     */\n    this.measurementBoxList = null;\n    /**\n     * active measurement box index\n     */\n    this.activeMeasurementBoxIndex = -1;\n    /**\n     * Whether the shape can be rotated\n     */\n    this.rotatable = false;\n    /**\n     * auto snap to polygon & line vertexes\n     */\n    this.autoSnapPoint = true;\n    makeAutoObservable(this, {\n      rootStore: false\n    }, {\n      autoBind: true\n    });\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload) {\n    // set default review mode\n    this.reviewMode = isReviewEditable(payload.jobProxy.toolMode) ? ReviewMode.REVIEW : ReviewMode.LABELING;\n\n    // parse measurement box list\n    if (typeof payload.measurement_box === 'string' && payload.measurement_box) {\n      try {\n        const list = JSON.parse(payload.measurement_box);\n        if (Array.isArray(list) && list.every(i => i.length === 2 && typeof i[0] === 'number' && typeof i[1] === 'number')) {\n          this.measurementBoxList = list;\n        }\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse rotatable\n    this.rotatable = payload.rotatable === 'true' || payload.rotatable === true;\n\n    // parse auto snap point\n    this.autoSnapPoint = payload.auto_snap_point !== 'false' && payload.auto_snap_point !== false;\n  }\n\n  /**\n   * set add mode\n   * @param addMode\n   */\n  setAddMode(addMode) {\n    if (this.rootStore.readonly || this.isAnyModalOpened || !this.rootStore.ontology.selectedCategory) {\n      return;\n    }\n    this.addMode = addMode;\n    // change cursor\n    this.cursor = addMode ? Cursor.CROSSHAIR : Cursor.DEFAULT;\n    // change other shapes interactive\n    this.rootStore.shape.updateShapesInteractive(!addMode);\n    // remove drawing shape if needed\n    if (!addMode && this.rootStore.shape.drawingShape) {\n      this.rootStore.shape.drawingShape.destroy();\n      this.rootStore.shape.drawingShape = null;\n    }\n    // hide or show predict shape\n    if (addMode) {\n      this.rootStore.shape.clearPredictedShapes();\n    } else {\n      this.rootStore.shape.predict();\n    }\n  }\n  /**\n   * set review mode\n   * @param reviewMode\n   */\n  setReviewMode(reviewMode) {\n    if (this.reviewMode !== reviewMode) {\n      this.setAddMode(false);\n      this.reviewMode = reviewMode;\n      this.rootStore.review.unselectReview();\n      this.rootStore.shape.updateShapesEditable(reviewMode === ReviewMode.LABELING);\n    }\n  }\n\n  /**\n   * set view scale\n   * @param viewScale\n   */\n  setViewScale(viewScale) {\n    this.viewScale = viewScale;\n    this.rootStore.review.updateAnchorsScale(viewScale);\n  }\n\n  /**\n   * set view position\n   * @param position\n   */\n  setViewPosition(position) {\n    this.viewPosition = {\n      ...position\n    };\n    this.rootStore.shape.redrawShapesLabel();\n  }\n\n  /**\n   * set cross line visible\n   * @param visible\n   */\n  setCrossLineVisible(visible) {\n    this.crossLineVisible = visible;\n  }\n\n  /**\n   * set attributes modal visibility\n   * @param visible\n   */\n  setAttributesModalVisible(visible) {\n    this.attributesModalVisible = visible;\n  }\n\n  /**\n   * set review modal visibility\n   * @param visible\n   */\n  setReviewModalVisible(visible) {\n    this.reviewModalVisible = visible;\n  }\n\n  /**\n   * set point attributes modal visibility\n   * @param visible\n   */\n  setPointAttributesModalVisible(visible) {\n    this.pointAttributesModalVisible = visible;\n  }\n\n  /**\n   * set frame attributes modal visibility\n   * @param visible\n   */\n  setFrameAttributesModalVisible(visible) {\n    this.frameAttributesModalVisible = visible;\n  }\n\n  /**\n   * set measurement box indexs\n   * @param index\n   */\n  setMeasurementBoxIndex(index) {\n    this.activeMeasurementBoxIndex = index;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","toJS","ReviewMode","Cursor","isReviewEditable","ConfigStore","activeMeasurementBox","measurementBoxList","activeMeasurementBoxIndex","isAnyModalOpened","attributesModalVisible","reviewModalVisible","pointAttributesModalVisible","frameAttributesModalVisible","constructor","rootStore","addMode","reviewMode","LABELING","cursor","INHERIT","viewScale","viewPosition","x","y","crossLineVisible","rotatable","autoSnapPoint","autoBind","init","payload","jobProxy","toolMode","REVIEW","measurement_box","list","JSON","parse","Array","isArray","every","i","length","e","auto_snap_point","setAddMode","readonly","ontology","selectedCategory","CROSSHAIR","DEFAULT","shape","updateShapesInteractive","drawingShape","destroy","clearPredictedShapes","predict","setReviewMode","review","unselectReview","updateShapesEditable","setViewScale","updateAnchorsScale","setViewPosition","position","redrawShapesLabel","setCrossLineVisible","visible","setAttributesModalVisible","setReviewModalVisible","setPointAttributesModalVisible","setFrameAttributesModalVisible","setMeasurementBoxIndex","index"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/video-tracking2/store/ConfigStore.ts"],"sourcesContent":["import { makeAutoObservable, toJS } from 'mobx';\nimport RootStore from './RootStore';\nimport { Payload, ReviewMode } from '../types';\nimport Cursor from '../../common/Cursor';\nimport { isReviewEditable } from '../../../utils/tool-mode';\n\n/**\n * store for config\n * @class\n */\nexport default class ConfigStore {\n  /**\n   * root store\n   */\n  rootStore: typeof RootStore;\n\n  /**\n   * add mode, true means adding active\n   */\n  addMode = false;\n\n  /**\n   * review mode\n   */\n  reviewMode = ReviewMode.LABELING;\n\n  /**\n   * current cursor\n   */\n  cursor = Cursor.INHERIT;\n\n  /**\n   * canvas view scale factor\n   */\n  viewScale = 1;\n\n  /**\n   * canvas view position\n   */\n  viewPosition = { x: 0, y: 0 };\n\n  /**\n   * whether cross line visible\n   */\n  crossLineVisible = true;\n\n  /**\n   * is attributes modal visible\n   */\n  attributesModalVisible = false;\n\n  /**\n   * point attributes modal visible\n   */\n  pointAttributesModalVisible = false;\n\n  /**\n   * frame attributes modal visible\n   */\n  frameAttributesModalVisible = false;\n\n  /**\n   * is review modal visible\n   */\n  reviewModalVisible = false;\n\n  /**\n   * measurement box list\n   */\n  measurementBoxList: number[][] | null = null;\n\n  /**\n   * active measurement box index\n   */\n  activeMeasurementBoxIndex = -1;\n\n  /**\n   * Whether the shape can be rotated\n   */\n  rotatable = false;\n\n  /**\n   * auto snap to polygon & line vertexes\n   */\n  autoSnapPoint = true;\n\n  /**\n   * active measurement box\n   * @getter\n   */\n  get activeMeasurementBox() {\n    return (toJS(this.measurementBoxList) || [])[this.activeMeasurementBoxIndex];\n  }\n\n  /**\n   * is there any modal opened\n   * @getter\n   */\n  get isAnyModalOpened() {\n    return this.attributesModalVisible\n      || this.reviewModalVisible\n      || this.pointAttributesModalVisible\n      || this.frameAttributesModalVisible;\n  }\n\n  constructor(rootStore: typeof RootStore) {\n    makeAutoObservable(this, {\n      rootStore: false,\n    }, {\n      autoBind: true,\n    });\n\n    this.rootStore = rootStore;\n  }\n\n  /**\n   * init from paylod\n   * @param payload\n   */\n  init(payload: Payload) {\n    // set default review mode\n    this.reviewMode = isReviewEditable(payload.jobProxy.toolMode) ? ReviewMode.REVIEW : ReviewMode.LABELING;\n\n    // parse measurement box list\n    if (typeof payload.measurement_box === 'string' && payload.measurement_box) {\n      try {\n        const list = JSON.parse(payload.measurement_box);\n        if (Array.isArray(list) && list.every((i) => i.length === 2 && typeof i[0] === 'number' && typeof i[1] === 'number')) {\n          this.measurementBoxList = list;\n        }\n      } catch (e) {\n        // parse error\n      }\n    }\n\n    // parse rotatable\n    this.rotatable = payload.rotatable === 'true' || payload.rotatable === true;\n\n    // parse auto snap point\n    this.autoSnapPoint = payload.auto_snap_point !== 'false' && payload.auto_snap_point !== false;\n  }\n\n  /**\n   * set add mode\n   * @param addMode\n   */\n  setAddMode(addMode: boolean) {\n    if (this.rootStore.readonly || this.isAnyModalOpened || !this.rootStore.ontology.selectedCategory) {\n      return;\n    }\n\n    this.addMode = addMode;\n    // change cursor\n    this.cursor = addMode ? Cursor.CROSSHAIR : Cursor.DEFAULT;\n    // change other shapes interactive\n    this.rootStore.shape.updateShapesInteractive(!addMode);\n    // remove drawing shape if needed\n    if (!addMode && this.rootStore.shape.drawingShape) {\n      this.rootStore.shape.drawingShape.destroy();\n      this.rootStore.shape.drawingShape = null;\n    }\n    // hide or show predict shape\n    if (addMode) {\n      this.rootStore.shape.clearPredictedShapes();\n    } else {\n      this.rootStore.shape.predict();\n    }\n  };\n\n  /**\n   * set review mode\n   * @param reviewMode\n   */\n  setReviewMode(reviewMode: ReviewMode) {\n    if (this.reviewMode !== reviewMode) {\n      this.setAddMode(false);\n      this.reviewMode = reviewMode;\n      this.rootStore.review.unselectReview();\n      this.rootStore.shape.updateShapesEditable(reviewMode === ReviewMode.LABELING);\n    }\n  }\n\n  /**\n   * set view scale\n   * @param viewScale\n   */\n  setViewScale(viewScale: number) {\n    this.viewScale = viewScale;\n    this.rootStore.review.updateAnchorsScale(viewScale);\n  }\n\n  /**\n   * set view position\n   * @param position\n   */\n  setViewPosition(position: { x: number; y: number }) {\n    this.viewPosition = { ...position };\n    this.rootStore.shape.redrawShapesLabel();\n  }\n\n  /**\n   * set cross line visible\n   * @param visible\n   */\n  setCrossLineVisible(visible: boolean) {\n    this.crossLineVisible = visible;\n  }\n\n  /**\n   * set attributes modal visibility\n   * @param visible\n   */\n  setAttributesModalVisible(visible: boolean) {\n    this.attributesModalVisible = visible;\n  }\n\n  /**\n   * set review modal visibility\n   * @param visible\n   */\n  setReviewModalVisible(visible: boolean) {\n    this.reviewModalVisible = visible;\n  }\n\n  /**\n   * set point attributes modal visibility\n   * @param visible\n   */\n  setPointAttributesModalVisible(visible: boolean) {\n    this.pointAttributesModalVisible = visible;\n  }\n\n  /**\n   * set frame attributes modal visibility\n   * @param visible\n   */\n  setFrameAttributesModalVisible(visible: boolean) {\n    this.frameAttributesModalVisible = visible;\n  }\n\n  /**\n   * set measurement box indexs\n   * @param index\n   */\n  setMeasurementBoxIndex(index: number) {\n    this.activeMeasurementBoxIndex = index;\n  }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,IAAI,QAAQ,MAAM;AAE/C,SAAkBC,UAAU,QAAQ,UAAU;AAC9C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,gBAAgB,QAAQ,0BAA0B;;AAE3D;AACA;AACA;AACA;AACA,eAAe,MAAMC,WAAW,CAAC;EA4E/B;AACF;AACA;AACA;EACE,IAAIC,oBAAoBA,CAAA,EAAG;IACzB,OAAO,CAACL,IAAI,CAAC,IAAI,CAACM,kBAAkB,CAAC,IAAI,EAAE,EAAE,IAAI,CAACC,yBAAyB,CAAC;EAC9E;;EAEA;AACF;AACA;AACA;EACE,IAAIC,gBAAgBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACC,sBAAsB,IAC7B,IAAI,CAACC,kBAAkB,IACvB,IAAI,CAACC,2BAA2B,IAChC,IAAI,CAACC,2BAA2B;EACvC;EAEAC,WAAWA,CAACC,SAA2B,EAAE;IA9FzC;AACF;AACA;IAFE,KAGAA,SAAS;IAET;AACF;AACA;IAFE,KAGAC,OAAO,GAAG,KAAK;IAEf;AACF;AACA;IAFE,KAGAC,UAAU,GAAGf,UAAU,CAACgB,QAAQ;IAEhC;AACF;AACA;IAFE,KAGAC,MAAM,GAAGhB,MAAM,CAACiB,OAAO;IAEvB;AACF;AACA;IAFE,KAGAC,SAAS,GAAG,CAAC;IAEb;AACF;AACA;IAFE,KAGAC,YAAY,GAAG;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IAE7B;AACF;AACA;IAFE,KAGAC,gBAAgB,GAAG,IAAI;IAEvB;AACF;AACA;IAFE,KAGAf,sBAAsB,GAAG,KAAK;IAE9B;AACF;AACA;IAFE,KAGAE,2BAA2B,GAAG,KAAK;IAEnC;AACF;AACA;IAFE,KAGAC,2BAA2B,GAAG,KAAK;IAEnC;AACF;AACA;IAFE,KAGAF,kBAAkB,GAAG,KAAK;IAE1B;AACF;AACA;IAFE,KAGAJ,kBAAkB,GAAsB,IAAI;IAE5C;AACF;AACA;IAFE,KAGAC,yBAAyB,GAAG,CAAC,CAAC;IAE9B;AACF;AACA;IAFE,KAGAkB,SAAS,GAAG,KAAK;IAEjB;AACF;AACA;IAFE,KAGAC,aAAa,GAAG,IAAI;IAsBlB3B,kBAAkB,CAAC,IAAI,EAAE;MACvBe,SAAS,EAAE;IACb,CAAC,EAAE;MACDa,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,IAAI,CAACb,SAAS,GAAGA,SAAS;EAC5B;;EAEA;AACF;AACA;AACA;EACEc,IAAIA,CAACC,OAAgB,EAAE;IACrB;IACA,IAAI,CAACb,UAAU,GAAGb,gBAAgB,CAAC0B,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAAC,GAAG9B,UAAU,CAAC+B,MAAM,GAAG/B,UAAU,CAACgB,QAAQ;;IAEvG;IACA,IAAI,OAAOY,OAAO,CAACI,eAAe,KAAK,QAAQ,IAAIJ,OAAO,CAACI,eAAe,EAAE;MAC1E,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACP,OAAO,CAACI,eAAe,CAAC;QAChD,IAAII,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,IAAIA,IAAI,CAACK,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAK,CAAC,IAAI,OAAOD,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAOA,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,EAAE;UACpH,IAAI,CAAClC,kBAAkB,GAAG4B,IAAI;QAChC;MACF,CAAC,CAAC,OAAOQ,CAAC,EAAE;QACV;MAAA;IAEJ;;IAEA;IACA,IAAI,CAACjB,SAAS,GAAGI,OAAO,CAACJ,SAAS,KAAK,MAAM,IAAII,OAAO,CAACJ,SAAS,KAAK,IAAI;;IAE3E;IACA,IAAI,CAACC,aAAa,GAAGG,OAAO,CAACc,eAAe,KAAK,OAAO,IAAId,OAAO,CAACc,eAAe,KAAK,KAAK;EAC/F;;EAEA;AACF;AACA;AACA;EACEC,UAAUA,CAAC7B,OAAgB,EAAE;IAC3B,IAAI,IAAI,CAACD,SAAS,CAAC+B,QAAQ,IAAI,IAAI,CAACrC,gBAAgB,IAAI,CAAC,IAAI,CAACM,SAAS,CAACgC,QAAQ,CAACC,gBAAgB,EAAE;MACjG;IACF;IAEA,IAAI,CAAChC,OAAO,GAAGA,OAAO;IACtB;IACA,IAAI,CAACG,MAAM,GAAGH,OAAO,GAAGb,MAAM,CAAC8C,SAAS,GAAG9C,MAAM,CAAC+C,OAAO;IACzD;IACA,IAAI,CAACnC,SAAS,CAACoC,KAAK,CAACC,uBAAuB,CAAC,CAACpC,OAAO,CAAC;IACtD;IACA,IAAI,CAACA,OAAO,IAAI,IAAI,CAACD,SAAS,CAACoC,KAAK,CAACE,YAAY,EAAE;MACjD,IAAI,CAACtC,SAAS,CAACoC,KAAK,CAACE,YAAY,CAACC,OAAO,CAAC,CAAC;MAC3C,IAAI,CAACvC,SAAS,CAACoC,KAAK,CAACE,YAAY,GAAG,IAAI;IAC1C;IACA;IACA,IAAIrC,OAAO,EAAE;MACX,IAAI,CAACD,SAAS,CAACoC,KAAK,CAACI,oBAAoB,CAAC,CAAC;IAC7C,CAAC,MAAM;MACL,IAAI,CAACxC,SAAS,CAACoC,KAAK,CAACK,OAAO,CAAC,CAAC;IAChC;EACF;EAEA;AACF;AACA;AACA;EACEC,aAAaA,CAACxC,UAAsB,EAAE;IACpC,IAAI,IAAI,CAACA,UAAU,KAAKA,UAAU,EAAE;MAClC,IAAI,CAAC4B,UAAU,CAAC,KAAK,CAAC;MACtB,IAAI,CAAC5B,UAAU,GAAGA,UAAU;MAC5B,IAAI,CAACF,SAAS,CAAC2C,MAAM,CAACC,cAAc,CAAC,CAAC;MACtC,IAAI,CAAC5C,SAAS,CAACoC,KAAK,CAACS,oBAAoB,CAAC3C,UAAU,KAAKf,UAAU,CAACgB,QAAQ,CAAC;IAC/E;EACF;;EAEA;AACF;AACA;AACA;EACE2C,YAAYA,CAACxC,SAAiB,EAAE;IAC9B,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACN,SAAS,CAAC2C,MAAM,CAACI,kBAAkB,CAACzC,SAAS,CAAC;EACrD;;EAEA;AACF;AACA;AACA;EACE0C,eAAeA,CAACC,QAAkC,EAAE;IAClD,IAAI,CAAC1C,YAAY,GAAG;MAAE,GAAG0C;IAAS,CAAC;IACnC,IAAI,CAACjD,SAAS,CAACoC,KAAK,CAACc,iBAAiB,CAAC,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;EACEC,mBAAmBA,CAACC,OAAgB,EAAE;IACpC,IAAI,CAAC1C,gBAAgB,GAAG0C,OAAO;EACjC;;EAEA;AACF;AACA;AACA;EACEC,yBAAyBA,CAACD,OAAgB,EAAE;IAC1C,IAAI,CAACzD,sBAAsB,GAAGyD,OAAO;EACvC;;EAEA;AACF;AACA;AACA;EACEE,qBAAqBA,CAACF,OAAgB,EAAE;IACtC,IAAI,CAACxD,kBAAkB,GAAGwD,OAAO;EACnC;;EAEA;AACF;AACA;AACA;EACEG,8BAA8BA,CAACH,OAAgB,EAAE;IAC/C,IAAI,CAACvD,2BAA2B,GAAGuD,OAAO;EAC5C;;EAEA;AACF;AACA;AACA;EACEI,8BAA8BA,CAACJ,OAAgB,EAAE;IAC/C,IAAI,CAACtD,2BAA2B,GAAGsD,OAAO;EAC5C;;EAEA;AACF;AACA;AACA;EACEK,sBAAsBA,CAACC,KAAa,EAAE;IACpC,IAAI,CAACjE,yBAAyB,GAAGiE,KAAK;EACxC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}