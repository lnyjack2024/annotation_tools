{"ast":null,"code":"/* eslint-disable no-useless-escape */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-bitwise */\nimport hash from 'object-hash';\n\n// 判断format是否为日期\nexport function isDateFormat(fmt) {\n  return /^[^\\)\\(;]*(?=.*(y|d))[^\\)\\(;]*$/.test(fmt);\n}\nexport function isTimeFormat(fmt) {\n  return /^[^\\)\\(;]*(?=.*(h|s))[^\\)\\(;]*$/.test(fmt);\n}\nexport function isDateTimeFormat(fmt) {\n  return isDateFormat(fmt) || isTimeFormat(fmt);\n}\n\n// 从index获取单元格的位置（26进制）\nexport function getCellPosition(row, col) {\n  return decToBase26(col) + (+row + 1);\n}\n\n// 从26进制的单元格坐标获取index（10进制）\nexport function getCellIndexPosition(c) {\n  const row = Number(c.replace(/[A-Z]+/, '')) - 1;\n  const col = base26ToDec(c.replace(/\\d+/, ''));\n  return {\n    row,\n    col\n  };\n}\n\n// 判断单元格是否为空\nexport function isCellEmpty(cell) {\n  if (!cell.value && Object.keys(cell.style).length === 0) return true;\n  return false;\n}\n\n// 检查单元格是否是合并的状态（排除第一个）\n// 若为merge的状态\nexport function getMergeStatus(rowNum, colNum, merges) {\n  for (let i = 0; i < merges.length; i += 1) {\n    const merge = merges[i];\n    const coord = merge.split(':');\n    const {\n      row: rowS,\n      col: colS\n    } = getCellIndexPosition(coord[0]);\n    const {\n      row: rowE,\n      col: colE\n    } = getCellIndexPosition(coord[1]);\n    if (rowNum >= rowS && rowNum <= rowE && colNum >= colS && colNum <= colE) return merge;\n  }\n  return null;\n}\n\n// 将样式压入样式池并返回压入的位置\n// 当有相同的样式在样式池，不压入样式，并返回那个样式的位置\nexport function insertStyle(styles) {\n  const styleList = {\n    len: 0\n  };\n  const stylesPool = styles;\n  return style => {\n    const hashStyle = hash(style);\n    if (hashStyle in styleList) return styleList[hashStyle];\n    styleList[hashStyle] = styleList.len++;\n    stylesPool.push(style);\n    return styleList[hashStyle];\n  };\n}\nexport function uint8ToString(u8a) {\n  const CHUNK_SZ = 0x8000;\n  const c = [];\n  for (let i = 0; i < u8a.length; i += CHUNK_SZ) {\n    c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + CHUNK_SZ)));\n  }\n  return c.join('');\n}\nexport function stringToUint8Array(str) {\n  const arr = [];\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  const tmpUint8Array = new Uint8Array(arr);\n  return tmpUint8Array;\n}\nexport function uint8ArrayToString(array) {\n  let char2;\n  let char3;\n  let out = '';\n  let i = 0;\n  const len = array.length;\n  while (i < len) {\n    const c = array[i++];\n    switch (c >> 4) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12:\n      case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);\n        break;\n      default:\n        break;\n    }\n  }\n  return out;\n}\n\n// 将10进制数字转成excel列字符\n// 例： 0 -> A; 26 -> AA\nfunction decToBase26(num) {\n  let colChar = '';\n  while (num >= 0) {\n    colChar = String.fromCharCode('A'.charCodeAt(0) + +(num % 26)) + colChar;\n    num = Math.floor(num / 26) - 1;\n  }\n  return colChar;\n}\n\n// 将excel列字符转成10进制数字\n// 例：A -> 0; Z -> 25; AA -> 26\nfunction base26ToDec(c) {\n  return c.split('').reduce((prev, cur) => prev * 26 + cur.charCodeAt(0) - 'A'.charCodeAt(0) + 1, 0) - 1;\n}","map":{"version":3,"names":["hash","isDateFormat","fmt","test","isTimeFormat","isDateTimeFormat","getCellPosition","row","col","decToBase26","getCellIndexPosition","c","Number","replace","base26ToDec","isCellEmpty","cell","value","Object","keys","style","length","getMergeStatus","rowNum","colNum","merges","i","merge","coord","split","rowS","colS","rowE","colE","insertStyle","styles","styleList","len","stylesPool","hashStyle","push","uint8ToString","u8a","CHUNK_SZ","String","fromCharCode","apply","subarray","join","stringToUint8Array","str","arr","j","charCodeAt","tmpUint8Array","Uint8Array","uint8ArrayToString","array","char2","char3","out","num","colChar","Math","floor","reduce","prev","cur"],"sources":["/Users/qzheng/Documents/webroot/annotation_tools/src/components/excel/utils.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-bitwise */\nimport hash from 'object-hash';\n\n// 判断format是否为日期\nexport function isDateFormat(fmt) {\n  return /^[^\\)\\(;]*(?=.*(y|d))[^\\)\\(;]*$/.test(fmt);\n}\n\nexport function isTimeFormat(fmt) {\n  return /^[^\\)\\(;]*(?=.*(h|s))[^\\)\\(;]*$/.test(fmt);\n}\n\nexport function isDateTimeFormat(fmt) {\n  return isDateFormat(fmt) || isTimeFormat(fmt);\n}\n\n// 从index获取单元格的位置（26进制）\nexport function getCellPosition(row, col) {\n  return decToBase26(col) + (+row + 1);\n}\n\n// 从26进制的单元格坐标获取index（10进制）\nexport function getCellIndexPosition(c) {\n  const row = Number(c.replace(/[A-Z]+/, '')) - 1;\n  const col = base26ToDec(c.replace(/\\d+/, ''));\n  return { row, col };\n}\n\n// 判断单元格是否为空\nexport function isCellEmpty(cell) {\n  if (!cell.value && Object.keys(cell.style).length === 0) return true;\n  return false;\n}\n\n// 检查单元格是否是合并的状态（排除第一个）\n// 若为merge的状态\nexport function getMergeStatus(rowNum, colNum, merges) {\n  for (let i = 0; i < merges.length; i += 1) {\n    const merge = merges[i];\n    const coord = merge.split(':');\n    const { row: rowS, col: colS } = getCellIndexPosition(coord[0]);\n    const { row: rowE, col: colE } = getCellIndexPosition(coord[1]);\n    if (rowNum >= rowS && rowNum <= rowE && colNum >= colS && colNum <= colE) return merge;\n  }\n  return null;\n}\n\n// 将样式压入样式池并返回压入的位置\n// 当有相同的样式在样式池，不压入样式，并返回那个样式的位置\nexport function insertStyle(styles) {\n  const styleList = {\n    len: 0,\n  };\n  const stylesPool = styles;\n  return (style) => {\n    const hashStyle = hash(style);\n    if (hashStyle in styleList) return styleList[hashStyle];\n    styleList[hashStyle] = styleList.len++;\n    stylesPool.push(style);\n    return styleList[hashStyle];\n  };\n}\n\nexport function uint8ToString(u8a) {\n  const CHUNK_SZ = 0x8000;\n  const c = [];\n  for (let i = 0; i < u8a.length; i += CHUNK_SZ) {\n    c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + CHUNK_SZ)));\n  }\n  return c.join('');\n}\n\nexport function stringToUint8Array(str) {\n  const arr = [];\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n\n  const tmpUint8Array = new Uint8Array(arr);\n  return tmpUint8Array;\n}\n\nexport function uint8ArrayToString(array) {\n  let char2; let\n    char3;\n  let out = '';\n  let i = 0;\n  const len = array.length;\n  while (i < len) {\n    const c = array[i++];\n    switch (c >> 4) {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                      ((char2 & 0x3F) << 6) |\n                      ((char3 & 0x3F) << 0));\n        break;\n      default:\n        break;\n    }\n  }\n  return out;\n}\n\n// 将10进制数字转成excel列字符\n// 例： 0 -> A; 26 -> AA\nfunction decToBase26(num) {\n  let colChar = '';\n  while (num >= 0) {\n    colChar = String.fromCharCode('A'.charCodeAt(0) + +(num % 26)) + colChar;\n    num = Math.floor(num / 26) - 1;\n  }\n  return colChar;\n}\n\n// 将excel列字符转成10进制数字\n// 例：A -> 0; Z -> 25; AA -> 26\nfunction base26ToDec(c) {\n  return c.split('').reduce((prev, cur) => prev * 26 + cur.charCodeAt(0) - 'A'.charCodeAt(0) + 1, 0) - 1;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}