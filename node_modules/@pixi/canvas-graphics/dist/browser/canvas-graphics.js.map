{"version":3,"file":"canvas-graphics.js","sources":["../../src/utils/PolygonUtils.ts","../../src/CanvasGraphicsRenderer.ts","../../src/Graphics.ts"],"sourcesContent":["/**\n * Utilities for polygon\n * @class\n * @private\n */\nexport class PolygonUtils\n{\n    /**\n    * Calculate points of an offset polygon\n    * @see {@link http://csharphelper.com/blog/2016/01/enlarge-a-polygon-in-c/}\n    *\n    * @private\n    * @param {number[]} points - polygon coordinates\n    * @param {number} offset\n    * @return {number[]} - offset points\n    */\n    static offsetPolygon(points: number[], offset: number): number[]\n    {\n        const offsetPoints: number[] = [];\n        const length: number = points.length;\n\n        offset = PolygonUtils.isPolygonClockwise(points) ? offset : -1 * offset;\n\n        for (let j = 0; j < length; j += 2)\n        {\n            // Find location for the points before and after j\n            let i = (j - 2);\n\n            if (i < 0)\n            {\n                i += length;\n            }\n\n            const k = (j + 2) % length;\n\n            // Move the points by the offset\n            let v1x = points[j] - points[i];\n            let v1y = points[j + 1] - points[i + 1];\n            let len = Math.sqrt((v1x * v1x) + (v1y * v1y));\n\n            v1x /= len;\n            v1y /= len;\n            v1x *= offset;\n            v1y *= offset;\n\n            const norm1x = -v1y;\n            const norm1y = v1x;\n\n            const pij1 = [points[i] + norm1x, points[i + 1] + norm1y];\n            const pij2 = [points[j] + norm1x, points[j + 1] + norm1y];\n\n            let v2x = points[k] - points[j];\n            let v2y = points[k + 1] - points[j + 1];\n\n            len = Math.sqrt((v2x * v2x) + (v2y * v2y));\n\n            v2x /= len;\n            v2y /= len;\n            v2x *= offset;\n            v2y *= offset;\n\n            const norm2x = -v2y;\n            const norm2y = v2x;\n\n            const pjk1 = [points[j] + norm2x, points[j + 1] + norm2y];\n            const pjk2 = [points[k] + norm2x, points[k + 1] + norm2y];\n\n            // Find where the shifted lines ij and jk intersect.\n            const intersectPoint = PolygonUtils\n                .findIntersection(pij1[0], pij1[1], pij2[0], pij2[1], pjk1[0], pjk1[1], pjk2[0], pjk2[1]);\n\n            if (intersectPoint)\n            {\n                offsetPoints.push(...intersectPoint);\n            }\n        }\n\n        return offsetPoints;\n    }\n\n    /**\n    * Determine the intersection point of two line segments\n    * @see {@link here http://paulbourke.net/geometry/pointlineplane/}\n    *\n    * @private\n    * @param {number} x1 - x-coordinate of start point at first line\n    * @param {number} y1 - y-coordinate of start point at first line\n    * @param {number} x2 - x-coordinate of end point at first line\n    * @param {number} y2 - y-coordinate of end point at first line\n    * @param {number} x3 - x-coordinate of start point at second line\n    * @param {number} y3 - y-coordinate of start point at second line\n    * @param {number} x4 - x-coordinate of end point at second line\n    * @param {number} y4 - y-coordinate of end point at second line\n    * @returns {[number, number] | null} - [x, y] coordinates of intersection\n    */\n    static findIntersection(\n        x1: number, y1: number, x2: number, y2: number,\n        x3: number, y3: number, x4: number, y4: number\n    ): [number, number] | null\n    {\n        const denominator = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));\n        const numeratorA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));\n        const numeratorB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));\n\n        // lines are parallel\n        if (denominator === 0)\n        {\n            // lines are coincident\n            if (numeratorA === 0 && numeratorB === 0)\n            {\n                return [(x1 + x2) / 2, (y1 + y2) / 2];\n            }\n\n            return null;\n        }\n\n        const uA = numeratorA / denominator;\n\n        return [x1 + (uA * (x2 - x1)), y1 + (uA * (y2 - y1))];\n    }\n\n    /**\n     * Determine polygon are clockwise or counterclockwise\n     * @see {@link https://stackoverflow.com/questions/1165647}\n     *\n     * @private\n     * @param {number[]} polygon - polygon coordinates\n     * @return {boolean}\n     */\n    static isPolygonClockwise(polygon: number[]): boolean\n    {\n        let sum = 0;\n\n        for (let i = 0; i < polygon.length - 2; i += 2)\n        {\n            sum += (polygon[i + 2] - polygon[i]) * (polygon[i + 3] + polygon[i + 1]);\n        }\n\n        return sum > 0;\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { SHAPES, Matrix } from '@pixi/math';\nimport { canvasUtils, CrossPlatformCanvasRenderingContext2D } from '@pixi/canvas-renderer';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { FillStyle, Graphics, GraphicsData, LineStyle } from '@pixi/graphics';\nimport type { Circle, Ellipse, Polygon, Rectangle, RoundedRectangle } from '@pixi/math';\nimport { PolygonUtils } from './utils/PolygonUtils';\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @protected\n * @memberof PIXI\n */\nexport class CanvasGraphicsRenderer\n{\n    /** A reference to the current renderer */\n    public renderer: CanvasRenderer;\n    private _svgMatrix: DOMMatrix|boolean = null;\n    private _tempMatrix: Matrix = new Matrix();\n\n    /**\n     * @param renderer - A reference to the current renderer.\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * calculates fill/stroke style for canvas\n     *\n     * @private\n     * @param style - A graphics {@link PIXI.FILL_STYLE} where if `texture` is specified then a tinted CanvasPattern\n     * will be used for the fill.stroke\n     * @param tint - color to set the fill/stroke too.\n     */\n    private _calcCanvasStyle(style: FillStyle, tint: number): string|CanvasPattern\n    {\n        let res;\n\n        if (style.texture && style.texture.baseTexture !== Texture.WHITE.baseTexture)\n        {\n            if (style.texture.valid)\n            {\n                res = canvasUtils.getTintedPattern(style.texture, tint);\n                this.setPatternTransform(res, style.matrix || Matrix.IDENTITY);\n            }\n            else\n            {\n                res = '#808080';\n            }\n        }\n        else\n        {\n            res = `#${(`00000${(tint | 0).toString(16)}`).substr(-6)}`;\n        }\n\n        return res;\n    }\n\n    /**\n     * Renders a Graphics object to a canvas.\n     *\n     * @param graphics - the actual graphics object to render\n     */\n    public render(graphics: Graphics): void\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n        const worldAlpha = graphics.worldAlpha;\n        const transform = graphics.transform.worldTransform;\n\n        renderer.setContextTransform(transform);\n        renderer.setBlendMode(graphics.blendMode);\n\n        const graphicsData = graphics.geometry.graphicsData;\n\n        let contextFillStyle;\n        let contextStrokeStyle;\n\n        const tintR = ((graphics.tint >> 16) & 0xFF) / 255;\n        const tintG = ((graphics.tint >> 8) & 0xFF) / 255;\n        const tintB = (graphics.tint & 0xFF) / 255;\n\n        for (let i = 0; i < graphicsData.length; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n            const fillStyle = data.fillStyle;\n            const lineStyle = data.lineStyle;\n\n            const fillColor = data.fillStyle.color | 0;\n            const lineColor = data.lineStyle.color | 0;\n\n            if (data.matrix)\n            {\n                renderer.setContextTransform(transform.copyTo(this._tempMatrix).append(data.matrix));\n            }\n\n            if (fillStyle.visible)\n            {\n                const fillTint = (\n                    (((fillColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                    + (((fillColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                    + (((fillColor & 0xFF) / 255) * tintB * 255)\n                );\n\n                contextFillStyle = this._calcCanvasStyle(fillStyle, fillTint);\n            }\n            if (lineStyle.visible)\n            {\n                const lineTint = (\n                    (((lineColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                    + (((lineColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                    + (((lineColor & 0xFF) / 255) * tintB * 255)\n                );\n\n                contextStrokeStyle = this._calcCanvasStyle(lineStyle, lineTint);\n            }\n\n            context.lineWidth = lineStyle.width;\n            context.lineCap = lineStyle.cap;\n            context.lineJoin = lineStyle.join;\n            context.miterLimit = lineStyle.miterLimit;\n\n            if (data.type === SHAPES.POLY)\n            {\n                context.beginPath();\n\n                const tempShape = shape as Polygon;\n                let points = tempShape.points;\n                const holes = data.holes;\n                let outerArea;\n                let innerArea;\n                let px;\n                let py;\n                let holesDirection: boolean[];\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 2; j < points.length; j += 2)\n                {\n                    context.lineTo(points[j], points[j + 1]);\n                }\n\n                if (tempShape.closeStroke)\n                {\n                    context.closePath();\n                }\n\n                if (holes.length > 0)\n                {\n                    holesDirection = [];\n                    outerArea = 0;\n                    px = points[0];\n                    py = points[1];\n                    for (let j = 2; j + 2 < points.length; j += 2)\n                    {\n                        outerArea += ((points[j] - px) * (points[j + 3] - py))\n                            - ((points[j + 2] - px) * (points[j + 1] - py));\n                    }\n\n                    for (let k = 0; k < holes.length; k++)\n                    {\n                        points = (holes[k].shape as Polygon).points;\n\n                        if (!points)\n                        {\n                            continue;\n                        }\n\n                        innerArea = 0;\n                        px = points[0];\n                        py = points[1];\n                        for (let j = 2; j + 2 < points.length; j += 2)\n                        {\n                            innerArea += ((points[j] - px) * (points[j + 3] - py))\n                                - ((points[j + 2] - px) * (points[j + 1] - py));\n                        }\n\n                        if (innerArea * outerArea < 0)\n                        {\n                            context.moveTo(points[0], points[1]);\n\n                            for (let j = 2; j < points.length; j += 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n                        else\n                        {\n                            context.moveTo(points[points.length - 2], points[points.length - 1]);\n\n                            for (let j = points.length - 4; j >= 0; j -= 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n\n                        if ((holes[k].shape as Polygon).closeStroke)\n                        {\n                            context.closePath();\n                        }\n\n                        holesDirection[k] = innerArea * outerArea < 0;\n                    }\n                }\n\n                if (fillStyle.visible)\n                {\n                    context.globalAlpha = fillStyle.alpha * worldAlpha;\n                    context.fillStyle = contextFillStyle;\n                    context.fill();\n                }\n\n                if (lineStyle.visible)\n                {\n                    this.paintPolygonStroke(\n                        tempShape, lineStyle, contextStrokeStyle, holes, holesDirection, worldAlpha, context\n                    );\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                const tempShape = shape as Rectangle;\n\n                if (fillStyle.visible)\n                {\n                    context.globalAlpha = fillStyle.alpha * worldAlpha;\n                    context.fillStyle = contextFillStyle;\n                    context.fillRect(tempShape.x, tempShape.y, tempShape.width, tempShape.height);\n                }\n\n                if (lineStyle.visible)\n                {\n                    const alignmentOffset = lineStyle.width * (0.5 - (1 - lineStyle.alignment));\n                    const width = tempShape.width + (2 * alignmentOffset);\n                    const height = tempShape.height + (2 * alignmentOffset);\n\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.strokeRect(tempShape.x - alignmentOffset, tempShape.y - alignmentOffset, width, height);\n                }\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                const tempShape = shape as Circle;\n\n                // TODO - need to be Undefined!\n                context.beginPath();\n                context.arc(tempShape.x, tempShape.y, tempShape.radius, 0, 2 * Math.PI);\n                context.closePath();\n\n                if (fillStyle.visible)\n                {\n                    context.globalAlpha = fillStyle.alpha * worldAlpha;\n                    context.fillStyle = contextFillStyle;\n                    context.fill();\n                }\n\n                if (lineStyle.visible)\n                {\n                    if (lineStyle.alignment !== 0.5)\n                    {\n                        const alignmentOffset = lineStyle.width * (0.5 - (1 - lineStyle.alignment));\n\n                        context.beginPath();\n                        context.arc(tempShape.x, tempShape.y, tempShape.radius + alignmentOffset, 0, 2 * Math.PI);\n                        context.closePath();\n                    }\n\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                const tempShape = shape as Ellipse;\n                const drawShapeOverStroke = lineStyle.alignment === 1;\n\n                if (!drawShapeOverStroke)\n                {\n                    this.paintEllipse(tempShape, fillStyle, lineStyle, contextFillStyle, worldAlpha, context);\n                }\n\n                if (lineStyle.visible)\n                {\n                    if (lineStyle.alignment !== 0.5)\n                    {\n                        const kappa = 0.5522848;\n                        const alignmentOffset = lineStyle.width * (0.5 - (1 - lineStyle.alignment));\n                        const sW = (tempShape.width + alignmentOffset) * 2;\n                        const sH = (tempShape.height + alignmentOffset) * 2;\n                        const sX = tempShape.x - (sW / 2);\n                        const sY = tempShape.y - (sH / 2);\n                        const sOx = (sW / 2) * kappa;\n                        const sOy = (sH / 2) * kappa;\n                        const sXe = sX + sW;\n                        const sYe = sY + sH;\n                        const sXm = sX + (sW / 2);\n                        const sYm = sY + (sH / 2);\n\n                        context.beginPath();\n                        context.moveTo(sX, sYm);\n                        context.bezierCurveTo(sX, sYm - sOy, sXm - sOx, sY, sXm, sY);\n                        context.bezierCurveTo(sXm + sOx, sY, sXe, sYm - sOy, sXe, sYm);\n                        context.bezierCurveTo(sXe, sYm + sOy, sXm + sOx, sYe, sXm, sYe);\n                        context.bezierCurveTo(sXm - sOx, sYe, sX, sYm + sOy, sX, sYm);\n                        context.closePath();\n                    }\n\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.stroke();\n                }\n\n                if (drawShapeOverStroke)\n                {\n                    this.paintEllipse(tempShape, fillStyle, lineStyle, contextFillStyle, worldAlpha, context);\n                }\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const tempShape = shape as RoundedRectangle;\n                const drawShapeOverStroke = lineStyle.alignment === 1;\n\n                if (!drawShapeOverStroke)\n                {\n                    this.paintRoundedRectangle(tempShape, fillStyle, lineStyle, contextFillStyle, worldAlpha, context);\n                }\n\n                if (lineStyle.visible)\n                {\n                    if (lineStyle.alignment !== 0.5)\n                    {\n                        const width = tempShape.width;\n                        const height = tempShape.height;\n                        const alignmentOffset = lineStyle.width * (0.5 - (1 - lineStyle.alignment));\n                        const sRx = tempShape.x - alignmentOffset;\n                        const sRy = tempShape.y - alignmentOffset;\n                        const sWidth = tempShape.width + (2 * alignmentOffset);\n                        const sHeight = tempShape.height + (2 * alignmentOffset);\n                        const radiusOffset = alignmentOffset * (lineStyle.alignment >= 1\n                            ? Math.min(sWidth / width, sHeight / height) : Math.min(width / sWidth, height / sHeight));\n                        let sRadius = tempShape.radius + radiusOffset;\n                        const sMaxRadius = Math.min(sWidth, sHeight) / 2;\n\n                        sRadius = sRadius > sMaxRadius ? sMaxRadius : sRadius;\n\n                        context.beginPath();\n                        context.moveTo(sRx, sRy + sRadius);\n                        context.lineTo(sRx, sRy + sHeight - sRadius);\n                        context.quadraticCurveTo(sRx, sRy + sHeight, sRx + sRadius, sRy + sHeight);\n                        context.lineTo(sRx + sWidth - sRadius, sRy + sHeight);\n                        context.quadraticCurveTo(sRx + sWidth, sRy + sHeight, sRx + sWidth, sRy + sHeight - sRadius);\n                        context.lineTo(sRx + sWidth, sRy + sRadius);\n                        context.quadraticCurveTo(sRx + sWidth, sRy, sRx + sWidth - sRadius, sRy);\n                        context.lineTo(sRx + sRadius, sRy);\n                        context.quadraticCurveTo(sRx, sRy, sRx, sRy + sRadius);\n                        context.closePath();\n                    }\n\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.stroke();\n                }\n\n                if (drawShapeOverStroke)\n                {\n                    this.paintRoundedRectangle(tempShape, fillStyle, lineStyle, contextFillStyle, worldAlpha, context);\n                }\n            }\n        }\n    }\n\n    /**\n     * Paint stroke for polygon and holes\n     *\n     * @private\n     * @param shape - Shape to be drawn\n     * @param lineStyle - Line style for the shape\n     * @param contextStrokeStyle - The strokeStyle for the canvas context\n     * @param holes - Holes to be added to the shape\n     * @param holesDirection -\n     * @param worldAlpha - The multiplied alpha of the displayObject\n     * @param context - The canvas context\n     */\n    private paintPolygonStroke(\n        shape: Polygon, lineStyle: LineStyle, contextStrokeStyle: string|CanvasPattern,\n        holes: GraphicsData[], holesDirection: boolean[],\n        worldAlpha: number, context: CrossPlatformCanvasRenderingContext2D\n    ): void\n    {\n        if (lineStyle.alignment !== 0.5)\n        {\n            const alignmentOffset = lineStyle.width * (0.5 - (1 - lineStyle.alignment));\n            let offsetPoints = PolygonUtils.offsetPolygon(shape.points, alignmentOffset);\n            let points;\n\n            context.beginPath();\n            context.moveTo(offsetPoints[0], offsetPoints[1]);\n\n            for (let j = 2; j < offsetPoints.length; j += 2)\n            {\n                context.lineTo(offsetPoints[j], offsetPoints[j + 1]);\n            }\n\n            if (shape.closeStroke)\n            {\n                context.closePath();\n            }\n\n            for (let k = 0; k < holes.length; k++)\n            {\n                points = (holes[k].shape as Polygon).points;\n                offsetPoints = PolygonUtils.offsetPolygon(points, alignmentOffset);\n\n                if (holesDirection[k])\n                {\n                    context.moveTo(offsetPoints[0], offsetPoints[1]);\n\n                    for (let j = 2; j < offsetPoints.length; j += 2)\n                    {\n                        context.lineTo(offsetPoints[j], offsetPoints[j + 1]);\n                    }\n                }\n                else\n                {\n                    context.moveTo(offsetPoints[offsetPoints.length - 2], offsetPoints[offsetPoints.length - 1]);\n\n                    for (let j = offsetPoints.length - 4; j >= 0; j -= 2)\n                    {\n                        context.lineTo(offsetPoints[j], offsetPoints[j + 1]);\n                    }\n                }\n\n                if ((holes[k].shape as Polygon).closeStroke)\n                {\n                    context.closePath();\n                }\n            }\n        }\n\n        context.globalAlpha = lineStyle.alpha * worldAlpha;\n        context.strokeStyle = contextStrokeStyle;\n        context.stroke();\n    }\n\n    /**\n     * Paint Ellipse\n     *\n     * @private\n     * @param shape - Shape to be drawn\n     * @param fillStyle - Fill for the shape\n     * @param lineStyle - Line style for the shape\n     * @param contextFillStyle - The canvas context fill style\n     * @param worldAlpha - The multiplied alpha of the displayObject\n     * @param context - The canvas context\n     */\n    private paintEllipse(\n        shape: Ellipse, fillStyle: FillStyle, lineStyle: LineStyle,\n        contextFillStyle: string|CanvasPattern, worldAlpha: number,\n        context: CrossPlatformCanvasRenderingContext2D): void\n    {\n        // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n        const w = shape.width * 2;\n        const h = shape.height * 2;\n\n        const x = shape.x - (w / 2);\n        const y = shape.y - (h / 2);\n\n        const kappa = 0.5522848;\n        const ox = (w / 2) * kappa; // control point offset horizontal\n        const oy = (h / 2) * kappa; // control point offset vertical\n        const xe = x + w; // x-end\n        const ye = y + h; // y-end\n        const xm = x + (w / 2); // x-middle\n        const ym = y + (h / 2); // y-middle\n\n        if (lineStyle.alignment === 0)\n        {\n            context.save();\n        }\n\n        context.beginPath();\n        context.moveTo(x, ym);\n        context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n        context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n        context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n        context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n        context.closePath();\n\n        if (lineStyle.alignment === 0)\n        {\n            context.clip();\n        }\n\n        if (fillStyle.visible)\n        {\n            context.globalAlpha = fillStyle.alpha * worldAlpha;\n            context.fillStyle = contextFillStyle;\n            context.fill();\n        }\n\n        if (lineStyle.alignment === 0)\n        {\n            context.restore();\n        }\n    }\n\n    /**\n     * Paint Rounded Rectangle\n     *\n     * @private\n     * @param shape - Shape to be drawn\n     * @param fillStyle - Fill for the shape\n     * @param lineStyle - Line style for the shape\n     * @param contextFillStyle - The canvas context fill style\n     * @param worldAlpha - The multiplied alpha of the displayObject\n     * @param context - The canvas context\n     */\n    private paintRoundedRectangle(\n        shape: RoundedRectangle, fillStyle: FillStyle, lineStyle: LineStyle,\n        contextFillStyle: string|CanvasPattern, worldAlpha: number,\n        context: CrossPlatformCanvasRenderingContext2D\n    ): void\n    {\n        const rx = shape.x;\n        const ry = shape.y;\n        const width = shape.width;\n        const height = shape.height;\n        let radius = shape.radius;\n\n        const maxRadius = Math.min(width, height) / 2;\n\n        radius = radius > maxRadius ? maxRadius : radius;\n\n        if (lineStyle.alignment === 0)\n        {\n            context.save();\n        }\n\n        context.beginPath();\n        context.moveTo(rx, ry + radius);\n        context.lineTo(rx, ry + height - radius);\n        context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n        context.lineTo(rx + width - radius, ry + height);\n        context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n        context.lineTo(rx + width, ry + radius);\n        context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n        context.lineTo(rx + radius, ry);\n        context.quadraticCurveTo(rx, ry, rx, ry + radius);\n        context.closePath();\n\n        if (lineStyle.alignment === 0)\n        {\n            context.clip();\n        }\n\n        if (fillStyle.visible)\n        {\n            context.globalAlpha = fillStyle.alpha * worldAlpha;\n            context.fillStyle = contextFillStyle;\n            context.fill();\n        }\n\n        if (lineStyle.alignment === 0)\n        {\n            context.restore();\n        }\n    }\n\n    public setPatternTransform(pattern: CanvasPattern, matrix: Matrix): void\n    {\n        if (this._svgMatrix === false)\n        {\n            return;\n        }\n        if (!this._svgMatrix)\n        {\n            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\n            if (svg && svg.createSVGMatrix)\n            {\n                this._svgMatrix = svg.createSVGMatrix();\n            }\n            if (!this._svgMatrix || !pattern.setTransform)\n            {\n                this._svgMatrix = false;\n\n                return;\n            }\n        }\n\n        (this._svgMatrix as DOMMatrix).a = matrix.a;\n        (this._svgMatrix as DOMMatrix).b = matrix.b;\n        (this._svgMatrix as DOMMatrix).c = matrix.c;\n        (this._svgMatrix as DOMMatrix).d = matrix.d;\n        (this._svgMatrix as DOMMatrix).e = matrix.tx;\n        (this._svgMatrix as DOMMatrix).f = matrix.ty;\n        pattern.setTransform((this._svgMatrix as DOMMatrix).inverse());\n    }\n\n    /** destroy graphics object */\n    public destroy(): void\n    {\n        this.renderer = null;\n        this._svgMatrix = null;\n        this._tempMatrix = null;\n    }\n}\n","import { Graphics } from '@pixi/graphics';\nimport { CanvasRenderer } from '@pixi/canvas-renderer';\nimport { RenderTexture, Texture } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\n\nimport type { SCALE_MODES } from '@pixi/constants';\nimport type { BaseRenderTexture } from '@pixi/core';\n\nlet canvasRenderer: CanvasRenderer;\nconst tempMatrix = new Matrix();\n\n/**\n * Generates a canvas texture. Only available with **pixi.js-legacy** bundle\n * or the **@pixi/canvas-graphics** package.\n * @method generateCanvasTexture\n * @memberof PIXI.Graphics#\n * @param {PIXI.SCALE_MODES} scaleMode - The scale mode of the texture.\n * @param {number} resolution - The resolution of the texture.\n * @return {PIXI.Texture} The new texture.\n */\nGraphics.prototype.generateCanvasTexture = function generateCanvasTexture(scaleMode: SCALE_MODES, resolution = 1): Texture\n{\n    const bounds = this.getLocalBounds();\n\n    const canvasBuffer = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        scaleMode,\n        resolution,\n    });\n\n    if (!canvasRenderer)\n    {\n        canvasRenderer = new CanvasRenderer();\n    }\n\n    this.transform.updateLocalTransform();\n    this.transform.localTransform.copyTo(tempMatrix);\n\n    tempMatrix.invert();\n\n    tempMatrix.tx -= bounds.x;\n    tempMatrix.ty -= bounds.y;\n\n    canvasRenderer.render(this, { renderTexture: canvasBuffer, clear: true, transform: tempMatrix });\n\n    const texture = Texture.from((canvasBuffer.baseTexture as BaseRenderTexture)._canvasRenderTarget.canvas, {\n        scaleMode,\n    });\n\n    texture.baseTexture.setResolution(resolution);\n\n    return texture;\n};\n\nGraphics.prototype.cachedGraphicsData = [];\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @method _renderCanvas\n * @memberof PIXI.Graphics#\n * @private\n * @param {PIXI.CanvasRenderer} renderer - The renderer\n */\nGraphics.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer): void\n{\n    if (this.isMask === true)\n    {\n        return;\n    }\n\n    this.finishPoly();\n    renderer.plugins.graphics.render(this);\n};\n"],"names":["Matrix","Texture","canvasUtils","SHAPES","Graphics","RenderTexture","CanvasRenderer"],"mappings":"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"}