{
  "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
  "pkg": {
    "private": true,
    "scripts": {
      "start": "cross-env UMI_ENV=develop max dev",
      "build": "NODE_ENV=production max build",
      "lint": "max lint",
      "lint:fix": "max lint --fix",
      "build:develop": "cross-env UMI_ENV=develop max build",
      "postinstall": "max setup",
      "prettier": "prettier --write '**/*.{js,jsx,tsx,ts,less,md,json}'",
      "test": "umi-test",
      "test:coverage": "umi-test --coverage"
    },
    "gitHooks": {
      "pre-commit": "lint-staged"
    },
    "lint-staged": {
      "*.{js,jsx,ts,tsx,less,md,json}": [
        "prettier --write",
        "git add"
      ]
    },
    "dependencies": {
      "@ant-design/compatible": "^5.1.2",
      "@ant-design/icons": "^5.2.6",
      "@ant-design/pro-components": "^2.6.43",
      "@appen-china/easy-form-config": "^1.7.1",
      "@reduxjs/toolkit": "^2.8.1",
      "@tinymce/tinymce-react": "^3.14.0",
      "@umijs/max": "^4.0.88",
      "ace-builds": "^1.9.6",
      "antd": "5.11.3",
      "classnames": "^2.5.1",
      "dayjs": "^1.11.10",
      "humanize-duration": "^3.27.2",
      "immutability-helper": "^3.1.1",
      "lodash": "^4.17.21",
      "moment": "^2.30.1",
      "nanoid": "^5.1.5",
      "numeral": "2.0.6",
      "path-to-regexp": "6.2.1",
      "qs": "^6.11.0",
      "randomcolor": "^0.6.2",
      "react": "^18.2.0",
      "react-ace": "^9.5.0",
      "react-color": "^2.19.3",
      "react-copy-to-clipboard": "^5.1.0",
      "react-dnd": "^14.0.5",
      "react-dnd-html5-backend": "^14.1.0",
      "react-document-title": "^2.0.3",
      "react-dom": "^18.2.0",
      "react-flow-renderer": "^9.7.4",
      "react-redux": "^8.1.3",
      "react-responsive": "^8.2.0",
      "recharts": "^2.1.13",
      "redux": "^5.0.1",
      "umi-request": "^1.4.0",
      "umi-request-progress": "^1.1.0",
      "uuid": "^9.0.1",
      "xml2js": "^0.4.23"
    },
    "devDependencies": {
      "@types/lodash": "^4.14.184",
      "@types/moment": "^2.13.0",
      "@types/numeral": "2.0.2",
      "@types/qs": "^6.9.7",
      "@types/randomcolor": "^0.5.6",
      "@types/react": "^18.2.38",
      "@types/react-color": "^3.0.6",
      "@types/react-copy-to-clipboard": "^5.0.4",
      "@types/react-document-title": "^2.0.5",
      "@types/react-dom": "^17.0.17",
      "@types/react-redux": "^7.1.34",
      "@types/react-responsive": "^8.0.5",
      "@types/redux": "^3.6.0",
      "@types/xml2js": "^0.4.11",
      "@umijs/fabric": "^4.0.1",
      "@umijs/plugins": "4",
      "@umijs/test": "^4.0.88",
      "cross-env": "^7.0.3",
      "less": "4",
      "less-loader": "11",
      "lint-staged": "^12.5.0",
      "monaco-editor-webpack-plugin": "^7.1.0",
      "prettier": "^2.7.1",
      "typescript": "^5.3.2",
      "yorkie": "^2.0.0"
    },
    "packageManager": "pnpm@8.15.8"
  },
  "pkgPath": "/Users/qzheng/Documents/webroot/loonshots-web-lite/package.json",
  "plugins": {
    "./node_modules/.pnpm/@umijs+core@4.4.10/node_modules/@umijs/core/dist/service/servicePlugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "preset",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+core@4.4.10/node_modules/@umijs/core/dist/service/servicePlugin.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+core@4.4.10/node_modules/@umijs/core/dist/service/servicePlugin",
      "key": "servicePlugin"
    },
    "@umijs/preset-umi": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "enableBy": "register",
      "type": "preset",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/index.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "@umijs/preset-umi",
      "key": "umi"
    },
    "./node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/preset": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "register",
      "type": "preset",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/preset.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/preset",
      "key": "preset"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/registerMethods": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            0
          ]
        },
        "register": 3
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/registerMethods.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/registerMethods",
      "key": "registerMethods"
    },
    "@umijs/did-you-know": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            1
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+did-you-know@1.0.3/node_modules/@umijs/did-you-know/dist/plugin.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "@umijs/did-you-know",
      "key": "umijsDidYouKnow"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/404/404": {
      "config": {},
      "time": {
        "hooks": {
          "modifyRoutes": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/404/404.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/404/404",
      "key": "404"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/appData/appData": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            18
          ]
        },
        "register": 14
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/appData/appData.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/appData/appData",
      "key": "appData"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/appData/umiInfo": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/appData/umiInfo.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/appData/umiInfo",
      "key": "umiInfo"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/check/check": {
      "config": {},
      "time": {
        "hooks": {
          "onCheckConfig": [
            0
          ],
          "onCheck": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/check/check.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/check/check",
      "key": "check"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/check/babel722": {
      "config": {},
      "time": {
        "hooks": {
          "onCheck": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/check/babel722.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/check/babel722",
      "key": "babel722"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/codeSplitting/codeSplitting": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/codeSplitting/codeSplitting.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/codeSplitting/codeSplitting",
      "key": "codeSplitting"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/configPlugins/configPlugins": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            0
          ]
        },
        "register": 6
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/configPlugins/configPlugins.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/configPlugins/configPlugins",
      "key": "configPlugins"
    },
    "virtual: config-title": {
      "id": "virtual: config-title",
      "key": "title",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-styles": {
      "id": "virtual: config-styles",
      "key": "styles",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-scripts": {
      "id": "virtual: config-scripts",
      "key": "scripts",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-routes": {
      "id": "virtual: config-routes",
      "key": "routes",
      "config": {
        "onChange": "regenerateTmpFiles"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-routeLoader": {
      "id": "virtual: config-routeLoader",
      "key": "routeLoader",
      "config": {
        "default": {
          "moduleType": "esm"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-reactRouter5Compat": {
      "id": "virtual: config-reactRouter5Compat",
      "key": "reactRouter5Compat",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-presets": {
      "id": "virtual: config-presets",
      "key": "presets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-plugins": {
      "id": "virtual: config-plugins",
      "key": "plugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-npmClient": {
      "id": "virtual: config-npmClient",
      "key": "npmClient",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mountElementId": {
      "id": "virtual: config-mountElementId",
      "key": "mountElementId",
      "config": {
        "default": "root"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-metas": {
      "id": "virtual: config-metas",
      "key": "metas",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-links": {
      "id": "virtual: config-links",
      "key": "links",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-historyWithQuery": {
      "id": "virtual: config-historyWithQuery",
      "key": "historyWithQuery",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-history": {
      "id": "virtual: config-history",
      "key": "history",
      "config": {
        "default": {
          "type": "browser"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-headScripts": {
      "id": "virtual: config-headScripts",
      "key": "headScripts",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-esbuildMinifyIIFE": {
      "id": "virtual: config-esbuildMinifyIIFE",
      "key": "esbuildMinifyIIFE",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-conventionRoutes": {
      "id": "virtual: config-conventionRoutes",
      "key": "conventionRoutes",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-conventionLayout": {
      "id": "virtual: config-conventionLayout",
      "key": "conventionLayout",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-base": {
      "id": "virtual: config-base",
      "key": "base",
      "config": {
        "default": "/"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-analyze": {
      "id": "virtual: config-analyze",
      "key": "analyze",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-writeToDisk": {
      "id": "virtual: config-writeToDisk",
      "key": "writeToDisk",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-theme": {
      "id": "virtual: config-theme",
      "key": "theme",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-targets": {
      "id": "virtual: config-targets",
      "key": "targets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-svgr": {
      "id": "virtual: config-svgr",
      "key": "svgr",
      "config": {
        "default": {}
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-svgo": {
      "id": "virtual: config-svgo",
      "key": "svgo",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-stylusLoader": {
      "id": "virtual: config-stylusLoader",
      "key": "stylusLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-styleLoader": {
      "id": "virtual: config-styleLoader",
      "key": "styleLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-srcTranspilerOptions": {
      "id": "virtual: config-srcTranspilerOptions",
      "key": "srcTranspilerOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-srcTranspiler": {
      "id": "virtual: config-srcTranspiler",
      "key": "srcTranspiler",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-sassLoader": {
      "id": "virtual: config-sassLoader",
      "key": "sassLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-runtimePublicPath": {
      "id": "virtual: config-runtimePublicPath",
      "key": "runtimePublicPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-purgeCSS": {
      "id": "virtual: config-purgeCSS",
      "key": "purgeCSS",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-publicPath": {
      "id": "virtual: config-publicPath",
      "key": "publicPath",
      "config": {
        "default": "/"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-proxy": {
      "id": "virtual: config-proxy",
      "key": "proxy",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-postcssLoader": {
      "id": "virtual: config-postcssLoader",
      "key": "postcssLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-outputPath": {
      "id": "virtual: config-outputPath",
      "key": "outputPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-normalCSSLoaderModules": {
      "id": "virtual: config-normalCSSLoaderModules",
      "key": "normalCSSLoaderModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mfsu": {
      "id": "virtual: config-mfsu",
      "key": "mfsu",
      "config": {
        "default": {
          "strategy": "eager"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mdx": {
      "id": "virtual: config-mdx",
      "key": "mdx",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-manifest": {
      "id": "virtual: config-manifest",
      "key": "manifest",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-lessLoader": {
      "id": "virtual: config-lessLoader",
      "key": "lessLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-jsMinifierOptions": {
      "id": "virtual: config-jsMinifierOptions",
      "key": "jsMinifierOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-jsMinifier": {
      "id": "virtual: config-jsMinifier",
      "key": "jsMinifier",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-inlineLimit": {
      "id": "virtual: config-inlineLimit",
      "key": "inlineLimit",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-ignoreMomentLocale": {
      "id": "virtual: config-ignoreMomentLocale",
      "key": "ignoreMomentLocale",
      "config": {
        "default": true
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-https": {
      "id": "virtual: config-https",
      "key": "https",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-hash": {
      "id": "virtual: config-hash",
      "key": "hash",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-forkTSChecker": {
      "id": "virtual: config-forkTSChecker",
      "key": "forkTSChecker",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-fastRefresh": {
      "id": "virtual: config-fastRefresh",
      "key": "fastRefresh",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraPostCSSPlugins": {
      "id": "virtual: config-extraPostCSSPlugins",
      "key": "extraPostCSSPlugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelPresets": {
      "id": "virtual: config-extraBabelPresets",
      "key": "extraBabelPresets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelPlugins": {
      "id": "virtual: config-extraBabelPlugins",
      "key": "extraBabelPlugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelIncludes": {
      "id": "virtual: config-extraBabelIncludes",
      "key": "extraBabelIncludes",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-externals": {
      "id": "virtual: config-externals",
      "key": "externals",
      "config": {
        "default": {}
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-esm": {
      "id": "virtual: config-esm",
      "key": "esm",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-devtool": {
      "id": "virtual: config-devtool",
      "key": "devtool",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-depTranspiler": {
      "id": "virtual: config-depTranspiler",
      "key": "depTranspiler",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-define": {
      "id": "virtual: config-define",
      "key": "define",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-deadCode": {
      "id": "virtual: config-deadCode",
      "key": "deadCode",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssPublicPath": {
      "id": "virtual: config-cssPublicPath",
      "key": "cssPublicPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssMinifierOptions": {
      "id": "virtual: config-cssMinifierOptions",
      "key": "cssMinifierOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssMinifier": {
      "id": "virtual: config-cssMinifier",
      "key": "cssMinifier",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssLoaderModules": {
      "id": "virtual: config-cssLoaderModules",
      "key": "cssLoaderModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssLoader": {
      "id": "virtual: config-cssLoader",
      "key": "cssLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-copy": {
      "id": "virtual: config-copy",
      "key": "copy",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-checkDepCssModules": {
      "id": "virtual: config-checkDepCssModules",
      "key": "checkDepCssModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-chainWebpack": {
      "id": "virtual: config-chainWebpack",
      "key": "chainWebpack",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cacheDirectoryPath": {
      "id": "virtual: config-cacheDirectoryPath",
      "key": "cacheDirectoryPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-babelLoaderCustomize": {
      "id": "virtual: config-babelLoaderCustomize",
      "key": "babelLoaderCustomize",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-autoprefixer": {
      "id": "virtual: config-autoprefixer",
      "key": "autoprefixer",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-autoCSSModules": {
      "id": "virtual: config-autoCSSModules",
      "key": "autoCSSModules",
      "config": {
        "default": true
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-alias": {
      "id": "virtual: config-alias",
      "key": "alias",
      "config": {
        "default": {
          "umi": "@@/exports",
          "react": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/react",
          "react-dom": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/react-dom",
          "react-router": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/react-router@6.3.0_react@18.3.1/node_modules/react-router",
          "react-router-dom": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/react-router-dom@6.3.0_react-dom@18.3.1_react@18.3.1/node_modules/react-router-dom"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/crossorigin/crossorigin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/crossorigin/crossorigin.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/crossorigin/crossorigin",
      "key": "crossorigin"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand",
      "key": "depsOnDemand"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/devTool/devTool": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/devTool/devTool.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/devTool/devTool",
      "key": "devTool"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 53
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker",
      "key": "esbuildHelperChecker"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/esmi/esmi": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 58
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/esmi/esmi.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/esmi/esmi",
      "key": "esmi"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/exportStatic/exportStatic": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 7
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/exportStatic/exportStatic.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/exportStatic/exportStatic",
      "key": "exportStatic"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/favicons/favicons": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/favicons/favicons.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/favicons/favicons",
      "key": "favicons"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/helmet/helmet": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/helmet/helmet.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/helmet/helmet",
      "key": "helmet"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/icons/icons": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/icons/icons.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/icons/icons",
      "key": "icons"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mock/mock": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 25
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mock/mock.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mock/mock",
      "key": "mock"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mpa/mpa": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mpa/mpa.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mpa/mpa",
      "key": "mpa"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/okam/okam": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/okam/okam.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/okam/okam",
      "key": "okam"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/overrides/overrides": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/overrides/overrides.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/overrides/overrides",
      "key": "overrides"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/phantomDependency/phantomDependency": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/phantomDependency/phantomDependency.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/phantomDependency/phantomDependency",
      "key": "phantomDependency"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/polyfill/polyfill": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            1
          ]
        },
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/polyfill/polyfill.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/polyfill/polyfill",
      "key": "polyfill"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill",
      "key": "publicPathPolyfill"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/prepare/prepare": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/prepare/prepare.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/prepare/prepare",
      "key": "prepare"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routePrefetch/routePrefetch": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routePrefetch/routePrefetch.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routePrefetch/routePrefetch",
      "key": "routePrefetch"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/terminal/terminal": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/terminal/terminal.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/terminal/terminal",
      "key": "terminal"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/tmpFiles/tmpFiles": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/tmpFiles/tmpFiles.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/tmpFiles/tmpFiles",
      "key": "tmpFiles"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/clientLoader/clientLoader": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/clientLoader/clientLoader.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/clientLoader/clientLoader",
      "key": "clientLoader"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routeProps/routeProps": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routeProps/routeProps.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routeProps/routeProps",
      "key": "routeProps"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/ssr/ssr": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/ssr/ssr.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/ssr/ssr",
      "key": "ssr"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/tmpFiles/configTypes": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/tmpFiles/configTypes.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/tmpFiles/configTypes",
      "key": "configTypes"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/transform/transform": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 4
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/transform/transform.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/transform/transform",
      "key": "transform"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/lowImport/lowImport": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 8
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/lowImport/lowImport.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/lowImport/lowImport",
      "key": "lowImport"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/vite/vite": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/vite/vite.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/vite/vite",
      "key": "vite"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/apiRoute/apiRoute": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/apiRoute/apiRoute.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/apiRoute/apiRoute",
      "key": "apiRoute"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/monorepo/redirect": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 14
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/monorepo/redirect.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/monorepo/redirect",
      "key": "monorepoRedirect"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/test/test": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/test/test.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/test/test",
      "key": "test"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/clickToComponent/clickToComponent": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/clickToComponent/clickToComponent.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/clickToComponent/clickToComponent",
      "key": "clickToComponent"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/legacy/legacy": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/legacy/legacy.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/legacy/legacy",
      "key": "legacy"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose",
      "key": "classPropertiesLoose"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/webpack/webpack": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/webpack/webpack.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/webpack/webpack",
      "key": "preset-umi:webpack"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/swc/swc": {
      "config": {},
      "time": {
        "hooks": {
          "addOnDemandDeps": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/swc/swc.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/swc/swc",
      "key": "swc"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/ui/ui": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/ui/ui.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/ui/ui",
      "key": "ui"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mako/mako": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mako/mako.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/mako/mako",
      "key": "mako"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian",
      "key": "hmrGuardian"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad",
      "key": "routePreloadOnLoad"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/forget/forget": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/forget/forget.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/features/forget/forget",
      "key": "forget"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/build": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/build.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/build",
      "key": "build"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/config/config": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 22
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/config/config.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/config/config",
      "key": "config"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/dev/dev": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 22
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/dev/dev.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/dev/dev",
      "key": "dev"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/help": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/help.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/help",
      "key": "help"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/lint": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/lint.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/lint",
      "key": "lint"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/setup": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/setup.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/setup",
      "key": "setup"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/deadcode": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/deadcode.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/deadcode",
      "key": "deadcode"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/version": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/version.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/version",
      "key": "version"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/page": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/page.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/page",
      "key": "generator:page"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/prettier": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/prettier.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/prettier",
      "key": "generator:prettier"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/tsconfig": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/tsconfig.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/tsconfig",
      "key": "generator:tsconfig"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/jest": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/jest.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/jest",
      "key": "generator:jest"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/tailwindcss": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/tailwindcss.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/tailwindcss",
      "key": "generator:tailwindcss"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/dva": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/dva.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/dva",
      "key": "generator:dva"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/component": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/component.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/component",
      "key": "generator:component"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/mock": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/mock.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/mock",
      "key": "generator:mock"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/cypress": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/cypress.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/cypress",
      "key": "generator:cypress"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/api": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/api.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/api",
      "key": "generator:api"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/precommit": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/precommit.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/generators/precommit",
      "key": "generator:precommit"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/plugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/plugin.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/plugin",
      "key": "command:plugin"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/verify-commit": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/verify-commit.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/verify-commit",
      "key": "verifyCommit"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/preview": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 17
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/preview.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/preview",
      "key": "preview"
    },
    "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/mfsu/mfsu": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/mfsu/mfsu.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+preset-umi@4.4.10_@types+react@18.3.21_typescript@5.8.3_webpack@5.99.8/node_modules/@umijs/preset-umi/dist/commands/mfsu/mfsu",
      "key": "mfsu-cli"
    },
    "@umijs/plugin-run": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugin-run@4.4.10/node_modules/@umijs/plugin-run/dist/index.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "@umijs/plugin-run",
      "key": "run"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/access": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/access.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/access",
      "key": "access"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/analytics": {
      "config": {
        "onChange": "reload"
      },
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/analytics.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/analytics",
      "key": "analytics"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/antd": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            3
          ],
          "modifyAppData": [
            0
          ]
        },
        "register": 4
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/antd.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/antd",
      "key": "antd"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/dva": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            0
          ],
          "modifyAppData": [
            128
          ]
        },
        "register": 4
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/dva.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/dva",
      "key": "dva"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/initial-state": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/initial-state.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/initial-state",
      "key": "initialState"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/layout": {
      "config": {
        "onChange": "regenerateTmpFiles"
      },
      "time": {
        "hooks": {
          "modifyConfig": [
            0
          ],
          "addLayouts": [
            0
          ],
          "modifyAppData": [
            1
          ]
        },
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/layout.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/layout",
      "key": "layout"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/locale": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/locale.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/locale",
      "key": "locale"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/mf": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/mf.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/mf",
      "key": "mf"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/model": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/model.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/model",
      "key": "model"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/moment2dayjs": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/moment2dayjs.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/moment2dayjs",
      "key": "moment2dayjs"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun",
      "key": "qiankun"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun/master": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun/master.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun/master",
      "key": "qiankun-master"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun/slave": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun/slave.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/qiankun/slave",
      "key": "qiankun-slave"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/react-query": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/react-query.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/react-query",
      "key": "reactQuery"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/request": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/request.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/request",
      "key": "request"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/styled-components": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/styled-components.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/styled-components",
      "key": "styledComponents"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/tailwindcss": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/tailwindcss.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/tailwindcss",
      "key": "tailwindcss"
    },
    "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/valtio": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/valtio.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/dist/valtio",
      "key": "valtio"
    },
    "./node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxAlias": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxAlias.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxAlias",
      "key": "maxAlias"
    },
    "./node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxAppData": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxAppData.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxAppData",
      "key": "maxAppData"
    },
    "./node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxChecker": {
      "config": {},
      "time": {
        "hooks": {
          "onCheckPkgJSON": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxChecker.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+max@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_dva@2.5.0-_jdtdomrsp5kcvf4bmia6melv6e/node_modules/@umijs/max/dist/plugins/maxChecker",
      "key": "maxChecker"
    },
    "./node_modules/.pnpm/@umijs+core@4.4.10/node_modules/@umijs/core/dist/service/generatePlugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+core@4.4.10/node_modules/@umijs/core/dist/service/generatePlugin.js",
      "cwd": "/Users/qzheng/Documents/webroot/loonshots-web-lite",
      "id": "./node_modules/.pnpm/@umijs+core@4.4.10/node_modules/@umijs/core/dist/service/generatePlugin",
      "key": "generatePlugin"
    }
  },
  "presets": [],
  "name": "build",
  "args": {
    "_": []
  },
  "userConfig": {
    "antd": {
      "theme": {}
    },
    "dva": {
      "immer": {}
    },
    "access": {},
    "deadCode": {},
    "model": {},
    "initialState": {},
    "request": {},
    "hash": true,
    "layout": {
      "locale": true,
      "siderWidth": 224,
      "navTheme": "light",
      "colorMenuBackground": "#fff",
      "contentWidth": "Fluid",
      "autoHideHeader": false,
      "fixSiderbar": true,
      "layout": "mix",
      "colorWeak": false,
      "menu": {
        "locale": true
      },
      "title": "",
      "pwa": false,
      "iconfontUrl": ""
    },
    "lessLoader": {
      "javascriptEnabled": true,
      "modifyVars": {
        "root-entry-name": "default",
        "theme": "default",
        "ant-prefix": "ant",
        "html-selector": "html",
        "primary-color": "#227a7a",
        "primary-color-hover": "#4096ff",
        "primary-color-active": "#0958d9",
        "primary-color-outline": "fade(@primary-color, @outline-fade)",
        "processing-color": "#1677ff",
        "info-color": "#1677ff",
        "info-color-deprecated-bg": "#e6f4ff",
        "info-color-deprecated-border": "#91caff",
        "success-color": "#52c41a",
        "success-color-hover": "#d9f7be",
        "success-color-active": "#389e0d",
        "success-color-outline": "fade(@success-color, @outline-fade)",
        "success-color-deprecated-bg": "#f6ffed",
        "success-color-deprecated-border": "#b7eb8f",
        "warning-color": "#faad14",
        "warning-color-hover": "#ffd666",
        "warning-color-active": "#d48806",
        "warning-color-outline": "fade(@warning-color, @outline-fade)",
        "warning-color-deprecated-bg": "#fffbe6",
        "warning-color-deprecated-border": "#ffe58f",
        "error-color": "#ff4d4f",
        "error-color-hover": "#ff7875",
        "error-color-active": "#d9363e",
        "error-color-outline": "fade(@error-color, @outline-fade)",
        "error-color-deprecated-bg": "#fff2f0",
        "error-color-deprecated-border": "#ffccc7",
        "highlight-color": "#ff4d4f",
        "normal-color": "#d9d9d9",
        "white": "#fff",
        "black": "#000",
        "primary-1": "#e6f4ff",
        "primary-2": "#bae0ff",
        "primary-3": "#91caff",
        "primary-4": "#69b1ff",
        "primary-5": "#4096ff",
        "primary-6": "#1677ff",
        "primary-7": "#0958d9",
        "primary-8": "#4096ff",
        "primary-9": "#1677ff",
        "primary-10": "#0958d9",
        "body-background": "#fff",
        "component-background": "#ffffff",
        "popover-background": "#ffffff",
        "popover-customize-border-color": "rgba(5, 5, 5, 0.06)",
        "font-family": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n'Noto Color Emoji'",
        "code-family": "'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",
        "text-color": "rgba(0, 0, 0, 0.88)",
        "text-color-secondary": "rgba(0, 0, 0, 0.65)",
        "text-color-inverse": "#fff",
        "icon-color": "rgba(0, 0, 0, 0.45)",
        "icon-color-hover": "rgba(0, 0, 0, 0.88)",
        "heading-color": "rgba(0, 0, 0, 0.88)",
        "text-color-dark": "fade(@white, 85%)",
        "text-color-secondary-dark": "fade(@white, 65%)",
        "text-selection-bg": "#1677ff",
        "font-variant-base": "tabular-nums",
        "font-feature-settings-base": "tnum",
        "font-size-base": "14px",
        "font-size-lg": "16px",
        "font-size-sm": "12px",
        "heading-1-size": "38px",
        "heading-2-size": "30px",
        "heading-3-size": "24px",
        "heading-4-size": "20px",
        "heading-5-size": "16px",
        "line-height-base": "1.5714285714285714",
        "border-radius-base": "6px",
        "border-radius-sm": "4px",
        "control-border-radius": "6px",
        "arrow-border-radius": "4px",
        "padding-lg": "24px",
        "padding-md": "16px",
        "padding-sm": "12px",
        "padding-xs": "8px",
        "padding-xss": "4px",
        "control-padding-horizontal": "12px",
        "control-padding-horizontal-sm": "8px",
        "margin-lg": "24px",
        "margin-md": "16px",
        "margin-sm": "12px",
        "margin-xs": "8px",
        "margin-xss": "4px",
        "height-base": "32px",
        "height-lg": "40px",
        "height-sm": "24px",
        "item-active-bg": "#e6f4ff",
        "item-hover-bg": "rgba(0, 0, 0, 0.04)",
        "iconfont-css-prefix": "anticon",
        "link-color": "#1677ff",
        "link-hover-color": "#69b1ff",
        "link-active-color": "#0958d9",
        "link-decoration": "none",
        "link-hover-decoration": "none",
        "link-focus-decoration": "none",
        "link-focus-outline": "0px",
        "ease-base-out": "cubic-bezier(0.215, 0.61, 0.355, 1)",
        "ease-base-in": "cubic-bezier(0.9, 0, 0.3, 0.7)",
        "ease-out": "cubic-bezier(0.215, 0.61, 0.355, 1)",
        "ease-in": "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
        "ease-in-out": "cubic-bezier(0.645, 0.045, 0.355, 1)",
        "ease-out-back": "cubic-bezier(0.12, 0.4, 0.29, 1.46)",
        "ease-in-back": "cubic-bezier(0.71, -0.46, 0.88, 0.6)",
        "ease-in-out-back": "cubic-bezier(0.71, -0.46, 0.29, 1.46)",
        "ease-out-circ": "cubic-bezier(0.08, 0.82, 0.17, 1)",
        "ease-in-circ": "cubic-bezier(0.6, 0.04, 0.98, 0.34)",
        "ease-in-out-circ": "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
        "ease-out-quint": "cubic-bezier(0.23, 1, 0.32, 1)",
        "ease-in-quint": "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
        "ease-in-out-quint": "cubic-bezier(0.86, 0, 0.07, 1)",
        "border-color-base": "#e5e7ed",
        "border-color-split": "rgba(5, 5, 5, 0.06)",
        "border-color-inverse": "#fff",
        "border-width-base": "1px",
        "border-style-base": "solid",
        "outline-blur-size": "0px",
        "outline-width": "2px",
        "outline-color": "rgba(5, 145, 255, 0.1)",
        "outline-fade": "20%",
        "background-color-light": "hsv(0, 0, 98%)",
        "background-color-base": "hsv(0, 0, 96%)",
        "disabled-color": "rgba(0, 0, 0, 0.25)",
        "disabled-bg": "rgba(0, 0, 0, 0.04)",
        "disabled-active-bg": "rgba(0, 0, 0, 0.04)",
        "disabled-color-dark": "fade(#fff, 35%)",
        "shadow-color": "rgba(0, 0, 0, 0.15)",
        "shadow-color-inverse": "#ffffff",
        "box-shadow-base": "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-1-up": "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-1-down": "\n      0 -6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 -3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 -9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-1-left": "\n      6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-1-right": "\n      -6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      -3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      -9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-2": "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "btn-font-weight": "400",
        "btn-border-radius-base": "@border-radius-base",
        "btn-border-radius-sm": "@border-radius-base",
        "btn-border-width": "@border-width-base",
        "btn-border-style": "@border-style-base",
        "btn-shadow": "0 2px 0 rgba(0, 0, 0, 0.015)",
        "btn-primary-shadow": "0 2px 0 rgba(0, 0, 0, 0.045)",
        "btn-text-shadow": "0 -1px 0 rgba(0, 0, 0, 0.12)",
        "btn-primary-color": "#fff",
        "btn-primary-bg": "@primary-color",
        "btn-default-color": "@text-color",
        "btn-default-bg": "@component-background",
        "btn-default-border": "@border-color-base",
        "btn-danger-color": "#fff",
        "btn-danger-bg": "@error-color",
        "btn-danger-border": "@error-color",
        "btn-disable-color": "@disabled-color",
        "btn-disable-bg": "@disabled-bg",
        "btn-disable-border": "@border-color-base",
        "btn-default-ghost-color": "@component-background",
        "btn-default-ghost-bg": "transparent",
        "btn-default-ghost-border": "@component-background",
        "btn-font-size-lg": "@font-size-lg",
        "btn-font-size-sm": "@font-size-base",
        "btn-padding-horizontal-base": "@padding-md - 1px",
        "btn-padding-horizontal-lg": "@btn-padding-horizontal-base",
        "btn-padding-horizontal-sm": "@padding-xs - 1px",
        "btn-height-base": "@height-base",
        "btn-height-lg": "@height-lg",
        "btn-height-sm": "@height-sm",
        "btn-line-height": "@line-height-base",
        "btn-circle-size": "@btn-height-base",
        "btn-circle-size-lg": "@btn-height-lg",
        "btn-circle-size-sm": "@btn-height-sm",
        "btn-square-size": "@btn-height-base",
        "btn-square-size-lg": "@btn-height-lg",
        "btn-square-size-sm": "@btn-height-sm",
        "btn-square-only-icon-size": "@font-size-base + 2px",
        "btn-square-only-icon-size-sm": "@font-size-base",
        "btn-square-only-icon-size-lg": "@btn-font-size-lg + 2px",
        "btn-group-border": "@primary-5",
        "btn-link-hover-bg": "transparent",
        "btn-text-hover-bg": "rgba(0, 0, 0, 0.018)",
        "checkbox-size": "16px",
        "checkbox-color": "@primary-color",
        "checkbox-check-color": "#fff",
        "checkbox-check-bg": "@checkbox-check-color",
        "checkbox-border-width": "@border-width-base",
        "checkbox-border-radius": "@border-radius-base",
        "checkbox-group-item-margin-right": "8px",
        "descriptions-bg": "#fafafa",
        "descriptions-title-margin-bottom": "20px",
        "descriptions-default-padding": "@padding-md @padding-lg",
        "descriptions-middle-padding": "@padding-sm @padding-lg",
        "descriptions-small-padding": "@padding-xs @padding-md",
        "descriptions-item-padding-bottom": "@padding-md",
        "descriptions-item-trailing-colon": "true",
        "descriptions-item-label-colon-margin-right": "8px",
        "descriptions-item-label-colon-margin-left": "2px",
        "descriptions-extra-color": "@text-color",
        "divider-text-padding": "1em",
        "divider-orientation-margin": "5%",
        "divider-color": "rgba(0, 0, 0, 6%)",
        "divider-vertical-gutter": "8px",
        "dropdown-selected-color": "@primary-color",
        "dropdown-menu-submenu-disabled-bg": "@component-background",
        "dropdown-selected-bg": "@item-active-bg",
        "empty-font-size": "@font-size-base",
        "radio-size": "16px",
        "radio-top": "0.2em",
        "radio-border-width": "1px",
        "radio-dot-size": "@radio-size - 8px",
        "radio-dot-color": "@primary-color",
        "radio-dot-disabled-color": "fade(@black, 20%)",
        "radio-solid-checked-color": "@component-background",
        "radio-button-bg": "@btn-default-bg",
        "radio-button-checked-bg": "@btn-default-bg",
        "radio-button-color": "@btn-default-color",
        "radio-button-hover-color": "@primary-5",
        "radio-button-active-color": "@primary-7",
        "radio-button-padding-horizontal": "@padding-md - 1px",
        "radio-disabled-button-checked-bg": "@disabled-active-bg",
        "radio-disabled-button-checked-color": "@disabled-color",
        "radio-wrapper-margin-right": "8px",
        "screen-xs": "480px",
        "screen-xs-min": "@screen-xs",
        "screen-sm": "576px",
        "screen-sm-min": "@screen-sm",
        "screen-md": "768px",
        "screen-md-min": "@screen-md",
        "screen-lg": "992px",
        "screen-lg-min": "@screen-lg",
        "screen-xl": "1200px",
        "screen-xl-min": "@screen-xl",
        "screen-xxl": "1600px",
        "screen-xxl-min": "@screen-xxl",
        "screen-xs-max": "(@screen-sm-min - 1px)",
        "screen-sm-max": "(@screen-md-min - 1px)",
        "screen-md-max": "(@screen-lg-min - 1px)",
        "screen-lg-max": "(@screen-xl-min - 1px)",
        "screen-xl-max": "(@screen-xxl-min - 1px)",
        "grid-columns": "24",
        "layout-body-background": "#f0f2f5",
        "layout-header-background": "#001529",
        "layout-header-height": "64px",
        "layout-header-padding": "0 50px",
        "layout-header-color": "@text-color",
        "layout-footer-padding": "24px 50px",
        "layout-footer-background": "@layout-body-background",
        "layout-sider-background": "@layout-header-background",
        "layout-trigger-height": "48px",
        "layout-trigger-background": "#002140",
        "layout-trigger-color": "#fff",
        "layout-zero-trigger-width": "36px",
        "layout-zero-trigger-height": "42px",
        "layout-sider-background-light": "#fff",
        "layout-trigger-background-light": "#fff",
        "layout-trigger-color-light": "@text-color",
        "zindex-badge": "auto",
        "zindex-table-fixed": "2",
        "zindex-affix": "10",
        "zindex-back-top": "10",
        "zindex-picker-panel": "10",
        "zindex-popup-close": "10",
        "zindex-modal": "1000",
        "zindex-modal-mask": "1000",
        "zindex-message": "1010",
        "zindex-notification": "1010",
        "zindex-popover": "1030",
        "zindex-dropdown": "1050",
        "zindex-picker": "1050",
        "zindex-popoconfirm": "1060",
        "zindex-tooltip": "1070",
        "zindex-image": "1080",
        "animation-duration-slow": "0.3s",
        "animation-duration-base": "0.2s",
        "animation-duration-fast": "0.1s",
        "collapse-panel-border-radius": "@border-radius-base",
        "dropdown-menu-bg": "@component-background",
        "dropdown-vertical-padding": "5px",
        "dropdown-edge-child-vertical-padding": "4px",
        "dropdown-font-size": "@font-size-base",
        "dropdown-line-height": "22px",
        "label-required-color": "@highlight-color",
        "label-color": "@heading-color",
        "form-warning-input-bg": "@input-bg",
        "form-item-margin-bottom": "24px",
        "form-item-trailing-colon": "true",
        "form-vertical-label-padding": "0 0 8px",
        "form-vertical-label-margin": "0",
        "form-item-label-font-size": "@font-size-base",
        "form-item-label-height": "@input-height-base",
        "form-item-label-colon-margin-right": "8px",
        "form-item-label-colon-margin-left": "2px",
        "form-error-input-bg": "@input-bg",
        "input-height-base": "@height-base",
        "input-height-lg": "@height-lg",
        "input-height-sm": "@height-sm",
        "input-padding-horizontal": "@control-padding-horizontal - 1px",
        "input-padding-horizontal-base": "@input-padding-horizontal",
        "input-padding-horizontal-sm": "@control-padding-horizontal-sm - 1px",
        "input-padding-horizontal-lg": "@input-padding-horizontal",
        "input-padding-vertical-base": "max(\n  (round(((@input-height-base - @font-size-base * @line-height-base) / 2) * 10) / 10) -\n    @border-width-base,\n  3px\n)",
        "input-padding-vertical-sm": "max(\n  (round(((@input-height-sm - @font-size-base * @line-height-base) / 2) * 10) / 10) -\n    @border-width-base,\n  0\n)",
        "input-padding-vertical-lg": "(\n    ceil(((@input-height-lg - @font-size-lg * @line-height-base) / 2) * 10) / 10\n  ) - @border-width-base",
        "input-placeholder-color": "hsv(0, 0, 75%)",
        "input-color": "@text-color",
        "input-icon-color": "@input-color",
        "input-border-color": "@border-color-base",
        "input-bg": "@component-background",
        "input-number-hover-border-color": "@input-hover-border-color",
        "input-number-handler-active-bg": "#f4f4f4",
        "input-number-handler-hover-bg": "@primary-5",
        "input-number-handler-bg": "@component-background",
        "input-number-handler-border-color": "@border-color-base",
        "input-addon-bg": "@background-color-light",
        "input-hover-border-color": "@primary-5",
        "input-disabled-bg": "@disabled-bg",
        "input-outline-offset": "0 0",
        "input-icon-hover-color": "fade(@black, 85%)",
        "input-disabled-color": "@disabled-color",
        "mentions-dropdown-bg": "@component-background",
        "mentions-dropdown-menu-item-hover-bg": "@mentions-dropdown-bg",
        "select-border-color": "@border-color-base",
        "select-item-selected-color": "@text-color",
        "select-item-selected-font-weight": "600",
        "select-dropdown-bg": "@component-background",
        "select-item-selected-bg": "@primary-1",
        "select-item-active-bg": "@item-hover-bg",
        "select-dropdown-vertical-padding": "@dropdown-vertical-padding",
        "select-dropdown-font-size": "@dropdown-font-size",
        "select-dropdown-line-height": "@dropdown-line-height",
        "select-dropdown-height": "32px",
        "select-background": "@component-background",
        "select-clear-background": "@select-background",
        "select-selection-item-bg": "@background-color-base",
        "select-selection-item-border-color": "@border-color-split",
        "select-single-item-height-lg": "40px",
        "select-multiple-item-height": "@input-height-base - @input-padding-vertical-base * 2",
        "select-multiple-item-height-lg": "32px",
        "select-multiple-item-spacing-half": "ceil((@input-padding-vertical-base / 2))",
        "select-multiple-disabled-background": "@input-disabled-bg",
        "select-multiple-item-disabled-color": "#bfbfbf",
        "select-multiple-item-disabled-border-color": "@select-border-color",
        "cascader-bg": "@component-background",
        "cascader-item-selected-bg": "@primary-1",
        "cascader-menu-bg": "@component-background",
        "cascader-menu-border-color-split": "@border-color-split",
        "cascader-dropdown-vertical-padding": "@dropdown-vertical-padding",
        "cascader-dropdown-edge-child-vertical-padding": "@dropdown-edge-child-vertical-padding",
        "cascader-dropdown-font-size": "@dropdown-font-size",
        "cascader-dropdown-line-height": "@dropdown-line-height",
        "anchor-bg": "transparent",
        "anchor-border-color": "@border-color-split",
        "anchor-link-top": "4px",
        "anchor-link-left": "16px",
        "anchor-link-padding": "@anchor-link-top 0 @anchor-link-top @anchor-link-left",
        "tooltip-max-width": "250px",
        "tooltip-color": "#fff",
        "tooltip-bg": "rgba(0, 0, 0, 0.75)",
        "tooltip-arrow-width": "8px * sqrt(2)",
        "tooltip-distance": "@tooltip-arrow-width - 1px + 4px",
        "tooltip-arrow-color": "@tooltip-bg",
        "tooltip-border-radius": "@border-radius-base",
        "popover-bg": "@component-background",
        "popover-color": "@text-color",
        "popover-min-width": "177px",
        "popover-min-height": "32px",
        "popover-arrow-width": "@tooltip-arrow-width",
        "popover-arrow-color": "@popover-bg",
        "popover-arrow-outer-color": "@popover-bg",
        "popover-distance": "@popover-arrow-width + 4px",
        "popover-padding-horizontal": "@padding-md",
        "modal-header-padding-vertical": "@padding-md",
        "modal-header-padding-horizontal": "@padding-lg",
        "modal-body-padding": "@padding-lg",
        "modal-header-bg": "@component-background",
        "modal-header-padding": "@modal-header-padding-vertical @modal-header-padding-horizontal",
        "modal-header-border-width": "@border-width-base",
        "modal-header-border-style": "@border-style-base",
        "modal-header-title-line-height": "22px",
        "modal-header-title-font-size": "@font-size-lg",
        "modal-header-border-color-split": "@border-color-split",
        "modal-header-close-size": "@modal-header-title-line-height + 2 * @modal-header-padding-vertical",
        "modal-content-bg": "@component-background",
        "modal-heading-color": "@heading-color",
        "modal-close-color": "@text-color-secondary",
        "modal-footer-bg": "transparent",
        "modal-footer-border-color-split": "@border-color-split",
        "modal-footer-border-style": "@border-style-base",
        "modal-footer-padding-vertical": "10px",
        "modal-footer-padding-horizontal": "16px",
        "modal-footer-border-width": "@border-width-base",
        "modal-mask-bg": "fade(@black, 45%)",
        "modal-confirm-body-padding": "32px 32px 24px",
        "modal-confirm-title-font-size": "@font-size-lg",
        "modal-border-radius": "@border-radius-base",
        "progress-default-color": "@processing-color",
        "progress-remaining-color": "@background-color-base",
        "progress-info-text-color": "@progress-text-color",
        "progress-radius": "100px",
        "progress-steps-item-bg": "#f3f3f3",
        "progress-text-font-size": "1em",
        "progress-text-color": "@text-color",
        "progress-circle-text-font-size": "1em",
        "menu-inline-toplevel-item-height": "40px",
        "menu-item-height": "40px",
        "menu-item-group-height": "@line-height-base",
        "menu-collapsed-width": "80px",
        "menu-bg": "@component-background",
        "menu-popup-bg": "@component-background",
        "menu-item-color": "@text-color",
        "menu-inline-submenu-bg": "@background-color-light",
        "menu-highlight-color": "@primary-color",
        "menu-highlight-danger-color": "@error-color",
        "menu-item-active-bg": "@primary-1",
        "menu-item-active-danger-bg": "@red-1",
        "menu-item-active-border-width": "3px",
        "menu-item-group-title-color": "@text-color-secondary",
        "menu-item-vertical-margin": "4px",
        "menu-item-font-size": "@font-size-base",
        "menu-item-boundary-margin": "8px",
        "menu-item-padding-horizontal": "20px",
        "menu-item-padding": "0 @menu-item-padding-horizontal",
        "menu-horizontal-line-height": "46px",
        "menu-icon-margin-right": "10px",
        "menu-icon-size": "@menu-item-font-size",
        "menu-icon-size-lg": "@font-size-lg",
        "menu-item-group-title-font-size": "@menu-item-font-size",
        "menu-dark-color": "@text-color-secondary-dark",
        "menu-dark-danger-color": "@error-color",
        "menu-dark-bg": "@layout-header-background",
        "menu-dark-arrow-color": "#fff",
        "menu-dark-inline-submenu-bg": "#000c17",
        "menu-dark-highlight-color": "#fff",
        "menu-dark-item-active-bg": "@primary-color",
        "menu-dark-item-active-danger-bg": "@error-color",
        "menu-dark-selected-item-icon-color": "@white",
        "menu-dark-selected-item-text-color": "@white",
        "menu-dark-item-hover-bg": "transparent",
        "spin-dot-size-sm": "14px",
        "spin-dot-size": "20px",
        "spin-dot-size-lg": "32px",
        "table-bg": "@component-background",
        "table-header-bg": "@background-color-light",
        "table-header-color": "@heading-color",
        "table-header-sort-bg": "@background-color-base",
        "table-body-sort-bg": "#fafafa",
        "table-row-hover-bg": "@background-color-light",
        "table-selected-row-color": "inherit",
        "table-selected-row-bg": "@primary-1",
        "table-body-selected-sort-bg": "@table-selected-row-bg",
        "table-selected-row-hover-bg": "darken(@table-selected-row-bg, 2%)",
        "table-expanded-row-bg": "#fbfbfb",
        "table-padding-vertical": "16px",
        "table-padding-horizontal": "16px",
        "table-padding-vertical-md": "(@table-padding-vertical * 3 / 4)",
        "table-padding-horizontal-md": "(@table-padding-horizontal / 2)",
        "table-padding-vertical-sm": "(@table-padding-vertical / 2)",
        "table-padding-horizontal-sm": "(@table-padding-horizontal / 2)",
        "table-border-color": "@border-color-split",
        "table-border-radius-base": "@border-radius-base",
        "table-footer-bg": "@background-color-light",
        "table-footer-color": "@heading-color",
        "table-header-bg-sm": "@table-header-bg",
        "table-font-size": "@font-size-base",
        "table-font-size-md": "@table-font-size",
        "table-font-size-sm": "@table-font-size",
        "table-header-cell-split-color": "rgba(0, 0, 0, 0.06)",
        "table-header-sort-active-bg": "rgba(0, 0, 0, 0.04)",
        "table-fixed-header-sort-active-bg": "hsv(0, 0, 96%)",
        "table-header-filter-active-bg": "rgba(0, 0, 0, 0.04)",
        "table-filter-btns-bg": "inherit",
        "table-filter-dropdown-bg": "@component-background",
        "table-expand-icon-bg": "@component-background",
        "table-selection-column-width": "32px",
        "table-sticky-scroll-bar-bg": "fade(#000, 35%)",
        "table-sticky-scroll-bar-radius": "4px",
        "tag-border-radius": "@border-radius-base",
        "tag-default-bg": "@background-color-light",
        "tag-default-color": "@text-color",
        "tag-font-size": "@font-size-sm",
        "tag-line-height": "20px",
        "picker-bg": "@component-background",
        "picker-basic-cell-hover-color": "@item-hover-bg",
        "picker-basic-cell-active-with-range-color": "@primary-1",
        "picker-basic-cell-hover-with-range-color": "lighten(@primary-color, 35%)",
        "picker-basic-cell-disabled-bg": "rgba(0, 0, 0, 0.04)",
        "picker-border-color": "@border-color-split",
        "picker-date-hover-range-border-color": "lighten(@primary-color, 20%)",
        "picker-date-hover-range-color": "@picker-basic-cell-hover-with-range-color",
        "picker-time-panel-column-width": "56px",
        "picker-time-panel-column-height": "224px",
        "picker-time-panel-cell-height": "28px",
        "picker-panel-cell-height": "24px",
        "picker-panel-cell-width": "36px",
        "picker-text-height": "40px",
        "picker-panel-without-time-cell-height": "66px",
        "calendar-bg": "@component-background",
        "calendar-input-bg": "@input-bg",
        "calendar-border-color": "@border-color-inverse",
        "calendar-item-active-bg": "@item-active-bg",
        "calendar-column-active-bg": "fade(@calendar-item-active-bg, 20%)",
        "calendar-full-bg": "@calendar-bg",
        "calendar-full-panel-bg": "@calendar-full-bg",
        "carousel-dot-width": "16px",
        "carousel-dot-height": "3px",
        "carousel-dot-active-width": "24px",
        "badge-height": "20px",
        "badge-height-sm": "14px",
        "badge-dot-size": "6px",
        "badge-font-size": "@font-size-sm",
        "badge-font-size-sm": "@font-size-sm",
        "badge-font-weight": "normal",
        "badge-status-size": "6px",
        "badge-text-color": "@component-background",
        "badge-color": "@highlight-color",
        "rate-star-color": "@yellow-6",
        "rate-star-bg": "@border-color-split",
        "rate-star-size": "20px",
        "rate-star-hover-scale": "scale(1.1)",
        "card-head-color": "@heading-color",
        "card-head-background": "transparent",
        "card-head-font-size": "@font-size-lg",
        "card-head-font-size-sm": "@font-size-base",
        "card-head-padding": "16px",
        "card-head-padding-sm": "(@card-head-padding / 2)",
        "card-head-height": "48px",
        "card-head-height-sm": "36px",
        "card-inner-head-padding": "12px",
        "card-padding-base": "24px",
        "card-padding-base-sm": "(@card-padding-base / 2)",
        "card-actions-background": "@component-background",
        "card-actions-li-margin": "12px 0",
        "card-skeleton-bg": "#cfd8dc",
        "card-background": "@component-background",
        "card-shadow": "0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12),\n  0 5px 12px 4px rgba(0, 0, 0, 0.09)",
        "card-radius": "@border-radius-base",
        "card-head-tabs-margin-bottom": "-17px",
        "card-head-extra-color": "@text-color",
        "comment-bg": "inherit",
        "comment-padding-base": "@padding-md 0",
        "comment-nest-indent": "44px",
        "comment-font-size-base": "@font-size-base",
        "comment-font-size-sm": "@font-size-sm",
        "comment-author-name-color": "@text-color-secondary",
        "comment-author-time-color": "#ccc",
        "comment-action-color": "@text-color-secondary",
        "comment-action-hover-color": "#595959",
        "comment-actions-margin-bottom": "inherit",
        "comment-actions-margin-top": "@margin-sm",
        "comment-content-detail-p-margin-bottom": "inherit",
        "tabs-card-head-background": "@background-color-light",
        "tabs-card-height": "40px",
        "tabs-card-active-color": "@primary-color",
        "tabs-card-horizontal-padding": "(\n    (@tabs-card-height - floor(@font-size-base * @line-height-base)) / 2\n  ) - @border-width-base @padding-md",
        "tabs-card-horizontal-padding-sm": "6px @padding-md",
        "tabs-card-horizontal-padding-lg": "7px @padding-md 6px",
        "tabs-title-font-size": "@font-size-base",
        "tabs-title-font-size-lg": "@font-size-lg",
        "tabs-title-font-size-sm": "@font-size-base",
        "tabs-ink-bar-color": "@primary-color",
        "tabs-bar-margin": "0 0 @margin-md 0",
        "tabs-horizontal-gutter": "32px",
        "tabs-horizontal-margin": "0 0 0 @tabs-horizontal-gutter",
        "tabs-horizontal-margin-rtl": "0 0 0 32px",
        "tabs-horizontal-padding": "@padding-sm 0",
        "tabs-horizontal-padding-lg": "@padding-md 0",
        "tabs-horizontal-padding-sm": "@padding-xs 0",
        "tabs-vertical-padding": "@padding-xs @padding-lg",
        "tabs-vertical-margin": "@margin-md 0 0 0",
        "tabs-scrolling-size": "32px",
        "tabs-highlight-color": "@primary-color",
        "tabs-hover-color": "@primary-5",
        "tabs-active-color": "@primary-7",
        "tabs-card-gutter": "2px",
        "tabs-card-tab-active-border-top": "2px solid transparent",
        "back-top-color": "#fff",
        "back-top-bg": "@text-color-secondary",
        "back-top-hover-bg": "@text-color",
        "avatar-size-base": "32px",
        "avatar-size-lg": "40px",
        "avatar-size-sm": "24px",
        "avatar-font-size-base": "18px",
        "avatar-font-size-lg": "24px",
        "avatar-font-size-sm": "14px",
        "avatar-bg": "#ccc",
        "avatar-color": "#fff",
        "avatar-border-radius": "@border-radius-base",
        "avatar-group-overlapping": "-8px",
        "avatar-group-space": "3px",
        "avatar-group-border-color": "#fff",
        "switch-height": "22px",
        "switch-sm-height": "16px",
        "switch-min-width": "44px",
        "switch-sm-min-width": "28px",
        "switch-disabled-opacity": "0.4",
        "switch-color": "@primary-color",
        "switch-bg": "@component-background",
        "switch-shadow-color": "fade(#00230b, 20%)",
        "switch-padding": "2px",
        "switch-inner-margin-min": "ceil(@switch-height * 0.3)",
        "switch-inner-margin-max": "ceil(@switch-height * 1.1)",
        "switch-sm-inner-margin-min": "ceil(@switch-sm-height * 0.3)",
        "switch-sm-inner-margin-max": "ceil(@switch-sm-height * 1.1)",
        "pagination-item-bg": "@component-background",
        "pagination-item-size": "@height-base",
        "pagination-item-size-sm": "24px",
        "pagination-font-family": "@font-family",
        "pagination-font-weight-active": "500",
        "pagination-item-bg-active": "@component-background",
        "pagination-item-link-bg": "@component-background",
        "pagination-item-disabled-color-active": "@disabled-color",
        "pagination-item-disabled-bg-active": "@disabled-active-bg",
        "pagination-item-input-bg": "@component-background",
        "pagination-mini-options-size-changer-top": "0px",
        "page-header-padding": "@padding-lg",
        "page-header-padding-vertical": "@padding-md",
        "page-header-padding-breadcrumb": "@padding-sm",
        "page-header-content-padding-vertical": "@padding-sm",
        "page-header-back-color": "#000",
        "page-header-ghost-bg": "inherit",
        "page-header-heading-title": "@heading-4-size",
        "page-header-heading-sub-title": "14px",
        "page-header-tabs-tab-font-size": "16px",
        "breadcrumb-base-color": "@text-color-secondary",
        "breadcrumb-last-item-color": "@text-color",
        "breadcrumb-font-size": "@font-size-base",
        "breadcrumb-icon-font-size": "@font-size-base",
        "breadcrumb-link-color": "@text-color-secondary",
        "breadcrumb-link-color-hover": "@text-color",
        "breadcrumb-separator-color": "@text-color-secondary",
        "breadcrumb-separator-margin": "0 @padding-xs",
        "slider-margin": "10px 6px 10px",
        "slider-rail-background-color": "@background-color-base",
        "slider-rail-background-color-hover": "#e1e1e1",
        "slider-track-background-color": "@primary-3",
        "slider-track-background-color-hover": "@primary-4",
        "slider-handle-border-width": "2px",
        "slider-handle-background-color": "@component-background",
        "slider-handle-color": "@primary-3",
        "slider-handle-color-hover": "@primary-4",
        "slider-handle-color-focus": "tint(@primary-color, 20%)",
        "slider-handle-color-focus-shadow": "fade(@primary-color, 12%)",
        "slider-handle-color-tooltip-open": "@primary-color",
        "slider-handle-size": "14px",
        "slider-handle-margin-top": "-5px",
        "slider-handle-margin-left": "-5px",
        "slider-handle-shadow": "0",
        "slider-dot-border-color": "@border-color-split",
        "slider-dot-border-color-active": "tint(@primary-color, 50%)",
        "slider-disabled-color": "@disabled-color",
        "slider-disabled-background-color": "@component-background",
        "tree-bg": "@component-background",
        "tree-title-height": "24px",
        "tree-child-padding": "18px",
        "tree-directory-selected-color": "#fff",
        "tree-directory-selected-bg": "@primary-color",
        "tree-node-hover-bg": "@item-hover-bg",
        "tree-node-selected-bg": "@primary-2",
        "collapse-header-padding": "@padding-sm @padding-md",
        "collapse-header-padding-extra": "40px",
        "collapse-header-bg": "@background-color-light",
        "collapse-content-padding": "@padding-md",
        "collapse-content-bg": "@component-background",
        "collapse-header-arrow-left": "16px",
        "skeleton-color": "rgba(190, 190, 190, 0.2)",
        "skeleton-to-color": "shade(@skeleton-color, 5%)",
        "skeleton-paragraph-margin-top": "28px",
        "skeleton-paragraph-li-margin-top": "@margin-md",
        "skeleton-paragraph-li-height": "16px",
        "skeleton-title-height": "16px",
        "skeleton-title-paragraph-margin-top": "@margin-lg",
        "transfer-header-height": "40px",
        "transfer-item-height": "@height-base",
        "transfer-disabled-bg": "@disabled-bg",
        "transfer-list-height": "200px",
        "transfer-item-hover-bg": "@item-hover-bg",
        "transfer-item-selected-hover-bg": "darken(@item-active-bg, 2%)",
        "transfer-item-padding-vertical": "6px",
        "transfer-list-search-icon-top": "12px",
        "message-notice-content-padding": "10px 16px",
        "message-notice-content-bg": "@component-background",
        "wave-animation-width": "6px",
        "alert-success-border-color": "#b7eb8f",
        "alert-success-bg-color": "#f6ffed",
        "alert-success-icon-color": "#52c41a",
        "alert-info-border-color": "#91caff",
        "alert-info-bg-color": "#e6f4ff",
        "alert-info-icon-color": "#1677ff",
        "alert-warning-border-color": "#ffe58f",
        "alert-warning-bg-color": "#fffbe6",
        "alert-warning-icon-color": "#faad14",
        "alert-error-border-color": "#ffccc7",
        "alert-error-bg-color": "#fff2f0",
        "alert-error-icon-color": "@error-color",
        "alert-message-color": "@heading-color",
        "alert-text-color": "@text-color",
        "alert-close-color": "@text-color-secondary",
        "alert-close-hover-color": "@icon-color-hover",
        "alert-padding-vertical": "@padding-xs",
        "alert-padding-horizontal": "@padding-md - 1px",
        "alert-no-icon-padding-vertical": "@padding-xs",
        "alert-with-description-no-icon-padding-vertical": "@padding-md - 1px",
        "alert-with-description-padding-vertical": "@padding-md - 1px",
        "alert-with-description-padding": "@alert-with-description-padding-vertical 15px\n  @alert-with-description-no-icon-padding-vertical @alert-with-description-icon-size",
        "alert-icon-top": "8px + @font-size-base * (@line-height-base / 2) - (@font-size-base / 2)",
        "alert-with-description-icon-size": "24px",
        "list-header-background": "transparent",
        "list-footer-background": "transparent",
        "list-empty-text-padding": "@padding-md",
        "list-item-padding": "@padding-sm 0",
        "list-item-padding-sm": "@padding-xs @padding-md",
        "list-item-padding-lg": "16px 24px",
        "list-item-meta-margin-bottom": "@padding-md",
        "list-item-meta-avatar-margin-right": "@padding-md",
        "list-item-meta-title-margin-bottom": "@padding-sm",
        "list-customize-card-bg": "@component-background",
        "list-item-meta-description-font-size": "@font-size-base",
        "statistic-title-font-size": "@font-size-base",
        "statistic-content-font-size": "24px",
        "statistic-unit-font-size": "24px",
        "statistic-font-family": "@font-family",
        "drawer-header-padding": "@padding-md @padding-lg",
        "drawer-body-padding": "@padding-lg",
        "drawer-bg": "@component-background",
        "drawer-footer-padding-vertical": "@modal-footer-padding-vertical",
        "drawer-footer-padding-horizontal": "@modal-footer-padding-horizontal",
        "drawer-header-close-size": "56px",
        "drawer-title-font-size": "@font-size-lg",
        "drawer-title-line-height": "22px",
        "timeline-width": "2px",
        "timeline-color": "@border-color-split",
        "timeline-dot-border-width": "2px",
        "timeline-dot-color": "@primary-color",
        "timeline-dot-bg": "@component-background",
        "timeline-item-padding-bottom": "20px",
        "typography-title-font-weight": "600",
        "typography-title-margin-top": "1.2em",
        "typography-title-margin-bottom": "0.5em",
        "upload-actions-color": "@text-color-secondary",
        "process-tail-color": "@border-color-split",
        "steps-nav-arrow-color": "fade(@black, 25%)",
        "steps-background": "@component-background",
        "steps-icon-size": "32px",
        "steps-icon-custom-size": "@steps-icon-size",
        "steps-icon-custom-top": "0px",
        "steps-icon-custom-font-size": "24px",
        "steps-icon-top": "-0.5px",
        "steps-icon-font-size": "@font-size-lg",
        "steps-icon-margin": "0 8px 0 0",
        "steps-title-line-height": "@height-base",
        "steps-small-icon-size": "24px",
        "steps-small-icon-margin": "0 8px 0 0",
        "steps-dot-size": "8px",
        "steps-dot-top": "2px",
        "steps-current-dot-size": "10px",
        "steps-description-max-width": "140px",
        "steps-nav-content-max-width": "auto",
        "steps-vertical-icon-width": "16px",
        "steps-vertical-tail-width": "16px",
        "steps-vertical-tail-width-sm": "12px",
        "notification-bg": "@component-background",
        "notification-padding-vertical": "16px",
        "notification-padding-horizontal": "24px",
        "result-title-font-size": "24px",
        "result-subtitle-font-size": "@font-size-base",
        "result-icon-font-size": "72px",
        "result-extra-margin": "24px 0 0 0",
        "image-size-base": "48px",
        "image-font-size-base": "24px",
        "image-bg": "#f5f5f5",
        "image-color": "#fff",
        "image-mask-font-size": "16px",
        "image-preview-operation-size": "18px",
        "image-preview-operation-color": "@text-color-dark",
        "image-preview-operation-disabled-color": "fade(@image-preview-operation-color, 25%)",
        "segmented-bg": "fade(@black, 4%)",
        "segmented-hover-bg": "fade(@black, 6%)",
        "segmented-selected-bg": "@white",
        "segmented-label-color": "fade(@black, 65%)",
        "segmented-label-hover-color": "#262626",
        "blue": "#1677ff",
        "purple": "#722ED1",
        "cyan": "#13C2C2",
        "green": "#52C41A",
        "magenta": "#EB2F96",
        "pink": "#eb2f96",
        "red": "#F5222D",
        "orange": "#FA8C16",
        "yellow": "#FADB14",
        "volcano": "#FA541C",
        "geekblue": "#2F54EB",
        "gold": "#FAAD14",
        "lime": "#A0D911",
        "blue-1": "#e6f4ff",
        "blue1": "#e6f4ff",
        "blue-2": "#bae0ff",
        "blue2": "#bae0ff",
        "blue-3": "#91caff",
        "blue3": "#91caff",
        "blue-4": "#69b1ff",
        "blue4": "#69b1ff",
        "blue-5": "#4096ff",
        "blue5": "#4096ff",
        "blue-6": "#1677ff",
        "blue6": "#1677ff",
        "blue-7": "#0958d9",
        "blue7": "#0958d9",
        "blue-8": "#003eb3",
        "blue8": "#003eb3",
        "blue-9": "#002c8c",
        "blue9": "#002c8c",
        "blue-10": "#001d66",
        "blue10": "#001d66",
        "purple-1": "#f9f0ff",
        "purple1": "#f9f0ff",
        "purple-2": "#efdbff",
        "purple2": "#efdbff",
        "purple-3": "#d3adf7",
        "purple3": "#d3adf7",
        "purple-4": "#b37feb",
        "purple4": "#b37feb",
        "purple-5": "#9254de",
        "purple5": "#9254de",
        "purple-6": "#722ed1",
        "purple6": "#722ed1",
        "purple-7": "#531dab",
        "purple7": "#531dab",
        "purple-8": "#391085",
        "purple8": "#391085",
        "purple-9": "#22075e",
        "purple9": "#22075e",
        "purple-10": "#120338",
        "purple10": "#120338",
        "cyan-1": "#e6fffb",
        "cyan1": "#e6fffb",
        "cyan-2": "#b5f5ec",
        "cyan2": "#b5f5ec",
        "cyan-3": "#87e8de",
        "cyan3": "#87e8de",
        "cyan-4": "#5cdbd3",
        "cyan4": "#5cdbd3",
        "cyan-5": "#36cfc9",
        "cyan5": "#36cfc9",
        "cyan-6": "#13c2c2",
        "cyan6": "#13c2c2",
        "cyan-7": "#08979c",
        "cyan7": "#08979c",
        "cyan-8": "#006d75",
        "cyan8": "#006d75",
        "cyan-9": "#00474f",
        "cyan9": "#00474f",
        "cyan-10": "#002329",
        "cyan10": "#002329",
        "green-1": "#f6ffed",
        "green1": "#f6ffed",
        "green-2": "#d9f7be",
        "green2": "#d9f7be",
        "green-3": "#b7eb8f",
        "green3": "#b7eb8f",
        "green-4": "#95de64",
        "green4": "#95de64",
        "green-5": "#73d13d",
        "green5": "#73d13d",
        "green-6": "#52c41a",
        "green6": "#52c41a",
        "green-7": "#389e0d",
        "green7": "#389e0d",
        "green-8": "#237804",
        "green8": "#237804",
        "green-9": "#135200",
        "green9": "#135200",
        "green-10": "#092b00",
        "green10": "#092b00",
        "magenta-1": "#fff0f6",
        "magenta1": "#fff0f6",
        "magenta-2": "#ffd6e7",
        "magenta2": "#ffd6e7",
        "magenta-3": "#ffadd2",
        "magenta3": "#ffadd2",
        "magenta-4": "#ff85c0",
        "magenta4": "#ff85c0",
        "magenta-5": "#f759ab",
        "magenta5": "#f759ab",
        "magenta-6": "#eb2f96",
        "magenta6": "#eb2f96",
        "magenta-7": "#c41d7f",
        "magenta7": "#c41d7f",
        "magenta-8": "#9e1068",
        "magenta8": "#9e1068",
        "magenta-9": "#780650",
        "magenta9": "#780650",
        "magenta-10": "#520339",
        "magenta10": "#520339",
        "pink-1": "#fff0f6",
        "pink1": "#fff0f6",
        "pink-2": "#ffd6e7",
        "pink2": "#ffd6e7",
        "pink-3": "#ffadd2",
        "pink3": "#ffadd2",
        "pink-4": "#ff85c0",
        "pink4": "#ff85c0",
        "pink-5": "#f759ab",
        "pink5": "#f759ab",
        "pink-6": "#eb2f96",
        "pink6": "#eb2f96",
        "pink-7": "#c41d7f",
        "pink7": "#c41d7f",
        "pink-8": "#9e1068",
        "pink8": "#9e1068",
        "pink-9": "#780650",
        "pink9": "#780650",
        "pink-10": "#520339",
        "pink10": "#520339",
        "red-1": "#fff1f0",
        "red1": "#fff1f0",
        "red-2": "#ffccc7",
        "red2": "#ffccc7",
        "red-3": "#ffa39e",
        "red3": "#ffa39e",
        "red-4": "#ff7875",
        "red4": "#ff7875",
        "red-5": "#ff4d4f",
        "red5": "#ff4d4f",
        "red-6": "#f5222d",
        "red6": "#f5222d",
        "red-7": "#cf1322",
        "red7": "#cf1322",
        "red-8": "#a8071a",
        "red8": "#a8071a",
        "red-9": "#820014",
        "red9": "#820014",
        "red-10": "#5c0011",
        "red10": "#5c0011",
        "orange-1": "#fff7e6",
        "orange1": "#fff7e6",
        "orange-2": "#ffe7ba",
        "orange2": "#ffe7ba",
        "orange-3": "#ffd591",
        "orange3": "#ffd591",
        "orange-4": "#ffc069",
        "orange4": "#ffc069",
        "orange-5": "#ffa940",
        "orange5": "#ffa940",
        "orange-6": "#fa8c16",
        "orange6": "#fa8c16",
        "orange-7": "#d46b08",
        "orange7": "#d46b08",
        "orange-8": "#ad4e00",
        "orange8": "#ad4e00",
        "orange-9": "#873800",
        "orange9": "#873800",
        "orange-10": "#612500",
        "orange10": "#612500",
        "yellow-1": "#feffe6",
        "yellow1": "#feffe6",
        "yellow-2": "#ffffb8",
        "yellow2": "#ffffb8",
        "yellow-3": "#fffb8f",
        "yellow3": "#fffb8f",
        "yellow-4": "#fff566",
        "yellow4": "#fff566",
        "yellow-5": "#ffec3d",
        "yellow5": "#ffec3d",
        "yellow-6": "#fadb14",
        "yellow6": "#fadb14",
        "yellow-7": "#d4b106",
        "yellow7": "#d4b106",
        "yellow-8": "#ad8b00",
        "yellow8": "#ad8b00",
        "yellow-9": "#876800",
        "yellow9": "#876800",
        "yellow-10": "#614700",
        "yellow10": "#614700",
        "volcano-1": "#fff2e8",
        "volcano1": "#fff2e8",
        "volcano-2": "#ffd8bf",
        "volcano2": "#ffd8bf",
        "volcano-3": "#ffbb96",
        "volcano3": "#ffbb96",
        "volcano-4": "#ff9c6e",
        "volcano4": "#ff9c6e",
        "volcano-5": "#ff7a45",
        "volcano5": "#ff7a45",
        "volcano-6": "#fa541c",
        "volcano6": "#fa541c",
        "volcano-7": "#d4380d",
        "volcano7": "#d4380d",
        "volcano-8": "#ad2102",
        "volcano8": "#ad2102",
        "volcano-9": "#871400",
        "volcano9": "#871400",
        "volcano-10": "#610b00",
        "volcano10": "#610b00",
        "geekblue-1": "#f0f5ff",
        "geekblue1": "#f0f5ff",
        "geekblue-2": "#d6e4ff",
        "geekblue2": "#d6e4ff",
        "geekblue-3": "#adc6ff",
        "geekblue3": "#adc6ff",
        "geekblue-4": "#85a5ff",
        "geekblue4": "#85a5ff",
        "geekblue-5": "#597ef7",
        "geekblue5": "#597ef7",
        "geekblue-6": "#2f54eb",
        "geekblue6": "#2f54eb",
        "geekblue-7": "#1d39c4",
        "geekblue7": "#1d39c4",
        "geekblue-8": "#10239e",
        "geekblue8": "#10239e",
        "geekblue-9": "#061178",
        "geekblue9": "#061178",
        "geekblue-10": "#030852",
        "geekblue10": "#030852",
        "gold-1": "#fffbe6",
        "gold1": "#fffbe6",
        "gold-2": "#fff1b8",
        "gold2": "#fff1b8",
        "gold-3": "#ffe58f",
        "gold3": "#ffe58f",
        "gold-4": "#ffd666",
        "gold4": "#ffd666",
        "gold-5": "#ffc53d",
        "gold5": "#ffc53d",
        "gold-6": "#faad14",
        "gold6": "#faad14",
        "gold-7": "#d48806",
        "gold7": "#d48806",
        "gold-8": "#ad6800",
        "gold8": "#ad6800",
        "gold-9": "#874d00",
        "gold9": "#874d00",
        "gold-10": "#613400",
        "gold10": "#613400",
        "lime-1": "#fcffe6",
        "lime1": "#fcffe6",
        "lime-2": "#f4ffb8",
        "lime2": "#f4ffb8",
        "lime-3": "#eaff8f",
        "lime3": "#eaff8f",
        "lime-4": "#d3f261",
        "lime4": "#d3f261",
        "lime-5": "#bae637",
        "lime5": "#bae637",
        "lime-6": "#a0d911",
        "lime6": "#a0d911",
        "lime-7": "#7cb305",
        "lime7": "#7cb305",
        "lime-8": "#5b8c00",
        "lime8": "#5b8c00",
        "lime-9": "#3f6600",
        "lime9": "#3f6600",
        "lime-10": "#254000",
        "lime10": "#254000"
      }
    },
    "favicons": [
      "/favicon.png"
    ],
    "locale": {
      "default": "zh-CN",
      "baseNavigator": true
    },
    "history": {
      "type": "hash"
    },
    "manifest": {
      "basePath": "/"
    },
    "routes": [
      {
        "path": "/user",
        "component": "../layouts/UserLayout",
        "layout": false,
        "routes": [
          {
            "name": "login",
            "path": "/user/login",
            "component": "./user/Login"
          },
          {
            "component": "./404"
          }
        ]
      },
      {
        "path": "/",
        "component": "../layouts/GlobalLayout",
        "menu": {
          "flatMenu": true
        },
        "routes": [
          {
            "path": "/",
            "redirect": "/welcome"
          },
          {
            "path": "/welcome",
            "name": "welcome",
            "icon": "dashboard",
            "component": "./Welcome"
          },
          {
            "path": "/projects",
            "name": "project-v3",
            "icon": "project",
            "authority": [
              "pm"
            ],
            "component": "./project/ProjectList"
          },
          {
            "path": "/project-access",
            "hideInMenu": true,
            "component": "./project/ProjectAccessConfig",
            "authority": [
              "pm"
            ]
          },
          {
            "path": "/file-center",
            "icon": "file",
            "name": "file",
            "component": "./file/FileCenter",
            "authority": [
              "pm",
              "superadmin"
            ]
          },
          {
            "path": "/bpo-list",
            "name": "vm",
            "icon": "apartment",
            "authority": [
              "pm",
              "superadmin"
            ],
            "component": "./bpo/superadmin/BPOList"
          },
          {
            "path": "/bpo/:bpoId/workforce",
            "name": "vm",
            "hideInMenu": true,
            "icon": "apartment",
            "authority": [
              "pm",
              "superadmin"
            ],
            "component": "./bpo/bpopm/BpoWorkerList"
          },
          {
            "path": "/bpo-jobs",
            "name": "bpo-jobs-v3",
            "icon": "folder",
            "component": "./bpo/bpo-job/JobList",
            "authority": [
              "bpopm"
            ]
          },
          {
            "path": "/bpo-job/:jobId",
            "hideInMenu": true,
            "name": "job-detail",
            "component": "./bpo/bpo-job/JobDetail",
            "authority": [
              "bpopm"
            ],
            "routes": [
              {
                "path": "/bpo-job/:jobId",
                "redirect": "/bpo-job/:jobId/overview"
              },
              {
                "path": "/bpo-job/:jobId/overview",
                "name": "overview",
                "component": "./bpo/bpo-job/job-detail/Overview"
              },
              {
                "path": "/bpo-job/:jobId/data",
                "name": "data",
                "component": "./bpo/bpo-job/job-detail/DataCenter"
              },
              {
                "path": "/bpo-job/:jobId/monitor",
                "name": "monitor",
                "component": "./bpo/bpo-job/job-detail/MonitorV3"
              },
              {
                "path": "/bpo-job/:jobId/workforce",
                "name": "workforce",
                "component": "./bpo/bpo-job/job-detail/Workforce"
              }
            ]
          },
          {
            "path": "/projects/:projectId",
            "name": "project-detail",
            "hideInMenu": true,
            "authority": [
              "pm"
            ],
            "component": "./project/ProjectDetail",
            "routes": [
              {
                "path": "/projects/:projectId/template-center",
                "name": "template",
                "component": "./project/template-center/TemplateCenter"
              },
              {
                "path": "/projects/:projectId/template-center/edit",
                "name": "template",
                "component": "./project/template-center/TemplateCreation"
              },
              {
                "path": "/projects/:projectId/data-center",
                "name": "data-center",
                "component": "./project/data-center/ProjectDataCenter"
              },
              {
                "path": "/projects/:projectId/workflow",
                "name": "workflow",
                "component": "./project/workflow/WorkflowList"
              },
              {
                "path": "/projects/:projectId/:recordId/record-detail",
                "name": "data-center",
                "component": "./project/data-center/RecordDetail"
              }
            ]
          },
          {
            "path": "/workflows/:workflowId",
            "name": "project-detail",
            "hideInMenu": true,
            "authority": [
              "pm"
            ],
            "routes": [
              {
                "path": "/workflows/:workflowId/detail",
                "name": "workflow",
                "hideInMenu": true,
                "component": "./project/workflow/WorkflowDetail"
              },
              {
                "path": "/workflows/:workflowId/jobs/workload",
                "name": "workload",
                "hideInMenu": true,
                "component": "./project/workflow/WorkflowDetail/Workload"
              }
            ]
          },
          {
            "path": "/worker-jobs",
            "icon": "folder",
            "name": "tasks-v3",
            "authority": [
              "worker",
              "bpoworker"
            ],
            "routes": [
              {
                "path": "/worker-jobs",
                "redirect": "/worker-jobs/tasks"
              },
              {
                "path": "/worker-jobs/tasks",
                "component": "./worker-job/WorkerJobs",
                "routes": [
                  {
                    "path": "/worker-jobs/tasks",
                    "redirect": "/worker-jobs/tasks/in-progress"
                  },
                  {
                    "path": "/worker-jobs/tasks/pending",
                    "component": "./worker-job/JobAcceptList",
                    "hideInMenu": true
                  },
                  {
                    "path": "/worker-jobs/tasks/in-progress",
                    "component": "./worker-job/JobTodoList",
                    "hideInMenu": true
                  },
                  {
                    "path": "/worker-jobs/tasks/history",
                    "component": "./worker-job/JobHistoryList",
                    "hideInMenu": true
                  }
                ]
              },
              {
                "name": "history",
                "path": "/worker-jobs/:jobId/annotation-result-list",
                "component": "./worker-job/AnnotationResultList",
                "hideInMenu": true,
                "authority": [
                  "worker",
                  "bpoworker"
                ]
              }
            ]
          },
          {
            "name": "workerJobDetail",
            "path": "/worker-job/:jobId",
            "hideInMenu": true,
            "component": "./worker-job/WorkerJobDetail",
            "authority": [
              "worker",
              "bpoworker"
            ]
          },
          {
            "name": "workforce",
            "icon": "team",
            "path": "/workforce",
            "component": "./workforce/WorkforceManagement",
            "authority": [
              "pm",
              "superadmin"
            ]
          },
          {
            "name": "workforce",
            "icon": "team",
            "path": "/bpo-workforce",
            "component": "./bpo/bpopm/BpoWorkerList",
            "authority": [
              "bpopm"
            ]
          }
        ]
      }
    ],
    "proxy": {
      "/api/": {
        "target": "http://localhost:3000/",
        "changeOrigin": true,
        "cookieDomainRewrite": {
          "*": ""
        }
      },
      "/ssr/": {
        "target": "http://localhost:3000/",
        "changeOrigin": true
      },
      "/public/": {
        "target": "http://localhost:3000/",
        "changeOrigin": true
      },
      "/api-gw/": {
        "target": "http://47.92.246.39:81/",
        "changeOrigin": true,
        "secure": false,
        "cookieDomainRewrite": {
          "*": ""
        }
      },
      "/pointcloud-api/": {
        "target": "http://example.com/",
        "changeOrigin": true
      }
    },
    "mfsu": {},
    "esbuildMinifyIIFE": true
  },
  "mainConfigFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/config/config.ts",
  "config": {
    "routeLoader": {
      "moduleType": "esm"
    },
    "mountElementId": "root",
    "history": {
      "type": "hash"
    },
    "base": "/",
    "svgr": {},
    "publicPath": "/",
    "mfsu": {
      "strategy": "eager"
    },
    "ignoreMomentLocale": true,
    "externals": {},
    "autoCSSModules": true,
    "alias": {
      "umi": "@@/exports",
      "react": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/react",
      "react-dom": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/react-dom",
      "react-router": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/react-router@6.3.0_react@18.3.1/node_modules/react-router",
      "react-router-dom": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/react-router-dom@6.3.0_react-dom@18.3.1_react@18.3.1/node_modules/react-router-dom",
      "@": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src",
      "@@": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/.umi-production",
      "regenerator-runtime": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/regenerator-runtime@0.13.11/node_modules/regenerator-runtime",
      "antd": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/antd",
      "dva$": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/libs/dva.tsx",
      "@umijs/max": "@@/exports"
    },
    "antd": {
      "theme": {},
      "configProvider": {
        "theme": {}
      }
    },
    "dva": {
      "immer": {}
    },
    "access": {},
    "deadCode": {},
    "model": {},
    "initialState": {},
    "request": {},
    "hash": true,
    "layout": {
      "locale": true,
      "siderWidth": 224,
      "navTheme": "light",
      "colorMenuBackground": "#fff",
      "contentWidth": "Fluid",
      "autoHideHeader": false,
      "fixSiderbar": true,
      "layout": "mix",
      "colorWeak": false,
      "menu": {
        "locale": true
      },
      "title": "",
      "pwa": false,
      "iconfontUrl": ""
    },
    "lessLoader": {
      "javascriptEnabled": true,
      "modifyVars": {
        "root-entry-name": "default",
        "theme": "default",
        "ant-prefix": "ant",
        "html-selector": "html",
        "primary-color": "#227a7a",
        "primary-color-hover": "#4096ff",
        "primary-color-active": "#0958d9",
        "primary-color-outline": "fade(@primary-color, @outline-fade)",
        "processing-color": "#1677ff",
        "info-color": "#1677ff",
        "info-color-deprecated-bg": "#e6f4ff",
        "info-color-deprecated-border": "#91caff",
        "success-color": "#52c41a",
        "success-color-hover": "#d9f7be",
        "success-color-active": "#389e0d",
        "success-color-outline": "fade(@success-color, @outline-fade)",
        "success-color-deprecated-bg": "#f6ffed",
        "success-color-deprecated-border": "#b7eb8f",
        "warning-color": "#faad14",
        "warning-color-hover": "#ffd666",
        "warning-color-active": "#d48806",
        "warning-color-outline": "fade(@warning-color, @outline-fade)",
        "warning-color-deprecated-bg": "#fffbe6",
        "warning-color-deprecated-border": "#ffe58f",
        "error-color": "#ff4d4f",
        "error-color-hover": "#ff7875",
        "error-color-active": "#d9363e",
        "error-color-outline": "fade(@error-color, @outline-fade)",
        "error-color-deprecated-bg": "#fff2f0",
        "error-color-deprecated-border": "#ffccc7",
        "highlight-color": "#ff4d4f",
        "normal-color": "#d9d9d9",
        "white": "#fff",
        "black": "#000",
        "primary-1": "#e6f4ff",
        "primary-2": "#bae0ff",
        "primary-3": "#91caff",
        "primary-4": "#69b1ff",
        "primary-5": "#4096ff",
        "primary-6": "#1677ff",
        "primary-7": "#0958d9",
        "primary-8": "#4096ff",
        "primary-9": "#1677ff",
        "primary-10": "#0958d9",
        "body-background": "#fff",
        "component-background": "#ffffff",
        "popover-background": "#ffffff",
        "popover-customize-border-color": "rgba(5, 5, 5, 0.06)",
        "font-family": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n'Noto Color Emoji'",
        "code-family": "'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",
        "text-color": "rgba(0, 0, 0, 0.88)",
        "text-color-secondary": "rgba(0, 0, 0, 0.65)",
        "text-color-inverse": "#fff",
        "icon-color": "rgba(0, 0, 0, 0.45)",
        "icon-color-hover": "rgba(0, 0, 0, 0.88)",
        "heading-color": "rgba(0, 0, 0, 0.88)",
        "text-color-dark": "fade(@white, 85%)",
        "text-color-secondary-dark": "fade(@white, 65%)",
        "text-selection-bg": "#1677ff",
        "font-variant-base": "tabular-nums",
        "font-feature-settings-base": "tnum",
        "font-size-base": "14px",
        "font-size-lg": "16px",
        "font-size-sm": "12px",
        "heading-1-size": "38px",
        "heading-2-size": "30px",
        "heading-3-size": "24px",
        "heading-4-size": "20px",
        "heading-5-size": "16px",
        "line-height-base": "1.5714285714285714",
        "border-radius-base": "6px",
        "border-radius-sm": "4px",
        "control-border-radius": "6px",
        "arrow-border-radius": "4px",
        "padding-lg": "24px",
        "padding-md": "16px",
        "padding-sm": "12px",
        "padding-xs": "8px",
        "padding-xss": "4px",
        "control-padding-horizontal": "12px",
        "control-padding-horizontal-sm": "8px",
        "margin-lg": "24px",
        "margin-md": "16px",
        "margin-sm": "12px",
        "margin-xs": "8px",
        "margin-xss": "4px",
        "height-base": "32px",
        "height-lg": "40px",
        "height-sm": "24px",
        "item-active-bg": "#e6f4ff",
        "item-hover-bg": "rgba(0, 0, 0, 0.04)",
        "iconfont-css-prefix": "anticon",
        "link-color": "#1677ff",
        "link-hover-color": "#69b1ff",
        "link-active-color": "#0958d9",
        "link-decoration": "none",
        "link-hover-decoration": "none",
        "link-focus-decoration": "none",
        "link-focus-outline": "0px",
        "ease-base-out": "cubic-bezier(0.215, 0.61, 0.355, 1)",
        "ease-base-in": "cubic-bezier(0.9, 0, 0.3, 0.7)",
        "ease-out": "cubic-bezier(0.215, 0.61, 0.355, 1)",
        "ease-in": "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
        "ease-in-out": "cubic-bezier(0.645, 0.045, 0.355, 1)",
        "ease-out-back": "cubic-bezier(0.12, 0.4, 0.29, 1.46)",
        "ease-in-back": "cubic-bezier(0.71, -0.46, 0.88, 0.6)",
        "ease-in-out-back": "cubic-bezier(0.71, -0.46, 0.29, 1.46)",
        "ease-out-circ": "cubic-bezier(0.08, 0.82, 0.17, 1)",
        "ease-in-circ": "cubic-bezier(0.6, 0.04, 0.98, 0.34)",
        "ease-in-out-circ": "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
        "ease-out-quint": "cubic-bezier(0.23, 1, 0.32, 1)",
        "ease-in-quint": "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
        "ease-in-out-quint": "cubic-bezier(0.86, 0, 0.07, 1)",
        "border-color-base": "#e5e7ed",
        "border-color-split": "rgba(5, 5, 5, 0.06)",
        "border-color-inverse": "#fff",
        "border-width-base": "1px",
        "border-style-base": "solid",
        "outline-blur-size": "0px",
        "outline-width": "2px",
        "outline-color": "rgba(5, 145, 255, 0.1)",
        "outline-fade": "20%",
        "background-color-light": "hsv(0, 0, 98%)",
        "background-color-base": "hsv(0, 0, 96%)",
        "disabled-color": "rgba(0, 0, 0, 0.25)",
        "disabled-bg": "rgba(0, 0, 0, 0.04)",
        "disabled-active-bg": "rgba(0, 0, 0, 0.04)",
        "disabled-color-dark": "fade(#fff, 35%)",
        "shadow-color": "rgba(0, 0, 0, 0.15)",
        "shadow-color-inverse": "#ffffff",
        "box-shadow-base": "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-1-up": "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-1-down": "\n      0 -6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 -3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 -9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-1-left": "\n      6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-1-right": "\n      -6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      -3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      -9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "shadow-2": "\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",
        "btn-font-weight": "400",
        "btn-border-radius-base": "@border-radius-base",
        "btn-border-radius-sm": "@border-radius-base",
        "btn-border-width": "@border-width-base",
        "btn-border-style": "@border-style-base",
        "btn-shadow": "0 2px 0 rgba(0, 0, 0, 0.015)",
        "btn-primary-shadow": "0 2px 0 rgba(0, 0, 0, 0.045)",
        "btn-text-shadow": "0 -1px 0 rgba(0, 0, 0, 0.12)",
        "btn-primary-color": "#fff",
        "btn-primary-bg": "@primary-color",
        "btn-default-color": "@text-color",
        "btn-default-bg": "@component-background",
        "btn-default-border": "@border-color-base",
        "btn-danger-color": "#fff",
        "btn-danger-bg": "@error-color",
        "btn-danger-border": "@error-color",
        "btn-disable-color": "@disabled-color",
        "btn-disable-bg": "@disabled-bg",
        "btn-disable-border": "@border-color-base",
        "btn-default-ghost-color": "@component-background",
        "btn-default-ghost-bg": "transparent",
        "btn-default-ghost-border": "@component-background",
        "btn-font-size-lg": "@font-size-lg",
        "btn-font-size-sm": "@font-size-base",
        "btn-padding-horizontal-base": "@padding-md - 1px",
        "btn-padding-horizontal-lg": "@btn-padding-horizontal-base",
        "btn-padding-horizontal-sm": "@padding-xs - 1px",
        "btn-height-base": "@height-base",
        "btn-height-lg": "@height-lg",
        "btn-height-sm": "@height-sm",
        "btn-line-height": "@line-height-base",
        "btn-circle-size": "@btn-height-base",
        "btn-circle-size-lg": "@btn-height-lg",
        "btn-circle-size-sm": "@btn-height-sm",
        "btn-square-size": "@btn-height-base",
        "btn-square-size-lg": "@btn-height-lg",
        "btn-square-size-sm": "@btn-height-sm",
        "btn-square-only-icon-size": "@font-size-base + 2px",
        "btn-square-only-icon-size-sm": "@font-size-base",
        "btn-square-only-icon-size-lg": "@btn-font-size-lg + 2px",
        "btn-group-border": "@primary-5",
        "btn-link-hover-bg": "transparent",
        "btn-text-hover-bg": "rgba(0, 0, 0, 0.018)",
        "checkbox-size": "16px",
        "checkbox-color": "@primary-color",
        "checkbox-check-color": "#fff",
        "checkbox-check-bg": "@checkbox-check-color",
        "checkbox-border-width": "@border-width-base",
        "checkbox-border-radius": "@border-radius-base",
        "checkbox-group-item-margin-right": "8px",
        "descriptions-bg": "#fafafa",
        "descriptions-title-margin-bottom": "20px",
        "descriptions-default-padding": "@padding-md @padding-lg",
        "descriptions-middle-padding": "@padding-sm @padding-lg",
        "descriptions-small-padding": "@padding-xs @padding-md",
        "descriptions-item-padding-bottom": "@padding-md",
        "descriptions-item-trailing-colon": "true",
        "descriptions-item-label-colon-margin-right": "8px",
        "descriptions-item-label-colon-margin-left": "2px",
        "descriptions-extra-color": "@text-color",
        "divider-text-padding": "1em",
        "divider-orientation-margin": "5%",
        "divider-color": "rgba(0, 0, 0, 6%)",
        "divider-vertical-gutter": "8px",
        "dropdown-selected-color": "@primary-color",
        "dropdown-menu-submenu-disabled-bg": "@component-background",
        "dropdown-selected-bg": "@item-active-bg",
        "empty-font-size": "@font-size-base",
        "radio-size": "16px",
        "radio-top": "0.2em",
        "radio-border-width": "1px",
        "radio-dot-size": "@radio-size - 8px",
        "radio-dot-color": "@primary-color",
        "radio-dot-disabled-color": "fade(@black, 20%)",
        "radio-solid-checked-color": "@component-background",
        "radio-button-bg": "@btn-default-bg",
        "radio-button-checked-bg": "@btn-default-bg",
        "radio-button-color": "@btn-default-color",
        "radio-button-hover-color": "@primary-5",
        "radio-button-active-color": "@primary-7",
        "radio-button-padding-horizontal": "@padding-md - 1px",
        "radio-disabled-button-checked-bg": "@disabled-active-bg",
        "radio-disabled-button-checked-color": "@disabled-color",
        "radio-wrapper-margin-right": "8px",
        "screen-xs": "480px",
        "screen-xs-min": "@screen-xs",
        "screen-sm": "576px",
        "screen-sm-min": "@screen-sm",
        "screen-md": "768px",
        "screen-md-min": "@screen-md",
        "screen-lg": "992px",
        "screen-lg-min": "@screen-lg",
        "screen-xl": "1200px",
        "screen-xl-min": "@screen-xl",
        "screen-xxl": "1600px",
        "screen-xxl-min": "@screen-xxl",
        "screen-xs-max": "(@screen-sm-min - 1px)",
        "screen-sm-max": "(@screen-md-min - 1px)",
        "screen-md-max": "(@screen-lg-min - 1px)",
        "screen-lg-max": "(@screen-xl-min - 1px)",
        "screen-xl-max": "(@screen-xxl-min - 1px)",
        "grid-columns": "24",
        "layout-body-background": "#f0f2f5",
        "layout-header-background": "#001529",
        "layout-header-height": "64px",
        "layout-header-padding": "0 50px",
        "layout-header-color": "@text-color",
        "layout-footer-padding": "24px 50px",
        "layout-footer-background": "@layout-body-background",
        "layout-sider-background": "@layout-header-background",
        "layout-trigger-height": "48px",
        "layout-trigger-background": "#002140",
        "layout-trigger-color": "#fff",
        "layout-zero-trigger-width": "36px",
        "layout-zero-trigger-height": "42px",
        "layout-sider-background-light": "#fff",
        "layout-trigger-background-light": "#fff",
        "layout-trigger-color-light": "@text-color",
        "zindex-badge": "auto",
        "zindex-table-fixed": "2",
        "zindex-affix": "10",
        "zindex-back-top": "10",
        "zindex-picker-panel": "10",
        "zindex-popup-close": "10",
        "zindex-modal": "1000",
        "zindex-modal-mask": "1000",
        "zindex-message": "1010",
        "zindex-notification": "1010",
        "zindex-popover": "1030",
        "zindex-dropdown": "1050",
        "zindex-picker": "1050",
        "zindex-popoconfirm": "1060",
        "zindex-tooltip": "1070",
        "zindex-image": "1080",
        "animation-duration-slow": "0.3s",
        "animation-duration-base": "0.2s",
        "animation-duration-fast": "0.1s",
        "collapse-panel-border-radius": "@border-radius-base",
        "dropdown-menu-bg": "@component-background",
        "dropdown-vertical-padding": "5px",
        "dropdown-edge-child-vertical-padding": "4px",
        "dropdown-font-size": "@font-size-base",
        "dropdown-line-height": "22px",
        "label-required-color": "@highlight-color",
        "label-color": "@heading-color",
        "form-warning-input-bg": "@input-bg",
        "form-item-margin-bottom": "24px",
        "form-item-trailing-colon": "true",
        "form-vertical-label-padding": "0 0 8px",
        "form-vertical-label-margin": "0",
        "form-item-label-font-size": "@font-size-base",
        "form-item-label-height": "@input-height-base",
        "form-item-label-colon-margin-right": "8px",
        "form-item-label-colon-margin-left": "2px",
        "form-error-input-bg": "@input-bg",
        "input-height-base": "@height-base",
        "input-height-lg": "@height-lg",
        "input-height-sm": "@height-sm",
        "input-padding-horizontal": "@control-padding-horizontal - 1px",
        "input-padding-horizontal-base": "@input-padding-horizontal",
        "input-padding-horizontal-sm": "@control-padding-horizontal-sm - 1px",
        "input-padding-horizontal-lg": "@input-padding-horizontal",
        "input-padding-vertical-base": "max(\n  (round(((@input-height-base - @font-size-base * @line-height-base) / 2) * 10) / 10) -\n    @border-width-base,\n  3px\n)",
        "input-padding-vertical-sm": "max(\n  (round(((@input-height-sm - @font-size-base * @line-height-base) / 2) * 10) / 10) -\n    @border-width-base,\n  0\n)",
        "input-padding-vertical-lg": "(\n    ceil(((@input-height-lg - @font-size-lg * @line-height-base) / 2) * 10) / 10\n  ) - @border-width-base",
        "input-placeholder-color": "hsv(0, 0, 75%)",
        "input-color": "@text-color",
        "input-icon-color": "@input-color",
        "input-border-color": "@border-color-base",
        "input-bg": "@component-background",
        "input-number-hover-border-color": "@input-hover-border-color",
        "input-number-handler-active-bg": "#f4f4f4",
        "input-number-handler-hover-bg": "@primary-5",
        "input-number-handler-bg": "@component-background",
        "input-number-handler-border-color": "@border-color-base",
        "input-addon-bg": "@background-color-light",
        "input-hover-border-color": "@primary-5",
        "input-disabled-bg": "@disabled-bg",
        "input-outline-offset": "0 0",
        "input-icon-hover-color": "fade(@black, 85%)",
        "input-disabled-color": "@disabled-color",
        "mentions-dropdown-bg": "@component-background",
        "mentions-dropdown-menu-item-hover-bg": "@mentions-dropdown-bg",
        "select-border-color": "@border-color-base",
        "select-item-selected-color": "@text-color",
        "select-item-selected-font-weight": "600",
        "select-dropdown-bg": "@component-background",
        "select-item-selected-bg": "@primary-1",
        "select-item-active-bg": "@item-hover-bg",
        "select-dropdown-vertical-padding": "@dropdown-vertical-padding",
        "select-dropdown-font-size": "@dropdown-font-size",
        "select-dropdown-line-height": "@dropdown-line-height",
        "select-dropdown-height": "32px",
        "select-background": "@component-background",
        "select-clear-background": "@select-background",
        "select-selection-item-bg": "@background-color-base",
        "select-selection-item-border-color": "@border-color-split",
        "select-single-item-height-lg": "40px",
        "select-multiple-item-height": "@input-height-base - @input-padding-vertical-base * 2",
        "select-multiple-item-height-lg": "32px",
        "select-multiple-item-spacing-half": "ceil((@input-padding-vertical-base / 2))",
        "select-multiple-disabled-background": "@input-disabled-bg",
        "select-multiple-item-disabled-color": "#bfbfbf",
        "select-multiple-item-disabled-border-color": "@select-border-color",
        "cascader-bg": "@component-background",
        "cascader-item-selected-bg": "@primary-1",
        "cascader-menu-bg": "@component-background",
        "cascader-menu-border-color-split": "@border-color-split",
        "cascader-dropdown-vertical-padding": "@dropdown-vertical-padding",
        "cascader-dropdown-edge-child-vertical-padding": "@dropdown-edge-child-vertical-padding",
        "cascader-dropdown-font-size": "@dropdown-font-size",
        "cascader-dropdown-line-height": "@dropdown-line-height",
        "anchor-bg": "transparent",
        "anchor-border-color": "@border-color-split",
        "anchor-link-top": "4px",
        "anchor-link-left": "16px",
        "anchor-link-padding": "@anchor-link-top 0 @anchor-link-top @anchor-link-left",
        "tooltip-max-width": "250px",
        "tooltip-color": "#fff",
        "tooltip-bg": "rgba(0, 0, 0, 0.75)",
        "tooltip-arrow-width": "8px * sqrt(2)",
        "tooltip-distance": "@tooltip-arrow-width - 1px + 4px",
        "tooltip-arrow-color": "@tooltip-bg",
        "tooltip-border-radius": "@border-radius-base",
        "popover-bg": "@component-background",
        "popover-color": "@text-color",
        "popover-min-width": "177px",
        "popover-min-height": "32px",
        "popover-arrow-width": "@tooltip-arrow-width",
        "popover-arrow-color": "@popover-bg",
        "popover-arrow-outer-color": "@popover-bg",
        "popover-distance": "@popover-arrow-width + 4px",
        "popover-padding-horizontal": "@padding-md",
        "modal-header-padding-vertical": "@padding-md",
        "modal-header-padding-horizontal": "@padding-lg",
        "modal-body-padding": "@padding-lg",
        "modal-header-bg": "@component-background",
        "modal-header-padding": "@modal-header-padding-vertical @modal-header-padding-horizontal",
        "modal-header-border-width": "@border-width-base",
        "modal-header-border-style": "@border-style-base",
        "modal-header-title-line-height": "22px",
        "modal-header-title-font-size": "@font-size-lg",
        "modal-header-border-color-split": "@border-color-split",
        "modal-header-close-size": "@modal-header-title-line-height + 2 * @modal-header-padding-vertical",
        "modal-content-bg": "@component-background",
        "modal-heading-color": "@heading-color",
        "modal-close-color": "@text-color-secondary",
        "modal-footer-bg": "transparent",
        "modal-footer-border-color-split": "@border-color-split",
        "modal-footer-border-style": "@border-style-base",
        "modal-footer-padding-vertical": "10px",
        "modal-footer-padding-horizontal": "16px",
        "modal-footer-border-width": "@border-width-base",
        "modal-mask-bg": "fade(@black, 45%)",
        "modal-confirm-body-padding": "32px 32px 24px",
        "modal-confirm-title-font-size": "@font-size-lg",
        "modal-border-radius": "@border-radius-base",
        "progress-default-color": "@processing-color",
        "progress-remaining-color": "@background-color-base",
        "progress-info-text-color": "@progress-text-color",
        "progress-radius": "100px",
        "progress-steps-item-bg": "#f3f3f3",
        "progress-text-font-size": "1em",
        "progress-text-color": "@text-color",
        "progress-circle-text-font-size": "1em",
        "menu-inline-toplevel-item-height": "40px",
        "menu-item-height": "40px",
        "menu-item-group-height": "@line-height-base",
        "menu-collapsed-width": "80px",
        "menu-bg": "@component-background",
        "menu-popup-bg": "@component-background",
        "menu-item-color": "@text-color",
        "menu-inline-submenu-bg": "@background-color-light",
        "menu-highlight-color": "@primary-color",
        "menu-highlight-danger-color": "@error-color",
        "menu-item-active-bg": "@primary-1",
        "menu-item-active-danger-bg": "@red-1",
        "menu-item-active-border-width": "3px",
        "menu-item-group-title-color": "@text-color-secondary",
        "menu-item-vertical-margin": "4px",
        "menu-item-font-size": "@font-size-base",
        "menu-item-boundary-margin": "8px",
        "menu-item-padding-horizontal": "20px",
        "menu-item-padding": "0 @menu-item-padding-horizontal",
        "menu-horizontal-line-height": "46px",
        "menu-icon-margin-right": "10px",
        "menu-icon-size": "@menu-item-font-size",
        "menu-icon-size-lg": "@font-size-lg",
        "menu-item-group-title-font-size": "@menu-item-font-size",
        "menu-dark-color": "@text-color-secondary-dark",
        "menu-dark-danger-color": "@error-color",
        "menu-dark-bg": "@layout-header-background",
        "menu-dark-arrow-color": "#fff",
        "menu-dark-inline-submenu-bg": "#000c17",
        "menu-dark-highlight-color": "#fff",
        "menu-dark-item-active-bg": "@primary-color",
        "menu-dark-item-active-danger-bg": "@error-color",
        "menu-dark-selected-item-icon-color": "@white",
        "menu-dark-selected-item-text-color": "@white",
        "menu-dark-item-hover-bg": "transparent",
        "spin-dot-size-sm": "14px",
        "spin-dot-size": "20px",
        "spin-dot-size-lg": "32px",
        "table-bg": "@component-background",
        "table-header-bg": "@background-color-light",
        "table-header-color": "@heading-color",
        "table-header-sort-bg": "@background-color-base",
        "table-body-sort-bg": "#fafafa",
        "table-row-hover-bg": "@background-color-light",
        "table-selected-row-color": "inherit",
        "table-selected-row-bg": "@primary-1",
        "table-body-selected-sort-bg": "@table-selected-row-bg",
        "table-selected-row-hover-bg": "darken(@table-selected-row-bg, 2%)",
        "table-expanded-row-bg": "#fbfbfb",
        "table-padding-vertical": "16px",
        "table-padding-horizontal": "16px",
        "table-padding-vertical-md": "(@table-padding-vertical * 3 / 4)",
        "table-padding-horizontal-md": "(@table-padding-horizontal / 2)",
        "table-padding-vertical-sm": "(@table-padding-vertical / 2)",
        "table-padding-horizontal-sm": "(@table-padding-horizontal / 2)",
        "table-border-color": "@border-color-split",
        "table-border-radius-base": "@border-radius-base",
        "table-footer-bg": "@background-color-light",
        "table-footer-color": "@heading-color",
        "table-header-bg-sm": "@table-header-bg",
        "table-font-size": "@font-size-base",
        "table-font-size-md": "@table-font-size",
        "table-font-size-sm": "@table-font-size",
        "table-header-cell-split-color": "rgba(0, 0, 0, 0.06)",
        "table-header-sort-active-bg": "rgba(0, 0, 0, 0.04)",
        "table-fixed-header-sort-active-bg": "hsv(0, 0, 96%)",
        "table-header-filter-active-bg": "rgba(0, 0, 0, 0.04)",
        "table-filter-btns-bg": "inherit",
        "table-filter-dropdown-bg": "@component-background",
        "table-expand-icon-bg": "@component-background",
        "table-selection-column-width": "32px",
        "table-sticky-scroll-bar-bg": "fade(#000, 35%)",
        "table-sticky-scroll-bar-radius": "4px",
        "tag-border-radius": "@border-radius-base",
        "tag-default-bg": "@background-color-light",
        "tag-default-color": "@text-color",
        "tag-font-size": "@font-size-sm",
        "tag-line-height": "20px",
        "picker-bg": "@component-background",
        "picker-basic-cell-hover-color": "@item-hover-bg",
        "picker-basic-cell-active-with-range-color": "@primary-1",
        "picker-basic-cell-hover-with-range-color": "lighten(@primary-color, 35%)",
        "picker-basic-cell-disabled-bg": "rgba(0, 0, 0, 0.04)",
        "picker-border-color": "@border-color-split",
        "picker-date-hover-range-border-color": "lighten(@primary-color, 20%)",
        "picker-date-hover-range-color": "@picker-basic-cell-hover-with-range-color",
        "picker-time-panel-column-width": "56px",
        "picker-time-panel-column-height": "224px",
        "picker-time-panel-cell-height": "28px",
        "picker-panel-cell-height": "24px",
        "picker-panel-cell-width": "36px",
        "picker-text-height": "40px",
        "picker-panel-without-time-cell-height": "66px",
        "calendar-bg": "@component-background",
        "calendar-input-bg": "@input-bg",
        "calendar-border-color": "@border-color-inverse",
        "calendar-item-active-bg": "@item-active-bg",
        "calendar-column-active-bg": "fade(@calendar-item-active-bg, 20%)",
        "calendar-full-bg": "@calendar-bg",
        "calendar-full-panel-bg": "@calendar-full-bg",
        "carousel-dot-width": "16px",
        "carousel-dot-height": "3px",
        "carousel-dot-active-width": "24px",
        "badge-height": "20px",
        "badge-height-sm": "14px",
        "badge-dot-size": "6px",
        "badge-font-size": "@font-size-sm",
        "badge-font-size-sm": "@font-size-sm",
        "badge-font-weight": "normal",
        "badge-status-size": "6px",
        "badge-text-color": "@component-background",
        "badge-color": "@highlight-color",
        "rate-star-color": "@yellow-6",
        "rate-star-bg": "@border-color-split",
        "rate-star-size": "20px",
        "rate-star-hover-scale": "scale(1.1)",
        "card-head-color": "@heading-color",
        "card-head-background": "transparent",
        "card-head-font-size": "@font-size-lg",
        "card-head-font-size-sm": "@font-size-base",
        "card-head-padding": "16px",
        "card-head-padding-sm": "(@card-head-padding / 2)",
        "card-head-height": "48px",
        "card-head-height-sm": "36px",
        "card-inner-head-padding": "12px",
        "card-padding-base": "24px",
        "card-padding-base-sm": "(@card-padding-base / 2)",
        "card-actions-background": "@component-background",
        "card-actions-li-margin": "12px 0",
        "card-skeleton-bg": "#cfd8dc",
        "card-background": "@component-background",
        "card-shadow": "0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12),\n  0 5px 12px 4px rgba(0, 0, 0, 0.09)",
        "card-radius": "@border-radius-base",
        "card-head-tabs-margin-bottom": "-17px",
        "card-head-extra-color": "@text-color",
        "comment-bg": "inherit",
        "comment-padding-base": "@padding-md 0",
        "comment-nest-indent": "44px",
        "comment-font-size-base": "@font-size-base",
        "comment-font-size-sm": "@font-size-sm",
        "comment-author-name-color": "@text-color-secondary",
        "comment-author-time-color": "#ccc",
        "comment-action-color": "@text-color-secondary",
        "comment-action-hover-color": "#595959",
        "comment-actions-margin-bottom": "inherit",
        "comment-actions-margin-top": "@margin-sm",
        "comment-content-detail-p-margin-bottom": "inherit",
        "tabs-card-head-background": "@background-color-light",
        "tabs-card-height": "40px",
        "tabs-card-active-color": "@primary-color",
        "tabs-card-horizontal-padding": "(\n    (@tabs-card-height - floor(@font-size-base * @line-height-base)) / 2\n  ) - @border-width-base @padding-md",
        "tabs-card-horizontal-padding-sm": "6px @padding-md",
        "tabs-card-horizontal-padding-lg": "7px @padding-md 6px",
        "tabs-title-font-size": "@font-size-base",
        "tabs-title-font-size-lg": "@font-size-lg",
        "tabs-title-font-size-sm": "@font-size-base",
        "tabs-ink-bar-color": "@primary-color",
        "tabs-bar-margin": "0 0 @margin-md 0",
        "tabs-horizontal-gutter": "32px",
        "tabs-horizontal-margin": "0 0 0 @tabs-horizontal-gutter",
        "tabs-horizontal-margin-rtl": "0 0 0 32px",
        "tabs-horizontal-padding": "@padding-sm 0",
        "tabs-horizontal-padding-lg": "@padding-md 0",
        "tabs-horizontal-padding-sm": "@padding-xs 0",
        "tabs-vertical-padding": "@padding-xs @padding-lg",
        "tabs-vertical-margin": "@margin-md 0 0 0",
        "tabs-scrolling-size": "32px",
        "tabs-highlight-color": "@primary-color",
        "tabs-hover-color": "@primary-5",
        "tabs-active-color": "@primary-7",
        "tabs-card-gutter": "2px",
        "tabs-card-tab-active-border-top": "2px solid transparent",
        "back-top-color": "#fff",
        "back-top-bg": "@text-color-secondary",
        "back-top-hover-bg": "@text-color",
        "avatar-size-base": "32px",
        "avatar-size-lg": "40px",
        "avatar-size-sm": "24px",
        "avatar-font-size-base": "18px",
        "avatar-font-size-lg": "24px",
        "avatar-font-size-sm": "14px",
        "avatar-bg": "#ccc",
        "avatar-color": "#fff",
        "avatar-border-radius": "@border-radius-base",
        "avatar-group-overlapping": "-8px",
        "avatar-group-space": "3px",
        "avatar-group-border-color": "#fff",
        "switch-height": "22px",
        "switch-sm-height": "16px",
        "switch-min-width": "44px",
        "switch-sm-min-width": "28px",
        "switch-disabled-opacity": "0.4",
        "switch-color": "@primary-color",
        "switch-bg": "@component-background",
        "switch-shadow-color": "fade(#00230b, 20%)",
        "switch-padding": "2px",
        "switch-inner-margin-min": "ceil(@switch-height * 0.3)",
        "switch-inner-margin-max": "ceil(@switch-height * 1.1)",
        "switch-sm-inner-margin-min": "ceil(@switch-sm-height * 0.3)",
        "switch-sm-inner-margin-max": "ceil(@switch-sm-height * 1.1)",
        "pagination-item-bg": "@component-background",
        "pagination-item-size": "@height-base",
        "pagination-item-size-sm": "24px",
        "pagination-font-family": "@font-family",
        "pagination-font-weight-active": "500",
        "pagination-item-bg-active": "@component-background",
        "pagination-item-link-bg": "@component-background",
        "pagination-item-disabled-color-active": "@disabled-color",
        "pagination-item-disabled-bg-active": "@disabled-active-bg",
        "pagination-item-input-bg": "@component-background",
        "pagination-mini-options-size-changer-top": "0px",
        "page-header-padding": "@padding-lg",
        "page-header-padding-vertical": "@padding-md",
        "page-header-padding-breadcrumb": "@padding-sm",
        "page-header-content-padding-vertical": "@padding-sm",
        "page-header-back-color": "#000",
        "page-header-ghost-bg": "inherit",
        "page-header-heading-title": "@heading-4-size",
        "page-header-heading-sub-title": "14px",
        "page-header-tabs-tab-font-size": "16px",
        "breadcrumb-base-color": "@text-color-secondary",
        "breadcrumb-last-item-color": "@text-color",
        "breadcrumb-font-size": "@font-size-base",
        "breadcrumb-icon-font-size": "@font-size-base",
        "breadcrumb-link-color": "@text-color-secondary",
        "breadcrumb-link-color-hover": "@text-color",
        "breadcrumb-separator-color": "@text-color-secondary",
        "breadcrumb-separator-margin": "0 @padding-xs",
        "slider-margin": "10px 6px 10px",
        "slider-rail-background-color": "@background-color-base",
        "slider-rail-background-color-hover": "#e1e1e1",
        "slider-track-background-color": "@primary-3",
        "slider-track-background-color-hover": "@primary-4",
        "slider-handle-border-width": "2px",
        "slider-handle-background-color": "@component-background",
        "slider-handle-color": "@primary-3",
        "slider-handle-color-hover": "@primary-4",
        "slider-handle-color-focus": "tint(@primary-color, 20%)",
        "slider-handle-color-focus-shadow": "fade(@primary-color, 12%)",
        "slider-handle-color-tooltip-open": "@primary-color",
        "slider-handle-size": "14px",
        "slider-handle-margin-top": "-5px",
        "slider-handle-margin-left": "-5px",
        "slider-handle-shadow": "0",
        "slider-dot-border-color": "@border-color-split",
        "slider-dot-border-color-active": "tint(@primary-color, 50%)",
        "slider-disabled-color": "@disabled-color",
        "slider-disabled-background-color": "@component-background",
        "tree-bg": "@component-background",
        "tree-title-height": "24px",
        "tree-child-padding": "18px",
        "tree-directory-selected-color": "#fff",
        "tree-directory-selected-bg": "@primary-color",
        "tree-node-hover-bg": "@item-hover-bg",
        "tree-node-selected-bg": "@primary-2",
        "collapse-header-padding": "@padding-sm @padding-md",
        "collapse-header-padding-extra": "40px",
        "collapse-header-bg": "@background-color-light",
        "collapse-content-padding": "@padding-md",
        "collapse-content-bg": "@component-background",
        "collapse-header-arrow-left": "16px",
        "skeleton-color": "rgba(190, 190, 190, 0.2)",
        "skeleton-to-color": "shade(@skeleton-color, 5%)",
        "skeleton-paragraph-margin-top": "28px",
        "skeleton-paragraph-li-margin-top": "@margin-md",
        "skeleton-paragraph-li-height": "16px",
        "skeleton-title-height": "16px",
        "skeleton-title-paragraph-margin-top": "@margin-lg",
        "transfer-header-height": "40px",
        "transfer-item-height": "@height-base",
        "transfer-disabled-bg": "@disabled-bg",
        "transfer-list-height": "200px",
        "transfer-item-hover-bg": "@item-hover-bg",
        "transfer-item-selected-hover-bg": "darken(@item-active-bg, 2%)",
        "transfer-item-padding-vertical": "6px",
        "transfer-list-search-icon-top": "12px",
        "message-notice-content-padding": "10px 16px",
        "message-notice-content-bg": "@component-background",
        "wave-animation-width": "6px",
        "alert-success-border-color": "#b7eb8f",
        "alert-success-bg-color": "#f6ffed",
        "alert-success-icon-color": "#52c41a",
        "alert-info-border-color": "#91caff",
        "alert-info-bg-color": "#e6f4ff",
        "alert-info-icon-color": "#1677ff",
        "alert-warning-border-color": "#ffe58f",
        "alert-warning-bg-color": "#fffbe6",
        "alert-warning-icon-color": "#faad14",
        "alert-error-border-color": "#ffccc7",
        "alert-error-bg-color": "#fff2f0",
        "alert-error-icon-color": "@error-color",
        "alert-message-color": "@heading-color",
        "alert-text-color": "@text-color",
        "alert-close-color": "@text-color-secondary",
        "alert-close-hover-color": "@icon-color-hover",
        "alert-padding-vertical": "@padding-xs",
        "alert-padding-horizontal": "@padding-md - 1px",
        "alert-no-icon-padding-vertical": "@padding-xs",
        "alert-with-description-no-icon-padding-vertical": "@padding-md - 1px",
        "alert-with-description-padding-vertical": "@padding-md - 1px",
        "alert-with-description-padding": "@alert-with-description-padding-vertical 15px\n  @alert-with-description-no-icon-padding-vertical @alert-with-description-icon-size",
        "alert-icon-top": "8px + @font-size-base * (@line-height-base / 2) - (@font-size-base / 2)",
        "alert-with-description-icon-size": "24px",
        "list-header-background": "transparent",
        "list-footer-background": "transparent",
        "list-empty-text-padding": "@padding-md",
        "list-item-padding": "@padding-sm 0",
        "list-item-padding-sm": "@padding-xs @padding-md",
        "list-item-padding-lg": "16px 24px",
        "list-item-meta-margin-bottom": "@padding-md",
        "list-item-meta-avatar-margin-right": "@padding-md",
        "list-item-meta-title-margin-bottom": "@padding-sm",
        "list-customize-card-bg": "@component-background",
        "list-item-meta-description-font-size": "@font-size-base",
        "statistic-title-font-size": "@font-size-base",
        "statistic-content-font-size": "24px",
        "statistic-unit-font-size": "24px",
        "statistic-font-family": "@font-family",
        "drawer-header-padding": "@padding-md @padding-lg",
        "drawer-body-padding": "@padding-lg",
        "drawer-bg": "@component-background",
        "drawer-footer-padding-vertical": "@modal-footer-padding-vertical",
        "drawer-footer-padding-horizontal": "@modal-footer-padding-horizontal",
        "drawer-header-close-size": "56px",
        "drawer-title-font-size": "@font-size-lg",
        "drawer-title-line-height": "22px",
        "timeline-width": "2px",
        "timeline-color": "@border-color-split",
        "timeline-dot-border-width": "2px",
        "timeline-dot-color": "@primary-color",
        "timeline-dot-bg": "@component-background",
        "timeline-item-padding-bottom": "20px",
        "typography-title-font-weight": "600",
        "typography-title-margin-top": "1.2em",
        "typography-title-margin-bottom": "0.5em",
        "upload-actions-color": "@text-color-secondary",
        "process-tail-color": "@border-color-split",
        "steps-nav-arrow-color": "fade(@black, 25%)",
        "steps-background": "@component-background",
        "steps-icon-size": "32px",
        "steps-icon-custom-size": "@steps-icon-size",
        "steps-icon-custom-top": "0px",
        "steps-icon-custom-font-size": "24px",
        "steps-icon-top": "-0.5px",
        "steps-icon-font-size": "@font-size-lg",
        "steps-icon-margin": "0 8px 0 0",
        "steps-title-line-height": "@height-base",
        "steps-small-icon-size": "24px",
        "steps-small-icon-margin": "0 8px 0 0",
        "steps-dot-size": "8px",
        "steps-dot-top": "2px",
        "steps-current-dot-size": "10px",
        "steps-description-max-width": "140px",
        "steps-nav-content-max-width": "auto",
        "steps-vertical-icon-width": "16px",
        "steps-vertical-tail-width": "16px",
        "steps-vertical-tail-width-sm": "12px",
        "notification-bg": "@component-background",
        "notification-padding-vertical": "16px",
        "notification-padding-horizontal": "24px",
        "result-title-font-size": "24px",
        "result-subtitle-font-size": "@font-size-base",
        "result-icon-font-size": "72px",
        "result-extra-margin": "24px 0 0 0",
        "image-size-base": "48px",
        "image-font-size-base": "24px",
        "image-bg": "#f5f5f5",
        "image-color": "#fff",
        "image-mask-font-size": "16px",
        "image-preview-operation-size": "18px",
        "image-preview-operation-color": "@text-color-dark",
        "image-preview-operation-disabled-color": "fade(@image-preview-operation-color, 25%)",
        "segmented-bg": "fade(@black, 4%)",
        "segmented-hover-bg": "fade(@black, 6%)",
        "segmented-selected-bg": "@white",
        "segmented-label-color": "fade(@black, 65%)",
        "segmented-label-hover-color": "#262626",
        "blue": "#1677ff",
        "purple": "#722ED1",
        "cyan": "#13C2C2",
        "green": "#52C41A",
        "magenta": "#EB2F96",
        "pink": "#eb2f96",
        "red": "#F5222D",
        "orange": "#FA8C16",
        "yellow": "#FADB14",
        "volcano": "#FA541C",
        "geekblue": "#2F54EB",
        "gold": "#FAAD14",
        "lime": "#A0D911",
        "blue-1": "#e6f4ff",
        "blue1": "#e6f4ff",
        "blue-2": "#bae0ff",
        "blue2": "#bae0ff",
        "blue-3": "#91caff",
        "blue3": "#91caff",
        "blue-4": "#69b1ff",
        "blue4": "#69b1ff",
        "blue-5": "#4096ff",
        "blue5": "#4096ff",
        "blue-6": "#1677ff",
        "blue6": "#1677ff",
        "blue-7": "#0958d9",
        "blue7": "#0958d9",
        "blue-8": "#003eb3",
        "blue8": "#003eb3",
        "blue-9": "#002c8c",
        "blue9": "#002c8c",
        "blue-10": "#001d66",
        "blue10": "#001d66",
        "purple-1": "#f9f0ff",
        "purple1": "#f9f0ff",
        "purple-2": "#efdbff",
        "purple2": "#efdbff",
        "purple-3": "#d3adf7",
        "purple3": "#d3adf7",
        "purple-4": "#b37feb",
        "purple4": "#b37feb",
        "purple-5": "#9254de",
        "purple5": "#9254de",
        "purple-6": "#722ed1",
        "purple6": "#722ed1",
        "purple-7": "#531dab",
        "purple7": "#531dab",
        "purple-8": "#391085",
        "purple8": "#391085",
        "purple-9": "#22075e",
        "purple9": "#22075e",
        "purple-10": "#120338",
        "purple10": "#120338",
        "cyan-1": "#e6fffb",
        "cyan1": "#e6fffb",
        "cyan-2": "#b5f5ec",
        "cyan2": "#b5f5ec",
        "cyan-3": "#87e8de",
        "cyan3": "#87e8de",
        "cyan-4": "#5cdbd3",
        "cyan4": "#5cdbd3",
        "cyan-5": "#36cfc9",
        "cyan5": "#36cfc9",
        "cyan-6": "#13c2c2",
        "cyan6": "#13c2c2",
        "cyan-7": "#08979c",
        "cyan7": "#08979c",
        "cyan-8": "#006d75",
        "cyan8": "#006d75",
        "cyan-9": "#00474f",
        "cyan9": "#00474f",
        "cyan-10": "#002329",
        "cyan10": "#002329",
        "green-1": "#f6ffed",
        "green1": "#f6ffed",
        "green-2": "#d9f7be",
        "green2": "#d9f7be",
        "green-3": "#b7eb8f",
        "green3": "#b7eb8f",
        "green-4": "#95de64",
        "green4": "#95de64",
        "green-5": "#73d13d",
        "green5": "#73d13d",
        "green-6": "#52c41a",
        "green6": "#52c41a",
        "green-7": "#389e0d",
        "green7": "#389e0d",
        "green-8": "#237804",
        "green8": "#237804",
        "green-9": "#135200",
        "green9": "#135200",
        "green-10": "#092b00",
        "green10": "#092b00",
        "magenta-1": "#fff0f6",
        "magenta1": "#fff0f6",
        "magenta-2": "#ffd6e7",
        "magenta2": "#ffd6e7",
        "magenta-3": "#ffadd2",
        "magenta3": "#ffadd2",
        "magenta-4": "#ff85c0",
        "magenta4": "#ff85c0",
        "magenta-5": "#f759ab",
        "magenta5": "#f759ab",
        "magenta-6": "#eb2f96",
        "magenta6": "#eb2f96",
        "magenta-7": "#c41d7f",
        "magenta7": "#c41d7f",
        "magenta-8": "#9e1068",
        "magenta8": "#9e1068",
        "magenta-9": "#780650",
        "magenta9": "#780650",
        "magenta-10": "#520339",
        "magenta10": "#520339",
        "pink-1": "#fff0f6",
        "pink1": "#fff0f6",
        "pink-2": "#ffd6e7",
        "pink2": "#ffd6e7",
        "pink-3": "#ffadd2",
        "pink3": "#ffadd2",
        "pink-4": "#ff85c0",
        "pink4": "#ff85c0",
        "pink-5": "#f759ab",
        "pink5": "#f759ab",
        "pink-6": "#eb2f96",
        "pink6": "#eb2f96",
        "pink-7": "#c41d7f",
        "pink7": "#c41d7f",
        "pink-8": "#9e1068",
        "pink8": "#9e1068",
        "pink-9": "#780650",
        "pink9": "#780650",
        "pink-10": "#520339",
        "pink10": "#520339",
        "red-1": "#fff1f0",
        "red1": "#fff1f0",
        "red-2": "#ffccc7",
        "red2": "#ffccc7",
        "red-3": "#ffa39e",
        "red3": "#ffa39e",
        "red-4": "#ff7875",
        "red4": "#ff7875",
        "red-5": "#ff4d4f",
        "red5": "#ff4d4f",
        "red-6": "#f5222d",
        "red6": "#f5222d",
        "red-7": "#cf1322",
        "red7": "#cf1322",
        "red-8": "#a8071a",
        "red8": "#a8071a",
        "red-9": "#820014",
        "red9": "#820014",
        "red-10": "#5c0011",
        "red10": "#5c0011",
        "orange-1": "#fff7e6",
        "orange1": "#fff7e6",
        "orange-2": "#ffe7ba",
        "orange2": "#ffe7ba",
        "orange-3": "#ffd591",
        "orange3": "#ffd591",
        "orange-4": "#ffc069",
        "orange4": "#ffc069",
        "orange-5": "#ffa940",
        "orange5": "#ffa940",
        "orange-6": "#fa8c16",
        "orange6": "#fa8c16",
        "orange-7": "#d46b08",
        "orange7": "#d46b08",
        "orange-8": "#ad4e00",
        "orange8": "#ad4e00",
        "orange-9": "#873800",
        "orange9": "#873800",
        "orange-10": "#612500",
        "orange10": "#612500",
        "yellow-1": "#feffe6",
        "yellow1": "#feffe6",
        "yellow-2": "#ffffb8",
        "yellow2": "#ffffb8",
        "yellow-3": "#fffb8f",
        "yellow3": "#fffb8f",
        "yellow-4": "#fff566",
        "yellow4": "#fff566",
        "yellow-5": "#ffec3d",
        "yellow5": "#ffec3d",
        "yellow-6": "#fadb14",
        "yellow6": "#fadb14",
        "yellow-7": "#d4b106",
        "yellow7": "#d4b106",
        "yellow-8": "#ad8b00",
        "yellow8": "#ad8b00",
        "yellow-9": "#876800",
        "yellow9": "#876800",
        "yellow-10": "#614700",
        "yellow10": "#614700",
        "volcano-1": "#fff2e8",
        "volcano1": "#fff2e8",
        "volcano-2": "#ffd8bf",
        "volcano2": "#ffd8bf",
        "volcano-3": "#ffbb96",
        "volcano3": "#ffbb96",
        "volcano-4": "#ff9c6e",
        "volcano4": "#ff9c6e",
        "volcano-5": "#ff7a45",
        "volcano5": "#ff7a45",
        "volcano-6": "#fa541c",
        "volcano6": "#fa541c",
        "volcano-7": "#d4380d",
        "volcano7": "#d4380d",
        "volcano-8": "#ad2102",
        "volcano8": "#ad2102",
        "volcano-9": "#871400",
        "volcano9": "#871400",
        "volcano-10": "#610b00",
        "volcano10": "#610b00",
        "geekblue-1": "#f0f5ff",
        "geekblue1": "#f0f5ff",
        "geekblue-2": "#d6e4ff",
        "geekblue2": "#d6e4ff",
        "geekblue-3": "#adc6ff",
        "geekblue3": "#adc6ff",
        "geekblue-4": "#85a5ff",
        "geekblue4": "#85a5ff",
        "geekblue-5": "#597ef7",
        "geekblue5": "#597ef7",
        "geekblue-6": "#2f54eb",
        "geekblue6": "#2f54eb",
        "geekblue-7": "#1d39c4",
        "geekblue7": "#1d39c4",
        "geekblue-8": "#10239e",
        "geekblue8": "#10239e",
        "geekblue-9": "#061178",
        "geekblue9": "#061178",
        "geekblue-10": "#030852",
        "geekblue10": "#030852",
        "gold-1": "#fffbe6",
        "gold1": "#fffbe6",
        "gold-2": "#fff1b8",
        "gold2": "#fff1b8",
        "gold-3": "#ffe58f",
        "gold3": "#ffe58f",
        "gold-4": "#ffd666",
        "gold4": "#ffd666",
        "gold-5": "#ffc53d",
        "gold5": "#ffc53d",
        "gold-6": "#faad14",
        "gold6": "#faad14",
        "gold-7": "#d48806",
        "gold7": "#d48806",
        "gold-8": "#ad6800",
        "gold8": "#ad6800",
        "gold-9": "#874d00",
        "gold9": "#874d00",
        "gold-10": "#613400",
        "gold10": "#613400",
        "lime-1": "#fcffe6",
        "lime1": "#fcffe6",
        "lime-2": "#f4ffb8",
        "lime2": "#f4ffb8",
        "lime-3": "#eaff8f",
        "lime3": "#eaff8f",
        "lime-4": "#d3f261",
        "lime4": "#d3f261",
        "lime-5": "#bae637",
        "lime5": "#bae637",
        "lime-6": "#a0d911",
        "lime6": "#a0d911",
        "lime-7": "#7cb305",
        "lime7": "#7cb305",
        "lime-8": "#5b8c00",
        "lime8": "#5b8c00",
        "lime-9": "#3f6600",
        "lime9": "#3f6600",
        "lime-10": "#254000",
        "lime10": "#254000"
      }
    },
    "favicons": [
      "/favicon.png"
    ],
    "locale": {
      "default": "zh-CN",
      "baseNavigator": true
    },
    "manifest": {
      "basePath": "/"
    },
    "routes": [
      {
        "path": "/user",
        "component": "../layouts/UserLayout",
        "layout": false,
        "routes": [
          {
            "name": "login",
            "path": "/user/login",
            "component": "./user/Login"
          },
          {
            "component": "./404"
          }
        ]
      },
      {
        "path": "/",
        "component": "../layouts/GlobalLayout",
        "menu": {
          "flatMenu": true
        },
        "routes": [
          {
            "path": "/",
            "redirect": "/welcome"
          },
          {
            "path": "/welcome",
            "name": "welcome",
            "icon": "dashboard",
            "component": "./Welcome"
          },
          {
            "path": "/projects",
            "name": "project-v3",
            "icon": "project",
            "authority": [
              "pm"
            ],
            "component": "./project/ProjectList"
          },
          {
            "path": "/project-access",
            "hideInMenu": true,
            "component": "./project/ProjectAccessConfig",
            "authority": [
              "pm"
            ]
          },
          {
            "path": "/file-center",
            "icon": "file",
            "name": "file",
            "component": "./file/FileCenter",
            "authority": [
              "pm",
              "superadmin"
            ]
          },
          {
            "path": "/bpo-list",
            "name": "vm",
            "icon": "apartment",
            "authority": [
              "pm",
              "superadmin"
            ],
            "component": "./bpo/superadmin/BPOList"
          },
          {
            "path": "/bpo/:bpoId/workforce",
            "name": "vm",
            "hideInMenu": true,
            "icon": "apartment",
            "authority": [
              "pm",
              "superadmin"
            ],
            "component": "./bpo/bpopm/BpoWorkerList"
          },
          {
            "path": "/bpo-jobs",
            "name": "bpo-jobs-v3",
            "icon": "folder",
            "component": "./bpo/bpo-job/JobList",
            "authority": [
              "bpopm"
            ]
          },
          {
            "path": "/bpo-job/:jobId",
            "hideInMenu": true,
            "name": "job-detail",
            "component": "./bpo/bpo-job/JobDetail",
            "authority": [
              "bpopm"
            ],
            "routes": [
              {
                "path": "/bpo-job/:jobId",
                "redirect": "/bpo-job/:jobId/overview"
              },
              {
                "path": "/bpo-job/:jobId/overview",
                "name": "overview",
                "component": "./bpo/bpo-job/job-detail/Overview"
              },
              {
                "path": "/bpo-job/:jobId/data",
                "name": "data",
                "component": "./bpo/bpo-job/job-detail/DataCenter"
              },
              {
                "path": "/bpo-job/:jobId/monitor",
                "name": "monitor",
                "component": "./bpo/bpo-job/job-detail/MonitorV3"
              },
              {
                "path": "/bpo-job/:jobId/workforce",
                "name": "workforce",
                "component": "./bpo/bpo-job/job-detail/Workforce"
              }
            ]
          },
          {
            "path": "/projects/:projectId",
            "name": "project-detail",
            "hideInMenu": true,
            "authority": [
              "pm"
            ],
            "component": "./project/ProjectDetail",
            "routes": [
              {
                "path": "/projects/:projectId/template-center",
                "name": "template",
                "component": "./project/template-center/TemplateCenter"
              },
              {
                "path": "/projects/:projectId/template-center/edit",
                "name": "template",
                "component": "./project/template-center/TemplateCreation"
              },
              {
                "path": "/projects/:projectId/data-center",
                "name": "data-center",
                "component": "./project/data-center/ProjectDataCenter"
              },
              {
                "path": "/projects/:projectId/workflow",
                "name": "workflow",
                "component": "./project/workflow/WorkflowList"
              },
              {
                "path": "/projects/:projectId/:recordId/record-detail",
                "name": "data-center",
                "component": "./project/data-center/RecordDetail"
              }
            ]
          },
          {
            "path": "/workflows/:workflowId",
            "name": "project-detail",
            "hideInMenu": true,
            "authority": [
              "pm"
            ],
            "routes": [
              {
                "path": "/workflows/:workflowId/detail",
                "name": "workflow",
                "hideInMenu": true,
                "component": "./project/workflow/WorkflowDetail"
              },
              {
                "path": "/workflows/:workflowId/jobs/workload",
                "name": "workload",
                "hideInMenu": true,
                "component": "./project/workflow/WorkflowDetail/Workload"
              }
            ]
          },
          {
            "path": "/worker-jobs",
            "icon": "folder",
            "name": "tasks-v3",
            "authority": [
              "worker",
              "bpoworker"
            ],
            "routes": [
              {
                "path": "/worker-jobs",
                "redirect": "/worker-jobs/tasks"
              },
              {
                "path": "/worker-jobs/tasks",
                "component": "./worker-job/WorkerJobs",
                "routes": [
                  {
                    "path": "/worker-jobs/tasks",
                    "redirect": "/worker-jobs/tasks/in-progress"
                  },
                  {
                    "path": "/worker-jobs/tasks/pending",
                    "component": "./worker-job/JobAcceptList",
                    "hideInMenu": true
                  },
                  {
                    "path": "/worker-jobs/tasks/in-progress",
                    "component": "./worker-job/JobTodoList",
                    "hideInMenu": true
                  },
                  {
                    "path": "/worker-jobs/tasks/history",
                    "component": "./worker-job/JobHistoryList",
                    "hideInMenu": true
                  }
                ]
              },
              {
                "name": "history",
                "path": "/worker-jobs/:jobId/annotation-result-list",
                "component": "./worker-job/AnnotationResultList",
                "hideInMenu": true,
                "authority": [
                  "worker",
                  "bpoworker"
                ]
              }
            ]
          },
          {
            "name": "workerJobDetail",
            "path": "/worker-job/:jobId",
            "hideInMenu": true,
            "component": "./worker-job/WorkerJobDetail",
            "authority": [
              "worker",
              "bpoworker"
            ]
          },
          {
            "name": "workforce",
            "icon": "team",
            "path": "/workforce",
            "component": "./workforce/WorkforceManagement",
            "authority": [
              "pm",
              "superadmin"
            ]
          },
          {
            "name": "workforce",
            "icon": "team",
            "path": "/bpo-workforce",
            "component": "./bpo/bpopm/BpoWorkerList",
            "authority": [
              "bpopm"
            ]
          }
        ]
      }
    ],
    "proxy": {
      "/api/": {
        "target": "http://localhost:3000/",
        "changeOrigin": true,
        "cookieDomainRewrite": {
          "*": ""
        }
      },
      "/ssr/": {
        "target": "http://localhost:3000/",
        "changeOrigin": true
      },
      "/public/": {
        "target": "http://localhost:3000/",
        "changeOrigin": true
      },
      "/api-gw/": {
        "target": "http://47.92.246.39:81/",
        "changeOrigin": true,
        "secure": false,
        "cookieDomainRewrite": {
          "*": ""
        }
      },
      "/pointcloud-api/": {
        "target": "http://example.com/",
        "changeOrigin": true
      }
    },
    "esbuildMinifyIIFE": true,
    "targets": {
      "chrome": 80
    },
    "theme": {
      "blue-base": "#1890ff",
      "blue-1": "#e6f7ff",
      "blue-2": "#bae7ff",
      "blue-3": "#91d5ff",
      "blue-4": "#69c0ff",
      "blue-5": "#40a9ff",
      "blue-6": "#1890ff",
      "blue-7": "#096dd9",
      "blue-8": "#0050b3",
      "blue-9": "#003a8c",
      "blue-10": "#002766",
      "purple-base": "#722ed1",
      "purple-1": "#f9f0ff",
      "purple-2": "#efdbff",
      "purple-3": "#d3adf7",
      "purple-4": "#b37feb",
      "purple-5": "#9254de",
      "purple-6": "#722ed1",
      "purple-7": "#531dab",
      "purple-8": "#391085",
      "purple-9": "#22075e",
      "purple-10": "#120338",
      "cyan-base": "#13c2c2",
      "cyan-1": "#e6fffb",
      "cyan-2": "#b5f5ec",
      "cyan-3": "#87e8de",
      "cyan-4": "#5cdbd3",
      "cyan-5": "#36cfc9",
      "cyan-6": "#13c2c2",
      "cyan-7": "#08979c",
      "cyan-8": "#006d75",
      "cyan-9": "#00474f",
      "cyan-10": "#002329",
      "green-base": "#52c41a",
      "green-1": "#f6ffed",
      "green-2": "#d9f7be",
      "green-3": "#b7eb8f",
      "green-4": "#95de64",
      "green-5": "#73d13d",
      "green-6": "#52c41a",
      "green-7": "#389e0d",
      "green-8": "#237804",
      "green-9": "#135200",
      "green-10": "#092b00",
      "magenta-base": "#eb2f96",
      "magenta-1": "#fff0f6",
      "magenta-2": "#ffd6e7",
      "magenta-3": "#ffadd2",
      "magenta-4": "#ff85c0",
      "magenta-5": "#f759ab",
      "magenta-6": "#eb2f96",
      "magenta-7": "#c41d7f",
      "magenta-8": "#9e1068",
      "magenta-9": "#780650",
      "magenta-10": "#520339",
      "pink-base": "#eb2f96",
      "pink-1": "#fff0f6",
      "pink-2": "#ffd6e7",
      "pink-3": "#ffadd2",
      "pink-4": "#ff85c0",
      "pink-5": "#f759ab",
      "pink-6": "#eb2f96",
      "pink-7": "#c41d7f",
      "pink-8": "#9e1068",
      "pink-9": "#780650",
      "pink-10": "#520339",
      "red-base": "#f5222d",
      "red-1": "#fff1f0",
      "red-2": "#ffccc7",
      "red-3": "#ffa39e",
      "red-4": "#ff7875",
      "red-5": "#ff4d4f",
      "red-6": "#f5222d",
      "red-7": "#cf1322",
      "red-8": "#a8071a",
      "red-9": "#820014",
      "red-10": "#5c0011",
      "orange-base": "#fa8c16",
      "orange-1": "#fff7e6",
      "orange-2": "#ffe7ba",
      "orange-3": "#ffd591",
      "orange-4": "#ffc069",
      "orange-5": "#ffa940",
      "orange-6": "#fa8c16",
      "orange-7": "#d46b08",
      "orange-8": "#ad4e00",
      "orange-9": "#873800",
      "orange-10": "#612500",
      "yellow-base": "#fadb14",
      "yellow-1": "#feffe6",
      "yellow-2": "#ffffb8",
      "yellow-3": "#fffb8f",
      "yellow-4": "#fff566",
      "yellow-5": "#ffec3d",
      "yellow-6": "#fadb14",
      "yellow-7": "#d4b106",
      "yellow-8": "#ad8b00",
      "yellow-9": "#876800",
      "yellow-10": "#614700",
      "volcano-base": "#fa541c",
      "volcano-1": "#fff2e8",
      "volcano-2": "#ffd8bf",
      "volcano-3": "#ffbb96",
      "volcano-4": "#ff9c6e",
      "volcano-5": "#ff7a45",
      "volcano-6": "#fa541c",
      "volcano-7": "#d4380d",
      "volcano-8": "#ad2102",
      "volcano-9": "#871400",
      "volcano-10": "#610b00",
      "geekblue-base": "#2f54eb",
      "geekblue-1": "#f0f5ff",
      "geekblue-2": "#d6e4ff",
      "geekblue-3": "#adc6ff",
      "geekblue-4": "#85a5ff",
      "geekblue-5": "#597ef7",
      "geekblue-6": "#2f54eb",
      "geekblue-7": "#1d39c4",
      "geekblue-8": "#10239e",
      "geekblue-9": "#061178",
      "geekblue-10": "#030852",
      "lime-base": "#a0d911",
      "lime-1": "#fcffe6",
      "lime-2": "#f4ffb8",
      "lime-3": "#eaff8f",
      "lime-4": "#d3f261",
      "lime-5": "#bae637",
      "lime-6": "#a0d911",
      "lime-7": "#7cb305",
      "lime-8": "#5b8c00",
      "lime-9": "#3f6600",
      "lime-10": "#254000",
      "gold-base": "#faad14",
      "gold-1": "#fffbe6",
      "gold-2": "#fff1b8",
      "gold-3": "#ffe58f",
      "gold-4": "#ffd666",
      "gold-5": "#ffc53d",
      "gold-6": "#faad14",
      "gold-7": "#d48806",
      "gold-8": "#ad6800",
      "gold-9": "#874d00",
      "gold-10": "#613400",
      "preset-colors": "pink, magenta, red, volcano, orange, yellow, gold, cyan, lime, green, blue, geekblue,",
      "theme": "default",
      "ant-prefix": "ant",
      "html-selector": "html",
      "primary-color": "#1890ff",
      "primary-color-hover": "#40a9ff",
      "primary-color-active": "#096dd9",
      "primary-color-outline": "rgba(24, 144, 255, 0.2)",
      "processing-color": "#1890ff",
      "info-color": "#1890ff",
      "info-color-deprecated-bg": "#e6f7ff",
      "info-color-deprecated-border": "#91d5ff",
      "success-color": "#52c41a",
      "success-color-hover": "#73d13d",
      "success-color-active": "#389e0d",
      "success-color-outline": "rgba(82, 196, 26, 0.2)",
      "success-color-deprecated-bg": "#f6ffed",
      "success-color-deprecated-border": "#b7eb8f",
      "warning-color": "#faad14",
      "warning-color-hover": "#ffc53d",
      "warning-color-active": "#d48806",
      "warning-color-outline": "rgba(250, 173, 20, 0.2)",
      "warning-color-deprecated-bg": "#fffbe6",
      "warning-color-deprecated-border": "#ffe58f",
      "error-color": "#ff4d4f",
      "error-color-hover": "#ff7875",
      "error-color-active": "#d9363e",
      "error-color-outline": "rgba(255, 77, 79, 0.2)",
      "error-color-deprecated-bg": "#fff2f0",
      "error-color-deprecated-border": "#ffccc7",
      "highlight-color": "#ff4d4f",
      "normal-color": "#d9d9d9",
      "white": "#fff",
      "black": "#000",
      "primary-1": "#e6f7ff",
      "primary-2": "#bae7ff",
      "primary-3": "#91d5ff",
      "primary-4": "#69c0ff",
      "primary-5": "#40a9ff",
      "primary-6": "#1890ff",
      "primary-7": "#096dd9",
      "primary-8": "#0050b3",
      "primary-9": "#003a8c",
      "primary-10": "#002766",
      "component-background": "#fff",
      "popover-background": "#fff",
      "popover-customize-border-color": "#f0f0f0",
      "font-family": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "code-family": "'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",
      "text-color": "rgba(0, 0, 0, 0.85)",
      "text-color-secondary": "rgba(0, 0, 0, 0.45)",
      "text-color-inverse": "#fff",
      "icon-color": "inherit",
      "icon-color-hover": "rgba(0, 0, 0, 0.75)",
      "heading-color": "rgba(0, 0, 0, 0.85)",
      "text-color-dark": "rgba(255, 255, 255, 0.85)",
      "text-color-secondary-dark": "rgba(255, 255, 255, 0.65)",
      "text-selection-bg": "#1890ff",
      "font-variant-base": "tabular-nums",
      "font-feature-settings-base": "tnum",
      "font-size-base": "14px",
      "font-size-lg": "16px",
      "font-size-sm": "12px",
      "heading-1-size": "38px",
      "heading-2-size": "30px",
      "heading-3-size": "24px",
      "heading-4-size": "20px",
      "heading-5-size": "16px",
      "line-height-base": "1.5715",
      "border-radius-base": "2px",
      "border-radius-sm": "2px",
      "control-border-radius": "2px",
      "arrow-border-radius": "2px",
      "padding-lg": "24px",
      "padding-md": "16px",
      "padding-sm": "12px",
      "padding-xs": "8px",
      "padding-xss": "4px",
      "control-padding-horizontal": "12px",
      "control-padding-horizontal-sm": "8px",
      "margin-lg": "24px",
      "margin-md": "16px",
      "margin-sm": "12px",
      "margin-xs": "8px",
      "margin-xss": "4px",
      "height-base": "32px",
      "height-lg": "40px",
      "height-sm": "24px",
      "item-active-bg": "#e6f7ff",
      "item-hover-bg": "#f5f5f5",
      "iconfont-css-prefix": "anticon",
      "link-color": "#1890ff",
      "link-hover-color": "#40a9ff",
      "link-active-color": "#096dd9",
      "link-decoration": "none",
      "link-hover-decoration": "none",
      "link-focus-decoration": "none",
      "link-focus-outline": "0",
      "ease-base-out": "cubic-bezier(0.7, 0.3, 0.1, 1)",
      "ease-base-in": "cubic-bezier(0.9, 0, 0.3, 0.7)",
      "ease-out": "cubic-bezier(0.215, 0.61, 0.355, 1)",
      "ease-in": "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
      "ease-in-out": "cubic-bezier(0.645, 0.045, 0.355, 1)",
      "ease-out-back": "cubic-bezier(0.12, 0.4, 0.29, 1.46)",
      "ease-in-back": "cubic-bezier(0.71, -0.46, 0.88, 0.6)",
      "ease-in-out-back": "cubic-bezier(0.71, -0.46, 0.29, 1.46)",
      "ease-out-circ": "cubic-bezier(0.08, 0.82, 0.17, 1)",
      "ease-in-circ": "cubic-bezier(0.6, 0.04, 0.98, 0.34)",
      "ease-in-out-circ": "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
      "ease-out-quint": "cubic-bezier(0.23, 1, 0.32, 1)",
      "ease-in-quint": "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
      "ease-in-out-quint": "cubic-bezier(0.86, 0, 0.07, 1)",
      "border-color-base": "#d9d9d9",
      "border-color-split": "#f0f0f0",
      "border-color-inverse": "#fff",
      "border-width-base": "1px",
      "border-style-base": "solid",
      "outline-blur-size": "0",
      "outline-width": "2px",
      "outline-color": "#1890ff",
      "outline-fade": "20%",
      "background-color-light": "#fafafa",
      "background-color-base": "#f5f5f5",
      "disabled-color": "rgba(0, 0, 0, 0.25)",
      "disabled-bg": "#f5f5f5",
      "disabled-active-bg": "#e6e6e6",
      "disabled-color-dark": "rgba(255, 255, 255, 0.35)",
      "shadow-color": "rgba(0, 0, 0, 0.15)",
      "shadow-color-inverse": "#fff",
      "box-shadow-base": "0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05)",
      "shadow-1-up": "0 -6px 16px -8px rgba(0, 0, 0, 0.08), 0 -9px 28px 0 rgba(0, 0, 0, 0.05), 0 -12px 48px 16px rgba(0, 0, 0, 0.03)",
      "shadow-1-down": "0 6px 16px -8px rgba(0, 0, 0, 0.08), 0 9px 28px 0 rgba(0, 0, 0, 0.05), 0 12px 48px 16px rgba(0, 0, 0, 0.03)",
      "shadow-1-left": "-6px 0 16px -8px rgba(0, 0, 0, 0.08), -9px 0 28px 0 rgba(0, 0, 0, 0.05), -12px 0 48px 16px rgba(0, 0, 0, 0.03)",
      "shadow-1-right": "6px 0 16px -8px rgba(0, 0, 0, 0.08), 9px 0 28px 0 rgba(0, 0, 0, 0.05), 12px 0 48px 16px rgba(0, 0, 0, 0.03)",
      "shadow-2": "0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05)",
      "btn-font-weight": "400",
      "btn-border-radius-base": "2px",
      "btn-border-radius-sm": "2px",
      "btn-border-width": "1px",
      "btn-border-style": "solid",
      "btn-shadow": "0 2px 0 rgba(0, 0, 0, 0.015)",
      "btn-primary-shadow": "0 2px 0 rgba(0, 0, 0, 0.045)",
      "btn-text-shadow": "0 -1px 0 rgba(0, 0, 0, 0.12)",
      "btn-primary-color": "#fff",
      "btn-primary-bg": "#1890ff",
      "btn-default-color": "rgba(0, 0, 0, 0.85)",
      "btn-default-bg": "#fff",
      "btn-default-border": "#d9d9d9",
      "btn-danger-color": "#fff",
      "btn-danger-bg": "#ff4d4f",
      "btn-danger-border": "#ff4d4f",
      "btn-disable-color": "rgba(0, 0, 0, 0.25)",
      "btn-disable-bg": "#f5f5f5",
      "btn-disable-border": "#d9d9d9",
      "btn-default-ghost-color": "#fff",
      "btn-default-ghost-bg": "transparent",
      "btn-default-ghost-border": "#fff",
      "btn-font-size-lg": "16px",
      "btn-font-size-sm": "14px",
      "btn-padding-horizontal-base": "15px",
      "btn-padding-horizontal-lg": "15px",
      "btn-padding-horizontal-sm": "7px",
      "btn-height-base": "32px",
      "btn-height-lg": "40px",
      "btn-height-sm": "24px",
      "btn-line-height": "1.5715",
      "btn-circle-size": "32px",
      "btn-circle-size-lg": "40px",
      "btn-circle-size-sm": "24px",
      "btn-square-size": "32px",
      "btn-square-size-lg": "40px",
      "btn-square-size-sm": "24px",
      "btn-square-only-icon-size": "16px",
      "btn-square-only-icon-size-sm": "14px",
      "btn-square-only-icon-size-lg": "18px",
      "btn-group-border": "#40a9ff",
      "btn-link-hover-bg": "transparent",
      "btn-text-hover-bg": "rgba(0, 0, 0, 0.018)",
      "checkbox-size": "16px",
      "checkbox-color": "#1890ff",
      "checkbox-check-color": "#fff",
      "checkbox-check-bg": "#fff",
      "checkbox-border-width": "1px",
      "checkbox-border-radius": "2px",
      "checkbox-group-item-margin-right": "8px",
      "descriptions-bg": "#fafafa",
      "descriptions-title-margin-bottom": "20px",
      "descriptions-default-padding": "16px 24px",
      "descriptions-middle-padding": "12px 24px",
      "descriptions-small-padding": "8px 16px",
      "descriptions-item-padding-bottom": "16px",
      "descriptions-item-trailing-colon": "true",
      "descriptions-item-label-colon-margin-right": "8px",
      "descriptions-item-label-colon-margin-left": "2px",
      "descriptions-extra-color": "rgba(0, 0, 0, 0.85)",
      "divider-text-padding": "1em",
      "divider-orientation-margin": "5%",
      "divider-color": "rgba(0, 0, 0, 0.06)",
      "divider-vertical-gutter": "8px",
      "dropdown-selected-color": "#1890ff",
      "dropdown-menu-submenu-disabled-bg": "#fff",
      "dropdown-selected-bg": "#e6f7ff",
      "empty-font-size": "14px",
      "radio-size": "16px",
      "radio-top": "0.2em",
      "radio-border-width": "1px",
      "radio-dot-size": "8px",
      "radio-dot-color": "#1890ff",
      "radio-dot-disabled-color": "rgba(0, 0, 0, 0.2)",
      "radio-solid-checked-color": "#fff",
      "radio-button-bg": "#fff",
      "radio-button-checked-bg": "#fff",
      "radio-button-color": "rgba(0, 0, 0, 0.85)",
      "radio-button-hover-color": "#40a9ff",
      "radio-button-active-color": "#096dd9",
      "radio-button-padding-horizontal": "15px",
      "radio-disabled-button-checked-bg": "#e6e6e6",
      "radio-disabled-button-checked-color": "rgba(0, 0, 0, 0.25)",
      "radio-wrapper-margin-right": "8px",
      "screen-xs": "480px",
      "screen-xs-min": "480px",
      "screen-sm": "576px",
      "screen-sm-min": "576px",
      "screen-md": "768px",
      "screen-md-min": "768px",
      "screen-lg": "992px",
      "screen-lg-min": "992px",
      "screen-xl": "1200px",
      "screen-xl-min": "1200px",
      "screen-xxl": "1600px",
      "screen-xxl-min": "1600px",
      "screen-xs-max": "575px",
      "screen-sm-max": "767px",
      "screen-md-max": "991px",
      "screen-lg-max": "1199px",
      "screen-xl-max": "1599px",
      "grid-columns": "24",
      "layout-header-background": "#001529",
      "layout-header-height": "64px",
      "layout-header-padding": "0 50px",
      "layout-header-color": "rgba(0, 0, 0, 0.85)",
      "layout-footer-padding": "24px 50px",
      "layout-footer-background": "#f0f2f5",
      "layout-sider-background": "#001529",
      "layout-trigger-height": "48px",
      "layout-trigger-background": "#002140",
      "layout-trigger-color": "#fff",
      "layout-zero-trigger-width": "36px",
      "layout-zero-trigger-height": "42px",
      "layout-sider-background-light": "#fff",
      "layout-trigger-background-light": "#fff",
      "layout-trigger-color-light": "rgba(0, 0, 0, 0.85)",
      "zindex-badge": "auto",
      "zindex-table-fixed": "2",
      "zindex-affix": "10",
      "zindex-back-top": "10",
      "zindex-picker-panel": "10",
      "zindex-popup-close": "10",
      "zindex-modal": "1000",
      "zindex-modal-mask": "1000",
      "zindex-message": "1010",
      "zindex-notification": "1010",
      "zindex-popover": "1030",
      "zindex-dropdown": "1050",
      "zindex-picker": "1050",
      "zindex-popoconfirm": "1060",
      "zindex-tooltip": "1070",
      "zindex-image": "1080",
      "animation-duration-slow": "0.3s",
      "animation-duration-base": "0.2s",
      "animation-duration-fast": "0.1s",
      "collapse-panel-border-radius": "2px",
      "dropdown-menu-bg": "#fff",
      "dropdown-vertical-padding": "5px",
      "dropdown-edge-child-vertical-padding": "4px",
      "dropdown-font-size": "14px",
      "dropdown-line-height": "22px",
      "label-required-color": "#ff4d4f",
      "label-color": "rgba(0, 0, 0, 0.85)",
      "form-warning-input-bg": "#fff",
      "form-item-margin-bottom": "24px",
      "form-item-trailing-colon": "true",
      "form-vertical-label-padding": "0 0 8px",
      "form-vertical-label-margin": "0",
      "form-item-label-font-size": "14px",
      "form-item-label-height": "32px",
      "form-item-label-colon-margin-right": "8px",
      "form-item-label-colon-margin-left": "2px",
      "form-error-input-bg": "#fff",
      "input-height-base": "32px",
      "input-height-lg": "40px",
      "input-height-sm": "24px",
      "input-padding-horizontal": "11px",
      "input-padding-horizontal-base": "11px",
      "input-padding-horizontal-sm": "7px",
      "input-padding-horizontal-lg": "11px",
      "input-padding-vertical-base": "4px",
      "input-padding-vertical-sm": "0px",
      "input-padding-vertical-lg": "6.5px",
      "input-placeholder-color": "#bfbfbf",
      "input-color": "rgba(0, 0, 0, 0.85)",
      "input-icon-color": "rgba(0, 0, 0, 0.85)",
      "input-border-color": "#d9d9d9",
      "input-bg": "#fff",
      "input-number-hover-border-color": "#40a9ff",
      "input-number-handler-active-bg": "#f4f4f4",
      "input-number-handler-hover-bg": "#40a9ff",
      "input-number-handler-bg": "#fff",
      "input-number-handler-border-color": "#d9d9d9",
      "input-addon-bg": "#fafafa",
      "input-hover-border-color": "#40a9ff",
      "input-disabled-bg": "#f5f5f5",
      "input-outline-offset": "0 0",
      "input-icon-hover-color": "rgba(0, 0, 0, 0.85)",
      "input-disabled-color": "rgba(0, 0, 0, 0.25)",
      "mentions-dropdown-bg": "#fff",
      "mentions-dropdown-menu-item-hover-bg": "#fff",
      "select-border-color": "#d9d9d9",
      "select-item-selected-color": "rgba(0, 0, 0, 0.85)",
      "select-item-selected-font-weight": "600",
      "select-dropdown-bg": "#fff",
      "select-item-selected-bg": "#e6f7ff",
      "select-item-active-bg": "#f5f5f5",
      "select-dropdown-vertical-padding": "5px",
      "select-dropdown-font-size": "14px",
      "select-dropdown-line-height": "22px",
      "select-dropdown-height": "32px",
      "select-background": "#fff",
      "select-clear-background": "#fff",
      "select-selection-item-bg": "#f5f5f5",
      "select-selection-item-border-color": "#f0f0f0",
      "select-single-item-height-lg": "40px",
      "select-multiple-item-height": "24px",
      "select-multiple-item-height-lg": "32px",
      "select-multiple-item-spacing-half": "2px",
      "select-multiple-disabled-background": "#f5f5f5",
      "select-multiple-item-disabled-color": "#bfbfbf",
      "select-multiple-item-disabled-border-color": "#d9d9d9",
      "cascader-bg": "#fff",
      "cascader-item-selected-bg": "#e6f7ff",
      "cascader-menu-bg": "#fff",
      "cascader-menu-border-color-split": "#f0f0f0",
      "cascader-dropdown-vertical-padding": "5px",
      "cascader-dropdown-edge-child-vertical-padding": "4px",
      "cascader-dropdown-font-size": "14px",
      "cascader-dropdown-line-height": "22px",
      "anchor-bg": "transparent",
      "anchor-border-color": "#f0f0f0",
      "anchor-link-top": "4px",
      "anchor-link-left": "16px",
      "anchor-link-padding": "4px 0 4px 16px",
      "tooltip-max-width": "250px",
      "tooltip-color": "#fff",
      "tooltip-bg": "rgba(0, 0, 0, 0.75)",
      "tooltip-arrow-width": "11.3137085px",
      "tooltip-distance": "14.3137085px",
      "tooltip-arrow-color": "rgba(0, 0, 0, 0.75)",
      "tooltip-border-radius": "2px",
      "popover-bg": "#fff",
      "popover-color": "rgba(0, 0, 0, 0.85)",
      "popover-min-width": "177px",
      "popover-min-height": "32px",
      "popover-arrow-width": "11.3137085px",
      "popover-arrow-color": "#fff",
      "popover-arrow-outer-color": "#fff",
      "popover-distance": "15.3137085px",
      "popover-padding-horizontal": "16px",
      "modal-header-padding-vertical": "16px",
      "modal-header-padding-horizontal": "24px",
      "modal-header-bg": "#fff",
      "modal-header-padding": "16px 24px",
      "modal-header-border-width": "1px",
      "modal-header-border-style": "solid",
      "modal-header-title-line-height": "22px",
      "modal-header-title-font-size": "16px",
      "modal-header-border-color-split": "#f0f0f0",
      "modal-header-close-size": "54px",
      "modal-content-bg": "#fff",
      "modal-heading-color": "rgba(0, 0, 0, 0.85)",
      "modal-close-color": "rgba(0, 0, 0, 0.45)",
      "modal-footer-bg": "transparent",
      "modal-footer-border-color-split": "#f0f0f0",
      "modal-footer-border-style": "solid",
      "modal-footer-padding-vertical": "10px",
      "modal-footer-padding-horizontal": "16px",
      "modal-footer-border-width": "1px",
      "modal-mask-bg": "rgba(0, 0, 0, 0.45)",
      "modal-confirm-title-font-size": "16px",
      "modal-border-radius": "2px",
      "progress-default-color": "#1890ff",
      "progress-remaining-color": "#f5f5f5",
      "progress-info-text-color": "rgba(0, 0, 0, 0.85)",
      "progress-radius": "100px",
      "progress-steps-item-bg": "#f3f3f3",
      "progress-text-font-size": "1em",
      "progress-text-color": "rgba(0, 0, 0, 0.85)",
      "progress-circle-text-font-size": "1em",
      "menu-inline-toplevel-item-height": "40px",
      "menu-item-height": "40px",
      "menu-item-group-height": "1.5715",
      "menu-collapsed-width": "80px",
      "menu-bg": "#fff",
      "menu-popup-bg": "#fff",
      "menu-item-color": "rgba(0, 0, 0, 0.85)",
      "menu-inline-submenu-bg": "#fafafa",
      "menu-highlight-color": "#1890ff",
      "menu-highlight-danger-color": "#ff4d4f",
      "menu-item-active-bg": "#e6f7ff",
      "menu-item-active-danger-bg": "#fff1f0",
      "menu-item-active-border-width": "3px",
      "menu-item-group-title-color": "rgba(0, 0, 0, 0.45)",
      "menu-item-vertical-margin": "4px",
      "menu-item-font-size": "14px",
      "menu-item-boundary-margin": "8px",
      "menu-item-padding-horizontal": "20px",
      "menu-item-padding": "0 20px",
      "menu-horizontal-line-height": "46px",
      "menu-icon-margin-right": "10px",
      "menu-icon-size": "14px",
      "menu-icon-size-lg": "16px",
      "menu-item-group-title-font-size": "14px",
      "menu-dark-color": "rgba(255, 255, 255, 0.65)",
      "menu-dark-danger-color": "#ff4d4f",
      "menu-dark-bg": "#001529",
      "menu-dark-arrow-color": "#fff",
      "menu-dark-inline-submenu-bg": "#000c17",
      "menu-dark-highlight-color": "#fff",
      "menu-dark-item-active-bg": "#1890ff",
      "menu-dark-item-active-danger-bg": "#ff4d4f",
      "menu-dark-selected-item-icon-color": "#fff",
      "menu-dark-selected-item-text-color": "#fff",
      "menu-dark-item-hover-bg": "transparent",
      "spin-dot-size-sm": "14px",
      "spin-dot-size": "20px",
      "spin-dot-size-lg": "32px",
      "table-bg": "#fff",
      "table-header-bg": "#fafafa",
      "table-header-color": "rgba(0, 0, 0, 0.85)",
      "table-header-sort-bg": "#f5f5f5",
      "table-row-hover-bg": "#fafafa",
      "table-selected-row-color": "inherit",
      "table-selected-row-bg": "#e6f7ff",
      "table-selected-row-hover-bg": "#dcf4ff",
      "table-expanded-row-bg": "#fbfbfb",
      "table-padding-vertical": "16px",
      "table-padding-horizontal": "16px",
      "table-padding-vertical-md": "12px",
      "table-padding-horizontal-md": "8px",
      "table-padding-vertical-sm": "8px",
      "table-padding-horizontal-sm": "8px",
      "table-border-color": "#f0f0f0",
      "table-border-radius-base": "2px",
      "table-footer-bg": "#fafafa",
      "table-footer-color": "rgba(0, 0, 0, 0.85)",
      "table-header-bg-sm": "#fafafa",
      "table-font-size": "14px",
      "table-font-size-md": "14px",
      "table-font-size-sm": "14px",
      "table-header-cell-split-color": "rgba(0, 0, 0, 0.06)",
      "table-header-sort-active-bg": "rgba(0, 0, 0, 0.04)",
      "table-fixed-header-sort-active-bg": "#f5f5f5",
      "table-header-filter-active-bg": "rgba(0, 0, 0, 0.04)",
      "table-filter-btns-bg": "inherit",
      "table-filter-dropdown-bg": "#fff",
      "table-expand-icon-bg": "#fff",
      "table-selection-column-width": "32px",
      "table-sticky-scroll-bar-bg": "rgba(0, 0, 0, 0.35)",
      "table-sticky-scroll-bar-radius": "4px",
      "tag-border-radius": "2px",
      "tag-default-bg": "#fafafa",
      "tag-default-color": "rgba(0, 0, 0, 0.85)",
      "tag-font-size": "12px",
      "tag-line-height": "20px",
      "picker-bg": "#fff",
      "picker-basic-cell-hover-color": "#f5f5f5",
      "picker-basic-cell-active-with-range-color": "#e6f7ff",
      "picker-basic-cell-hover-with-range-color": "#cbe6ff",
      "picker-basic-cell-disabled-bg": "rgba(0, 0, 0, 0.04)",
      "picker-border-color": "#f0f0f0",
      "picker-date-hover-range-border-color": "#7ec1ff",
      "picker-date-hover-range-color": "#cbe6ff",
      "picker-time-panel-column-width": "56px",
      "picker-time-panel-column-height": "224px",
      "picker-time-panel-cell-height": "28px",
      "picker-panel-cell-height": "24px",
      "picker-panel-cell-width": "36px",
      "picker-text-height": "40px",
      "picker-panel-without-time-cell-height": "66px",
      "calendar-bg": "#fff",
      "calendar-input-bg": "#fff",
      "calendar-border-color": "#fff",
      "calendar-item-active-bg": "#e6f7ff",
      "calendar-column-active-bg": "rgba(230, 247, 255, 0.2)",
      "calendar-full-bg": "#fff",
      "calendar-full-panel-bg": "#fff",
      "carousel-dot-width": "16px",
      "carousel-dot-height": "3px",
      "carousel-dot-active-width": "24px",
      "badge-height": "20px",
      "badge-height-sm": "14px",
      "badge-dot-size": "6px",
      "badge-font-size": "12px",
      "badge-font-size-sm": "12px",
      "badge-font-weight": "normal",
      "badge-status-size": "6px",
      "badge-text-color": "#fff",
      "badge-color": "#ff4d4f",
      "rate-star-color": "#fadb14",
      "rate-star-bg": "#f0f0f0",
      "rate-star-size": "20px",
      "rate-star-hover-scale": "scale(1.1)",
      "card-head-color": "rgba(0, 0, 0, 0.85)",
      "card-head-background": "transparent",
      "card-head-font-size": "16px",
      "card-head-font-size-sm": "14px",
      "card-head-padding": "16px",
      "card-head-padding-sm": "8px",
      "card-head-height": "48px",
      "card-head-height-sm": "36px",
      "card-inner-head-padding": "12px",
      "card-padding-base": "24px",
      "card-padding-base-sm": "12px",
      "card-actions-background": "#fff",
      "card-actions-li-margin": "12px 0",
      "card-skeleton-bg": "#cfd8dc",
      "card-background": "#fff",
      "card-shadow": "0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12), 0 5px 12px 4px rgba(0, 0, 0, 0.09)",
      "card-radius": "2px",
      "card-head-tabs-margin-bottom": "-17px",
      "card-head-extra-color": "rgba(0, 0, 0, 0.85)",
      "comment-bg": "inherit",
      "comment-padding-base": "16px 0",
      "comment-nest-indent": "44px",
      "comment-font-size-base": "14px",
      "comment-font-size-sm": "12px",
      "comment-author-name-color": "rgba(0, 0, 0, 0.45)",
      "comment-author-time-color": "#ccc",
      "comment-action-color": "rgba(0, 0, 0, 0.45)",
      "comment-action-hover-color": "#595959",
      "comment-actions-margin-bottom": "inherit",
      "comment-actions-margin-top": "12px",
      "comment-content-detail-p-margin-bottom": "inherit",
      "tabs-card-head-background": "#fafafa",
      "tabs-card-height": "40px",
      "tabs-card-active-color": "#1890ff",
      "tabs-card-horizontal-padding": "8px 16px",
      "tabs-card-horizontal-padding-sm": "6px 16px",
      "tabs-card-horizontal-padding-lg": "7px 16px 6px",
      "tabs-title-font-size": "14px",
      "tabs-title-font-size-lg": "16px",
      "tabs-title-font-size-sm": "14px",
      "tabs-ink-bar-color": "#1890ff",
      "tabs-bar-margin": "0 0 16px 0",
      "tabs-horizontal-gutter": "32px",
      "tabs-horizontal-margin": "0 0 0 32px",
      "tabs-horizontal-margin-rtl": "0 0 0 32px",
      "tabs-horizontal-padding": "12px 0",
      "tabs-horizontal-padding-lg": "16px 0",
      "tabs-horizontal-padding-sm": "8px 0",
      "tabs-vertical-padding": "8px 24px",
      "tabs-vertical-margin": "16px 0 0 0",
      "tabs-scrolling-size": "32px",
      "tabs-highlight-color": "#1890ff",
      "tabs-hover-color": "#40a9ff",
      "tabs-active-color": "#096dd9",
      "tabs-card-gutter": "2px",
      "tabs-card-tab-active-border-top": "2px solid transparent",
      "back-top-color": "#fff",
      "back-top-bg": "rgba(0, 0, 0, 0.45)",
      "back-top-hover-bg": "rgba(0, 0, 0, 0.85)",
      "avatar-size-base": "32px",
      "avatar-size-lg": "40px",
      "avatar-size-sm": "24px",
      "avatar-font-size-base": "18px",
      "avatar-font-size-lg": "24px",
      "avatar-font-size-sm": "14px",
      "avatar-bg": "#ccc",
      "avatar-color": "#fff",
      "avatar-border-radius": "2px",
      "avatar-group-overlapping": "-8px",
      "avatar-group-space": "3px",
      "avatar-group-border-color": "#fff",
      "switch-height": "22px",
      "switch-sm-height": "16px",
      "switch-min-width": "44px",
      "switch-sm-min-width": "28px",
      "switch-disabled-opacity": "0.4",
      "switch-color": "#1890ff",
      "switch-bg": "#fff",
      "switch-shadow-color": "rgba(0, 35, 11, 0.2)",
      "switch-padding": "2px",
      "switch-inner-margin-min": "7px",
      "switch-inner-margin-max": "25px",
      "switch-sm-inner-margin-min": "5px",
      "switch-sm-inner-margin-max": "18px",
      "pagination-item-bg": "#fff",
      "pagination-item-size": "32px",
      "pagination-item-size-sm": "24px",
      "pagination-font-family": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "pagination-font-weight-active": "500",
      "pagination-item-bg-active": "#fff",
      "pagination-item-link-bg": "#fff",
      "pagination-item-disabled-color-active": "rgba(0, 0, 0, 0.25)",
      "pagination-item-disabled-bg-active": "#e6e6e6",
      "pagination-item-input-bg": "#fff",
      "pagination-mini-options-size-changer-top": "0px",
      "page-header-padding": "24px",
      "page-header-padding-vertical": "16px",
      "page-header-padding-breadcrumb": "12px",
      "page-header-content-padding-vertical": "12px",
      "page-header-back-color": "#000",
      "page-header-ghost-bg": "inherit",
      "page-header-heading-title": "20px",
      "page-header-heading-sub-title": "14px",
      "page-header-tabs-tab-font-size": "16px",
      "breadcrumb-base-color": "rgba(0, 0, 0, 0.45)",
      "breadcrumb-last-item-color": "rgba(0, 0, 0, 0.85)",
      "breadcrumb-font-size": "14px",
      "breadcrumb-icon-font-size": "14px",
      "breadcrumb-link-color": "rgba(0, 0, 0, 0.45)",
      "breadcrumb-link-color-hover": "rgba(0, 0, 0, 0.85)",
      "breadcrumb-separator-color": "rgba(0, 0, 0, 0.45)",
      "breadcrumb-separator-margin": "0 8px",
      "slider-margin": "10px 6px 10px",
      "slider-rail-background-color": "#f5f5f5",
      "slider-rail-background-color-hover": "#e1e1e1",
      "slider-track-background-color": "#91d5ff",
      "slider-track-background-color-hover": "#69c0ff",
      "slider-handle-border-width": "2px",
      "slider-handle-background-color": "#fff",
      "slider-handle-color": "#91d5ff",
      "slider-handle-color-hover": "#69c0ff",
      "slider-handle-color-focus": "#46a6ff",
      "slider-handle-color-focus-shadow": "rgba(24, 144, 255, 0.12)",
      "slider-handle-color-tooltip-open": "#1890ff",
      "slider-handle-size": "14px",
      "slider-handle-margin-top": "-5px",
      "slider-handle-shadow": "0",
      "slider-dot-border-color": "#f0f0f0",
      "slider-dot-border-color-active": "#8cc8ff",
      "slider-disabled-color": "rgba(0, 0, 0, 0.25)",
      "slider-disabled-background-color": "#fff",
      "tree-bg": "#fff",
      "tree-title-height": "24px",
      "tree-child-padding": "18px",
      "tree-directory-selected-color": "#fff",
      "tree-directory-selected-bg": "#1890ff",
      "tree-node-hover-bg": "#f5f5f5",
      "tree-node-selected-bg": "#bae7ff",
      "collapse-header-padding": "12px 16px",
      "collapse-header-padding-extra": "40px",
      "collapse-header-bg": "#fafafa",
      "collapse-content-padding": "16px",
      "collapse-content-bg": "#fff",
      "collapse-header-arrow-left": "16px",
      "skeleton-color": "rgba(190, 190, 190, 0.2)",
      "skeleton-to-color": "rgba(129, 129, 129, 0.24)",
      "skeleton-paragraph-margin-top": "28px",
      "skeleton-paragraph-li-margin-top": "16px",
      "skeleton-paragraph-li-height": "16px",
      "skeleton-title-height": "16px",
      "skeleton-title-paragraph-margin-top": "24px",
      "transfer-header-height": "40px",
      "transfer-item-height": "32px",
      "transfer-disabled-bg": "#f5f5f5",
      "transfer-list-height": "200px",
      "transfer-item-hover-bg": "#f5f5f5",
      "transfer-item-selected-hover-bg": "#dcf4ff",
      "transfer-item-padding-vertical": "6px",
      "transfer-list-search-icon-top": "12px",
      "message-notice-content-padding": "10px 16px",
      "message-notice-content-bg": "#fff",
      "wave-animation-width": "6px",
      "alert-success-border-color": "#b7eb8f",
      "alert-success-bg-color": "#f6ffed",
      "alert-success-icon-color": "#52c41a",
      "alert-info-border-color": "#91d5ff",
      "alert-info-bg-color": "#e6f7ff",
      "alert-info-icon-color": "#1890ff",
      "alert-warning-border-color": "#ffe58f",
      "alert-warning-bg-color": "#fffbe6",
      "alert-warning-icon-color": "#faad14",
      "alert-error-border-color": "#ffccc7",
      "alert-error-bg-color": "#fff2f0",
      "alert-error-icon-color": "#ff4d4f",
      "alert-message-color": "rgba(0, 0, 0, 0.85)",
      "alert-text-color": "rgba(0, 0, 0, 0.85)",
      "alert-close-color": "rgba(0, 0, 0, 0.45)",
      "alert-close-hover-color": "rgba(0, 0, 0, 0.75)",
      "alert-no-icon-padding-vertical": "8px",
      "alert-with-description-no-icon-padding-vertical": "15px",
      "alert-with-description-padding-vertical": "15px",
      "alert-with-description-padding": "15px 15px 15px 24px",
      "alert-icon-top": "12.0005px",
      "alert-with-description-icon-size": "24px",
      "list-header-background": "transparent",
      "list-footer-background": "transparent",
      "list-empty-text-padding": "16px",
      "list-item-padding": "12px 0",
      "list-item-padding-sm": "8px 16px",
      "list-item-padding-lg": "16px 24px",
      "list-item-meta-margin-bottom": "16px",
      "list-item-meta-avatar-margin-right": "16px",
      "list-item-meta-title-margin-bottom": "12px",
      "list-customize-card-bg": "#fff",
      "list-item-meta-description-font-size": "14px",
      "statistic-title-font-size": "14px",
      "statistic-content-font-size": "24px",
      "statistic-unit-font-size": "24px",
      "statistic-font-family": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "drawer-header-padding": "16px 24px",
      "drawer-bg": "#fff",
      "drawer-footer-padding-vertical": "10px",
      "drawer-footer-padding-horizontal": "16px",
      "drawer-header-close-size": "56px",
      "drawer-title-font-size": "16px",
      "drawer-title-line-height": "22px",
      "timeline-width": "2px",
      "timeline-color": "#f0f0f0",
      "timeline-dot-border-width": "2px",
      "timeline-dot-color": "#1890ff",
      "timeline-dot-bg": "#fff",
      "timeline-item-padding-bottom": "20px",
      "typography-title-font-weight": "600",
      "typography-title-margin-top": "1.2em",
      "typography-title-margin-bottom": "0.5em",
      "upload-actions-color": "rgba(0, 0, 0, 0.45)",
      "process-tail-color": "#f0f0f0",
      "steps-nav-arrow-color": "rgba(0, 0, 0, 0.25)",
      "steps-background": "#fff",
      "steps-icon-size": "32px",
      "steps-icon-custom-size": "32px",
      "steps-icon-custom-top": "0px",
      "steps-icon-custom-font-size": "24px",
      "steps-icon-top": "-0.5px",
      "steps-icon-font-size": "16px",
      "steps-icon-margin": "0 8px 0 0",
      "steps-title-line-height": "32px",
      "steps-small-icon-size": "24px",
      "steps-small-icon-margin": "0 8px 0 0",
      "steps-dot-size": "8px",
      "steps-dot-top": "2px",
      "steps-current-dot-size": "10px",
      "steps-description-max-width": "140px",
      "steps-nav-content-max-width": "auto",
      "steps-vertical-icon-width": "16px",
      "steps-vertical-tail-width": "16px",
      "steps-vertical-tail-width-sm": "12px",
      "notification-bg": "#fff",
      "notification-padding-vertical": "16px",
      "notification-padding-horizontal": "24px",
      "result-title-font-size": "24px",
      "result-subtitle-font-size": "14px",
      "result-icon-font-size": "72px",
      "result-extra-margin": "24px 0 0 0",
      "image-size-base": "48px",
      "image-font-size-base": "24px",
      "image-bg": "#f5f5f5",
      "image-color": "#fff",
      "image-mask-font-size": "16px",
      "image-preview-operation-size": "18px",
      "image-preview-operation-color": "rgba(255, 255, 255, 0.85)",
      "image-preview-operation-disabled-color": "rgba(255, 255, 255, 0.25)",
      "segmented-bg": "rgba(0, 0, 0, 0.04)",
      "segmented-hover-bg": "rgba(0, 0, 0, 0.06)",
      "segmented-selected-bg": "#fff",
      "segmented-label-color": "rgba(0, 0, 0, 0.65)",
      "segmented-label-hover-color": "#262626"
    }
  },
  "routes": {
    "1": {
      "path": "/user",
      "layout": false,
      "file": "@/layouts/UserLayout.tsx",
      "id": "1",
      "absPath": "/user",
      "__content": "import DocumentTitle from \"react-document-title\";\nimport React from \"react\";\nimport { Link, Outlet, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport { getMenuData, getPageTitle } from \"@ant-design/pro-components\";\n\nimport SelectLang from \"@/components/SelectLang\";\nimport type { MenuDataItem } from \"@ant-design/pro-components\";\nimport type { Route } from \"@ant-design/pro-components/lib/typings\";\nimport type { ConnectProps, ConnectState } from \"@/models/connect\";\n\nimport styles from \"./UserLayout.less\";\nimport logo from \"../assets/logo_en.png\";\nimport { showMultiLang, showLogo } from \"@/utils/env\";\n\nexport interface UserLayoutProps extends ConnectProps<unknown> {\n  breadcrumbNameMap: Record<string, MenuDataItem>;\n  route: {\n    routes: Route[];\n  };\n}\n\nconst UserLayout: React.FC<UserLayoutProps> = (props) => {\n  const { formatMessage } = useIntl();\n  const {\n    route = {\n      routes: [],\n    },\n  } = props;\n  const { routes = [] } = route;\n  const { children } = props;\n  const { breadcrumb } = getMenuData(routes);\n\n  return (\n    <DocumentTitle\n      title={getPageTitle({\n        pathname: window.location.pathname,\n        breadcrumb,\n        formatMessage,\n        title: \"\",\n      })}\n    >\n      <div className={styles.container}>\n        {showMultiLang() && (\n          <div className={styles.lang}>\n            <SelectLang className={styles.m10} />\n          </div>\n        )}\n        <div className={styles.content}>\n          <div className={styles.top}>\n            <div className={styles.header}>\n              <Link to=\"/\">\n                {showLogo() && (\n                  <img alt=\"logo\" className={styles.logo} src={logo} />\n                )}\n              </Link>\n            </div>\n            <div className={styles.desc}>Data with a human touch</div>\n          </div>\n          <Outlet />\n        </div>\n      </div>\n    </DocumentTitle>\n  );\n};\n\nexport default connect(({ settings }: ConnectState) => ({\n  ...settings,\n}))(UserLayout);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/layouts/UserLayout.tsx"
    },
    "2": {
      "name": "login",
      "path": "/user/login",
      "file": "@/pages/user/Login/index.tsx",
      "parentId": "1",
      "id": "2",
      "absPath": "/user/login",
      "__content": "import { Card, message, Modal } from \"antd\";\nimport type { ReactNode } from \"react\";\nimport { useState } from \"react\";\nimport type { Dispatch } from \"redux\";\nimport { useModel } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport type { ConnectState } from \"@/models/connect\";\nimport { mapStatusToErrorMessage } from \"@/utils/utils\";\nimport type { Status } from \"@/types\";\nimport AccountLogin from \"./components/AccountLogin\";\n\nimport styles from \"./style.less\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { checkUserLoginOtherDevice } from \"@/services/user\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { useIntl } from \"@@/plugin-locale/localeExports\";\n\nexport interface LoginProps {\n  dispatch: Dispatch;\n  submitting: boolean;\n}\n\nfunction Login({ submitting, dispatch }: LoginProps) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n  const [userLoginError, setUserLoginError] = useState<ReactNode>();\n  const [checking, setChecking] = useState(false);\n  const { initialState, setInitialState } = useModel(\"@@initialState\");\n\n  const { name = \"\" } = location.query;\n\n  const handleLoginSuccess = async () => {\n    const currentUser = await initialState?.fetchCurrentUser?.();\n    // if (currentUser) {\n    setInitialState({\n      ...initialState,\n      currentUser: currentUser || null,\n    });\n    // }\n  };\n\n  const login = (values: { name: string; password: string }) => {\n    setUserLoginError(null);\n    dispatch({\n      type: \"login/login\",\n      payload: {\n        params: values,\n        onFail: (resp: Status) => {\n          message.error(mapStatusToErrorMessage(resp), 3);\n        },\n        onSuccess: handleLoginSuccess,\n      },\n    });\n  };\n\n  const handleSubmit = async (formValues: {\n    name: string;\n    password: string;\n  }) => {\n    try {\n      setChecking(true);\n      const resp = await checkUserLoginOtherDevice(formValues);\n      if (resp.data) {\n        Modal.confirm({\n          title: formatMessage({ id: \"user.login.other.device.warning\" }),\n          icon: <ExclamationCircleOutlined />,\n          onOk() {\n            login(formValues);\n          },\n          okText: formatMessage({ id: \"common.login.confirm\" }),\n          okType: \"danger\",\n        });\n        return;\n      }\n\n      login(formValues);\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    } finally {\n      setChecking(false);\n    }\n  };\n\n  return (\n    <div className={styles.main}>\n      <Card bordered={false}>\n        <AccountLogin\n          name={name as string}\n          submit={handleSubmit}\n          userLoginError={userLoginError}\n          submitting={submitting || checking}\n          handleValueOnChange={() => setUserLoginError(null)}\n        />\n      </Card>\n    </div>\n  );\n}\n\nfunction mapStateToProps({ loading }: ConnectState) {\n  return {\n    submitting: loading.effects[\"login/login\"] || false,\n  };\n}\n\nexport default connect(mapStateToProps)(Login);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/user/Login/index.tsx"
    },
    "3": {
      "file": "@/pages/404.tsx",
      "parentId": "1",
      "id": "3",
      "absPath": "/user",
      "__content": "import { Button, Result } from \"antd\";\nimport React from \"react\";\nimport { history as router, useIntl } from \"@umijs/max\";\n\nconst NoFoundPage: React.FC = () => {\n  const { formatMessage } = useIntl();\n  return (\n    <Result\n      status=\"404\"\n      title=\"404\"\n      subTitle={formatMessage({ id: \"error.404.title\" })}\n      extra={\n        <Button type=\"primary\" onClick={() => router.push(\"/\")}>\n          {formatMessage({ id: \"common.back-home\" })}\n        </Button>\n      }\n    />\n  );\n};\n\nexport default NoFoundPage;\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/404.tsx"
    },
    "4": {
      "path": "/",
      "file": "@/layouts/GlobalLayout.tsx",
      "parentId": "ant-design-pro-layout",
      "id": "4",
      "absPath": "/",
      "__content": "import type { ReactNode } from \"react\";\nimport React, { useState } from \"react\";\nimport { Link, Outlet, useModel } from \"@umijs/max\";\nimport { Button, message, Result } from \"antd\";\nimport Authorized from \"@/utils/Authorized\";\nimport type { BasicLayoutProps as ProLayoutProps } from \"@ant-design/pro-components\";\nimport ModifyPasswordModal from \"@/components/ModifyPasswordModal\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { setNewPassword } from \"@/services/user\";\nimport { mapStatusToErrorMessage } from \"@/utils/utils\";\nimport { HttpStatus } from \"@/types/http\";\nimport EmailVerifyModal from \"@/components/EmailVerifyModal\";\nimport { enableEmailAuth } from \"@/utils\";\n\nconst noMatch = (\n  <Result\n    status=\"403\"\n    title=\"403\"\n    subTitle=\"Sorry, you are not authorized to access this page.\"\n    extra={\n      <Button type=\"primary\">\n        <Link to=\"/user/login\">Go Login</Link>\n      </Button>\n    }\n  />\n);\n\ninterface GlobalLayoutProp {\n  children: ReactNode;\n  route: ProLayoutProps[\"route\"] & {\n    authority: string[];\n  };\n}\n\nconst GlobalLayout: React.FC<GlobalLayoutProp> = (props) => {\n  const { initialState, setInitialState } = useModel(\"@@initialState\");\n  const [loading, setLoading] = useState(false);\n\n  const { children } = props;\n\n  const reset = async (values: Record<string, any>) => {\n    setLoading(true);\n    try {\n      const resp = await setNewPassword({\n        ...values,\n        name: initialState?.currentUser?.name,\n      });\n\n      if (resp.status !== HttpStatus.OK) {\n        message.error(mapStatusToErrorMessage(resp));\n      } else {\n        await fetchCurrentUser();\n      }\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCurrentUser = async () => {\n    const currentUser = await initialState?.fetchCurrentUser?.();\n\n    if (currentUser) {\n      setInitialState({\n        ...initialState,\n        currentUser,\n      });\n    }\n  };\n\n  const { isRequiredUpdatedPassword, emailAuthFlag, email } =\n    initialState?.currentUser || {};\n\n  return (\n    <>\n      <Authorized authority={undefined} noMatch={noMatch}>\n        <Outlet />\n      </Authorized>\n      <ModifyPasswordModal\n        visible={isRequiredUpdatedPassword}\n        forceModify\n        confirmLoading={loading}\n        resetPassword={reset}\n      />\n      <EmailVerifyModal\n        visible={\n          !isRequiredUpdatedPassword && !!emailAuthFlag && enableEmailAuth()\n        }\n        emailAuthFlag={emailAuthFlag}\n        email={email}\n        fetchCurrentUser={fetchCurrentUser}\n      />\n    </>\n  );\n};\n\nexport default GlobalLayout;\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/layouts/GlobalLayout.tsx"
    },
    "5": {
      "path": "/",
      "redirect": "/welcome",
      "parentId": "4",
      "id": "5",
      "absPath": "/"
    },
    "6": {
      "path": "/welcome",
      "name": "welcome",
      "icon": "dashboard",
      "file": "@/pages/Welcome.tsx",
      "parentId": "4",
      "id": "6",
      "absPath": "/welcome",
      "__content": "import { Card, Typography } from \"antd\";\nimport { useIntl } from \"@umijs/max\";\n\nconst { Title } = Typography;\n\nfunction Welcome() {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  return (\n    <Card bordered={false} className=\"with-shadow\">\n      <Typography.Text strong>\n        <Title level={3} style={{ color: \"#42526e\" }}>\n          {formatMessage({ id: \"app.welcome.message\" })}\n        </Title>\n      </Typography.Text>\n    </Card>\n  );\n}\n\nexport default Welcome;\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/Welcome.tsx"
    },
    "7": {
      "path": "/projects",
      "name": "project-v3",
      "icon": "project",
      "file": "@/pages/project/ProjectList.tsx",
      "parentId": "4",
      "id": "7",
      "absPath": "/projects",
      "__content": "import { useEffect, useState } from \"react\";\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  MoreOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  Card,\n  Dropdown,\n  List,\n  Menu,\n  Modal,\n  Typography,\n  Row,\n  Col,\n  message,\n} from \"antd\";\nimport type { Dispatch } from \"redux\";\nimport { history as router, FormattedMessage, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport type { ConnectState } from \"@/models/connect\";\nimport type { Project } from \"@/types/project\";\nimport { ProjectAccessLevel } from \"@/types/project\";\nimport ProjectListFilter from \"@/pages/project/components/ProjectListFilter\";\nimport { mapStatusToErrorMessage, queryToSearch } from \"@/utils/utils\";\nimport ProjectFormModal from \"@/pages/project/components/ProjectFormModal\";\n\nimport globalStyles from \"@/global.less\";\nimport styles from \"./ProjectList.less\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\n\ntype ProjectListProps = {\n  dispatch: Dispatch;\n  projects: Project[];\n  loading: boolean;\n  submitting: boolean;\n  isAdmin: boolean;\n  loadingAccess: boolean;\n};\n\nconst { Paragraph } = Typography;\n\nfunction ProjectList({\n  projects,\n  loading,\n  dispatch,\n  submitting,\n  isAdmin,\n  loadingAccess,\n}: ProjectListProps) {\n  const { formatMessage } = useIntl();\n\n  const location = useLocationWithQuery();\n  const { query: locationQuery, pathname } = location;\n  const [query, setQuery] = useState<{\n    search?: string;\n    projectDisplayId?: string;\n    customerCode?: string;\n  }>({\n    ...locationQuery,\n  });\n  const [creationModalVisible, setCreationModalVisible] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [currentProject, setCurrentProject] = useState<Project>();\n\n  useEffect(() => {\n    if (!loading) {\n      router.replace({\n        pathname,\n        search: queryToSearch(query),\n      });\n    }\n\n    return () => {\n      dispatch({ type: \"project/resetProjects\" });\n    };\n  }, [query]);\n\n  useEffect(() => {\n    setErrorMessage(\"\");\n  }, [creationModalVisible]);\n\n  const renderListItem = (project: Project) => {\n    const openJobList = () => {\n      router.push({\n        pathname: `/projects/${project.id}/data-center`,\n      });\n      dispatch({ type: \"project/saveCurrentProject\", payload: project });\n    };\n\n    const menu = (projectId: string, projectName?: string) => (\n      <Menu>\n        <Menu.Item\n          key=\"update\"\n          onClick={() => {\n            dispatch({\n              type: \"projectAccess/getProjectAccess\",\n              payload: projectId,\n            });\n            setCurrentProject(project);\n            setCreationModalVisible(true);\n          }}\n        >\n          <EditOutlined />\n          {formatMessage({ id: \"project-list.update\" })}\n        </Menu.Item>\n        <Menu.Item\n          key=\"delete\"\n          onClick={() => {\n            Modal.confirm({\n              title: `${formatMessage({\n                id: \"project-create.form.project-name\",\n              })}： ${projectName}`,\n              content: formatMessage({ id: \"project-list.delete-msg\" }),\n              okText: formatMessage({ id: \"project-list.delete.ok\" }),\n              cancelText: formatMessage({ id: \"project-list.delete.cancel\" }),\n              onOk: () => {\n                dispatch({ type: \"project/deleteProject\", payload: projectId });\n              },\n            });\n          }}\n        >\n          <DeleteOutlined />\n          {formatMessage({ id: \"project-list.delete\" })}\n        </Menu.Item>\n      </Menu>\n    );\n\n    return (\n      <List.Item key={project.name}>\n        <Card\n          bordered={false}\n          className={`${globalStyles[\"with-shadow\"]} ${styles.projectCard}`}\n          actions={[\n            <Button\n              style={{ width: \"100%\" }}\n              key=\"open\"\n              size=\"small\"\n              type=\"link\"\n              className=\"color-grey-9\"\n              onClick={openJobList}\n            >\n              <FormattedMessage id=\"common.open\" />\n            </Button>,\n            <Button\n              style={{ width: \"100%\" }}\n              size=\"small\"\n              type=\"link\"\n              className=\"color-grey-9\"\n              onClick={(e) => {\n                e.preventDefault();\n                router.push({\n                  pathname: \"/project-access\",\n                  search: queryToSearch({\n                    projectId: project.id,\n                  }),\n                });\n              }}\n            >\n              {formatMessage({ id: \"project-list.card.access\" })}\n            </Button>,\n          ]}\n        >\n          <Card.Meta\n            style={{ height: 228 }}\n            title={<span style={{ color: \"#3e5270\" }}>{project.name}</span>}\n            description={\n              <Row gutter={[16, 8]}>\n                <Col span={24}>\n                  <p className={styles.title}>\n                    {formatMessage({ id: \"projectId\" })}：\n                  </p>\n                  <p\n                    className={styles.content}\n                    title={project.projectDisplayId}\n                  >\n                    {project.projectDisplayId || \"N/A\"}\n                  </p>\n                </Col>\n                <Col span={24}>\n                  <p className={styles.title}>\n                    {formatMessage({\n                      id: \"project-create.form.project-description\",\n                    })}\n                    ：\n                  </p>\n                  <Paragraph\n                    style={{ height: 48, color: \"#42526e\" }}\n                    ellipsis={{ rows: 2 }}\n                    title={project.description}\n                  >\n                    {project.description || \"N/A\"}\n                  </Paragraph>\n                </Col>\n              </Row>\n            }\n          />\n          <Dropdown\n            placement=\"bottomRight\"\n            trigger={[\"hover\"]}\n            overlay={menu(project.id, project.name)}\n          >\n            <MoreOutlined\n              className={styles.extra}\n              style={{\n                position: \"absolute\",\n                top: 8,\n                right: 8,\n                cursor: \"pointer\",\n              }}\n            />\n          </Dropdown>\n        </Card>\n      </List.Item>\n    );\n  };\n\n  const headerAction = (\n    <Button\n      type=\"primary\"\n      icon={<PlusOutlined />}\n      onClick={() => {\n        setCreationModalVisible(true);\n        setCurrentProject(null);\n      }}\n    >\n      {formatMessage({ id: \"project-list.card.new\" })}\n    </Button>\n  );\n\n  const closeModal = () => {\n    setCurrentProject(null);\n    setCreationModalVisible(false);\n  };\n\n  const handleSubmit = (values: Project) => {\n    Object.assign(values, { name: values.name.trim() });\n    setErrorMessage(null);\n    dispatch({\n      type: currentProject ? \"project/updateProject\" : \"project/createProject\",\n      payload: {\n        project: currentProject\n          ? {\n              ...currentProject,\n              ...values,\n            }\n          : values,\n        onSuccess: () => {\n          closeModal();\n          router.replace({\n            pathname,\n            search: queryToSearch(query),\n          });\n          message.success(\n            formatMessage({ id: \"common.message.success.operation\" })\n          );\n        },\n        onError: (resp: any) => {\n          setErrorMessage(mapStatusToErrorMessage(resp));\n        },\n      },\n    });\n  };\n\n  return (\n    <HeaderContentWrapperComponent\n      title={formatMessage({ id: \"menu.project-v3\" })}\n      actions={headerAction}\n    >\n      <div style={{ marginBottom: 10 }}>\n        <ProjectListFilter\n          initialValue={query}\n          onSearch={(filter) => {\n            setQuery({\n              ...query,\n              ...filter,\n            });\n          }}\n          onReset={() => {\n            setQuery({});\n          }}\n        />\n      </div>\n      <List\n        loading={loading}\n        rowKey=\"id\"\n        grid={{ gutter: 16, xxl: 4, xl: 3, lg: 2, md: 2, sm: 1, xs: 1 }}\n        dataSource={projects}\n        renderItem={renderListItem}\n      />\n      <ProjectFormModal\n        visible={creationModalVisible}\n        onCancel={closeModal}\n        submitting={submitting}\n        handleSubmit={handleSubmit}\n        errorMessage={errorMessage}\n        isAdmin={isAdmin}\n        loadingAccess={loadingAccess}\n        project={currentProject}\n      />\n    </HeaderContentWrapperComponent>\n  );\n}\n\nfunction mapStateToProps({ project, loading, projectAccess }: ConnectState) {\n  return {\n    projects: project.projects,\n    loading: loading.effects[\"project/getProjects\"],\n    submitting:\n      loading.effects[\"project/createProject\"] ||\n      loading.effects[\"project/updateProject\"],\n    isAdmin: projectAccess.projectAccess === ProjectAccessLevel.ADMIN,\n    loadingAccess: loading.effects[\"projectAccess/getProjectAccess\"] || false,\n  };\n}\n\nexport default connect(mapStateToProps)(ProjectList);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/ProjectList.tsx"
    },
    "8": {
      "path": "/project-access",
      "hideInMenu": true,
      "file": "@/pages/project/ProjectAccessConfig.tsx",
      "parentId": "4",
      "id": "8",
      "absPath": "/project-access",
      "__content": "import type { MouseEvent } from \"react\";\nimport React, { useState } from \"react\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\nimport { Button, Card, Popconfirm, Result, Table } from \"antd\";\nimport type { Dispatch } from \"redux\";\nimport { history as router, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport type { ConnectState } from \"@/models/connect\";\nimport type { ProjectUser, TenantPM } from \"@/types/project\";\nimport { ProjectAccessLevel } from \"@/types/project\";\nimport AccessConfigModal from \"@/pages/project/components/AccessConfigModal\";\nimport AdminChangeModal from \"@/pages/project/components/AdminChangeModal\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { ColumnProps } from \"antd/es/table\";\n\ntype Props = {\n  loading: boolean;\n  submitting: boolean;\n  projectUsers: ProjectUser[];\n  pms: TenantPM[];\n  projectAccess: string | null;\n  dispatch: Dispatch;\n};\n\nconst defaultModalVisible = {\n  accessVisible: false,\n  adminVisible: false,\n};\n\nconst ProjectAccessConfig: React.FC<Props> = ({\n  loading,\n  submitting,\n  projectUsers,\n  pms,\n  projectAccess,\n  dispatch,\n}) => {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n  const [modalVisible, setModalVisible] = useState(defaultModalVisible);\n  const {\n    query: { projectId: currentProjectId },\n  } = location;\n\n  const handleUserDelete = (\n    event: MouseEvent,\n    projectId: string,\n    userUniqueName: string\n  ) => {\n    event.preventDefault();\n    dispatch({\n      type: \"projectAccess/deleteProjectUser\",\n      payload: { projectId, userUniqueName },\n    });\n  };\n\n  const showAdminModal = (e: MouseEvent) => {\n    e.preventDefault();\n    setModalVisible({ ...modalVisible, adminVisible: true });\n  };\n\n  const columns: ColumnProps<ProjectUser>[] = [\n    {\n      title: formatMessage({ id: \"common.user.nickname\" }),\n      dataIndex: \"userUniqueName\",\n    },\n    {\n      title: formatMessage({ id: \"project-access.col.status\" }),\n      dataIndex: \"status\",\n      render: (status: string) => (\n        <span>{formatMessage({ id: `access.${status}` })}</span>\n      ),\n    },\n    {\n      title: formatMessage({ id: \"project-access.col.action\" }),\n      render: (data: ProjectUser) =>\n        data.status !== ProjectAccessLevel.ADMIN ? (\n          <Popconfirm\n            title={formatMessage({ id: \"project-access.delete-confirm\" })}\n            onConfirm={(e) =>\n              handleUserDelete(e, data.projectId, data.userUniqueName)\n            }\n            okText={formatMessage({ id: \"common.yes\" })}\n            cancelText={formatMessage({ id: \"common.no\" })}\n          >\n            <DeleteOutlined className=\"color-red\" />\n          </Popconfirm>\n        ) : (\n          <EditOutlined\n            style={{ color: \"#227a7a\", cursor: \"pointer\" }}\n            onClick={showAdminModal}\n          />\n        ),\n    },\n  ];\n\n  const showAccessModal = (e: MouseEvent) => {\n    e.preventDefault();\n    setModalVisible({ ...modalVisible, accessVisible: true });\n  };\n\n  const handleModalOk = (userUniqueName: string, access: string) => {\n    dispatch({\n      type: \"projectAccess/addProjectUser\",\n      payload: {\n        projectId: currentProjectId,\n        userUniqueName,\n        status: access,\n      },\n    });\n    setModalVisible(defaultModalVisible);\n  };\n\n  return (\n    <HeaderContentWrapperComponent\n      title={formatMessage({ id: \"project-access.title\" })}\n      backTitle={formatMessage({ id: \"menu.project\" })}\n      onBack={() => {\n        router.goBack();\n      }}\n    >\n      <Card bordered={false} loading={loading}>\n        {projectAccess === ProjectAccessLevel.ADMIN && !loading ? (\n          <>\n            <div\n              style={{\n                height: 60,\n                width: \"100%\",\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n              }}\n            >\n              <Button type=\"primary\" onClick={showAccessModal}>\n                {formatMessage({ id: \"project-access.add\" })}\n              </Button>\n            </div>\n            <Table\n              rowKey=\"id\"\n              dataSource={projectUsers}\n              columns={columns}\n              loading={submitting}\n            />\n            <AccessConfigModal\n              visible={modalVisible.accessVisible}\n              pms={pms}\n              onCancel={() => setModalVisible(defaultModalVisible)}\n              onOk={handleModalOk}\n            />\n            <AdminChangeModal\n              visible={modalVisible.adminVisible}\n              users={pms}\n              onCancel={() => setModalVisible(defaultModalVisible)}\n              onOk={(name: string) => handleModalOk(name, \"ADMIN\")}\n            />\n          </>\n        ) : (\n          <Result\n            status=\"403\"\n            subTitle={formatMessage({ id: \"project-access.no-access\" })}\n            extra={\n              <Button onClick={() => window.history.back()}>\n                {formatMessage({ id: \"project-access.back\" })}\n              </Button>\n            }\n          />\n        )}\n      </Card>\n    </HeaderContentWrapperComponent>\n  );\n};\n\nfunction mapStateToProps({ projectAccess, loading }: ConnectState) {\n  return {\n    loading:\n      loading.effects[\"projectAccess/initPage\"] ||\n      loading.effects[\"projectAccess/getInternalPMs\"],\n    submitting:\n      loading.effects[\"projectAccess/getProjectUsers\"] ||\n      loading.effects[\"projectAccess/deleteProjectUser\"] ||\n      loading.effects[\"projectAccess/addProjectUser\"],\n    projectUsers: projectAccess.projectUsers,\n    pms: projectAccess.pms,\n    projectAccess: projectAccess.projectAccess,\n  };\n}\n\nexport default connect(mapStateToProps)(ProjectAccessConfig);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/ProjectAccessConfig.tsx"
    },
    "9": {
      "path": "/file-center",
      "icon": "file",
      "name": "file",
      "file": "@/pages/file/FileCenter.tsx",
      "parentId": "4",
      "id": "9",
      "absPath": "/file-center",
      "__content": "import { useState } from \"react\";\nimport { Radio, RadioChangeEvent } from \"antd\";\nimport { useIntl } from \"@umijs/max\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport DataExportComponent from \"./DataExport\";\nimport DataUploadComponent from \"./DataUpload\";\n\nenum FileCenterTab {\n  DataExport = \"DataExport\",\n  DataUpload = \"DataUpload\",\n}\n\nfunction FileCenter() {\n  const { formatMessage } = useIntl();\n  const [tab, setTab] = useState(FileCenterTab.DataExport);\n  const options = [\n    { label: formatMessage({ id: \"data.export\" }), value: \"DataExport\" },\n    { label: formatMessage({ id: \"data.upload\" }), value: \"DataUpload\" },\n  ];\n\n  return (\n    <HeaderContentWrapperComponent\n      title={formatMessage({ id: \"file.center.title\" })}\n    >\n      <Radio.Group\n        style={{ marginBottom: 20 }}\n        options={options}\n        optionType=\"button\"\n        onChange={({ target: { value } }: RadioChangeEvent) => {\n          setTab(value);\n        }}\n        value={tab}\n      />\n      {tab === FileCenterTab.DataExport && <DataExportComponent />}\n      {tab === FileCenterTab.DataUpload && <DataUploadComponent />}\n    </HeaderContentWrapperComponent>\n  );\n}\n\nexport default FileCenter;\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/file/FileCenter.tsx"
    },
    "10": {
      "path": "/bpo-list",
      "name": "vm",
      "icon": "apartment",
      "file": "@/pages/bpo/superadmin/BPOList.tsx",
      "parentId": "4",
      "id": "10",
      "absPath": "/bpo-list",
      "__content": "import { Card, Divider, Button, message } from \"antd\";\nimport { BuildOutlined } from \"@ant-design/icons\";\nimport { useEffect, useState } from \"react\";\nimport type { Dispatch } from \"redux\";\nimport { useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport FilterFormComponent from \"@/components/FilterFormComponent\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport type { ConnectState } from \"@/models/connect\";\nimport {\n  deleteTags,\n  updateBPOActiveStatus,\n  updateBPOAndGlobalTags,\n  addTags,\n  deleteBpo,\n} from \"@/services/vm\";\nimport type { FormItem } from \"@/types/common\";\nimport { FormItemType } from \"@/types/common\";\nimport type { BPO, GlobalTag } from \"@/types/vm\";\nimport { BPOActiveStatus, BPOTabs } from \"@/types/vm\";\nimport { DEFAULT_PAGE_SIZE, PAGE_SIZE_OPTIONS } from \"@/utils/constants\";\n\nimport { mapStatusToErrorMessage } from \"@/utils/utils\";\nimport { HttpStatus } from \"@/types/http\";\nimport ApprovedBPOList from \"../components/ApprovedBPOList\";\nimport TagsModal from \"../components/TagsModal\";\nimport GlobalTagsModal from \"../components/GlobalTagsModal\";\nimport BPOCreateModal from \"@/pages/bpo/superadmin/BPOCreateModal\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport AddUserSuccessModal from \"@/components/AddUserSuccessModal\";\nimport { User } from \"@/types/user\";\n\ninterface BPOListProp {\n  globalTags: GlobalTag[];\n  totalCount: number;\n  bpoList: BPO[];\n  dispatch: Dispatch;\n  loadingBPO: boolean;\n  loadingGlobalTags: boolean;\n}\n\nfunction BPOList({\n  globalTags,\n  totalCount,\n  bpoList,\n  dispatch,\n  loadingBPO,\n  loadingGlobalTags,\n}: BPOListProp) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n  const { queryParams = \"\" } = location.query;\n  const initialFilterValue: any = {\n    bpoDisplayId: null,\n    bpoName: null,\n    contactName: null,\n    contactPhone: null,\n    contactEmail: null,\n    province: [],\n    tags: [],\n    activeStatus: null,\n    pageIndex: 0,\n    pageSize: DEFAULT_PAGE_SIZE,\n  };\n  const [filterValues, setFilterValue] = useState(\n    queryParams ? JSON.parse(queryParams as string) : initialFilterValue\n  );\n  const [globalTagsModalVisible, setGlobalTagsModalVisible] = useState(false);\n\n  const [tagsModalVisible, setTagsModalVisible] = useState(false);\n  const [createModalVisible, setCreateModalVisible] = useState(false);\n  const [selectedBPO, setSelectedBPO] = useState<BPO>();\n  const [updating, setUpdating] = useState(false);\n  const [currentBpoId, setCurrentBpoId] = useState(null);\n  const [createdUser, setCreatedUser] = useState(null);\n\n  const filterFormItems: FormItem[] = [\n    {\n      key: \"bpoCode\",\n      label: formatMessage({ id: \"bpo-list.bpo.codename\" }),\n      type: FormItemType.Text,\n      allowClear: true,\n    },\n    {\n      key: \"bpoName\",\n      label: formatMessage({ id: \"bpo-list.bpo.name\" }),\n      type: FormItemType.Text,\n      allowClear: true,\n    },\n    {\n      key: \"contactName\",\n      label: formatMessage({ id: \"bpo-list.bpo.contactName\" }),\n      type: FormItemType.Text,\n      allowClear: true,\n    },\n    {\n      key: \"contactPhone\",\n      label: formatMessage({ id: \"bpo-list.bpo.contactPhone\" }),\n      type: FormItemType.Text,\n      allowClear: true,\n    },\n    {\n      key: \"contactEmail\",\n      label: formatMessage({ id: \"bpo-list.bpo.contactEmail\" }),\n      type: FormItemType.Text,\n      allowClear: true,\n    },\n    // {\n    //   key: 'tags',\n    //   label: formatMessage({ id: 'bpo-list.bpo.tags' }),\n    //   type: FormItemType.Multiple,\n    //   options: globalTags || [],\n    //   optionValueKey: 'id',\n    //   optionLabelKey: 'name',\n    //   allowClear: true,\n    //   loading: loadingGlobalTags,\n    // },\n    {\n      key: \"activeStatus\",\n      label: formatMessage({ id: \"bpo-list.bpo.status\" }),\n      type: FormItemType.Single,\n      options: Object.keys(BPOActiveStatus),\n      optionLabel: (item) =>\n        formatMessage({ id: `bpo-list.bpo.status.${item.toLowerCase()}` }),\n      allowClear: true,\n    },\n  ];\n\n  const pagination = {\n    pageSizeOptions: PAGE_SIZE_OPTIONS,\n    showSizeChanger: true,\n    current: filterValues.pageIndex + 1,\n    pageSize: filterValues.pageSize,\n    total: totalCount,\n    onChange: (page: number, size: number) =>\n      setFilterValue({ ...filterValues, pageIndex: page - 1, pageSize: size }),\n    showTotal: (total: number) =>\n      formatMessage({ id: \"common.total.items\" }, { items: total }),\n  };\n\n  const getList = () => {\n    dispatch({\n      type: \"bpoManagement/getBPOList\",\n      payload: {\n        ...filterValues,\n      },\n    });\n  };\n\n  const getAllTags = () => {\n    dispatch({ type: \"bpoManagement/getGlobalTags\" });\n  };\n\n  useEffect(() => {\n    getAllTags();\n  }, []);\n\n  useEffect(() => {\n    getList();\n  }, [filterValues, dispatch]);\n\n  const editTag = (bpo: BPO) => {\n    setSelectedBPO(bpo);\n    setTagsModalVisible(true);\n  };\n\n  const updateTags = (tagIds: string[]) => {\n    setUpdating(true);\n    updateBPOAndGlobalTags(selectedBPO.bpoId, tagIds)\n      .then(() => {\n        dispatch({\n          type: \"bpoManagement/getBPOList\",\n          payload: {\n            ...filterValues,\n            bpoStatusList: BPOTabs.APPROVED,\n          },\n        });\n        dispatch({ type: \"bpoManagement/getGlobalTags\" });\n        setTagsModalVisible(false);\n      })\n      .finally(() => setUpdating(false));\n  };\n\n  const updateActiveStatus = (bpoId: string, activeStatus: BPOActiveStatus) => {\n    setUpdating(true);\n    updateBPOActiveStatus(bpoId, activeStatus)\n      .then((resp) => {\n        if (resp.status === HttpStatus.OK) {\n          getList();\n        } else {\n          message.error(mapStatusToErrorMessage(resp));\n        }\n      })\n      .catch((e) => message.error(mapStatusToErrorMessage(e)))\n      .finally(() => setUpdating(false));\n  };\n\n  const deleteCurrentBpo = (bpoId: string) => {\n    deleteBpo(bpoId)\n      .then(() => {\n        getList();\n      })\n      .finally();\n  };\n\n  const addGlobalTag = (val: string) => {\n    setUpdating(true);\n    addTags(val)\n      .then((resp) => {\n        if (resp.status === HttpStatus.OK || resp.status === 40023) {\n          dispatch({ type: \"bpoManagement/getGlobalTags\" });\n        } else {\n          message.error(mapStatusToErrorMessage(resp));\n        }\n      })\n      .finally(() => {\n        setUpdating(false);\n      });\n  };\n\n  const deleteGlobalTag = (id: string) => {\n    setUpdating(true);\n    deleteTags(id)\n      .then((resp) => {\n        if (resp.status !== HttpStatus.OK) {\n          message.error(mapStatusToErrorMessage(resp));\n        } else {\n          dispatch({ type: \"bpoManagement/getGlobalTags\" });\n        }\n      })\n      .finally(() => {\n        setUpdating(false);\n      });\n  };\n\n  return (\n    <HeaderContentWrapperComponent\n      title={formatMessage({ id: \"menu.vm.bpo-list\" })}\n      titleIcon={<BuildOutlined />}\n      actions={[\n        // <Button\n        //   key=\"tag\"\n        //   type=\"primary\"\n        //   onClick={() => setGlobalTagsModalVisible(true)}\n        // >\n        //   {formatMessage({ id: 'bpo-list.bpo.tag.global' })}\n        // </Button>,\n        <Button\n          key=\"create\"\n          style={{ marginLeft: 8 }}\n          onClick={() => setCreateModalVisible(true)}\n        >\n          {formatMessage({ id: \"bpo-list.bpo.create\" })}\n        </Button>,\n      ]}\n    >\n      <>\n        <Card\n          bordered={false}\n          className=\"with-shadow\"\n          style={{ marginTop: 20 }}\n        >\n          <FilterFormComponent\n            formItems={filterFormItems}\n            formStyle={{ marginBottom: 0 }}\n            formItemStyle={{ marginBottom: 15 }}\n            initialValue={filterValues}\n            onFilterValueChange={(val) =>\n              setFilterValue({\n                ...val,\n                pageIndex: 0,\n                pageSize: filterValues.pageSize,\n              })\n            }\n            searchMode=\"click\"\n          />\n          <Divider style={{ margin: \"0 0 15px\" }} />\n          <ApprovedBPOList\n            pagination={pagination}\n            bpoList={bpoList}\n            editTag={editTag}\n            updateBPOActiveStatus={updateActiveStatus}\n            updating={updating}\n            loading={loadingBPO}\n            onUpdate={(bpoId: string) => {\n              setCurrentBpoId(bpoId);\n              setCreateModalVisible(true);\n            }}\n            onDelete={deleteCurrentBpo}\n          />\n        </Card>\n        <TagsModal\n          visible={tagsModalVisible}\n          tags={globalTags}\n          selectedTags={selectedBPO?.tags || []}\n          onCancel={() => setTagsModalVisible(false)}\n          updateTags={updateTags}\n          updating={updating}\n        />\n        <GlobalTagsModal\n          visible={globalTagsModalVisible}\n          tags={globalTags}\n          onCancel={() => setGlobalTagsModalVisible(false)}\n          addGlobalTag={addGlobalTag}\n          deleteGlobalTag={deleteGlobalTag}\n          updating={updating}\n        />\n        <BPOCreateModal\n          bpoId={currentBpoId}\n          allTags={globalTags}\n          visible={createModalVisible}\n          onSave={(user: User) => {\n            setCurrentBpoId(null);\n            setCreateModalVisible(false);\n            setCreatedUser(user);\n            getList();\n          }}\n          onClose={() => {\n            setCurrentBpoId(null);\n            setCreateModalVisible(false);\n          }}\n        />\n        <AddUserSuccessModal\n          username={createdUser?.uniqueName}\n          password={createdUser?.initialPassword}\n          visible={!!createdUser}\n          onClose={() => setCreatedUser(null)}\n        />\n      </>\n    </HeaderContentWrapperComponent>\n  );\n}\n\nfunction mapStateToProps({ bpoManagement, loading }: ConnectState) {\n  return {\n    totalCount: bpoManagement.bpoCount,\n    bpoList: bpoManagement.bpoList,\n    globalTags: bpoManagement.globalTags,\n    loadingBPO: loading.effects[\"bpoManagement/getBPOList\"],\n    loadingGlobalTags: loading.effects[\"bpoManagement/getGlobalTags\"],\n  };\n}\n\nexport default connect(mapStateToProps)(BPOList);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/superadmin/BPOList.tsx"
    },
    "11": {
      "path": "/bpo/:bpoId/workforce",
      "name": "vm",
      "hideInMenu": true,
      "icon": "apartment",
      "file": "@/pages/bpo/bpopm/BpoWorkerList.tsx",
      "parentId": "4",
      "id": "11",
      "absPath": "/bpo/:bpoId/workforce",
      "__content": "import { useEffect, useState } from \"react\";\nimport { message } from \"antd\";\nimport { connect } from \"react-redux\";\nimport WorkerList, { UserFilter } from \"@/components/WorkerList\";\nimport {\n  activeBpoUser,\n  assignRole,\n  createBpoUser,\n  deleteBpoUser,\n  getAllRoles,\n  getBpoUserList,\n  getBpoUserTags,\n} from \"@/services/user\";\nimport { mapStatusToErrorMessage } from \"@/utils/utils\";\nimport { Role, RoleType } from \"@/types/auth\";\nimport { Tag } from \"@/pages/bpo/components/BPOTagComponent\";\nimport { ConnectState } from \"@/models/connect\";\nimport { NewUser, UserStatus } from \"@/types/user\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport { getBpoDetail } from \"@/services/vm\";\nimport { HttpStatus } from \"@/types/http\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { BPO, BPOActiveStatus } from \"@/types/vm\";\n\nfunction BpoWorkerList() {\n  const [loading, setLoading] = useState(false);\n  const location = useLocationWithQuery();\n  const [users, setUsers] = useState([]);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [tags, setTags] = useState<Tag[]>([]);\n  const [total, setTotal] = useState(0);\n  const [workerNum, setWorkerNum] = useState({ count: 0, limit: 0 });\n  const [bpoInfo, setBpoInfo] = useState<BPO>(null);\n  const pathSegments: string[] =\n    pathToRegexp(`/bpo/:jobId/workforce`).exec(location.pathname) || [];\n  const [, bpoId] = pathSegments;\n  const getRoles = async () => {\n    try {\n      const resp = await getAllRoles();\n      setRoles(resp.data.filter((item: Role) => item.type === RoleType.BPO));\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    }\n  };\n  const addWorker = (values: NewUser) => {\n    return createBpoUser({ ...values, bpoId });\n  };\n  const deleteWorker = (userId: string | number) => {\n    return deleteBpoUser({ userId, bpoId });\n  };\n  const enableWorker = (userId: string | number) => {\n    return activeBpoUser({ userId, bpoId, activeStatus: UserStatus.ACTIVE });\n  };\n  const roleChange = (userId: string | number, roleId: string[]) => {\n    return assignRole({ userId, bpoId, roleId });\n  };\n  const disableWorker = (userId: string | number) => {\n    return activeBpoUser({ userId, bpoId, activeStatus: UserStatus.INACTIVE });\n  };\n  const getTags = async () => {\n    try {\n      const resp = await getBpoUserTags(bpoId);\n      setTags(resp.data || []);\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    }\n  };\n  const getDetail = async () => {\n    try {\n      const resp = await getBpoDetail(bpoId);\n      if (resp.status !== HttpStatus.OK) {\n        message.error(mapStatusToErrorMessage(resp));\n      } else {\n        setWorkerNum({\n          count: resp.data.currentWorkerNumber,\n          limit: resp.data.workerNumber,\n        });\n        setBpoInfo(resp.data);\n      }\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getUsers = async (\n    filterValues: UserFilter,\n    sortInfo: Record<string, any>\n  ) => {\n    setLoading(true);\n    try {\n      const resp = await getBpoUserList({\n        ...filterValues,\n        ...(sortInfo || {}),\n        bpoId,\n      });\n      setUsers(resp.data.results);\n      setTotal(resp.data.totalElements);\n      getDetail();\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    getRoles();\n    getTags();\n  }, []);\n  return (\n    <WorkerList\n      isBpo\n      bpoId={bpoId}\n      bpoName={bpoInfo?.name}\n      disabled={bpoInfo?.activeStatus === BPOActiveStatus.INACTIVE}\n      tags={tags}\n      roles={roles}\n      users={users}\n      total={total}\n      loading={loading}\n      workerNum={workerNum}\n      deleteUser={deleteWorker}\n      addUser={addWorker}\n      disableUser={disableWorker}\n      enableUser={enableWorker}\n      getUsers={getUsers}\n      tagRefresh={getTags}\n      roleChange={roleChange}\n      type={RoleType.BPO}\n    />\n  );\n}\n\nfunction mapStateToProps({ user }: ConnectState) {\n  return {\n    currentUser: user.currentUser,\n  };\n}\n\nexport default connect(mapStateToProps)(BpoWorkerList);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/bpopm/BpoWorkerList.tsx"
    },
    "12": {
      "path": "/bpo-jobs",
      "name": "bpo-jobs-v3",
      "icon": "folder",
      "file": "@/pages/bpo/bpo-job/JobList.tsx",
      "parentId": "4",
      "id": "12",
      "absPath": "/bpo-jobs",
      "__content": "import { useEffect, useState } from \"react\";\nimport {\n  EditOutlined,\n  BulbOutlined,\n  CloseCircleOutlined,\n  FundOutlined,\n  PauseCircleOutlined,\n  CheckCircleOutlined,\n  StopOutlined,\n  FolderOutlined,\n} from \"@ant-design/icons\";\nimport { Button, Card, Divider, message, Table, Tag } from \"antd\";\nimport { history as router, useIntl } from \"@umijs/max\";\n\nimport withRound from \"@/components/RoundIcon\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport FilterFormComponent from \"@/components/FilterFormComponent\";\nimport type { FormItem } from \"@/types/common\";\nimport { FormItemType } from \"@/types/common\";\nimport type { Job } from \"@/types/job\";\nimport { BPOFilterStatus, JobStatus, JobType } from \"@/types/job\";\nimport { HttpStatus } from \"@/types/http\";\nimport { mapStatusToErrorMessage } from \"@/utils/utils\";\nimport { dateFormat } from \"@/utils/time-util\";\nimport { getBpoJobs } from \"@/services/bpo\";\nimport { DEFAULT_PAGE_SIZE, PAGE_SIZE_OPTIONS } from \"@/utils/constants\";\n\nimport globalStyles from \"@/global.less\";\nimport styles from \"@/pages/bpo/bpo-job/JobList.less\";\n\nconst RoundFolderOutlined = withRound(FolderOutlined);\nconst TagStyle = {\n  [JobStatus.DRAFT]: {\n    color: \"#fdb314\",\n    backgroundColor: \"rgba(253, 179, 20, 0.1)\",\n    Icon: () => <EditOutlined className={styles.icon} />,\n  },\n  [JobStatus.READY]: {\n    color: \"#005ff7\",\n    backgroundColor: \"rgba(0, 95, 247, 0.1)\",\n    icon: \"rocket\",\n  },\n  [JobStatus.LAUNCH]: {\n    color: \"#6b5be5\",\n    backgroundColor: \"rgba(107, 91, 229, 0.1)\",\n    Icon: () => <BulbOutlined className={styles.icon} />,\n  },\n  [JobStatus.STARTING_ERROR]: {\n    color: \"#f56c6c\",\n    backgroundColor: \"rgba(245, 108, 108, 0.1)\",\n    Icon: () => <CloseCircleOutlined className={styles.icon} />,\n  },\n  [JobStatus.RUNNING]: {\n    color: \"#227a7a\",\n    backgroundColor: \"rgba(34, 122, 122, 0.1)\",\n    Icon: () => <FundOutlined className={styles.icon} />,\n  },\n  [JobStatus.PAUSE]: {\n    color: \"#fdb314\",\n    backgroundColor: \"rgba(253, 179, 20, 0.1)\",\n    Icon: () => <PauseCircleOutlined className={styles.icon} />,\n  },\n  [JobStatus.FINISHED]: {\n    color: \"#52c41a\",\n    backgroundColor: \"rgba(82, 196, 26, 0.1)\",\n    Icon: () => <CheckCircleOutlined className={styles.icon} />,\n  },\n  [JobStatus.STOPPED]: {\n    color: \"#3e5270\",\n    backgroundColor: \"rgba(62, 82, 112, 0.1)\",\n    Icon: () => <StopOutlined className={styles.icon} />,\n  },\n  [JobStatus.ERROR]: {\n    color: \"#f56c6c\",\n    backgroundColor: \"rgba(245, 108, 108, 0.1)\",\n    Icon: () => <CloseCircleOutlined className={styles.icon} />,\n  },\n  [JobStatus.TEMP_CLOSE]: {\n    color: \"#fdb314\",\n    backgroundColor: \"rgba(253, 179, 20, 0.1)\",\n    Icon: () => <StopOutlined className={styles.icon} />,\n  },\n};\n\nconst JobTypes = [JobType.LABEL, JobType.QA];\n\ntype BpoJob = {\n  id: string;\n  jobName: string;\n  jobType: string;\n  jobStatus: JobStatus;\n  createTime: string;\n  contact: string;\n};\n\nfunction JobList() {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n  const [filter, setFilter] = useState({});\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(DEFAULT_PAGE_SIZE);\n  const [loading, setLoading] = useState(false);\n\n  const filterFormItems: FormItem[] = [\n    {\n      key: \"jobDisplayId\",\n      label: (\n        <span className={styles[\"filter-label\"]}>\n          {formatMessage({ id: \"bpo-job-list.filter.job-id\" })}\n        </span>\n      ),\n      type: FormItemType.Text,\n      style: { width: 160 },\n      allowClear: true,\n    },\n    {\n      key: \"jobName\",\n      label: (\n        <span className={styles[\"filter-label\"]}>\n          {formatMessage({ id: \"bpo-job-list.filter.job-name\" })}\n        </span>\n      ),\n      type: FormItemType.Text,\n      style: { width: 160 },\n      allowClear: true,\n    },\n    {\n      key: \"jobType\",\n      label: (\n        <span className={styles[\"filter-label\"]}>\n          {formatMessage({ id: \"bpo-job-list.filter.job-type\" })}\n        </span>\n      ),\n      type: FormItemType.Multiple,\n      options: JobTypes.map((item) => ({\n        label: formatMessage({ id: `${item.toLowerCase()}-job.type` }),\n        value: item,\n      })),\n      optionLabelKey: \"label\",\n      optionValueKey: \"value\",\n      style: { width: 160 },\n      allowClear: true,\n    },\n    {\n      key: \"status\",\n      label: (\n        <span className={styles[\"filter-label\"]}>\n          {formatMessage({ id: \"bpo-job-list.filter.job-status\" })}\n        </span>\n      ),\n      type: FormItemType.Multiple,\n      options: Object.keys(BPOFilterStatus),\n      optionLabel: (item) => formatMessage({ id: `job.status.${item}` }),\n      style: { width: 320 },\n      maxTagCount: 3,\n    },\n  ];\n\n  const columns = [\n    {\n      title: formatMessage({ id: \"bpo-job-list.filter.job-id\" }),\n      dataIndex: \"jobDisplayId\",\n      render: (jobDisplayId: string, record: Job) => (\n        <Button\n          type=\"link\"\n          onClick={() => router.push(`/bpo-job/${record.id}`)}\n        >\n          {jobDisplayId}\n        </Button>\n      ),\n    },\n    {\n      title: formatMessage({ id: \"bpo-job-list.filter.job-name\" }),\n      dataIndex: \"jobName\",\n      render: (name: string, record: Job) => (\n        <span>\n          {record.testFlag && (\n            <Tag className={styles[\"test-tag\"]} color=\"#f56c6c\">\n              {formatMessage({ id: \"job-list.table.isTest\" })}\n            </Tag>\n          )}\n          {name}\n        </span>\n      ),\n    },\n    {\n      title: formatMessage({ id: \"bpo-job-list.filter.job-type\" }),\n      dataIndex: \"jobType\",\n      render: (jobType: JobType) =>\n        formatMessage({ id: `${jobType.toLowerCase()}-job.type` }),\n    },\n    {\n      title: formatMessage({ id: \"bpo-job-list.filter.job-status\" }),\n      dataIndex: \"jobStatus\",\n      render: (jobStatus: string) => {\n        const { color, backgroundColor, Icon } = TagStyle[jobStatus] || {};\n        return (\n          <Tag style={{ color, backgroundColor }} className={styles.tag}>\n            <Icon />\n            {formatMessage({ id: `job.status.${jobStatus.toUpperCase()}` })}\n          </Tag>\n        );\n      },\n    },\n    {\n      title: formatMessage({ id: \"bpo-job-list.table.column.create-time\" }),\n      dataIndex: \"createdTime\",\n      render: (createdTime: string) => dateFormat(createdTime),\n    },\n    {\n      title: formatMessage({ id: \"bpo-job-list.table.column.contact\" }),\n      dataIndex: \"contactEmail\",\n    },\n    {\n      title: formatMessage({ id: \"bpo-job-list.table.column.action\" }),\n      render: (record: BpoJob) => (\n        <Button\n          className={styles.view}\n          type=\"link\"\n          onClick={() => router.push(`/bpo-job/${record.id}`)}\n        >\n          {formatMessage({ id: \"common.view\" })}\n        </Button>\n      ),\n    },\n  ];\n\n  const getList = () => {\n    setLoading(true);\n    getBpoJobs({\n      pageIndex: currentPage - 1,\n      pageSize,\n      ...filter,\n    })\n      .then((resp) => {\n        if (resp.status === HttpStatus.OK) {\n          setData(resp.data.results);\n          setTotal(resp.data.totalElements);\n        } else {\n          message.error(mapStatusToErrorMessage(resp));\n        }\n      })\n      .catch((e) => message.error(mapStatusToErrorMessage(e)))\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    getList();\n  }, [currentPage, filter, pageSize]);\n\n  return (\n    <HeaderContentWrapperComponent\n      title={\n        <>\n          <RoundFolderOutlined />\n          {formatMessage({ id: \"bpo-job-list.title\" })}\n        </>\n      }\n    >\n      <Card\n        bordered={false}\n        className={`${globalStyles[\"with-shadow\"]} ${styles.list}`}\n      >\n        <FilterFormComponent\n          formItems={filterFormItems}\n          formStyle={{ marginBottom: 0 }}\n          formItemStyle={{ marginBottom: 15 }}\n          initialValue={filter}\n          onFilterValueChange={(newFilter) => {\n            setFilter(newFilter);\n            setCurrentPage(1);\n          }}\n          searchMode=\"click\"\n        />\n        <Divider className={styles.divider} />\n        <Table\n          columns={columns}\n          className={globalStyles.tableStriped}\n          scroll={{ x: \"max-content\" }}\n          dataSource={data}\n          rowKey=\"id\"\n          pagination={{\n            total,\n            pageSize,\n            current: currentPage,\n            onChange: (num, size) => {\n              setCurrentPage(num);\n              setPageSize(size);\n            },\n            showSizeChanger: true,\n            pageSizeOptions: PAGE_SIZE_OPTIONS,\n          }}\n          loading={loading}\n        />\n      </Card>\n    </HeaderContentWrapperComponent>\n  );\n}\n\nexport default JobList;\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/bpo-job/JobList.tsx"
    },
    "13": {
      "path": "/bpo-job/:jobId",
      "hideInMenu": true,
      "name": "job-detail",
      "file": "@/pages/bpo/bpo-job/JobDetail.tsx",
      "parentId": "4",
      "id": "13",
      "absPath": "/bpo-job/:jobId",
      "__content": "import { Spin } from \"antd\";\nimport React from \"react\";\n\nimport type { Dispatch } from \"@umijs/max\";\nimport { Outlet, history as router, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport type { Job } from \"@/types/job\";\nimport { JobType } from \"@/types/job\";\nimport EditableJobNameTitle from \"@/pages/job/job-detail/components/EditableJobNameTitle\";\nimport type { ConnectState } from \"@/models/connect\";\nimport JobStatusTag from \"@/pages/job/components/JobStatusTag\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { isMatchedLastPathSegment, queryToSearch } from \"@/utils/utils\";\n\ninterface JobDetailProps {\n  dispatch: Dispatch;\n  children: React.ReactNode;\n  job: Job;\n  loading?: boolean;\n}\n\nconst jobTabs = [\"overview\", \"data\", \"monitor\", \"workforce\"];\n\nfunction JobDetail({ children, job, loading = false }: JobDetailProps) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n  const { id, jobName, jobStatus, jobType } = job || {};\n\n  const menuItems = jobTabs\n    .filter((item) => jobType !== JobType.QA || item !== \"analysis\")\n    .map((tab: string) => ({\n      key: tab,\n      title: formatMessage({ id: `job-detail.${tab}` }),\n      action: () => {\n        router.replace({\n          pathname: `/bpo-job/${id}/${tab}`,\n          search: queryToSearch(location.query),\n        });\n      },\n    }));\n\n  const activeMenu = [jobTabs.find(isMatchedLastPathSegment)];\n\n  const Title = (\n    <>\n      <EditableJobNameTitle jobName={jobName || \"任务名称\"} allowEdit={false} />\n      {jobStatus && <JobStatusTag status={jobStatus} />}\n    </>\n  );\n\n  return (\n    <HeaderContentWrapperComponent\n      title={Title}\n      backTitle={formatMessage({ id: \"menu.job\" })}\n      onBack={() => {\n        router.goBack();\n      }}\n      menuItems={menuItems}\n      defaultSelectedKeys={activeMenu}\n    >\n      <Spin spinning={loading}>\n        <Outlet />\n      </Spin>\n    </HeaderContentWrapperComponent>\n  );\n}\n\nfunction mapStateToProps({ bpoJob }: ConnectState) {\n  return {\n    job: bpoJob.job,\n  };\n}\n\nexport default connect(mapStateToProps)(JobDetail);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/bpo-job/JobDetail.tsx"
    },
    "14": {
      "path": "/bpo-job/:jobId",
      "redirect": "/bpo-job/:jobId/overview",
      "parentId": "13",
      "id": "14",
      "absPath": "/bpo-job/:jobId"
    },
    "15": {
      "path": "/bpo-job/:jobId/overview",
      "name": "overview",
      "file": "@/pages/bpo/bpo-job/job-detail/Overview/index.tsx",
      "parentId": "13",
      "id": "15",
      "absPath": "/bpo-job/:jobId/overview",
      "__content": "import React, { useEffect, useState } from \"react\";\nimport type { Dispatch } from \"redux\";\nimport {\n  EditOutlined,\n  ClockCircleOutlined,\n  MessageOutlined,\n  ExperimentOutlined,\n} from \"@ant-design/icons\";\nimport { Button, Card, Col, Divider, Empty, message, Row, Spin } from \"antd\";\nimport { FormattedMessage, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport { dateFormat } from \"@/utils/time-util\";\nimport type { Template } from \"@/types/template\";\nimport type { JobInfoItemProp } from \"@/components/JobInfoItem\";\nimport JobInfoItem from \"@/components/JobInfoItem\";\nimport type { ConnectState } from \"@/models/connect\";\nimport type { Job } from \"@/types/job\";\nimport { JobStatus, JobType } from \"@/types/job\";\nimport { jobTypeInfo } from \"@/pages/job/components/JobType\";\nimport TimeoutEditModal from \"@/pages/job/job-detail/components/TimeoutEditModal\";\nimport withRound from \"@/components/RoundIcon\";\n\nimport styles from \"@/pages/job/job-detail/components/DatasetCard.less\";\n\nconst cardStyle = {\n  marginBottom: 24,\n};\n\ninterface OverviewProp {\n  dispatch: Dispatch;\n  job: Job;\n  template: Template;\n  loading: boolean;\n  timeUpdating: boolean;\n}\n\nfunction Overview({\n  job,\n  template,\n  loading = false,\n  dispatch,\n  timeUpdating,\n}: OverviewProp) {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n  const {\n    id: jobId,\n    jobType,\n    createdTime,\n    contactEmail,\n    testFlag,\n    jobDisplayId,\n    timeout,\n    recordNum,\n    workerNum,\n    description,\n    jobStatus,\n    globalSampleRate,\n  } = job || {};\n  const [jobBasicInfoItems, setJobIBasicInfoItems] = useState<\n    (JobInfoItemProp & { Icon: React.FC })[]\n  >([]);\n  const { type: templateType = \"UNKNOWN\" } = template || {};\n  const [timeVisible, setTimeVisible] = useState(false);\n\n  useEffect(() => {\n    if (job) {\n      const { Icon, label } =\n        jobTypeInfo[jobType] || jobTypeInfo[JobType.LABEL];\n\n      const items = [\n        {\n          key: \"jobType\",\n          Icon,\n          title: formatMessage({ id: label }),\n          content: formatMessage({ id: `template.type-list.${templateType}` }),\n        },\n        {\n          key: \"jobDisplayId\",\n          Icon,\n          title: formatMessage({ id: \"jobId\" }),\n          content: jobDisplayId,\n        },\n        {\n          key: \"creation\",\n          Icon: ClockCircleOutlined,\n          title: formatMessage({ id: \"job-detail.creation\" }),\n          content: dateFormat(createdTime),\n        },\n        {\n          key: \"contact\",\n          Icon: MessageOutlined,\n          title: formatMessage({ id: \"job-detail.contact\" }),\n          content: contactEmail,\n        },\n        {\n          key: \"isTest\",\n          Icon: ExperimentOutlined,\n          title: formatMessage({ id: \"job-list.table.isTest\" }),\n          content: formatMessage({ id: testFlag ? \"common.yes\" : \"common.no\" }),\n        },\n      ];\n\n      if (jobType === JobType.QA) {\n        items.push({\n          key: \"globalSampleRate\",\n          Icon: ExperimentOutlined,\n          title: formatMessage({ id: \"job.qa.worker-sample-rate\" }),\n          content: globalSampleRate.toString(),\n        });\n      }\n\n      setJobIBasicInfoItems(items);\n    }\n  }, [job]);\n\n  const handleTimeSave = (val: number) => {\n    const payload = {\n      onSuccess: () => {\n        setTimeVisible(false);\n      },\n      onError: (detail: string) => {\n        message.error(detail);\n      },\n    };\n\n    dispatch({\n      type: \"bpoJob/updateJobTimeout\",\n      payload: { ...payload, timeout: val, jobId },\n    });\n  };\n\n  return (\n    <Spin spinning={loading}>\n      <Card bordered={false} className=\"with-shadow\" style={cardStyle}>\n        <Row gutter={[0, 15]}>\n          {jobBasicInfoItems.map((item) => {\n            const { Icon, title, content, key } = item;\n            const RoundIcon = withRound(Icon);\n            return (\n              <Col xs={24} sm={12} md={6} key={key}>\n                <JobInfoItem\n                  icon={<RoundIcon />}\n                  title={title}\n                  content={content}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n      </Card>\n      <Card bordered={false} className=\"with-shadow\" style={cardStyle}>\n        <Row gutter={[24, 24]}>\n          <Col xs={24} sm={12} md={6}>\n            <JobInfoItem\n              title={\n                <div>\n                  {formatMessage({ id: \"job-detail.timeout\" })}\n                  {jobStatus !== JobStatus.FINISHED && (\n                    <Button\n                      type=\"link\"\n                      className={styles.edit}\n                      onClick={() => setTimeVisible(true)}\n                      icon={<EditOutlined />}\n                    />\n                  )}\n                </div>\n              }\n              content={\n                <>\n                  <div className={styles.number}>\n                    {timeout ? timeout / 60 : \"-\"}\n                  </div>\n                  <FormattedMessage id=\"common.unit.minute\" />\n                </>\n              }\n            />\n          </Col>\n          <Col span={1}>\n            <Divider type=\"vertical\" style={{ height: \"100%\" }} />\n          </Col>\n          <Col xs={24} sm={12} md={6}>\n            <JobInfoItem\n              title={formatMessage({ id: \"job-detail.distribution\" })}\n              content={\n                <Row>\n                  {jobType === JobType.LABEL && (\n                    <Col xs={24} sm={8} className=\"text-center\">\n                      <div className={styles.number}>{recordNum || \"-\"}</div>\n                      <FormattedMessage id=\"job-detail.record-num\" />\n                    </Col>\n                  )}\n                  <Col xs={24} sm={7} className=\"text-center\">\n                    <div className={styles.number}>{workerNum || \"-\"}</div>\n                    <FormattedMessage id=\"job-detail.worker-num\" />\n                  </Col>\n                </Row>\n              }\n            />\n          </Col>\n          <Col span={1}>\n            <Divider type=\"vertical\" style={{ height: \"100%\" }} />\n          </Col>\n        </Row>\n      </Card>\n\n      <Card bordered={false} className=\"with-shadow\" style={cardStyle}>\n        <div style={{ color: \"#848899\", lineHeight: \"32px\" }}>\n          {formatMessage({\n            id: \"labeling-job-create.wizard.complete.form.description\",\n          })}\n        </div>\n        {description ? (\n          <div\n            dangerouslySetInnerHTML={{ __html: description }}\n            className=\"ck-editor-content editor-content-img w-e-text\"\n            style={{ width: \"100%\" }}\n          />\n        ) : (\n          <Empty\n            description={formatMessage(\n              { id: \"common.empty.with-label\" },\n              {\n                label: formatMessage({\n                  id: \"labeling-job-create.wizard.complete.form.description\",\n                }),\n              }\n            )}\n          />\n        )}\n      </Card>\n      <TimeoutEditModal\n        visible={timeVisible}\n        timeout={timeout}\n        submitting={timeUpdating}\n        onCancel={() => setTimeVisible(false)}\n        onSubmit={handleTimeSave}\n      />\n    </Spin>\n  );\n}\n\nfunction mapStateToProps({ bpoJob, loading }: ConnectState) {\n  return {\n    job: bpoJob.job,\n    template: bpoJob.template,\n    timeUpdating: loading.effects[\"bpoJob/updateJobTimeout\"],\n  };\n}\n\nexport default connect(mapStateToProps)(Overview);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/bpo-job/job-detail/Overview/index.tsx"
    },
    "16": {
      "path": "/bpo-job/:jobId/data",
      "name": "data",
      "file": "@/pages/bpo/bpo-job/job-detail/DataCenter/index.tsx",
      "parentId": "13",
      "id": "16",
      "absPath": "/bpo-job/:jobId/data",
      "__content": "import { Radio, Card, RadioChangeEvent } from \"antd\";\nimport { useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport Filter from \"./Filter\";\nimport List from \"./List\";\nimport FootBar from \"./FootBar\";\nimport { ConnectState } from \"@/models/connect\";\nimport type { Dispatch } from \"redux\";\nimport WorkCountDetailModal from \"@/pages/bpo/bpo-job/job-detail/DataCenter/WorkCountDetailModal\";\nimport DataReleaseModal from \"@/pages/project/data-center/components/data-release/DataReleaseModal\";\nimport DataExport from \"@/pages/bpo/bpo-job/job-detail/DataCenter/DataExport\";\nimport { Job } from \"@/types/job\";\nimport { WorkflowDataRecord } from \"@/types/v3\";\nimport { useEffect } from \"react\";\n\ntype Props = {\n  job: Job;\n  selectedData: WorkflowDataRecord[];\n  finished: boolean;\n  dispatch: Dispatch;\n  visible: Record<string, boolean>;\n};\n\nenum DataStatus {\n  FINISHED = \"FINISHED\",\n  UNFINISHED = \"UNFINISHED\",\n}\n\nfunction DataCenter({ finished, job, selectedData, dispatch, visible }: Props) {\n  const { formatMessage } = useIntl();\n\n  const updateFinished = (e: RadioChangeEvent) => {\n    dispatch({\n      type: \"bpoJob/toggleFinished\",\n      payload: e.target.value === DataStatus.FINISHED,\n    });\n  };\n\n  const close = () => {\n    dispatch({\n      type: \"bpoJob/toggleVisible\",\n      payload: { releaseVisible: false },\n    });\n  };\n\n  const refresh = () => {\n    dispatch({ type: \"bpoJob/getBpoJobData\" });\n  };\n\n  useEffect(() => {\n    dispatch({ type: \"bpoJob/resetDataState\" });\n  }, [job?.id, finished]);\n\n  return (\n    <div>\n      <Radio.Group\n        style={{ marginBottom: 24 }}\n        value={finished ? DataStatus.FINISHED : DataStatus.UNFINISHED}\n        onChange={updateFinished}\n      >\n        <Radio.Button value={DataStatus.UNFINISHED}>\n          {formatMessage({\n            id: \"bpo-job-detail.monitor.qa.progress.unworkedRows\",\n          })}\n        </Radio.Button>\n        <Radio.Button value={DataStatus.FINISHED}>\n          {formatMessage({\n            id: \"project.detail.data-center.data-state.completed\",\n          })}\n        </Radio.Button>\n      </Radio.Group>\n      <Card bordered={false} className=\"with-shadow\">\n        <Filter />\n        <List />\n        <FootBar />\n      </Card>\n      <WorkCountDetailModal />\n      <DataReleaseModal\n        visible={visible.releaseVisible}\n        role=\"bpo\"\n        onClose={close}\n        projectId={job?.projectId}\n        jobId={job?.id}\n        selectedRecordIds={selectedData?.map((i) => i.recordId)}\n        onRefresh={refresh}\n      />\n      <DataExport />\n    </div>\n  );\n}\n\nfunction mapStateToProps({ bpoJob }: ConnectState) {\n  return {\n    job: bpoJob.job,\n    finished: bpoJob.finished,\n    selectedData: bpoJob.selectedData,\n    visible: bpoJob.visible,\n  };\n}\n\nexport default connect(mapStateToProps)(DataCenter);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/bpo-job/job-detail/DataCenter/index.tsx"
    },
    "17": {
      "path": "/bpo-job/:jobId/monitor",
      "name": "monitor",
      "file": "@/pages/bpo/bpo-job/job-detail/MonitorV3/index.tsx",
      "parentId": "13",
      "id": "17",
      "absPath": "/bpo-job/:jobId/monitor",
      "__content": "import { connect } from \"react-redux\";\nimport type { ConnectState } from \"@/models/connect\";\nimport type { Job } from \"@/types/job\";\nimport { Card, Col, Row } from \"antd\";\nimport FlowJobProgress from \"@/pages/project/workflow/WorkflowDetail/components/FlowJobProgress\";\nimport FlowJobEfficiency from \"@/pages/project/workflow/WorkflowDetail/components/FlowJobEfficiency\";\nimport FlowJobHistogram from \"@/pages/project/workflow/WorkflowDetail/components/FlowJobHistogram\";\nimport BpoWorkloadV3 from \"../components/BpoWorkloadV3\";\n\ninterface Props {\n  job: Job;\n}\n\nfunction MonitorV3({ job }: Props) {\n  return (\n    <>\n      <Card>\n        <Row>\n          <Col\n            span={12}\n            style={{ borderRight: \"1px solid #dcdfe3\", padding: 24 }}\n          >\n            <FlowJobProgress job={job} role=\"bpo\" />\n          </Col>\n          <Col span={12} style={{ padding: 24 }}>\n            <FlowJobEfficiency job={job} role=\"bpo\" />\n          </Col>\n        </Row>\n      </Card>\n      <FlowJobHistogram job={job} role=\"bpo\" />\n      <BpoWorkloadV3 job={job} />\n    </>\n  );\n}\n\nfunction mapStateToProps({ bpoJob, loading }: ConnectState) {\n  return {\n    job: bpoJob.job,\n    loading:\n      (loading.effects[\"jobDetail/getWorkers\"] &&\n        !loading.effects[\"jobDetail/getJob\"]) ||\n      false,\n  };\n}\n\nexport default connect(mapStateToProps)(MonitorV3);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/bpo-job/job-detail/MonitorV3/index.tsx"
    },
    "18": {
      "path": "/bpo-job/:jobId/workforce",
      "name": "workforce",
      "file": "@/pages/bpo/bpo-job/job-detail/Workforce/index.tsx",
      "parentId": "13",
      "id": "18",
      "absPath": "/bpo-job/:jobId/workforce",
      "__content": "import { useEffect, useState } from \"react\";\nimport { Card, Table, Button, Divider, message } from \"antd\";\nimport { useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport type { TableRowSelection } from \"antd/es/table/interface\";\n\nimport FilterFormComponent from \"@/components/FilterFormComponent\";\nimport type { FormItem } from \"@/types/common\";\nimport { FormItemType } from \"@/types/common\";\nimport { pathToRegexp } from \"path-to-regexp\";\n\nimport type { ConnectState } from \"@/models/connect\";\nimport { Job } from \"@/types/job\";\nimport { HttpStatus } from \"@/types/http\";\nimport BpoWorkerAddModal from \"@/pages/bpo/bpo-job/job-detail/components/BpoWorkerAddModal\";\nimport {\n  getBpoJobWorkers,\n  resetBpoJobWorkers,\n  revokeBpoJobWorkers,\n} from \"@/services/bpo\";\nimport { dateFormat } from \"@/utils/time-util\";\nimport {\n  deprecatedWorker,\n  formatOptOutWorker,\n  mapStatusToErrorMessage,\n} from \"@/utils/utils\";\nimport { DEFAULT_PAGE_SIZE, PAGE_SIZE_OPTIONS } from \"@/utils/constants\";\n\nimport globalStyles from \"@/global.less\";\nimport workForceStyles from \"@/pages/bpo/bpo-job/job-detail/Workforce/index.less\";\nimport styles from \"@/pages/bpo/bpo-job/JobList.less\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\n\ninterface Props {\n  job: Job;\n}\n\nexport enum BpoWorkerStatus {\n  CONFIRMED = \"CONFIRMED\",\n  ASSIGNED = \"ASSIGNED\",\n  REJECT = \"REJECT\",\n  DETAINED = \"DETAINED\",\n  DECLINED = \"DECLINED\",\n}\n\nexport const revokeWorkerStatus = [\n  BpoWorkerStatus.ASSIGNED,\n  BpoWorkerStatus.CONFIRMED,\n  BpoWorkerStatus.DETAINED,\n];\n\nconst COLORS = {\n  [BpoWorkerStatus.CONFIRMED]: \"#52c41a\",\n  [BpoWorkerStatus.ASSIGNED]: \"#5187f3\",\n  [BpoWorkerStatus.REJECT]: \"#e356e1\",\n  [BpoWorkerStatus.DETAINED]: \"#fdb314\",\n  [BpoWorkerStatus.DECLINED]: \"#f56c6c\",\n};\n\nfunction Workforce({ job }: Props) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [visible, setVisible] = useState({ workforce: false, batchQa: false });\n  const [filter, setFilter] = useState({});\n  const [data, setData] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(DEFAULT_PAGE_SIZE);\n  // const [disableBatchQa, setDisableBatchQa] = useState(false);\n\n  // const isQAJob = job?.jobType === JobType.QA;\n  const pathSegments = pathToRegexp(`/bpo-job/:jobId/:tab`).exec(\n    location.pathname\n  );\n  const [, id] = pathSegments;\n  const jobId = job?.id || id;\n\n  const getList = () => {\n    setLoading(true);\n    getBpoJobWorkers({\n      jobId,\n      pageIndex: currentPage - 1,\n      pageSize,\n      ...filter,\n    })\n      .then((resp) => {\n        if (resp.status === HttpStatus.OK) {\n          setData(resp.data.results);\n          setTotal(resp.data.totalElements);\n        } else {\n          message.error(mapStatusToErrorMessage(resp));\n        }\n      })\n      .catch((e) => message.error(mapStatusToErrorMessage(e)))\n      .finally(() => setLoading(false));\n  };\n\n  const resetWorkers = (workerIds?: string[]) => {\n    setLoading(true);\n    resetBpoJobWorkers(\n      jobId,\n      workerIds ||\n        selectedRows\n          .filter((item) => item.status === BpoWorkerStatus.DECLINED)\n          .map((item) => item.workerId)\n    )\n      .then((resp) => {\n        if (resp.status === HttpStatus.OK) {\n          message.success(\n            formatMessage({ id: \"common.message.success.operation\" })\n          );\n          getList();\n          setSelectedRows([]);\n        } else {\n          message.error(mapStatusToErrorMessage(resp));\n        }\n      })\n      .catch((e) => message.error(mapStatusToErrorMessage(e)))\n      .finally(() => setLoading(false));\n  };\n\n  const revokeWorkers = (workerIds?: string[]) => {\n    setLoading(true);\n    revokeBpoJobWorkers(\n      jobId,\n      workerIds ||\n        selectedRows\n          .filter((item) => revokeWorkerStatus.includes(item.status))\n          .map((item) => item.workerId)\n    )\n      .then((resp) => {\n        if (resp.status === HttpStatus.OK) {\n          message.success(\n            formatMessage({ id: \"common.message.success.operation\" })\n          );\n          getList();\n          setSelectedRows([]);\n        } else {\n          message.error(mapStatusToErrorMessage(resp));\n        }\n      })\n      .catch((e) => message.error(mapStatusToErrorMessage(e)))\n      .finally(() => setLoading(false));\n  };\n\n  const filterFormItems: FormItem[] = [\n    {\n      key: \"uniqueName\",\n      label: (\n        <span className={styles[\"filter-label\"]}>\n          {formatMessage({ id: \"bpo-worker.table.column.name\" })}\n        </span>\n      ),\n      type: FormItemType.Text,\n      style: { width: 160 },\n    },\n    {\n      key: \"statusList\",\n      label: (\n        <span className={styles[\"filter-label\"]}>\n          {formatMessage({ id: \"bpo-job-detail.workforce.filter.status\" })}\n        </span>\n      ),\n      type: FormItemType.Multiple,\n      options: Object.keys(BpoWorkerStatus),\n      optionLabel: (status) =>\n        formatMessage({\n          id: `bpo-job-detail.workforce.columns.status.${status.toLowerCase()}`,\n        }),\n      style: { width: 160 },\n    },\n  ];\n\n  const columns = [\n    {\n      title: formatMessage({ id: \"bpo-job-detail.workforce.columns.contact\" }),\n      dataIndex: \"uniqueName\",\n      render: (uniqueName: string, record: Record<string, any>) =>\n        formatOptOutWorker(uniqueName, record.workerId),\n    },\n    {\n      title: formatMessage({ id: \"bpo-job-detail.workforce.columns.add-time\" }),\n      dataIndex: \"assignTime\",\n      render: (assignTime: string) => dateFormat(assignTime),\n    },\n    {\n      title: formatMessage({ id: \"bpo-job-detail.workforce.columns.status\" }),\n      dataIndex: \"status\",\n      render: (status: string) => (\n        <span>\n          <i\n            className={workForceStyles[\"status-point\"]}\n            style={{\n              backgroundColor: COLORS[status],\n            }}\n          />\n          {formatMessage({\n            id: `bpo-job-detail.workforce.columns.status.${status.toLowerCase()}`,\n          })}\n        </span>\n      ),\n    },\n    {\n      title: formatMessage({ id: \"common.operation\" }),\n      render: (record: Record<string, any>) => (\n        <>\n          {revokeWorkerStatus.includes(record.status) && (\n            <Button\n              type=\"link\"\n              className={workForceStyles.action}\n              onClick={() => revokeWorkers([record.workerId])}\n            >\n              {formatMessage({\n                id: \"bpo-job-detail.workforce.columns.action.disable\",\n              })}\n            </Button>\n          )}\n          {record.status === BpoWorkerStatus.DECLINED && (\n            <Button\n              type=\"link\"\n              className={`${workForceStyles.action} ${workForceStyles.disable}`}\n              onClick={() => resetWorkers([record.workerId])}\n            >\n              {formatMessage({\n                id: \"bpo-job-detail.workforce.columns.action.enable\",\n              })}\n            </Button>\n          )}\n        </>\n      ),\n    },\n  ];\n\n  const rowSelection: TableRowSelection<any> = {\n    selectedRowKeys: selectedRows.map((item) => item.workerId),\n    onChange: (selectedRowKeys, rows) => setSelectedRows(rows),\n    getCheckboxProps: (record: any) => ({\n      disabled:\n        record.status === BpoWorkerStatus.REJECT ||\n        record.workerEmail === deprecatedWorker,\n    }),\n  };\n\n  useEffect(() => {\n    getList();\n  }, [currentPage, job?.id, filter, pageSize]);\n\n  return (\n    <div className={workForceStyles.box}>\n      <div className={workForceStyles[\"add-worker\"]}>\n        {/*<Button*/}\n        {/*  style={{ marginRight: 8 }}*/}\n        {/*  disabled={disableBatchQa}*/}\n        {/*  onClick={() => setVisible({ ...visible, batchQa: true })}*/}\n        {/*>*/}\n        {/*  {formatMessage({ id: 'qa.batch.setting.create' })}*/}\n        {/*</Button>*/}\n        <Button\n          type=\"primary\"\n          onClick={() => setVisible({ ...visible, workforce: true })}\n        >\n          {formatMessage({ id: \"job-detail.workforce.add\" })}\n        </Button>\n      </div>\n      <Card\n        bordered={false}\n        className={`${globalStyles[\"with-shadow\"]} ${styles.list}`}\n      >\n        <FilterFormComponent\n          formItems={filterFormItems}\n          formStyle={{ marginBottom: 0 }}\n          formItemStyle={{ marginBottom: 15 }}\n          initialValue={filter}\n          onFilterValueChange={(newFilter) => {\n            setFilter(newFilter);\n            setCurrentPage(1);\n          }}\n          searchMode=\"click\"\n        />\n        <Divider className={workForceStyles.divider} />\n        <div className={workForceStyles[\"table-actions\"]}>\n          <div className={workForceStyles[\"btn-group\"]}>\n            <Button\n              danger\n              ghost\n              disabled={\n                selectedRows.filter((item) =>\n                  revokeWorkerStatus.includes(item.status)\n                ).length === 0\n              }\n              onClick={() => revokeWorkers()}\n            >\n              {formatMessage({\n                id: \"bpo-job-detail.workforce.columns.action.disable\",\n              })}\n            </Button>\n            <Button\n              className={workForceStyles.btn}\n              type=\"primary\"\n              disabled={\n                selectedRows.filter(\n                  (item) => item.status === BpoWorkerStatus.DECLINED\n                ).length === 0\n              }\n              onClick={() => resetWorkers()}\n            >\n              {formatMessage({\n                id: \"bpo-job-detail.workforce.columns.action.enable\",\n              })}\n            </Button>\n          </div>\n          {selectedRows.length > 0 && (\n            <p className={workForceStyles.statistics}>\n              {formatMessage(\n                { id: \"bpo-worker.table.statistics\" },\n                {\n                  approvedNum: selectedRows.length,\n                  totalNum: total,\n                }\n              )}\n            </p>\n          )}\n        </div>\n        <Divider className={workForceStyles[\"divider-two\"]} />\n        <Table\n          columns={columns}\n          className={globalStyles.tableStriped}\n          scroll={{ x: \"max-content\" }}\n          dataSource={data}\n          rowSelection={rowSelection}\n          rowKey=\"workerId\"\n          pagination={{\n            total,\n            pageSize,\n            current: currentPage,\n            onChange: (num, size) => {\n              setCurrentPage(num);\n              setPageSize(size);\n            },\n            showSizeChanger: true,\n            pageSizeOptions: PAGE_SIZE_OPTIONS,\n          }}\n          loading={loading}\n        />\n        <BpoWorkerAddModal\n          visible={visible.workforce}\n          jobId={job?.id}\n          onClose={() => {\n            setVisible({ ...visible, workforce: false });\n            getList();\n          }}\n        />\n        {/*<WorkerBatchModal*/}\n        {/*  isBPO*/}\n        {/*  visible={visible.batchQa}*/}\n        {/*  jobId={jobId}*/}\n        {/*  onSave={() => {*/}\n        {/*    setVisible({ ...visible, batchQa: false });*/}\n        {/*    getList();*/}\n        {/*  }}*/}\n        {/*  onClose={() => setVisible({ ...visible, batchQa: false })}*/}\n        {/*  isQAJob={isQAJob}*/}\n        {/*  setDisableBatchQa={setDisableBatchQa}*/}\n        {/*/>*/}\n      </Card>\n    </div>\n  );\n}\n\nfunction mapStateToProps({ bpoJob, loading }: ConnectState) {\n  return {\n    job: bpoJob.job,\n    workers: bpoJob.workers,\n    totalWorkers: bpoJob.totalWorkers,\n    workerEmails: bpoJob.workerEmails,\n    loading:\n      (loading.effects[\"jobDetail/getWorkers\"] &&\n        !loading.effects[\"jobDetail/getJob\"]) ||\n      false,\n    deleting: loading.effects[\"jobDetail/removeWorkers\"],\n  };\n}\n\nexport default connect(mapStateToProps)(Workforce);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/bpo-job/job-detail/Workforce/index.tsx"
    },
    "19": {
      "path": "/projects/:projectId",
      "name": "project-detail",
      "hideInMenu": true,
      "file": "@/pages/project/ProjectDetail.tsx",
      "parentId": "4",
      "id": "19",
      "absPath": "/projects/:projectId",
      "__content": "import type { ReactNode } from \"react\";\nimport { useEffect } from \"react\";\nimport type { Dispatch } from \"@umijs/max\";\nimport { Outlet, history as router, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport { pathToRegexp } from \"path-to-regexp\";\n\nimport type { ConnectState } from \"@/models/connect\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport type { Project } from \"@/types/project\";\nimport ProjectDetailBreadcrumb from \"@/components/breadcrumbs/ProjectDetailBreadcrumb\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { queryToSearch } from \"@/utils\";\n\ninterface ProjectDetailProp {\n  dispatch: Dispatch;\n  children: ReactNode;\n  currentProject: Project;\n  isReadonly: boolean;\n}\n\nenum TabMenu {\n  DataCenter = \"data-center\",\n  TemplateCenter = \"template-center\",\n  Workflow = \"workflow\",\n}\n\nfunction ProjectDetail({\n  dispatch,\n  children,\n  currentProject,\n  isReadonly,\n}: ProjectDetailProp) {\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocationWithQuery();\n\n  const [, projectId] =\n    pathToRegexp(`/projects/:projectId/(.*)`).exec(pathname) || [];\n\n  const projectDisplayId = currentProject?.projectDisplayId;\n\n  const supportTabMenu = [\n    TabMenu.DataCenter,\n    TabMenu.Workflow,\n    TabMenu.TemplateCenter,\n  ];\n\n  useEffect(() => {\n    dispatch({ type: \"projectAccess/getProjectAccess\", payload: projectId });\n    dispatch({ type: \"project/getProject\", payload: { projectId } });\n  }, []);\n\n  const menuItems = supportTabMenu\n    .filter((tabName) => !(tabName === TabMenu.Workforce))\n    .map((tabName) => {\n      return {\n        key: tabName,\n        title: formatMessage({ id: `project.detail.${tabName}` }),\n        action: () => {\n          const targetPath = `/projects/${projectId}/${tabName}`;\n          if (pathname !== targetPath) {\n            router.replace({\n              pathname: targetPath,\n              search: queryToSearch({ projectDisplayId }),\n            });\n          }\n        },\n      };\n    });\n\n  const activeMenu = supportTabMenu.find((tabName) =>\n    pathname.includes(tabName)\n  );\n\n  const getProjectId = (displayId: string) => {\n    if (!displayId) {\n      return \"\";\n    }\n\n    return `[${displayId}]`;\n  };\n\n  const Title = (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <span>\n        {`${formatMessage({ id: \"job-list.title\" })}${\n          currentProject?.name\n        } ${getProjectId(projectDisplayId)}${\n          isReadonly\n            ? formatMessage({ id: \"project-access.job-list.title\" })\n            : \"\"\n        }\n        `}\n      </span>\n    </div>\n  );\n\n  return (\n    <HeaderContentWrapperComponent\n      title={Title}\n      backTitle={\n        <ProjectDetailBreadcrumb\n          projectId={projectId}\n          displayId={projectDisplayId}\n        />\n      }\n      onBack={() => {}}\n      menuItems={menuItems}\n      defaultSelectedKeys={[activeMenu]}\n    >\n      <Outlet />\n    </HeaderContentWrapperComponent>\n  );\n}\n\nfunction mapStateToProps({ project, projectAccess }: ConnectState) {\n  return {\n    currentProject: project.currentProject,\n    isReadonly:\n      projectAccess.projectAccess === null ||\n      projectAccess.projectAccess === \"VIEW\",\n  };\n}\n\nexport default connect(mapStateToProps)(ProjectDetail);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/ProjectDetail.tsx"
    },
    "20": {
      "path": "/projects/:projectId/template-center",
      "name": "template",
      "file": "@/pages/project/template-center/TemplateCenter.tsx",
      "parentId": "19",
      "id": "20",
      "absPath": "/projects/:projectId/template-center",
      "__content": "import React, { ReactNode, useEffect, useState } from \"react\";\nimport { Card, Button, Table, Divider, message, Modal, Popconfirm } from \"antd\";\nimport { history, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport type { ColumnProps } from \"antd/es/table\";\n\nimport TemplateCreationModal from \"@/pages/project/template-center/TemplateCreationModal\";\nimport {\n  cloneProjectTemplate,\n  getProjectTemplates,\n} from \"@/services/template-v3\";\nimport type { ProjectTemplate } from \"@/types/v3\";\nimport {\n  mapStatusToErrorMessage,\n  openTemplatePreviewPageV3,\n  queryToSearch,\n} from \"@/utils/utils\";\nimport { HttpStatus } from \"@/types/http\";\nimport PreviewRecordIdSelectionModal from \"@/pages/project/template-center/components/PreviewRecordIdSelectionModal\";\nimport { base64Encode } from \"@/utils/string-util\";\nimport { HistoryOutlined } from \"@ant-design/icons\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport TemplateEditHistoryModal from \"@/pages/project/template-center/components/TemplateEditHistoryModal\";\nimport { ConnectState } from \"@/models/connect\";\n\nconst TemplateCenter: React.FC<{ isReadonly: boolean }> = ({ isReadonly }) => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [currentTemplate, setCurrentTemplate] =\n    useState<ProjectTemplate | null>(null);\n  const [historyTemplateId, setHistoryTemplateId] = useState<string | null>(\n    null\n  );\n  const [templates, setTemplates] = useState<ProjectTemplate[]>([]);\n  const [loading, setLoading] = useState(false);\n  const location = useLocationWithQuery();\n  const { formatMessage } = useIntl();\n  const [, projectId] =\n    pathToRegexp(\"/projects/:projectId/template-center\").exec(\n      location.pathname\n    ) || [];\n\n  const fetchTemplates = () => {\n    setLoading(true);\n    getProjectTemplates(projectId)\n      .then((resp) => {\n        setTemplates(resp.data);\n      })\n      .catch((err) => {\n        message.error(mapStatusToErrorMessage(err));\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    if (!projectId) {\n      return;\n    }\n\n    fetchTemplates();\n  }, [projectId]);\n\n  const showTemplateEditConfirm = (\n    templateId: string,\n    runningFlowNum: number | null\n  ) => {\n    const gotoEditPage = () => {\n      history.push({\n        pathname: `/projects/${projectId}/template-center/edit`,\n        search: queryToSearch({\n          templateId,\n          scope: \"PRIVATE\",\n          action: \"UPDATE\",\n        }),\n      });\n    };\n\n    if (runningFlowNum) {\n      Modal.confirm({\n        title: formatMessage({ id: \"job-detail.template.edit-warning-title\" }),\n        content: formatMessage(\n          { id: \"job-detail.template.edit-warning-v3\" },\n          { count: runningFlowNum }\n        ),\n        onOk: gotoEditPage,\n      });\n    } else {\n      gotoEditPage();\n    }\n  };\n\n  const columns: ColumnProps<ProjectTemplate>[] = [\n    {\n      title: formatMessage({ id: \"v3.template-name\" }),\n      dataIndex: \"title\",\n    },\n    {\n      title: formatMessage({ id: \"template.type\" }),\n      dataIndex: \"type\",\n      render: (t) =>\n        t ? formatMessage({ id: `template.type-list.${t}` }) : \"\",\n    },\n    {\n      title: formatMessage({\n        id: \"project.detail.data-center.filter.data-type\",\n      }),\n      dataIndex: \"dataType\",\n      render: (t) => (t ? formatMessage({ id: `data.type.${t}` }) : \"\"),\n    },\n    {\n      title: formatMessage({ id: \"running-flow-num\" }),\n      dataIndex: \"runningFlowNum\",\n      render: (n) => n || 0,\n    },\n    {\n      title: formatMessage({ id: \"edit-history\" }),\n      render: (row) => (\n        <HistoryOutlined\n          style={{ cursor: \"pointer\" }}\n          onClick={() => {\n            setHistoryTemplateId(row.id);\n          }}\n        />\n      ),\n    },\n    {\n      title: formatMessage({ id: \"common.operation\" }),\n      render: (row) => (\n        <>\n          <Button\n            style={{ paddingLeft: 0 }}\n            type=\"link\"\n            onClick={(e) => {\n              e.preventDefault();\n              setCurrentTemplate(row);\n            }}\n          >\n            {formatMessage({ id: \"common.preview\" })}\n          </Button>\n          <Divider type=\"vertical\" />\n          <Popconfirm\n            title={formatMessage({ id: \"template-clone-confirm\" })}\n            disabled={isReadonly}\n            onConfirm={(e) => {\n              e.preventDefault();\n              cloneProjectTemplate(row.id).then((resp) => {\n                if (resp.status === HttpStatus.OK) {\n                  fetchTemplates();\n                } else {\n                  message.error(mapStatusToErrorMessage(resp));\n                }\n              });\n            }}\n          >\n            <Button\n              style={{ paddingLeft: 0 }}\n              type=\"link\"\n              disabled={isReadonly}\n            >\n              {formatMessage({ id: \"common.clone\" })}\n            </Button>\n          </Popconfirm>\n          <Divider type=\"vertical\" />\n          <Button\n            style={{ paddingLeft: 0 }}\n            type=\"link\"\n            disabled={isReadonly}\n            onClick={(e) => {\n              e.preventDefault();\n              showTemplateEditConfirm(row.id, row.runningFlowNum);\n            }}\n          >\n            {formatMessage({ id: \"common.edit\" })}\n          </Button>\n        </>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <div\n        style={{\n          marginBottom: 24,\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <Button\n          type=\"primary\"\n          onClick={(e) => {\n            e.preventDefault();\n            setModalVisible(true);\n          }}\n          disabled={isReadonly}\n        >\n          {formatMessage({ id: \"template-create\" })}\n        </Button>\n      </div>\n      <Card>\n        <Table\n          rowKey=\"id\"\n          className=\"tableStriped\"\n          dataSource={templates}\n          columns={columns}\n          loading={loading}\n          pagination={false}\n        />\n        <TemplateCreationModal\n          visible={modalVisible}\n          onCancel={() => setModalVisible(false)}\n          projectId={projectId}\n        />\n      </Card>\n      <PreviewRecordIdSelectionModal\n        template={currentTemplate}\n        onCancel={() => {\n          setCurrentTemplate(null);\n        }}\n        onOk={(source) => {\n          openTemplatePreviewPageV3({\n            templateId: currentTemplate.id,\n            projectId,\n            source: base64Encode(source),\n            scope: \"PRIVATE\",\n          });\n          setCurrentTemplate(null);\n        }}\n      />\n      <TemplateEditHistoryModal\n        templateId={historyTemplateId}\n        onCancel={() => {\n          setHistoryTemplateId(null);\n        }}\n      />\n    </>\n  );\n};\n\nfunction mapStateToProps({ projectAccess }: ConnectState) {\n  return {\n    isReadonly:\n      projectAccess.projectAccess === null ||\n      projectAccess.projectAccess === \"VIEW\",\n  };\n}\n\nexport default connect(mapStateToProps)(TemplateCenter);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/template-center/TemplateCenter.tsx"
    },
    "21": {
      "path": "/projects/:projectId/template-center/edit",
      "name": "template",
      "file": "@/pages/project/template-center/TemplateCreation.tsx",
      "parentId": "19",
      "id": "21",
      "absPath": "/projects/:projectId/template-center/edit",
      "__content": "import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Button, Card, message } from \"antd\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport { history, useIntl } from \"umi\";\n\nimport Step1 from \"@/pages/project/template-center/components/Step1\";\nimport Step2 from \"@/pages/project/template-center/components/Step2\";\nimport useTemplateV2 from \"@/hooks/useTemplateV2\";\nimport {\n  ProjectTemplate,\n  ProjectTemplate as ProjectTemplateTool,\n} from \"@/pages/job/components/JobTemplateEditor/tool-config/templates/types\";\n\nimport {\n  createProjectTemplate,\n  updateProjectTemplate,\n} from \"@/services/template-v3\";\nimport { HttpStatus } from \"@/types/http\";\nimport { mapStatusToErrorMessage, queryToSearch } from \"@/utils/utils\";\nimport type { BaseResp } from \"@/types/common\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { TemplateType } from \"@/types/template\";\nimport EmbeddedTemplateCreation from \"./EmbeddedTemplateCreation\";\nimport { TemplateScope } from \"@/types\";\n\nconst newVersion = [\n  TemplateType.LLM_CONVERSATION,\n  TemplateType.LLM_QUESTION_ANSWER,\n];\n\nenum EditStep {\n  BasicInfoStep = \"step1\",\n  ConfigStep = \"step2\",\n}\n\nconst TemplateCreation: React.FC = () => {\n  const { formatMessage } = useIntl();\n  const {\n    query: { templateId, action },\n    pathname,\n  } = useLocationWithQuery();\n  const [, projectId] =\n    pathToRegexp(\"/projects/:projectId/template-center/edit\").exec(pathname) ||\n    [];\n  const [activateStep, setActivateStep] = useState<EditStep>(\n    EditStep.BasicInfoStep\n  );\n  // @ts-ignore\n  const [templateInfo, dispatch, loading] = useTemplateV2({\n    templateId: templateId as string,\n  });\n\n  const ontologyEditorRef = useRef(null);\n  const issueTypeEditorRef = useRef([]);\n  const templateType = useMemo(() => {\n    return templateInfo.type;\n  }, [templateInfo]);\n  useEffect(() => {\n    if (templateInfo.questionType) {\n      issueTypeEditorRef.current = JSON.parse(templateInfo.questionType);\n    }\n  }, [templateInfo.questionType]);\n\n  const upsertTemplate = (): Promise<BaseResp<any>> => {\n    return new Promise((resolve, reject) => {\n      try {\n        const ontology = ontologyEditorRef.current?.getData() || \"\";\n        if (action === \"UPDATE\") {\n          updateProjectTemplate({\n            ...templateInfo,\n            ontology: JSON.stringify(ontology),\n            questionType: JSON.stringify(issueTypeEditorRef.current || []),\n          })\n            .then(resolve)\n            .catch(reject);\n        } else {\n          createProjectTemplate(\n            {\n              ...templateInfo,\n              id: null,\n              ontology: JSON.stringify(ontology),\n              questionType: JSON.stringify(issueTypeEditorRef.current || []),\n            },\n            projectId\n          )\n            .then((resp) => {\n              if (resp.status === HttpStatus.OK) {\n                history.replace({\n                  pathname,\n                  search: queryToSearch({\n                    action: \"UPDATE\",\n                    templateId: resp.data.id,\n                  }),\n                });\n\n                resolve(resp);\n              } else {\n                message.error(resp.message);\n              }\n            })\n            .catch(reject);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  const upsertTemplateForEmbedded = (\n    data: ProjectTemplate\n  ): Promise<BaseResp<ProjectTemplate>> => {\n    return new Promise((resolve, reject) => {\n      try {\n        if (action === \"CREATE\") {\n          delete data.id;\n          createProjectTemplate(\n            {\n              ...data,\n              type: data.type as unknown as TemplateType, // Ensure compatibility\n              deleted: data.deleted ? 1 : 0,\n              scope: \"PRIVATE\" as TemplateScope, // Ensure scope is of type TemplateScope\n            },\n            projectId || \"\"\n          )\n            .then((resp) => {\n              if (resp.status === HttpStatus.OK) {\n                history.replace({\n                  pathname,\n                  search: queryToSearch({\n                    action: \"UPDATE\",\n                    templateId: resp.data.id,\n                  }),\n                });\n\n                resolve(resp);\n              } else {\n                message.error(resp.message);\n              }\n            })\n            .catch(reject);\n        } else {\n          data.projectId = projectId || \"\";\n\n          updateProjectTemplate({\n            ...data,\n          })\n            .then(resolve)\n            .catch(reject);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Button\n          onClick={(e) => {\n            e.preventDefault();\n            history.replace({\n              pathname: `/projects/${projectId}/template-center`,\n            });\n          }}\n        >\n          {formatMessage({ id: \"common.back\" })}\n        </Button>\n      </div>\n      {newVersion.includes(templateType) ? (\n        <EmbeddedTemplateCreation\n          templateInfo={templateInfo as unknown as ProjectTemplateTool}\n          handleSave={(needClose, data) => {\n            upsertTemplateForEmbedded(data as ProjectTemplate)\n              .then((resp) => {\n                if (resp.status === HttpStatus.OK) {\n                  if (needClose) {\n                    history.replace(`/projects/${projectId}/template-center`);\n                  } else {\n                    dispatch({\n                      type: \"init\",\n                      payload: resp.data,\n                    });\n                    message.success(\n                      formatMessage({ id: \"common.message.success.save\" })\n                    );\n                  }\n                } else {\n                  message.error(mapStatusToErrorMessage(resp));\n                }\n              })\n              .catch((e) => message.error(e.message));\n          }}\n        />\n      ) : (\n        <Card\n          title={formatMessage({ id: \"labeling-job-wizard.step.template\" })}\n          loading={loading}\n        >\n          <Step1\n            templateInfo={templateInfo}\n            visible={activateStep === EditStep.BasicInfoStep}\n            onNext={(values) => {\n              dispatch({ type: \"setTitle\", payload: values.title });\n              dispatch({ type: \"setInstruction\", payload: values.instruction });\n              dispatch({ type: \"setDataType\", payload: values.dataType });\n              dispatch({\n                type: \"setIsSupportedByApp\",\n                payload: values.isSupportedByApp,\n              });\n              dispatch({\n                type: \"setsupportedLowestIOSVersion\",\n                payload: values.supportedLowestIOSVersion,\n              });\n              dispatch({\n                type: \"setSupportedLowestAndroidVersion\",\n                payload: values.supportedLowestAndroidVersion,\n              });\n              setActivateStep(EditStep.ConfigStep);\n            }}\n          />\n          <Step2\n            templateInfo={templateInfo}\n            dispatch={dispatch}\n            ontologyEditorRef={ontologyEditorRef}\n            issueTypeEditorRef={issueTypeEditorRef}\n            visible={activateStep === EditStep.ConfigStep}\n            onPre={() => setActivateStep(EditStep.BasicInfoStep)}\n            onSave={() =>\n              upsertTemplate()\n                .then((resp) => {\n                  message.success(\n                    formatMessage({ id: \"common.message.success.save\" })\n                  );\n                  return resp;\n                })\n                .catch((e) => message.error(e.message))\n            }\n            onNext={() => {\n              upsertTemplate()\n                .then((resp) => {\n                  if (resp.status === HttpStatus.OK) {\n                    history.replace(`/projects/${projectId}/template-center`);\n                  } else {\n                    message.error(mapStatusToErrorMessage(resp));\n                  }\n                })\n                .catch((e) => message.error(e.message));\n            }}\n          />\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default TemplateCreation;\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/template-center/TemplateCreation.tsx"
    },
    "22": {
      "path": "/projects/:projectId/data-center",
      "name": "data-center",
      "file": "@/pages/project/data-center/ProjectDataCenter.tsx",
      "parentId": "19",
      "id": "22",
      "absPath": "/projects/:projectId/data-center",
      "__content": "import { Button } from \"antd\";\nimport { useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport type { Dispatch } from \"redux\";\nimport { pathToRegexp } from \"path-to-regexp\";\n\nimport DataStatistics from \"@/pages/project/data-center/components/DataStatistics\";\nimport DataList from \"@/pages/project/data-center/components/DataList\";\nimport DataMgmtModal from \"@/pages/project/data-center/components/data-mgmt/DataMgmtModal\";\nimport type { ConnectState } from \"@/models/connect\";\nimport type { Project } from \"@/types/project\";\nimport { DataCenterModalVisible } from \"@/pages/project/models/dataCenter\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\n\nfunction ProjectDataCenter({\n  project,\n  dispatch,\n  modalVisible,\n  isReadonly,\n}: {\n  project: Project;\n  dispatch: Dispatch;\n  modalVisible: DataCenterModalVisible;\n  isReadonly: boolean;\n}) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n\n  const [, projectId] =\n    pathToRegexp(\"/projects/:projectId/:tabName/:type?\").exec(\n      location.pathname\n    ) || [];\n  const { projectDisplayId } = project || {};\n  const { dataMgmtVisible, assignModalVisible } = modalVisible;\n\n  return (\n    <>\n      <DataStatistics\n        projectId={projectId}\n        extraBtn={\n          <Button\n            type=\"primary\"\n            onClick={() =>\n              dispatch({\n                type: \"dataCenter/updateVisible\",\n                payload: { dataMgmtVisible: true },\n              })\n            }\n          >\n            {formatMessage({\n              id: \"project.detail.data-center.origin-data-management\",\n            })}\n          </Button>\n        }\n        dataMgmtVisible={dataMgmtVisible || assignModalVisible}\n      />\n      <DataList projectId={projectId} projectDisplayId={projectDisplayId} />\n      <DataMgmtModal\n        visible={dataMgmtVisible}\n        readonly={isReadonly}\n        onCancel={() =>\n          dispatch({\n            type: \"dataCenter/updateVisible\",\n            payload: { dataMgmtVisible: false },\n          })\n        }\n        onSearchDataBatch={(batchNum) =>\n          dispatch({\n            type: \"dataCenter/updateFilters\",\n            payload: {\n              batchNumList: [batchNum],\n            },\n          })\n        }\n        projectId={projectId}\n      />\n    </>\n  );\n}\n\nfunction mapStateToProps({ project, projectAccess, dataCenter }: ConnectState) {\n  return {\n    project: project.currentProject,\n    modalVisible: dataCenter.modalVisible,\n    isReadonly:\n      projectAccess.projectAccess === null ||\n      projectAccess.projectAccess === \"VIEW\",\n  };\n}\n\nexport default connect(mapStateToProps)(ProjectDataCenter);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/data-center/ProjectDataCenter.tsx"
    },
    "23": {
      "path": "/projects/:projectId/workflow",
      "name": "workflow",
      "file": "@/pages/project/workflow/WorkflowList.tsx",
      "parentId": "19",
      "id": "23",
      "absPath": "/projects/:projectId/workflow",
      "__content": "import React, { useEffect, useState } from \"react\";\nimport { Button, message, Pagination, Spin } from \"antd\";\nimport { useIntl, history } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport type { ConnectState } from \"@/models/connect\";\nimport WorkflowCard from \"@/pages/project/workflow/components/WorkflowCard\";\nimport { getProjectFlowList } from \"@/services/project\";\nimport { DEFAULT_PAGE_SIZE, PAGE_SIZE_OPTIONS } from \"@/utils/constants\";\nimport type { ProjectFlowParam } from \"@/types/project\";\nimport { mapStatusToErrorMessage, queryToSearch } from \"@/utils/utils\";\nimport WorkflowListFilter from \"@/pages/project/workflow/components/WorkflowListFilter\";\nimport FlowCreationModal from \"@/pages/project/workflow/WorkflowCreation/components/FlowCreationModal\";\nimport { updateFlow } from \"@/services/workflow\";\nimport { HttpStatus } from \"@/types/http\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\n\ntype Props = {\n  isReadonly: boolean;\n};\n\nconst WorkflowList: React.FC<Props> = ({ isReadonly }) => {\n  const { formatMessage } = useIntl();\n  const [, projectId] =\n    pathToRegexp(\"#/projects/:projectId/workflow\").exec(\n      window.location.hash.split(\"?\")[0]\n    ) || [];\n\n  const {\n    query: { projectDisplayId },\n  } = useLocationWithQuery();\n\n  const [showFlowModal, setShowFlowModal] = useState(false);\n  const [flowCreating, setFlowCreating] = useState(false);\n  const [filter, setFilter] = useState<ProjectFlowParam>({\n    pageSize: DEFAULT_PAGE_SIZE,\n    pageIndex: 0,\n    projectId: \"\",\n  });\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [total, setTotal] = useState(0);\n\n  const getList = (needLoading: boolean = true) => {\n    if (needLoading) {\n      setLoading(true);\n    }\n    return getProjectFlowList({\n      ...filter,\n      projectId,\n    })\n      .then((resp) => {\n        if (resp.data) {\n          setData(resp.data.results || []);\n          setTotal(resp.data.totalElements || 0);\n        }\n      })\n      .catch((e) => message.error(mapStatusToErrorMessage(e)))\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    getList();\n  }, [filter]);\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          height: 48,\n          lineHeight: \"32px\",\n          borderBottom: \"1px solid #dcdfe3\",\n          margin: \"0 -24px\",\n          padding: \"0 24px\",\n        }}\n      >\n        <span style={{ fontSize: 16, color: \"#42526e\", fontWeight: \"bold\" }}>\n          {formatMessage({ id: \"workflow.list\" })}\n        </span>\n        <Button\n          type=\"primary\"\n          disabled={isReadonly}\n          onClick={(e) => {\n            e.preventDefault();\n            setShowFlowModal(true);\n          }}\n        >\n          {formatMessage({ id: \"workflow.create\" })}\n        </Button>\n      </div>\n      <WorkflowListFilter\n        projectId={projectId}\n        onFilterChange={(newFilter) => {\n          const { jobTeamType: [teamType, bpoId] = [] } = newFilter;\n          setFilter({\n            ...newFilter,\n            jobTeamType: teamType,\n            bpoId,\n            pageIndex: 0,\n            pageSize: filter.pageSize,\n          });\n        }}\n      />\n      <Spin spinning={loading}>\n        {data.map((item) => (\n          <WorkflowCard\n            key={item?.id}\n            workflow={item}\n            projectId={projectId}\n            projectDisplayId={projectDisplayId as string}\n            onRefresh={getList}\n            readonly={isReadonly}\n          />\n        ))}\n        <Pagination\n          style={{\n            width: \"100%\",\n            marginTop: 20,\n            textAlign: \"right\",\n          }}\n          showTotal={(totalNum) => (\n            <>\n              {formatMessage(\n                { id: \"bpo-project-invitation.total\" },\n                { total: totalNum }\n              )}\n            </>\n          )}\n          current={filter.pageIndex + 1}\n          total={total}\n          pageSize={filter.pageSize}\n          pageSizeOptions={PAGE_SIZE_OPTIONS}\n          showSizeChanger\n          onChange={(page, size) => {\n            setFilter({ ...filter, pageIndex: page - 1, pageSize: size });\n          }}\n        />\n      </Spin>\n      <FlowCreationModal\n        loading={flowCreating}\n        projectId={projectId}\n        visible={showFlowModal}\n        onCancel={() => {\n          setShowFlowModal(false);\n        }}\n        onOk={(flowData: any) => {\n          setFlowCreating(true);\n          updateFlow(flowData)\n            .then((resp) => {\n              setShowFlowModal(false);\n              if (resp.status === HttpStatus.OK) {\n                history.push({\n                  pathname: `/workflows/${resp.data.id}/detail`,\n                  search: queryToSearch({\n                    projectDisplayId,\n                    projectId: resp.data.projectId,\n                  }),\n                });\n              } else {\n                message.error(mapStatusToErrorMessage(resp));\n              }\n            })\n            .catch((e) => message.error(mapStatusToErrorMessage(e)))\n            .finally(() => {\n              setFlowCreating(false);\n            });\n        }}\n      />\n    </>\n  );\n};\n\nfunction mapStateToProps({ projectAccess }: ConnectState) {\n  return {\n    isReadonly:\n      projectAccess.projectAccess === null ||\n      projectAccess.projectAccess === \"VIEW\",\n  };\n}\n\nexport default connect(mapStateToProps)(WorkflowList);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/workflow/WorkflowList.tsx"
    },
    "24": {
      "path": "/projects/:projectId/:recordId/record-detail",
      "name": "data-center",
      "file": "@/pages/project/data-center/RecordDetail.tsx",
      "parentId": "19",
      "id": "24",
      "absPath": "/projects/:projectId/:recordId/record-detail",
      "__content": "import { message, Card, Row, Col } from \"antd\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport RecordDetailHeader from \"./components/RecordDetailHeader\";\nimport { useEffect, useState } from \"react\";\nimport { getProjectDataDetail } from \"@/services/project\";\nimport { mapStatusToErrorMessage } from \"@/utils\";\nimport { useDispatch } from \"@umijs/max\";\nimport RecordDetailTab from \"./components/RecordDetailTab\";\nimport RecordDataInfo from \"./components/RecordDataInfo\";\n\nfunction RecordDetail() {\n  const location = useLocationWithQuery();\n  const [recordData, setRecordData] = useState(null);\n  const dispatch = useDispatch();\n\n  const [, projectId, recordId] =\n    pathToRegexp(\"/projects/:projectId/:recordId/:tabName\").exec(\n      location.pathname\n    ) || [];\n\n  useEffect(() => {\n    refreshRecordData();\n  }, []);\n\n  const refreshRecordData = () => {\n    getProjectDataDetail({ recordId: Number(recordId), projectId })\n      .then((resp) => {\n        setRecordData(resp.data);\n      })\n      .catch((e) => message.error(mapStatusToErrorMessage(e)));\n  };\n\n  return (\n    <>\n      <RecordDetailHeader\n        recordData={recordData}\n        projectId={projectId}\n        dispatch={dispatch}\n        onRefresh={refreshRecordData}\n      />\n      <Card style={{ marginTop: 16, height: \"100%\" }}>\n        <Row>\n          <Col span={16} style={{ borderRight: \"1px solid #dcdfe3\" }}>\n            <RecordDetailTab recordData={recordData} />\n          </Col>\n          <Col span={8}>\n            <RecordDataInfo recordData={recordData} />\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n}\n\nexport default RecordDetail;\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/data-center/RecordDetail.tsx"
    },
    "25": {
      "path": "/workflows/:workflowId",
      "name": "project-detail",
      "hideInMenu": true,
      "parentId": "4",
      "id": "25",
      "absPath": "/workflows/:workflowId"
    },
    "26": {
      "path": "/workflows/:workflowId/detail",
      "name": "workflow",
      "hideInMenu": true,
      "file": "@/pages/project/workflow/WorkflowDetail/index.tsx",
      "parentId": "25",
      "id": "26",
      "absPath": "/workflows/:workflowId/detail",
      "__content": "import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Skeleton } from \"antd\";\nimport { useIntl } from \"@umijs/max\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { pathToRegexp } from \"path-to-regexp\";\n\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport FlowDiagram from \"@/pages/project/workflow/WorkflowCreation/components/FlowDiagram\";\nimport type { ProjectTemplate, Workflow } from \"@/types/v3\";\nimport type { Job } from \"@/types/job\";\nimport { JobType } from \"@/types/job\";\n\nimport type { ConnectState } from \"@/models/connect\";\nimport ColorPoint from \"@/pages/project/components/ColorPoint\";\nimport EmptyFlow from \"@/pages/project/workflow/WorkflowCreation/components/EmptyFlow\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport TurnbackConfigModal from \"@/pages/project/workflow/WorkflowCreation/components/TurnbackConfigModal\";\nimport JobCreationModal from \"@/pages/project/workflow/WorkflowCreation/JobCreationModal\";\nimport type { FlowData } from \"@/pages/project/workflow/WorkflowCreation/components/FlowCreationModal\";\nimport FlowCreationModal from \"@/pages/project/workflow/WorkflowCreation/components/FlowCreationModal\";\nimport JobDetailDrawer, {\n  JobDetailTabs,\n} from \"@/pages/project/workflow/components/JobDetailDrawer\";\nimport { isTemplateSupportAuditDetails } from \"@/utils/utils\";\nimport WorkflowStatistics from \"@/pages/project/workflow/WorkflowDetail/WorkflowStatistics\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport FlowDownload from \"@/pages/project/workflow/WorkflowDetail/components/FlowDownload\";\nimport ProjectBreadcrumb from \"@/pages/project/workflow/components/ProjectBreadcrumb\";\n\nimport TestTag from \"@/pages/project/components/TestTag\";\n\ntype Props = {\n  template: ProjectTemplate | null;\n  flow: Workflow | null;\n  jobs: Job[];\n  jobsWithProgress: Job[];\n  loading: boolean;\n  creating: boolean;\n  isReadonly: boolean;\n};\n\nconst WorkflowDetail: React.FC<Props> = ({\n  flow,\n  template,\n  jobs,\n  jobsWithProgress,\n  loading = false,\n  creating = false,\n  isReadonly = false,\n}) => {\n  const dispatch = useDispatch();\n  const { formatMessage: t } = useIntl();\n  const { query, pathname } = useLocationWithQuery();\n  const { projectId, projectDisplayId } = query;\n  const [, flowId] = pathToRegexp(\"/workflows/:workflowId/detail\").exec(\n    pathname\n  );\n\n  const [targetJobType, setTargetJobType] = useState<JobType | null>(null);\n  const [showTurnbackModal, setShowTurnbackModal] = useState(false);\n  const [showFlowConfigModal, setShowFlowConfigModal] = useState(false);\n\n  const [selectedJob, setSelectedJob] = useState<Job | null>();\n\n  const templateId = flow?.templateId;\n  const labelingJobId = jobs?.[0]?.id;\n\n  const fetchFlowJobs = () => {\n    dispatch({\n      type: \"flowCreation/getFlowJobs\",\n      payload: {\n        flowId,\n        projectId,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (flowId && projectId) {\n      fetchFlowJobs();\n      dispatch({ type: \"projectAccess/getProjectAccess\", payload: projectId });\n    }\n\n    return () => {\n      dispatch({ type: \"flowCreation/resetFlowJobs\" });\n    };\n  }, [flowId, projectId]);\n\n  useEffect(() => {\n    if (templateId) {\n      dispatch({\n        type: \"flowCreation/getFlowTemplate\",\n        payload: {\n          templateId,\n        },\n      });\n    }\n  }, [templateId]);\n\n  if (flow === null) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          height: 280,\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n        }}\n      >\n        <Skeleton loading={loading} />\n      </div>\n    );\n  }\n\n  return (\n    <HeaderContentWrapperComponent\n      backTitle={\n        <ProjectBreadcrumb\n          flowDisplayId={flow?.flowDisplayId}\n          projectId={projectId as string}\n          projectDisplayId={projectDisplayId as string}\n        />\n      }\n      onBack={() => {}}\n      title={\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <h3>\n            <span>{flow?.flowName}</span>\n            {flow?.testFlag && <TestTag style={{ marginLeft: 8 }} />}\n          </h3>\n          <div>\n            <span\n              style={{ fontSize: 14, fontWeight: \"normal\", marginRight: 12 }}\n            >\n              <ColorPoint color={\"green\"} style={{ marginTop: 14 }} />\n              {t({ id: `workflow.status.${flow.status?.toLowerCase()}` })}\n            </span>\n            <Button\n              style={{ marginRight: 12 }}\n              disabled={isReadonly}\n              onClick={(e) => {\n                e.preventDefault();\n                setShowFlowConfigModal(true);\n              }}\n            >\n              {t({ id: \"v3.config\" })}\n            </Button>\n            <FlowDownload jobId={labelingJobId} />\n          </div>\n        </div>\n      }\n      content={<div />}\n      actions={\n        <span>\n          {t({ id: \"v3.template-name\" })}\n          <span style={{ marginRight: 5 }}>:</span>\n          {template?.title}\n        </span>\n      }\n    >\n      <div\n        style={{\n          margin: \"-24px -24px 24px -24px\",\n          height: 320,\n          background: \"white\",\n          overflowX: \"auto\",\n        }}\n      >\n        {jobsWithProgress.length === 0 ? (\n          <div style={{ paddingTop: 64, paddingLeft: 48 }}>\n            <EmptyFlow\n              onClick={(e) => {\n                e.preventDefault();\n                setTargetJobType(JobType.LABEL);\n              }}\n            />\n          </div>\n        ) : (\n          <FlowDiagram\n            paneMoveable={true}\n            height={300}\n            readonly={isReadonly}\n            jobs={jobsWithProgress}\n            workflow={flow}\n            onJobCreate={(jobType) => {\n              if (isReadonly) {\n                return;\n              }\n              setTargetJobType(jobType);\n            }}\n            onJobTitleClick={(job) => {\n              setSelectedJob(job);\n            }}\n            onJobDelete={(job) => {\n              Modal.confirm({\n                title: t({ id: \"v3.job-delete.confirm\" }),\n                icon: <ExclamationCircleOutlined />,\n                onOk() {\n                  if (isReadonly) {\n                    return null;\n                  }\n                  return new Promise((resolve) => {\n                    dispatch({\n                      type: \"flowCreation/deleteFlowJob\",\n                      payload: job,\n                      // @ts-ignore\n                    }).then(resolve);\n                  });\n                },\n              });\n            }}\n            onTurnbackNodeClick={() => {\n              if (isReadonly) {\n                return;\n              }\n              setShowTurnbackModal(true);\n            }}\n            onQAJobTurnbackChange={(qaJob, backTo) => {\n              if (isReadonly) {\n                return;\n              }\n              dispatch({\n                type: \"flowCreation/updateFlowJob\",\n                payload: {\n                  job: {\n                    ...qaJob,\n                    backTo,\n                  },\n                },\n              });\n            }}\n          />\n        )}\n      </div>\n      <FlowCreationModal\n        initialFlow={flow}\n        projectId={projectId as string}\n        visible={showFlowConfigModal}\n        onCancel={() => {\n          setShowFlowConfigModal(false);\n        }}\n        onOk={(values: FlowData) => {\n          dispatch({\n            type: \"flowCreation/updateFlowTurnbackConfig\",\n            payload: {\n              flow: {\n                ...flow,\n                ...values,\n              },\n              onFinish: () => {\n                setShowFlowConfigModal(false);\n              },\n            },\n          });\n        }}\n      />\n      <JobCreationModal\n        workflow={flow}\n        jobIndex={jobs?.length}\n        targetJobType={targetJobType}\n        confirmLoading={creating}\n        onCancel={() => {\n          setTargetJobType(null);\n        }}\n        onOk={(jobData, resetFunc) => {\n          const [labelJob] = jobs;\n          const lastJob = jobs[jobs.length - 1];\n\n          dispatch({\n            type: \"flowCreation/createFlowJob\",\n            payload: {\n              flowJob: {\n                ...jobData,\n                projectId,\n                flowId,\n                // TODO handle following warning\n                // @ts-ignore\n                labelingJobId: labelJob?.id || null,\n                preconditionJobId: lastJob?.id || null,\n              },\n              onFinish: () => {\n                resetFunc();\n                fetchFlowJobs();\n              },\n            },\n          });\n        }}\n      />\n      <TurnbackConfigModal\n        visible={showTurnbackModal}\n        flow={flow}\n        jobs={jobs}\n        onSubmit={(option) => {\n          dispatch({\n            type: \"flowCreation/updateFlowTurnbackConfig\",\n            payload: {\n              flow: {\n                ...flow,\n                reworkStrategy: option,\n              },\n              onFinish: () => {\n                setShowTurnbackModal(false);\n              },\n            },\n          });\n        }}\n        onCancel={() => {\n          setShowTurnbackModal(false);\n        }}\n      />\n      <JobDetailDrawer\n        visible={!!selectedJob}\n        initialTab={JobDetailTabs.OVERVIEW}\n        jobId={selectedJob?.id}\n        isTool={isTemplateSupportAuditDetails(flow?.templateType)}\n        onClose={() => {\n          setSelectedJob(null);\n          fetchFlowJobs();\n        }}\n      />\n      <WorkflowStatistics\n        flow={flow}\n        jobs={jobs}\n        projectId={projectId as string}\n      />\n    </HeaderContentWrapperComponent>\n  );\n};\n\nfunction mapStateToProps({\n  projectAccess,\n  flowCreation,\n  loading,\n}: ConnectState) {\n  return {\n    template: flowCreation.flowTemplate,\n    flow: flowCreation.flow,\n    jobs: flowCreation.jobs,\n    jobsWithProgress: flowCreation.jobsWithProgress,\n    loading: loading.effects[\"flowCreation/getFlowJobs\"],\n    creating: loading.effects[\"flowCreation/createFlowJob\"],\n    isReadonly:\n      projectAccess.projectAccess === null ||\n      projectAccess.projectAccess === \"VIEW\",\n  };\n}\n\nexport default connect(mapStateToProps)(WorkflowDetail);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/workflow/WorkflowDetail/index.tsx"
    },
    "27": {
      "path": "/workflows/:workflowId/jobs/workload",
      "name": "workload",
      "hideInMenu": true,
      "file": "@/pages/project/workflow/WorkflowDetail/Workload/index.tsx",
      "parentId": "25",
      "id": "27",
      "absPath": "/workflows/:workflowId/jobs/workload",
      "__content": "import { useEffect, useState } from \"react\";\nimport { Button, Card, message, Radio } from \"antd\";\nimport { pathToRegexp } from \"path-to-regexp\";\n\nimport type { Job } from \"@/types/job\";\nimport { JobType } from \"@/types/job\";\nimport FilterFormComponent from \"@/components/FilterFormComponent\";\nimport type { FormItem } from \"@/types/common\";\nimport { FormItemType } from \"@/types/common\";\nimport { useIntl } from \"@@/plugin-locale/localeExports\";\nimport QaWorkloadTable from \"@/pages/project/workflow/WorkflowDetail/Workload/QaWorkloadTable\";\nimport LabelWorkloadTable from \"@/pages/project/workflow/WorkflowDetail/Workload/LabelWorkloadTable\";\nimport { getFlowJobs } from \"@/services/workflow\";\nimport { downloadFile, mapStatusToErrorMessage } from \"@/utils/utils\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport { LABEL_DETAIL_BY_JOB, QA_DETAIL_BY_JOB } from \"@/utils/constants\";\nimport ProjectBreadcrumb from \"@/pages/project/workflow/components/ProjectBreadcrumb\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { ConnectState } from \"@/models/connect\";\nimport { connect } from \"react-redux\";\n\ntype Filter = {\n  startDate?: string;\n  endDate?: string;\n  workerName?: string;\n};\n\nfunction Workload({ isReadonly = false }: { isReadonly?: boolean }) {\n  const location = useLocationWithQuery();\n  const { formatMessage } = useIntl();\n  const [jobs, setJobs] = useState<Job[]>([]);\n  const [currentJob, setCurrentJob] = useState<Job>();\n  const [filter, setFilter] = useState<Filter>({});\n  const { jobType } = currentJob || {};\n  const [, flowId] = pathToRegexp(\"/workflows/:flowId/jobs/workload\").exec(\n    location.pathname\n  );\n  const { projectId, projectDisplayId, flowDisplayId, jobId } = location.query;\n\n  const filterFormItems: FormItem[] = [\n    {\n      key: \"date\",\n      label: null,\n      type: FormItemType.DateRanger,\n    },\n    {\n      key: \"workerName\",\n      label: (\n        <span style={{ color: \"#42526e\" }}>\n          {formatMessage({ id: \"common.worker\" })}\n        </span>\n      ),\n      type: FormItemType.Text,\n    },\n  ];\n\n  const getJobs = async () => {\n    if (!flowId || !projectId) {\n      return;\n    }\n    try {\n      const resp = await getFlowJobs(flowId, projectId as string);\n      setJobs(resp.data.results[0].jobs);\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    }\n  };\n\n  const download = () => {\n    let url =\n      jobType === JobType.LABEL ? LABEL_DETAIL_BY_JOB : QA_DETAIL_BY_JOB;\n    url += `?jobId=${currentJob?.id}`;\n    Object.keys(filter)\n      .filter((key) => !!filter[key])\n      .forEach((key) => {\n        url += `&${key}=${filter[key]}`;\n      });\n\n    downloadFile({\n      url,\n    });\n  };\n\n  useEffect(() => {\n    if (jobs.length > 0) {\n      setCurrentJob(jobs.find((item) => item.id === jobId) || jobs[0]);\n    }\n  }, [jobs]);\n\n  useEffect(() => {\n    getJobs();\n  }, [flowId, projectId]);\n\n  return (\n    <HeaderContentWrapperComponent\n      backTitle={\n        <ProjectBreadcrumb\n          projectId={projectId as string}\n          projectDisplayId={projectDisplayId as string}\n          flowDisplayId={flowDisplayId as string}\n        />\n      }\n      onBack={() => {}}\n      title={formatMessage(\n        { id: \"workflow.detail.job.workload.title\" },\n        { jobName: currentJob?.jobName }\n      )}\n    >\n      <Radio.Group\n        size=\"large\"\n        value={currentJob}\n        style={{ marginBottom: 24 }}\n        onChange={(e) => setCurrentJob(e.target.value)}\n      >\n        {jobs?.map((item, index) => (\n          <Radio.Button value={item} key={item.id}>\n            {formatMessage({ id: `${item.jobType?.toLowerCase()}-job.type` })}\n            {index || index + 1}\n          </Radio.Button>\n        ))}\n      </Radio.Group>\n      <Card title={currentJob?.jobName}>\n        <FilterFormComponent\n          formItems={filterFormItems}\n          formStyle={{ float: \"left\" }}\n          initialValue={filter || {}}\n          onFilterValueChange={(v) => {\n            const { date, ...rest } = v;\n            const newFilter = {\n              ...rest,\n              startDate: date\n                ? date?.[0]?.startOf(\"day\")?.format(\"YYYY-MM-DD HH:mm:ss\")\n                : null,\n              endDate: date\n                ? date?.[1]?.endOf(\"day\")?.format(\"YYYY-MM-DD HH:mm:ss\")\n                : null,\n            };\n            setFilter(newFilter);\n          }}\n          searchMode=\"click\"\n        />\n        <Button\n          style={{ marginLeft: 16 }}\n          onClick={download}\n          disabled={isReadonly}\n        >\n          {formatMessage({ id: \"common.export\" })}\n        </Button>\n        {jobType === JobType.LABEL ? (\n          <LabelWorkloadTable job={currentJob} filter={filter || {}} />\n        ) : (\n          <QaWorkloadTable job={currentJob} filter={filter || {}} />\n        )}\n      </Card>\n    </HeaderContentWrapperComponent>\n  );\n}\n\nfunction mapStateToProps({ projectAccess }: ConnectState) {\n  return {\n    isReadonly:\n      projectAccess.projectAccess === null ||\n      projectAccess.projectAccess === \"VIEW\",\n  };\n}\n\nexport default connect(mapStateToProps)(Workload);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/workflow/WorkflowDetail/Workload/index.tsx"
    },
    "28": {
      "path": "/worker-jobs",
      "icon": "folder",
      "name": "tasks-v3",
      "parentId": "4",
      "id": "28",
      "absPath": "/worker-jobs"
    },
    "29": {
      "path": "/worker-jobs",
      "redirect": "/worker-jobs/tasks",
      "parentId": "28",
      "id": "29",
      "absPath": "/worker-jobs"
    },
    "30": {
      "path": "/worker-jobs/tasks",
      "file": "@/pages/worker-job/WorkerJobs.tsx",
      "parentId": "28",
      "id": "30",
      "absPath": "/worker-jobs/tasks",
      "__content": "import type { ReactNode } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Tabs } from \"antd\";\nimport { Outlet, history as router, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport type { Dispatch } from \"redux\";\n\nimport type { ConnectState } from \"@/models/connect\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\n\ninterface Props {\n  children?: ReactNode;\n  dispatch: Dispatch;\n  assignedNum: number;\n}\n\nconst { TabPane } = Tabs;\n\nenum TaskTabKey {\n  todo = \"todo\",\n  assigned = \"assigned\",\n  history = \"history\",\n}\n\nfunction WorkerJobs({ children, dispatch, assignedNum }: Props) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n\n  const [activeTabKey, setActiveTabKey] = useState<TaskTabKey>(TaskTabKey.todo);\n\n  const TaskTabs = [\n    {\n      name: formatMessage({ id: \"menu.tasks.todo\" }),\n      key: TaskTabKey.todo,\n      path: \"/worker-jobs/tasks/in-progress\",\n    },\n    {\n      name: formatMessage({ id: \"menu.tasks.assigned\" }),\n      key: TaskTabKey.assigned,\n      path: \"/worker-jobs/tasks/pending\",\n    },\n    {\n      name: formatMessage({ id: \"menu.tasks.history\" }),\n      key: TaskTabKey.history,\n      path: \"/worker-jobs/tasks/history\",\n    },\n  ];\n\n  useEffect(() => {\n    setActiveTabKey(\n      TaskTabs.find((item) => location.pathname.endsWith(item.path))?.key\n    );\n    dispatch({ type: \"workerJob/getAssignedJobsNum\" });\n  }, [location.pathname]);\n\n  return (\n    <HeaderContentWrapperComponent\n      title={TaskTabs.find((item) => item.key === activeTabKey)?.name}\n    >\n      <Tabs\n        defaultActiveKey={activeTabKey}\n        style={{ margin: \"-24px -24px 8px\" }}\n        tabBarStyle={{ background: \"white\", paddingLeft: 48 }}\n        activeKey={activeTabKey}\n        onChange={(tab) => {\n          const { path } = TaskTabs.find((item) => item.key === tab);\n          router.push({\n            pathname: path,\n          });\n        }}\n      >\n        {TaskTabs.map((item) => {\n          return (\n            <TabPane\n              tab={\n                item.key === TaskTabKey.assigned ? (\n                  <span>\n                    {item.name}{\" \"}\n                    <span style={{ color: \"#f56c6c\" }}>({assignedNum})</span>\n                  </span>\n                ) : (\n                  item.name\n                )\n              }\n              key={item.key}\n            />\n          );\n        })}\n      </Tabs>\n      <Outlet />\n    </HeaderContentWrapperComponent>\n  );\n}\n\nfunction mapStateToProps({ workerJob }: ConnectState) {\n  return {\n    assignedNum: workerJob.assignedNum,\n  };\n}\n\nexport default connect(mapStateToProps)(WorkerJobs);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/worker-job/WorkerJobs.tsx"
    },
    "31": {
      "path": "/worker-jobs/tasks",
      "redirect": "/worker-jobs/tasks/in-progress",
      "parentId": "30",
      "id": "31",
      "absPath": "/worker-jobs/tasks"
    },
    "32": {
      "path": "/worker-jobs/tasks/pending",
      "hideInMenu": true,
      "file": "@/pages/worker-job/JobAcceptList.tsx",
      "parentId": "30",
      "id": "32",
      "absPath": "/worker-jobs/tasks/pending",
      "__content": "import { Button, Card, message, Modal, Popconfirm, Table } from \"antd\";\nimport type { ColumnProps } from \"antd/es/table\";\nimport React, { useEffect, useState } from \"react\";\nimport type { Dispatch } from \"redux\";\nimport { history as router, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport type { ConnectState } from \"@/models/connect\";\nimport JobTypeTag from \"@/pages/job/components/JobType\";\nimport type { WorkerJob } from \"@/types/task\";\nimport { JobActionTypes } from \"@/types/task\";\nimport { DEFAULT_PAGE_SIZE, PAGE_SIZE_OPTIONS } from \"@/utils/constants\";\nimport { JobNameInputSearchComponent } from \"@/pages/worker-job/components/JobNameInputSearchComponent\";\nimport EllipticJobName from \"@/pages/worker-job/components/EllipticJobName\";\nimport { dateFormat } from \"@/utils/time-util\";\n\nimport styles from \"@/global.less\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { base64Encode } from \"@/utils/string-util\";\nimport { queryToSearch } from \"@/utils\";\n\ninterface JobAcceptProps {\n  submitting: boolean;\n  loading: boolean;\n  dispatch: Dispatch;\n  assignedJobs: WorkerJob[];\n  totalElements: number;\n}\n\nfunction JobAcceptList({\n  dispatch,\n  assignedJobs,\n  totalElements,\n  loading,\n  submitting,\n}: JobAcceptProps) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n  const { pageIndex: page = 1, jobName: name = \"\" } = location.query;\n\n  const [jobName, setJobName] = useState(name);\n  const [pageIndex, setPageIndex] = useState(+page);\n  const [pageSize, setPageSize] = useState(DEFAULT_PAGE_SIZE);\n\n  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);\n\n  useEffect(() => {\n    dispatch({\n      type: \"workerJob/getAssignedWorkerJobs\",\n      payload: { pageIndex: pageIndex - 1, pageSize, jobName },\n    });\n  }, [pageIndex, pageSize, jobName]);\n\n  const goToDetail = (job: WorkerJob) => {\n    router.push({\n      pathname: `/worker-job/${job.jobId}`,\n      state: { origin: \"list\", jobName, pageIndex },\n      search: queryToSearch({\n        from: base64Encode(`${location.pathname}${location.search}`),\n        projectId: job.projectId,\n      }),\n    });\n  };\n\n  const columns: ColumnProps<WorkerJob>[] = [\n    {\n      title: formatMessage({ id: \"projectName\" }),\n      dataIndex: \"projectName\",\n    },\n    {\n      title: formatMessage({ id: \"jobName\" }),\n      dataIndex: \"jobName\",\n      render: (_, record) => (\n        <EllipticJobName\n          jobName={record.jobName}\n          btnStyle={{ padding: 0 }}\n          onClick={() => goToDetail(record)}\n        />\n      ),\n    },\n    {\n      title: formatMessage({ id: \"jobDisplayId\" }),\n      dataIndex: \"jobDisplayId\",\n      render: (jobDisplayId: string) =>\n        jobDisplayId || formatMessage({ id: \"common.nothing-symbol\" }),\n    },\n    {\n      title: formatMessage({ id: \"jobType\" }),\n      dataIndex: \"jobType\",\n      render: (type) => <JobTypeTag type={type} />,\n    },\n    {\n      title: formatMessage({ id: \"task.column.assignTime\" }),\n      dataIndex: \"assignTime\",\n      render: (dt) => <span>{dateFormat(dt)}</span>,\n    },\n    {\n      title: formatMessage({ id: \"common.operation\" }),\n      fixed: \"right\",\n      render: (_, record) => (\n        <Button\n          type=\"link\"\n          style={{ padding: 0 }}\n          onClick={() => goToDetail(record)}\n        >\n          {formatMessage({ id: \"common.view\" })}\n        </Button>\n      ),\n    },\n  ];\n\n  const rowSelection = {\n    onChange: (selectedJobIds: React.Key[]) => {\n      setSelectedKeys(selectedJobIds as string[]);\n    },\n  };\n\n  const handleJobStatusUpdate = (type: JobActionTypes) => {\n    dispatch({\n      type: \"workerJob/updateWorkerJobs\",\n      payload: {\n        actionType: type,\n        data: selectedKeys,\n        onSuccess: () => {\n          if (type === JobActionTypes.reject) {\n            message.success(\n              formatMessage(\n                { id: \"task.reject.success.title\" },\n                { count: selectedKeys.length }\n              ),\n              3\n            );\n          } else {\n            Modal.confirm({\n              title: formatMessage(\n                { id: \"task.confirm.success.title\" },\n                { count: selectedKeys.length }\n              ),\n              onOk() {\n                router.push(`/worker-jobs/tasks/in-progress`);\n              },\n              okText: formatMessage({ id: \"common.yes\" }),\n              cancelText: formatMessage({ id: \"common.no\" }),\n            });\n          }\n          setSelectedKeys([]);\n          dispatch({\n            type: \"workerJob/getAssignedWorkerJobs\",\n            payload: { pageIndex: pageIndex - 1, pageSize, jobName },\n          });\n          dispatch({\n            type: \"workerJob/getAssignedJobsNum\",\n          });\n        },\n        onError: (detail: string) => {\n          if (detail) {\n            message.error(\n              formatMessage({ id: `task.${type}.fail.title` }, { detail })\n            );\n          }\n        },\n      },\n    });\n  };\n\n  const searchJobs = (val: string) => {\n    setPageIndex(1);\n    setJobName(val);\n  };\n\n  return (\n    <Card bordered={false} className={styles[\"with-shadow\"]}>\n      <div style={{ textAlign: \"right\", marginBottom: 15 }}>\n        <JobNameInputSearchComponent\n          jobName={jobName as string}\n          search={searchJobs}\n        />\n      </div>\n      <Table\n        scroll={{ x: \"max-content\" }}\n        key={totalElements}\n        rowKey=\"jobId\"\n        className={styles.tableStriped}\n        columns={columns}\n        dataSource={assignedJobs}\n        loading={loading}\n        pagination={{\n          total: totalElements,\n          pageSize,\n          onChange: (current: number, size: number) => {\n            setPageIndex(current);\n            setPageSize(size);\n          },\n          current: pageIndex,\n          showSizeChanger: true,\n          pageSizeOptions: PAGE_SIZE_OPTIONS,\n          showTotal: (total: number) =>\n            formatMessage({ id: \"common.total.items\" }, { items: total }),\n        }}\n        rowSelection={rowSelection}\n      />\n      <div style={{ marginTop: assignedJobs?.length > 0 ? -48 : 16 }}>\n        <Popconfirm\n          disabled={selectedKeys.length <= 0 || submitting}\n          title={formatMessage({ id: \"task.confirm.button.reject-msg\" })}\n          onConfirm={() => handleJobStatusUpdate(JobActionTypes.reject)}\n        >\n          <Button\n            style={{ marginRight: 12 }}\n            disabled={selectedKeys.length <= 0 || submitting}\n          >\n            {formatMessage({ id: \"task.confirm.button.reject\" })}\n          </Button>\n        </Popconfirm>\n\n        <Button\n          type=\"primary\"\n          disabled={selectedKeys.length <= 0}\n          loading={submitting}\n          onClick={() => handleJobStatusUpdate(JobActionTypes.confirm)}\n        >\n          {formatMessage({ id: \"task.confirm.button.ok\" })}\n        </Button>\n        <span style={{ marginLeft: 5 }}>\n          {formatMessage(\n            { id: \"common.selected\" },\n            { count: selectedKeys.length }\n          )}\n        </span>\n      </div>\n    </Card>\n  );\n}\n\nfunction mapStateToProps({ workerJob, loading }: ConnectState) {\n  return {\n    assignedJobs: workerJob.assignedJobs,\n    totalElements: workerJob.totalAssignedJobs,\n    loading: loading.effects[\"workerJob/getAssignedWorkerJobs\"],\n    submitting: loading.effects[\"workerJob/updateWorkerJobs\"],\n  };\n}\n\nexport default connect(mapStateToProps)(JobAcceptList);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/worker-job/JobAcceptList.tsx"
    },
    "33": {
      "path": "/worker-jobs/tasks/in-progress",
      "hideInMenu": true,
      "file": "@/pages/worker-job/JobTodoList.tsx",
      "parentId": "30",
      "id": "33",
      "absPath": "/worker-jobs/tasks/in-progress",
      "__content": "import {\n  Button,\n  Card,\n  Spin,\n  Modal,\n  Table,\n  Col,\n  Row,\n  Pagination,\n  Space,\n} from \"antd\";\nimport type { ColumnProps } from \"antd/es/table\";\nimport { history as router, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useMediaQuery } from \"react-responsive\";\nimport type { Dispatch } from \"redux\";\n\nimport numeral from \"@/utils/num\";\nimport useInterval from \"@/hooks/useInterval\";\nimport type { ConnectState } from \"@/models/connect\";\nimport JobStatusTag from \"@/pages/job/components/JobStatusTag\";\nimport JobTypeTag from \"@/pages/job/components/JobType\";\nimport type { WorkerJob } from \"@/types/task\";\nimport { WorkerJobStatus, WorkerJobStatusFilters } from \"@/types/task\";\nimport { DEFAULT_PAGE_SIZE, PAGE_SIZE_OPTIONS } from \"@/utils/constants\";\nimport { openWorkerTaskPageV3, queryToSearch } from \"@/utils/utils\";\nimport { Job, JobStatusFilter } from \"@/types/job\";\nimport { JobNameInputSearchComponent } from \"@/pages/worker-job/components/JobNameInputSearchComponent\";\nimport EllipticJobName from \"@/pages/worker-job/components/EllipticJobName\";\nimport JobManual from \"@/pages/worker-job/components/JobManual\";\nimport { dateFormat, shortHumanizeSeconds } from \"@/utils/time-util\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { base64Encode } from \"@/utils/string-util\";\nimport JobDescription from \"@/pages/project/workflow/JobOverview/JobDescription\";\n\nimport globalStyles from \"@/global.less\";\nimport styles from \"./styles.less\";\n\nconst FIVE_MINUTES = 60 * 1000 * 5;\n\nconst UnCommittedInfo = ({ workerJob }: { workerJob: WorkerJob }) => {\n  const { formatMessage } = useIntl();\n  const { unCommittedTasks, unCommittedTimeout } = workerJob;\n  let text = null;\n\n  if (unCommittedTasks > 0) {\n    if (unCommittedTimeout > 0) {\n      const left = shortHumanizeSeconds(unCommittedTimeout, [\"d\", \"h\", \"m\"]);\n      text = formatMessage(\n        { id: \"task.column.action.unCommittedTimeout\" },\n        { time: left }\n      );\n    }\n    if (unCommittedTimeout === -1) {\n      text = formatMessage({\n        id: \"task.column.operation.status\",\n      });\n    }\n  }\n\n  return (\n    <div style={{ paddingTop: 4 }}>\n      <span style={{ color: \"#F56C6C\" }}>{text}</span>\n    </div>\n  );\n};\n\nexport interface WorkerJobListProp {\n  dispatch: Dispatch;\n  jobs: WorkerJob[];\n  totalJobs: number;\n  initLoading: boolean;\n}\n\nfunction JobTodoList({\n  dispatch,\n  jobs,\n  totalJobs,\n  initLoading,\n}: WorkerJobListProp) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n\n  const {\n    pageIndex: page = 1,\n    jobName: name = \"\",\n    pageSize: size = DEFAULT_PAGE_SIZE,\n  } = location.query || {};\n\n  const [jobName, setJobName] = useState<string>(name as string);\n  const [currentPageIdx, setCurrentPageIdx] = useState<number>(+page);\n  const [pageSize, setPageSize] = useState<number>(+size);\n  const [currentJob, setCurrentJob] = useState<WorkerJob>();\n\n  const [modalVisible, setModalVisible] = useState(false);\n  const [instruction, setInstruction] = useState(\"\");\n\n  const isMobileDevice = useMediaQuery({\n    query: \"(max-device-width: 768px)\",\n  });\n\n  const queryWorkerJobs = useCallback(() => {\n    dispatch({\n      type: \"workerJob/getWorkerJobs\",\n      payload: {\n        pageQuery: {\n          pageIndex: currentPageIdx - 1,\n          pageSize,\n        },\n        jobName,\n        statusList: WorkerJobStatusFilters.active,\n        jobStatusList: JobStatusFilter.active,\n      },\n    });\n  }, [jobName, currentPageIdx, pageSize]);\n\n  useEffect(() => {\n    queryWorkerJobs();\n  }, [jobName, currentPageIdx, pageSize]);\n\n  useInterval(() => {\n    queryWorkerJobs();\n  }, FIVE_MINUTES);\n\n  const operateJob = (job: WorkerJob) => {\n    const { jobType } = job;\n    openWorkerTaskPageV3(\n      jobType,\n      job.jobId,\n      job.flowId,\n      job.jobName,\n      job.projectId\n    );\n  };\n\n  const searchJobs = (val: string) => {\n    setCurrentPageIdx(1);\n    setJobName(val);\n  };\n\n  const columns: ColumnProps<WorkerJob>[] = [\n    {\n      key: \"jobName\",\n      title: formatMessage({ id: \"jobName\" }),\n      dataIndex: \"jobDisplayId\",\n      render: (jobDisplayId: string, record) => {\n        return (\n          <>\n            <EllipticJobName\n              jobName={record.jobName}\n              btnStyle={{ padding: 0 }}\n              onClick={() => {\n                router.push({\n                  pathname: `/worker-job/${record.jobId}`,\n                  state: {\n                    origin: \"list\",\n                    pageIndex: currentPageIdx,\n                    jobName,\n                    pageSize,\n                  },\n                  search: queryToSearch({\n                    from: base64Encode(\n                      `${location.pathname}${location.search}`\n                    ),\n                    projectId: record.projectId,\n                  }),\n                });\n              }}\n            />\n            <div style={{ fontSize: 12, paddingLeft: 2 }}>\n              {jobDisplayId || formatMessage({ id: \"common.nothing-symbol\" })}\n            </div>\n          </>\n        );\n      },\n    },\n    {\n      key: \"jobType\",\n      title: formatMessage({ id: \"jobType\" }),\n      dataIndex: \"jobType\",\n      render: (jobType) => <JobTypeTag type={jobType} />,\n    },\n    {\n      key: \"status\",\n      title: formatMessage({ id: \"common.status\" }),\n      dataIndex: \"status\",\n      render: (status) => <JobStatusTag status={status as WorkerJobStatus} />,\n    },\n    {\n      key: \"assignTime\",\n      title: formatMessage({ id: \"task.column.assignTime\" }),\n      dataIndex: \"assignTime\",\n      render: (dt) => <span>{dateFormat(dt)}</span>,\n    },\n    {\n      key: \"availableTasks\",\n      title: formatMessage({ id: \"task.column.remain-records\" }),\n      dataIndex: \"availableTasks\",\n      render: (availableTasks) =>\n        availableTasks && availableTasks > 50\n          ? `${formatMessage({ id: \"task.column.large-than\" })} 50`\n          : availableTasks,\n    },\n    {\n      key: \"needReworkTasks\",\n      title: formatMessage({ id: \"task.column.assigned-records\" }),\n      dataIndex: \"needReworkTasks\",\n    },\n    {\n      key: \"accuracy\",\n      title: formatMessage({ id: \"task.column.correct-rate\" }),\n      dataIndex: \"accuracy\",\n      render: (accuracy) => numeral(accuracy).format(\"%\"),\n    },\n    {\n      key: \"doc\",\n      title: formatMessage({ id: \"task.column.operation-doc\" }),\n      render: (record) => {\n        return (\n          <JobManual\n            jobId={record.jobId}\n            onInstructionClick={(text) => {\n              setInstruction(text || \"N/A\");\n              setModalVisible(true);\n            }}\n          />\n        );\n      },\n    },\n    {\n      key: \"operation\",\n      title: formatMessage({ id: \"common.operation\" }),\n      fixed: \"right\",\n      dataIndex: \"jobType\",\n      render: (jobType, record) => (\n        <Space direction=\"vertical\" size={0}>\n          <Button onClick={() => operateJob(record)}>\n            {formatMessage({ id: \"task.column.action.launch\" })}\n          </Button>\n          <UnCommittedInfo workerJob={record} />\n        </Space>\n      ),\n    },\n  ];\n\n  const JobCard = ({ job }: { job: WorkerJob }) => {\n    return (\n      <Card\n        bordered={false}\n        className={`${globalStyles[\"with-shadow\"]} ${styles.card}`}\n        title={\n          <>\n            <EllipticJobName\n              maxLength={40}\n              jobName={job.jobName}\n              onClick={() => {\n                router.push({\n                  pathname: `/worker-job/${job.jobId}`,\n                  search: queryToSearch({\n                    pageIndex: `${currentPageIdx}`,\n                    jobName,\n                  }),\n                  state: { origin: \"list\" },\n                });\n              }}\n              btnStyle={{\n                textAlign: \"left\",\n                minWidth: 300,\n                paddingLeft: 0,\n              }}\n            />\n          </>\n        }\n      >\n        <Row gutter={[16, 16]}>\n          {columns\n            .filter((item) => item.dataIndex && item.dataIndex !== \"jobName\")\n            .map((item, index) => (\n              <Col span={12} key={item.key}>\n                <div className={styles.details}>\n                  <p className={styles.label}>{item.title}</p>\n                  <div className={styles.content}>\n                    {item.render\n                      ? item.render(job[item.dataIndex as string], job, index)\n                      : job[item.dataIndex as string]}\n                  </div>\n                </div>\n              </Col>\n            ))}\n        </Row>\n      </Card>\n    );\n  };\n  return (\n    <>\n      <Spin spinning={Boolean(initLoading)}>\n        <Card bordered={false} className={globalStyles[\"with-shadow\"]}>\n          <div style={{ textAlign: \"right\", marginBottom: 15 }}>\n            <JobNameInputSearchComponent\n              jobName={jobName}\n              search={searchJobs}\n            />\n          </div>\n        </Card>\n        {isMobileDevice ? (\n          <div style={{ marginTop: 24 }}>\n            {jobs.map((item) => (\n              <JobCard job={item} key={item.id} />\n            ))}\n            <Pagination\n              style={{ marginTop: 8, textAlign: \"right\" }}\n              pageSize={pageSize}\n              total={totalJobs}\n              current={currentPageIdx}\n              onChange={(currentPage, currentSize) => {\n                setCurrentPageIdx(currentPage);\n                setPageSize(currentSize);\n              }}\n              showTotal={(total: number) =>\n                formatMessage({ id: \"common.total.items\" }, { items: total })\n              }\n              showSizeChanger\n              pageSizeOptions={PAGE_SIZE_OPTIONS}\n            />\n          </div>\n        ) : (\n          <Table\n            scroll={{ x: \"max-content\" }}\n            rowKey=\"jobId\"\n            className={globalStyles.tableStriped}\n            columns={columns}\n            dataSource={jobs}\n            pagination={{\n              total: totalJobs,\n              pageSize,\n              onChange: (currentPage, currentSize) => {\n                setCurrentPageIdx(currentPage);\n                setPageSize(currentSize);\n              },\n              current: currentPageIdx,\n              showTotal: (total: number) =>\n                formatMessage({ id: \"common.total.items\" }, { items: total }),\n              showSizeChanger: true,\n              pageSizeOptions: PAGE_SIZE_OPTIONS,\n            }}\n          />\n        )}\n      </Spin>\n      <Modal\n        visible={modalVisible}\n        onCancel={() => setModalVisible(false)}\n        footer={null}\n        width={680}\n      >\n        <div dangerouslySetInnerHTML={{ __html: instruction }} />\n      </Modal>\n      <Modal\n        visible={!!currentJob}\n        title={currentJob?.jobName}\n        onCancel={() => setCurrentJob(null)}\n        footer={null}\n        width={680}\n      >\n        <JobDescription\n          job={currentJob as unknown as Job}\n          updating={false}\n          readonly={true}\n        />\n      </Modal>\n    </>\n  );\n}\n\nfunction mapStateToProps({ workerJob, loading }: ConnectState) {\n  return {\n    jobs: workerJob.jobs,\n    totalJobs: workerJob.totalJobs,\n    initLoading: loading.effects[\"workerJob/getWorkerJobs\"],\n  };\n}\n\nexport default connect(mapStateToProps)(JobTodoList);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/worker-job/JobTodoList.tsx"
    },
    "34": {
      "path": "/worker-jobs/tasks/history",
      "hideInMenu": true,
      "file": "@/pages/worker-job/JobHistoryList.tsx",
      "parentId": "30",
      "id": "34",
      "absPath": "/worker-jobs/tasks/history",
      "__content": "import { Button, Card, Empty, Radio, Table } from \"antd\";\nimport type { ColumnProps } from \"antd/es/table\";\nimport type { RadioChangeEvent } from \"antd/lib/radio\";\nimport { history as router, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport type { MouseEvent } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport type { Dispatch } from \"redux\";\n\nimport type { ConnectState } from \"@/models/connect\";\nimport JobStatusTag from \"@/pages/job/components/JobStatusTag\";\nimport JobTypeTag from \"@/pages/job/components/JobType\";\nimport WorkloadModal from \"@/pages/worker-job/components/WorkloadModal\";\nimport { JobStatusFilter, JobType } from \"@/types/job\";\nimport type { WorkerJob } from \"@/types/task\";\nimport { WorkerJobStatus, WorkerJobStatusFilters } from \"@/types/task\";\nimport { DEFAULT_PAGE_SIZE, PAGE_SIZE_OPTIONS } from \"@/utils/constants\";\nimport { JobNameInputSearchComponent } from \"@/pages/worker-job/components/JobNameInputSearchComponent\";\nimport EllipticJobName from \"@/pages/worker-job/components/EllipticJobName\";\nimport { dateFormat } from \"@/utils/time-util\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\n\nimport globalStyles from \"@/global.less\";\nimport { base64Encode } from \"@/utils/string-util\";\nimport { queryToSearch } from \"@/utils\";\n\nexport interface WorkerHistoryProps {\n  dispatch: Dispatch;\n  jobs: WorkerJob[];\n  totalJobs: number;\n  totalAssignedJobs: number;\n  loading: boolean;\n}\n\nconst filters = {\n  finished: WorkerJobStatusFilters.finished,\n  active: [WorkerJobStatus.CONFIRMED],\n  inactive: [\n    WorkerJobStatus.REJECT,\n    WorkerJobStatus.STOPPED,\n    WorkerJobStatus.DECLINED,\n  ],\n};\n\nfunction JobHistoryList({\n  dispatch,\n  jobs,\n  loading,\n  totalJobs,\n}: WorkerHistoryProps) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n\n  const { query } = location;\n\n  const [queryParams, setQueryParams] = useState({\n    jobName: (query.jobName as string) || \"\",\n    filter: (query.filter as string) || \"active\",\n    pageIndex: +query.pageIndex || 0,\n    pageSize: +query.pageSize || DEFAULT_PAGE_SIZE,\n  });\n\n  const [currentJob, setCurrentJob] = useState<WorkerJob>(null);\n\n  useEffect(() => {\n    const jobStatus =\n      queryParams.filter === \"inactive\"\n        ? JobStatusFilter.active\n        : JobStatusFilter[queryParams.filter];\n\n    dispatch({\n      type: \"workerJob/getWorkerJobs\",\n      payload: {\n        pageQuery: {\n          pageIndex: queryParams.pageIndex,\n          pageSize: queryParams.pageSize,\n        },\n        jobName: queryParams.jobName,\n        statusList: filters[queryParams.filter],\n        jobStatusList: jobStatus,\n      },\n    });\n  }, [queryParams]);\n\n  const pageChange = (page: number, size: number) => {\n    setQueryParams({\n      ...queryParams,\n      pageIndex: page - 1,\n      pageSize: size,\n    });\n  };\n\n  const filterChange = (e: RadioChangeEvent) => {\n    const { value } = e.target;\n\n    setQueryParams({\n      ...queryParams,\n      filter: value,\n      pageIndex: 0,\n      jobName: \"\",\n    });\n  };\n\n  const handleTaskListView = (\n    jobId: string,\n    currentJobName: string,\n    projectId: string\n  ) => {\n    router.push({\n      pathname: `/worker-jobs/${jobId}/annotation-result-list`,\n      search: queryToSearch({\n        jobName: currentJobName,\n        projectId,\n        ...(queryParams as unknown as Record<string, string>),\n      }),\n    });\n  };\n\n  const showWorkloadModal = (e: MouseEvent, job: WorkerJob) => {\n    e.preventDefault();\n    setCurrentJob(job);\n  };\n\n  const columns: ColumnProps<WorkerJob>[] = [\n    {\n      key: \"jobName\",\n      title: formatMessage({ id: \"jobName\" }),\n      render: (job: WorkerJob) => (\n        <>\n          {job.status === WorkerJobStatus.REJECT ? (\n            job.jobName\n          ) : (\n            <EllipticJobName\n              jobName={job.jobName}\n              onClick={() => {\n                router.push({\n                  pathname: `/worker-job/${job.jobId}`,\n                  state: { origin: \"list\" },\n                  search: queryToSearch({\n                    from: base64Encode(\n                      `${location.pathname}${location.search}`\n                    ),\n                    projectId: job.projectId,\n                    ...(queryParams as unknown as Record<string, string>),\n                  }),\n                });\n              }}\n              btnStyle={{\n                padding: 0,\n              }}\n            />\n          )}\n        </>\n      ),\n    },\n    {\n      title: formatMessage({ id: \"jobDisplayId\" }),\n      dataIndex: \"jobDisplayId\",\n    },\n    {\n      title: formatMessage({ id: \"jobType\" }),\n      dataIndex: \"jobType\",\n      render: (_, record: WorkerJob) => <JobTypeTag type={record.jobType} />,\n    },\n    {\n      title: formatMessage({ id: \"task.detail.workload\" }),\n      dataIndex: \"jobId\",\n      render: (jobId: string, record: WorkerJob) => (\n        <Button\n          type=\"link\"\n          style={{ padding: 0 }}\n          onClick={(e) => showWorkloadModal(e, record)}\n        >\n          {formatMessage({ id: \"common.view\" })}\n        </Button>\n      ),\n    },\n    {\n      title: formatMessage({ id: \"common.status\" }),\n      dataIndex: \"status\",\n      render: (status) => <JobStatusTag status={status} />,\n    },\n    {\n      title: formatMessage({ id: \"task.column.assignTime\" }),\n      dataIndex: \"assignTime\",\n      render: (dt) => <span>{dateFormat(dt)}</span>,\n    },\n    {\n      title: formatMessage({ id: \"task.column.confirmTime\" }),\n      dataIndex: \"confirmTime\",\n      render: (dt) => <span>{dateFormat(dt)}</span>,\n    },\n    {\n      title: formatMessage({ id: \"task.column.contact\" }),\n      dataIndex: \"contactEmail\",\n      render: (value: string) => value || \"-\",\n    },\n    {\n      title: formatMessage({ id: \"task.column.action.labelingResult\" }),\n      render: (record: WorkerJob) => (\n        <span style={{ cursor: \"pointer\" }}>\n          {record.jobType === JobType.LABEL && (\n            <Button\n              type=\"link\"\n              style={{ padding: 0 }}\n              onClick={() =>\n                handleTaskListView(\n                  record.jobId,\n                  record.jobName,\n                  record.projectId\n                )\n              }\n            >\n              {formatMessage({ id: \"common.view\" })}\n            </Button>\n          )}\n        </span>\n      ),\n    },\n  ];\n\n  const searchJobs = (val: string) => {\n    setQueryParams({\n      ...queryParams,\n      pageIndex: 0,\n      jobName: val,\n    });\n  };\n\n  return (\n    <>\n      <Card bordered={false} className=\"with-shadow\">\n        <div style={{ textAlign: \"right\", marginBottom: 15 }}>\n          <Radio.Group\n            buttonStyle=\"solid\"\n            value={queryParams.filter}\n            onChange={filterChange}\n            style={{ margin: \"0 13px\" }}\n          >\n            {Object.keys(filters).map((i) => (\n              <Radio.Button key={i} value={i}>\n                {formatMessage({ id: `task.filter.${i}` })}\n              </Radio.Button>\n            ))}\n          </Radio.Group>\n          <JobNameInputSearchComponent\n            jobName={queryParams.jobName}\n            search={searchJobs}\n          />\n        </div>\n        <Table\n          scroll={{ x: \"max-content\" }}\n          className={globalStyles.tableStriped}\n          columns={columns}\n          rowKey=\"id\"\n          loading={loading}\n          dataSource={jobs}\n          pagination={{\n            onChange: pageChange,\n            total: totalJobs,\n            pageSize: queryParams.pageSize,\n            current: queryParams.pageIndex + 1,\n            showSizeChanger: true,\n            pageSizeOptions: PAGE_SIZE_OPTIONS,\n            showTotal: (total: number) =>\n              formatMessage({ id: \"common.total.items\" }, { items: total }),\n          }}\n          locale={{\n            emptyText: (\n              <Empty description={formatMessage({ id: \"task.table.empty\" })} />\n            ),\n          }}\n        />\n      </Card>\n      <WorkloadModal\n        jobId={currentJob?.jobId}\n        jobType={currentJob?.jobType}\n        visible={currentJob !== null}\n        onCancel={() => setCurrentJob(null)}\n      />\n    </>\n  );\n}\n\nfunction mapStateToProps({ workerJob, loading }: ConnectState) {\n  return {\n    jobs: workerJob.jobs,\n    totalJobs: workerJob.totalJobs,\n    totalAssignedJobs: workerJob.totalAssignedJobs,\n    loading: loading.effects[\"workerJob/getWorkerJobs\"],\n  };\n}\n\nexport default connect(mapStateToProps)(JobHistoryList);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/worker-job/JobHistoryList.tsx"
    },
    "35": {
      "name": "history",
      "path": "/worker-jobs/:jobId/annotation-result-list",
      "hideInMenu": true,
      "file": "@/pages/worker-job/AnnotationResultList.tsx",
      "parentId": "28",
      "id": "35",
      "absPath": "/worker-jobs/:jobId/annotation-result-list",
      "__content": "import { PictureOutlined } from \"@ant-design/icons\";\nimport { Card, Empty, message, Table } from \"antd\";\nimport type { ColumnProps } from \"antd/es/table\";\nimport { useEffect, useState } from \"react\";\nimport { history as router, useIntl } from \"@umijs/max\";\nimport { pathToRegexp } from \"path-to-regexp\";\n\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport { mapStatusToErrorMessage } from \"@/utils/utils\";\nimport type { TaskRecordStatus, WorkerJobResult } from \"@/types/task\";\nimport { DEFAULT_PAGE_SIZE, PAGE_SIZE_OPTIONS } from \"@/utils/constants\";\nimport { getWorkerJobTaskList } from \"@/services/task\";\nimport { HttpStatus } from \"@/types/http\";\nimport { mongoDateFormat } from \"@/utils/time-util\";\n\nimport globalStyles from \"@/global.less\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { getMashupAPIPrefix } from \"@/utils/env\";\n\ninterface Query {\n  pageIndex?: number;\n  pageSize?: number;\n  jobId: string;\n}\n\nfunction AnnotationResultList() {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n  const [loading, setLoading] = useState(false);\n  const [taskList, setTaskList] = useState([]);\n  const [total, setTotal] = useState(0);\n\n  const [, , jobId] = pathToRegexp(\n    \"/:version?/worker-jobs/:jobId/annotation-result-list\"\n  ).exec(location.pathname);\n\n  const { jobName, projectId } = location.query;\n\n  const [query, setQuery] = useState<Query>({\n    pageIndex: 0,\n    pageSize: DEFAULT_PAGE_SIZE,\n    jobId,\n  });\n\n  useEffect(() => {\n    setLoading(true);\n    getWorkerJobTaskList(query)\n      .then((resp) => {\n        if (resp.status === HttpStatus.OK) {\n          setTaskList(resp.data.results);\n          setTotal(resp.data.totalElements);\n        } else {\n          message.error(mapStatusToErrorMessage(resp));\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [query]);\n\n  const pageChange = (page: number, size: number) => {\n    setQuery({\n      ...query,\n      pageIndex: page - 1,\n      pageSize: size,\n    });\n  };\n\n  const columns: ColumnProps<WorkerJobResult>[] = [\n    {\n      dataIndex: \"recordId\",\n      title: formatMessage({ id: \"common.column.recordId\" }),\n    },\n    {\n      dataIndex: \"labelingTime\",\n      title: formatMessage({ id: \"error-task.annotationTime\" }),\n      render: (time) => mongoDateFormat(time),\n    },\n    {\n      dataIndex: \"lastModifiedTime\",\n      title: formatMessage({ id: \"task.column.lastModifiedTime\" }),\n      render: (time) => mongoDateFormat(time),\n    },\n    {\n      dataIndex: \"status\",\n      title: formatMessage({ id: \"common.status\" }),\n      render: (status: TaskRecordStatus) => {\n        if (status) {\n          return formatMessage({\n            id: `task.column.status.${status?.toLowerCase()}`,\n          });\n        }\n        return formatMessage({ id: \"common.nothing-symbol\" });\n      },\n    },\n    {\n      title: formatMessage({ id: \"task.column.labelingCompare\" }),\n      render: (row) => (\n        <span style={{ cursor: \"pointer\" }}>\n          <PictureOutlined\n            style={{ fontSize: 18 }}\n            onClick={() => {\n              const q = new URLSearchParams({\n                jobId,\n                finalDocId: row.finalDocId,\n                originDocId: row.originDocId,\n                recordId: row.recordId,\n                projectId: projectId as string,\n              }).toString();\n              window.open(\n                `${getMashupAPIPrefix()}/ssr/qa-report?${q}`,\n                \"_blank\"\n              );\n            }}\n          />\n        </span>\n      ),\n    },\n  ];\n\n  const onBack = () => {\n    router.goBack();\n  };\n\n  return (\n    <HeaderContentWrapperComponent\n      title={jobName}\n      backTitle={formatMessage({ id: \"menu.tasks.history\" })}\n      onBack={onBack}\n    >\n      <Card\n        bordered={false}\n        className=\"with-shadow\"\n        title={formatMessage({ id: \"task.column.action.labelingResult\" })}\n      >\n        <Table\n          scroll={{ x: \"max-content\" }}\n          className={globalStyles.tableStriped}\n          columns={columns}\n          rowKey=\"recordId\"\n          loading={loading}\n          dataSource={taskList}\n          pagination={{\n            onChange: pageChange,\n            total,\n            pageSize: query.pageSize,\n            current: query.pageIndex + 1,\n            showSizeChanger: true,\n            pageSizeOptions: PAGE_SIZE_OPTIONS,\n            showTotal: (totalNum: number) =>\n              formatMessage({ id: \"common.total.items\" }, { items: totalNum }),\n          }}\n          locale={{\n            emptyText: (\n              <Empty description={formatMessage({ id: \"task.table.empty\" })} />\n            ),\n          }}\n        />\n      </Card>\n    </HeaderContentWrapperComponent>\n  );\n}\n\nexport default AnnotationResultList;\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/worker-job/AnnotationResultList.tsx"
    },
    "36": {
      "name": "workerJobDetail",
      "path": "/worker-job/:jobId",
      "hideInMenu": true,
      "file": "@/pages/worker-job/WorkerJobDetail.tsx",
      "parentId": "4",
      "id": "36",
      "absPath": "/worker-job/:jobId",
      "__content": "import { useEffect, useState } from \"react\";\nimport { Card, Empty, message, Skeleton } from \"antd\";\nimport type { Dispatch } from \"redux\";\nimport { history as router, useIntl } from \"@umijs/max\";\nimport { connect } from \"react-redux\";\nimport HeaderContentWrapperComponent from \"@/components/HeaderContentWrapper/HeaderContentWrapper\";\nimport type { WorkerJob } from \"@/types/task\";\nimport { JobActionTypes, WorkerJobStatus } from \"@/types/task\";\nimport JobInfoCard from \"@/pages/worker-job/components/JobInfoCard\";\nimport type { ConnectState } from \"@/models/connect\";\nimport { openWorkerTaskPageV3 } from \"@/utils/utils\";\nimport WorkerJobActionButtons from \"@/pages/worker-job/components/WorkerJobActionButtons\";\nimport WorkerLifeCycleComponent from \"@/pages/worker-job/components/WorkerLifecycle\";\nimport type { WorkerLifecycle } from \"@/types/worker\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { base64Decode } from \"@/utils/string-util\";\n\ntype WorkerJobDetailProp = {\n  dispatch: Dispatch;\n  job: WorkerJob;\n  loading: boolean;\n  applying: boolean;\n  workerLifecycle: WorkerLifecycle;\n};\n\nfunction WorkerJobDetailPage({\n  dispatch,\n  job,\n  loading,\n  workerLifecycle,\n}: WorkerJobDetailProp) {\n  const { formatMessage } = useIntl();\n  const location = useLocationWithQuery();\n  const { projectId } = location.query;\n  const { status = null, jobId, jobStatus, jobType } = job || {};\n\n  const [btnDisabled, setBtnDisabled] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      dispatch({ type: \"workerJob/saveWorkJobDetail\", payload: null });\n    };\n  }, []);\n\n  const getJobInfo = () => {\n    dispatch({ type: \"workerJob/getWorkerJobDetail\", payload: jobId });\n    dispatch({ type: \"workerJob/getWorkerLifecycle\", payload: jobId });\n  };\n\n  const handleJobStatusUpdate = (type: JobActionTypes) => {\n    setBtnDisabled(true);\n    dispatch({\n      type: \"workerJob/updateWorkerJobs\",\n      payload: {\n        actionType: type,\n        data: [jobId],\n        onSuccess: () => {\n          if (type === JobActionTypes.reject) {\n            message.success(\n              formatMessage({ id: \"task.reject.success.one.title\" }),\n              3,\n              () => router.push(\"/worker-jobs/tasks/pending\")\n            );\n          } else {\n            setBtnDisabled(false);\n            message.success(\n              formatMessage({ id: \"common.message.success.operation\" })\n            );\n            getJobInfo();\n          }\n        },\n        onError: (detail: string) => {\n          setBtnDisabled(false);\n          if (detail) {\n            message.error(\n              formatMessage({ id: \"common.message.fail.operation\" }, { detail })\n            );\n          }\n        },\n      },\n    });\n  };\n\n  const jobAction = () => {\n    openWorkerTaskPageV3(\n      jobType,\n      jobId,\n      job.flowId,\n      job.jobName,\n      job.projectId || (projectId as string)\n    );\n  };\n\n  const handleBack = () => {\n    const targetURL = base64Decode(location.query.from as string);\n\n    router.push(targetURL);\n  };\n\n  return (\n    <HeaderContentWrapperComponent\n      title={formatMessage({ id: \"task.detail.title\" })}\n      backTitle={formatMessage({ id: \"task.detail.back\" })}\n      onBack={handleBack}\n    >\n      <Skeleton loading={loading}>\n        <Card bordered={false} className=\"with-shadow\">\n          {job ? (\n            <>\n              <JobInfoCard job={job} />\n              <WorkerLifeCycleComponent\n                workerLifecycle={workerLifecycle}\n                jobStatus={jobStatus}\n                workerStatus={status as WorkerJobStatus}\n              />\n              <div className=\"text-right\" style={{ marginRight: 50 }}>\n                <WorkerJobActionButtons\n                  disabled={btnDisabled}\n                  handleJobStatusUpdate={handleJobStatusUpdate}\n                  launch={jobAction}\n                  jobStatus={jobStatus}\n                  status={status as WorkerJobStatus}\n                />\n              </div>\n            </>\n          ) : (\n            <Empty description={formatMessage({ id: \"task.job-not-found\" })} />\n          )}\n        </Card>\n      </Skeleton>\n    </HeaderContentWrapperComponent>\n  );\n}\n\nfunction mapStateToProps({ workerJob, loading }: ConnectState) {\n  return {\n    loading:\n      loading.effects[\"workerJob/getWorkerJobDetail\"] ||\n      loading.effects[\"workerJob/getWorkerLifecycle\"] ||\n      false,\n    applying: loading.effects[\"workerJob/workerApplyPublicJob\"],\n    job: workerJob.jobDetail,\n    workerLifecycle: workerJob.workerLifecycle,\n  };\n}\n\nexport default connect(mapStateToProps)(WorkerJobDetailPage);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/worker-job/WorkerJobDetail.tsx"
    },
    "37": {
      "name": "workforce",
      "icon": "team",
      "path": "/workforce",
      "file": "@/pages/workforce/WorkforceManagement.tsx",
      "parentId": "4",
      "id": "37",
      "absPath": "/workforce",
      "__content": "import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { message } from \"antd\";\nimport type { GlobalTag } from \"@/types/vm\";\nimport {\n  activateUser,\n  assignRole,\n  createUser,\n  deleteUser,\n  getAllRoles,\n  getPrivateUserCount,\n  getPrivateUserLimit,\n  getUserList,\n  getUserTags,\n  inactivateUser,\n  UserFilter,\n} from \"@/services/user\";\nimport { mapStatusToErrorMessage } from \"@/utils/utils\";\nimport { Role, RoleType } from \"@/types/auth\";\nimport { ConnectState } from \"@/models/connect\";\nimport WorkerList from \"@/components/WorkerList\";\nimport { NewUser } from \"@/types/user\";\n\nfunction WorkforceManagement() {\n  const [loading, setLoading] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [tags, setTags] = useState<GlobalTag[]>([]);\n  const [total, setTotal] = useState(0);\n  const [workerNum, setWorkerNum] = useState({ count: 0, limit: 0 });\n\n  const addWorker = (values: NewUser) => {\n    return createUser(values);\n  };\n\n  const getRoles = async () => {\n    try {\n      const resp = await getAllRoles();\n      setRoles(\n        resp.data.filter(\n          (item) => item.type !== RoleType.BPO && item.name !== \"Auditor\"\n        )\n      );\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    }\n  };\n\n  const getTags = async () => {\n    try {\n      const resp = await getUserTags();\n      setTags(resp.data);\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    }\n  };\n\n  const getUsers = async (\n    filterValues: UserFilter,\n    sortInfo: Record<string, any>\n  ) => {\n    setLoading(true);\n    try {\n      const resp = await getUserList({ ...filterValues, ...(sortInfo || {}) });\n      setUsers(resp.data.results);\n      setTotal(resp.data.totalElements);\n      getCount();\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteWorker = (userId: string | number) => {\n    return deleteUser({ userId });\n  };\n  const enableWorker = (userId: string | number) => {\n    return activateUser({ userId });\n  };\n  const disableWorker = (userId: string | number) => {\n    return inactivateUser({ userId });\n  };\n  const getCount = () => {\n    Promise.all([getPrivateUserCount(), getPrivateUserLimit()])\n      .then((resp) => {\n        const [countResp, limitResp] = resp;\n        setWorkerNum({ count: countResp.data, limit: limitResp.data });\n      })\n      .catch((e) => message.error(mapStatusToErrorMessage(e)));\n  };\n  const roleChange = (userId: number | string, roleId: string[]) => {\n    return assignRole({ userId, roleId });\n  };\n\n  useEffect(() => {\n    getRoles();\n    getTags();\n  }, []);\n\n  return (\n    <WorkerList\n      tags={tags}\n      roles={roles}\n      users={users}\n      workerNum={workerNum}\n      total={total}\n      loading={loading}\n      deleteUser={deleteWorker}\n      addUser={addWorker}\n      disableUser={disableWorker}\n      enableUser={enableWorker}\n      getUsers={getUsers}\n      tagRefresh={getTags}\n      roleChange={roleChange}\n      type={RoleType.INTERNAL}\n    />\n  );\n}\n\nfunction mapStateToProps({ user }: ConnectState) {\n  return {\n    currentUser: user.currentUser,\n  };\n}\n\nexport default connect(mapStateToProps)(WorkforceManagement);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/workforce/WorkforceManagement.tsx"
    },
    "38": {
      "name": "workforce",
      "icon": "team",
      "path": "/bpo-workforce",
      "file": "@/pages/bpo/bpopm/BpoWorkerList.tsx",
      "parentId": "4",
      "id": "38",
      "absPath": "/bpo-workforce",
      "__content": "import { useEffect, useState } from \"react\";\nimport { message } from \"antd\";\nimport { connect } from \"react-redux\";\nimport WorkerList, { UserFilter } from \"@/components/WorkerList\";\nimport {\n  activeBpoUser,\n  assignRole,\n  createBpoUser,\n  deleteBpoUser,\n  getAllRoles,\n  getBpoUserList,\n  getBpoUserTags,\n} from \"@/services/user\";\nimport { mapStatusToErrorMessage } from \"@/utils/utils\";\nimport { Role, RoleType } from \"@/types/auth\";\nimport { Tag } from \"@/pages/bpo/components/BPOTagComponent\";\nimport { ConnectState } from \"@/models/connect\";\nimport { NewUser, UserStatus } from \"@/types/user\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport { getBpoDetail } from \"@/services/vm\";\nimport { HttpStatus } from \"@/types/http\";\nimport useLocationWithQuery from \"@/hooks/useLocationWithQuery\";\nimport { BPO, BPOActiveStatus } from \"@/types/vm\";\n\nfunction BpoWorkerList() {\n  const [loading, setLoading] = useState(false);\n  const location = useLocationWithQuery();\n  const [users, setUsers] = useState([]);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [tags, setTags] = useState<Tag[]>([]);\n  const [total, setTotal] = useState(0);\n  const [workerNum, setWorkerNum] = useState({ count: 0, limit: 0 });\n  const [bpoInfo, setBpoInfo] = useState<BPO>(null);\n  const pathSegments: string[] =\n    pathToRegexp(`/bpo/:jobId/workforce`).exec(location.pathname) || [];\n  const [, bpoId] = pathSegments;\n  const getRoles = async () => {\n    try {\n      const resp = await getAllRoles();\n      setRoles(resp.data.filter((item: Role) => item.type === RoleType.BPO));\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    }\n  };\n  const addWorker = (values: NewUser) => {\n    return createBpoUser({ ...values, bpoId });\n  };\n  const deleteWorker = (userId: string | number) => {\n    return deleteBpoUser({ userId, bpoId });\n  };\n  const enableWorker = (userId: string | number) => {\n    return activeBpoUser({ userId, bpoId, activeStatus: UserStatus.ACTIVE });\n  };\n  const roleChange = (userId: string | number, roleId: string[]) => {\n    return assignRole({ userId, bpoId, roleId });\n  };\n  const disableWorker = (userId: string | number) => {\n    return activeBpoUser({ userId, bpoId, activeStatus: UserStatus.INACTIVE });\n  };\n  const getTags = async () => {\n    try {\n      const resp = await getBpoUserTags(bpoId);\n      setTags(resp.data || []);\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    }\n  };\n  const getDetail = async () => {\n    try {\n      const resp = await getBpoDetail(bpoId);\n      if (resp.status !== HttpStatus.OK) {\n        message.error(mapStatusToErrorMessage(resp));\n      } else {\n        setWorkerNum({\n          count: resp.data.currentWorkerNumber,\n          limit: resp.data.workerNumber,\n        });\n        setBpoInfo(resp.data);\n      }\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getUsers = async (\n    filterValues: UserFilter,\n    sortInfo: Record<string, any>\n  ) => {\n    setLoading(true);\n    try {\n      const resp = await getBpoUserList({\n        ...filterValues,\n        ...(sortInfo || {}),\n        bpoId,\n      });\n      setUsers(resp.data.results);\n      setTotal(resp.data.totalElements);\n      getDetail();\n    } catch (e) {\n      message.error(mapStatusToErrorMessage(e));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    getRoles();\n    getTags();\n  }, []);\n  return (\n    <WorkerList\n      isBpo\n      bpoId={bpoId}\n      bpoName={bpoInfo?.name}\n      disabled={bpoInfo?.activeStatus === BPOActiveStatus.INACTIVE}\n      tags={tags}\n      roles={roles}\n      users={users}\n      total={total}\n      loading={loading}\n      workerNum={workerNum}\n      deleteUser={deleteWorker}\n      addUser={addWorker}\n      disableUser={disableWorker}\n      enableUser={enableWorker}\n      getUsers={getUsers}\n      tagRefresh={getTags}\n      roleChange={roleChange}\n      type={RoleType.BPO}\n    />\n  );\n}\n\nfunction mapStateToProps({ user }: ConnectState) {\n  return {\n    currentUser: user.currentUser,\n  };\n}\n\nexport default connect(mapStateToProps)(BpoWorkerList);\n",
      "__isJSFile": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/bpopm/BpoWorkerList.tsx"
    },
    "ant-design-pro-layout": {
      "id": "ant-design-pro-layout",
      "path": "/",
      "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/.umi-production/plugin-layout/Layout.tsx",
      "absPath": "/",
      "isLayout": true,
      "__absFile": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/.umi-production/plugin-layout/Layout.tsx"
    }
  },
  "apiRoutes": {},
  "hasSrcDir": true,
  "npmClient": "pnpm",
  "umi": {
    "version": "4.4.10",
    "name": "Umi Max",
    "importSource": "@umijs/max",
    "cliName": "max"
  },
  "bundleStatus": {
    "done": false
  },
  "mfsuBundleStatus": {
    "done": false
  },
  "react": {
    "version": "18.3.1",
    "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/react"
  },
  "react-dom": {
    "version": "18.3.1",
    "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/react-dom"
  },
  "appJS": {
    "path": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/app.tsx",
    "exports": [
      "antd",
      "dva",
      "getInitialState",
      "layout"
    ]
  },
  "locale": "zh-CN",
  "globalCSS": [
    "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/global.less"
  ],
  "globalJS": [],
  "overridesCSS": [],
  "bundler": "webpack",
  "git": {
    "originUrl": "https://github.com/qierzong/loonshots-web-lite.git"
  },
  "framework": "react",
  "typescript": {
    "tsVersion": "5.8.3",
    "tslibVersion": "2.8.1"
  },
  "antd": {
    "pkgPath": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/antd",
    "version": "5.11.3"
  },
  "pluginDva": {
    "pkgPath": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/.pnpm/@umijs+plugins@4.4.10_@babel+core@7.27.1_@types+react-dom@17.0.26_@types+react@18.3.21_antd@4_riuuwbozfkj64mw47gwyeierzu/node_modules/@umijs/plugins/libs/dva.tsx",
    "models": [
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/models/login.ts",
        "id": "model_1",
        "namespace": "login",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/models/user.ts",
        "id": "model_2",
        "namespace": "user",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/models/bpoJobDetail.ts",
        "id": "model_3",
        "namespace": "bpo.bpoJobDetail",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/bpo/models/bpoList.ts",
        "id": "model_4",
        "namespace": "bpo.bpoList",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/models/dataCenter.ts",
        "id": "model_5",
        "namespace": "project.dataCenter",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/models/project.ts",
        "id": "model_6",
        "namespace": "project.project",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/models/projectAccess.ts",
        "id": "model_7",
        "namespace": "project.projectAccess",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/models/uploadProgress.ts",
        "id": "model_8",
        "namespace": "project.uploadProgress",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/workflow/models/flowCreation.ts",
        "id": "model_9",
        "namespace": "project.workflow.flowCreation",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/workflow/models/flowDetail.ts",
        "id": "model_10",
        "namespace": "project.workflow.flowDetail",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/project/workflow/models/jobDetail.ts",
        "id": "model_11",
        "namespace": "project.workflow.jobDetail",
        "exportName": "default",
        "deps": []
      },
      {
        "file": "/Users/qzheng/Documents/webroot/loonshots-web-lite/src/pages/worker-job/models/workerJob.ts",
        "id": "model_12",
        "namespace": "worker-job.workerJob",
        "exportName": "default",
        "deps": []
      }
    ]
  },
  "pluginLayout": {
    "pkgPath": "/Users/qzheng/Documents/webroot/loonshots-web-lite/node_modules/@ant-design/pro-components",
    "version": "2.8.7"
  }
}
